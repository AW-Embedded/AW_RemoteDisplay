
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b98  0802a550  0802a550  0003a550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802f0e8  0802f0e8  0003f0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802f100  0802f100  00132fb4  2**0
                  CONTENTS
  5 .ARM          00000008  0802f100  0802f100  0003f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802f108  0802f108  00132fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802f108  0802f108  0003f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802f124  0802f124  0003f124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802f12c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015454  20000124  0802f250  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20015578  0802f250  00045578  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00132fb4  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00140000  2**2
                  ALLOC
 14 ExtFlashSection 000e1a60  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 0000151c  900e1a60  900e1a60  00131a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000038  900e2f7c  900e2f7c  00132f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000d7886  00000000  00000000  00132fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00018aee  00000000  00000000  0020a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000032a0  00000000  00000000  00223358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005598  00000000  00000000  002265f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00039f3c  00000000  00000000  0022bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00072895  00000000  00000000  00265acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001278a2  00000000  00000000  002d8361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  003ffc03  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009ce8  00000000  00000000  003ffcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00050ec3  00000000  00000000  004099bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802a538 	.word	0x0802a538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802a538 	.word	0x0802a538

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f007 be2e 	b.w	8008a54 <vTaskSetApplicationTaskTag>
 8000df8:	08001e31 	.word	0x08001e31

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 f816 	bl	8006e30 <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f028 fa1a 	bl	802924c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f028 fa15 	bl	802924c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f004 ff9e 	bl	8005dac <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f004 fc4a 	bl	8005708 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f005 f979 	bl	8006184 <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f028 f9cb 	bl	802924c <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f003 fb80 	bl	80045bc <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc6      	ldr	r3, [pc, #792]	; (80011d8 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f003 fb95 	bl	80045f8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f003 fb8b 	bl	80045f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f003 fb78 	bl	80045d8 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4aba      	ldr	r2, [pc, #744]	; (80011dc <main+0x33c>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f003 fa95 	bl	8004484 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f028 f971 	bl	802924c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489d      	ldr	r0, [pc, #628]	; (80011e4 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d98      	ldr	r5, [pc, #608]	; (80011e8 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e97      	ldr	r6, [pc, #604]	; (80011ec <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f003 fe27 	bl	8004ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4866      	ldr	r0, [pc, #408]	; (80011f0 <main+0x350>)
 8001058:	f003 fe22 	bl	8004ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x354>)
 8001064:	f003 fe1c 	bl	8004ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <main+0x358>)
 800106e:	f003 fe17 	bl	8004ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <main+0x35c>)
 8001078:	f003 fe12 	bl	8004ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	4859      	ldr	r0, [pc, #356]	; (80011e4 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f003 fc84 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f003 fc7b 	bl	8004994 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f003 fc73 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f003 fc6a 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f003 fc61 	bl	8004994 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x360>)
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f003 fab6 	bl	8004650 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4948      	ldr	r1, [pc, #288]	; (8001208 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f003 fb4c 	bl	8004794 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d42      	ldr	r5, [pc, #264]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f003 fbff 	bl	8004904 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4940      	ldr	r1, [pc, #256]	; (8001210 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f005 fb75 	bl	8006830 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f005 fb8a 	bl	8006870 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f003 f9b5 	bl	80044cc <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f005 fb7d 	bl	8006870 <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f005 fb72 	bl	8006870 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f005 fb64 	bl	8006870 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d19      	ldr	r5, [pc, #100]	; (8001214 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f005 fb7d 	bl	80068ae <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <main+0x378>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011ca:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011d2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011d6:	e023      	b.n	8001220 <main+0x380>
 80011d8:	0300001b 	.word	0x0300001b
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	20000304 	.word	0x20000304
 80011f0:	40022800 	.word	0x40022800
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40021800 	.word	0x40021800
 8001200:	20000158 	.word	0x20000158
 8001204:	40023000 	.word	0x40023000
 8001208:	4002b000 	.word	0x4002b000
 800120c:	20000140 	.word	0x20000140
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200001bc 	.word	0x200001bc
 8001218:	20404768 	.word	0x20404768
 800121c:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	f003 fe65 	bl	8004ef2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f004 f884 	bl	8005338 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001234:	4d3e      	ldr	r5, [pc, #248]	; (8001330 <main+0x490>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	f004 f8a5 	bl	8005384 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	2234      	movs	r2, #52	; 0x34
 800123c:	4621      	mov	r1, r4
 800123e:	eb0d 0002 	add.w	r0, sp, r2
 8001242:	f028 f803 	bl	802924c <memset>
  hltdc.Instance = LTDC;
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <main+0x494>)
  hltdc.Init.VerticalSync = 9;
 8001248:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 800124a:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 800124c:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001252:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001254:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001262:	230b      	movs	r3, #11
 8001264:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001268:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800126c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 800126e:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001272:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800127a:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127e:	f004 f92d 	bl	80054dc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001282:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001284:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 800128c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001290:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 8001294:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001296:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 800129a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 800129e:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a2:	2105      	movs	r1, #5
 80012a4:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012ac:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b0:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b4:	4622      	mov	r2, r4
 80012b6:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b8:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	f004 f9d9 	bl	8005672 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c0:	481d      	ldr	r0, [pc, #116]	; (8001338 <main+0x498>)
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <main+0x49c>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012c6:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ca:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d2:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012da:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012de:	f004 fb23 	bl	8005928 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012e2:	f002 ff4d 	bl	8004180 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012e6:	f002 fe91 	bl	800400c <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012ea:	205c      	movs	r0, #92	; 0x5c
 80012ec:	f003 f952 	bl	8004594 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f0:	f000 fb5e 	bl	80019b0 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012f4:	f000 fb88 	bl	8001a08 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80012f8:	f000 fb85 	bl	8001a06 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80012fc:	f005 fd08 	bl	8006d10 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <main+0x4a0>)
 8001302:	4621      	mov	r1, r4
 8001304:	480f      	ldr	r0, [pc, #60]	; (8001344 <main+0x4a4>)
 8001306:	f005 fd3d 	bl	8006d84 <osThreadNew>
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <main+0x4a8>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <main+0x4ac>)
 800130e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001310:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <main+0x4b0>)
 8001314:	f005 fd36 	bl	8006d84 <osThreadNew>
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <main+0x4b4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <main+0x4b8>)
 800131c:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131e:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <main+0x4bc>)
 8001322:	f005 fd2f 	bl	8006d84 <osThreadNew>
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <main+0x4c0>)
 8001328:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800132a:	f005 fd0b 	bl	8006d44 <osKernelStart>
  while (1)
 800132e:	e7fe      	b.n	800132e <main+0x48e>
 8001330:	20000210 	.word	0x20000210
 8001334:	40016800 	.word	0x40016800
 8001338:	200002b8 	.word	0x200002b8
 800133c:	a0001000 	.word	0xa0001000
 8001340:	0802a5d8 	.word	0x0802a5d8
 8001344:	08000dfd 	.word	0x08000dfd
 8001348:	20000154 	.word	0x20000154
 800134c:	0802a5b4 	.word	0x0802a5b4
 8001350:	08001a0d 	.word	0x08001a0d
 8001354:	20000150 	.word	0x20000150
 8001358:	0802a5fc 	.word	0x0802a5fc
 800135c:	080031d5 	.word	0x080031d5
 8001360:	20000338 	.word	0x20000338

08001364 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001364:	6802      	ldr	r2, [r0, #0]
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001368:	429a      	cmp	r2, r3
 800136a:	d101      	bne.n	8001370 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800136c:	f003 b89c 	b.w	80044a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40001000 	.word	0x40001000

08001378 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x38>)
{
 800137e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001380:	210f      	movs	r1, #15
 8001382:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ae:	f003 b8b1 	b.w	8004514 <HAL_NVIC_SetPriority>
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b8:	6802      	ldr	r2, [r0, #0]
{
 80013ba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_CRC_MspInit+0x28>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d10b      	bne.n	80013da <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c2:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013da:	b002      	add	sp, #8
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023000 	.word	0x40023000

080013e4 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_DMA2D_MspInit+0x3c>)
{
 80013e6:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d115      	bne.n	800141a <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ee:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013f2:	2105      	movs	r1, #5
 80013f4:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800140a:	f003 f883 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001410:	b003      	add	sp, #12
 8001412:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001416:	f003 b8af 	b.w	8004578 <HAL_NVIC_EnableIRQ>
}
 800141a:	b003      	add	sp, #12
 800141c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001420:	4002b000 	.word	0x4002b000

08001424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001424:	b510      	push	{r4, lr}
 8001426:	b0a8      	sub	sp, #160	; 0xa0
 8001428:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	2214      	movs	r2, #20
 800142c:	2100      	movs	r1, #0
 800142e:	a802      	add	r0, sp, #8
 8001430:	f027 ff0c 	bl	802924c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	2284      	movs	r2, #132	; 0x84
 8001436:	2100      	movs	r1, #0
 8001438:	a807      	add	r0, sp, #28
 800143a:	f027 ff07 	bl	802924c <memset>
  if(hi2c->Instance==I2C3)
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_I2C_MspInit+0x7c>)
 8001442:	429a      	cmp	r2, r3
 8001444:	d12a      	bne.n	800149c <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800144c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f004 ff67 	bl	8006320 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	b108      	cbz	r0, 8001458 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001454:	f7ff ff90 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001458:	4c12      	ldr	r4, [pc, #72]	; (80014a4 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6323      	str	r3, [r4, #48]	; 0x30
 800146a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001484:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001486:	f003 fa85 	bl	8004994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800148c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001490:	6423      	str	r3, [r4, #64]	; 0x40
 8001492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800149c:	b028      	add	sp, #160	; 0xa0
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021c00 	.word	0x40021c00

080014ac <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014ac:	6802      	ldr	r2, [r0, #0]
{
 80014ae:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x2c>)
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d10f      	bne.n	80014d6 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c4:	f003 fb4a 	bl	8004b5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014d2:	f003 bb43 	b.w	8004b5c <HAL_GPIO_DeInit>
}
 80014d6:	bd08      	pop	{r3, pc}
 80014d8:	40005c00 	.word	0x40005c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021c00 	.word	0x40021c00

080014e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	b0ac      	sub	sp, #176	; 0xb0
 80014e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	2214      	movs	r2, #20
 80014ec:	2100      	movs	r1, #0
 80014ee:	a806      	add	r0, sp, #24
 80014f0:	f027 feac 	bl	802924c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	2284      	movs	r2, #132	; 0x84
 80014f6:	2100      	movs	r1, #0
 80014f8:	a80b      	add	r0, sp, #44	; 0x2c
 80014fa:	f027 fea7 	bl	802924c <memset>
  if(hltdc->Instance==LTDC)
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_LTDC_MspInit+0x140>)
 8001502:	429a      	cmp	r2, r3
 8001504:	f040 808c 	bne.w	8001620 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001508:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800150a:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800150c:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150e:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001510:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001514:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001522:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f004 fefb 	bl	8006320 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	b108      	cbz	r0, 8001530 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 800152c:	f7ff ff24 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001536:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	a906      	add	r1, sp, #24
 800153c:	483b      	ldr	r0, [pc, #236]	; (800162c <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
 8001544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001546:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f042 0210 	orr.w	r2, r2, #16
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f002 0210 	and.w	r2, r2, #16
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001580:	9203      	str	r2, [sp, #12]
 8001582:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001592:	9204      	str	r2, [sp, #16]
 8001594:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2310      	movs	r3, #16
 80015aa:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b2:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	f003 f9ee 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b8:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015bc:	a906      	add	r1, sp, #24
 80015be:	481c      	ldr	r0, [pc, #112]	; (8001630 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015ca:	f003 f9e3 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ce:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015d0:	a906      	add	r1, sp, #24
 80015d2:	4818      	ldr	r0, [pc, #96]	; (8001634 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015de:	f003 f9d9 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e6:	a906      	add	r1, sp, #24
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ee:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f4:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f6:	f003 f9cd 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015fa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fe:	a906      	add	r1, sp, #24
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001602:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800160c:	f003 f9c2 	bl	8004994 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001610:	2058      	movs	r0, #88	; 0x58
 8001612:	4622      	mov	r2, r4
 8001614:	2105      	movs	r1, #5
 8001616:	f002 ff7d 	bl	8004514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800161a:	2058      	movs	r0, #88	; 0x58
 800161c:	f002 ffac 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001620:	b02c      	add	sp, #176	; 0xb0
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	40016800 	.word	0x40016800
 8001628:	40023800 	.word	0x40023800
 800162c:	40021000 	.word	0x40021000
 8001630:	40022400 	.word	0x40022400
 8001634:	40022800 	.word	0x40022800
 8001638:	40021800 	.word	0x40021800
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	2214      	movs	r2, #20
 8001642:	2100      	movs	r1, #0
{
 8001644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001648:	b08a      	sub	sp, #40	; 0x28
 800164a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	eb0d 0002 	add.w	r0, sp, r2
 8001650:	f027 fdfc 	bl	802924c <memset>
  if(hqspi->Instance==QUADSPI)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_QSPI_MspInit+0xc8>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d151      	bne.n	8001700 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001660:	2403      	movs	r4, #3
 8001662:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166a:	a905      	add	r1, sp, #20
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166e:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
 8001676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001678:	f002 0202 	and.w	r2, r2, #2
 800167c:	9201      	str	r2, [sp, #4]
 800167e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001682:	f042 0210 	orr.w	r2, r2, #16
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
 8001688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168a:	f002 0210 	and.w	r2, r2, #16
 800168e:	9202      	str	r2, [sp, #8]
 8001690:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	f042 0202 	orr.w	r2, r2, #2
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f002 0202 	and.w	r2, r2, #2
 80016a0:	9203      	str	r2, [sp, #12]
 80016a2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a6:	f042 0208 	orr.w	r2, r2, #8
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ba:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f003 f969 	bl	8004994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	a905      	add	r1, sp, #20
 80016c6:	4813      	ldr	r0, [pc, #76]	; (8001714 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016cc:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016d2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f003 f95e 	bl	8004994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	a905      	add	r1, sp, #20
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016dc:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f003 f955 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	a905      	add	r1, sp, #20
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f003 f94a 	bl	8004994 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001700:	b00a      	add	sp, #40	; 0x28
 8001702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001706:	bf00      	nop
 8001708:	a0001000 	.word	0xa0001000
 800170c:	40023800 	.word	0x40023800
 8001710:	40021000 	.word	0x40021000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020c00 	.word	0x40020c00

0800171c <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 800171c:	6802      	ldr	r2, [r0, #0]
{
 800171e:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x34>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d113      	bne.n	800174e <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001728:	2104      	movs	r1, #4
 800172a:	480b      	ldr	r0, [pc, #44]	; (8001758 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 800172c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001734:	f003 fa12 	bl	8004b5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001738:	2144      	movs	r1, #68	; 0x44
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <HAL_QSPI_MspDeInit+0x40>)
 800173c:	f003 fa0e 	bl	8004b5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001740:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800174a:	f003 ba07 	b.w	8004b5c <HAL_GPIO_DeInit>
}
 800174e:	bd08      	pop	{r3, pc}
 8001750:	a0001000 	.word	0xa0001000
 8001754:	40023800 	.word	0x40023800
 8001758:	40021000 	.word	0x40021000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020c00 	.word	0x40020c00

08001764 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001768:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800176a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_SDRAM_MspInit+0xb0>)
 800176e:	681e      	ldr	r6, [r3, #0]
 8001770:	2e00      	cmp	r6, #0
 8001772:	d14d      	bne.n	8001810 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001774:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001778:	2503      	movs	r5, #3
 800177a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800177c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a2:	f003 f8f7 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017aa:	a901      	add	r1, sp, #4
 80017ac:	481c      	ldr	r0, [pc, #112]	; (8001820 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b8:	f003 f8ec 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017bc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	a901      	add	r1, sp, #4
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f003 f8e1 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d6:	a901      	add	r1, sp, #4
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e4:	f003 f8d6 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e8:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ea:	a901      	add	r1, sp, #4
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f8:	f003 f8cc 	bl	8004994 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fc:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	a901      	add	r1, sp, #4
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001802:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f003 f8c2 	bl	8004994 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001810:	b007      	add	sp, #28
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	2000033c 	.word	0x2000033c
 8001818:	40023800 	.word	0x40023800
 800181c:	40021000 	.word	0x40021000
 8001820:	40021800 	.word	0x40021800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021400 	.word	0x40021400
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40020800 	.word	0x40020800

08001834 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_InitTick+0x88>)
 8001836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001838:	f042 0210 	orr.w	r2, r2, #16
{
 800183c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001840:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001844:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001852:	f004 fd47 	bl	80062e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001856:	9b06      	ldr	r3, [sp, #24]
 8001858:	bb4b      	cbnz	r3, 80018ae <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800185a:	f004 fd33 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800185e:	4e18      	ldr	r6, [pc, #96]	; (80018c0 <HAL_InitTick+0x8c>)
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_InitTick+0x90>)
 8001862:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001864:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001868:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_InitTick+0x94>)
 800186c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001870:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001872:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8001874:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 800187e:	f005 f987 	bl	8006b90 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001882:	4604      	mov	r4, r0
 8001884:	b980      	cbnz	r0, 80018a8 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001886:	4630      	mov	r0, r6
 8001888:	f005 f82a 	bl	80068e0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800188c:	4604      	mov	r4, r0
 800188e:	b958      	cbnz	r0, 80018a8 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f002 fe71 	bl	8004578 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	2d0f      	cmp	r5, #15
 8001898:	d80d      	bhi.n	80018b6 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800189a:	4622      	mov	r2, r4
 800189c:	4629      	mov	r1, r5
 800189e:	2036      	movs	r0, #54	; 0x36
 80018a0:	f002 fe38 	bl	8004514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_InitTick+0x98>)
 80018a6:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80018a8:	4620      	mov	r0, r4
 80018aa:	b008      	add	sp, #32
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018ae:	f004 fd09 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 80018b2:	0040      	lsls	r0, r0, #1
 80018b4:	e7d3      	b.n	800185e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80018b6:	2401      	movs	r4, #1
 80018b8:	e7f6      	b.n	80018a8 <HAL_InitTick+0x74>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	20000340 	.word	0x20000340
 80018c4:	40001000 	.word	0x40001000
 80018c8:	000f4240 	.word	0x000f4240
 80018cc:	2000003c 	.word	0x2000003c

080018d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d0:	4770      	bx	lr

080018d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler>

080018d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler>

080018d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler>

080018d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler>

080018da <DebugMon_Handler>:
 80018da:	4770      	bx	lr

080018dc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <TIM6_DAC_IRQHandler+0x8>)
 80018de:	f005 b841 	b.w	8006964 <HAL_TIM_IRQHandler>
 80018e2:	bf00      	nop
 80018e4:	20000340 	.word	0x20000340

080018e8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018e8:	4801      	ldr	r0, [pc, #4]	; (80018f0 <LTDC_IRQHandler+0x8>)
 80018ea:	f003 be65 	b.w	80055b8 <HAL_LTDC_IRQHandler>
 80018ee:	bf00      	nop
 80018f0:	20000210 	.word	0x20000210

080018f4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <DMA2D_IRQHandler+0x8>)
 80018f6:	f002 bf7b 	b.w	80047f0 <HAL_DMA2D_IRQHandler>
 80018fa:	bf00      	nop
 80018fc:	2000017c 	.word	0x2000017c

08001900 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001900:	2001      	movs	r0, #1
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001906:	f027 fb4d 	bl	8028fa4 <__errno>
 800190a:	2316      	movs	r3, #22
 800190c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	bd08      	pop	{r3, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001916:	f027 fb45 	bl	8028fa4 <__errno>
 800191a:	2316      	movs	r3, #22
 800191c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800191e:	e7fe      	b.n	800191e <_exit+0xa>

08001920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	460d      	mov	r5, r1
 8001924:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	460e      	mov	r6, r1
 8001928:	1b73      	subs	r3, r6, r5
 800192a:	429c      	cmp	r4, r3
 800192c:	dc01      	bgt.n	8001932 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800192e:	4620      	mov	r0, r4
 8001930:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001932:	f3af 8000 	nop.w
 8001936:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	e7f5      	b.n	8001928 <_read+0x8>

0800193c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	460d      	mov	r5, r1
 8001940:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	460e      	mov	r6, r1
 8001944:	1b73      	subs	r3, r6, r5
 8001946:	429c      	cmp	r4, r3
 8001948:	dc01      	bgt.n	800194e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800194a:	4620      	mov	r0, r4
 800194c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800194e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	e7f5      	b.n	8001944 <_write+0x8>

08001958 <_close>:

int _close(int file)
{
	return -1;
}
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001962:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001964:	604b      	str	r3, [r1, #4]
}
 8001966:	4770      	bx	lr

08001968 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001968:	2001      	movs	r0, #1
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800196c:	2000      	movs	r0, #0
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <_sbrk+0x30>)
{
 8001972:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001974:	6811      	ldr	r1, [r2, #0]
{
 8001976:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001978:	b909      	cbnz	r1, 800197e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <_sbrk+0x34>)
 800197c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	6810      	ldr	r0, [r2, #0]
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <_sbrk+0x38>)
 8001982:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <_sbrk+0x3c>)
 8001984:	4403      	add	r3, r0
 8001986:	1b09      	subs	r1, r1, r4
 8001988:	428b      	cmp	r3, r1
 800198a:	d906      	bls.n	800199a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800198c:	f027 fb0a 	bl	8028fa4 <__errno>
 8001990:	230c      	movs	r3, #12
 8001992:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001994:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001998:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800199a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800199c:	e7fc      	b.n	8001998 <_sbrk+0x28>
 800199e:	bf00      	nop
 80019a0:	2000038c 	.word	0x2000038c
 80019a4:	20015578 	.word	0x20015578
 80019a8:	20050000 	.word	0x20050000
 80019ac:	00000a00 	.word	0x00000a00

080019b0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80019b0:	4770      	bx	lr
	...

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr  r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019de:	f002 fc67 	bl	80042b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f027 fbed 	bl	80291c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fa5b 	bl	8000ea0 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019f0:	0802f12c 	.word	0x0802f12c
  ldr  r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f8:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019fc:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001a00:	20015578 	.word	0x20015578

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>

08001a06 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a06:	4770      	bx	lr

08001a08 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001a08:	f001 b842 	b.w	8002a90 <touchgfx_init>

08001a0c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a0c:	f001 b8b0 	b.w	8002b70 <touchgfx_taskEntry>

08001a10 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001a10:	6840      	ldr	r0, [r0, #4]
    }
 8001a12:	4770      	bx	lr

08001a14 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001a14:	6041      	str	r1, [r0, #4]
    }
 8001a16:	4770      	bx	lr

08001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001a18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a1c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a24:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a2c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a30:	430a      	orrs	r2, r1
 8001a32:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	4770      	bx	lr
 8001a40:	e0001000 	.word	0xe0001000
 8001a44:	c5acce55 	.word	0xc5acce55

08001a48 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a48:	1a51      	subs	r1, r2, r1
 8001a4a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a4e:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a52:	4770      	bx	lr

08001a54 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a56:	6858      	ldr	r0, [r3, #4]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e0001000 	.word	0xe0001000

08001a60 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a60:	4770      	bx	lr

08001a62 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
 8001a66:	210c      	movs	r1, #12
 8001a68:	f027 fa3c 	bl	8028ee4 <_ZdlPvj>
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	bd10      	pop	{r4, pc}

08001a70 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a70:	6803      	ldr	r3, [r0, #0]
{
 8001a72:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a74:	691b      	ldr	r3, [r3, #16]
{
 8001a76:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a78:	b131      	cbz	r1, 8001a88 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a7a:	4798      	blx	r3
 8001a7c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	4418      	add	r0, r3
 8001a84:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a86:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a88:	4798      	blx	r3
 8001a8a:	60a0      	str	r0, [r4, #8]
}
 8001a8c:	e7fb      	b.n	8001a86 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a90 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a92:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a94:	4a02      	ldr	r2, [pc, #8]	; (8001aa0 <_ZN20STM32TouchController4initEv+0x10>)
 8001a96:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4718      	bx	r3
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000390 	.word	0x20000390

08001aa4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001aa4:	4770      	bx	lr

08001aa6 <_ZN20STM32TouchControllerD0Ev>:
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	f027 fa1a 	bl	8028ee4 <_ZdlPvj>
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001ab6:	4d0a      	ldr	r5, [pc, #40]	; (8001ae0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001ab8:	460c      	mov	r4, r1
    if (tsDriver)
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	b913      	cbnz	r3, 8001ac4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001abe:	2000      	movs	r0, #0
}
 8001ac0:	b003      	add	sp, #12
 8001ac2:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2070      	movs	r0, #112	; 0x70
 8001ac8:	9201      	str	r2, [sp, #4]
 8001aca:	4798      	blx	r3
 8001acc:	9901      	ldr	r1, [sp, #4]
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d0f5      	beq.n	8001abe <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	2070      	movs	r0, #112	; 0x70
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4798      	blx	r3
 8001adc:	2001      	movs	r0, #1
 8001ade:	e7ef      	b.n	8001ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001ae0:	20000390 	.word	0x20000390

08001ae4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ae6:	2301      	movs	r3, #1
{
 8001ae8:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001af4:	f10d 0217 	add.w	r2, sp, #23
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	460a      	mov	r2, r1
 8001afc:	4601      	mov	r1, r0
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <TS_IO_Write+0x30>)
 8001b00:	f003 fa62 	bl	8004fc8 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001b04:	b110      	cbz	r0, 8001b0c <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <TS_IO_Write+0x30>)
 8001b08:	f003 fa44 	bl	8004f94 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001b0c:	b007      	add	sp, #28
 8001b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b12:	bf00      	nop
 8001b14:	200001bc 	.word	0x200001bc

08001b18 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001b1a:	2300      	movs	r3, #0
{
 8001b1c:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001b22:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b26:	2301      	movs	r3, #1
 8001b28:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b2c:	f10d 0117 	add.w	r1, sp, #23
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	4601      	mov	r1, r0
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <TS_IO_Read+0x34>)
 8001b36:	f003 fb21 	bl	800517c <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b3a:	b110      	cbz	r0, 8001b42 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <TS_IO_Read+0x34>)
 8001b3e:	f003 fa29 	bl	8004f94 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b42:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b46:	b007      	add	sp, #28
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b4c:	200001bc 	.word	0x200001bc

08001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b50:	2803      	cmp	r0, #3
 8001b52:	d823      	bhi.n	8001b9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b54:	e8df f000 	tbb	[pc, r0]
 8001b58:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b6a:	f003 b899 	b.w	8004ca0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	fab2 f282 	clz	r2, r2
 8001b78:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001b7c:	e7f5      	b.n	8001b6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	0952      	lsrs	r2, r2, #5
 8001b8a:	e7f6      	b.n	8001b7a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	0952      	lsrs	r2, r2, #5
 8001b9a:	e7e6      	b.n	8001b6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000394 	.word	0x20000394
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40021800 	.word	0x40021800

08001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bb0:	2803      	cmp	r0, #3
 8001bb2:	d823      	bhi.n	8001bfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001bb4:	e8df f000 	tbb	[pc, r0]
 8001bb8:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	3a00      	subs	r2, #0
 8001bc6:	bf18      	it	ne
 8001bc8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bca:	f003 b869 	b.w	8004ca0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	3a00      	subs	r2, #0
 8001bd6:	bf18      	it	ne
 8001bd8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001bdc:	e7f5      	b.n	8001bca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	3a00      	subs	r2, #0
 8001be6:	bf18      	it	ne
 8001be8:	2201      	movne	r2, #1
 8001bea:	e7f6      	b.n	8001bda <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	3a00      	subs	r2, #0
 8001bf6:	bf18      	it	ne
 8001bf8:	2201      	movne	r2, #1
 8001bfa:	e7e6      	b.n	8001bca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000394 	.word	0x20000394
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40021800 	.word	0x40021800

08001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c10:	2803      	cmp	r0, #3
 8001c12:	d80f      	bhi.n	8001c34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001c14:	e8df f000 	tbb	[pc, r0]
 8001c18:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c20:	f003 b843 	b.w	8004caa <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c24:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c28:	e7fa      	b.n	8001c20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	e7fb      	b.n	8001c26 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c2e:	2140      	movs	r1, #64	; 0x40
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c32:	e7f5      	b.n	8001c20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40021800 	.word	0x40021800

08001c44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c44:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c46:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001c4a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001c4e:	4770      	bx	lr

08001c50 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c50:	2000      	movs	r0, #0
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c54:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c56:	3900      	subs	r1, #0
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001c5a:	bf18      	it	ne
 8001c5c:	2101      	movne	r1, #1
 8001c5e:	7019      	strb	r1, [r3, #0]
    }
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200152d3 	.word	0x200152d3

08001c68 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c68:	2000      	movs	r0, #0
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c6e:	b10b      	cbz	r3, 8001c74 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c70:	4608      	mov	r0, r1
 8001c72:	4718      	bx	r3
        }
    }
 8001c74:	4770      	bx	lr

08001c76 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c7a:	4770      	bx	lr

08001c7c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c7c:	6840      	ldr	r0, [r0, #4]
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4718      	bx	r3

08001c84 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c84:	4770      	bx	lr
	...

08001c88 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c88:	b538      	push	{r3, r4, r5, lr}
 8001c8a:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c8c:	f001 f84c 	bl	8002d28 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001c9a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001c9e:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001ca0:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001ca2:	4d06      	ldr	r5, [pc, #24]	; (8001cbc <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001ca4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff feb5 	bl	8001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001cae:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001cb0:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001cb2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	c0000000 	.word	0xc0000000
 8001cbc:	200003a4 	.word	0x200003a4

08001cc0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001cc0:	f001 b80c 	b.w	8002cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001cc4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cc4:	f001 b810 	b.w	8002ce8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001cc8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cca:	f001 f85f 	bl	8002d8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cda:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cde:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ce2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ce6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cea:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cec:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cf0:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf2:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cf6:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf8:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001cfc:	d2f9      	bcs.n	8001cf2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cfe:	3b20      	subs	r3, #32
 8001d00:	f113 0f20 	cmn.w	r3, #32
 8001d04:	d1f2      	bne.n	8001cec <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d14:	f001 b848 	b.w	8002da8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001d18 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d18:	f000 bfbc 	b.w	8002c94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d1c <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d1c:	f001 b962 	b.w	8002fe4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d20 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d20:	f001 b96a 	b.w	8002ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001d24 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d24:	f000 bfc0 	b.w	8002ca8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d28 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d2c:	f015 ff06 	bl	8017b3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	4620      	mov	r0, r4
 8001d34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d3c:	4718      	bx	r3

08001d3e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d3e:	f015 b957 	b.w	8016ff0 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d42 <_ZN11TouchGFXHALD0Ev>:
 8001d42:	b510      	push	{r4, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	217c      	movs	r1, #124	; 0x7c
 8001d48:	f027 f8cc 	bl	8028ee4 <_ZdlPvj>
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d50:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d54:	b11b      	cbz	r3, 8001d5e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d56:	6840      	ldr	r0, [r0, #4]
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4718      	bx	r3
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4770      	bx	lr
	...

08001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d64:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d6a:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d6c:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001d70:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d72:	428c      	cmp	r4, r1
 8001d74:	d009      	beq.n	8001d8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d76:	b93a      	cbnz	r2, 8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d78:	490a      	ldr	r1, [pc, #40]	; (8001da4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d7c:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d7e:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d80:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d82:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d84:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d86:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d88:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d0fc      	beq.n	8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d8e:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d92:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d94:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d96:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d98:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	e7f3      	b.n	8001d86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d9e:	bf00      	nop
 8001da0:	200152cc 	.word	0x200152cc
 8001da4:	200152ca 	.word	0x200152ca
 8001da8:	200152c8 	.word	0x200152c8

08001dac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	460d      	mov	r5, r1
 8001db0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001db2:	b935      	cbnz	r5, 8001dc2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001db6:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001dbe:	f027 f8bf 	bl	8028f40 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001dc2:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001dc6:	3a00      	subs	r2, #0
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001dca:	bf18      	it	ne
 8001dcc:	2201      	movne	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001dd0:	6803      	ldr	r3, [r0, #0]
    }
 8001dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	4718      	bx	r3
 8001ddc:	0802a660 	.word	0x0802a660
 8001de0:	0802a698 	.word	0x0802a698
 8001de4:	0802a6e6 	.word	0x0802a6e6
 8001de8:	200152d2 	.word	0x200152d2

08001dec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001dec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	428b      	cmp	r3, r1
 8001df4:	d803      	bhi.n	8001dfe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d905      	bls.n	8001e0a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e00:	219e      	movs	r1, #158	; 0x9e
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e06:	f027 f89b 	bl	8028f40 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e0c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e10:	801a      	strh	r2, [r3, #0]
    }
 8001e12:	bd08      	pop	{r3, pc}
 8001e14:	200152c8 	.word	0x200152c8
 8001e18:	200152ca 	.word	0x200152ca
 8001e1c:	0802a72b 	.word	0x0802a72b
 8001e20:	0802a78e 	.word	0x0802a78e
 8001e24:	0802a6e6 	.word	0x0802a6e6
 8001e28:	200152ce 	.word	0x200152ce
 8001e2c:	200152d0 	.word	0x200152d0

08001e30 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e30:	4601      	mov	r1, r0
 8001e32:	b508      	push	{r3, lr}
        return instance;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <IdleTaskHook+0x14>)
 8001e36:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e38:	b101      	cbz	r1, 8001e3c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e3a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e3c:	f015 fe98 	bl	8017b70 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e40:	2001      	movs	r0, #1
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	200152d4 	.word	0x200152d4

08001e48 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <_GLOBAL__sub_I_instrumentation+0x14>)
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200003a4 	.word	0x200003a4
 8001e5c:	0802a628 	.word	0x0802a628

08001e60 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e60:	2101      	movs	r1, #1
 8001e62:	2200      	movs	r2, #0
{
 8001e64:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e66:	4608      	mov	r0, r1
 8001e68:	f005 f898 	bl	8006f9c <osSemaphoreNew>
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e6e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e70:	b928      	cbnz	r0, 8001e7e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e74:	2128      	movs	r1, #40	; 0x28
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e7a:	f027 f861 	bl	8028f40 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2104      	movs	r1, #4
 8001e82:	2001      	movs	r0, #1
 8001e84:	f005 f950 	bl	8007128 <osMessageQueueNew>
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e8a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e8c:	b918      	cbnz	r0, 8001e96 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e94:	e7f0      	b.n	8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e96:	bd08      	pop	{r3, pc}
 8001e98:	200003b4 	.word	0x200003b4
 8001e9c:	0802a8ac 	.word	0x0802a8ac
 8001ea0:	0802a8f5 	.word	0x0802a8f5
 8001ea4:	0802a924 	.word	0x0802a924
 8001ea8:	200003b0 	.word	0x200003b0
 8001eac:	0802a983 	.word	0x0802a983

08001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	f005 b8c6 	b.w	8007048 <osSemaphoreAcquire>
 8001ebc:	200003b4 	.word	0x200003b4

08001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ec0:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f005 b8fa 	b.w	80070bc <osSemaphoreRelease>
 8001ec8:	200003b4 	.word	0x200003b4

08001ecc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f005 b8b9 	b.w	8007048 <osSemaphoreAcquire>
 8001ed6:	bf00      	nop
 8001ed8:	200003b4 	.word	0x200003b4

08001edc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001edc:	f7ff bff0 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ee0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	f005 b963 	b.w	80071b4 <osMessageQueuePut>
 8001eee:	bf00      	nop
 8001ef0:	200003b0 	.word	0x200003b0
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001efa:	2300      	movs	r3, #0
 8001efc:	4c07      	ldr	r4, [pc, #28]	; (8001f1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001efe:	a901      	add	r1, sp, #4
 8001f00:	461a      	mov	r2, r3
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f005 f998 	bl	8007238 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	a901      	add	r1, sp, #4
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f005 f991 	bl	8007238 <osMessageQueueGet>
}
 8001f16:	b002      	add	sp, #8
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003b0 	.word	0x200003b0

08001f20 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	4718      	bx	r3

08001f26 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f26:	2001      	movs	r0, #1
 8001f28:	4770      	bx	lr

08001f2a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f2a:	6803      	ldr	r3, [r0, #0]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4718      	bx	r3

08001f30 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001f32:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f36:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f4c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001f54:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f5a:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <_ZN8STM32DMA10initializeEv+0x44>)
 8001f62:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f64:	b002      	add	sp, #8
 8001f66:	4770      	bx	lr
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	2000017c 	.word	0x2000017c
 8001f70:	08001fb9 	.word	0x08001fb9
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f78:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f7c:	4770      	bx	lr
	...

08001f80 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f86:	6003      	str	r3, [r0, #0]
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f92:	f3bf 8f6f 	isb	sy
}
 8001f96:	4770      	bx	lr
 8001f98:	0802ab34 	.word	0x0802ab34
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4604      	mov	r4, r0
}
 8001fa4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001fa8:	f7ff ffea 	bl	8001f80 <_ZN8STM32DMAD1Ev>
 8001fac:	4620      	mov	r0, r4
 8001fae:	f026 ff99 	bl	8028ee4 <_ZdlPvj>
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	bd10      	pop	{r4, pc}
	...

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	200152d4 	.word	0x200152d4

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f015 ff01 	bl	8017de8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0802ab34 	.word	0x0802ab34

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f026 ff8d 	bl	8028f40 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	0802a9c5 	.word	0x0802a9c5
 8002034:	0802a9e0 	.word	0x0802a9e0
 8002038:	0802aa2a 	.word	0x0802aa2a

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f026 ff6f 	bl	8028f40 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	0802a9c5 	.word	0x0802a9c5
 8002070:	0802aa87 	.word	0x0802aa87
 8002074:	0802aa2a 	.word	0x0802aa2a

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002120:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002122:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002124:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002126:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800212c:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 800212e:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002130:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002132:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1111 	movw	r1, #273	; 0x111
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f026 fefc 	bl	8028f40 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	4002b000 	.word	0x4002b000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	0802aad2 	.word	0x0802aad2
 80021bc:	0802aaec 	.word	0x0802aaec
 80021c0:	0802aa2a 	.word	0x0802aa2a
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa6      	ldrh	r6, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021de:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021e2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e4:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e6:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e1      	ldr	r1, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002212:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8002214:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002216:	0a0a      	lsrs	r2, r1, #8
 8002218:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800221c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002220:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002224:	4302      	orrs	r2, r0
 8002226:	430a      	orrs	r2, r1
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800222c:	e7ed      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800222e:	bf00      	nop
 8002230:	4002b000 	.word	0x4002b000
 8002234:	00010009 	.word	0x00010009
 8002238:	00020201 	.word	0x00020201
 800223c:	00030201 	.word	0x00030201

08002240 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:

    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);

    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8002240:	6940      	ldr	r0, [r0, #20]
 8002242:	4770      	bx	lr

08002244 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:

    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002244:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002248:	4770      	bx	lr

0800224a <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800224a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800224c:	b923      	cbnz	r3, 8002258 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800224e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002250:	3800      	subs	r0, #0
 8002252:	bf18      	it	ne
 8002254:	2001      	movne	r0, #1
 8002256:	4770      	bx	lr
 8002258:	2001      	movs	r0, #1
}
 800225a:	4770      	bx	lr

0800225c <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800225c:	6880      	ldr	r0, [r0, #8]
 800225e:	4770      	bx	lr

08002260 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002260:	3004      	adds	r0, #4
{
 8002262:	b510      	push	{r4, lr}
 8002264:	460c      	mov	r4, r1
    *data = videoInfo;
 8002266:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 800226c:	bd10      	pop	{r4, pc}

0800226e <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 800226e:	4770      	bx	lr

08002270 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002270:	b508      	push	{r3, lr}
    assert(0);
 8002272:	4a03      	ldr	r2, [pc, #12]	; (8002280 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002274:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800227c:	f026 fe60 	bl	8028f40 <__assert_func>
 8002280:	0802ab7c 	.word	0x0802ab7c
 8002284:	0802c477 	.word	0x0802c477
 8002288:	0802abd7 	.word	0x0802abd7

0800228c <_ZN20SoftwareMJPEGDecoderD0Ev>:
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	2148      	movs	r1, #72	; 0x48
 8002292:	f026 fe27 	bl	8028ee4 <_ZdlPvj>
 8002296:	4620      	mov	r0, r4
 8002298:	bd10      	pop	{r4, pc}
	...

0800229c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800229c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022a0:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80022a4:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80022a8:	4605      	mov	r5, r0
 80022aa:	460e      	mov	r6, r1
 80022ac:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d052      	beq.n	8002358 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022b2:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80022b4:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80022b6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002360 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 80022be:	f00d f961 	bl	800f584 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 80022c2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80022c6:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80022c8:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 80022ca:	a824      	add	r0, sp, #144	; 0x90
 80022cc:	f007 f87b 	bl	80093c6 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80022d0:	463a      	mov	r2, r7
 80022d2:	4631      	mov	r1, r6
 80022d4:	a824      	add	r0, sp, #144	; 0x90
 80022d6:	f008 f80f 	bl	800a2f8 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 80022da:	2101      	movs	r1, #1
 80022dc:	a824      	add	r0, sp, #144	; 0x90
 80022de:	f007 f97b 	bl	80095d8 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 80022e2:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 80022e4:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 80022e6:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 80022ea:	f007 fa19 	bl	8009720 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022ee:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 80022f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022f4:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022f8:	429e      	cmp	r6, r3
 80022fa:	bf28      	it	cs
 80022fc:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002300:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002302:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002306:	bf28      	it	cs
 8002308:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800230a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 800230c:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 8002310:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002312:	429f      	cmp	r7, r3
 8002314:	d91a      	bls.n	800234c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	a901      	add	r1, sp, #4
 800231a:	a824      	add	r0, sp, #144	; 0x90
 800231c:	f007 fa49 	bl	80097b2 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 8002320:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002322:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 8002326:	4298      	cmp	r0, r3
 8002328:	d90e      	bls.n	8002348 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800232a:	7859      	ldrb	r1, [r3, #1]
 800232c:	789a      	ldrb	r2, [r3, #2]
 800232e:	00c9      	lsls	r1, r1, #3
 8002330:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002334:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002338:	430a      	orrs	r2, r1
 800233a:	f813 1b03 	ldrb.w	r1, [r3], #3
 800233e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 8002342:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 8002346:	e7ee      	b.n	8002326 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002348:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 800234a:	e7e1      	b.n	8002310 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 800234c:	a824      	add	r0, sp, #144	; 0x90
 800234e:	f007 f965 	bl	800961c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002352:	a824      	add	r0, sp, #144	; 0x90
 8002354:	f007 f884 	bl	8009460 <jpeg_destroy_decompress>
}
 8002358:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002360:	fffff800 	.word	0xfffff800

08002364 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8002366:	6002      	str	r2, [r0, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800236e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002372:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8002376:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800237a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800237e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8002382:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002386:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800238a:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800238e:	4770      	bx	lr
 8002390:	0802aec8 	.word	0x0802aec8

08002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002394:	b420      	push	{r5}
 8002396:	460d      	mov	r5, r1
 8002398:	4611      	mov	r1, r2
 800239a:	461a      	mov	r2, r3
    if (reader != 0)
 800239c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800239e:	b13b      	cbz	r3, 80023b0 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80023a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023a4:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80023a6:	4428      	add	r0, r5
}
 80023a8:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80023ac:	f027 bc45 	b.w	8029c3a <strncmp>
        src = (const char*)movieData + offset;
 80023b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023b2:	e7f8      	b.n	80023a6 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80023b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80023b6:	b510      	push	{r4, lr}
    if (reader != 0)
 80023b8:	b173      	cbz	r3, 80023d8 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80023ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 80023be:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023c0:	1853      	adds	r3, r2, r1
 80023c2:	5c52      	ldrb	r2, [r2, r1]
 80023c4:	7898      	ldrb	r0, [r3, #2]
 80023c6:	785c      	ldrb	r4, [r3, #1]
 80023c8:	0400      	lsls	r0, r0, #16
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80023d0:	4310      	orrs	r0, r2
 80023d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80023d6:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80023d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023da:	5858      	ldr	r0, [r3, r1]
 80023dc:	e7fb      	b.n	80023d6 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

080023de <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80023de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023e0:	b143      	cbz	r3, 80023f4 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80023e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023e4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80023e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023e8:	185a      	adds	r2, r3, r1
 80023ea:	5c58      	ldrb	r0, [r3, r1]
 80023ec:	7852      	ldrb	r2, [r2, #1]
 80023ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80023f2:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80023f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023f6:	5a58      	ldrh	r0, [r3, r1]
}
 80023f8:	4770      	bx	lr
	...

080023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	4604      	mov	r4, r0
    if (reader != 0)
 8002400:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002402:	460d      	mov	r5, r1
 8002404:	4616      	mov	r6, r2
    if (reader != 0)
 8002406:	b1d8      	cbz	r0, 8002440 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800240a:	4293      	cmp	r3, r2
 800240c:	d208      	bcs.n	8002420 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800240e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002416:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 800241c:	f026 fd90 	bl	8028f40 <__assert_func>
        reader->seek(offset);
 8002420:	6803      	ldr	r3, [r0, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002426:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002428:	4632      	mov	r2, r6
 800242a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800242c:	6803      	ldr	r3, [r0, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4798      	blx	r3
 8002432:	b910      	cbnz	r0, 800243a <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002434:	230d      	movs	r3, #13
 8002436:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 800243a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 800243c:	6425      	str	r5, [r4, #64]	; 0x40
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002440:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002442:	4408      	add	r0, r1
 8002444:	e7fb      	b.n	800243e <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002446:	bf00      	nop
 8002448:	0802ac53 	.word	0x0802ac53
 800244c:	0802abd7 	.word	0x0802abd7
 8002450:	0802ac40 	.word	0x0802ac40

08002454 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002458:	6943      	ldr	r3, [r0, #20]
{
 800245a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800245c:	b92b      	cbnz	r3, 800246a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002460:	21a9      	movs	r1, #169	; 0xa9
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002464:	4823      	ldr	r0, [pc, #140]	; (80024f4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002466:	f026 fd6b 	bl	8028f40 <__assert_func>
    readData(currentMovieOffset, 8);
 800246a:	2208      	movs	r2, #8
 800246c:	6981      	ldr	r1, [r0, #24]
 800246e:	f7ff ffc5 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002472:	69a1      	ldr	r1, [r4, #24]
 8002474:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002476:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800247a:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800247c:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002480:	f7ff ff98 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002484:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002486:	69a1      	ldr	r1, [r4, #24]
 8002488:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800248a:	440d      	add	r5, r1
 800248c:	f105 0208 	add.w	r2, r5, #8
 8002490:	429a      	cmp	r2, r3
 8002492:	d224      	bcs.n	80024de <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002494:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002496:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002498:	2208      	movs	r2, #8
 800249a:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800249c:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80024a0:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024a2:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80024a4:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80024a6:	f7ff ffa9 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80024aa:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80024ae:	4620      	mov	r0, r4
 80024b0:	4641      	mov	r1, r8
 80024b2:	f7ff ff94 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
 80024b6:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80024b8:	f108 0104 	add.w	r1, r8, #4
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ff79 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024c2:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 80024c4:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024c6:	d1de      	bne.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024c8:	f108 0102 	add.w	r1, r8, #2
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ff86 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024d2:	42b8      	cmp	r0, r7
 80024d4:	d1d7      	bne.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	d0d5      	beq.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80024da:	2001      	movs	r0, #1
 80024dc:	e004      	b.n	80024e8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 80024de:	2301      	movs	r3, #1
    return false;
 80024e0:	2000      	movs	r0, #0
    frameNumber = 1;
 80024e2:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80024e4:	6a23      	ldr	r3, [r4, #32]
 80024e6:	61a3      	str	r3, [r4, #24]
}
 80024e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ec:	0802ac95 	.word	0x0802ac95
 80024f0:	0802acde 	.word	0x0802acde
 80024f4:	0802abd7 	.word	0x0802abd7

080024f8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	4604      	mov	r4, r0
 80024fe:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002502:	468a      	mov	sl, r1
 8002504:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002506:	6981      	ldr	r1, [r0, #24]
 8002508:	2208      	movs	r2, #8
{
 800250a:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 800250c:	f7ff ff76 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002510:	69a7      	ldr	r7, [r4, #24]
 8002512:	4620      	mov	r0, r4
 8002514:	1d39      	adds	r1, r7, #4
 8002516:	f7ff ff4d 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800251a:	f107 0108 	add.w	r1, r7, #8
 800251e:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002520:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff6a 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002528:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800252a:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 800252c:	b933      	cbnz	r3, 800253c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002530:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 8002536:	483c      	ldr	r0, [pc, #240]	; (8002628 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002538:	f026 fd02 	bl	8028f40 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800253c:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 800253e:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002540:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002544:	f00d f81e 	bl	800f584 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002548:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800254c:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800254e:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002550:	a824      	add	r0, sp, #144	; 0x90
 8002552:	f006 ff38 	bl	80093c6 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002556:	4632      	mov	r2, r6
 8002558:	4639      	mov	r1, r7
 800255a:	a824      	add	r0, sp, #144	; 0x90
 800255c:	f007 fecc 	bl	800a2f8 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002560:	2101      	movs	r1, #1
 8002562:	a824      	add	r0, sp, #144	; 0x90
 8002564:	f007 f838 	bl	80095d8 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002568:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 800256a:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 800256c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002570:	f007 f8d6 	bl	8009720 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002574:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002578:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800257a:	42b3      	cmp	r3, r6
 800257c:	d205      	bcs.n	800258a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800257e:	2201      	movs	r2, #1
 8002580:	a901      	add	r1, sp, #4
 8002582:	a824      	add	r0, sp, #144	; 0x90
 8002584:	f007 f915 	bl	80097b2 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002588:	e7f6      	b.n	8002578 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 800258a:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800258e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002592:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8002596:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002598:	fb08 5506 	mla	r5, r8, r6, r5
 800259c:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800259e:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025a2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800262c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80025a6:	b23f      	sxth	r7, r7
 80025a8:	429f      	cmp	r7, r3
 80025aa:	bf28      	it	cs
 80025ac:	461f      	movcs	r7, r3
 80025ae:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80025b2:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80025b6:	441e      	add	r6, r3
 80025b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80025ba:	b236      	sxth	r6, r6
 80025bc:	429e      	cmp	r6, r3
 80025be:	bf28      	it	cs
 80025c0:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 80025c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80025c4:	42b3      	cmp	r3, r6
 80025c6:	d21f      	bcs.n	8002608 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	a901      	add	r1, sp, #4
 80025cc:	a824      	add	r0, sp, #144	; 0x90
 80025ce:	f007 f8f0 	bl	80097b2 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 80025d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025d4:	4649      	mov	r1, r9
 80025d6:	4452      	add	r2, sl
 80025d8:	42b9      	cmp	r1, r7
 80025da:	f102 0203 	add.w	r2, r2, #3
 80025de:	d211      	bcs.n	8002604 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025e0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80025e4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80025e8:	00c0      	lsls	r0, r0, #3
 80025ea:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80025ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80025f2:	4303      	orrs	r3, r0
 80025f4:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80025f8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80025fc:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002600:	3101      	adds	r1, #1
 8002602:	e7e9      	b.n	80025d8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002604:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002606:	e7dc      	b.n	80025c2 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002608:	a824      	add	r0, sp, #144	; 0x90
 800260a:	f007 f807 	bl	800961c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800260e:	a824      	add	r0, sp, #144	; 0x90
 8002610:	f006 ff26 	bl	8009460 <jpeg_destroy_decompress>
}
 8002614:	2001      	movs	r0, #1
 8002616:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800261a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	0802ad11 	.word	0x0802ad11
 8002624:	0802ad67 	.word	0x0802ad67
 8002628:	0802abd7 	.word	0x0802abd7
 800262c:	fffff800 	.word	0xfffff800

08002630 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002630:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002632:	6803      	ldr	r3, [r0, #0]
 8002634:	bf38      	it	cc
 8002636:	2101      	movcc	r1, #1
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800263a:	b570      	push	{r4, r5, r6, lr}
 800263c:	460d      	mov	r5, r1
 800263e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002640:	4798      	blx	r3
 8002642:	42a8      	cmp	r0, r5
 8002644:	d204      	bcs.n	8002650 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	4620      	mov	r0, r4
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4798      	blx	r3
 800264e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002650:	1e6b      	subs	r3, r5, #1
 8002652:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002654:	2210      	movs	r2, #16
 8002656:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002658:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800265c:	f106 0108 	add.w	r1, r6, #8
 8002660:	f7ff fecc 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002664:	f106 0110 	add.w	r1, r6, #16
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fea3 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800266e:	6a23      	ldr	r3, [r4, #32]
 8002670:	3b04      	subs	r3, #4
 8002672:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002674:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 800267c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002680:	2100      	movs	r1, #0
{
 8002682:	4604      	mov	r4, r0
    readData(0, 72);
 8002684:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002686:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002688:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 800268c:	f7ff feb6 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002690:	69a7      	ldr	r7, [r4, #24]
 8002692:	2304      	movs	r3, #4
 8002694:	4a63      	ldr	r2, [pc, #396]	; (8002824 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002696:	4639      	mov	r1, r7
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff fe7b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800269e:	b140      	cbz	r0, 80026b2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80026a0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026a4:	21f1      	movs	r1, #241	; 0xf1
        lastError = AVI_ERROR_NOT_RIFF;
 80026a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80026aa:	4b60      	ldr	r3, [pc, #384]	; (800282c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80026ac:	4860      	ldr	r0, [pc, #384]	; (8002830 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80026ae:	f026 fc47 	bl	8028f40 <__assert_func>
    currentMovieOffset += 8;
 80026b2:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80026b6:	2304      	movs	r3, #4
 80026b8:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80026ba:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80026bc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80026be:	f7ff fe69 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026c2:	b130      	cbz	r0, 80026d2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80026c4:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80026c6:	4a58      	ldr	r2, [pc, #352]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026c8:	21f9      	movs	r1, #249	; 0xf9
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80026ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 80026ce:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80026d0:	e7ec      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 80026d2:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80026d6:	2304      	movs	r3, #4
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80026da:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80026dc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80026de:	f7ff fe59 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026e2:	4606      	mov	r6, r0
 80026e4:	b138      	cbz	r0, 80026f6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026e6:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026ea:	f44f 7180 	mov.w	r1, #256	; 0x100
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80026f4:	e7da      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026f6:	f107 0110 	add.w	r1, r7, #16
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff fe5a 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002700:	4605      	mov	r5, r0
 8002702:	b920      	cbnz	r0, 800270e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002706:	f44f 7183 	mov.w	r1, #262	; 0x106
 800270a:	4a47      	ldr	r2, [pc, #284]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800270c:	e7ce      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800270e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8002712:	2304      	movs	r3, #4
 8002714:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002716:	4620      	mov	r0, r4
 8002718:	4641      	mov	r1, r8
 800271a:	f7ff fe3b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800271e:	2800      	cmp	r0, #0
 8002720:	d04b      	beq.n	80027ba <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002722:	2306      	movs	r3, #6
 8002724:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002728:	2304      	movs	r3, #4
 800272a:	4a48      	ldr	r2, [pc, #288]	; (800284c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800272c:	f107 0118 	add.w	r1, r7, #24
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff fe2f 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002736:	2800      	cmp	r0, #0
 8002738:	d041      	beq.n	80027be <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800273a:	2307      	movs	r3, #7
 800273c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002740:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002742:	4f43      	ldr	r7, [pc, #268]	; (8002850 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002744:	220c      	movs	r2, #12
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7ff fe57 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800274e:	f105 0608 	add.w	r6, r5, #8
 8002752:	2304      	movs	r3, #4
 8002754:	463a      	mov	r2, r7
 8002756:	4620      	mov	r0, r4
 8002758:	4631      	mov	r1, r6
 800275a:	f7ff fe1b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800275e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002762:	2800      	cmp	r0, #0
 8002764:	d04a      	beq.n	80027fc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d14a      	bne.n	8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800276a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800276c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800276e:	42ab      	cmp	r3, r5
 8002770:	d84a      	bhi.n	8002808 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002772:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002776:	1d29      	adds	r1, r5, #4
 8002778:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800277a:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800277c:	9101      	str	r1, [sp, #4]
 800277e:	f7ff fe19 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002782:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002784:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002786:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fe13 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800278e:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002790:	2204      	movs	r2, #4
 8002792:	4620      	mov	r0, r4
 8002794:	4631      	mov	r1, r6
 8002796:	f7ff fe31 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800279a:	2304      	movs	r3, #4
 800279c:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800279e:	4631      	mov	r1, r6
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fdf7 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d139      	bne.n	800281e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 80027aa:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80027ac:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80027ae:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80027b0:	69a3      	ldr	r3, [r4, #24]
 80027b2:	6223      	str	r3, [r4, #32]
}
 80027b4:	b002      	add	sp, #8
 80027b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80027ba:	2601      	movs	r6, #1
 80027bc:	e7b4      	b.n	8002728 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d0be      	beq.n	8002740 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80027c2:	f107 0120 	add.w	r1, r7, #32
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff fdf4 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80027d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80027d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d8:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fdea 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80027e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80027e4:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fde4 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80027ec:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80027f0:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fdde 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027f8:	6120      	str	r0, [r4, #16]
 80027fa:	e7a1      	b.n	8002740 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0b8      	beq.n	8002772 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002800:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002806:	e7d5      	b.n	80027b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fdd3 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800280e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002810:	220c      	movs	r2, #12
        listOffset += listSize;
 8002812:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7ff fdf0 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800281c:	e797      	b.n	800274e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800281e:	230b      	movs	r3, #11
 8002820:	e7ef      	b.n	8002802 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002822:	bf00      	nop
 8002824:	0802adc1 	.word	0x0802adc1
 8002828:	0802addf 	.word	0x0802addf
 800282c:	0802adc6 	.word	0x0802adc6
 8002830:	0802abd7 	.word	0x0802abd7
 8002834:	0802ae0c 	.word	0x0802ae0c
 8002838:	0802ae11 	.word	0x0802ae11
 800283c:	0802ae29 	.word	0x0802ae29
 8002840:	0802ae2e 	.word	0x0802ae2e
 8002844:	0802ae44 	.word	0x0802ae44
 8002848:	0802ae50 	.word	0x0802ae50
 800284c:	0802ae55 	.word	0x0802ae55
 8002850:	0802ae5a 	.word	0x0802ae5a
 8002854:	0802ae5f 	.word	0x0802ae5f

08002858 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002858:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800285c:	2200      	movs	r2, #0
 800285e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002860:	f7ff bf0c 	b.w	800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002864 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002864:	b510      	push	{r4, lr}
    movieData = 0;
 8002866:	2300      	movs	r3, #0
{
 8002868:	4604      	mov	r4, r0
 800286a:	4608      	mov	r0, r1
    movieData = 0;
 800286c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800286e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002870:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4798      	blx	r3
 8002876:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002878:	4620      	mov	r0, r4
}
 800287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800287e:	f7ff befd 	b.w	800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002882 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002882:	b4f0      	push	{r4, r5, r6, r7}
 8002884:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002888:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 800288c:	b12a      	cbz	r2, 800289a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800288e:	b123      	cbz	r3, 800289a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002890:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002894:	bcf0      	pop	{r4, r5, r6, r7}
 8002896:	f7ff bd01 	b.w	800229c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 800289a:	bcf0      	pop	{r4, r5, r6, r7}
 800289c:	4770      	bx	lr
	...

080028a0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80028a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028a6:	6943      	ldr	r3, [r0, #20]
{
 80028a8:	4604      	mov	r4, r0
 80028aa:	460f      	mov	r7, r1
 80028ac:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028ae:	b92b      	cbnz	r3, 80028bc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80028b2:	2176      	movs	r1, #118	; 0x76
 80028b4:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80028b6:	482b      	ldr	r0, [pc, #172]	; (8002964 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80028b8:	f026 fb42 	bl	8028f40 <__assert_func>
    readData(currentMovieOffset, 8);
 80028bc:	2208      	movs	r2, #8
 80028be:	6981      	ldr	r1, [r0, #24]
 80028c0:	f7ff fd9c 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 80028c4:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f106 0a08 	add.w	sl, r6, #8
 80028cc:	1d31      	adds	r1, r6, #4
 80028ce:	f7ff fd71 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028d4:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80028d8:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d231      	bcs.n	8002942 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 80028de:	4631      	mov	r1, r6
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fd7c 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028e6:	f243 0330 	movw	r3, #12336	; 0x3030
 80028ea:	4298      	cmp	r0, r3
 80028ec:	d11d      	bne.n	800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80028ee:	1cb1      	adds	r1, r6, #2
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fd74 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028f6:	f246 3364 	movw	r3, #25444	; 0x6364
 80028fa:	4298      	cmp	r0, r3
 80028fc:	d115      	bne.n	800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80028fe:	b1a5      	cbz	r5, 800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002900:	462a      	mov	r2, r5
 8002902:	4651      	mov	r1, sl
 8002904:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002906:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800290a:	f7ff fd77 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800290e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002910:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002912:	462a      	mov	r2, r5
 8002914:	4620      	mov	r0, r4
 8002916:	f8cd 8000 	str.w	r8, [sp]
 800291a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800291e:	463b      	mov	r3, r7
 8002920:	f7ff ffaf 	bl	8002882 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002924:	6963      	ldr	r3, [r4, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800292a:	69a3      	ldr	r3, [r4, #24]
 800292c:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 800292e:	b18d      	cbz	r5, 8002954 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8002930:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002932:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002934:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002936:	3301      	adds	r3, #1
 8002938:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800293c:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800293e:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002940:	d10a      	bne.n	8002958 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002942:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002944:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002946:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002948:	61a3      	str	r3, [r4, #24]
}
 800294a:	f080 0001 	eor.w	r0, r0, #1
 800294e:	b004      	add	sp, #16
 8002950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8002954:	3308      	adds	r3, #8
 8002956:	e7eb      	b.n	8002930 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002958:	2000      	movs	r0, #0
 800295a:	e7f6      	b.n	800294a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 800295c:	0802ac95 	.word	0x0802ac95
 8002960:	0802ae64 	.word	0x0802ae64
 8002964:	0802abd7 	.word	0x0802abd7

08002968 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002968:	2001      	movs	r0, #1
 800296a:	4770      	bx	lr

0800296c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800296c:	200c      	movs	r0, #12
 800296e:	4770      	bx	lr

08002970 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002970:	230c      	movs	r3, #12
 8002972:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002976:	3008      	adds	r0, #8
 8002978:	4770      	bx	lr

0800297a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800297a:	230c      	movs	r3, #12
 800297c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002980:	3008      	adds	r0, #8
 8002982:	4770      	bx	lr

08002984 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002984:	2001      	movs	r0, #1
 8002986:	4770      	bx	lr

08002988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002988:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 800298c:	4770      	bx	lr

0800298e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800298e:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8002992:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002996:	3008      	adds	r0, #8
 8002998:	4770      	bx	lr

0800299a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800299a:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800299e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029a2:	3008      	adds	r0, #8
 80029a4:	4770      	bx	lr

080029a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80029a6:	2001      	movs	r0, #1
 80029a8:	4770      	bx	lr

080029aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80029aa:	2010      	movs	r0, #16
 80029ac:	4770      	bx	lr

080029ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029b2:	3008      	adds	r0, #8
 80029b4:	4770      	bx	lr

080029b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029b6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029ba:	3008      	adds	r0, #8
 80029bc:	4770      	bx	lr

080029be <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenNoTransition();
 80029be:	4608      	mov	r0, r1
 80029c0:	f000 be5c 	b.w	800367c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>

080029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029c6:	b510      	push	{r4, lr}
 80029c8:	4604      	mov	r4, r0
 80029ca:	6003      	str	r3, [r0, #0]
 80029cc:	f013 fe26 	bl	801661c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029d0:	4620      	mov	r0, r4
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	0802af70 	.word	0x0802af70

080029d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f7ff fff2 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029e0:	2114      	movs	r1, #20
 80029e2:	4620      	mov	r0, r4
 80029e4:	f026 fa7e 	bl	8028ee4 <_ZdlPvj>
 80029e8:	4620      	mov	r0, r4
 80029ea:	bd10      	pop	{r4, pc}

080029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029ee:	b510      	push	{r4, lr}
 80029f0:	4604      	mov	r4, r0
 80029f2:	6003      	str	r3, [r0, #0]
 80029f4:	f013 fe12 	bl	801661c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	0802af3c 	.word	0x0802af3c

08002a00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	f7ff fff2 	bl	80029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a08:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f026 fa69 	bl	8028ee4 <_ZdlPvj>
 8002a12:	4620      	mov	r0, r4
 8002a14:	bd10      	pop	{r4, pc}
	...

08002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	6003      	str	r3, [r0, #0]
 8002a20:	f013 fdfc 	bl	801661c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a24:	4620      	mov	r0, r4
 8002a26:	bd10      	pop	{r4, pc}
 8002a28:	0802af08 	.word	0x0802af08

08002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	f7ff fff2 	bl	8002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a34:	2118      	movs	r1, #24
 8002a36:	4620      	mov	r0, r4
 8002a38:	f026 fa54 	bl	8028ee4 <_ZdlPvj>
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <_ZN12FrontendHeapD1Ev+0x24>)
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
 8002a46:	6003      	str	r3, [r0, #0]
 8002a48:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
 8002a4c:	f7ff ffba 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002a54:	f7ff ffca 	bl	80029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a58:	f104 0014 	add.w	r0, r4, #20
 8002a5c:	f7ff ffdc 	bl	8002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a60:	4620      	mov	r0, r4
 8002a62:	bd10      	pop	{r4, pc}
 8002a64:	0802afa4 	.word	0x0802afa4

08002a68 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002a68:	b508      	push	{r3, lr}
 8002a6a:	4802      	ldr	r0, [pc, #8]	; (8002a74 <__tcf_0+0xc>)
 8002a6c:	f7ff ffe8 	bl	8002a40 <_ZN12FrontendHeapD1Ev>
 8002a70:	bd08      	pop	{r3, pc}
 8002a72:	bf00      	nop
 8002a74:	200003bc 	.word	0x200003bc

08002a78 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	f7ff ffe0 	bl	8002a40 <_ZN12FrontendHeapD1Ev>
 8002a80:	f240 414c 	movw	r1, #1100	; 0x44c
 8002a84:	4620      	mov	r0, r4
 8002a86:	f026 fa2d 	bl	8028ee4 <_ZdlPvj>
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	bd10      	pop	{r4, pc}
	...

08002a90 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002a94:	f000 fc7c 	bl	8003390 <_ZN14BitmapDatabase11getInstanceEv>
 8002a98:	2400      	movs	r4, #0
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	f000 fc7c 	bl	8003398 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	9400      	str	r4, [sp, #0]
 8002aaa:	f01a fc05 	bl	801d2b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <touchgfx_init+0xb4>)
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002ab2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002ab4:	4d25      	ldr	r5, [pc, #148]	; (8002b4c <touchgfx_init+0xbc>)
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f001 f97a 	bl	8003db0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002abc:	4824      	ldr	r0, [pc, #144]	; (8002b50 <touchgfx_init+0xc0>)
 8002abe:	f01a fb63 	bl	801d188 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002ac2:	782b      	ldrb	r3, [r5, #0]
 8002ac4:	f3bf 8f5b 	dmb	ish
 8002ac8:	07db      	lsls	r3, r3, #31
 8002aca:	d435      	bmi.n	8002b38 <touchgfx_init+0xa8>
 8002acc:	4628      	mov	r0, r5
 8002ace:	f026 fa0b 	bl	8028ee8 <__cxa_guard_acquire>
 8002ad2:	b388      	cbz	r0, 8002b38 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002ad4:	4c1f      	ldr	r4, [pc, #124]	; (8002b54 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <touchgfx_init+0xc8>)
 8002ad8:	f504 763d 	add.w	r6, r4, #756	; 0x2f4
 8002adc:	f104 0014 	add.w	r0, r4, #20
 8002ae0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002ae4:	f504 7737 	add.w	r7, r4, #732	; 0x2dc
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	6060      	str	r0, [r4, #4]
 8002aec:	f8c4 8008 	str.w	r8, [r4, #8]
 8002af0:	60e7      	str	r7, [r4, #12]
 8002af2:	6126      	str	r6, [r4, #16]
 8002af4:	f013 fd94 	bl	8016620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <touchgfx_init+0xcc>)
 8002afa:	4640      	mov	r0, r8
 8002afc:	6163      	str	r3, [r4, #20]
 8002afe:	f013 fd8f 	bl	8016620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <touchgfx_init+0xd0>)
 8002b04:	4638      	mov	r0, r7
 8002b06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b08:	f013 fd8a 	bl	8016620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <touchgfx_init+0xd4>)
 8002b0e:	f504 703c 	add.w	r0, r4, #752	; 0x2f0
 8002b12:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8002b16:	f001 fa13 	bl	8003f40 <_ZN5ModelC1Ev>
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	f504 713c 	add.w	r1, r4, #752	; 0x2f0
 8002b20:	4630      	mov	r0, r6
 8002b22:	f001 f9b7 	bl	8003e94 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002b26:	4630      	mov	r0, r6
 8002b28:	f000 fda8 	bl	800367c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        static FrontendHeap instance;
 8002b2c:	480e      	ldr	r0, [pc, #56]	; (8002b68 <touchgfx_init+0xd8>)
 8002b2e:	f026 fa25 	bl	8028f7c <atexit>
 8002b32:	4628      	mov	r0, r5
 8002b34:	f026 f9e4 	bl	8028f00 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <touchgfx_init+0xdc>)
}
 8002b3a:	b002      	add	sp, #8
 8002b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002b40:	f7ff b8a2 	b.w	8001c88 <_ZN11TouchGFXHAL10initializeEv>
 8002b44:	20015330 	.word	0x20015330
 8002b48:	20001628 	.word	0x20001628
 8002b4c:	200003b8 	.word	0x200003b8
 8002b50:	20000008 	.word	0x20000008
 8002b54:	200003bc 	.word	0x200003bc
 8002b58:	0802afa4 	.word	0x0802afa4
 8002b5c:	0802af08 	.word	0x0802af08
 8002b60:	0802af3c 	.word	0x0802af3c
 8002b64:	0802af70 	.word	0x0802af70
 8002b68:	08002a69 	.word	0x08002a69
 8002b6c:	200015ac 	.word	0x200015ac

08002b70 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002b70:	4801      	ldr	r0, [pc, #4]	; (8002b78 <touchgfx_taskEntry+0x8>)
 8002b72:	f014 baa4 	b.w	80170be <_ZN8touchgfx3HAL9taskEntryEv>
 8002b76:	bf00      	nop
 8002b78:	200015ac 	.word	0x200015ac

08002b7c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002b7c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002b7e:	4e23      	ldr	r6, [pc, #140]	; (8002c0c <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002b82:	4c24      	ldr	r4, [pc, #144]	; (8002c14 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002b84:	4630      	mov	r0, r6
static LCD16bpp display;
 8002b86:	4d24      	ldr	r5, [pc, #144]	; (8002c18 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002b88:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002b8a:	f7ff fa1d 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f01d fc9e 	bl	80204d0 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b9c:	4820      	ldr	r0, [pc, #128]	; (8002c20 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002b9e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ba2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ba8:	60dc      	str	r4, [r3, #12]
 8002baa:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002bae:	491d      	ldr	r1, [pc, #116]	; (8002c24 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002bb0:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002bb4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002bb8:	6759      	str	r1, [r3, #116]	; 0x74
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002bc0:	4919      	ldr	r1, [pc, #100]	; (8002c28 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002bc2:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002bc4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002bc8:	8001      	strh	r1, [r0, #0]
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002bcc:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bce:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002bd2:	4817      	ldr	r0, [pc, #92]	; (8002c30 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002bd4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002bd8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002bdc:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002be0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002be4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002be8:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002bec:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002bf0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002bf4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bf8:	8001      	strh	r1, [r0, #0]
 8002bfa:	480e      	ldr	r0, [pc, #56]	; (8002c34 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c00:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002c04:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002c06:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	2000080c 	.word	0x2000080c
 8002c10:	0802a650 	.word	0x0802a650
 8002c14:	20000808 	.word	0x20000808
 8002c18:	2000162c 	.word	0x2000162c
 8002c1c:	200015ac 	.word	0x200015ac
 8002c20:	200152c8 	.word	0x200152c8
 8002c24:	01000001 	.word	0x01000001
 8002c28:	200152d4 	.word	0x200152d4
 8002c2c:	200152ce 	.word	0x200152ce
 8002c30:	200152ca 	.word	0x200152ca
 8002c34:	200152d0 	.word	0x200152d0
 8002c38:	200152cc 	.word	0x200152cc
 8002c3c:	0802a7dc 	.word	0x0802a7dc

08002c40 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002c42:	f7ff b99d 	b.w	8001f80 <_ZN8STM32DMAD1Ev>
 8002c46:	bf00      	nop
 8002c48:	2000080c 	.word	0x2000080c

08002c4c <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c4c:	4910      	ldr	r1, [pc, #64]	; (8002c90 <SCB_CleanInvalidateDCache+0x44>)
 8002c4e:	2300      	movs	r3, #0
{
 8002c50:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c56:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c5a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c5e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c62:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c66:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002c6a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c6c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c70:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c72:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002c76:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c78:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002c7c:	d2f9      	bcs.n	8002c72 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002c7e:	3b20      	subs	r3, #32
 8002c80:	f113 0f20 	cmn.w	r3, #32
 8002c84:	d1f2      	bne.n	8002c6c <SCB_CleanInvalidateDCache+0x20>
 8002c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c8a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002c96:	2290      	movs	r2, #144	; 0x90
 8002c98:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002c9c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002caa:	490a      	ldr	r1, [pc, #40]	; (8002cd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002cac:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002cae:	480a      	ldr	r0, [pc, #40]	; (8002cd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002cba:	6911      	ldr	r1, [r2, #16]
 8002cbc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002cc0:	3901      	subs	r1, #1
 8002cc2:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002cc6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002cce:	4770      	bx	lr
 8002cd0:	40016800 	.word	0x40016800
 8002cd4:	200016a8 	.word	0x200016a8
 8002cd8:	200016a6 	.word	0x200016a6

08002cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002cde:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002ce2:	4770      	bx	lr
 8002ce4:	40016800 	.word	0x40016800

08002ce8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cea:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002cec:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cf2:	4770      	bx	lr
 8002cf4:	40016800 	.word	0x40016800

08002cf8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	03db      	lsls	r3, r3, #15
 8002cfe:	d501      	bpl.n	8002d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002d00:	f7ff bfa4 	b.w	8002c4c <SCB_CleanInvalidateDCache>
    }
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002d0c:	4770      	bx	lr

08002d0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002d0e:	2338      	movs	r3, #56	; 0x38
 8002d10:	fb01 3103 	mla	r1, r1, r3, r3
 8002d14:	2300      	movs	r3, #0
 8002d16:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002d18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d1c:	b90b      	cbnz	r3, 8002d22 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d20:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002d22:	4770      	bx	lr

08002d24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002d24:	4770      	bx	lr
	...

08002d28 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4604      	mov	r4, r0
    HAL::initialize();
 8002d2c:	f014 f9b5 	bl	801709a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002d34:	f017 fb56 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002d42:	4620      	mov	r0, r4
 8002d44:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002d4e:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002d52:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002d54:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002d5a:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002d5c:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	c007f800 	.word	0xc007f800
 8002d68:	20001e74 	.word	0x20001e74
 8002d6c:	20001e2c 	.word	0x20001e2c
 8002d70:	c00bf400 	.word	0xc00bf400

08002d74 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002d74:	f014 b978 	b.w	8017068 <_ZN8touchgfx3HAL10beginFrameEv>

08002d78 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002d78:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002d7c:	b113      	cbz	r3, 8002d84 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002d7e:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002d84:	f014 b97c 	b.w	8017080 <_ZN8touchgfx3HAL8endFrameEv>
 8002d88:	200016a4 	.word	0x200016a4

08002d8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002d8c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002d8e:	f014 f935 	bl	8016ffc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	03db      	lsls	r3, r3, #15
 8002d98:	d503      	bpl.n	8002da2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002d9e:	f7ff bf55 	b.w	8002c4c <SCB_CleanInvalidateDCache>
}
 8002da2:	bd08      	pop	{r3, pc}
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002da8:	f014 ba91 	b.w	80172ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002dac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002dac:	b510      	push	{r4, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	2158      	movs	r1, #88	; 0x58
 8002db2:	f026 f897 	bl	8028ee4 <_ZdlPvj>
 8002db6:	4620      	mov	r0, r4
 8002db8:	bd10      	pop	{r4, pc}
	...

08002dbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002dbc:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002dbe:	b131      	cbz	r1, 8002dce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002dc2:	f240 1197 	movw	r1, #407	; 0x197
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002dca:	f026 f8b9 	bl	8028f40 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002dce:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002dd2:	bd08      	pop	{r3, pc}
 8002dd4:	0802afb0 	.word	0x0802afb0
 8002dd8:	0802afc4 	.word	0x0802afc4
 8002ddc:	0802b151 	.word	0x0802b151

08002de0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002de0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002de2:	b131      	cbz	r1, 8002df2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002de6:	f240 1191 	movw	r1, #401	; 0x191
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002dec:	4806      	ldr	r0, [pc, #24]	; (8002e08 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002dee:	f026 f8a7 	bl	8028f40 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002df2:	6840      	ldr	r0, [r0, #4]
 8002df4:	4611      	mov	r1, r2
 8002df6:	6803      	ldr	r3, [r0, #0]
    }
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4718      	bx	r3
 8002e00:	0802afb0 	.word	0x0802afb0
 8002e04:	0802b193 	.word	0x0802b193
 8002e08:	0802b151 	.word	0x0802b151

08002e0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002e0c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e0e:	b129      	cbz	r1, 8002e1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002e12:	217a      	movs	r1, #122	; 0x7a
 8002e14:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002e16:	4804      	ldr	r0, [pc, #16]	; (8002e28 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002e18:	f026 f892 	bl	8028f40 <__assert_func>
    }
 8002e1c:	6900      	ldr	r0, [r0, #16]
 8002e1e:	bd08      	pop	{r3, pc}
 8002e20:	0802afb0 	.word	0x0802afb0
 8002e24:	0802b344 	.word	0x0802b344
 8002e28:	0802b151 	.word	0x0802b151

08002e2c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002e2c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e2e:	b129      	cbz	r1, 8002e3c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002e32:	2183      	movs	r1, #131	; 0x83
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002e36:	4806      	ldr	r0, [pc, #24]	; (8002e50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002e38:	f026 f882 	bl	8028f40 <__assert_func>
        stream.tickCount = 0;
 8002e3c:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002e3e:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002e40:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	0802afb0 	.word	0x0802afb0
 8002e4c:	0802b4fc 	.word	0x0802b4fc
 8002e50:	0802b151 	.word	0x0802b151

08002e54 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002e58:	b129      	cbz	r1, 8002e66 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002e5c:	21a4      	movs	r1, #164	; 0xa4
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002e60:	4827      	ldr	r0, [pc, #156]	; (8002f00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002e62:	f026 f86d 	bl	8028f40 <__assert_func>
        switch (cmd)
 8002e66:	2a05      	cmp	r2, #5
 8002e68:	d834      	bhi.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002e6a:	e8df f002 	tbb	[pc, r2]
 8002e6e:	2903      	.short	0x2903
 8002e70:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002e74:	6840      	ldr	r0, [r0, #4]
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4798      	blx	r3
 8002e7c:	b350      	cbz	r0, 8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e84:	f004 f830 	bl	8006ee8 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002e88:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002e8a:	2201      	movs	r2, #1
                if(stream.isStopped)
 8002e8c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002e90:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002e94:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002e98:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002e9a:	6163      	str	r3, [r4, #20]
                if(stream.isStopped)
 8002e9c:	b101      	cbz	r1, 8002ea0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002e9e:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002ea4:	6263      	str	r3, [r4, #36]	; 0x24
                if(stream.nextBuffer == 0)
 8002ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ea8:	b92b      	cbnz	r3, 8002eb6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002eaa:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002eac:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002eae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002eb2:	f004 f903 	bl	80070bc <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002ebc:	f004 b844 	b.w	8006f48 <osMutexRelease>
            stream.isPlaying = false;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002ec6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002eca:	e003      	b.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002ecc:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002ed2:	6143      	str	r3, [r0, #20]
    }
 8002ed4:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002ed6:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002edc:	6143      	str	r3, [r0, #20]
 8002ede:	e7f2      	b.n	8002ec6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e7ed      	b.n	8002ec6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002eea:	3b00      	subs	r3, #0
 8002eec:	bf18      	it	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002ef4:	e7ee      	b.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002ef6:	bf00      	nop
 8002ef8:	0802afb0 	.word	0x0802afb0
 8002efc:	0802b6bb 	.word	0x0802b6bb
 8002f00:	0802b151 	.word	0x0802b151

08002f04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002f0a:	b129      	cbz	r1, 8002f18 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002f0e:	21e7      	movs	r1, #231	; 0xe7
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002f12:	4832      	ldr	r0, [pc, #200]	; (8002fdc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002f14:	f026 f814 	bl	8028f40 <__assert_func>
        if (stream.isPlaying)
 8002f18:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f1c:	b133      	cbz	r3, 8002f2c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002f1e:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8002f26:	6943      	ldr	r3, [r0, #20]
 8002f28:	4413      	add	r3, r2
 8002f2a:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04d      	beq.n	8002fce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002f32:	69e1      	ldr	r1, [r4, #28]
 8002f34:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002f38:	4353      	muls	r3, r2
 8002f3a:	68a2      	ldr	r2, [r4, #8]
 8002f3c:	434a      	muls	r2, r1
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d220      	bcs.n	8002f84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f42:	6a23      	ldr	r3, [r4, #32]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d042      	beq.n	8002fce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f4e:	f003 ffcb 	bl	8006ee8 <osMutexAcquire>
            if(stream.seek_to_frame > 0)
 8002f52:	6a23      	ldr	r3, [r4, #32]
 8002f54:	b10b      	cbz	r3, 8002f5a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(stream.nextBuffer != 0)
 8002f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f5c:	b9fb      	cbnz	r3, 8002f9e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8002f5e:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8002f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f62:	f003 fff1 	bl	8006f48 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8002f66:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f6a:	b90b      	cbnz	r3, 8002f70 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8002f6c:	6a23      	ldr	r3, [r4, #32]
 8002f6e:	b13b      	cbz	r3, 8002f80 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8002f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f72:	b92b      	cbnz	r3, 8002f80 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8002f74:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8002f76:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8002f78:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8002f7c:	f004 f89e 	bl	80070bc <osSemaphoreRelease>
    }
 8002f80:	4628      	mov	r0, r5
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8002f84:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d0dd      	beq.n	8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002f92:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002f94:	bf98      	it	ls
 8002f96:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002f9a:	6262      	str	r2, [r4, #36]	; 0x24
 8002f9c:	e7d4      	b.n	8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8002f9e:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002fa0:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8002fa4:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8002fa6:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8002fa8:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8002faa:	68e2      	ldr	r2, [r4, #12]
 8002fac:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8002fae:	68a2      	ldr	r2, [r4, #8]
 8002fb0:	3201      	adds	r2, #1
 8002fb2:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002fb4:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8002fb6:	6833      	ldr	r3, [r6, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d1ce      	bne.n	8002f5e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8002fc0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1cb      	bne.n	8002f60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8002fc8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8002fcc:	e7c8      	b.n	8002f60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8002fce:	2501      	movs	r5, #1
 8002fd0:	e7c9      	b.n	8002f66 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8002fd2:	bf00      	nop
 8002fd4:	0802afb0 	.word	0x0802afb0
 8002fd8:	0802b892 	.word	0x0802b892
 8002fdc:	0802b151 	.word	0x0802b151
 8002fe0:	200152d4 	.word	0x200152d4

08002fe4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002ffa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800300e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003016:	f3bf 8f6f 	isb	sy
}
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100

08003020 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003020:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003022:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003026:	bb3b      	cbnz	r3, 8003078 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 8003028:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 800302a:	6083      	str	r3, [r0, #8]
 800302c:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 800302e:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	6143      	str	r3, [r0, #20]
 8003036:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003038:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800303c:	6183      	str	r3, [r0, #24]
 800303e:	61c3      	str	r3, [r0, #28]
 8003040:	6203      	str	r3, [r0, #32]
 8003042:	6243      	str	r3, [r0, #36]	; 0x24
 8003044:	6283      	str	r3, [r0, #40]	; 0x28
 8003046:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003048:	6303      	str	r3, [r0, #48]	; 0x30
 800304a:	6343      	str	r3, [r0, #52]	; 0x34
 800304c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003050:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003052:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003056:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800305a:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800305c:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800305e:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003060:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003062:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003066:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 800306a:	4429      	add	r1, r5
 800306c:	428c      	cmp	r4, r1
 800306e:	d90a      	bls.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003072:	2158      	movs	r1, #88	; 0x58
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003076:	e003      	b.n	8003080 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800307a:	f240 11f5 	movw	r1, #501	; 0x1f5
 800307e:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003082:	f025 ff5d 	bl	8028f40 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003086:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003088:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800308c:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 800308e:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003090:	4618      	mov	r0, r3
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	0802bbf0 	.word	0x0802bbf0
 8003098:	0802bc30 	.word	0x0802bc30
 800309c:	0802ba36 	.word	0x0802ba36
 80030a0:	0802ba66 	.word	0x0802ba66
 80030a4:	0802b151 	.word	0x0802b151

080030a8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80030a8:	b510      	push	{r4, lr}
        return instance;
 80030aa:	4c14      	ldr	r4, [pc, #80]	; (80030fc <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	b323      	cbz	r3, 80030fa <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_LTDC_LineEventCallback+0x58>)
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_LTDC_LineEventCallback+0x5c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	8811      	ldrh	r1, [r2, #0]
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d113      	bne.n	80030e4 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_LTDC_LineEventCallback+0x60>)
 80030be:	8819      	ldrh	r1, [r3, #0]
 80030c0:	f002 fb04 	bl	80056cc <HAL_LTDC_ProgramLineEvent>
 80030c4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80030c6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80030ca:	3301      	adds	r3, #1
 80030cc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80030d0:	f7fe ff06 	bl	8001ee0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f014 fd31 	bl	8017b3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80030da:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80030e0:	f7fe bd36 	b.w	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80030e4:	f002 faf2 	bl	80056cc <HAL_LTDC_ProgramLineEvent>
        return instance;
 80030e8:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030f0:	2000      	movs	r0, #0
    }
 80030f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030f6:	f7fe bd5b 	b.w	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	200152d4 	.word	0x200152d4
 8003100:	40016800 	.word	0x40016800
 8003104:	200016a8 	.word	0x200016a8
 8003108:	200016a6 	.word	0x200016a6

0800310c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800310c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003110:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003112:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003116:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 800311a:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800311e:	b91b      	cbnz	r3, 8003128 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8003120:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003122:	f003 ff91 	bl	8007048 <osSemaphoreAcquire>
                continue;
 8003126:	e7f6      	b.n	8003116 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 8003128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800312a:	f003 fedd 	bl	8006ee8 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800312e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 8003132:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003134:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 8003136:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003138:	bf08      	it	eq
 800313a:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 800313c:	b336      	cbz	r6, 800318c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	4631      	mov	r1, r6
 8003142:	4628      	mov	r0, r5
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 800314c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003152:	f003 fef9 	bl	8006f48 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800315c:	4639      	mov	r1, r7
 800315e:	f8cd 8000 	str.w	r8, [sp]
 8003162:	4628      	mov	r0, r5
 8003164:	695e      	ldr	r6, [r3, #20]
 8003166:	f44f 7388 	mov.w	r3, #272	; 0x110
 800316a:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003170:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003174:	f003 feb8 	bl	8006ee8 <osMutexAcquire>
            if (stream.cancelDecoding)
 8003178:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800317c:	b1c3      	cbz	r3, 80031b0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 800317e:	2300      	movs	r3, #0
 8003180:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003184:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003186:	f003 fedf 	bl	8006f48 <osMutexRelease>
 800318a:	e7c4      	b.n	8003116 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 800318c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0de      	beq.n	8003150 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003192:	682b      	ldr	r3, [r5, #0]
 8003194:	4628      	mov	r0, r5
 8003196:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800319a:	4798      	blx	r3
 800319c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800319e:	4401      	add	r1, r0
 80031a0:	4628      	mov	r0, r5
 80031a2:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 80031a8:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 80031aa:	4413      	add	r3, r2
 80031ac:	60a3      	str	r3, [r4, #8]
 80031ae:	e7cf      	b.n	8003150 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 80031b0:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80031b2:	b15e      	cbz	r6, 80031cc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	4628      	mov	r0, r5
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	4798      	blx	r3
 80031bc:	3801      	subs	r0, #1
 80031be:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 80031c0:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 80031c2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 80031c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80031ca:	e7db      	b.n	8003184 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60e3      	str	r3, [r4, #12]
 80031d0:	e7f6      	b.n	80031c0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080031d4 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <videoTaskFunc+0x8>)
{
 80031d6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80031d8:	f7ff ff98 	bl	800310c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80031dc:	20001e74 	.word	0x20001e74

080031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80031e8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80031ea:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80031ec:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80031ee:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031f6:	f003 fe77 	bl	8006ee8 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80031fa:	2138      	movs	r1, #56	; 0x38
 80031fc:	fb01 4305 	mla	r3, r1, r5, r4
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	b10a      	cbz	r2, 8003208 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 8003204:	2200      	movs	r2, #0
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
 8003208:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 800320c:	2301      	movs	r3, #1
 800320e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003212:	2300      	movs	r3, #0
 8003214:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 8003218:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800321a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 800321e:	f003 be93 	b.w	8006f48 <osMutexRelease>

08003222 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003222:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003224:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003228:	4604      	mov	r4, r0
 800322a:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 800322c:	4611      	mov	r1, r2
 800322e:	6858      	ldr	r0, [r3, #4]
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4798      	blx	r3
        clearState(handle);
 8003236:	4629      	mov	r1, r5
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ffd1 	bl	80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800323e:	bd38      	pop	{r3, r4, r5, pc}

08003240 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	460d      	mov	r5, r1
 8003244:	4611      	mov	r1, r2
 8003246:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003248:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800324c:	6850      	ldr	r0, [r2, #4]
 800324e:	6802      	ldr	r2, [r0, #0]
 8003250:	6896      	ldr	r6, [r2, #8]
 8003252:	461a      	mov	r2, r3
 8003254:	47b0      	blx	r6
        clearState(handle);
 8003256:	4629      	mov	r1, r5
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff ffc1 	bl	80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800325e:	bd70      	pop	{r4, r5, r6, pc}

08003260 <_GLOBAL__sub_I_lineBuffer>:
}
 8003260:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003262:	4916      	ldr	r1, [pc, #88]	; (80032bc <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 8003264:	2500      	movs	r5, #0
 8003266:	4816      	ldr	r0, [pc, #88]	; (80032c0 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003268:	f7ff f87c 	bl	8002364 <_ZN20SoftwareMJPEGDecoderC1EPh>
 800326c:	4c15      	ldr	r4, [pc, #84]	; (80032c4 <_GLOBAL__sub_I_lineBuffer+0x64>)
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003270:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003272:	462a      	mov	r2, r5
 8003274:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 8003276:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 800327c:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800327e:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 8003280:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003284:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 8003288:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 800328c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003294:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003298:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800329c:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80032a0:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80032a4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80032a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80032ac:	f003 fe76 	bl	8006f9c <osSemaphoreNew>
 80032b0:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80032b2:	4628      	mov	r0, r5
 80032b4:	f003 fdd6 	bl	8006e64 <osMutexNew>
 80032b8:	6560      	str	r0, [r4, #84]	; 0x54
}
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	200016ac 	.word	0x200016ac
 80032c0:	20001e2c 	.word	0x20001e2c
 80032c4:	20001e74 	.word	0x20001e74
 80032c8:	0802bde0 	.word	0x0802bde0

080032cc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr

080032d0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80032d0:	8081      	strh	r1, [r0, #4]
    }
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80032d4:	80c1      	strh	r1, [r0, #6]
    }
 80032d6:	4770      	bx	lr

080032d8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80032d8:	8101      	strh	r1, [r0, #8]
    }
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80032dc:	8141      	strh	r1, [r0, #10]
    }
 80032de:	4770      	bx	lr

080032e0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80032e0:	4770      	bx	lr

080032e2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e2:	4770      	bx	lr

080032e4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e4:	4770      	bx	lr

080032e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e6:	4770      	bx	lr

080032e8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80032e8:	4770      	bx	lr

080032ea <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80032ea:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80032ec:	88c4      	ldrh	r4, [r0, #6]
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	1b12      	subs	r2, r2, r4
 80032f2:	8884      	ldrh	r4, [r0, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	1b09      	subs	r1, r1, r4
 80032f8:	b212      	sxth	r2, r2
    }
 80032fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80032fe:	b209      	sxth	r1, r1
 8003300:	4718      	bx	r3

08003302 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003306:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003312:	6010      	str	r0, [r2, #0]
    }
 8003314:	4770      	bx	lr

08003316 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003316:	4770      	bx	lr

08003318 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003318:	4770      	bx	lr

0800331a <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800331a:	4770      	bx	lr

0800331c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800331c:	4770      	bx	lr

0800331e <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800331e:	4770      	bx	lr

08003320 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003320:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003324:	b11a      	cbz	r2, 800332e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003326:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800332a:	b102      	cbz	r2, 800332e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800332c:	6018      	str	r0, [r3, #0]
        }
    }
 800332e:	4770      	bx	lr

08003330 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003330:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003334:	b112      	cbz	r2, 800333c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003336:	6803      	ldr	r3, [r0, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4718      	bx	r3
    }
 800333c:	4770      	bx	lr

0800333e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800333e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4604      	mov	r4, r0
        setX(x);
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003346:	4615      	mov	r5, r2
        setX(x);
 8003348:	4798      	blx	r3
        setY(y);
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003356:	4718      	bx	r3

08003358 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003358:	4770      	bx	lr

0800335a <_ZN23ApplicationFontProviderD0Ev>:
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	2104      	movs	r1, #4
 8003360:	f025 fdc0 	bl	8028ee4 <_ZdlPvj>
 8003364:	4620      	mov	r0, r4
 8003366:	bd10      	pop	{r4, pc}

08003368 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003368:	2901      	cmp	r1, #1
{
 800336a:	b508      	push	{r3, lr}
    switch (typography)
 800336c:	d006      	beq.n	800337c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800336e:	2902      	cmp	r1, #2
 8003370:	d008      	beq.n	8003384 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003372:	b959      	cbnz	r1, 800338c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003374:	f000 fd68 	bl	8003e48 <_ZN17TypedTextDatabase8getFontsEv>
 8003378:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800337a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800337c:	f000 fd64 	bl	8003e48 <_ZN17TypedTextDatabase8getFontsEv>
 8003380:	6840      	ldr	r0, [r0, #4]
 8003382:	e7fa      	b.n	800337a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003384:	f000 fd60 	bl	8003e48 <_ZN17TypedTextDatabase8getFontsEv>
 8003388:	6880      	ldr	r0, [r0, #8]
 800338a:	e7f6      	b.n	800337a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800338c:	2000      	movs	r0, #0
 800338e:	e7f4      	b.n	800337a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003390 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003390:	4800      	ldr	r0, [pc, #0]	; (8003394 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003392:	4770      	bx	lr
 8003394:	0802be28 	.word	0x0802be28

08003398 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003398:	200b      	movs	r0, #11
 800339a:	4770      	bx	lr

0800339c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800339c:	b513      	push	{r0, r1, r4, lr}
 800339e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80033a0:	b151      	cbz	r1, 80033b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80033a6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80033a8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033ac:	689c      	ldr	r4, [r3, #8]
 80033ae:	f10d 0303 	add.w	r3, sp, #3
 80033b2:	47a0      	blx	r4
        return glyph;
    }
 80033b4:	b002      	add	sp, #8
 80033b6:	bd10      	pop	{r4, pc}
            return 0;
 80033b8:	4608      	mov	r0, r1
 80033ba:	e7fb      	b.n	80033b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080033bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80033bc:	8940      	ldrh	r0, [r0, #10]
 80033be:	4770      	bx	lr

080033c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80033c0:	8980      	ldrh	r0, [r0, #12]
 80033c2:	4770      	bx	lr

080033c4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80033c4:	8880      	ldrh	r0, [r0, #4]
 80033c6:	4770      	bx	lr

080033c8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80033c8:	7983      	ldrb	r3, [r0, #6]
 80033ca:	8880      	ldrh	r0, [r0, #4]
 80033cc:	4418      	add	r0, r3
    }
 80033ce:	b280      	uxth	r0, r0
 80033d0:	4770      	bx	lr

080033d2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80033d2:	79c0      	ldrb	r0, [r0, #7]
    }
 80033d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80033d8:	4770      	bx	lr

080033da <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80033da:	79c0      	ldrb	r0, [r0, #7]
    }
 80033dc:	09c0      	lsrs	r0, r0, #7
 80033de:	4770      	bx	lr

080033e0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80033e0:	4770      	bx	lr

080033e2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80033e2:	b510      	push	{r4, lr}
 80033e4:	4604      	mov	r4, r0
    }
 80033e6:	2108      	movs	r1, #8
 80033e8:	f025 fd7c 	bl	8028ee4 <_ZdlPvj>
 80033ec:	4620      	mov	r0, r4
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80033f0:	4770      	bx	lr

080033f2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80033f2:	4770      	bx	lr

080033f4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80033f4:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80033f8:	6808      	ldr	r0, [r1, #0]
 80033fa:	6849      	ldr	r1, [r1, #4]
 80033fc:	c303      	stmia	r3!, {r0, r1}
    }
 80033fe:	4770      	bx	lr

08003400 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003400:	4770      	bx	lr

08003402 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003402:	4770      	bx	lr

08003404 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003404:	6041      	str	r1, [r0, #4]
    }
 8003406:	4770      	bx	lr

08003408 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003408:	4770      	bx	lr
	...

0800340c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800340e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003412:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003416:	2300      	movs	r3, #0
 8003418:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800341c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003420:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoMainScreenNoTransition();
    }
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	080034cd 	.word	0x080034cd

0800342c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800342c:	2301      	movs	r3, #1
 800342e:	7203      	strb	r3, [r0, #8]
    }
 8003430:	4770      	bx	lr

08003432 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003432:	4770      	bx	lr

08003434 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003434:	4770      	bx	lr

08003436 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003436:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003438:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800343a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800343c:	68c2      	ldr	r2, [r0, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	1054      	asrs	r4, r2, #1
 8003442:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003446:	07d2      	lsls	r2, r2, #31
 8003448:	bf48      	it	mi
 800344a:	590a      	ldrmi	r2, [r1, r4]
    }
 800344c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003450:	bf48      	it	mi
 8003452:	58d3      	ldrmi	r3, [r2, r3]
 8003454:	4718      	bx	r3

08003456 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003456:	6843      	ldr	r3, [r0, #4]
 8003458:	b12b      	cbz	r3, 8003466 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800345a:	6883      	ldr	r3, [r0, #8]
 800345c:	b92b      	cbnz	r3, 800346a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800345e:	68c0      	ldr	r0, [r0, #12]
 8003460:	f000 0001 	and.w	r0, r0, #1
 8003464:	4770      	bx	lr
 8003466:	4618      	mov	r0, r3
 8003468:	4770      	bx	lr
 800346a:	2001      	movs	r0, #1
    }
 800346c:	4770      	bx	lr

0800346e <_ZN8touchgfx12NoTransitionD0Ev>:
 800346e:	b510      	push	{r4, lr}
 8003470:	4604      	mov	r4, r0
 8003472:	210c      	movs	r1, #12
 8003474:	f025 fd36 	bl	8028ee4 <_ZdlPvj>
 8003478:	4620      	mov	r0, r4
 800347a:	bd10      	pop	{r4, pc}

0800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800347c:	b510      	push	{r4, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	2110      	movs	r1, #16
 8003482:	f025 fd2f 	bl	8028ee4 <_ZdlPvj>
 8003486:	4620      	mov	r0, r4
 8003488:	bd10      	pop	{r4, pc}

0800348a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003492:	f025 fd27 	bl	8028ee4 <_ZdlPvj>
 8003496:	4620      	mov	r0, r4
 8003498:	bd10      	pop	{r4, pc}

0800349a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800349a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800349c:	f016 ffa2 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80034a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80034a4:	f017 bb44 	b.w	801ab30 <_ZN8touchgfx11Application10invalidateEv>

080034a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80034a8:	b510      	push	{r4, lr}
 80034aa:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80034ac:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80034b0:	b158      	cbz	r0, 80034ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80034b2:	6803      	ldr	r3, [r0, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4798      	blx	r3
 80034b8:	b138      	cbz	r0, 80034ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80034ba:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80034be:	6803      	ldr	r3, [r0, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 80034ca:	bd10      	pop	{r4, pc}

080034cc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80034cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80034d0:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80034d4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80034d6:	68a8      	ldr	r0, [r5, #8]
 80034d8:	6803      	ldr	r3, [r0, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4798      	blx	r3
 80034de:	f5b0 7f2a 	cmp.w	r0, #680	; 0x2a8
 80034e2:	d205      	bcs.n	80034f0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x24>
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x130>)
 80034e6:	21a3      	movs	r1, #163	; 0xa3
 80034e8:	4a45      	ldr	r2, [pc, #276]	; (8003600 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80034ea:	4846      	ldr	r0, [pc, #280]	; (8003604 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x138>)
 80034ec:	f025 fd28 	bl	8028f40 <__assert_func>
 80034f0:	6868      	ldr	r0, [r5, #4]
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4798      	blx	r3
 80034f8:	280f      	cmp	r0, #15
 80034fa:	d803      	bhi.n	8003504 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x38>
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x13c>)
 80034fe:	21a4      	movs	r1, #164	; 0xa4
 8003500:	4a3f      	ldr	r2, [pc, #252]	; (8003600 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
 8003502:	e7f2      	b.n	80034ea <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003504:	68e8      	ldr	r0, [r5, #12]
 8003506:	6803      	ldr	r3, [r0, #0]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4798      	blx	r3
 800350c:	280b      	cmp	r0, #11
 800350e:	d803      	bhi.n	8003518 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x4c>
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x140>)
 8003512:	21a5      	movs	r1, #165	; 0xa5
 8003514:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
 8003516:	e7e8      	b.n	80034ea <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003518:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003614 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 800351c:	f016 ff62 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 8003520:	f016 ff66 	bl	801a3f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003524:	f8d9 0000 	ldr.w	r0, [r9]
 8003528:	b110      	cbz	r0, 8003530 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800352a:	6803      	ldr	r3, [r0, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4798      	blx	r3
    if (*currentTrans)
 8003530:	f8d9 0000 	ldr.w	r0, [r9]
 8003534:	b110      	cbz	r0, 800353c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4798      	blx	r3
    if (*currentScreen)
 800353c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003618 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x14c>
 8003540:	f8d8 0000 	ldr.w	r0, [r8]
 8003544:	b110      	cbz	r0, 800354c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4798      	blx	r3
    if (*currentPresenter)
 800354c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003550:	b110      	cbz	r0, 8003558 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4798      	blx	r3
    if (*currentScreen)
 8003558:	f8d8 0000 	ldr.w	r0, [r8]
 800355c:	b110      	cbz	r0, 8003564 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4798      	blx	r3
    if (*currentPresenter)
 8003564:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003568:	b110      	cbz	r0, 8003570 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003570:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003572:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003574:	f04f 0b00 	mov.w	fp, #0
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4798      	blx	r3
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x144>)
 8003580:	4604      	mov	r4, r0
 8003582:	f8c0 b004 	str.w	fp, [r0, #4]
 8003586:	6003      	str	r3, [r0, #0]
 8003588:	4659      	mov	r1, fp
 800358a:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800358e:	68a8      	ldr	r0, [r5, #8]
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4798      	blx	r3
 8003596:	4606      	mov	r6, r0
 8003598:	f000 fcc4 	bl	8003f24 <_ZN8MainViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800359c:	6868      	ldr	r0, [r5, #4]
 800359e:	4659      	mov	r1, fp
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	4798      	blx	r3
 80035a6:	4605      	mov	r5, r0
 80035a8:	4631      	mov	r1, r6
 80035aa:	f000 fc8b 	bl	8003ec4 <_ZN13MainPresenterC1ER8MainView>
    *currentTrans = newTransition;
 80035ae:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80035b2:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80035b6:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80035ba:	b1e5      	cbz	r5, 80035f6 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x12a>
 80035bc:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80035be:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80035c2:	4630      	mov	r0, r6
 80035c4:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80035c6:	f8c5 a008 	str.w	sl, [r5, #8]
 80035ca:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80035cc:	63f5      	str	r5, [r6, #60]	; 0x3c
 80035ce:	4798      	blx	r3
    newPresenter->activate();
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	4628      	mov	r0, r5
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80035d8:	4621      	mov	r1, r4
 80035da:	4630      	mov	r0, r6
 80035dc:	f018 fae8 	bl	801bbb0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	4620      	mov	r0, r4
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4798      	blx	r3
    newTransition->invalidate();
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	4620      	mov	r0, r4
 80035ec:	695b      	ldr	r3, [r3, #20]
}
 80035ee:	b001      	add	sp, #4
 80035f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	4718      	bx	r3
    model->bind(newPresenter);
 80035f6:	462b      	mov	r3, r5
 80035f8:	e7e1      	b.n	80035be <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xf2>
 80035fa:	bf00      	nop
 80035fc:	0802bf14 	.word	0x0802bf14
 8003600:	0802bfa2 	.word	0x0802bfa2
 8003604:	0802c0a0 	.word	0x0802c0a0
 8003608:	0802c0e7 	.word	0x0802c0e7
 800360c:	0802c18a 	.word	0x0802c18a
 8003610:	0802c29c 	.word	0x0802c29c
 8003614:	20015314 	.word	0x20015314
 8003618:	20015310 	.word	0x20015310

0800361c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	4604      	mov	r4, r0
 8003620:	4617      	mov	r7, r2
 8003622:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003624:	f016 ff00 	bl	801a428 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 800362a:	2500      	movs	r5, #0
        instance = this;
 800362c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800362e:	4629      	mov	r1, r5
      model(m)
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003632:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8003636:	4e0f      	ldr	r6, [pc, #60]	; (8003674 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800363e:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8003642:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003646:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003648:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003650:	4628      	mov	r0, r5
 8003652:	f000 fbad 	bl	8003db0 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003656:	6833      	ldr	r3, [r6, #0]
 8003658:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800365c:	b10a      	cbz	r2, 8003662 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800365e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003660:	b900      	cbnz	r0, 8003664 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8003662:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003664:	f01e fd1b 	bl	802209e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003668:	4620      	mov	r0, r4
 800366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366c:	20015320 	.word	0x20015320
 8003670:	0802c250 	.word	0x0802c250
 8003674:	200152d4 	.word	0x200152d4
 8003678:	0802c238 	.word	0x0802c238

0800367c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x1c>)
 800367e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003682:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003686:	2300      	movs	r3, #0
 8003688:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800368c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003690:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	080034cd 	.word	0x080034cd

0800369c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800369c:	6a00      	ldr	r0, [r0, #32]
 800369e:	4770      	bx	lr

080036a0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80036a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80036a2:	4770      	bx	lr

080036a4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80036a4:	4770      	bx	lr

080036a6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80036a6:	888b      	ldrh	r3, [r1, #4]
 80036a8:	6980      	ldr	r0, [r0, #24]
 80036aa:	0adb      	lsrs	r3, r3, #11
 80036ac:	680a      	ldr	r2, [r1, #0]
 80036ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80036b2:	4410      	add	r0, r2
 80036b4:	4770      	bx	lr

080036b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80036b6:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80036b8:	b1c2      	cbz	r2, 80036ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80036ba:	7b13      	ldrb	r3, [r2, #12]
 80036bc:	b1b3      	cbz	r3, 80036ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80036be:	7b54      	ldrb	r4, [r2, #13]
 80036c0:	7ad2      	ldrb	r2, [r2, #11]
 80036c2:	0224      	lsls	r4, r4, #8
 80036c4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80036c8:	4314      	orrs	r4, r2
 80036ca:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80036cc:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80036ce:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80036d2:	8813      	ldrh	r3, [r2, #0]
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d102      	bne.n	80036de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80036d8:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80036dc:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80036de:	d805      	bhi.n	80036ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80036e0:	3801      	subs	r0, #1
 80036e2:	3204      	adds	r2, #4
 80036e4:	b280      	uxth	r0, r0
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d1f3      	bne.n	80036d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80036ea:	e7f7      	b.n	80036dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e7f5      	b.n	80036dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080036f0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	2128      	movs	r1, #40	; 0x28
 80036f6:	f025 fbf5 	bl	8028ee4 <_ZdlPvj>
 80036fa:	4620      	mov	r0, r4
 80036fc:	bd10      	pop	{r4, pc}
	...

08003700 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003700:	b530      	push	{r4, r5, lr}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003706:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800370a:	9506      	str	r5, [sp, #24]
 800370c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003710:	9505      	str	r5, [sp, #20]
 8003712:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003716:	9504      	str	r5, [sp, #16]
 8003718:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800371c:	9503      	str	r5, [sp, #12]
 800371e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003722:	9502      	str	r5, [sp, #8]
 8003724:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003728:	9501      	str	r5, [sp, #4]
 800372a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800372e:	9500      	str	r5, [sp, #0]
 8003730:	f017 fe9e 	bl	801b470 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8003736:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800373c:	61a3      	str	r3, [r4, #24]
 800373e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003740:	61e3      	str	r3, [r4, #28]
 8003742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003744:	6223      	str	r3, [r4, #32]
 8003746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003748:	6263      	str	r3, [r4, #36]	; 0x24
}
 800374a:	b009      	add	sp, #36	; 0x24
 800374c:	bd30      	pop	{r4, r5, pc}
 800374e:	bf00      	nop
 8003750:	0802c2c0 	.word	0x0802c2c0

08003754 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8003754:	4770      	bx	lr

08003756 <_ZN12MainViewBase11setupScreenEv>:
}

void MainViewBase::setupScreen()
{

}
 8003756:	4770      	bx	lr

08003758 <_ZN12MainViewBaseD0Ev>:
 8003758:	b510      	push	{r4, lr}
 800375a:	4604      	mov	r4, r0
 800375c:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8003760:	f025 fbc0 	bl	8028ee4 <_ZdlPvj>
 8003764:	4620      	mov	r0, r4
 8003766:	bd10      	pop	{r4, pc}

08003768 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	461d      	mov	r5, r3
 800376e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003772:	f7ff fde4 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	4629      	mov	r1, r5
 800377a:	4620      	mov	r0, r4
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4798      	blx	r3
        setHeight(height);
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	4631      	mov	r1, r6
 8003784:	4620      	mov	r0, r4
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800378c:	4718      	bx	r3
	...

08003790 <_ZN8touchgfx6WidgetC1Ev>:
 8003790:	2200      	movs	r2, #0
 8003792:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003796:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 800379a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800379e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80037a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a6:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 80037a8:	4a01      	ldr	r2, [pc, #4]	; (80037b0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80037aa:	6002      	str	r2, [r0, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	0802c3dc 	.word	0x0802c3dc

080037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 80037ba:	2226      	movs	r2, #38	; 0x26
 80037bc:	2100      	movs	r1, #0
 80037be:	f025 fd45 	bl	802924c <memset>
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff ffe4 	bl	8003790 <_ZN8touchgfx6WidgetC1Ev>
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	882b      	ldrh	r3, [r5, #0]
 80037d2:	84e3      	strh	r3, [r4, #38]	; 0x26
 80037d4:	23ff      	movs	r3, #255	; 0xff
 80037d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 80037da:	f014 ffb6 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80037de:	4620      	mov	r0, r4
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	0802eb9c 	.word	0x0802eb9c

080037e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80037ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 80037ec:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 80037ee:	4606      	mov	r6, r0
 80037f0:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 80037f2:	428b      	cmp	r3, r1
 80037f4:	d92b      	bls.n	800384e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b92b      	cbnz	r3, 8003808 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80037fe:	216c      	movs	r1, #108	; 0x6c
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003802:	4819      	ldr	r0, [pc, #100]	; (8003868 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003804:	f025 fb9c 	bl	8028f40 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003808:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	f000 fb06 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	4601      	mov	r1, r0
 8003820:	9001      	str	r0, [sp, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	4628      	mov	r0, r5
 8003826:	4798      	blx	r3
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	4604      	mov	r4, r0
 800382c:	9901      	ldr	r1, [sp, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4628      	mov	r0, r5
 8003832:	4798      	blx	r3
 8003834:	fb14 f400 	smulbb	r4, r4, r0
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	4628      	mov	r0, r5
 800383c:	b2e4      	uxtb	r4, r4
 800383e:	9901      	ldr	r1, [sp, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	4798      	blx	r3
 8003844:	4404      	add	r4, r0
 8003846:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800384a:	b002      	add	sp, #8
 800384c:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8003854:	e7f9      	b.n	800384a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x62>
 8003856:	bf00      	nop
 8003858:	20015328 	.word	0x20015328
 800385c:	20015324 	.word	0x20015324
 8003860:	0802c310 	.word	0x0802c310
 8003864:	0802c352 	.word	0x0802c352
 8003868:	0802c38d 	.word	0x0802c38d
 800386c:	2001532c 	.word	0x2001532c
 8003870:	20015330 	.word	0x20015330

08003874 <_ZN12MainViewBaseC1Ev>:
MainViewBase::MainViewBase()
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	4604      	mov	r4, r0
        : presenter(0)
 800387a:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800387c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8003880:	4627      	mov	r7, r4
 8003882:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 8003886:	f504 79ae 	add.w	r9, r4, #348	; 0x15c
 800388a:	f504 78c8 	add.w	r8, r4, #400	; 0x190
 800388e:	f504 7bec 	add.w	fp, r4, #472	; 0x1d8
 8003892:	ed2d 8b06 	vpush	{d8-d10}
 8003896:	b087      	sub	sp, #28
 8003898:	f017 ffde 	bl	801b858 <_ZN8touchgfx6ScreenC1Ev>
 800389c:	4bae      	ldr	r3, [pc, #696]	; (8003b58 <_ZN12MainViewBaseC1Ev+0x2e4>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800389e:	2226      	movs	r2, #38	; 0x26
 80038a0:	4629      	mov	r1, r5
 80038a2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80038a4:	f847 3b40 	str.w	r3, [r7], #64
 80038a8:	4638      	mov	r0, r7
 80038aa:	f025 fccf 	bl	802924c <memset>
 80038ae:	4638      	mov	r0, r7
 80038b0:	f7ff ff6e 	bl	8003790 <_ZN8touchgfx6WidgetC1Ev>
 80038b4:	4ba9      	ldr	r3, [pc, #676]	; (8003b5c <_ZN12MainViewBaseC1Ev+0x2e8>)
 80038b6:	a904      	add	r1, sp, #16
        : color(col)
 80038b8:	66a5      	str	r5, [r4, #104]	; 0x68
 80038ba:	6423      	str	r3, [r4, #64]	; 0x40
 80038bc:	23ff      	movs	r3, #255	; 0xff
 80038be:	f8ad a010 	strh.w	sl, [sp, #16]
 80038c2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 80038c6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80038ca:	4618      	mov	r0, r3
 80038cc:	ee08 3a10 	vmov	s16, r3
 80038d0:	f7ff ff70 	bl	80037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80038d4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80038d8:	a904      	add	r1, sp, #16
 80038da:	f8ad a010 	strh.w	sl, [sp, #16]
 80038de:	4618      	mov	r0, r3
 80038e0:	ee08 3a90 	vmov	s17, r3
 80038e4:	f7ff ff66 	bl	80037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80038e8:	4630      	mov	r0, r6
 80038ea:	f013 f821 	bl	8016930 <_ZN8touchgfx12DigitalClockC1Ev>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80038ee:	4629      	mov	r1, r5
 80038f0:	2226      	movs	r2, #38	; 0x26
 80038f2:	4648      	mov	r0, r9
 80038f4:	f025 fcaa 	bl	802924c <memset>
 80038f8:	4648      	mov	r0, r9
 80038fa:	f7ff ff49 	bl	8003790 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 80038fe:	f04f 0301 	mov.w	r3, #1
 8003902:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 8003906:	4640      	mov	r0, r8
 8003908:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800390c:	4b94      	ldr	r3, [pc, #592]	; (8003b60 <_ZN12MainViewBaseC1Ev+0x2ec>)
 800390e:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
 8003912:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 8003916:	f8a4 a18a 	strh.w	sl, [r4, #394]	; 0x18a
 800391a:	f8a4 a18c 	strh.w	sl, [r4, #396]	; 0x18c
 800391e:	f884 a18e 	strb.w	sl, [r4, #398]	; 0x18e
 8003922:	f015 f843 	bl	80189ac <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003926:	4658      	mov	r0, fp
 8003928:	f015 f840 	bl	80189ac <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800392c:	f504 7208 	add.w	r2, r4, #544	; 0x220
 8003930:	a904      	add	r1, sp, #16
 8003932:	f8ad a010 	strh.w	sl, [sp, #16]
 8003936:	4610      	mov	r0, r2
 8003938:	ee09 2a10 	vmov	s18, r2
 800393c:	f7ff ff3a 	bl	80037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003940:	f504 7213 	add.w	r2, r4, #588	; 0x24c
 8003944:	a904      	add	r1, sp, #16
 8003946:	f8ad a010 	strh.w	sl, [sp, #16]
 800394a:	4610      	mov	r0, r2
 800394c:	ee09 2a90 	vmov	s19, r2
 8003950:	f7ff ff30 	bl	80037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003954:	f504 721e 	add.w	r2, r4, #632	; 0x278
 8003958:	a904      	add	r1, sp, #16
 800395a:	f8ad a010 	strh.w	sl, [sp, #16]
 800395e:	4610      	mov	r0, r2
 8003960:	ee0a 2a10 	vmov	s20, r2
 8003964:	f7ff ff26 	bl	80037b4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 480, 272);
 8003968:	f44f 7388 	mov.w	r3, #272	; 0x110
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800396c:	f04f 4a7f 	mov.w	sl, #4278190080	; 0xff000000
 8003970:	462a      	mov	r2, r5
 8003972:	4629      	mov	r1, r5
 8003974:	4638      	mov	r0, r7
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800397c:	f7ff fef4 	bl	8003768 <_ZN8touchgfx8Drawable11setPositionEssss>
    mainBG.setXY(0, 0);
 8003980:	462a      	mov	r2, r5
 8003982:	4629      	mov	r1, r5
 8003984:	ee18 0a10 	vmov	r0, s16
 8003988:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
 800398c:	f7ff fcd7 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003990:	f04f 0202 	mov.w	r2, #2
    mainBG.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8003994:	a904      	add	r1, sp, #16
 8003996:	ee18 0a10 	vmov	r0, s16
 800399a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800399e:	f014 fed4 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainLOGO.setXY(90, -14);
 80039a2:	f06f 020d 	mvn.w	r2, #13
 80039a6:	ee18 0a90 	vmov	r0, s17
 80039aa:	215a      	movs	r1, #90	; 0x5a
 80039ac:	f7ff fcc7 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
    mainLOGO.setBitmap(touchgfx::Bitmap(BITMAP_AW_EMBEDDED_LOGOS_TRANSPARENT_25PC_ID));
 80039b0:	a904      	add	r1, sp, #16
 80039b2:	ee18 0a90 	vmov	r0, s17
 80039b6:	f8ad 5010 	strh.w	r5, [sp, #16]
 80039ba:	f014 fec6 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    digitalClock1.setPosition(178, 0, 125, 43);
 80039be:	232b      	movs	r3, #43	; 0x2b
 80039c0:	462a      	mov	r2, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	21b2      	movs	r1, #178	; 0xb2
 80039c8:	237d      	movs	r3, #125	; 0x7d
 80039ca:	f7ff fecd 	bl	8003768 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80039ce:	4651      	mov	r1, sl
 80039d0:	4630      	mov	r0, r6
        color = col;
 80039d2:	f04f 3aff 	mov.w	sl, #4294967295
 80039d6:	f012 fed1 	bl	801677c <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
        : typedTextId(id)
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <_ZN12MainViewBaseC1Ev+0x2f0>)
 80039dc:	f04f 0202 	mov.w	r2, #2
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IDW8));
 80039e0:	a904      	add	r1, sp, #16
 80039e2:	4630      	mov	r0, r6
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80039ea:	f012 fedc 	bl	80167a6 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 80039ee:	4630      	mov	r0, r6
 80039f0:	2101      	movs	r1, #1
 80039f2:	f012 ffeb 	bl	80169cc <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 80039f6:	f04f 0301 	mov.w	r3, #1
    digitalClock1.setTime24Hour(12, 0, 0);
 80039fa:	462a      	mov	r2, r5
 80039fc:	4630      	mov	r0, r6
 80039fe:	f884 30f3 	strb.w	r3, [r4, #243]	; 0xf3
 8003a02:	210c      	movs	r1, #12
 8003a04:	462b      	mov	r3, r5
 8003a06:	f012 ffe4 	bl	80169d2 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    btnMainSettings.setXY(0, 0);
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4648      	mov	r0, r9
 8003a10:	f7ff fc95 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003a14:	2304      	movs	r3, #4
    btnMainSettings.setBitmaps(touchgfx::Bitmap(BITMAP_CONFIGURATION_ID), touchgfx::Bitmap(BITMAP_CONFIGURATION_ID));
 8003a16:	aa04      	add	r2, sp, #16
 8003a18:	a903      	add	r1, sp, #12
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003a20:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003a24:	f014 fce8 	bl	80183f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnMainAbout.setXY(0, 212);
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	22d4      	movs	r2, #212	; 0xd4
 8003a2e:	f7ff fc86 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003a32:	2305      	movs	r3, #5
    btnMainAbout.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003a34:	a903      	add	r1, sp, #12
 8003a36:	aa04      	add	r2, sp, #16
 8003a38:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003a3c:	f04f 0306 	mov.w	r3, #6
 8003a40:	4640      	mov	r0, r8
 8003a42:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003a46:	f014 fcd7 	bl	80183f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003a4a:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 8003a4e:	4640      	mov	r0, r8
 8003a50:	f8a4 21c8 	strh.w	r2, [r4, #456]	; 0x1c8
 8003a54:	f7ff fec8 	bl	80037e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btnMainStatus.setXY(420, 212);
 8003a58:	4658      	mov	r0, fp
 8003a5a:	22d4      	movs	r2, #212	; 0xd4
 8003a5c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
        colorPressed = col;
 8003a60:	e9c4 aa73 	strd	sl, sl, [r4, #460]	; 0x1cc
 8003a64:	f7ff fc6b 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003a68:	2305      	movs	r3, #5
    btnMainStatus.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003a6a:	aa04      	add	r2, sp, #16
 8003a6c:	a903      	add	r1, sp, #12
 8003a6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003a72:	f04f 0306 	mov.w	r3, #6
 8003a76:	4658      	mov	r0, fp
 8003a78:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003a7c:	f014 fcbc 	bl	80183f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003a80:	4658      	mov	r0, fp
 8003a82:	f8a4 5210 	strh.w	r5, [r4, #528]	; 0x210
 8003a86:	f7ff feaf 	bl	80037e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    mainStateGreen.setXY(450, 10);
 8003a8a:	220a      	movs	r2, #10
 8003a8c:	ee19 0a10 	vmov	r0, s18
 8003a90:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
        colorPressed = col;
 8003a94:	e9c4 aa85 	strd	sl, sl, [r4, #532]	; 0x214
 8003a98:	f7ff fc51 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003a9c:	2307      	movs	r3, #7
    mainStateGreen.setBitmap(touchgfx::Bitmap(BITMAP_GREENLED_ID));
 8003a9e:	a904      	add	r1, sp, #16
 8003aa0:	ee19 0a10 	vmov	r0, s18
 8003aa4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003aa8:	f014 fe4f 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainStateOrange.setXY(450, 10);
 8003aac:	220a      	movs	r2, #10
 8003aae:	ee19 0a90 	vmov	r0, s19
 8003ab2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003ab6:	f7ff fc42 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003aba:	2308      	movs	r3, #8
    mainStateOrange.setBitmap(touchgfx::Bitmap(BITMAP_ORANGELED_ID));
 8003abc:	a904      	add	r1, sp, #16
 8003abe:	ee19 0a90 	vmov	r0, s19
        visible = vis;
 8003ac2:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
 8003ac6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003aca:	f014 fe3e 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainStateRed.setXY(450, 10);
 8003ace:	220a      	movs	r2, #10
 8003ad0:	ee1a 0a10 	vmov	r0, s20
 8003ad4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003ad8:	f7ff fc31 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8003adc:	2309      	movs	r3, #9
 8003ade:	f884 529d 	strb.w	r5, [r4, #669]	; 0x29d
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003ae2:	1d25      	adds	r5, r4, #4
    mainStateRed.setBitmap(touchgfx::Bitmap(BITMAP_REDLED_ID));
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	ee1a 0a10 	vmov	r0, s20
 8003aea:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003aee:	f014 fe2c 	bl	801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003af2:	4639      	mov	r1, r7
 8003af4:	4628      	mov	r0, r5
 8003af6:	f012 ffdd 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003afa:	ee18 1a10 	vmov	r1, s16
 8003afe:	4628      	mov	r0, r5
 8003b00:	f012 ffd8 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b04:	ee18 1a90 	vmov	r1, s17
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f012 ffd3 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4628      	mov	r0, r5
 8003b12:	f012 ffcf 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b16:	4649      	mov	r1, r9
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f012 ffcb 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b1e:	4641      	mov	r1, r8
 8003b20:	4628      	mov	r0, r5
 8003b22:	f012 ffc7 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b26:	4659      	mov	r1, fp
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f012 ffc3 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b2e:	ee19 1a10 	vmov	r1, s18
 8003b32:	4628      	mov	r0, r5
 8003b34:	f012 ffbe 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b38:	ee19 1a90 	vmov	r1, s19
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f012 ffb9 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b42:	4628      	mov	r0, r5
 8003b44:	ee1a 1a10 	vmov	r1, s20
 8003b48:	f012 ffb4 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	b007      	add	sp, #28
 8003b50:	ecbd 8b06 	vpop	{d8-d10}
 8003b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b58:	0802c444 	.word	0x0802c444
 8003b5c:	0802eac0 	.word	0x0802eac0
 8003b60:	0802eb28 	.word	0x0802eb28
 8003b64:	0802bf0c 	.word	0x0802bf0c

08003b68 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 9, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003b68:	4770      	bx	lr
	...

08003b6c <_Z23getFont_verdana_10_4bppv>:
{
 8003b6c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 9, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003b6e:	4d15      	ldr	r5, [pc, #84]	; (8003bc4 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003b70:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 9, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003b72:	782c      	ldrb	r4, [r5, #0]
 8003b74:	f3bf 8f5b 	dmb	ish
 8003b78:	f014 0401 	ands.w	r4, r4, #1
 8003b7c:	d11f      	bne.n	8003bbe <_Z23getFont_verdana_10_4bppv+0x52>
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f025 f9b2 	bl	8028ee8 <__cxa_guard_acquire>
 8003b84:	b1d8      	cbz	r0, 8003bbe <_Z23getFont_verdana_10_4bppv+0x52>
 8003b86:	233f      	movs	r3, #63	; 0x3f
 8003b88:	2201      	movs	r2, #1
 8003b8a:	490f      	ldr	r1, [pc, #60]	; (8003bc8 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003b8c:	9307      	str	r3, [sp, #28]
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <_Z23getFont_verdana_10_4bppv+0x60>)
 8003b90:	480f      	ldr	r0, [pc, #60]	; (8003bd0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003b92:	9306      	str	r3, [sp, #24]
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003b96:	9408      	str	r4, [sp, #32]
 8003b98:	9403      	str	r4, [sp, #12]
 8003b9a:	9400      	str	r4, [sp, #0]
 8003b9c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003ba6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003baa:	230a      	movs	r3, #10
 8003bac:	2209      	movs	r2, #9
 8003bae:	f7ff fda7 	bl	8003700 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003bb2:	4809      	ldr	r0, [pc, #36]	; (8003bd8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003bb4:	f025 f9e2 	bl	8028f7c <atexit>
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f025 f9a1 	bl	8028f00 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003bbe:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003bc0:	b00d      	add	sp, #52	; 0x34
 8003bc2:	bd30      	pop	{r4, r5, pc}
 8003bc4:	20001ecc 	.word	0x20001ecc
 8003bc8:	900e2e0c 	.word	0x900e2e0c
 8003bcc:	0802f0e8 	.word	0x0802f0e8
 8003bd0:	20001ed0 	.word	0x20001ed0
 8003bd4:	0802f0f4 	.word	0x0802f0f4
 8003bd8:	08003b69 	.word	0x08003b69

08003bdc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003bdc:	4770      	bx	lr
	...

08003be0 <_Z23getFont_verdana_20_4bppv>:
{
 8003be0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003be2:	4d15      	ldr	r5, [pc, #84]	; (8003c38 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003be4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003be6:	782c      	ldrb	r4, [r5, #0]
 8003be8:	f3bf 8f5b 	dmb	ish
 8003bec:	f014 0401 	ands.w	r4, r4, #1
 8003bf0:	d11e      	bne.n	8003c30 <_Z23getFont_verdana_20_4bppv+0x50>
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f025 f978 	bl	8028ee8 <__cxa_guard_acquire>
 8003bf8:	b1d0      	cbz	r0, 8003c30 <_Z23getFont_verdana_20_4bppv+0x50>
 8003bfa:	233f      	movs	r3, #63	; 0x3f
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	490f      	ldr	r1, [pc, #60]	; (8003c3c <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003c00:	9307      	str	r3, [sp, #28]
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003c04:	480f      	ldr	r0, [pc, #60]	; (8003c44 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003c06:	9306      	str	r3, [sp, #24]
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003c0a:	9408      	str	r4, [sp, #32]
 8003c0c:	9403      	str	r4, [sp, #12]
 8003c0e:	9400      	str	r4, [sp, #0]
 8003c10:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003c14:	2304      	movs	r3, #4
 8003c16:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003c1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c1e:	2314      	movs	r3, #20
 8003c20:	f7ff fd6e 	bl	8003700 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003c24:	4809      	ldr	r0, [pc, #36]	; (8003c4c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003c26:	f025 f9a9 	bl	8028f7c <atexit>
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f025 f968 	bl	8028f00 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003c30:	4804      	ldr	r0, [pc, #16]	; (8003c44 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003c32:	b00d      	add	sp, #52	; 0x34
 8003c34:	bd30      	pop	{r4, r5, pc}
 8003c36:	bf00      	nop
 8003c38:	20001ef8 	.word	0x20001ef8
 8003c3c:	900e2e8c 	.word	0x900e2e8c
 8003c40:	0802f0ec 	.word	0x0802f0ec
 8003c44:	20001efc 	.word	0x20001efc
 8003c48:	0802f0f8 	.word	0x0802f0f8
 8003c4c:	08003bdd 	.word	0x08003bdd

08003c50 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003c50:	4770      	bx	lr
	...

08003c54 <_Z23getFont_verdana_40_4bppv>:
{
 8003c54:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003c56:	4d15      	ldr	r5, [pc, #84]	; (8003cac <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003c58:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003c5a:	782c      	ldrb	r4, [r5, #0]
 8003c5c:	f3bf 8f5b 	dmb	ish
 8003c60:	f014 0401 	ands.w	r4, r4, #1
 8003c64:	d11f      	bne.n	8003ca6 <_Z23getFont_verdana_40_4bppv+0x52>
 8003c66:	4628      	mov	r0, r5
 8003c68:	f025 f93e 	bl	8028ee8 <__cxa_guard_acquire>
 8003c6c:	b1d8      	cbz	r0, 8003ca6 <_Z23getFont_verdana_40_4bppv+0x52>
 8003c6e:	233f      	movs	r3, #63	; 0x3f
 8003c70:	2204      	movs	r2, #4
 8003c72:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003c74:	9307      	str	r3, [sp, #28]
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003c78:	480f      	ldr	r0, [pc, #60]	; (8003cb8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003c7a:	9306      	str	r3, [sp, #24]
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <_Z23getFont_verdana_40_4bppv+0x68>)
 8003c7e:	9408      	str	r4, [sp, #32]
 8003c80:	9403      	str	r4, [sp, #12]
 8003c82:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003c86:	2301      	movs	r3, #1
 8003c88:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003c8c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2210      	movs	r2, #16
 8003c94:	2328      	movs	r3, #40	; 0x28
 8003c96:	f7ff fd33 	bl	8003700 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003c9a:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003c9c:	f025 f96e 	bl	8028f7c <atexit>
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f025 f92d 	bl	8028f00 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003ca6:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003ca8:	b00d      	add	sp, #52	; 0x34
 8003caa:	bd30      	pop	{r4, r5, pc}
 8003cac:	20001f24 	.word	0x20001f24
 8003cb0:	900e2e9c 	.word	0x900e2e9c
 8003cb4:	0802f0f0 	.word	0x0802f0f0
 8003cb8:	20001f28 	.word	0x20001f28
 8003cbc:	0802f0fc 	.word	0x0802f0fc
 8003cc0:	08003c51 	.word	0x08003c51

08003cc4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	4770      	bx	lr

08003cc8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr

08003ccc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ccc:	b40e      	push	{r1, r2, r3}
 8003cce:	b503      	push	{r0, r1, lr}
 8003cd0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003cd2:	2100      	movs	r1, #0
{
 8003cd4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003cd8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003cda:	f017 f9f9 	bl	801b0d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003cde:	b002      	add	sp, #8
 8003ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce4:	b003      	add	sp, #12
 8003ce6:	4770      	bx	lr

08003ce8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ce8:	b40c      	push	{r2, r3}
 8003cea:	b507      	push	{r0, r1, r2, lr}
 8003cec:	ab04      	add	r3, sp, #16
 8003cee:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003cf2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003cf4:	f017 f9ec 	bl	801b0d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003cf8:	b003      	add	sp, #12
 8003cfa:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cfe:	b002      	add	sp, #8
 8003d00:	4770      	bx	lr
	...

08003d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003d04:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003d06:	b510      	push	{r4, lr}
 8003d08:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003d0a:	b373      	cbz	r3, 8003d6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003d0c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003d0e:	b92b      	cbnz	r3, 8003d1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003d12:	21c0      	movs	r1, #192	; 0xc0
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003d16:	4819      	ldr	r0, [pc, #100]	; (8003d7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003d18:	f025 f912 	bl	8028f40 <__assert_func>
            return buffer[pos];
 8003d1c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003d1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003d22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003d24:	b30b      	cbz	r3, 8003d6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003d26:	f018 fc73 	bl	801c610 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003d2a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d803      	bhi.n	8003d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003d32:	21c5      	movs	r1, #197	; 0xc5
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003d36:	e7ee      	b.n	8003d16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003d38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003d3a:	f640 103f 	movw	r0, #2367	; 0x93f
 8003d3e:	1c53      	adds	r3, r2, #1
 8003d40:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003d42:	2b09      	cmp	r3, #9
 8003d44:	4619      	mov	r1, r3
 8003d46:	bf88      	it	hi
 8003d48:	f1a3 010a 	subhi.w	r1, r3, #10
 8003d4c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003d50:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003d52:	4281      	cmp	r1, r0
 8003d54:	d109      	bne.n	8003d6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003d56:	2b0a      	cmp	r3, #10
 8003d58:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003d5c:	bf28      	it	cs
 8003d5e:	2300      	movcs	r3, #0
            return buffer[pos];
 8003d60:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003d62:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003d66:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003d68:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003d6a:	4620      	mov	r0, r4
}
 8003d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003d70:	f018 bb50 	b.w	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003d74:	0802c470 	.word	0x0802c470
 8003d78:	0802c479 	.word	0x0802c479
 8003d7c:	0802c524 	.word	0x0802c524
 8003d80:	0802c56e 	.word	0x0802c56e
 8003d84:	0802c57c 	.word	0x0802c57c

08003d88 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003d88:	f018 bb0d 	b.w	801c3a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003d8c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	ac02      	add	r4, sp, #8
 8003d92:	e884 0006 	stmia.w	r4, {r1, r2}
 8003d96:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003d98:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003d9a:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003d9c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	9b08      	ldr	r3, [sp, #32]
 8003da6:	f015 fe53 	bl	8019a50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003daa:	b006      	add	sp, #24
 8003dac:	bd10      	pop	{r4, pc}
	...

08003db0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003db0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003db2:	bb18      	cbnz	r0, 8003dfc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003db6:	4813      	ldr	r0, [pc, #76]	; (8003e04 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4913      	ldr	r1, [pc, #76]	; (8003e08 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003dbc:	b1b3      	cbz	r3, 8003dec <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003dbe:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003dc0:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003dc2:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003dc4:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003dc6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	441a      	add	r2, r3
 8003dcc:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003dd4:	f000 f838 	bl	8003e48 <_ZN17TypedTextDatabase8getFontsEv>
 8003dd8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003dda:	f000 f833 	bl	8003e44 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003de0:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003de4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003de8:	8018      	strh	r0, [r3, #0]
    }
}
 8003dea:	e007      	b.n	8003dfc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003dee:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003df2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003df6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003df8:	2c00      	cmp	r4, #0
 8003dfa:	d1e8      	bne.n	8003dce <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20001f50 	.word	0x20001f50
 8003e04:	20001f54 	.word	0x20001f54
 8003e08:	20001f58 	.word	0x20001f58
 8003e0c:	20001f5c 	.word	0x20001f5c
 8003e10:	20015324 	.word	0x20015324
 8003e14:	2001532c 	.word	0x2001532c
 8003e18:	20015328 	.word	0x20015328
 8003e1c:	900e2f88 	.word	0x900e2f88
 8003e20:	900e2f7c 	.word	0x900e2f7c
 8003e24:	900e2fb0 	.word	0x900e2fb0

08003e28 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20001f58 	.word	0x20001f58
 8003e40:	20001f54 	.word	0x20001f54

08003e44 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003e44:	2003      	movs	r0, #3
 8003e46:	4770      	bx	lr

08003e48 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003e48:	4800      	ldr	r0, [pc, #0]	; (8003e4c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003e4a:	4770      	bx	lr
 8003e4c:	20001f60 	.word	0x20001f60

08003e50 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003e50:	b510      	push	{r4, lr}
};
 8003e52:	4c05      	ldr	r4, [pc, #20]	; (8003e68 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003e54:	f7ff fec4 	bl	8003be0 <_Z23getFont_verdana_20_4bppv>
};
 8003e58:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003e5a:	f7ff fefb 	bl	8003c54 <_Z23getFont_verdana_40_4bppv>
};
 8003e5e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003e60:	f7ff fe84 	bl	8003b6c <_Z23getFont_verdana_10_4bppv>
};
 8003e64:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003e66:	bd10      	pop	{r4, pc}
 8003e68:	20001f60 	.word	0x20001f60

08003e6c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003e6c:	4770      	bx	lr

08003e6e <_ZN19FrontendApplicationD0Ev>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	4604      	mov	r4, r0
 8003e72:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003e76:	f025 f835 	bl	8028ee4 <_ZdlPvj>
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	bd10      	pop	{r4, pc}

08003e7e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	4604      	mov	r4, r0
    {
        model.tick();
 8003e82:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8003e86:	f000 f85e 	bl	8003f46 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003e8a:	4620      	mov	r0, r4
    }
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003e90:	f016 b956 	b.w	801a140 <_ZN8touchgfx11Application15handleTickEventEv>

08003e94 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003e98:	f7ff fbc0 	bl	800361c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003e9e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003ea0:	6023      	str	r3, [r4, #0]
}
 8003ea2:	bd10      	pop	{r4, pc}
 8003ea4:	0802c658 	.word	0x0802c658

08003ea8 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8003ea8:	4770      	bx	lr

08003eaa <_ZThn4_N13MainPresenterD1Ev>:
 8003eaa:	3804      	subs	r0, #4
 8003eac:	4770      	bx	lr

08003eae <_ZN13MainPresenter10deactivateEv>:
}

void MainPresenter::activate()
{

}
 8003eae:	4770      	bx	lr

08003eb0 <_ZN13MainPresenterD0Ev>:
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	2110      	movs	r1, #16
 8003eb6:	f025 f815 	bl	8028ee4 <_ZdlPvj>
 8003eba:	4620      	mov	r0, r4
 8003ebc:	bd10      	pop	{r4, pc}

08003ebe <_ZThn4_N13MainPresenterD0Ev>:
 8003ebe:	f1a0 0004 	sub.w	r0, r0, #4
 8003ec2:	e7f5      	b.n	8003eb0 <_ZN13MainPresenterD0Ev>

08003ec4 <_ZN13MainPresenterC1ER8MainView>:
    ModelListener() : model(0) {}
 8003ec4:	2200      	movs	r2, #0
    : view(v)
 8003ec6:	60c1      	str	r1, [r0, #12]
 8003ec8:	6082      	str	r2, [r0, #8]
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <_ZN13MainPresenterC1ER8MainView+0x18>)
MainPresenter::MainPresenter(MainView& v)
 8003ecc:	b510      	push	{r4, lr}
    : view(v)
 8003ece:	f102 0408 	add.w	r4, r2, #8
 8003ed2:	3220      	adds	r2, #32
 8003ed4:	6004      	str	r4, [r0, #0]
 8003ed6:	6042      	str	r2, [r0, #4]
}
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	bf00      	nop
 8003edc:	0802c69c 	.word	0x0802c69c

08003ee0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8003ee0:	4770      	bx	lr

08003ee2 <_ZN8MainView14tearDownScreenEv>:
}

void MainView::tearDownScreen()
{
    MainViewBase::tearDownScreen();
}
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN8MainView11setupScreenEv>:
    MainViewBase::setupScreen();
 8003ee4:	f7ff bc37 	b.w	8003756 <_ZN12MainViewBase11setupScreenEv>

08003ee8 <_ZN8MainViewD0Ev>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4604      	mov	r4, r0
 8003eec:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8003ef0:	f024 fff8 	bl	8028ee4 <_ZdlPvj>
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <_ZN8MainView15handleTickEventEv>:

void MainView::handleTickEvent()
{
    bool isGreenVisible;
    tickCounter++;
 8003ef8:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003efc:	223c      	movs	r2, #60	; 0x3c
 8003efe:	3301      	adds	r3, #1
 8003f00:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f04:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8003f08:	fb02 3311 	mls	r3, r2, r1, r3

    if((tickCounter % 60) == 0)
 8003f0c:	b94b      	cbnz	r3, 8003f22 <_ZN8MainView15handleTickEventEv+0x2a>
    {
        isGreenVisible = mainStateGreen.isVisible();
        mainStateGreen.setVisible(!isGreenVisible);
 8003f0e:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
        mainStateGreen.invalidate();
 8003f12:	f500 7008 	add.w	r0, r0, #544	; 0x220
        mainStateGreen.setVisible(!isGreenVisible);
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
        mainStateGreen.invalidate();
 8003f1e:	f017 b9f9 	b.w	801b314 <_ZNK8touchgfx8Drawable10invalidateEv>
    }

}
 8003f22:	4770      	bx	lr

08003f24 <_ZN8MainViewC1Ev>:
MainView::MainView()
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
 8003f28:	f7ff fca4 	bl	8003874 <_ZN12MainViewBaseC1Ev>
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <_ZN8MainViewC1Ev+0x18>)
}
 8003f2e:	4620      	mov	r0, r4
MainView::MainView()
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
}
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	bf00      	nop
 8003f3c:	0802c6cc 	.word	0x0802c6cc

08003f40 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003f40:	2200      	movs	r2, #0
 8003f42:	6002      	str	r2, [r0, #0]
{

}
 8003f44:	4770      	bx	lr

08003f46 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003f46:	4770      	bx	lr

08003f48 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f48:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f4e:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003f50:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f54:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f56:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f58:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003f5a:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8003f5c:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f5e:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f60:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8003f62:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8003f64:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f66:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8003f68:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003f6a:	480b      	ldr	r0, [pc, #44]	; (8003f98 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8003f6c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f70:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003f74:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8003f78:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003f7a:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8003f7c:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003f7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f82:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003f84:	466a      	mov	r2, sp
 8003f86:	f001 fd79 	bl	8005a7c <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8003f8a:	3800      	subs	r0, #0
 8003f8c:	bf18      	it	ne
 8003f8e:	2001      	movne	r0, #1
 8003f90:	b015      	add	sp, #84	; 0x54
 8003f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f96:	bf00      	nop
 8003f98:	20001f6c 	.word	0x20001f6c

08003f9c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003f9c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003fa2:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4817      	ldr	r0, [pc, #92]	; (8004008 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003faa:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003fac:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fae:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003fb0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003fb2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003fb4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003fb8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003fba:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003fbc:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003fbe:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fc2:	f001 fd18 	bl	80059f6 <HAL_QSPI_Command>
 8003fc6:	b9e0      	cbnz	r0, 8004002 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003fc8:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003fca:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003fcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003fd0:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fd2:	480d      	ldr	r0, [pc, #52]	; (8004008 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8003fd4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003fd8:	2310      	movs	r3, #16
 8003fda:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003fde:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fe0:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003fe2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fea:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003fec:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fee:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ff2:	f001 fd43 	bl	8005a7c <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003ff6:	3800      	subs	r0, #0
 8003ff8:	bf18      	it	ne
 8003ffa:	2001      	movne	r0, #1
}
 8003ffc:	b015      	add	sp, #84	; 0x54
 8003ffe:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	e7fa      	b.n	8003ffc <QSPI_WriteEnable.constprop.0+0x60>
 8004006:	bf00      	nop
 8004008:	20001f6c 	.word	0x20001f6c

0800400c <BSP_QSPI_EnableMemoryMappedMode>:
{
 800400c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800400e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004012:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004014:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004018:	480e      	ldr	r0, [pc, #56]	; (8004054 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800401a:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800401c:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800401e:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004020:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800402c:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800402e:	2300      	movs	r3, #0
 8004030:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004034:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004036:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004038:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800403a:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800403c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004040:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004044:	f001 fd6a 	bl	8005b1c <HAL_QSPI_MemoryMapped>
}
 8004048:	3800      	subs	r0, #0
 800404a:	bf18      	it	ne
 800404c:	2001      	movne	r0, #1
 800404e:	b011      	add	sp, #68	; 0x44
 8004050:	f85d fb04 	ldr.w	pc, [sp], #4
 8004054:	20001f6c 	.word	0x20001f6c

08004058 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8004058:	4b45      	ldr	r3, [pc, #276]	; (8004170 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800405a:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800405c:	4845      	ldr	r0, [pc, #276]	; (8004174 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 800405e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004060:	f042 0202 	orr.w	r2, r2, #2
{
 8004064:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
{
 8004068:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800406c:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800406e:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004070:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8004072:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004076:	4d40      	ldr	r5, [pc, #256]	; (8004178 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8004078:	9200      	str	r2, [sp, #0]
 800407a:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	f042 0202 	orr.w	r2, r2, #2
 8004082:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	f022 0202 	bic.w	r2, r2, #2
 800408a:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 800408c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408e:	f042 0202 	orr.w	r2, r2, #2
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	f002 0202 	and.w	r2, r2, #2
 800409a:	9201      	str	r2, [sp, #4]
 800409c:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800409e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a0:	f042 0202 	orr.w	r2, r2, #2
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
 80040a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a8:	f002 0202 	and.w	r2, r2, #2
 80040ac:	9202      	str	r2, [sp, #8]
 80040ae:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 80040b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	f002 0208 	and.w	r2, r2, #8
 80040be:	9203      	str	r2, [sp, #12]
 80040c0:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	f042 0208 	orr.w	r2, r2, #8
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
 80040ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040cc:	f002 0208 	and.w	r2, r2, #8
 80040d0:	9204      	str	r2, [sp, #16]
 80040d2:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80040d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d6:	f042 0210 	orr.w	r2, r2, #16
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	f002 0210 	and.w	r2, r2, #16
 80040e2:	9205      	str	r2, [sp, #20]
 80040e4:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80040ee:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	9306      	str	r3, [sp, #24]
 80040f8:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004100:	2303      	movs	r3, #3
 8004102:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004106:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004108:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800410a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800410c:	f000 fc42 	bl	8004994 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004110:	a907      	add	r1, sp, #28
 8004112:	4818      	ldr	r0, [pc, #96]	; (8004174 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004114:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004116:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004118:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800411a:	f000 fc3b 	bl	8004994 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800411e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004122:	a907      	add	r1, sp, #28
 8004124:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004126:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004128:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800412a:	f000 fc33 	bl	8004994 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800412e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004132:	a907      	add	r1, sp, #28
 8004134:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004136:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004138:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800413a:	f000 fc2b 	bl	8004994 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800413e:	a907      	add	r1, sp, #28
 8004140:	480e      	ldr	r0, [pc, #56]	; (800417c <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8004142:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004144:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004146:	f000 fc25 	bl	8004994 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800414a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800414e:	a907      	add	r1, sp, #28
 8004150:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004152:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004154:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004156:	f000 fc1d 	bl	8004994 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800415a:	4632      	mov	r2, r6
 800415c:	210f      	movs	r1, #15
 800415e:	205c      	movs	r0, #92	; 0x5c
 8004160:	f000 f9d8 	bl	8004514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8004164:	205c      	movs	r0, #92	; 0x5c
 8004166:	f000 fa07 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 800416a:	b00d      	add	sp, #52	; 0x34
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	40020400 	.word	0x40020400
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40021000 	.word	0x40021000

08004180 <BSP_QSPI_Init>:
{ 
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8004182:	4c49      	ldr	r4, [pc, #292]	; (80042a8 <BSP_QSPI_Init+0x128>)
{ 
 8004184:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004188:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 800418a:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800418c:	f001 fc20 	bl	80059d0 <HAL_QSPI_DeInit>
 8004190:	4605      	mov	r5, r0
 8004192:	b110      	cbz	r0, 800419a <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8004194:	2001      	movs	r0, #1
}
 8004196:	b011      	add	sp, #68	; 0x44
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 800419a:	4601      	mov	r1, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff ff5b 	bl	8004058 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 80041a2:	2601      	movs	r6, #1
 80041a4:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 80041aa:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80041ae:	2310      	movs	r3, #16
 80041b0:	60e3      	str	r3, [r4, #12]
 80041b2:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80041b6:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80041ba:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80041bc:	3b01      	subs	r3, #1
 80041be:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 80041c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80041c4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80041c8:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80041cc:	f001 fbac 	bl	8005928 <HAL_QSPI_Init>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d1df      	bne.n	8004194 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80041d4:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80041d8:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 80041da:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 80041e0:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041e2:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80041e4:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80041e6:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80041e8:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80041ea:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80041ee:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041f2:	4620      	mov	r0, r4
 80041f4:	f001 fbff 	bl	80059f6 <HAL_QSPI_Command>
 80041f8:	b108      	cbz	r0, 80041fe <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 80041fa:	2004      	movs	r0, #4
 80041fc:	e7cb      	b.n	8004196 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80041fe:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	a902      	add	r1, sp, #8
 8004206:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004208:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800420a:	f001 fbf4 	bl	80059f6 <HAL_QSPI_Command>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f3      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004212:	f241 3088 	movw	r0, #5000	; 0x1388
 8004216:	f7ff fe97 	bl	8003f48 <QSPI_AutoPollingMemReady.constprop.0>
 800421a:	2800      	cmp	r0, #0
 800421c:	d1ed      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800421e:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8004220:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004228:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800422a:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800422c:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800422e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004232:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004236:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800423a:	4620      	mov	r0, r4
 800423c:	f001 fbdb 	bl	80059f6 <HAL_QSPI_Command>
 8004240:	2800      	cmp	r0, #0
 8004242:	d1da      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	f10d 0107 	add.w	r1, sp, #7
 800424c:	4620      	mov	r0, r4
 800424e:	f001 fd4b 	bl	8005ce8 <HAL_QSPI_Receive>
 8004252:	2800      	cmp	r0, #0
 8004254:	d1d1      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004256:	f7ff fea1 	bl	8003f9c <QSPI_WriteEnable.constprop.0>
 800425a:	2800      	cmp	r0, #0
 800425c:	d1cd      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800425e:	2381      	movs	r3, #129	; 0x81
 8004260:	22f0      	movs	r2, #240	; 0xf0
 8004262:	9302      	str	r3, [sp, #8]
 8004264:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004268:	210a      	movs	r1, #10
 800426a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800426e:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004272:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800427c:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800427e:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004284:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004288:	f001 fbb5 	bl	80059f6 <HAL_QSPI_Command>
 800428c:	2800      	cmp	r0, #0
 800428e:	d1b4      	bne.n	80041fa <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	f10d 0107 	add.w	r1, sp, #7
 8004298:	4620      	mov	r0, r4
 800429a:	f001 fcc9 	bl	8005c30 <HAL_QSPI_Transmit>
 800429e:	2800      	cmp	r0, #0
 80042a0:	f43f af79 	beq.w	8004196 <BSP_QSPI_Init+0x16>
 80042a4:	e7a9      	b.n	80041fa <BSP_QSPI_Init+0x7a>
 80042a6:	bf00      	nop
 80042a8:	20001f6c 	.word	0x20001f6c
 80042ac:	a0001000 	.word	0xa0001000

080042b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b0:	490f      	ldr	r1, [pc, #60]	; (80042f0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042b2:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80042b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <SystemInit+0x44>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80042ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80042d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80042d8:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <SystemInit+0x48>)
 80042da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80042e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ea:	608b      	str	r3, [r1, #8]
#endif
}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000ed00 	.word	0xe000ed00
 80042f4:	40023800 	.word	0x40023800
 80042f8:	24003010 	.word	0x24003010

080042fc <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80042fc:	4770      	bx	lr

080042fe <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80042fe:	2000      	movs	r0, #0
 8004300:	4770      	bx	lr
	...

08004304 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8004304:	2300      	movs	r3, #0
{
 8004306:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004308:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	b90a      	cbnz	r2, 8004316 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
{
 8004316:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004318:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800431a:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800431c:	21a8      	movs	r1, #168	; 0xa8
 800431e:	4628      	mov	r0, r5
 8004320:	f7fd fbfa 	bl	8001b18 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004324:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004328:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800432c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004330:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004332:	d103      	bne.n	800433c <ft5336_ReadID+0x38>
  return (ucReadId);
 8004334:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004338:	b003      	add	sp, #12
 800433a:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800433c:	2b51      	cmp	r3, #81	; 0x51
 800433e:	d1ec      	bne.n	800431a <ft5336_ReadID+0x16>
 8004340:	e7f8      	b.n	8004334 <ft5336_ReadID+0x30>
 8004342:	bf00      	nop
 8004344:	20001fba 	.word	0x20001fba

08004348 <ft5336_TS_DetectTouch>:
{
 8004348:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800434a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800434c:	2102      	movs	r1, #2
 800434e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004350:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004354:	f7fd fbe0 	bl	8001b18 <TS_IO_Read>
 8004358:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800435c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004368:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d901      	bls.n	8004374 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004370:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004374:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800437a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800437e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004380:	2200      	movs	r2, #0
 8004382:	709a      	strb	r2, [r3, #2]
}
 8004384:	b002      	add	sp, #8
 8004386:	bd10      	pop	{r4, pc}
 8004388:	20001fba 	.word	0x20001fba

0800438c <ft5336_TS_GetXY>:
{
 800438c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004390:	4d2f      	ldr	r5, [pc, #188]	; (8004450 <ft5336_TS_GetXY+0xc4>)
{
 8004392:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8004394:	2300      	movs	r3, #0
{
 8004396:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004398:	78ac      	ldrb	r4, [r5, #2]
 800439a:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 800439c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80043a0:	42a2      	cmp	r2, r4
 80043a2:	d94d      	bls.n	8004440 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 80043a4:	2c09      	cmp	r4, #9
 80043a6:	d84e      	bhi.n	8004446 <ft5336_TS_GetXY+0xba>
 80043a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	1d19      	adds	r1, r3, #4
 80043b2:	f103 0b03 	add.w	fp, r3, #3
 80043b6:	f103 0a06 	add.w	sl, r3, #6
 80043ba:	3305      	adds	r3, #5
 80043bc:	b2c9      	uxtb	r1, r1
 80043be:	fa5f fb8b 	uxtb.w	fp, fp
 80043c2:	fa5f fa8a 	uxtb.w	sl, sl
 80043c6:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80043ca:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80043cc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004454 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7fd fba1 	bl	8001b18 <TS_IO_Read>
 80043d6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80043da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80043de:	4659      	mov	r1, fp
 80043e0:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80043e2:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80043e6:	f7fd fb97 	bl	8001b18 <TS_IO_Read>
 80043ea:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80043ee:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80043f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80043f4:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80043f6:	f8b9 2000 	ldrh.w	r2, [r9]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004400:	4313      	orrs	r3, r2
    *X = coord;
 8004402:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004404:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004408:	f7fd fb86 	bl	8001b18 <TS_IO_Read>
 800440c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004410:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004412:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004416:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004418:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800441c:	f7fd fb7c 	bl	8001b18 <TS_IO_Read>
 8004420:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004424:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004428:	f8b9 2000 	ldrh.w	r2, [r9]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004432:	4313      	orrs	r3, r2
 8004434:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8004438:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800443a:	78ab      	ldrb	r3, [r5, #2]
 800443c:	3301      	adds	r3, #1
 800443e:	70ab      	strb	r3, [r5, #2]
}
 8004440:	b003      	add	sp, #12
 8004442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004446:	4698      	mov	r8, r3
 8004448:	469a      	mov	sl, r3
 800444a:	469b      	mov	fp, r3
 800444c:	4619      	mov	r1, r3
 800444e:	e7bc      	b.n	80043ca <ft5336_TS_GetXY+0x3e>
 8004450:	20001fba 	.word	0x20001fba
 8004454:	20001fb8 	.word	0x20001fb8

08004458 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004458:	2201      	movs	r2, #1
 800445a:	21a4      	movs	r1, #164	; 0xa4
 800445c:	b2c0      	uxtb	r0, r0
 800445e:	f7fd bb41 	b.w	8001ae4 <TS_IO_Write>

08004462 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004462:	2200      	movs	r2, #0
 8004464:	21a4      	movs	r1, #164	; 0xa4
 8004466:	b2c0      	uxtb	r0, r0
 8004468:	f7fd bb3c 	b.w	8001ae4 <TS_IO_Write>

0800446c <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 800446c:	f7ff bff9 	b.w	8004462 <ft5336_TS_DisableIT>

08004470 <ft5336_TS_ClearIT>:
 8004470:	4770      	bx	lr
	...

08004474 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8004474:	4b02      	ldr	r3, [pc, #8]	; (8004480 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	b90a      	cbnz	r2, 800447e <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
}
 800447e:	4770      	bx	lr
 8004480:	20001fba 	.word	0x20001fba

08004484 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004484:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004486:	2003      	movs	r0, #3
{
 8004488:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004492:	f000 f82d 	bl	80044f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fd f9cc 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800449c:	f7fc ff6e 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80044a0:	2000      	movs	r0, #0
 80044a2:	bd08      	pop	{r3, pc}
 80044a4:	40023c00 	.word	0x40023c00

080044a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <HAL_IncTick+0x10>)
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_IncTick+0x14>)
 80044ac:	6811      	ldr	r1, [r2, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	440b      	add	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20001fc0 	.word	0x20001fc0
 80044bc:	20000038 	.word	0x20000038

080044c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044c0:	4b01      	ldr	r3, [pc, #4]	; (80044c8 <HAL_GetTick+0x8>)
 80044c2:	6818      	ldr	r0, [r3, #0]
}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20001fc0 	.word	0x20001fc0

080044cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7ff fff6 	bl	80044c0 <HAL_GetTick>
 80044d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80044d8:	bf1e      	ittt	ne
 80044da:	4b04      	ldrne	r3, [pc, #16]	; (80044ec <HAL_Delay+0x20>)
 80044dc:	781b      	ldrbne	r3, [r3, #0]
 80044de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044e0:	f7ff ffee 	bl	80044c0 <HAL_GetTick>
 80044e4:	1b43      	subs	r3, r0, r5
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	d3fa      	bcc.n	80044e0 <HAL_Delay+0x14>
  {
  }
}
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000038 	.word	0x20000038

080044f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044fe:	0412      	lsls	r2, r2, #16
 8004500:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800450c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b16      	ldr	r3, [pc, #88]	; (8004570 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004516:	b530      	push	{r4, r5, lr}
 8004518:	68dc      	ldr	r4, [r3, #12]
 800451a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004522:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004524:	2d04      	cmp	r5, #4
 8004526:	bf28      	it	cs
 8004528:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004530:	bf8c      	ite	hi
 8004532:	3c03      	subhi	r4, #3
 8004534:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004536:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800453a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004540:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004544:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	fa01 f104 	lsl.w	r1, r1, r4
 800454c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004550:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004554:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004556:	db06      	blt.n	8004566 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800455c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004560:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004564:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004566:	f000 000f 	and.w	r0, r0, #15
 800456a:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_NVIC_SetPriority+0x60>)
 800456c:	5413      	strb	r3, [r2, r0]
 800456e:	e7f9      	b.n	8004564 <HAL_NVIC_SetPriority+0x50>
 8004570:	e000ed00 	.word	0xe000ed00
 8004574:	e000ed14 	.word	0xe000ed14

08004578 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004578:	2800      	cmp	r0, #0
 800457a:	db08      	blt.n	800458e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457c:	0942      	lsrs	r2, r0, #5
 800457e:	2301      	movs	r3, #1
 8004580:	f000 001f 	and.w	r0, r0, #31
 8004584:	fa03 f000 	lsl.w	r0, r3, r0
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <HAL_NVIC_EnableIRQ+0x18>)
 800458a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100

08004594 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004594:	2800      	cmp	r0, #0
 8004596:	db0d      	blt.n	80045b4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004598:	0943      	lsrs	r3, r0, #5
 800459a:	2201      	movs	r2, #1
 800459c:	f000 001f 	and.w	r0, r0, #31
 80045a0:	3320      	adds	r3, #32
 80045a2:	fa02 f000 	lsl.w	r0, r2, r0
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <HAL_NVIC_DisableIRQ+0x24>)
 80045a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80045ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045b0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000e100 	.word	0xe000e100

080045bc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80045bc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <HAL_MPU_Disable+0x18>)
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_MPU_Enable+0x1c>)
 80045da:	f040 0001 	orr.w	r0, r0, #1
 80045de:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80045e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80045ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045ee:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80045f8:	7843      	ldrb	r3, [r0, #1]
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_MPU_ConfigRegion+0x54>)
{
 80045fc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80045fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8004602:	7801      	ldrb	r1, [r0, #0]
 8004604:	b1e9      	cbz	r1, 8004642 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004606:	6843      	ldr	r3, [r0, #4]
 8004608:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800460c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800460e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004610:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004612:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004616:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004618:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800461a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800461e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004620:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004624:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004626:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800462a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800462c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004630:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004632:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004636:	7a01      	ldrb	r1, [r0, #8]
 8004638:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800463c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004640:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004642:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004646:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800464a:	e7f9      	b.n	8004640 <HAL_MPU_ConfigRegion+0x48>
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004650:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004652:	4604      	mov	r4, r0
 8004654:	b908      	cbnz	r0, 800465a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004656:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004658:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800465a:	7f43      	ldrb	r3, [r0, #29]
 800465c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004660:	b913      	cbnz	r3, 8004668 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004662:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004664:	f7fc fea8 	bl	80013b8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800466c:	7923      	ldrb	r3, [r4, #4]
 800466e:	b9e3      	cbnz	r3, 80046aa <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_CRC_Init+0x70>)
 8004674:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	f022 0218 	bic.w	r2, r2, #24
 800467c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800467e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004680:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004682:	b9d2      	cbnz	r2, 80046ba <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004688:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800468a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	6961      	ldr	r1, [r4, #20]
 8004690:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004694:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004696:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004698:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a0:	430a      	orrs	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80046a4:	2301      	movs	r3, #1
 80046a6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80046a8:	e7d6      	b.n	8004658 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046aa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 f808 	bl	80046c4 <HAL_CRCEx_Polynomial_Set>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d0e2      	beq.n	800467e <HAL_CRC_Init+0x2e>
 80046b8:	e7cd      	b.n	8004656 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046ba:	6922      	ldr	r2, [r4, #16]
 80046bc:	e7e4      	b.n	8004688 <HAL_CRC_Init+0x38>
 80046be:	bf00      	nop
 80046c0:	04c11db7 	.word	0x04c11db7

080046c4 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80046c4:	231f      	movs	r3, #31
{
 80046c6:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80046c8:	3b01      	subs	r3, #1
 80046ca:	d31c      	bcc.n	8004706 <HAL_CRCEx_Polynomial_Set+0x42>
 80046cc:	fa21 f403 	lsr.w	r4, r1, r3
 80046d0:	07e4      	lsls	r4, r4, #31
 80046d2:	d5f9      	bpl.n	80046c8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80046d4:	2a10      	cmp	r2, #16
 80046d6:	d012      	beq.n	80046fe <HAL_CRCEx_Polynomial_Set+0x3a>
 80046d8:	d804      	bhi.n	80046e4 <HAL_CRCEx_Polynomial_Set+0x20>
 80046da:	b13a      	cbz	r2, 80046ec <HAL_CRCEx_Polynomial_Set+0x28>
 80046dc:	2a08      	cmp	r2, #8
 80046de:	d010      	beq.n	8004702 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80046e0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80046e2:	e00b      	b.n	80046fc <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80046e4:	2a18      	cmp	r2, #24
 80046e6:	d1fb      	bne.n	80046e0 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80046e8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80046ea:	d8f9      	bhi.n	80046e0 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80046f0:	6883      	ldr	r3, [r0, #8]
 80046f2:	f023 0318 	bic.w	r3, r3, #24
 80046f6:	431a      	orrs	r2, r3
 80046f8:	6082      	str	r2, [r0, #8]
 80046fa:	2000      	movs	r0, #0
}
 80046fc:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80046fe:	2b07      	cmp	r3, #7
 8004700:	e7f3      	b.n	80046ea <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004702:	2b0f      	cmp	r3, #15
 8004704:	e7f1      	b.n	80046ea <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8004706:	2a00      	cmp	r2, #0
 8004708:	d1ea      	bne.n	80046e0 <HAL_CRCEx_Polynomial_Set+0x1c>
 800470a:	e7ef      	b.n	80046ec <HAL_CRCEx_Polynomial_Set+0x28>

0800470c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004710:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004712:	f7ff fed5 	bl	80044c0 <HAL_GetTick>
 8004716:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004718:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800471c:	2b02      	cmp	r3, #2
 800471e:	d006      	beq.n	800472e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004720:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004722:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004724:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004726:	2300      	movs	r3, #0
 8004728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 800472c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f022 0216 	bic.w	r2, r2, #22
 8004736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004740:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004742:	b90a      	cbnz	r2, 8004748 <HAL_DMA_Abort+0x3c>
 8004744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004746:	b11a      	cbz	r2, 8004750 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	f022 0208 	bic.w	r2, r2, #8
 800474e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f013 0301 	ands.w	r3, r3, #1
 8004760:	d10a      	bne.n	8004778 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004762:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004764:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004766:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	408a      	lsls	r2, r1
 800476a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800476c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800476e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004772:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004776:	e7d9      	b.n	800472c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004778:	f7ff fea2 	bl	80044c0 <HAL_GetTick>
 800477c:	1b40      	subs	r0, r0, r5
 800477e:	2805      	cmp	r0, #5
 8004780:	d9ea      	bls.n	8004758 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004782:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004784:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004786:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004788:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800478a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800478e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004792:	e7cb      	b.n	800472c <HAL_DMA_Abort+0x20>

08004794 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004794:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004796:	4604      	mov	r4, r0
 8004798:	b330      	cbz	r0, 80047e8 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800479a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800479e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047a2:	b91b      	cbnz	r3, 80047ac <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047a8:	f7fc fe1c 	bl	80013e4 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047ac:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047ae:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047b0:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047b2:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047be:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047c0:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047cc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047ce:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80047d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047da:	430b      	orrs	r3, r1
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047de:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80047e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047e8:	2001      	movs	r0, #1
 80047ea:	e7fc      	b.n	80047e6 <HAL_DMA2D_Init+0x52>

080047ec <HAL_DMA2D_LineEventCallback>:
 80047ec:	4770      	bx	lr

080047ee <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80047ee:	4770      	bx	lr

080047f0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80047f0:	6803      	ldr	r3, [r0, #0]
{
 80047f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80047f4:	685e      	ldr	r6, [r3, #4]
{
 80047f6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80047f8:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047fa:	07f2      	lsls	r2, r6, #31
 80047fc:	d514      	bpl.n	8004828 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80047fe:	05e9      	lsls	r1, r5, #23
 8004800:	d512      	bpl.n	8004828 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004808:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800480a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004812:	2201      	movs	r2, #1
 8004814:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004816:	2304      	movs	r3, #4
 8004818:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800481c:	2300      	movs	r3, #0
 800481e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004822:	6943      	ldr	r3, [r0, #20]
 8004824:	b103      	cbz	r3, 8004828 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004826:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004828:	06b2      	lsls	r2, r6, #26
 800482a:	d516      	bpl.n	800485a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800482c:	04ab      	lsls	r3, r5, #18
 800482e:	d514      	bpl.n	800485a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800483a:	2220      	movs	r2, #32
 800483c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800483e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004846:	2304      	movs	r3, #4
 8004848:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800484c:	2300      	movs	r3, #0
 800484e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004852:	6963      	ldr	r3, [r4, #20]
 8004854:	b10b      	cbz	r3, 800485a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004856:	4620      	mov	r0, r4
 8004858:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800485a:	0730      	lsls	r0, r6, #28
 800485c:	d516      	bpl.n	800488c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800485e:	0529      	lsls	r1, r5, #20
 8004860:	d514      	bpl.n	800488c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800486c:	2208      	movs	r2, #8
 800486e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004878:	2304      	movs	r3, #4
 800487a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800487e:	2300      	movs	r3, #0
 8004880:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004884:	6963      	ldr	r3, [r4, #20]
 8004886:	b10b      	cbz	r3, 800488c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004888:	4620      	mov	r0, r4
 800488a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800488c:	0772      	lsls	r2, r6, #29
 800488e:	d50b      	bpl.n	80048a8 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004890:	056b      	lsls	r3, r5, #21
 8004892:	d509      	bpl.n	80048a8 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004894:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004896:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80048a0:	2204      	movs	r2, #4
 80048a2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80048a4:	f7ff ffa2 	bl	80047ec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80048a8:	07b0      	lsls	r0, r6, #30
 80048aa:	d514      	bpl.n	80048d6 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80048ac:	05a9      	lsls	r1, r5, #22
 80048ae:	d512      	bpl.n	80048d6 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80048ba:	2202      	movs	r2, #2
 80048bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048c0:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048c8:	2300      	movs	r3, #0
 80048ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	b10b      	cbz	r3, 80048d6 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80048d2:	4620      	mov	r0, r4
 80048d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80048d6:	06f2      	lsls	r2, r6, #27
 80048d8:	d513      	bpl.n	8004902 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80048da:	04eb      	lsls	r3, r5, #19
 80048dc:	d511      	bpl.n	8004902 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80048de:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80048e0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80048ea:	2210      	movs	r2, #16
 80048ec:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048f0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80048f8:	2300      	movs	r3, #0
 80048fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80048fe:	f7ff ff76 	bl	80047ee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004902:	bd70      	pop	{r4, r5, r6, pc}

08004904 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004906:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800490a:	2b01      	cmp	r3, #1
 800490c:	f04f 0302 	mov.w	r3, #2
 8004910:	d02b      	beq.n	800496a <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004912:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004916:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004918:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800491c:	4f1c      	ldr	r7, [pc, #112]	; (8004990 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800491e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004922:	010e      	lsls	r6, r1, #4
 8004924:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004926:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800492a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800492e:	3c09      	subs	r4, #9
 8004930:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004932:	bf96      	itet	ls
 8004934:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004938:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800493c:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800493e:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004940:	b9a9      	cbnz	r1, 800496e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004942:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004944:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004946:	ea01 0107 	and.w	r1, r1, r7
 800494a:	ea42 0201 	orr.w	r2, r2, r1
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004950:	6982      	ldr	r2, [r0, #24]
 8004952:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004954:	d803      	bhi.n	800495e <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004956:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004958:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800495e:	2301      	movs	r3, #1
 8004960:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004964:	2300      	movs	r3, #0
 8004966:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800496a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800496e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004970:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004972:	ea01 0107 	and.w	r1, r1, r7
 8004976:	ea42 0201 	orr.w	r2, r2, r1
 800497a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800497c:	eb00 0206 	add.w	r2, r0, r6
 8004980:	6992      	ldr	r2, [r2, #24]
 8004982:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004984:	d8eb      	bhi.n	800495e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004986:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800498a:	621d      	str	r5, [r3, #32]
 800498c:	e7e7      	b.n	800495e <HAL_DMA2D_ConfigLayer+0x5a>
 800498e:	bf00      	nop
 8004990:	00fcfff0 	.word	0x00fcfff0

08004994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004998:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004b58 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800499e:	4a6c      	ldr	r2, [pc, #432]	; (8004b50 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80049a0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049a2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80049a4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049a6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80049aa:	43ac      	bics	r4, r5
 80049ac:	f040 80b6 	bne.w	8004b1c <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049b0:	684d      	ldr	r5, [r1, #4]
 80049b2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049b6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049b8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049bc:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049c2:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c4:	2f01      	cmp	r7, #1
 80049c6:	d834      	bhi.n	8004a32 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80049c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049ca:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80049ce:	68cf      	ldr	r7, [r1, #12]
 80049d0:	fa07 f708 	lsl.w	r7, r7, r8
 80049d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80049d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80049da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049dc:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80049e4:	409f      	lsls	r7, r3
 80049e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80049ea:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80049ec:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ee:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049f0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049f4:	688f      	ldr	r7, [r1, #8]
 80049f6:	fa07 f708 	lsl.w	r7, r7, r8
 80049fa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80049fe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a00:	d119      	bne.n	8004a36 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004a02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a06:	f003 0b07 	and.w	fp, r3, #7
 8004a0a:	f04f 0e0f 	mov.w	lr, #15
 8004a0e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004a12:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004a16:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a1a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004a1e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a22:	690f      	ldr	r7, [r1, #16]
 8004a24:	fa07 f70b 	lsl.w	r7, r7, fp
 8004a28:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004a2c:	f8ca 7020 	str.w	r7, [sl, #32]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a32:	2c03      	cmp	r4, #3
 8004a34:	d1da      	bne.n	80049ec <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004a36:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a38:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a3c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a40:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a44:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004a48:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a4a:	d067      	beq.n	8004b1c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004a50:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a54:	f003 0703 	and.w	r7, r3, #3
 8004a58:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004a60:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a64:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004a6a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004a6e:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004a72:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004a76:	9401      	str	r4, [sp, #4]
 8004a78:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a7a:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004a7e:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a82:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a86:	4c33      	ldr	r4, [pc, #204]	; (8004b54 <HAL_GPIO_Init+0x1c0>)
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d04e      	beq.n	8004b2a <HAL_GPIO_Init+0x196>
 8004a8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a90:	42a0      	cmp	r0, r4
 8004a92:	d04c      	beq.n	8004b2e <HAL_GPIO_Init+0x19a>
 8004a94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a98:	42a0      	cmp	r0, r4
 8004a9a:	d04a      	beq.n	8004b32 <HAL_GPIO_Init+0x19e>
 8004a9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d048      	beq.n	8004b36 <HAL_GPIO_Init+0x1a2>
 8004aa4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d046      	beq.n	8004b3a <HAL_GPIO_Init+0x1a6>
 8004aac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d044      	beq.n	8004b3e <HAL_GPIO_Init+0x1aa>
 8004ab4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d042      	beq.n	8004b42 <HAL_GPIO_Init+0x1ae>
 8004abc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d040      	beq.n	8004b46 <HAL_GPIO_Init+0x1b2>
 8004ac4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d03e      	beq.n	8004b4a <HAL_GPIO_Init+0x1b6>
 8004acc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2409      	moveq	r4, #9
 8004ad6:	240a      	movne	r4, #10
 8004ad8:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ada:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004adc:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ae0:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004ae2:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004ae6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004ae8:	bf54      	ite	pl
 8004aea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004aec:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004af0:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004af2:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004af4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004af6:	bf54      	ite	pl
 8004af8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004afa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004afe:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004b00:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004b02:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004b04:	bf54      	ite	pl
 8004b06:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b08:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b0c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004b0e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004b10:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004b12:	bf54      	ite	pl
 8004b14:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b16:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004b1a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	f47f af3e 	bne.w	80049a0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004b24:	b003      	add	sp, #12
 8004b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b2a:	2400      	movs	r4, #0
 8004b2c:	e7d4      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b2e:	2401      	movs	r4, #1
 8004b30:	e7d2      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b32:	2402      	movs	r4, #2
 8004b34:	e7d0      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b36:	2403      	movs	r4, #3
 8004b38:	e7ce      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b3a:	2404      	movs	r4, #4
 8004b3c:	e7cc      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b3e:	2405      	movs	r4, #5
 8004b40:	e7ca      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b42:	2406      	movs	r4, #6
 8004b44:	e7c8      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b46:	2407      	movs	r4, #7
 8004b48:	e7c6      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b4a:	2408      	movs	r4, #8
 8004b4c:	e7c4      	b.n	8004ad8 <HAL_GPIO_Init+0x144>
 8004b4e:	bf00      	nop
 8004b50:	40013c00 	.word	0x40013c00
 8004b54:	40020000 	.word	0x40020000
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b60:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b62:	4c4a      	ldr	r4, [pc, #296]	; (8004c8c <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004b64:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004c94 <HAL_GPIO_DeInit+0x138>
 8004b68:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004c98 <HAL_GPIO_DeInit+0x13c>
 8004b6c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004c9c <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8004b70:	2301      	movs	r3, #1
 8004b72:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004b76:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004b7a:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004b7e:	d16e      	bne.n	8004c5e <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004b80:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b84:	f002 0c03 	and.w	ip, r2, #3
 8004b88:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_GPIO_DeInit+0x134>)
 8004b8c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004b94:	4298      	cmp	r0, r3
 8004b96:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b9a:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004b9e:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ba2:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004ba6:	d05f      	beq.n	8004c68 <HAL_GPIO_DeInit+0x10c>
 8004ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bac:	4298      	cmp	r0, r3
 8004bae:	d05d      	beq.n	8004c6c <HAL_GPIO_DeInit+0x110>
 8004bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	d05b      	beq.n	8004c70 <HAL_GPIO_DeInit+0x114>
 8004bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbc:	4298      	cmp	r0, r3
 8004bbe:	d059      	beq.n	8004c74 <HAL_GPIO_DeInit+0x118>
 8004bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc4:	4298      	cmp	r0, r3
 8004bc6:	d057      	beq.n	8004c78 <HAL_GPIO_DeInit+0x11c>
 8004bc8:	4548      	cmp	r0, r9
 8004bca:	d057      	beq.n	8004c7c <HAL_GPIO_DeInit+0x120>
 8004bcc:	4550      	cmp	r0, sl
 8004bce:	d057      	beq.n	8004c80 <HAL_GPIO_DeInit+0x124>
 8004bd0:	4558      	cmp	r0, fp
 8004bd2:	d057      	beq.n	8004c84 <HAL_GPIO_DeInit+0x128>
 8004bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd8:	4298      	cmp	r0, r3
 8004bda:	d055      	beq.n	8004c88 <HAL_GPIO_DeInit+0x12c>
 8004bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be0:	4298      	cmp	r0, r3
 8004be2:	bf0c      	ite	eq
 8004be4:	2309      	moveq	r3, #9
 8004be6:	230a      	movne	r3, #10
 8004be8:	fa03 f30c 	lsl.w	r3, r3, ip
 8004bec:	4543      	cmp	r3, r8
 8004bee:	d113      	bne.n	8004c18 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	ea23 0307 	bic.w	r3, r3, r7
 8004bf6:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	ea23 0307 	bic.w	r3, r3, r7
 8004bfe:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c00:	68e3      	ldr	r3, [r4, #12]
 8004c02:	ea23 0307 	bic.w	r3, r3, r7
 8004c06:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	ea23 0307 	bic.w	r3, r3, r7
 8004c0e:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004c10:	68ab      	ldr	r3, [r5, #8]
 8004c12:	ea23 0306 	bic.w	r3, r3, r6
 8004c16:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c18:	2603      	movs	r6, #3
 8004c1a:	0053      	lsls	r3, r2, #1
 8004c1c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c1e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c22:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c26:	270f      	movs	r7, #15
 8004c28:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c2c:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c30:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c34:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c36:	fa22 f506 	lsr.w	r5, r2, r6
 8004c3a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004c3e:	6a2e      	ldr	r6, [r5, #32]
 8004c40:	ea26 0707 	bic.w	r7, r6, r7
 8004c44:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c46:	68c5      	ldr	r5, [r0, #12]
 8004c48:	ea25 0503 	bic.w	r5, r5, r3
 8004c4c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c4e:	6845      	ldr	r5, [r0, #4]
 8004c50:	ea25 050e 	bic.w	r5, r5, lr
 8004c54:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c56:	6885      	ldr	r5, [r0, #8]
 8004c58:	ea25 0303 	bic.w	r3, r5, r3
 8004c5c:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c5e:	3201      	adds	r2, #1
 8004c60:	2a10      	cmp	r2, #16
 8004c62:	d185      	bne.n	8004b70 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e7bd      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e7bb      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e7b9      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c74:	2303      	movs	r3, #3
 8004c76:	e7b7      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	e7b5      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c7c:	2305      	movs	r3, #5
 8004c7e:	e7b3      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c80:	2306      	movs	r3, #6
 8004c82:	e7b1      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c84:	2307      	movs	r3, #7
 8004c86:	e7af      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	e7ad      	b.n	8004be8 <HAL_GPIO_DeInit+0x8c>
 8004c8c:	40013c00 	.word	0x40013c00
 8004c90:	40020000 	.word	0x40020000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00

08004ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ca0:	b10a      	cbz	r2, 8004ca6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ca2:	6181      	str	r1, [r0, #24]
  }
}
 8004ca4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ca6:	0409      	lsls	r1, r1, #16
 8004ca8:	e7fb      	b.n	8004ca2 <HAL_GPIO_WritePin+0x2>

08004caa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004caa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cac:	ea01 0203 	and.w	r2, r1, r3
 8004cb0:	ea21 0103 	bic.w	r1, r1, r3
 8004cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004cb8:	6181      	str	r1, [r0, #24]
}
 8004cba:	4770      	bx	lr

08004cbc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cbc:	6803      	ldr	r3, [r0, #0]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	0791      	lsls	r1, r2, #30
 8004cc2:	d501      	bpl.n	8004cc8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	07d2      	lsls	r2, r2, #31
 8004ccc:	d403      	bmi.n	8004cd6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	619a      	str	r2, [r3, #24]
  }
}
 8004cd6:	4770      	bx	lr

08004cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cd8:	b530      	push	{r4, r5, lr}
 8004cda:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cdc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ce2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cea:	4a05      	ldr	r2, [pc, #20]	; (8004d00 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cec:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cee:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cf6:	ea20 0002 	bic.w	r0, r0, r2
 8004cfa:	4303      	orrs	r3, r0
 8004cfc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cfe:	bd30      	pop	{r4, r5, pc}
 8004d00:	03ff63ff 	.word	0x03ff63ff

08004d04 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d04:	6803      	ldr	r3, [r0, #0]
{
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d0a:	699c      	ldr	r4, [r3, #24]
{
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	460f      	mov	r7, r1
 8004d10:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d12:	f014 0410 	ands.w	r4, r4, #16
 8004d16:	d070      	beq.n	8004dfa <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 8004d18:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	0692      	lsls	r2, r2, #26
 8004d26:	d462      	bmi.n	8004dee <I2C_IsErrorOccurred+0xea>
 8004d28:	f1b8 0f00 	cmp.w	r8, #0
 8004d2c:	d036      	beq.n	8004d9c <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 8004d2e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d38:	05d6      	lsls	r6, r2, #23
 8004d3a:	d505      	bpl.n	8004d48 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004d40:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004d44:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d46:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d48:	0551      	lsls	r1, r2, #21
 8004d4a:	d505      	bpl.n	8004d58 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004d50:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004d54:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d56:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d58:	0592      	lsls	r2, r2, #22
 8004d5a:	d550      	bpl.n	8004dfe <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d60:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d64:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7ff ffa8 	bl	8004cbc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004d6c:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004d6e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004d70:	6853      	ldr	r3, [r2, #4]
 8004d72:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004d76:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004d7a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004d84:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004d86:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8004d8a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004d96:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004d9a:	e032      	b.n	8004e02 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8004d9c:	1c7a      	adds	r2, r7, #1
 8004d9e:	d0c0      	beq.n	8004d22 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004da0:	f7ff fb8e 	bl	80044c0 <HAL_GetTick>
 8004da4:	1b80      	subs	r0, r0, r6
 8004da6:	42b8      	cmp	r0, r7
 8004da8:	d801      	bhi.n	8004dae <I2C_IsErrorOccurred+0xaa>
 8004daa:	2f00      	cmp	r7, #0
 8004dac:	d1b8      	bne.n	8004d20 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dae:	682b      	ldr	r3, [r5, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004db2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004db6:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004db8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dba:	0400      	lsls	r0, r0, #16
 8004dbc:	d50a      	bpl.n	8004dd4 <I2C_IsErrorOccurred+0xd0>
 8004dbe:	0448      	lsls	r0, r1, #17
 8004dc0:	d408      	bmi.n	8004dd4 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8004dc2:	2a20      	cmp	r2, #32
 8004dc4:	d006      	beq.n	8004dd4 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dcc:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004dce:	f7ff fb77 	bl	80044c0 <HAL_GetTick>
 8004dd2:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	0699      	lsls	r1, r3, #26
 8004dda:	d4a1      	bmi.n	8004d20 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ddc:	f7ff fb70 	bl	80044c0 <HAL_GetTick>
 8004de0:	1b80      	subs	r0, r0, r6
 8004de2:	2819      	cmp	r0, #25
 8004de4:	d9f6      	bls.n	8004dd4 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004de6:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8004de8:	f04f 0801 	mov.w	r8, #1
 8004dec:	e798      	b.n	8004d20 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004dee:	f1b8 0f00 	cmp.w	r8, #0
 8004df2:	d19c      	bne.n	8004d2e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df4:	2220      	movs	r2, #32
 8004df6:	61da      	str	r2, [r3, #28]
 8004df8:	e799      	b.n	8004d2e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	e79a      	b.n	8004d34 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d1b1      	bne.n	8004d66 <I2C_IsErrorOccurred+0x62>
}
 8004e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e06 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004e06:	b570      	push	{r4, r5, r6, lr}
 8004e08:	4604      	mov	r4, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	d501      	bpl.n	8004e1a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004e16:	2000      	movs	r0, #0
}
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff ff70 	bl	8004d04 <I2C_IsErrorOccurred>
 8004e24:	b9a0      	cbnz	r0, 8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004e26:	1c6a      	adds	r2, r5, #1
 8004e28:	d0f1      	beq.n	8004e0e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7ff fb49 	bl	80044c0 <HAL_GetTick>
 8004e2e:	1b80      	subs	r0, r0, r6
 8004e30:	42a8      	cmp	r0, r5
 8004e32:	d801      	bhi.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004e34:	2d00      	cmp	r5, #0
 8004e36:	d1ea      	bne.n	8004e0e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e3a:	f043 0320 	orr.w	r3, r3, #32
 8004e3e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	2320      	movs	r3, #32
 8004e42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004e4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004e50:	2001      	movs	r0, #1
 8004e52:	e7e1      	b.n	8004e18 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004e54 <I2C_WaitOnFlagUntilTimeout>:
{
 8004e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e58:	9f06      	ldr	r7, [sp, #24]
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4688      	mov	r8, r1
 8004e5e:	4616      	mov	r6, r2
 8004e60:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	6993      	ldr	r3, [r2, #24]
 8004e66:	ea38 0303 	bics.w	r3, r8, r3
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	42b3      	cmp	r3, r6
 8004e72:	d001      	beq.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004e74:	2000      	movs	r0, #0
 8004e76:	e015      	b.n	8004ea4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	1c6b      	adds	r3, r5, #1
 8004e7a:	d0f3      	beq.n	8004e64 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7ff fb20 	bl	80044c0 <HAL_GetTick>
 8004e80:	1bc0      	subs	r0, r0, r7
 8004e82:	42a8      	cmp	r0, r5
 8004e84:	d801      	bhi.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x36>
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	d1eb      	bne.n	8004e62 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004e8c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8e:	f043 0320 	orr.w	r3, r3, #32
 8004e92:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	2320      	movs	r3, #32
 8004e96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004ea0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	069b      	lsls	r3, r3, #26
 8004eb6:	d501      	bpl.n	8004ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004eb8:	2000      	movs	r0, #0
}
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff ff1f 	bl	8004d04 <I2C_IsErrorOccurred>
 8004ec6:	b990      	cbnz	r0, 8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7ff fafa 	bl	80044c0 <HAL_GetTick>
 8004ecc:	1b80      	subs	r0, r0, r6
 8004ece:	42a8      	cmp	r0, r5
 8004ed0:	d801      	bhi.n	8004ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	d1ec      	bne.n	8004eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ed8:	f043 0320 	orr.w	r3, r3, #32
 8004edc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004eea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7e3      	b.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004ef2 <HAL_I2C_Init>:
{
 8004ef2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d04a      	beq.n	8004f90 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004efa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004efe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f02:	b91b      	cbnz	r3, 8004f0c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004f04:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004f08:	f7fc fa8c 	bl	8001424 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0c:	2324      	movs	r3, #36	; 0x24
 8004f0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f1c:	6862      	ldr	r2, [r4, #4]
 8004f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f22:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f2a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f2c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f30:	2901      	cmp	r1, #1
 8004f32:	d124      	bne.n	8004f7e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f38:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f3a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f3e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f46:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f4e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f50:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004f54:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f56:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f5c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f5e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f70:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004f7c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f82:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f84:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f86:	d1d8      	bne.n	8004f3a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	e7d4      	b.n	8004f3a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004f90:	2001      	movs	r0, #1
 8004f92:	e7f3      	b.n	8004f7c <HAL_I2C_Init+0x8a>

08004f94 <HAL_I2C_DeInit>:
{
 8004f94:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004f96:	4604      	mov	r4, r0
 8004f98:	b198      	cbz	r0, 8004fc2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004f9a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9c:	2324      	movs	r3, #36	; 0x24
 8004f9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004faa:	f7fc fa7f 	bl	80014ac <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fae:	2000      	movs	r0, #0
 8004fb0:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004fb2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004fb6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004fc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7fc      	b.n	8004fc0 <HAL_I2C_DeInit+0x2c>
	...

08004fc8 <HAL_I2C_Mem_Write>:
{
 8004fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd6:	2b20      	cmp	r3, #32
{
 8004fd8:	4616      	mov	r6, r2
 8004fda:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004fde:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe2:	f040 80c6 	bne.w	8005172 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8004fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fe8:	b113      	cbz	r3, 8004ff0 <HAL_I2C_Mem_Write+0x28>
 8004fea:	f1ba 0f00 	cmp.w	sl, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
}
 8004ff8:	b003      	add	sp, #12
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004ffe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005002:	2b01      	cmp	r3, #1
 8005004:	f000 80b5 	beq.w	8005172 <HAL_I2C_Mem_Write+0x1aa>
 8005008:	f04f 0b01 	mov.w	fp, #1
 800500c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005010:	f7ff fa56 	bl	80044c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005014:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005016:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005018:	9000      	str	r0, [sp, #0]
 800501a:	465a      	mov	r2, fp
 800501c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005020:	4620      	mov	r0, r4
 8005022:	f7ff ff17 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 8005026:	2800      	cmp	r0, #0
 8005028:	d1e5      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800502a:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800502c:	fa5f f289 	uxtb.w	r2, r9
 8005030:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8005032:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800503e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005042:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005044:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005046:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8005048:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005052:	f7ff fe41 	bl	8004cd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005056:	462a      	mov	r2, r5
 8005058:	4641      	mov	r1, r8
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff fed3 	bl	8004e06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005060:	bb18      	cbnz	r0, 80050aa <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005062:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005066:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005068:	d115      	bne.n	8005096 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800506a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800506c:	2200      	movs	r2, #0
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005072:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	4643      	mov	r3, r8
 8005076:	9500      	str	r5, [sp, #0]
 8005078:	f7ff feec 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 800507c:	b9a8      	cbnz	r0, 80050aa <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800507e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	2bff      	cmp	r3, #255	; 0xff
 8005084:	d815      	bhi.n	80050b2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005086:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800508c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800508e:	b292      	uxth	r2, r2
 8005090:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	e012      	b.n	80050bc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005096:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005098:	4641      	mov	r1, r8
 800509a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509e:	462a      	mov	r2, r5
 80050a0:	f7ff feb1 	bl	8004e06 <I2C_WaitOnTXISFlagUntilTimeout>
 80050a4:	b908      	cbnz	r0, 80050aa <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	e7df      	b.n	800506a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80050aa:	2300      	movs	r3, #0
 80050ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050b0:	e7a1      	b.n	8004ff6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050bc:	4639      	mov	r1, r7
 80050be:	4620      	mov	r0, r4
 80050c0:	f7ff fe0a 	bl	8004cd8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c4:	462a      	mov	r2, r5
 80050c6:	4641      	mov	r1, r8
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff fe9c 	bl	8004e06 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d191      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80050da:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80050dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80050de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80050e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80050e2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80050e4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80050e6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80050e8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80050ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80050ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	b1b3      	cbz	r3, 8005122 <HAL_I2C_Mem_Write+0x15a>
 80050f4:	b9aa      	cbnz	r2, 8005122 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050f6:	4643      	mov	r3, r8
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	4620      	mov	r0, r4
 80050fc:	9500      	str	r5, [sp, #0]
 80050fe:	f7ff fea9 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 8005102:	2800      	cmp	r0, #0
 8005104:	f47f af77 	bne.w	8004ff6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005108:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	d928      	bls.n	8005162 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005110:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005116:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005118:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800511a:	4639      	mov	r1, r7
 800511c:	4620      	mov	r0, r4
 800511e:	f7ff fddb 	bl	8004cd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1cc      	bne.n	80050c4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512a:	462a      	mov	r2, r5
 800512c:	4641      	mov	r1, r8
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff feba 	bl	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005134:	2800      	cmp	r0, #0
 8005136:	f47f af5e 	bne.w	8004ff6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	2120      	movs	r1, #32
 800513e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005146:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800514a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005158:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800515c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005160:	e74a      	b.n	8004ff8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005162:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005168:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800516a:	b292      	uxth	r2, r2
 800516c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	e7d3      	b.n	800511a <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8005172:	2002      	movs	r0, #2
 8005174:	e740      	b.n	8004ff8 <HAL_I2C_Mem_Write+0x30>
 8005176:	bf00      	nop
 8005178:	80002000 	.word	0x80002000

0800517c <HAL_I2C_Mem_Read>:
{
 800517c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005182:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005186:	4604      	mov	r4, r0
 8005188:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800518a:	2b20      	cmp	r3, #32
{
 800518c:	4616      	mov	r6, r2
 800518e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005192:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005196:	f040 80c9 	bne.w	800532c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800519a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800519c:	b113      	cbz	r3, 80051a4 <HAL_I2C_Mem_Read+0x28>
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80051aa:	2001      	movs	r0, #1
}
 80051ac:	b003      	add	sp, #12
 80051ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80051b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	f000 80b8 	beq.w	800532c <HAL_I2C_Mem_Read+0x1b0>
 80051bc:	f04f 0b01 	mov.w	fp, #1
 80051c0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80051c4:	f7ff f97c 	bl	80044c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051c8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80051ca:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051cc:	9000      	str	r0, [sp, #0]
 80051ce:	465a      	mov	r2, fp
 80051d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fe3d 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d1e5      	bne.n	80051aa <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051de:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051e0:	fa5f f289 	uxtb.w	r2, r9
 80051e4:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80051e6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ec:	2340      	movs	r3, #64	; 0x40
 80051ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80051f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80051f6:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051f8:	4b4d      	ldr	r3, [pc, #308]	; (8005330 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80051fa:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4603      	mov	r3, r0
 8005202:	4620      	mov	r0, r4
 8005204:	f7ff fd68 	bl	8004cd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005208:	462a      	mov	r2, r5
 800520a:	4641      	mov	r1, r8
 800520c:	4620      	mov	r0, r4
 800520e:	f7ff fdfa 	bl	8004e06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005212:	bb20      	cbnz	r0, 800525e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005214:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005218:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800521a:	d116      	bne.n	800524a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800521c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800521e:	2200      	movs	r2, #0
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005224:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005226:	4643      	mov	r3, r8
 8005228:	9500      	str	r5, [sp, #0]
 800522a:	f7ff fe13 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 800522e:	b9b0      	cbnz	r0, 800525e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2bff      	cmp	r3, #255	; 0xff
 8005236:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <HAL_I2C_Mem_Read+0x1b8>)
 8005238:	d815      	bhi.n	8005266 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800523a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005242:	b292      	uxth	r2, r2
 8005244:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	e012      	b.n	8005270 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800524a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524c:	4641      	mov	r1, r8
 800524e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005250:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005252:	462a      	mov	r2, r5
 8005254:	f7ff fdd7 	bl	8004e06 <I2C_WaitOnTXISFlagUntilTimeout>
 8005258:	b908      	cbnz	r0, 800525e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	e7de      	b.n	800521c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800525e:	2300      	movs	r3, #0
 8005260:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005264:	e7a1      	b.n	80051aa <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005266:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800526e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005270:	4639      	mov	r1, r7
 8005272:	4620      	mov	r0, r4
 8005274:	f7ff fd30 	bl	8004cd8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005278:	4643      	mov	r3, r8
 800527a:	2200      	movs	r2, #0
 800527c:	2104      	movs	r1, #4
 800527e:	4620      	mov	r0, r4
 8005280:	9500      	str	r5, [sp, #0]
 8005282:	f7ff fde7 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 8005286:	2800      	cmp	r0, #0
 8005288:	d18f      	bne.n	80051aa <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800528e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005290:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005292:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005294:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005296:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005298:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800529a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800529c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800529e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80052a0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80052a2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	b1b3      	cbz	r3, 80052dc <HAL_I2C_Mem_Read+0x160>
 80052ae:	b9aa      	cbnz	r2, 80052dc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052b0:	4643      	mov	r3, r8
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	4620      	mov	r0, r4
 80052b6:	9500      	str	r5, [sp, #0]
 80052b8:	f7ff fdcc 	bl	8004e54 <I2C_WaitOnFlagUntilTimeout>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f47f af74 	bne.w	80051aa <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2bff      	cmp	r3, #255	; 0xff
 80052c8:	d928      	bls.n	800531c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052ca:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052d4:	4639      	mov	r1, r7
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff fcfe 	bl	8004cd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80052dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1c9      	bne.n	8005278 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e4:	462a      	mov	r2, r5
 80052e6:	4641      	mov	r1, r8
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7ff fddd 	bl	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f47f af5b 	bne.w	80051aa <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	2120      	movs	r1, #32
 80052f8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005300:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005304:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800530e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005312:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005316:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800531a:	e747      	b.n	80051ac <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800531c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800531e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005322:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005324:	b292      	uxth	r2, r2
 8005326:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	e7d3      	b.n	80052d4 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800532c:	2002      	movs	r0, #2
 800532e:	e73d      	b.n	80051ac <HAL_I2C_Mem_Read+0x30>
 8005330:	80002000 	.word	0x80002000
 8005334:	80002400 	.word	0x80002400

08005338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005338:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800533e:	2b20      	cmp	r3, #32
 8005340:	b2dc      	uxtb	r4, r3
 8005342:	d11d      	bne.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005344:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005348:	2b01      	cmp	r3, #1
 800534a:	d019      	beq.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800534c:	2324      	movs	r3, #36	; 0x24
 800534e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005352:	6803      	ldr	r3, [r0, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4311      	orrs	r1, r2
 8005368:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005374:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005378:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800537c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800537e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005380:	2002      	movs	r0, #2
 8005382:	e7fc      	b.n	800537e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005384 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005384:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005386:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800538a:	2b20      	cmp	r3, #32
 800538c:	b2dc      	uxtb	r4, r3
 800538e:	d11c      	bne.n	80053ca <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005390:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005394:	2b01      	cmp	r3, #1
 8005396:	d018      	beq.n	80053ca <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005398:	2324      	movs	r3, #36	; 0x24
 800539a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053a8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053aa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ae:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053bc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80053be:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80053c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80053c6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80053c8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80053ca:	2002      	movs	r0, #2
 80053cc:	e7fc      	b.n	80053c8 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080053ce <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053ce:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053d0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053d2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053d6:	3284      	adds	r2, #132	; 0x84
 80053d8:	1883      	adds	r3, r0, r2
{
 80053da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053de:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053e0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053e4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80053e6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053ea:	684c      	ldr	r4, [r1, #4]
 80053ec:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053f0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053f4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053f8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053fa:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053fc:	68c5      	ldr	r5, [r0, #12]
 80053fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005402:	443d      	add	r5, r7
 8005404:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005408:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800540a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800540c:	68c5      	ldr	r5, [r0, #12]
 800540e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8005412:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005414:	689d      	ldr	r5, [r3, #8]
 8005416:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800541a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800541c:	688d      	ldr	r5, [r1, #8]
 800541e:	68c7      	ldr	r7, [r0, #12]
 8005420:	3501      	adds	r5, #1
 8005422:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005426:	443d      	add	r5, r7
 8005428:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800542c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800542e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005430:	691d      	ldr	r5, [r3, #16]
 8005432:	f025 0507 	bic.w	r5, r5, #7
 8005436:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005438:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800543a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800543c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005440:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005444:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005448:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800544c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005450:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005454:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005458:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800545a:	695d      	ldr	r5, [r3, #20]
 800545c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005460:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005462:	694d      	ldr	r5, [r1, #20]
 8005464:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005466:	69dd      	ldr	r5, [r3, #28]
 8005468:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800546c:	f025 0507 	bic.w	r5, r5, #7
 8005470:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005472:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005476:	433d      	orrs	r5, r7
 8005478:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800547a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800547c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800547e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005482:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005484:	b31e      	cbz	r6, 80054ce <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005486:	2e01      	cmp	r6, #1
 8005488:	d023      	beq.n	80054d2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800548a:	1eb5      	subs	r5, r6, #2
 800548c:	2d02      	cmp	r5, #2
 800548e:	d922      	bls.n	80054d6 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005490:	2e07      	cmp	r6, #7
 8005492:	bf0c      	ite	eq
 8005494:	2502      	moveq	r5, #2
 8005496:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005498:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800549a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800549e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054a2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054a4:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054a6:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054a8:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054ac:	436e      	muls	r6, r5
 80054ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80054b2:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054b4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80054b6:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80054ba:	f024 0407 	bic.w	r4, r4, #7
 80054be:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054c0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054c2:	5883      	ldr	r3, [r0, r2]
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	5083      	str	r3, [r0, r2]
}
 80054ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80054ce:	2504      	movs	r5, #4
 80054d0:	e7e2      	b.n	8005498 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80054d2:	2503      	movs	r5, #3
 80054d4:	e7e0      	b.n	8005498 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80054d6:	2502      	movs	r5, #2
 80054d8:	e7de      	b.n	8005498 <LTDC_SetConfig+0xca>
	...

080054dc <HAL_LTDC_Init>:
{
 80054dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80054de:	4604      	mov	r4, r0
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d063      	beq.n	80055ac <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80054e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80054e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054ec:	b91b      	cbnz	r3, 80054f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80054ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80054f2:	f7fb fff7 	bl	80014e4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005504:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005506:	6999      	ldr	r1, [r3, #24]
 8005508:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800550c:	4302      	orrs	r2, r0
 800550e:	68e0      	ldr	r0, [r4, #12]
 8005510:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005512:	6920      	ldr	r0, [r4, #16]
 8005514:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005516:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005518:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800551a:	4925      	ldr	r1, [pc, #148]	; (80055b0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800551c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	400a      	ands	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800552a:	69a0      	ldr	r0, [r4, #24]
 800552c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800552e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005530:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	400a      	ands	r2, r1
 8005536:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800553e:	6a20      	ldr	r0, [r4, #32]
 8005540:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005542:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005544:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	400a      	ands	r2, r1
 800554a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005552:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005554:	4302      	orrs	r2, r0
 8005556:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	4011      	ands	r1, r2
 800555c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800555e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005568:	430a      	orrs	r2, r1
 800556a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800556c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800556e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005572:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005576:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800557a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800557c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800557e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005582:	430a      	orrs	r2, r1
 8005584:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005588:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800558c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005592:	f042 0206 	orr.w	r2, r2, #6
 8005596:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80055a0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055a2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80055a6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80055ac:	2001      	movs	r0, #1
 80055ae:	e7fc      	b.n	80055aa <HAL_LTDC_Init+0xce>
 80055b0:	f000f800 	.word	0xf000f800

080055b4 <HAL_LTDC_ErrorCallback>:
 80055b4:	4770      	bx	lr

080055b6 <HAL_LTDC_ReloadEventCallback>:
 80055b6:	4770      	bx	lr

080055b8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055b8:	6803      	ldr	r3, [r0, #0]
{
 80055ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055bc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80055be:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80055c0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055c2:	0772      	lsls	r2, r6, #29
 80055c4:	d514      	bpl.n	80055f0 <HAL_LTDC_IRQHandler+0x38>
 80055c6:	0769      	lsls	r1, r5, #29
 80055c8:	d512      	bpl.n	80055f0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80055ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055cc:	f022 0204 	bic.w	r2, r2, #4
 80055d0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80055d2:	2204      	movs	r2, #4
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80055d6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80055e2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055e4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80055e8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80055ec:	f7ff ffe2 	bl	80055b4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80055f0:	07b2      	lsls	r2, r6, #30
 80055f2:	d516      	bpl.n	8005622 <HAL_LTDC_IRQHandler+0x6a>
 80055f4:	07ab      	lsls	r3, r5, #30
 80055f6:	d514      	bpl.n	8005622 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055f8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80055fa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fe:	f022 0202 	bic.w	r2, r2, #2
 8005602:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005604:	2202      	movs	r2, #2
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005608:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005612:	2304      	movs	r3, #4
 8005614:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005618:	2300      	movs	r3, #0
 800561a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800561e:	f7ff ffc9 	bl	80055b4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005622:	07f0      	lsls	r0, r6, #31
 8005624:	d510      	bpl.n	8005648 <HAL_LTDC_IRQHandler+0x90>
 8005626:	07e9      	lsls	r1, r5, #31
 8005628:	d50e      	bpl.n	8005648 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800562a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800562c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800562e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005630:	f022 0201 	bic.w	r2, r2, #1
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005636:	2201      	movs	r2, #1
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800563a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800563c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005640:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005644:	f7fd fd30 	bl	80030a8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005648:	0732      	lsls	r2, r6, #28
 800564a:	d511      	bpl.n	8005670 <HAL_LTDC_IRQHandler+0xb8>
 800564c:	072b      	lsls	r3, r5, #28
 800564e:	d50f      	bpl.n	8005670 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005650:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005652:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005656:	f022 0208 	bic.w	r2, r2, #8
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800565c:	2208      	movs	r2, #8
 800565e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005660:	2301      	movs	r3, #1
 8005662:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005666:	2300      	movs	r3, #0
 8005668:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800566c:	f7ff ffa3 	bl	80055b6 <HAL_LTDC_ReloadEventCallback>
}
 8005670:	bd70      	pop	{r4, r5, r6, pc}

08005672 <HAL_LTDC_ConfigLayer>:
{
 8005672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005676:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800567a:	4606      	mov	r6, r0
 800567c:	460f      	mov	r7, r1
 800567e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005680:	2b01      	cmp	r3, #1
 8005682:	f04f 0002 	mov.w	r0, #2
 8005686:	d01f      	beq.n	80056c8 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005688:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800568a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800568e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005690:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005694:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005698:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800569c:	3438      	adds	r4, #56	; 0x38
 800569e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056aa:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056ac:	4630      	mov	r0, r6
 80056ae:	4662      	mov	r2, ip
 80056b0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056b2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056b4:	f7ff fe8b 	bl	80053ce <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056b8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80056ba:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056bc:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056c0:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80056c4:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80056c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056cc <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80056cc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f04f 0302 	mov.w	r3, #2
 80056d6:	d012      	beq.n	80056fe <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056d8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80056e6:	4a07      	ldr	r2, [pc, #28]	; (8005704 <HAL_LTDC_ProgramLineEvent+0x38>)
 80056e8:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80056ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80056f8:	2300      	movs	r3, #0
 80056fa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80056fe:	4618      	mov	r0, r3
}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40016800 	.word	0x40016800

08005708 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800570a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800570e:	4c19      	ldr	r4, [pc, #100]	; (8005774 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005728:	f7fe feca 	bl	80044c0 <HAL_GetTick>
 800572c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	03da      	lsls	r2, r3, #15
 8005732:	d50c      	bpl.n	800574e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005734:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005736:	4d0f      	ldr	r5, [pc, #60]	; (8005774 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800573e:	f7fe febf 	bl	80044c0 <HAL_GetTick>
 8005742:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005744:	686b      	ldr	r3, [r5, #4]
 8005746:	039b      	lsls	r3, r3, #14
 8005748:	d50a      	bpl.n	8005760 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800574a:	2000      	movs	r0, #0
 800574c:	e006      	b.n	800575c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800574e:	f7fe feb7 	bl	80044c0 <HAL_GetTick>
 8005752:	1b40      	subs	r0, r0, r5
 8005754:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005758:	d9e9      	bls.n	800572e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800575a:	2003      	movs	r0, #3
}
 800575c:	b003      	add	sp, #12
 800575e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005760:	f7fe feae 	bl	80044c0 <HAL_GetTick>
 8005764:	1b00      	subs	r0, r0, r4
 8005766:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800576a:	d9eb      	bls.n	8005744 <HAL_PWREx_EnableOverDrive+0x3c>
 800576c:	e7f5      	b.n	800575a <HAL_PWREx_EnableOverDrive+0x52>
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800
 8005774:	40007000 	.word	0x40007000

08005778 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800577c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800577e:	b136      	cbz	r6, 800578e <QSPI_Config+0x16>
 8005780:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005784:	d003      	beq.n	800578e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005786:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005788:	6804      	ldr	r4, [r0, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800578e:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005792:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005796:	f1b9 0f00 	cmp.w	r9, #0
 800579a:	d04f      	beq.n	800583c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800579c:	694b      	ldr	r3, [r1, #20]
 800579e:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80057a2:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057a4:	f8d1 a000 	ldr.w	sl, [r1]
 80057a8:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 80057ac:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80057b0:	ea49 0902 	orr.w	r9, r9, r2
 80057b4:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80057b8:	b335      	cbz	r5, 8005808 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80057ba:	688b      	ldr	r3, [r1, #8]
 80057bc:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057c0:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80057c2:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80057c4:	b19f      	cbz	r7, 80057ee <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057c6:	ea4a 0307 	orr.w	r3, sl, r7
 80057ca:	4323      	orrs	r3, r4
 80057cc:	68cc      	ldr	r4, [r1, #12]
 80057ce:	ea43 0308 	orr.w	r3, r3, r8
 80057d2:	ea43 030e 	orr.w	r3, r3, lr
 80057d6:	4333      	orrs	r3, r6
 80057d8:	4323      	orrs	r3, r4
 80057da:	ea43 030c 	orr.w	r3, r3, ip
 80057de:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057e0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057e4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057e6:	d00d      	beq.n	8005804 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80057e8:	684b      	ldr	r3, [r1, #4]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	e00a      	b.n	8005804 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057ee:	ea4a 0304 	orr.w	r3, sl, r4
 80057f2:	ea43 0308 	orr.w	r3, r3, r8
 80057f6:	ea43 030e 	orr.w	r3, r3, lr
 80057fa:	4333      	orrs	r3, r6
 80057fc:	ea43 030c 	orr.w	r3, r3, ip
 8005800:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005802:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005808:	b16f      	cbz	r7, 8005826 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800580a:	ea4a 0307 	orr.w	r3, sl, r7
 800580e:	4323      	orrs	r3, r4
 8005810:	68cc      	ldr	r4, [r1, #12]
 8005812:	ea43 0308 	orr.w	r3, r3, r8
 8005816:	ea43 030e 	orr.w	r3, r3, lr
 800581a:	4323      	orrs	r3, r4
 800581c:	ea43 030c 	orr.w	r3, r3, ip
 8005820:	ea43 0309 	orr.w	r3, r3, r9
 8005824:	e7dc      	b.n	80057e0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005826:	ea4a 0304 	orr.w	r3, sl, r4
 800582a:	ea43 0308 	orr.w	r3, r3, r8
 800582e:	ea43 030e 	orr.w	r3, r3, lr
 8005832:	ea43 030c 	orr.w	r3, r3, ip
 8005836:	ea43 0309 	orr.w	r3, r3, r9
 800583a:	e7e2      	b.n	8005802 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800583c:	b365      	cbz	r5, 8005898 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800583e:	6804      	ldr	r4, [r0, #0]
 8005840:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005842:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005844:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005846:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800584a:	694e      	ldr	r6, [r1, #20]
 800584c:	ea43 0502 	orr.w	r5, r3, r2
 8005850:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005854:	04b6      	lsls	r6, r6, #18
 8005856:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800585a:	b1a7      	cbz	r7, 8005886 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800585c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800585e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005862:	ea40 0008 	orr.w	r0, r0, r8
 8005866:	ea43 0300 	orr.w	r3, r3, r0
 800586a:	68c8      	ldr	r0, [r1, #12]
 800586c:	ea43 030c 	orr.w	r3, r3, ip
 8005870:	ea43 0300 	orr.w	r3, r3, r0
 8005874:	ea43 0306 	orr.w	r3, r3, r6
 8005878:	ea43 0305 	orr.w	r3, r3, r5
 800587c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800587e:	d0c1      	beq.n	8005804 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005880:	684b      	ldr	r3, [r1, #4]
 8005882:	61a3      	str	r3, [r4, #24]
 8005884:	e7be      	b.n	8005804 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005886:	ea40 0008 	orr.w	r0, r0, r8
 800588a:	4303      	orrs	r3, r0
 800588c:	ea43 030c 	orr.w	r3, r3, ip
 8005890:	4333      	orrs	r3, r6
 8005892:	432b      	orrs	r3, r5
 8005894:	6163      	str	r3, [r4, #20]
 8005896:	e7b5      	b.n	8005804 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005898:	b17f      	cbz	r7, 80058ba <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800589a:	ea46 0307 	orr.w	r3, r6, r7
 800589e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	4323      	orrs	r3, r4
 80058a6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80058a8:	4323      	orrs	r3, r4
 80058aa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80058ac:	4323      	orrs	r3, r4
 80058ae:	68cc      	ldr	r4, [r1, #12]
 80058b0:	4323      	orrs	r3, r4
 80058b2:	694c      	ldr	r4, [r1, #20]
 80058b4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80058b8:	e792      	b.n	80057e0 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	d0a2      	beq.n	8005804 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80058be:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80058c0:	6800      	ldr	r0, [r0, #0]
 80058c2:	4333      	orrs	r3, r6
 80058c4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80058c6:	431a      	orrs	r2, r3
 80058c8:	694b      	ldr	r3, [r1, #20]
 80058ca:	4332      	orrs	r2, r6
 80058cc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80058ce:	4332      	orrs	r2, r6
 80058d0:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80058d4:	6142      	str	r2, [r0, #20]
}
 80058d6:	e795      	b.n	8005804 <QSPI_Config+0x8c>

080058d8 <QSPI_WaitFlagStateUntilTimeout>:
{
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80058e0:	4604      	mov	r4, r0
 80058e2:	460e      	mov	r6, r1
 80058e4:	4615      	mov	r5, r2
 80058e6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	6893      	ldr	r3, [r2, #8]
 80058ec:	4233      	tst	r3, r6
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	d101      	bne.n	80058fc <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80058f8:	2000      	movs	r0, #0
 80058fa:	e012      	b.n	8005922 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005900:	d0f3      	beq.n	80058ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fe fddd 	bl	80044c0 <HAL_GetTick>
 8005906:	1bc0      	subs	r0, r0, r7
 8005908:	4540      	cmp	r0, r8
 800590a:	d802      	bhi.n	8005912 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800590c:	f1b8 0f00 	cmp.w	r8, #0
 8005910:	d1ea      	bne.n	80058e8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005912:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005914:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005916:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800591a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005928 <HAL_QSPI_Init>:
{
 8005928:	b530      	push	{r4, r5, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800592e:	f7fe fdc7 	bl	80044c0 <HAL_GetTick>
 8005932:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005934:	2c00      	cmp	r4, #0
 8005936:	d047      	beq.n	80059c8 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005938:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800593c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005940:	b94a      	cbnz	r2, 8005956 <HAL_QSPI_Init+0x2e>
 8005942:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005944:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005946:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800594a:	f7fb fe79 	bl	8001640 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800594e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	68a1      	ldr	r1, [r4, #8]
 800595a:	6802      	ldr	r2, [r0, #0]
 800595c:	3901      	subs	r1, #1
 800595e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005962:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005966:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005968:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800596a:	4620      	mov	r0, r4
 800596c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800596e:	9200      	str	r2, [sp, #0]
 8005970:	2200      	movs	r2, #0
 8005972:	f7ff ffb1 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005976:	bb10      	cbnz	r0, 80059be <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	69e5      	ldr	r5, [r4, #28]
 800597c:	68e3      	ldr	r3, [r4, #12]
 800597e:	6811      	ldr	r1, [r2, #0]
 8005980:	432b      	orrs	r3, r5
 8005982:	6a25      	ldr	r5, [r4, #32]
 8005984:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005988:	432b      	orrs	r3, r5
 800598a:	6865      	ldr	r5, [r4, #4]
 800598c:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005990:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005994:	430b      	orrs	r3, r1
 8005996:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005998:	6855      	ldr	r5, [r2, #4]
 800599a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800599e:	430b      	orrs	r3, r1
 80059a0:	6921      	ldr	r1, [r4, #16]
 80059a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80059a6:	4909      	ldr	r1, [pc, #36]	; (80059cc <HAL_QSPI_Init+0xa4>)
 80059a8:	4029      	ands	r1, r5
 80059aa:	430b      	orrs	r3, r1
 80059ac:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80059b6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059b8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80059ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80059be:	2300      	movs	r3, #0
 80059c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80059c4:	b005      	add	sp, #20
 80059c6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80059c8:	2001      	movs	r0, #1
 80059ca:	e7fb      	b.n	80059c4 <HAL_QSPI_Init+0x9c>
 80059cc:	ffe0f8fe 	.word	0xffe0f8fe

080059d0 <HAL_QSPI_DeInit>:
{
 80059d0:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80059d2:	4604      	mov	r4, r0
 80059d4:	b168      	cbz	r0, 80059f2 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 80059d6:	6802      	ldr	r2, [r0, #0]
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80059e0:	f7fb fe9c 	bl	800171c <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059e4:	2000      	movs	r0, #0
 80059e6:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80059e8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80059ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80059f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059f2:	2001      	movs	r0, #1
 80059f4:	e7fc      	b.n	80059f0 <HAL_QSPI_DeInit+0x20>

080059f6 <HAL_QSPI_Command>:
{
 80059f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059fa:	4604      	mov	r4, r0
 80059fc:	b085      	sub	sp, #20
 80059fe:	4617      	mov	r7, r2
 8005a00:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005a02:	f7fe fd5d 	bl	80044c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005a06:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005a0a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	d033      	beq.n	8005a78 <HAL_QSPI_Command+0x82>
 8005a10:	2201      	movs	r2, #1
 8005a12:	2602      	movs	r6, #2
 8005a14:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005a18:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005a1c:	2a01      	cmp	r2, #1
 8005a1e:	fa5f f882 	uxtb.w	r8, r2
 8005a22:	d127      	bne.n	8005a74 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a24:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a26:	9003      	str	r0, [sp, #12]
 8005a28:	2120      	movs	r1, #32
 8005a2a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a2c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a2e:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005a30:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a34:	f7ff ff50 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005a38:	4605      	mov	r5, r0
 8005a3a:	b9a0      	cbnz	r0, 8005a66 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff fe99 	bl	8005778 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005a46:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	b94a      	cbnz	r2, 8005a62 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005a4e:	4642      	mov	r2, r8
 8005a50:	4631      	mov	r1, r6
 8005a52:	4620      	mov	r0, r4
 8005a54:	9700      	str	r7, [sp, #0]
 8005a56:	f7ff ff3f 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	b918      	cbnz	r0, 8005a66 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005a62:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005a66:	2300      	movs	r3, #0
 8005a68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	b005      	add	sp, #20
 8005a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005a74:	4635      	mov	r5, r6
 8005a76:	e7f6      	b.n	8005a66 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005a78:	2502      	movs	r5, #2
 8005a7a:	e7f7      	b.n	8005a6c <HAL_QSPI_Command+0x76>

08005a7c <HAL_QSPI_AutoPolling>:
{
 8005a7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	4615      	mov	r5, r2
 8005a84:	461e      	mov	r6, r3
 8005a86:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005a88:	f7fe fd1a 	bl	80044c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005a8c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005a90:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005a92:	2a01      	cmp	r2, #1
 8005a94:	d040      	beq.n	8005b18 <HAL_QSPI_AutoPolling+0x9c>
 8005a96:	2201      	movs	r2, #1
 8005a98:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005a9c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005aa0:	2a01      	cmp	r2, #1
 8005aa2:	b2d7      	uxtb	r7, r2
 8005aa4:	d136      	bne.n	8005b14 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005aa6:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005aa8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005aaa:	9003      	str	r0, [sp, #12]
 8005aac:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005aae:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ab0:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005ab2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ab6:	2120      	movs	r1, #32
 8005ab8:	f7ff ff0e 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005abc:	bb20      	cbnz	r0, 8005b08 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005abe:	6821      	ldr	r1, [r4, #0]
 8005ac0:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ac2:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005ac4:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005ac6:	686a      	ldr	r2, [r5, #4]
 8005ac8:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005aca:	68aa      	ldr	r2, [r5, #8]
 8005acc:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ace:	680a      	ldr	r2, [r1, #0]
 8005ad0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005ad4:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005ad6:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ad8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005adc:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005ade:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005ae0:	68ea      	ldr	r2, [r5, #12]
 8005ae2:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005aea:	f7ff fe45 	bl	8005778 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	463a      	mov	r2, r7
 8005af2:	2108      	movs	r1, #8
 8005af4:	4620      	mov	r0, r4
 8005af6:	9600      	str	r6, [sp, #0]
 8005af8:	f7ff feee 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005afc:	b920      	cbnz	r0, 8005b08 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005b04:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005b0e:	b004      	add	sp, #16
 8005b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005b14:	2002      	movs	r0, #2
 8005b16:	e7f7      	b.n	8005b08 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005b18:	2002      	movs	r0, #2
 8005b1a:	e7f8      	b.n	8005b0e <HAL_QSPI_AutoPolling+0x92>

08005b1c <HAL_QSPI_MemoryMapped>:
{
 8005b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4616      	mov	r6, r2
 8005b22:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005b24:	f7fe fccc 	bl	80044c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005b28:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005b2c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005b2e:	2a01      	cmp	r2, #1
 8005b30:	d033      	beq.n	8005b9a <HAL_QSPI_MemoryMapped+0x7e>
 8005b32:	2201      	movs	r2, #1
 8005b34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b38:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005b3c:	2a01      	cmp	r2, #1
 8005b3e:	d12a      	bne.n	8005b96 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b40:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005b42:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b44:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b46:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005b48:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b4e:	9100      	str	r1, [sp, #0]
 8005b50:	2120      	movs	r1, #32
 8005b52:	f7ff fec1 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005b56:	4605      	mov	r5, r0
 8005b58:	b9b8      	cbnz	r0, 8005b8a <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	6872      	ldr	r2, [r6, #4]
 8005b5e:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005b60:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005b62:	f020 0008 	bic.w	r0, r0, #8
 8005b66:	ea40 0002 	orr.w	r0, r0, r2
 8005b6a:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005b6c:	d107      	bne.n	8005b7e <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005b6e:	6832      	ldr	r2, [r6, #0]
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005b72:	2210      	movs	r2, #16
 8005b74:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b7c:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005b7e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005b82:	4639      	mov	r1, r7
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7ff fdf7 	bl	8005778 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005b90:	4628      	mov	r0, r5
 8005b92:	b003      	add	sp, #12
 8005b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8005b96:	2502      	movs	r5, #2
 8005b98:	e7f7      	b.n	8005b8a <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8005b9a:	2502      	movs	r5, #2
 8005b9c:	e7f8      	b.n	8005b90 <HAL_QSPI_MemoryMapped+0x74>

08005b9e <HAL_QSPI_Abort>:
{
 8005b9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ba0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005ba2:	f7fe fc8d 	bl	80044c0 <HAL_GetTick>
 8005ba6:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005ba8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005bac:	f010 0002 	ands.w	r0, r0, #2
 8005bb0:	d03a      	beq.n	8005c28 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8005bb2:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005bb4:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8005bb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005bba:	680a      	ldr	r2, [r1, #0]
 8005bbc:	f012 0204 	ands.w	r2, r2, #4
 8005bc0:	d034      	beq.n	8005c2c <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005bc2:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005bc4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005bc6:	f022 0204 	bic.w	r2, r2, #4
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005bce:	f7fe fd9d 	bl	800470c <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	b118      	cbz	r0, 8005bde <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005bd6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005bd8:	f042 0204 	orr.w	r2, r2, #4
 8005bdc:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	6891      	ldr	r1, [r2, #8]
 8005be2:	0689      	lsls	r1, r1, #26
 8005be4:	d51d      	bpl.n	8005c22 <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005be6:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005be8:	4620      	mov	r0, r4
 8005bea:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005bec:	f041 0102 	orr.w	r1, r1, #2
 8005bf0:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005bf6:	9200      	str	r2, [sp, #0]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f7ff fe6d 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	b990      	cbnz	r0, 8005c28 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	2102      	movs	r1, #2
 8005c06:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c08:	2120      	movs	r1, #32
 8005c0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c0c:	9200      	str	r2, [sp, #0]
 8005c0e:	4602      	mov	r2, r0
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff fe61 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005c16:	b938      	cbnz	r0, 8005c28 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	6953      	ldr	r3, [r2, #20]
 8005c1c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005c20:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	e7d6      	b.n	8005bde <HAL_QSPI_Abort+0x40>

08005c30 <HAL_QSPI_Transmit>:
{
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	b085      	sub	sp, #20
 8005c36:	4616      	mov	r6, r2
 8005c38:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005c3a:	f7fe fc41 	bl	80044c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005c3e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005c42:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005c44:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005c46:	2a01      	cmp	r2, #1
 8005c48:	d04c      	beq.n	8005ce4 <HAL_QSPI_Transmit+0xb4>
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005c50:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005c54:	2a01      	cmp	r2, #1
 8005c56:	b2d0      	uxtb	r0, r2
 8005c58:	d142      	bne.n	8005ce0 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	d039      	beq.n	8005cd6 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005c62:	2212      	movs	r2, #18
 8005c64:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c68:	692a      	ldr	r2, [r5, #16]
 8005c6a:	3201      	adds	r2, #1
 8005c6c:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c6e:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005c70:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c72:	3201      	adds	r2, #1
 8005c74:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005c76:	696a      	ldr	r2, [r5, #20]
 8005c78:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005c7c:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005c7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c80:	b9a2      	cbnz	r2, 8005cac <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c82:	2201      	movs	r2, #1
 8005c84:	2102      	movs	r1, #2
 8005c86:	4620      	mov	r0, r4
 8005c88:	9600      	str	r6, [sp, #0]
 8005c8a:	f7ff fe25 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005c8e:	b928      	cbnz	r0, 8005c9c <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005c94:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c96:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005c98:	f7ff ff81 	bl	8005b9e <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005ca8:	b005      	add	sp, #20
 8005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	9600      	str	r6, [sp, #0]
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	f7ff fe0f 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d1ee      	bne.n	8005c9c <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005cc0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005cc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cca:	3201      	adds	r2, #1
 8005ccc:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005cce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005cd4:	e7d3      	b.n	8005c7e <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005cd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cd8:	f043 0308 	orr.w	r3, r3, #8
 8005cdc:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005cde:	e7e0      	b.n	8005ca2 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	e7de      	b.n	8005ca2 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8005ce4:	2002      	movs	r0, #2
 8005ce6:	e7df      	b.n	8005ca8 <HAL_QSPI_Transmit+0x78>

08005ce8 <HAL_QSPI_Receive>:
{
 8005ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	b085      	sub	sp, #20
 8005cee:	4616      	mov	r6, r2
 8005cf0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005cf2:	f7fe fbe5 	bl	80044c0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005cf6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005cf8:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005cfa:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005cfe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005d02:	2a01      	cmp	r2, #1
 8005d04:	d050      	beq.n	8005da8 <HAL_QSPI_Receive+0xc0>
 8005d06:	2201      	movs	r2, #1
 8005d08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d0c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d10:	2a01      	cmp	r2, #1
 8005d12:	b2d0      	uxtb	r0, r2
 8005d14:	d146      	bne.n	8005da4 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d16:	2200      	movs	r2, #0
 8005d18:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005d1a:	2f00      	cmp	r7, #0
 8005d1c:	d03d      	beq.n	8005d9a <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005d1e:	2222      	movs	r2, #34	; 0x22
 8005d20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d24:	692a      	ldr	r2, [r5, #16]
 8005d26:	3201      	adds	r2, #1
 8005d28:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d2a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005d2c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d2e:	3201      	adds	r2, #1
 8005d30:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005d32:	6969      	ldr	r1, [r5, #20]
 8005d34:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005d38:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005d3c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005d3e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8005d42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d44:	b9a2      	cbnz	r2, 8005d70 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2102      	movs	r1, #2
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	9600      	str	r6, [sp, #0]
 8005d4e:	f7ff fdc3 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8005d52:	b928      	cbnz	r0, 8005d60 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005d58:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d5a:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005d5c:	f7ff ff1f 	bl	8005b9e <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005d66:	2300      	movs	r3, #0
 8005d68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005d6c:	b005      	add	sp, #20
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005d70:	2201      	movs	r2, #1
 8005d72:	2106      	movs	r1, #6
 8005d74:	4620      	mov	r0, r4
 8005d76:	9600      	str	r6, [sp, #0]
 8005d78:	9303      	str	r3, [sp, #12]
 8005d7a:	f7ff fdad 	bl	80058d8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1ee      	bne.n	8005d60 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d82:	f895 1020 	ldrb.w	r1, [r5, #32]
 8005d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005d88:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d8a:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8005d8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d8e:	3201      	adds	r2, #1
 8005d90:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005d92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d94:	3a01      	subs	r2, #1
 8005d96:	63a2      	str	r2, [r4, #56]	; 0x38
 8005d98:	e7d3      	b.n	8005d42 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005d9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d9c:	f043 0308 	orr.w	r3, r3, #8
 8005da0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005da2:	e7e0      	b.n	8005d66 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8005da4:	2002      	movs	r0, #2
 8005da6:	e7de      	b.n	8005d66 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8005da8:	2002      	movs	r0, #2
 8005daa:	e7df      	b.n	8005d6c <HAL_QSPI_Receive+0x84>

08005dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005db0:	4604      	mov	r4, r0
 8005db2:	b340      	cbz	r0, 8005e06 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db4:	6803      	ldr	r3, [r0, #0]
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d410      	bmi.n	8005ddc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	079f      	lsls	r7, r3, #30
 8005dbe:	d464      	bmi.n	8005e8a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	0719      	lsls	r1, r3, #28
 8005dc4:	f100 80aa 	bmi.w	8005f1c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	075a      	lsls	r2, r3, #29
 8005dcc:	f100 80cb 	bmi.w	8005f66 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd0:	69a2      	ldr	r2, [r4, #24]
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	f040 8134 	bne.w	8006040 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e02b      	b.n	8005e34 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ddc:	4b96      	ldr	r3, [pc, #600]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	f002 020c 	and.w	r2, r2, #12
 8005de4:	2a04      	cmp	r2, #4
 8005de6:	d007      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	f002 020c 	and.w	r2, r2, #12
 8005dee:	2a08      	cmp	r2, #8
 8005df0:	d10b      	bne.n	8005e0a <HAL_RCC_OscConfig+0x5e>
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	0256      	lsls	r6, r2, #9
 8005df6:	d508      	bpl.n	8005e0a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	4b8f      	ldr	r3, [pc, #572]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	039d      	lsls	r5, r3, #14
 8005dfe:	d5dc      	bpl.n	8005dba <HAL_RCC_OscConfig+0xe>
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1d9      	bne.n	8005dba <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8005e06:	2001      	movs	r0, #1
 8005e08:	e014      	b.n	8005e34 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0a:	6862      	ldr	r2, [r4, #4]
 8005e0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005e10:	d113      	bne.n	8005e3a <HAL_RCC_OscConfig+0x8e>
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e1a:	f7fe fb51 	bl	80044c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1e:	4e86      	ldr	r6, [pc, #536]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005e20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	6833      	ldr	r3, [r6, #0]
 8005e24:	0398      	lsls	r0, r3, #14
 8005e26:	d4c8      	bmi.n	8005dba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fe fb4a 	bl	80044c0 <HAL_GetTick>
 8005e2c:	1b40      	subs	r0, r0, r5
 8005e2e:	2864      	cmp	r0, #100	; 0x64
 8005e30:	d9f7      	bls.n	8005e22 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8005e32:	2003      	movs	r0, #3
}
 8005e34:	b002      	add	sp, #8
 8005e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3a:	4d7f      	ldr	r5, [pc, #508]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b992      	cbnz	r2, 8005e66 <HAL_RCC_OscConfig+0xba>
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	682b      	ldr	r3, [r5, #0]
 8005e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e4e:	f7fe fb37 	bl	80044c0 <HAL_GetTick>
 8005e52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	0399      	lsls	r1, r3, #14
 8005e58:	d5af      	bpl.n	8005dba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e5a:	f7fe fb31 	bl	80044c0 <HAL_GetTick>
 8005e5e:	1b80      	subs	r0, r0, r6
 8005e60:	2864      	cmp	r0, #100	; 0x64
 8005e62:	d9f7      	bls.n	8005e54 <HAL_RCC_OscConfig+0xa8>
 8005e64:	e7e5      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e66:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCC_OscConfig+0xd0>
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	e7ce      	b.n	8005e1a <HAL_RCC_OscConfig+0x6e>
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e88:	e7f6      	b.n	8005e78 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e8a:	4b6b      	ldr	r3, [pc, #428]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	f012 0f0c 	tst.w	r2, #12
 8005e92:	d007      	beq.n	8005ea4 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	f002 020c 	and.w	r2, r2, #12
 8005e9a:	2a08      	cmp	r2, #8
 8005e9c:	d111      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x116>
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	0252      	lsls	r2, r2, #9
 8005ea2:	d40e      	bmi.n	8005ec2 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea4:	4a64      	ldr	r2, [pc, #400]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	079b      	lsls	r3, r3, #30
 8005eaa:	d502      	bpl.n	8005eb2 <HAL_RCC_OscConfig+0x106>
 8005eac:	68e3      	ldr	r3, [r4, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d1a9      	bne.n	8005e06 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	6921      	ldr	r1, [r4, #16]
 8005eb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005eba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005ebe:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec0:	e77e      	b.n	8005dc0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ec2:	68e2      	ldr	r2, [r4, #12]
 8005ec4:	b1c2      	cbz	r2, 8005ef8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8005ec6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec8:	4d5b      	ldr	r5, [pc, #364]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ed0:	f7fe faf6 	bl	80044c0 <HAL_GetTick>
 8005ed4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	079f      	lsls	r7, r3, #30
 8005eda:	d507      	bpl.n	8005eec <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	6922      	ldr	r2, [r4, #16]
 8005ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ee4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	e769      	b.n	8005dc0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eec:	f7fe fae8 	bl	80044c0 <HAL_GetTick>
 8005ef0:	1b80      	subs	r0, r0, r6
 8005ef2:	2802      	cmp	r0, #2
 8005ef4:	d9ef      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x12a>
 8005ef6:	e79c      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8005ef8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	4e4f      	ldr	r6, [pc, #316]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8005efc:	f022 0201 	bic.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005f02:	f7fe fadd 	bl	80044c0 <HAL_GetTick>
 8005f06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	0798      	lsls	r0, r3, #30
 8005f0c:	f57f af58 	bpl.w	8005dc0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f10:	f7fe fad6 	bl	80044c0 <HAL_GetTick>
 8005f14:	1b40      	subs	r0, r0, r5
 8005f16:	2802      	cmp	r0, #2
 8005f18:	d9f6      	bls.n	8005f08 <HAL_RCC_OscConfig+0x15c>
 8005f1a:	e78a      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f1c:	6963      	ldr	r3, [r4, #20]
 8005f1e:	4d46      	ldr	r5, [pc, #280]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005f20:	b183      	cbz	r3, 8005f44 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8005f22:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005f2a:	f7fe fac9 	bl	80044c0 <HAL_GetTick>
 8005f2e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	f53f af48 	bmi.w	8005dc8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f38:	f7fe fac2 	bl	80044c0 <HAL_GetTick>
 8005f3c:	1b80      	subs	r0, r0, r6
 8005f3e:	2802      	cmp	r0, #2
 8005f40:	d9f6      	bls.n	8005f30 <HAL_RCC_OscConfig+0x184>
 8005f42:	e776      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8005f44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005f4c:	f7fe fab8 	bl	80044c0 <HAL_GetTick>
 8005f50:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f54:	079f      	lsls	r7, r3, #30
 8005f56:	f57f af37 	bpl.w	8005dc8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5a:	f7fe fab1 	bl	80044c0 <HAL_GetTick>
 8005f5e:	1b80      	subs	r0, r0, r6
 8005f60:	2802      	cmp	r0, #2
 8005f62:	d9f6      	bls.n	8005f52 <HAL_RCC_OscConfig+0x1a6>
 8005f64:	e765      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f66:	4b34      	ldr	r3, [pc, #208]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6a:	00d0      	lsls	r0, r2, #3
 8005f6c:	d427      	bmi.n	8005fbe <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8005f70:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f82:	4d2e      	ldr	r5, [pc, #184]	; (800603c <HAL_RCC_OscConfig+0x290>)
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	05d9      	lsls	r1, r3, #23
 8005f88:	d51b      	bpl.n	8005fc2 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	4d2a      	ldr	r5, [pc, #168]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d127      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x236>
 8005f92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fa8f 	bl	80044c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa2:	4e25      	ldr	r6, [pc, #148]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8005fa4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005fa8:	079b      	lsls	r3, r3, #30
 8005faa:	d53f      	bpl.n	800602c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8005fac:	2f00      	cmp	r7, #0
 8005fae:	f43f af0f 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <HAL_RCC_OscConfig+0x28c>)
 8005fb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6413      	str	r3, [r2, #64]	; 0x40
 8005fbc:	e708      	b.n	8005dd0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005fbe:	2700      	movs	r7, #0
 8005fc0:	e7df      	b.n	8005f82 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005fca:	f7fe fa79 	bl	80044c0 <HAL_GetTick>
 8005fce:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	05da      	lsls	r2, r3, #23
 8005fd4:	d4d9      	bmi.n	8005f8a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fe fa73 	bl	80044c0 <HAL_GetTick>
 8005fda:	1b80      	subs	r0, r0, r6
 8005fdc:	2864      	cmp	r0, #100	; 0x64
 8005fde:	d9f7      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x224>
 8005fe0:	e727      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe2:	b9ab      	cbnz	r3, 8006010 <HAL_RCC_OscConfig+0x264>
 8005fe4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	672b      	str	r3, [r5, #112]	; 0x70
 8005ff0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005ff2:	f023 0304 	bic.w	r3, r3, #4
 8005ff6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005ff8:	f7fe fa62 	bl	80044c0 <HAL_GetTick>
 8005ffc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006000:	0798      	lsls	r0, r3, #30
 8006002:	d5d3      	bpl.n	8005fac <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006004:	f7fe fa5c 	bl	80044c0 <HAL_GetTick>
 8006008:	1b80      	subs	r0, r0, r6
 800600a:	4540      	cmp	r0, r8
 800600c:	d9f7      	bls.n	8005ffe <HAL_RCC_OscConfig+0x252>
 800600e:	e710      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	2b05      	cmp	r3, #5
 8006012:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006014:	d103      	bne.n	800601e <HAL_RCC_OscConfig+0x272>
 8006016:	f043 0304 	orr.w	r3, r3, #4
 800601a:	672b      	str	r3, [r5, #112]	; 0x70
 800601c:	e7b9      	b.n	8005f92 <HAL_RCC_OscConfig+0x1e6>
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	672b      	str	r3, [r5, #112]	; 0x70
 8006024:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	e7b5      	b.n	8005f98 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fe fa48 	bl	80044c0 <HAL_GetTick>
 8006030:	1b40      	subs	r0, r0, r5
 8006032:	4540      	cmp	r0, r8
 8006034:	d9b7      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x1fa>
 8006036:	e6fc      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
 8006038:	40023800 	.word	0x40023800
 800603c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006040:	4d38      	ldr	r5, [pc, #224]	; (8006124 <HAL_RCC_OscConfig+0x378>)
 8006042:	68ab      	ldr	r3, [r5, #8]
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b08      	cmp	r3, #8
 800604a:	d041      	beq.n	80060d0 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 800604c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800604e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006054:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006056:	d12e      	bne.n	80060b6 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8006058:	f7fe fa32 	bl	80044c0 <HAL_GetTick>
 800605c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	0199      	lsls	r1, r3, #6
 8006062:	d422      	bmi.n	80060aa <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800606e:	430b      	orrs	r3, r1
 8006070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006074:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006076:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800607a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800607c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006084:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800608e:	f7fe fa17 	bl	80044c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006092:	4d24      	ldr	r5, [pc, #144]	; (8006124 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8006094:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	f53f ae9d 	bmi.w	8005dd8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609e:	f7fe fa0f 	bl	80044c0 <HAL_GetTick>
 80060a2:	1b00      	subs	r0, r0, r4
 80060a4:	2802      	cmp	r0, #2
 80060a6:	d9f6      	bls.n	8006096 <HAL_RCC_OscConfig+0x2ea>
 80060a8:	e6c3      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fe fa09 	bl	80044c0 <HAL_GetTick>
 80060ae:	1b80      	subs	r0, r0, r6
 80060b0:	2802      	cmp	r0, #2
 80060b2:	d9d4      	bls.n	800605e <HAL_RCC_OscConfig+0x2b2>
 80060b4:	e6bd      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80060b6:	f7fe fa03 	bl	80044c0 <HAL_GetTick>
 80060ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	019b      	lsls	r3, r3, #6
 80060c0:	f57f ae8a 	bpl.w	8005dd8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fe f9fc 	bl	80044c0 <HAL_GetTick>
 80060c8:	1b00      	subs	r0, r0, r4
 80060ca:	2802      	cmp	r0, #2
 80060cc:	d9f6      	bls.n	80060bc <HAL_RCC_OscConfig+0x310>
 80060ce:	e6b0      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d0:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80060d2:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d4:	f43f ae97 	beq.w	8005e06 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060dc:	69e1      	ldr	r1, [r4, #28]
 80060de:	428a      	cmp	r2, r1
 80060e0:	f47f ae91 	bne.w	8005e06 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e8:	6a21      	ldr	r1, [r4, #32]
 80060ea:	428a      	cmp	r2, r1
 80060ec:	f47f ae8b 	bne.w	8005e06 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f6:	401a      	ands	r2, r3
 80060f8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80060fc:	f47f ae83 	bne.w	8005e06 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006102:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006106:	0852      	lsrs	r2, r2, #1
 8006108:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800610a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800610e:	f47f ae7a 	bne.w	8005e06 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006112:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006118:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800611c:	f43f ae5c 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x2c>
 8006120:	e671      	b.n	8005e06 <HAL_RCC_OscConfig+0x5a>
 8006122:	bf00      	nop
 8006124:	40023800 	.word	0x40023800

08006128 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006128:	4913      	ldr	r1, [pc, #76]	; (8006178 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800612a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800612c:	688b      	ldr	r3, [r1, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b04      	cmp	r3, #4
 8006134:	d01b      	beq.n	800616e <HAL_RCC_GetSysClockFreq+0x46>
 8006136:	2b08      	cmp	r3, #8
 8006138:	d11b      	bne.n	8006172 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800613a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800613c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006140:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006144:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006148:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800614c:	bf1a      	itte	ne
 800614e:	480b      	ldrne	r0, [pc, #44]	; (800617c <HAL_RCC_GetSysClockFreq+0x54>)
 8006150:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006152:	480b      	ldreq	r0, [pc, #44]	; (8006180 <HAL_RCC_GetSysClockFreq+0x58>)
 8006154:	fba1 0100 	umull	r0, r1, r1, r0
 8006158:	f7fa fcc8 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_GetSysClockFreq+0x50>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006164:	3301      	adds	r3, #1
 8006166:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006168:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800616c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800616e:	4803      	ldr	r0, [pc, #12]	; (800617c <HAL_RCC_GetSysClockFreq+0x54>)
 8006170:	e7fc      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8006172:	4803      	ldr	r0, [pc, #12]	; (8006180 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006174:	e7fa      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x44>
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	017d7840 	.word	0x017d7840
 8006180:	00f42400 	.word	0x00f42400

08006184 <HAL_RCC_ClockConfig>:
{
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800618a:	4604      	mov	r4, r0
 800618c:	b910      	cbnz	r0, 8006194 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800618e:	2001      	movs	r0, #1
}
 8006190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4a46      	ldr	r2, [pc, #280]	; (80062b0 <HAL_RCC_ClockConfig+0x12c>)
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	428b      	cmp	r3, r1
 800619e:	d328      	bcc.n	80061f2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	0797      	lsls	r7, r2, #30
 80061a4:	d430      	bmi.n	8006208 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a6:	07d0      	lsls	r0, r2, #31
 80061a8:	d444      	bmi.n	8006234 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061aa:	4a41      	ldr	r2, [pc, #260]	; (80062b0 <HAL_RCC_ClockConfig+0x12c>)
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	42ab      	cmp	r3, r5
 80061b4:	d867      	bhi.n	8006286 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	0751      	lsls	r1, r2, #29
 80061ba:	d470      	bmi.n	800629e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	0713      	lsls	r3, r2, #28
 80061be:	d507      	bpl.n	80061d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061c0:	4a3c      	ldr	r2, [pc, #240]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 80061c2:	6921      	ldr	r1, [r4, #16]
 80061c4:	6893      	ldr	r3, [r2, #8]
 80061c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80061ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80061ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061d0:	f7ff ffaa 	bl	8006128 <HAL_RCC_GetSysClockFreq>
 80061d4:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 80061d6:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <HAL_RCC_ClockConfig+0x134>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	40d8      	lsrs	r0, r3
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <HAL_RCC_ClockConfig+0x138>)
 80061e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_RCC_ClockConfig+0x13c>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f7fb fb23 	bl	8001834 <HAL_InitTick>
  return HAL_OK;
 80061ee:	2000      	movs	r0, #0
 80061f0:	e7ce      	b.n	8006190 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	f023 030f 	bic.w	r3, r3, #15
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	428b      	cmp	r3, r1
 8006204:	d1c3      	bne.n	800618e <HAL_RCC_ClockConfig+0xa>
 8006206:	e7cb      	b.n	80061a0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006208:	f012 0f04 	tst.w	r2, #4
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 800620e:	d003      	beq.n	8006218 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006210:	6899      	ldr	r1, [r3, #8]
 8006212:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8006216:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	0716      	lsls	r6, r2, #28
 800621a:	d503      	bpl.n	8006224 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800621c:	6899      	ldr	r1, [r3, #8]
 800621e:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8006222:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006224:	4923      	ldr	r1, [pc, #140]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 8006226:	68a0      	ldr	r0, [r4, #8]
 8006228:	688b      	ldr	r3, [r1, #8]
 800622a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622e:	4303      	orrs	r3, r0
 8006230:	608b      	str	r3, [r1, #8]
 8006232:	e7b8      	b.n	80061a6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006234:	6861      	ldr	r1, [r4, #4]
 8006236:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 8006238:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623c:	d11b      	bne.n	8006276 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	d0a4      	beq.n	800618e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006244:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006246:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	4f1a      	ldr	r7, [pc, #104]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800624c:	f022 0203 	bic.w	r2, r2, #3
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006254:	f7fe f934 	bl	80044c0 <HAL_GetTick>
 8006258:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6862      	ldr	r2, [r4, #4]
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006266:	d0a0      	beq.n	80061aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006268:	f7fe f92a 	bl	80044c0 <HAL_GetTick>
 800626c:	1b80      	subs	r0, r0, r6
 800626e:	4540      	cmp	r0, r8
 8006270:	d9f3      	bls.n	800625a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006272:	2003      	movs	r0, #3
 8006274:	e78c      	b.n	8006190 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006276:	2902      	cmp	r1, #2
 8006278:	d102      	bne.n	8006280 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800627a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800627e:	e7e0      	b.n	8006242 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006280:	f012 0f02 	tst.w	r2, #2
 8006284:	e7dd      	b.n	8006242 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	f023 030f 	bic.w	r3, r3, #15
 800628c:	432b      	orrs	r3, r5
 800628e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006290:	6813      	ldr	r3, [r2, #0]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	42ab      	cmp	r3, r5
 8006298:	f47f af79 	bne.w	800618e <HAL_RCC_ClockConfig+0xa>
 800629c:	e78b      	b.n	80061b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800629e:	4905      	ldr	r1, [pc, #20]	; (80062b4 <HAL_RCC_ClockConfig+0x130>)
 80062a0:	68e0      	ldr	r0, [r4, #12]
 80062a2:	688b      	ldr	r3, [r1, #8]
 80062a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80062a8:	4303      	orrs	r3, r0
 80062aa:	608b      	str	r3, [r1, #8]
 80062ac:	e786      	b.n	80061bc <HAL_RCC_ClockConfig+0x38>
 80062ae:	bf00      	nop
 80062b0:	40023c00 	.word	0x40023c00
 80062b4:	40023800 	.word	0x40023800
 80062b8:	0802c6f8 	.word	0x0802c6f8
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	2000003c 	.word	0x2000003c

080062c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80062ce:	5cd3      	ldrb	r3, [r2, r3]
 80062d0:	4a03      	ldr	r2, [pc, #12]	; (80062e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80062d2:	6810      	ldr	r0, [r2, #0]
}
 80062d4:	40d8      	lsrs	r0, r3
 80062d6:	4770      	bx	lr
 80062d8:	40023800 	.word	0x40023800
 80062dc:	0802c708 	.word	0x0802c708
 80062e0:	2000000c 	.word	0x2000000c

080062e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062e4:	230f      	movs	r3, #15
 80062e6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_GetClockConfig+0x34>)
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	f002 0203 	and.w	r2, r2, #3
 80062f0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80062f8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006300:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800630a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <HAL_RCC_GetClockConfig+0x38>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	600b      	str	r3, [r1, #0]
}
 8006316:	4770      	bx	lr
 8006318:	40023800 	.word	0x40023800
 800631c:	40023c00 	.word	0x40023c00

08006320 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006320:	6803      	ldr	r3, [r0, #0]
{
 8006322:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006326:	f013 0601 	ands.w	r6, r3, #1
{
 800632a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800632c:	d00b      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800632e:	4aaa      	ldr	r2, [pc, #680]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006330:	6891      	ldr	r1, [r2, #8]
 8006332:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006336:	6091      	str	r1, [r2, #8]
 8006338:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800633a:	6891      	ldr	r1, [r2, #8]
 800633c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800633e:	fab6 f686 	clz	r6, r6
 8006342:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006344:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006346:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800634a:	d012      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800634c:	49a2      	ldr	r1, [pc, #648]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800634e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006350:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006354:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006358:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800635c:	bf08      	it	eq
 800635e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006360:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006364:	bf16      	itet	ne
 8006366:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800636a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800636c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800636e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006372:	02d8      	lsls	r0, r3, #11
 8006374:	d510      	bpl.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006376:	4898      	ldr	r0, [pc, #608]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006378:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800637a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800637e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006382:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006386:	ea42 0201 	orr.w	r2, r2, r1
 800638a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800638e:	f000 8184 	beq.w	800669a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8006392:	2900      	cmp	r1, #0
 8006394:	bf08      	it	eq
 8006396:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006398:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800639c:	bf18      	it	ne
 800639e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063a0:	0699      	lsls	r1, r3, #26
 80063a2:	d531      	bpl.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063a4:	4b8c      	ldr	r3, [pc, #560]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063a6:	4f8d      	ldr	r7, [pc, #564]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80063a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c2:	f7fe f87d 	bl	80044c0 <HAL_GetTick>
 80063c6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	05da      	lsls	r2, r3, #23
 80063cc:	f140 8167 	bpl.w	800669e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063d0:	4f81      	ldr	r7, [pc, #516]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80063d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80063d8:	f040 816c 	bne.w	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063de:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80063e2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80063e6:	4a7c      	ldr	r2, [pc, #496]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80063e8:	f040 818a 	bne.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80063ec:	6891      	ldr	r1, [r2, #8]
 80063ee:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80063f2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80063f6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80063fa:	4301      	orrs	r1, r0
 80063fc:	6091      	str	r1, [r2, #8]
 80063fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006402:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006404:	430b      	orrs	r3, r1
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	06d9      	lsls	r1, r3, #27
 800640c:	d50c      	bpl.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800640e:	4a72      	ldr	r2, [pc, #456]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006410:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006414:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006418:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800641c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006420:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006422:	4301      	orrs	r1, r0
 8006424:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006428:	045a      	lsls	r2, r3, #17
 800642a:	d508      	bpl.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800642c:	496a      	ldr	r1, [pc, #424]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800642e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006430:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006434:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006438:	4302      	orrs	r2, r0
 800643a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800643e:	041f      	lsls	r7, r3, #16
 8006440:	d508      	bpl.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006442:	4965      	ldr	r1, [pc, #404]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006444:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006446:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800644a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800644e:	4302      	orrs	r2, r0
 8006450:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006454:	03d8      	lsls	r0, r3, #15
 8006456:	d508      	bpl.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006458:	495f      	ldr	r1, [pc, #380]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800645a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800645c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006460:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006464:	4302      	orrs	r2, r0
 8006466:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800646a:	0399      	lsls	r1, r3, #14
 800646c:	d508      	bpl.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800646e:	495a      	ldr	r1, [pc, #360]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006470:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006472:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006476:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800647a:	4302      	orrs	r2, r0
 800647c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006480:	065a      	lsls	r2, r3, #25
 8006482:	d508      	bpl.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006484:	4954      	ldr	r1, [pc, #336]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006486:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006488:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800648c:	f022 0203 	bic.w	r2, r2, #3
 8006490:	4302      	orrs	r2, r0
 8006492:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006496:	061f      	lsls	r7, r3, #24
 8006498:	d508      	bpl.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800649a:	494f      	ldr	r1, [pc, #316]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800649c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800649e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064a2:	f022 020c 	bic.w	r2, r2, #12
 80064a6:	4302      	orrs	r2, r0
 80064a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ac:	05d8      	lsls	r0, r3, #23
 80064ae:	d508      	bpl.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064b0:	4949      	ldr	r1, [pc, #292]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80064b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80064b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80064bc:	4302      	orrs	r2, r0
 80064be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064c2:	0599      	lsls	r1, r3, #22
 80064c4:	d508      	bpl.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064c6:	4944      	ldr	r1, [pc, #272]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80064c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80064ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064d2:	4302      	orrs	r2, r0
 80064d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064d8:	055a      	lsls	r2, r3, #21
 80064da:	d508      	bpl.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064dc:	493e      	ldr	r1, [pc, #248]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80064de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064e8:	4302      	orrs	r2, r0
 80064ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80064ee:	051f      	lsls	r7, r3, #20
 80064f0:	d508      	bpl.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80064f2:	4939      	ldr	r1, [pc, #228]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80064f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064fe:	4302      	orrs	r2, r0
 8006500:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006504:	04d8      	lsls	r0, r3, #19
 8006506:	d508      	bpl.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006508:	4933      	ldr	r1, [pc, #204]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800650a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800650c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006510:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006514:	4302      	orrs	r2, r0
 8006516:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800651a:	0499      	lsls	r1, r3, #18
 800651c:	d508      	bpl.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800651e:	492e      	ldr	r1, [pc, #184]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006520:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006522:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006526:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800652a:	4302      	orrs	r2, r0
 800652c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006530:	025a      	lsls	r2, r3, #9
 8006532:	d508      	bpl.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006534:	4928      	ldr	r1, [pc, #160]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006536:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006538:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800653c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006540:	4302      	orrs	r2, r0
 8006542:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006546:	029f      	lsls	r7, r3, #10
 8006548:	d50c      	bpl.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800654a:	4823      	ldr	r0, [pc, #140]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800654c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800654e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006552:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006556:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800655a:	bf08      	it	eq
 800655c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800655e:	430a      	orrs	r2, r1
 8006560:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006564:	f013 0f08 	tst.w	r3, #8
 8006568:	bf18      	it	ne
 800656a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800656c:	0358      	lsls	r0, r3, #13
 800656e:	d508      	bpl.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006570:	4919      	ldr	r1, [pc, #100]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006572:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006574:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800657c:	4302      	orrs	r2, r0
 800657e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006582:	0219      	lsls	r1, r3, #8
 8006584:	d509      	bpl.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006586:	4914      	ldr	r1, [pc, #80]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006588:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800658c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006590:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006594:	4302      	orrs	r2, r0
 8006596:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800659a:	2e01      	cmp	r6, #1
 800659c:	f000 80b4 	beq.w	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80065a0:	019a      	lsls	r2, r3, #6
 80065a2:	f100 80b1 	bmi.w	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065a6:	2d01      	cmp	r5, #1
 80065a8:	d175      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065aa:	4d0b      	ldr	r5, [pc, #44]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b2:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b4:	f7fd ff84 	bl	80044c0 <HAL_GetTick>
 80065b8:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	009f      	lsls	r7, r3, #2
 80065be:	f100 8127 	bmi.w	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	0316      	lsls	r6, r2, #12
 80065c6:	d501      	bpl.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80065c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065ca:	b14b      	cbz	r3, 80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80065cc:	02d0      	lsls	r0, r2, #11
 80065ce:	d522      	bpl.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065d2:	bb03      	cbnz	r3, 8006616 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80065d4:	e004      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065e0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065e4:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065ec:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6961      	ldr	r1, [r4, #20]
 80065f4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80065f8:	69a1      	ldr	r1, [r4, #24]
 80065fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80065fe:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006602:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006606:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006608:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800660c:	3901      	subs	r1, #1
 800660e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006612:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006616:	0291      	lsls	r1, r2, #10
 8006618:	d515      	bpl.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800661a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800661c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006620:	d111      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006622:	4982      	ldr	r1, [pc, #520]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006624:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006628:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800662c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006630:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006634:	4303      	orrs	r3, r0
 8006636:	6960      	ldr	r0, [r4, #20]
 8006638:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800663c:	6a20      	ldr	r0, [r4, #32]
 800663e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006646:	0712      	lsls	r2, r2, #28
 8006648:	d519      	bpl.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800664a:	4a78      	ldr	r2, [pc, #480]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800664c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006650:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006654:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800665c:	430b      	orrs	r3, r1
 800665e:	6961      	ldr	r1, [r4, #20]
 8006660:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006664:	69e1      	ldr	r1, [r4, #28]
 8006666:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800666a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800666e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006672:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006674:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006678:	430b      	orrs	r3, r1
 800667a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800667e:	4c6b      	ldr	r4, [pc, #428]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006686:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006688:	f7fd ff1a 	bl	80044c0 <HAL_GetTick>
 800668c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	f140 80c4 	bpl.w	800681e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006696:	2000      	movs	r0, #0
 8006698:	e009      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 800669a:	2601      	movs	r6, #1
 800669c:	e67c      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669e:	f7fd ff0f 	bl	80044c0 <HAL_GetTick>
 80066a2:	eba0 0008 	sub.w	r0, r0, r8
 80066a6:	2864      	cmp	r0, #100	; 0x64
 80066a8:	f67f ae8e 	bls.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80066ac:	2003      	movs	r0, #3
}
 80066ae:	b003      	add	sp, #12
 80066b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066b6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f43f ae8e 	beq.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066cc:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80066d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066d4:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80066d6:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066da:	07db      	lsls	r3, r3, #31
 80066dc:	f57f ae7e 	bpl.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80066e0:	f7fd feee 	bl	80044c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80066e8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ec:	0798      	lsls	r0, r3, #30
 80066ee:	f53f ae75 	bmi.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f2:	f7fd fee5 	bl	80044c0 <HAL_GetTick>
 80066f6:	eba0 0008 	sub.w	r0, r0, r8
 80066fa:	4548      	cmp	r0, r9
 80066fc:	d9f5      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80066fe:	e7d5      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006700:	6891      	ldr	r1, [r2, #8]
 8006702:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006706:	e679      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006708:	4e48      	ldr	r6, [pc, #288]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006710:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006712:	f7fd fed5 	bl	80044c0 <HAL_GetTick>
 8006716:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006718:	6833      	ldr	r3, [r6, #0]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	d472      	bmi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	07d7      	lsls	r7, r2, #31
 8006722:	d512      	bpl.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006726:	b983      	cbnz	r3, 800674a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006728:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800672c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006734:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006738:	430b      	orrs	r3, r1
 800673a:	6861      	ldr	r1, [r4, #4]
 800673c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006740:	68a1      	ldr	r1, [r4, #8]
 8006742:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006746:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800674a:	0316      	lsls	r6, r2, #12
 800674c:	d503      	bpl.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800674e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006754:	d005      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006756:	02d0      	lsls	r0, r2, #11
 8006758:	d51e      	bpl.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800675a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800675c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006760:	d11a      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006762:	4932      	ldr	r1, [pc, #200]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006764:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006768:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800676c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006770:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006774:	4303      	orrs	r3, r0
 8006776:	6860      	ldr	r0, [r4, #4]
 8006778:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006786:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800678a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800678c:	f020 001f 	bic.w	r0, r0, #31
 8006790:	3b01      	subs	r3, #1
 8006792:	4303      	orrs	r3, r0
 8006794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006798:	01d1      	lsls	r1, r2, #7
 800679a:	d511      	bpl.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800679c:	4923      	ldr	r1, [pc, #140]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800679e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067a2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80067aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80067ae:	4303      	orrs	r3, r0
 80067b0:	6860      	ldr	r0, [r4, #4]
 80067b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80067b6:	6920      	ldr	r0, [r4, #16]
 80067b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067c0:	0192      	lsls	r2, r2, #6
 80067c2:	d50d      	bpl.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80067ce:	68e2      	ldr	r2, [r4, #12]
 80067d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80067d4:	68a2      	ldr	r2, [r4, #8]
 80067d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80067da:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80067e0:	4e12      	ldr	r6, [pc, #72]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067e2:	6833      	ldr	r3, [r6, #0]
 80067e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067e8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80067ea:	f7fd fe69 	bl	80044c0 <HAL_GetTick>
 80067ee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	f53f aed7 	bmi.w	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067f8:	f7fd fe62 	bl	80044c0 <HAL_GetTick>
 80067fc:	1bc0      	subs	r0, r0, r7
 80067fe:	2864      	cmp	r0, #100	; 0x64
 8006800:	d9f6      	bls.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006802:	e753      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006804:	f7fd fe5c 	bl	80044c0 <HAL_GetTick>
 8006808:	1bc0      	subs	r0, r0, r7
 800680a:	2864      	cmp	r0, #100	; 0x64
 800680c:	d984      	bls.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800680e:	e74d      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006810:	f7fd fe56 	bl	80044c0 <HAL_GetTick>
 8006814:	1b80      	subs	r0, r0, r6
 8006816:	2864      	cmp	r0, #100	; 0x64
 8006818:	f67f aecf 	bls.w	80065ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800681c:	e746      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800681e:	f7fd fe4f 	bl	80044c0 <HAL_GetTick>
 8006822:	1b40      	subs	r0, r0, r5
 8006824:	2864      	cmp	r0, #100	; 0x64
 8006826:	f67f af32 	bls.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800682a:	e73f      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800682c:	40023800 	.word	0x40023800

08006830 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006834:	4604      	mov	r4, r0
 8006836:	b1c8      	cbz	r0, 800686c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006838:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800683c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006840:	b91b      	cbnz	r3, 800684a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006842:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006846:	f7fa ff8d 	bl	8001764 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800684a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800684c:	1d21      	adds	r1, r4, #4
 800684e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006850:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006854:	f000 f9cf 	bl	8006bf6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006858:	6862      	ldr	r2, [r4, #4]
 800685a:	4629      	mov	r1, r5
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	f000 fa05 	bl	8006c6c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006862:	2301      	movs	r3, #1

  return HAL_OK;
 8006864:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006866:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800686a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800686c:	2001      	movs	r0, #1
 800686e:	e7fc      	b.n	800686a <HAL_SDRAM_Init+0x3a>

08006870 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006870:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006872:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006876:	4605      	mov	r5, r0
 8006878:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800687a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800687c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800687e:	d010      	beq.n	80068a2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006880:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006884:	2c01      	cmp	r4, #1
 8006886:	d110      	bne.n	80068aa <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006888:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800688a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800688c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006890:	f000 fa22 	bl	8006cd8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d104      	bne.n	80068a4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800689a:	2305      	movs	r3, #5
 800689c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80068a0:	2000      	movs	r0, #0
}
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80068a4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80068a8:	e7fa      	b.n	80068a0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7f9      	b.n	80068a2 <HAL_SDRAM_SendCommand+0x32>

080068ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80068ae:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80068b4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	b2d8      	uxtb	r0, r3
 80068ba:	d00d      	beq.n	80068d8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80068bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	b2dd      	uxtb	r5, r3
 80068c4:	d109      	bne.n	80068da <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068c6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80068c8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80068ce:	f000 fa15 	bl	8006cfc <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80068d2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80068d4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80068d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80068da:	2001      	movs	r0, #1
 80068dc:	e7fc      	b.n	80068d8 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080068de <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068de:	4770      	bx	lr

080068e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d133      	bne.n	8006950 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	2302      	movs	r3, #2
 80068ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ee:	6803      	ldr	r3, [r0, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_TIM_Base_Start_IT+0x74>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01a      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d017      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 8006904:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 800690c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006910:	4293      	cmp	r3, r2
 8006912:	d00f      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 8006914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006918:	4293      	cmp	r3, r2
 800691a:	d00b      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 800691c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 8006924:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x54>
 800692c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006930:	4293      	cmp	r3, r2
 8006932:	d107      	bne.n	8006944 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	4a08      	ldr	r2, [pc, #32]	; (8006958 <HAL_TIM_Base_Start_IT+0x78>)
 8006938:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693a:	2a06      	cmp	r2, #6
 800693c:	d006      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x6c>
 800693e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006942:	d003      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800694c:	2000      	movs	r0, #0
}
 800694e:	4770      	bx	lr
    return HAL_ERROR;
 8006950:	2001      	movs	r0, #1
 8006952:	4770      	bx	lr
 8006954:	40010000 	.word	0x40010000
 8006958:	00010007 	.word	0x00010007

0800695c <HAL_TIM_OC_DelayElapsedCallback>:
 800695c:	4770      	bx	lr

0800695e <HAL_TIM_IC_CaptureCallback>:
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_TriggerCallback>:
 8006962:	4770      	bx	lr

08006964 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006964:	6803      	ldr	r3, [r0, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	0791      	lsls	r1, r2, #30
{
 800696a:	b510      	push	{r4, lr}
 800696c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800696e:	d50f      	bpl.n	8006990 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	0792      	lsls	r2, r2, #30
 8006974:	d50c      	bpl.n	8006990 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006976:	f06f 0202 	mvn.w	r2, #2
 800697a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697c:	2201      	movs	r2, #1
 800697e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	0799      	lsls	r1, r3, #30
 8006984:	f000 8085 	beq.w	8006a92 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006988:	f7ff ffe9 	bl	800695e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	2300      	movs	r3, #0
 800698e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	0752      	lsls	r2, r2, #29
 8006996:	d510      	bpl.n	80069ba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	0750      	lsls	r0, r2, #29
 800699c:	d50d      	bpl.n	80069ba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800699e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a6:	2202      	movs	r2, #2
 80069a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f413 7f40 	tst.w	r3, #768	; 0x300
 80069b0:	d075      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	f7ff ffd4 	bl	800695e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	2300      	movs	r3, #0
 80069b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	0711      	lsls	r1, r2, #28
 80069c0:	d50f      	bpl.n	80069e2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	0712      	lsls	r2, r2, #28
 80069c6:	d50c      	bpl.n	80069e2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d0:	2204      	movs	r2, #4
 80069d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	079b      	lsls	r3, r3, #30
 80069d8:	d067      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80069da:	f7ff ffc0 	bl	800695e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	2300      	movs	r3, #0
 80069e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	06d0      	lsls	r0, r2, #27
 80069e8:	d510      	bpl.n	8006a0c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	06d1      	lsls	r1, r2, #27
 80069ee:	d50d      	bpl.n	8006a0c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f8:	2208      	movs	r2, #8
 80069fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006a02:	d058      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a04:	f7ff ffab 	bl	800695e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	07d2      	lsls	r2, r2, #31
 8006a12:	d508      	bpl.n	8006a26 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	07d0      	lsls	r0, r2, #31
 8006a18:	d505      	bpl.n	8006a26 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a1a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a22:	f7fa fc9f 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	0611      	lsls	r1, r2, #24
 8006a2c:	d508      	bpl.n	8006a40 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	0612      	lsls	r2, r2, #24
 8006a32:	d505      	bpl.n	8006a40 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a3c:	f000 f8d9 	bl	8006bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	05d0      	lsls	r0, r2, #23
 8006a46:	d508      	bpl.n	8006a5a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	0611      	lsls	r1, r2, #24
 8006a4c:	d505      	bpl.n	8006a5a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006a56:	f000 f8cd 	bl	8006bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	0652      	lsls	r2, r2, #25
 8006a60:	d508      	bpl.n	8006a74 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	0650      	lsls	r0, r2, #25
 8006a66:	d505      	bpl.n	8006a74 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a70:	f7ff ff77 	bl	8006962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	0691      	lsls	r1, r2, #26
 8006a7a:	d522      	bpl.n	8006ac2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	0692      	lsls	r2, r2, #26
 8006a80:	d51f      	bpl.n	8006ac2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a82:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a88:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006a8e:	f000 b8af 	b.w	8006bf0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a92:	f7ff ff63 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff ff62 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a9c:	e776      	b.n	800698c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9e:	f7ff ff5d 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff ff5c 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
 8006aa8:	e785      	b.n	80069b6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	f7ff ff57 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff ff56 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ab4:	e793      	b.n	80069de <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	f7ff ff51 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff ff50 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ac0:	e7a2      	b.n	8006a08 <HAL_TIM_IRQHandler+0xa4>
}
 8006ac2:	bd10      	pop	{r4, pc}

08006ac4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	4a30      	ldr	r2, [pc, #192]	; (8006b88 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006ac6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac8:	4290      	cmp	r0, r2
 8006aca:	d012      	beq.n	8006af2 <TIM_Base_SetConfig+0x2e>
 8006acc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ad0:	d00f      	beq.n	8006af2 <TIM_Base_SetConfig+0x2e>
 8006ad2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ad6:	4290      	cmp	r0, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_Base_SetConfig+0x2e>
 8006ada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ade:	4290      	cmp	r0, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_Base_SetConfig+0x2e>
 8006ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ae6:	4290      	cmp	r0, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_Base_SetConfig+0x2e>
 8006aea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006aee:	4290      	cmp	r0, r2
 8006af0:	d119      	bne.n	8006b26 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006af2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006af8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afa:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <TIM_Base_SetConfig+0xc4>)
 8006afc:	4290      	cmp	r0, r2
 8006afe:	d029      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006b04:	d026      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	d022      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d01e      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	d01a      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006b22:	4290      	cmp	r0, r2
 8006b24:	d016      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b26:	4a19      	ldr	r2, [pc, #100]	; (8006b8c <TIM_Base_SetConfig+0xc8>)
 8006b28:	4290      	cmp	r0, r2
 8006b2a:	d013      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b30:	4290      	cmp	r0, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b38:	4290      	cmp	r0, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b3c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006b40:	4290      	cmp	r0, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b48:	4290      	cmp	r0, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0x90>
 8006b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b50:	4290      	cmp	r0, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b58:	68ca      	ldr	r2, [r1, #12]
 8006b5a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	694a      	ldr	r2, [r1, #20]
 8006b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b62:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006b64:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b66:	688b      	ldr	r3, [r1, #8]
 8006b68:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6a:	680b      	ldr	r3, [r1, #0]
 8006b6c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <TIM_Base_SetConfig+0xc4>)
 8006b70:	4298      	cmp	r0, r3
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0xb8>
 8006b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b78:	4298      	cmp	r0, r3
 8006b7a:	d101      	bne.n	8006b80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b7c:	690b      	ldr	r3, [r1, #16]
 8006b7e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b80:	2301      	movs	r3, #1
 8006b82:	6143      	str	r3, [r0, #20]
}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	40014000 	.word	0x40014000

08006b90 <HAL_TIM_Base_Init>:
{
 8006b90:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006b92:	4604      	mov	r4, r0
 8006b94:	b350      	cbz	r0, 8006bec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b9e:	b91b      	cbnz	r3, 8006ba8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006ba0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006ba4:	f7ff fe9b 	bl	80068de <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb2:	f7ff ff87 	bl	8006ac4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb6:	2301      	movs	r3, #1
  return HAL_OK;
 8006bb8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006bc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006bc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006bda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bde:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006be2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006bea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006bec:	2001      	movs	r0, #1
 8006bee:	e7fc      	b.n	8006bea <HAL_TIM_Base_Init+0x5a>

08006bf0 <HAL_TIMEx_CommutCallback>:
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIMEx_BreakCallback>:
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_Break2Callback>:
 8006bf4:	4770      	bx	lr

08006bf6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006bfa:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bfc:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8006c00:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006c04:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006c08:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006c0c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8006c10:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006c12:	b9a2      	cbnz	r2, 8006c3e <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c14:	ea43 0209 	orr.w	r2, r3, r9
 8006c18:	6801      	ldr	r1, [r0, #0]
 8006c1a:	432a      	orrs	r2, r5
 8006c1c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006c20:	ea42 0308 	orr.w	r3, r2, r8
 8006c24:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006c28:	ea43 030e 	orr.w	r3, r3, lr
 8006c2c:	ea43 030c 	orr.w	r3, r3, ip
 8006c30:	433b      	orrs	r3, r7
 8006c32:	4333      	orrs	r3, r6
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006c38:	2000      	movs	r0, #0
 8006c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c3e:	6802      	ldr	r2, [r0, #0]
 8006c40:	ea43 0309 	orr.w	r3, r3, r9
 8006c44:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c4c:	ea45 0308 	orr.w	r3, r5, r8
 8006c50:	6842      	ldr	r2, [r0, #4]
 8006c52:	ea43 030e 	orr.w	r3, r3, lr
 8006c56:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006c5a:	ea43 030c 	orr.w	r3, r3, ip
 8006c5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006c62:	433b      	orrs	r3, r7
 8006c64:	4333      	orrs	r3, r6
 8006c66:	4313      	orrs	r3, r2
 8006c68:	6043      	str	r3, [r0, #4]
 8006c6a:	e7e5      	b.n	8006c38 <FMC_SDRAM_Init+0x42>

08006c6c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c6c:	68cb      	ldr	r3, [r1, #12]
 8006c6e:	f103 3cff 	add.w	ip, r3, #4294967295
 8006c72:	694b      	ldr	r3, [r1, #20]
{
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c76:	3b01      	subs	r3, #1
 8006c78:	680f      	ldr	r7, [r1, #0]
 8006c7a:	684c      	ldr	r4, [r1, #4]
 8006c7c:	688e      	ldr	r6, [r1, #8]
 8006c7e:	051b      	lsls	r3, r3, #20
 8006c80:	690d      	ldr	r5, [r1, #16]
 8006c82:	3c01      	subs	r4, #1
 8006c84:	6989      	ldr	r1, [r1, #24]
 8006c86:	3e01      	subs	r6, #1
 8006c88:	3d01      	subs	r5, #1
 8006c8a:	3f01      	subs	r7, #1
 8006c8c:	3901      	subs	r1, #1
 8006c8e:	0124      	lsls	r4, r4, #4
 8006c90:	0236      	lsls	r6, r6, #8
 8006c92:	042d      	lsls	r5, r5, #16
 8006c94:	0609      	lsls	r1, r1, #24
 8006c96:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006c9a:	b95a      	cbnz	r2, 8006cb4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c9c:	433b      	orrs	r3, r7
 8006c9e:	6882      	ldr	r2, [r0, #8]
 8006ca0:	4323      	orrs	r3, r4
 8006ca2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006ca6:	4333      	orrs	r3, r6
 8006ca8:	432b      	orrs	r3, r5
 8006caa:	430b      	orrs	r3, r1
 8006cac:	4313      	orrs	r3, r2
 8006cae:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cb4:	6882      	ldr	r2, [r0, #8]
 8006cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cba:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006cbe:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cc0:	ea44 0306 	orr.w	r3, r4, r6
 8006cc4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cc6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cc8:	68c2      	ldr	r2, [r0, #12]
 8006cca:	432b      	orrs	r3, r5
 8006ccc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60c3      	str	r3, [r0, #12]
 8006cd6:	e7eb      	b.n	8006cb0 <FMC_SDRAM_Timing_Init+0x44>

08006cd8 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006cd8:	6902      	ldr	r2, [r0, #16]
{
 8006cda:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006cdc:	e9d1 3400 	ldrd	r3, r4, [r1]
 8006ce0:	0d92      	lsrs	r2, r2, #22
 8006ce2:	4323      	orrs	r3, r4
 8006ce4:	68cc      	ldr	r4, [r1, #12]
 8006ce6:	0592      	lsls	r2, r2, #22
 8006ce8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8006cec:	4313      	orrs	r3, r2
 8006cee:	688a      	ldr	r2, [r1, #8]
 8006cf0:	3a01      	subs	r2, #1
 8006cf2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006cf6:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	bd10      	pop	{r4, pc}

08006cfc <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006cfc:	6943      	ldr	r3, [r0, #20]
 8006cfe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006d02:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006d06:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006d0a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4770      	bx	lr

08006d10 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d10:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d14:	b113      	cbz	r3, 8006d1c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006d16:	f06f 0005 	mvn.w	r0, #5
 8006d1a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d1c:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8006d22:	b912      	cbnz	r2, 8006d2a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d24:	f3ef 8211 	mrs	r2, BASEPRI
 8006d28:	b112      	cbz	r2, 8006d30 <osKernelInitialize+0x20>
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	2a02      	cmp	r2, #2
 8006d2e:	d0f2      	beq.n	8006d16 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	b910      	cbnz	r0, 8006d3a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d38:	4770      	bx	lr
    } else {
      stat = osError;
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006d3e:	4770      	bx	lr
 8006d40:	20002284 	.word	0x20002284

08006d44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d44:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d46:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d4a:	b113      	cbz	r3, 8006d52 <osKernelStart+0xe>
    stat = osErrorISR;
 8006d4c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006d50:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d52:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006d58:	b912      	cbnz	r2, 8006d60 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d5e:	b112      	cbz	r2, 8006d66 <osKernelStart+0x22>
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	2a02      	cmp	r2, #2
 8006d64:	d0f2      	beq.n	8006d4c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	2a01      	cmp	r2, #1
 8006d6a:	d105      	bne.n	8006d78 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006d70:	f001 fe8c 	bl	8008a8c <vTaskStartScheduler>
      stat = osOK;
 8006d74:	2000      	movs	r0, #0
 8006d76:	e7eb      	b.n	8006d50 <osKernelStart+0xc>
      stat = osError;
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006d7c:	e7e8      	b.n	8006d50 <osKernelStart+0xc>
 8006d7e:	bf00      	nop
 8006d80:	20002284 	.word	0x20002284

08006d84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d86:	4614      	mov	r4, r2
 8006d88:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d8a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d8c:	460b      	mov	r3, r1
  hTask = NULL;
 8006d8e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d90:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006d94:	bb22      	cbnz	r2, 8006de0 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d96:	f3ef 8210 	mrs	r2, PRIMASK
 8006d9a:	b912      	cbnz	r2, 8006da2 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006da0:	b11a      	cbz	r2, 8006daa <osThreadNew+0x26>
 8006da2:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <osThreadNew+0xa8>)
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	2a02      	cmp	r2, #2
 8006da8:	d01a      	beq.n	8006de0 <osThreadNew+0x5c>
 8006daa:	b1c8      	cbz	r0, 8006de0 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	d02f      	beq.n	8006e10 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006db0:	69a5      	ldr	r5, [r4, #24]
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	bf08      	it	eq
 8006db6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006db8:	1e6a      	subs	r2, r5, #1
 8006dba:	46ac      	mov	ip, r5
 8006dbc:	2a37      	cmp	r2, #55	; 0x37
 8006dbe:	d82b      	bhi.n	8006e18 <osThreadNew+0x94>
 8006dc0:	6862      	ldr	r2, [r4, #4]
 8006dc2:	07d2      	lsls	r2, r2, #31
 8006dc4:	d428      	bmi.n	8006e18 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006dc6:	6966      	ldr	r6, [r4, #20]
 8006dc8:	b16e      	cbz	r6, 8006de6 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dca:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8006dcc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dce:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8006dd2:	b157      	cbz	r7, 8006dea <osThreadNew+0x66>
 8006dd4:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 8006dd8:	d902      	bls.n	8006de0 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dda:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ddc:	b104      	cbz	r4, 8006de0 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dde:	b9ee      	cbnz	r6, 8006e1c <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006de0:	9805      	ldr	r0, [sp, #20]
}
 8006de2:	b007      	add	sp, #28
 8006de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	e7f0      	b.n	8006dcc <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006dea:	f1be 0f00 	cmp.w	lr, #0
 8006dee:	d1f7      	bne.n	8006de0 <osThreadNew+0x5c>
      if (mem == 0) {
 8006df0:	6924      	ldr	r4, [r4, #16]
 8006df2:	2c00      	cmp	r4, #0
 8006df4:	d1f4      	bne.n	8006de0 <osThreadNew+0x5c>
 8006df6:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006df8:	a905      	add	r1, sp, #20
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	e9cd c100 	strd	ip, r1, [sp]
 8006e00:	4621      	mov	r1, r4
 8006e02:	f001 fcb7 	bl	8008774 <xTaskCreate>
 8006e06:	2801      	cmp	r0, #1
          hTask = NULL;
 8006e08:	bf1c      	itt	ne
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	9305      	strne	r3, [sp, #20]
 8006e0e:	e7e7      	b.n	8006de0 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8006e10:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006e14:	2280      	movs	r2, #128	; 0x80
 8006e16:	e7ef      	b.n	8006df8 <osThreadNew+0x74>
        return (NULL);
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e7e2      	b.n	8006de2 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e1c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006e20:	9500      	str	r5, [sp, #0]
 8006e22:	f001 fc69 	bl	80086f8 <xTaskCreateStatic>
 8006e26:	9005      	str	r0, [sp, #20]
 8006e28:	e7da      	b.n	8006de0 <osThreadNew+0x5c>
 8006e2a:	bf00      	nop
 8006e2c:	20002284 	.word	0x20002284

08006e30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006e30:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e32:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e36:	b113      	cbz	r3, 8006e3e <osDelay+0xe>
    stat = osErrorISR;
 8006e38:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006e3c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006e42:	b913      	cbnz	r3, 8006e4a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e44:	f3ef 8311 	mrs	r3, BASEPRI
 8006e48:	b11b      	cbz	r3, 8006e52 <osDelay+0x22>
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <osDelay+0x30>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d0f2      	beq.n	8006e38 <osDelay+0x8>
    if (ticks != 0U) {
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0f2      	beq.n	8006e3c <osDelay+0xc>
      vTaskDelay(ticks);
 8006e56:	f001 fdd7 	bl	8008a08 <vTaskDelay>
    stat = osOK;
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7ee      	b.n	8006e3c <osDelay+0xc>
 8006e5e:	bf00      	nop
 8006e60:	20002284 	.word	0x20002284

08006e64 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e68:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006e6c:	b116      	cbz	r6, 8006e74 <osMutexNew+0x10>
  hMutex = NULL;
 8006e6e:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006e70:	4620      	mov	r0, r4
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e74:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8006e78:	b912      	cbnz	r2, 8006e80 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7e:	b11a      	cbz	r2, 8006e88 <osMutexNew+0x24>
 8006e80:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <osMutexNew+0x80>)
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	2a02      	cmp	r2, #2
 8006e86:	d0f2      	beq.n	8006e6e <osMutexNew+0xa>
    if (attr != NULL) {
 8006e88:	b115      	cbz	r5, 8006e90 <osMutexNew+0x2c>
      type = attr->attr_bits;
 8006e8a:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8006e8c:	0733      	lsls	r3, r6, #28
 8006e8e:	d4ee      	bmi.n	8006e6e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e90:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8006e94:	b17d      	cbz	r5, 8006eb6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e96:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8006e9a:	b151      	cbz	r1, 8006eb2 <osMutexNew+0x4e>
 8006e9c:	2b4f      	cmp	r3, #79	; 0x4f
 8006e9e:	d9e6      	bls.n	8006e6e <osMutexNew+0xa>
        if (rmtx != 0U) {
 8006ea0:	b1de      	cbz	r6, 8006eda <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006ea2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006ea4:	f000 ff4a 	bl	8007d3c <xQueueCreateMutexStatic>
 8006ea8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d0df      	beq.n	8006e6e <osMutexNew+0xa>
          name = attr->name;
 8006eae:	682d      	ldr	r5, [r5, #0]
 8006eb0:	e00a      	b.n	8006ec8 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1db      	bne.n	8006e6e <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006eb6:	b196      	cbz	r6, 8006ede <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006eb8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8006eba:	f000 ff74 	bl	8007da6 <xQueueCreateMutex>
 8006ebe:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d0d4      	beq.n	8006e6e <osMutexNew+0xa>
        if (attr != NULL) {
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	d1f2      	bne.n	8006eae <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f001 fa36 	bl	800833c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	d0cd      	beq.n	8006e70 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ed4:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8006ed8:	e7ca      	b.n	8006e70 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006eda:	2001      	movs	r0, #1
 8006edc:	e7e2      	b.n	8006ea4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7eb      	b.n	8006eba <osMutexNew+0x56>
 8006ee2:	bf00      	nop
 8006ee4:	20002284 	.word	0x20002284

08006ee8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006ee8:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006eea:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006eee:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006ef0:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006ef4:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef6:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006efa:	b112      	cbz	r2, 8006f02 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006efc:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006f00:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f02:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006f06:	b912      	cbnz	r2, 8006f0e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f08:	f3ef 8211 	mrs	r2, BASEPRI
 8006f0c:	b11a      	cbz	r2, 8006f16 <osMutexAcquire+0x2e>
 8006f0e:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <osMutexAcquire+0x5c>)
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	2a02      	cmp	r2, #2
 8006f14:	d0f2      	beq.n	8006efc <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006f16:	b188      	cbz	r0, 8006f3c <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006f18:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006f1a:	b163      	cbz	r3, 8006f36 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006f1c:	f001 f995 	bl	800824a <xQueueTakeMutexRecursive>
 8006f20:	2801      	cmp	r0, #1
 8006f22:	d101      	bne.n	8006f28 <osMutexAcquire+0x40>
  stat = osOK;
 8006f24:	2000      	movs	r0, #0
 8006f26:	e7eb      	b.n	8006f00 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006f28:	2c00      	cmp	r4, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	f06f 0001 	mvnne.w	r0, #1
 8006f30:	f06f 0002 	mvneq.w	r0, #2
 8006f34:	e7e4      	b.n	8006f00 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006f36:	f001 f8bd 	bl	80080b4 <xQueueSemaphoreTake>
 8006f3a:	e7f1      	b.n	8006f20 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006f3c:	f06f 0003 	mvn.w	r0, #3
 8006f40:	e7de      	b.n	8006f00 <osMutexAcquire+0x18>
 8006f42:	bf00      	nop
 8006f44:	20002284 	.word	0x20002284

08006f48 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006f48:	b508      	push	{r3, lr}
 8006f4a:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f4c:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006f50:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f54:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006f58:	b112      	cbz	r2, 8006f60 <osMutexRelease+0x18>
    stat = osErrorISR;
 8006f5a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006f5e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f60:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006f64:	b912      	cbnz	r2, 8006f6c <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f66:	f3ef 8211 	mrs	r2, BASEPRI
 8006f6a:	b11a      	cbz	r2, 8006f74 <osMutexRelease+0x2c>
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <osMutexRelease+0x50>)
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	2a02      	cmp	r2, #2
 8006f72:	d0f2      	beq.n	8006f5a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006f74:	b168      	cbz	r0, 8006f92 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006f76:	b13b      	cbz	r3, 8006f88 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f78:	f000 fef5 	bl	8007d66 <xQueueGiveMutexRecursive>
 8006f7c:	2801      	cmp	r0, #1
  stat = osOK;
 8006f7e:	bf0c      	ite	eq
 8006f80:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006f82:	f06f 0002 	mvnne.w	r0, #2
 8006f86:	e7ea      	b.n	8006f5e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f000 fe1b 	bl	8007bc6 <xQueueGenericSend>
 8006f90:	e7f4      	b.n	8006f7c <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006f92:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006f96:	e7e2      	b.n	8006f5e <osMutexRelease+0x16>
 8006f98:	20002284 	.word	0x20002284

08006f9c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f9e:	460e      	mov	r6, r1
 8006fa0:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006fa6:	b11b      	cbz	r3, 8006fb0 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006fa8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006faa:	4620      	mov	r0, r4
 8006fac:	b002      	add	sp, #8
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006fb4:	b913      	cbnz	r3, 8006fbc <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fba:	b11b      	cbz	r3, 8006fc4 <osSemaphoreNew+0x28>
 8006fbc:	4b21      	ldr	r3, [pc, #132]	; (8007044 <osSemaphoreNew+0xa8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d0f1      	beq.n	8006fa8 <osSemaphoreNew+0xc>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d0ef      	beq.n	8006fa8 <osSemaphoreNew+0xc>
 8006fc8:	42b0      	cmp	r0, r6
 8006fca:	d3ed      	bcc.n	8006fa8 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8006fcc:	b1ed      	cbz	r5, 800700a <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006fce:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006fd2:	b1c3      	cbz	r3, 8007006 <osSemaphoreNew+0x6a>
 8006fd4:	2a4f      	cmp	r2, #79	; 0x4f
 8006fd6:	d9e7      	bls.n	8006fa8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006fd8:	2801      	cmp	r0, #1
 8006fda:	d129      	bne.n	8007030 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006fdc:	2203      	movs	r2, #3
 8006fde:	9200      	str	r2, [sp, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	f000 fd6a 	bl	8007abc <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8006fe8:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0dc      	beq.n	8006fa8 <osSemaphoreNew+0xc>
 8006fee:	b1ce      	cbz	r6, 8007024 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f000 fde6 	bl	8007bc6 <xQueueGenericSend>
 8006ffa:	2801      	cmp	r0, #1
 8006ffc:	d012      	beq.n	8007024 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 f9c2 	bl	8008388 <vQueueDelete>
 8007004:	e7d0      	b.n	8006fa8 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007006:	2a00      	cmp	r2, #0
 8007008:	d1ce      	bne.n	8006fa8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800700a:	2801      	cmp	r0, #1
 800700c:	d104      	bne.n	8007018 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800700e:	2203      	movs	r2, #3
 8007010:	2100      	movs	r1, #0
 8007012:	f000 fd67 	bl	8007ae4 <xQueueGenericCreate>
 8007016:	e7e7      	b.n	8006fe8 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007018:	4631      	mov	r1, r6
 800701a:	f000 fdb2 	bl	8007b82 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800701e:	4604      	mov	r4, r0
 8007020:	2800      	cmp	r0, #0
 8007022:	d0c1      	beq.n	8006fa8 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007024:	b95d      	cbnz	r5, 800703e <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8007026:	4629      	mov	r1, r5
 8007028:	4620      	mov	r0, r4
 800702a:	f001 f987 	bl	800833c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800702e:	e7bc      	b.n	8006faa <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007030:	461a      	mov	r2, r3
 8007032:	4631      	mov	r1, r6
 8007034:	f000 fd7f 	bl	8007b36 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007038:	4604      	mov	r4, r0
 800703a:	2800      	cmp	r0, #0
 800703c:	d0b4      	beq.n	8006fa8 <osSemaphoreNew+0xc>
          name = attr->name;
 800703e:	682d      	ldr	r5, [r5, #0]
 8007040:	e7f1      	b.n	8007026 <osSemaphoreNew+0x8a>
 8007042:	bf00      	nop
 8007044:	20002284 	.word	0x20002284

08007048 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007048:	b513      	push	{r0, r1, r4, lr}
 800704a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800704c:	b918      	cbnz	r0, 8007056 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800704e:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007052:	b002      	add	sp, #8
 8007054:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007056:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800705a:	b163      	cbz	r3, 8007076 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1f6      	bne.n	800704e <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007060:	aa01      	add	r2, sp, #4
 8007062:	4621      	mov	r1, r4
      yield = pdFALSE;
 8007064:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007066:	f001 f914 	bl	8008292 <xQueueReceiveFromISR>
 800706a:	2801      	cmp	r0, #1
 800706c:	d113      	bne.n	8007096 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	b9a3      	cbnz	r3, 800709c <osSemaphoreAcquire+0x54>
  stat = osOK;
 8007072:	2000      	movs	r0, #0
 8007074:	e7ed      	b.n	8007052 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007076:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800707a:	b913      	cbnz	r3, 8007082 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800707c:	f3ef 8311 	mrs	r3, BASEPRI
 8007080:	b11b      	cbz	r3, 800708a <osSemaphoreAcquire+0x42>
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <osSemaphoreAcquire+0x70>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d0e8      	beq.n	800705c <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800708a:	4621      	mov	r1, r4
 800708c:	f001 f812 	bl	80080b4 <xQueueSemaphoreTake>
 8007090:	2801      	cmp	r0, #1
 8007092:	d0ee      	beq.n	8007072 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8007094:	b96c      	cbnz	r4, 80070b2 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8007096:	f06f 0002 	mvn.w	r0, #2
 800709a:	e7da      	b.n	8007052 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800709c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e7df      	b.n	8007072 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 80070b2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80070b6:	e7cc      	b.n	8007052 <osSemaphoreAcquire+0xa>
 80070b8:	20002284 	.word	0x20002284

080070bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80070bc:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80070be:	b370      	cbz	r0, 800711e <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80070c4:	b14b      	cbz	r3, 80070da <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 80070c6:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80070c8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80070ca:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80070cc:	f000 fef1 	bl	8007eb2 <xQueueGiveFromISR>
 80070d0:	2801      	cmp	r0, #1
 80070d2:	d014      	beq.n	80070fe <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80070d4:	f06f 0002 	mvn.w	r0, #2
 80070d8:	e014      	b.n	8007104 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80070de:	b913      	cbnz	r3, 80070e6 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e0:	f3ef 8311 	mrs	r3, BASEPRI
 80070e4:	b11b      	cbz	r3, 80070ee <osSemaphoreRelease+0x32>
 80070e6:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <osSemaphoreRelease+0x68>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d0eb      	beq.n	80070c6 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070ee:	2300      	movs	r3, #0
 80070f0:	461a      	mov	r2, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	f000 fd67 	bl	8007bc6 <xQueueGenericSend>
 80070f8:	2801      	cmp	r0, #1
 80070fa:	d002      	beq.n	8007102 <osSemaphoreRelease+0x46>
 80070fc:	e7ea      	b.n	80070d4 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	b913      	cbnz	r3, 8007108 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8007102:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007104:	b002      	add	sp, #8
 8007106:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800710c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007110:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	e7f1      	b.n	8007102 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800711e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007122:	e7ef      	b.n	8007104 <osSemaphoreRelease+0x48>
 8007124:	20002284 	.word	0x20002284

08007128 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007128:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800712a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800712c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007130:	b11b      	cbz	r3, 800713a <osMessageQueueNew+0x12>
  hQueue = NULL;
 8007132:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007134:	4628      	mov	r0, r5
 8007136:	b002      	add	sp, #8
 8007138:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800713e:	b913      	cbnz	r3, 8007146 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007140:	f3ef 8311 	mrs	r3, BASEPRI
 8007144:	b11b      	cbz	r3, 800714e <osMessageQueueNew+0x26>
 8007146:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <osMessageQueueNew+0x88>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d0f1      	beq.n	8007132 <osMessageQueueNew+0xa>
 800714e:	2800      	cmp	r0, #0
 8007150:	d0ef      	beq.n	8007132 <osMessageQueueNew+0xa>
 8007152:	2900      	cmp	r1, #0
 8007154:	d0ed      	beq.n	8007132 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8007156:	b1ec      	cbz	r4, 8007194 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007158:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800715c:	b193      	cbz	r3, 8007184 <osMessageQueueNew+0x5c>
 800715e:	2a4f      	cmp	r2, #79	; 0x4f
 8007160:	d9e7      	bls.n	8007132 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007162:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007164:	2a00      	cmp	r2, #0
 8007166:	d0e4      	beq.n	8007132 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007168:	fb01 f500 	mul.w	r5, r1, r0
 800716c:	6966      	ldr	r6, [r4, #20]
 800716e:	42ae      	cmp	r6, r5
 8007170:	d3df      	bcc.n	8007132 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007172:	2500      	movs	r5, #0
 8007174:	9500      	str	r5, [sp, #0]
 8007176:	f000 fca1 	bl	8007abc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800717a:	4605      	mov	r5, r0
 800717c:	2800      	cmp	r0, #0
 800717e:	d0d8      	beq.n	8007132 <osMessageQueueNew+0xa>
        name = attr->name;
 8007180:	6824      	ldr	r4, [r4, #0]
 8007182:	e00f      	b.n	80071a4 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007184:	2a00      	cmp	r2, #0
 8007186:	d1d4      	bne.n	8007132 <osMessageQueueNew+0xa>
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1d1      	bne.n	8007132 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800718e:	6963      	ldr	r3, [r4, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ce      	bne.n	8007132 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007194:	2200      	movs	r2, #0
 8007196:	f000 fca5 	bl	8007ae4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800719a:	4605      	mov	r5, r0
 800719c:	2800      	cmp	r0, #0
 800719e:	d0c8      	beq.n	8007132 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	d1ed      	bne.n	8007180 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f001 f8c8 	bl	800833c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80071ac:	e7c2      	b.n	8007134 <osMessageQueueNew+0xc>
 80071ae:	bf00      	nop
 80071b0:	20002284 	.word	0x20002284

080071b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80071b4:	b513      	push	{r0, r1, r4, lr}
 80071b6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80071bc:	b123      	cbz	r3, 80071c8 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071be:	b9d8      	cbnz	r0, 80071f8 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 80071c0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80071c4:	b002      	add	sp, #8
 80071c6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80071cc:	b913      	cbnz	r3, 80071d4 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071ce:	f3ef 8311 	mrs	r3, BASEPRI
 80071d2:	b11b      	cbz	r3, 80071dc <osMessageQueuePut+0x28>
 80071d4:	4b17      	ldr	r3, [pc, #92]	; (8007234 <osMessageQueuePut+0x80>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d0f0      	beq.n	80071be <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80071dc:	2800      	cmp	r0, #0
 80071de:	d0ef      	beq.n	80071c0 <osMessageQueuePut+0xc>
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d0ed      	beq.n	80071c0 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80071e4:	2300      	movs	r3, #0
 80071e6:	4622      	mov	r2, r4
 80071e8:	f000 fced 	bl	8007bc6 <xQueueGenericSend>
 80071ec:	2801      	cmp	r0, #1
 80071ee:	d010      	beq.n	8007212 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 80071f0:	b9e4      	cbnz	r4, 800722c <osMessageQueuePut+0x78>
          stat = osErrorResource;
 80071f2:	f06f 0002 	mvn.w	r0, #2
 80071f6:	e7e5      	b.n	80071c4 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071f8:	2900      	cmp	r1, #0
 80071fa:	d0e1      	beq.n	80071c0 <osMessageQueuePut+0xc>
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	d1df      	bne.n	80071c0 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007200:	4623      	mov	r3, r4
 8007202:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007204:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007206:	f000 fdeb 	bl	8007de0 <xQueueGenericSendFromISR>
 800720a:	2801      	cmp	r0, #1
 800720c:	d1f1      	bne.n	80071f2 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	b90b      	cbnz	r3, 8007216 <osMessageQueuePut+0x62>
  stat = osOK;
 8007212:	2000      	movs	r0, #0
 8007214:	e7d6      	b.n	80071c4 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007216:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	e7f2      	b.n	8007212 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800722c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007230:	e7c8      	b.n	80071c4 <osMessageQueuePut+0x10>
 8007232:	bf00      	nop
 8007234:	20002284 	.word	0x20002284

08007238 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007238:	b513      	push	{r0, r1, r4, lr}
 800723a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007240:	b123      	cbz	r3, 800724c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007242:	b9d0      	cbnz	r0, 800727a <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8007244:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007248:	b002      	add	sp, #8
 800724a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007250:	b913      	cbnz	r3, 8007258 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007252:	f3ef 8311 	mrs	r3, BASEPRI
 8007256:	b11b      	cbz	r3, 8007260 <osMessageQueueGet+0x28>
 8007258:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <osMessageQueueGet+0x7c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d0f0      	beq.n	8007242 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007260:	2800      	cmp	r0, #0
 8007262:	d0ef      	beq.n	8007244 <osMessageQueueGet+0xc>
 8007264:	2900      	cmp	r1, #0
 8007266:	d0ed      	beq.n	8007244 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007268:	4622      	mov	r2, r4
 800726a:	f000 fe7e 	bl	8007f6a <xQueueReceive>
 800726e:	2801      	cmp	r0, #1
 8007270:	d00f      	beq.n	8007292 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8007272:	b9dc      	cbnz	r4, 80072ac <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8007274:	f06f 0002 	mvn.w	r0, #2
 8007278:	e7e6      	b.n	8007248 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800727a:	2900      	cmp	r1, #0
 800727c:	d0e2      	beq.n	8007244 <osMessageQueueGet+0xc>
 800727e:	2c00      	cmp	r4, #0
 8007280:	d1e0      	bne.n	8007244 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007282:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007284:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007286:	f001 f804 	bl	8008292 <xQueueReceiveFromISR>
 800728a:	2801      	cmp	r0, #1
 800728c:	d1f2      	bne.n	8007274 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	b90b      	cbnz	r3, 8007296 <osMessageQueueGet+0x5e>
  stat = osOK;
 8007292:	2000      	movs	r0, #0
 8007294:	e7d8      	b.n	8007248 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	e7f2      	b.n	8007292 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80072ac:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80072b0:	e7ca      	b.n	8007248 <osMessageQueueGet+0x10>
 80072b2:	bf00      	nop
 80072b4:	20002284 	.word	0x20002284

080072b8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072b8:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <vApplicationGetIdleTaskMemory+0x10>)
 80072ba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <vApplicationGetIdleTaskMemory+0x14>)
 80072be:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	200021c4 	.word	0x200021c4
 80072cc:	20001fc4 	.word	0x20001fc4

080072d0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072d0:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <vApplicationGetTimerTaskMemory+0x10>)
 80072d2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072d4:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <vApplicationGetTimerTaskMemory+0x14>)
 80072d6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072dc:	6013      	str	r3, [r2, #0]
}
 80072de:	4770      	bx	lr
 80072e0:	20002688 	.word	0x20002688
 80072e4:	20002288 	.word	0x20002288

080072e8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072e8:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <prvInsertBlockIntoFreeList+0x40>)
{
 80072ea:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072ec:	461a      	mov	r2, r3
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4283      	cmp	r3, r0
 80072f2:	d3fb      	bcc.n	80072ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072f4:	6854      	ldr	r4, [r2, #4]
 80072f6:	1911      	adds	r1, r2, r4
 80072f8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072fa:	bf01      	itttt	eq
 80072fc:	6841      	ldreq	r1, [r0, #4]
 80072fe:	4610      	moveq	r0, r2
 8007300:	1909      	addeq	r1, r1, r4
 8007302:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007304:	6844      	ldr	r4, [r0, #4]
 8007306:	1901      	adds	r1, r0, r4
 8007308:	428b      	cmp	r3, r1
 800730a:	d107      	bne.n	800731c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730c:	4907      	ldr	r1, [pc, #28]	; (800732c <prvInsertBlockIntoFreeList+0x44>)
 800730e:	6809      	ldr	r1, [r1, #0]
 8007310:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007312:	bf1f      	itttt	ne
 8007314:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007316:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007318:	1909      	addne	r1, r1, r4
 800731a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800731c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800731e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007320:	bf18      	it	ne
 8007322:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	20014c50 	.word	0x20014c50
 800732c:	20002748 	.word	0x20002748

08007330 <pvPortMalloc>:
{
 8007330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007334:	4f41      	ldr	r7, [pc, #260]	; (800743c <pvPortMalloc+0x10c>)
{
 8007336:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007338:	f001 fa4a 	bl	80087d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800733c:	4840      	ldr	r0, [pc, #256]	; (8007440 <pvPortMalloc+0x110>)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	b9f3      	cbnz	r3, 8007380 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8007342:	4940      	ldr	r1, [pc, #256]	; (8007444 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007344:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007346:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007348:	4d3f      	ldr	r5, [pc, #252]	; (8007448 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800734a:	bf1b      	ittet	ne
 800734c:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800734e:	4a3f      	ldrne	r2, [pc, #252]	; (800744c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007350:	4a3f      	ldreq	r2, [pc, #252]	; (8007450 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007352:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007356:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007358:	bf18      	it	ne
 800735a:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800735c:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800735e:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8007360:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007362:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007366:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800736a:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800736c:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800736e:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007372:	4a38      	ldr	r2, [pc, #224]	; (8007454 <pvPortMalloc+0x124>)
 8007374:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007376:	4a38      	ldr	r2, [pc, #224]	; (8007458 <pvPortMalloc+0x128>)
 8007378:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800737a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800737e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007380:	f8d0 8000 	ldr.w	r8, [r0]
 8007384:	ea18 0f04 	tst.w	r8, r4
 8007388:	d152      	bne.n	8007430 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800738a:	2c00      	cmp	r4, #0
 800738c:	d041      	beq.n	8007412 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800738e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007392:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007394:	bf1c      	itt	ne
 8007396:	f023 0307 	bicne.w	r3, r3, #7
 800739a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800739c:	2b00      	cmp	r3, #0
 800739e:	d047      	beq.n	8007430 <pvPortMalloc+0x100>
 80073a0:	4c2d      	ldr	r4, [pc, #180]	; (8007458 <pvPortMalloc+0x128>)
 80073a2:	6826      	ldr	r6, [r4, #0]
 80073a4:	429e      	cmp	r6, r3
 80073a6:	d343      	bcc.n	8007430 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 80073a8:	4a27      	ldr	r2, [pc, #156]	; (8007448 <pvPortMalloc+0x118>)
 80073aa:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ac:	6869      	ldr	r1, [r5, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	d201      	bcs.n	80073b6 <pvPortMalloc+0x86>
 80073b2:	6828      	ldr	r0, [r5, #0]
 80073b4:	b9b0      	cbnz	r0, 80073e4 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 80073b6:	6838      	ldr	r0, [r7, #0]
 80073b8:	42a8      	cmp	r0, r5
 80073ba:	d039      	beq.n	8007430 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073bc:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073be:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c0:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073c2:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073c4:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073c6:	d914      	bls.n	80073f2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073c8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ca:	0742      	lsls	r2, r0, #29
 80073cc:	d00d      	beq.n	80073ea <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	e7fe      	b.n	80073e2 <pvPortMalloc+0xb2>
 80073e4:	462a      	mov	r2, r5
 80073e6:	4605      	mov	r5, r0
 80073e8:	e7e0      	b.n	80073ac <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073ea:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ec:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ee:	f7ff ff7b 	bl	80072e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073f4:	4917      	ldr	r1, [pc, #92]	; (8007454 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073f8:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073fe:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007400:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007404:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007406:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007408:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800740c:	bf38      	it	cc
 800740e:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007410:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007412:	f001 fa83 	bl	800891c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007416:	0763      	lsls	r3, r4, #29
 8007418:	d00c      	beq.n	8007434 <pvPortMalloc+0x104>
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	b672      	cpsid	i
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	b662      	cpsie	i
 800742e:	e7fe      	b.n	800742e <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8007430:	2400      	movs	r4, #0
 8007432:	e7ee      	b.n	8007412 <pvPortMalloc+0xe2>
}
 8007434:	4620      	mov	r0, r4
 8007436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743a:	bf00      	nop
 800743c:	20002748 	.word	0x20002748
 8007440:	20014c44 	.word	0x20014c44
 8007444:	2000274c 	.word	0x2000274c
 8007448:	20014c50 	.word	0x20014c50
 800744c:	20014c44 	.word	0x20014c44
 8007450:	000124f8 	.word	0x000124f8
 8007454:	20014c4c 	.word	0x20014c4c
 8007458:	20014c48 	.word	0x20014c48

0800745c <vPortFree>:
{
 800745c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800745e:	4604      	mov	r4, r0
 8007460:	2800      	cmp	r0, #0
 8007462:	d032      	beq.n	80074ca <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007464:	4a19      	ldr	r2, [pc, #100]	; (80074cc <vPortFree+0x70>)
 8007466:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	4213      	tst	r3, r2
 800746e:	d10a      	bne.n	8007486 <vPortFree+0x2a>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	b672      	cpsid	i
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	b662      	cpsie	i
 8007484:	e7fe      	b.n	8007484 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007486:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800748a:	b151      	cbz	r1, 80074a2 <vPortFree+0x46>
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	b672      	cpsid	i
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	b662      	cpsie	i
 80074a0:	e7fe      	b.n	80074a0 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074a2:	ea23 0302 	bic.w	r3, r3, r2
 80074a6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80074aa:	f001 f991 	bl	80087d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <vPortFree+0x74>)
 80074b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074b4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	440b      	add	r3, r1
 80074bc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074be:	f7ff ff13 	bl	80072e8 <prvInsertBlockIntoFreeList>
}
 80074c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80074c6:	f001 ba29 	b.w	800891c <xTaskResumeAll>
}
 80074ca:	bd10      	pop	{r4, pc}
 80074cc:	20014c44 	.word	0x20014c44
 80074d0:	20014c48 	.word	0x20014c48

080074d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074dc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074de:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074e8:	4770      	bx	lr

080074ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074ee:	4770      	bx	lr

080074f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80074f0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074f2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80074f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80074fe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007500:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007502:	3301      	adds	r3, #1
 8007504:	6003      	str	r3, [r0, #0]
}
 8007506:	4770      	bx	lr

08007508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007508:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800750a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800750c:	1c63      	adds	r3, r4, #1
 800750e:	d10a      	bne.n	8007526 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007510:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007516:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007518:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800751a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800751c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800751e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007520:	3301      	adds	r3, #1
 8007522:	6003      	str	r3, [r0, #0]
}
 8007524:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007526:	f100 0208 	add.w	r2, r0, #8
 800752a:	4613      	mov	r3, r2
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	6815      	ldr	r5, [r2, #0]
 8007530:	42a5      	cmp	r5, r4
 8007532:	d9fa      	bls.n	800752a <vListInsert+0x22>
 8007534:	e7ed      	b.n	8007512 <vListInsert+0xa>

08007536 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007536:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007538:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800753c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800753e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007544:	bf08      	it	eq
 8007546:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007548:	2200      	movs	r2, #0
 800754a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	3a01      	subs	r2, #1
 8007550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007552:	6818      	ldr	r0, [r3, #0]
}
 8007554:	4770      	bx	lr
	...

08007558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007558:	4808      	ldr	r0, [pc, #32]	; (800757c <prvPortStartFirstTask+0x24>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8814 	msr	CONTROL, r0
 800756a:	b662      	cpsie	i
 800756c:	b661      	cpsie	f
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	df00      	svc	0
 8007578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800757a:	0000      	.short	0x0000
 800757c:	e000ed08 	.word	0xe000ed08

08007580 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007580:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007590 <vPortEnableVFP+0x10>
 8007584:	6801      	ldr	r1, [r0, #0]
 8007586:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800758a:	6001      	str	r1, [r0, #0]
 800758c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800758e:	0000      	.short	0x0000
 8007590:	e000ed88 	.word	0xe000ed88

08007594 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007594:	2300      	movs	r3, #0
{
 8007596:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007598:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <prvTaskExitError+0x44>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	d00a      	beq.n	80075b8 <prvTaskExitError+0x24>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	b672      	cpsid	i
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	b662      	cpsie	i
 80075b6:	e7fe      	b.n	80075b6 <prvTaskExitError+0x22>
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	b672      	cpsid	i
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	b662      	cpsie	i
	while( ulDummy == 0 )
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0fc      	beq.n	80075cc <prvTaskExitError+0x38>
}
 80075d2:	b002      	add	sp, #8
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000040 	.word	0x20000040

080075dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075e4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80075e8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ea:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075ee:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075f2:	f06f 0302 	mvn.w	r3, #2
 80075f6:	6203      	str	r3, [r0, #32]
}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	08007595 	.word	0x08007595

08007600 <SVC_Handler>:
	__asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	4770      	bx	lr
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst2>:
 8007620:	20014ca0 	.word	0x20014ca0

08007624 <vPortEnterCritical>:
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	b672      	cpsid	i
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	b662      	cpsie	i
	uxCriticalNesting++;
 8007638:	4a0b      	ldr	r2, [pc, #44]	; (8007668 <vPortEnterCritical+0x44>)
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800763e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007642:	d110      	bne.n	8007666 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007644:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007648:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800764c:	b2db      	uxtb	r3, r3
 800764e:	b153      	cbz	r3, 8007666 <vPortEnterCritical+0x42>
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	b672      	cpsid	i
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	b662      	cpsie	i
 8007664:	e7fe      	b.n	8007664 <vPortEnterCritical+0x40>
}
 8007666:	4770      	bx	lr
 8007668:	20000040 	.word	0x20000040

0800766c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800766c:	4a09      	ldr	r2, [pc, #36]	; (8007694 <vPortExitCritical+0x28>)
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	b953      	cbnz	r3, 8007688 <vPortExitCritical+0x1c>
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	b672      	cpsid	i
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	b662      	cpsie	i
 8007686:	e7fe      	b.n	8007686 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007688:	3b01      	subs	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800768c:	b90b      	cbnz	r3, 8007692 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800768e:	f383 8811 	msr	BASEPRI, r3
}
 8007692:	4770      	bx	lr
 8007694:	20000040 	.word	0x20000040
	...

080076a0 <PendSV_Handler>:
	__asm volatile
 80076a0:	f3ef 8009 	mrs	r0, PSP
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <pxCurrentTCBConst>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f01e 0f10 	tst.w	lr, #16
 80076b0:	bf08      	it	eq
 80076b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f380 8811 	msr	BASEPRI, r0
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	f001 fa32 	bl	8008b3c <vTaskSwitchContext>
 80076d8:	f04f 0000 	mov.w	r0, #0
 80076dc:	f380 8811 	msr	BASEPRI, r0
 80076e0:	bc09      	pop	{r0, r3}
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	6808      	ldr	r0, [r1, #0]
 80076e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	f01e 0f10 	tst.w	lr, #16
 80076ee:	bf08      	it	eq
 80076f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076f4:	f380 8809 	msr	PSP, r0
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop

08007700 <pxCurrentTCBConst>:
 8007700:	20014ca0 	.word	0x20014ca0

08007704 <SysTick_Handler>:
{
 8007704:	b508      	push	{r3, lr}
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800771a:	f001 f867 	bl	80087ec <xTaskIncrementTick>
 800771e:	b128      	cbz	r0, 800772c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007720:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800772c:	2300      	movs	r3, #0
 800772e:	f383 8811 	msr	BASEPRI, r3
}
 8007732:	bd08      	pop	{r3, pc}

08007734 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007734:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007738:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800773e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007740:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007742:	4b04      	ldr	r3, [pc, #16]	; (8007754 <vPortSetupTimerInterrupt+0x20>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	fbb3 f3f1 	udiv	r3, r3, r1
 800774a:	3b01      	subs	r3, #1
 800774c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774e:	2307      	movs	r3, #7
 8007750:	6113      	str	r3, [r2, #16]
}
 8007752:	4770      	bx	lr
 8007754:	2000000c 	.word	0x2000000c

08007758 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007758:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <xPortStartScheduler+0xbc>)
{
 800775a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800775c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800775e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007768:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800776a:	4a2b      	ldr	r2, [pc, #172]	; (8007818 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007772:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007776:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800777a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800777c:	2307      	movs	r3, #7
 800777e:	4a27      	ldr	r2, [pc, #156]	; (800781c <xPortStartScheduler+0xc4>)
 8007780:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007782:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007786:	1e5c      	subs	r4, r3, #1
 8007788:	0600      	lsls	r0, r0, #24
 800778a:	d40e      	bmi.n	80077aa <xPortStartScheduler+0x52>
 800778c:	b111      	cbz	r1, 8007794 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800778e:	2b03      	cmp	r3, #3
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	d013      	beq.n	80077bc <xPortStartScheduler+0x64>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
 80077a8:	e7fe      	b.n	80077a8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077ae:	2101      	movs	r1, #1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f88d 3003 	strb.w	r3, [sp, #3]
 80077b8:	4623      	mov	r3, r4
 80077ba:	e7e2      	b.n	8007782 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077bc:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077c0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 80077c4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <xPortStartScheduler+0xbc>)
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077d0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80077d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077d8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80077e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80077e8:	f7ff ffa4 	bl	8007734 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <xPortStartScheduler+0xc8>)
 80077ee:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80077f0:	f7ff fec6 	bl	8007580 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077f4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80077f8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077fc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007800:	f7ff feaa 	bl	8007558 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007804:	f001 f99a 	bl	8008b3c <vTaskSwitchContext>
}
 8007808:	4628      	mov	r0, r5
	prvTaskExitError();
 800780a:	f7ff fec3 	bl	8007594 <prvTaskExitError>
}
 800780e:	b003      	add	sp, #12
 8007810:	bd30      	pop	{r4, r5, pc}
 8007812:	bf00      	nop
 8007814:	e000e400 	.word	0xe000e400
 8007818:	20014c58 	.word	0x20014c58
 800781c:	20014c5c 	.word	0x20014c5c
 8007820:	20000040 	.word	0x20000040

08007824 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007824:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007828:	2b0f      	cmp	r3, #15
 800782a:	d910      	bls.n	800784e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <vPortValidateInterruptPriority+0x58>)
 800782e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <vPortValidateInterruptPriority+0x5c>)
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d90a      	bls.n	800784e <vPortValidateInterruptPriority+0x2a>
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	e7fe      	b.n	800784c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800784e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007852:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <vPortValidateInterruptPriority+0x60>)
 8007854:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800785e:	4293      	cmp	r3, r2
 8007860:	d90a      	bls.n	8007878 <vPortValidateInterruptPriority+0x54>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	e7fe      	b.n	8007876 <vPortValidateInterruptPriority+0x52>
	}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e3f0 	.word	0xe000e3f0
 8007880:	20014c58 	.word	0x20014c58
 8007884:	20014c5c 	.word	0x20014c5c

08007888 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007888:	b510      	push	{r4, lr}
 800788a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800788c:	f7ff feca 	bl	8007624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007890:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007892:	f7ff feeb 	bl	800766c <vPortExitCritical>

	return xReturn;
}
 8007896:	fab4 f084 	clz	r0, r4
 800789a:	0940      	lsrs	r0, r0, #5
 800789c:	bd10      	pop	{r4, pc}

0800789e <prvCopyDataToQueue>:
{
 800789e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80078a4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078a8:	b952      	cbnz	r2, 80078c0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078aa:	6807      	ldr	r7, [r0, #0]
 80078ac:	bb47      	cbnz	r7, 8007900 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078ae:	6880      	ldr	r0, [r0, #8]
 80078b0:	f001 fab8 	bl	8008e24 <xTaskPriorityDisinherit>
 80078b4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078b6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078b8:	3601      	adds	r6, #1
}
 80078ba:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078bc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80078c0:	b965      	cbnz	r5, 80078dc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078c2:	6840      	ldr	r0, [r0, #4]
 80078c4:	f021 fcb4 	bl	8029230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80078cc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ce:	68a2      	ldr	r2, [r4, #8]
 80078d0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078d2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078d4:	d3f0      	bcc.n	80078b8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	6063      	str	r3, [r4, #4]
 80078da:	e7ed      	b.n	80078b8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078dc:	68c0      	ldr	r0, [r0, #12]
 80078de:	f021 fca7 	bl	8029230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80078e4:	68e3      	ldr	r3, [r4, #12]
 80078e6:	4251      	negs	r1, r2
 80078e8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078ee:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078f0:	bf3e      	ittt	cc
 80078f2:	68a3      	ldrcc	r3, [r4, #8]
 80078f4:	185b      	addcc	r3, r3, r1
 80078f6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80078f8:	2d02      	cmp	r5, #2
 80078fa:	d101      	bne.n	8007900 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fc:	b116      	cbz	r6, 8007904 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80078fe:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007900:	2500      	movs	r5, #0
 8007902:	e7d9      	b.n	80078b8 <prvCopyDataToQueue+0x1a>
 8007904:	4635      	mov	r5, r6
 8007906:	e7d7      	b.n	80078b8 <prvCopyDataToQueue+0x1a>

08007908 <prvCopyDataFromQueue>:
{
 8007908:	4603      	mov	r3, r0
 800790a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800790c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800790e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007910:	b162      	cbz	r2, 800792c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007912:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007914:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007916:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007918:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800791a:	60dc      	str	r4, [r3, #12]
}
 800791c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007920:	bf24      	itt	cs
 8007922:	6819      	ldrcs	r1, [r3, #0]
 8007924:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007926:	68d9      	ldr	r1, [r3, #12]
 8007928:	f021 bc82 	b.w	8029230 <memcpy>
}
 800792c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007930:	4770      	bx	lr

08007932 <prvUnlockQueue>:
{
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007936:	f7ff fe75 	bl	8007624 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800793a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800793e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007942:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007944:	2d00      	cmp	r5, #0
 8007946:	dc14      	bgt.n	8007972 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007948:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800794a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800794e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007952:	f7ff fe8b 	bl	800766c <vPortExitCritical>
	taskENTER_CRITICAL();
 8007956:	f7ff fe65 	bl	8007624 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800795a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800795e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007960:	2d00      	cmp	r5, #0
 8007962:	dc12      	bgt.n	800798a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007964:	23ff      	movs	r3, #255	; 0xff
 8007966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800796a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800796e:	f7ff be7d 	b.w	800766c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0e7      	beq.n	8007948 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007978:	4630      	mov	r0, r6
 800797a:	f001 f965 	bl	8008c48 <xTaskRemoveFromEventList>
 800797e:	b108      	cbz	r0, 8007984 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007980:	f001 f9f4 	bl	8008d6c <vTaskMissedYield>
			--cTxLock;
 8007984:	3d01      	subs	r5, #1
 8007986:	b26d      	sxtb	r5, r5
 8007988:	e7dc      	b.n	8007944 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0e9      	beq.n	8007964 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007990:	4630      	mov	r0, r6
 8007992:	f001 f959 	bl	8008c48 <xTaskRemoveFromEventList>
 8007996:	b108      	cbz	r0, 800799c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007998:	f001 f9e8 	bl	8008d6c <vTaskMissedYield>
				--cRxLock;
 800799c:	3d01      	subs	r5, #1
 800799e:	b26d      	sxtb	r5, r5
 80079a0:	e7de      	b.n	8007960 <prvUnlockQueue+0x2e>

080079a2 <xQueueGenericReset>:
{
 80079a2:	b538      	push	{r3, r4, r5, lr}
 80079a4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80079a6:	4604      	mov	r4, r0
 80079a8:	b950      	cbnz	r0, 80079c0 <xQueueGenericReset+0x1e>
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	e7fe      	b.n	80079be <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80079c0:	f7ff fe30 	bl	8007624 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079c4:	6822      	ldr	r2, [r4, #0]
 80079c6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ca:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079cc:	434b      	muls	r3, r1
 80079ce:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d0:	1a5b      	subs	r3, r3, r1
 80079d2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079d6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079da:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80079de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80079e6:	b9a5      	cbnz	r5, 8007a12 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	b173      	cbz	r3, 8007a0a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ec:	f104 0010 	add.w	r0, r4, #16
 80079f0:	f001 f92a 	bl	8008c48 <xTaskRemoveFromEventList>
 80079f4:	b148      	cbz	r0, 8007a0a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 80079f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007a0a:	f7ff fe2f 	bl	800766c <vPortExitCritical>
}
 8007a0e:	2001      	movs	r0, #1
 8007a10:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a12:	f104 0010 	add.w	r0, r4, #16
 8007a16:	f7ff fd5d 	bl	80074d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a1e:	f7ff fd59 	bl	80074d4 <vListInitialise>
 8007a22:	e7f2      	b.n	8007a0a <xQueueGenericReset+0x68>

08007a24 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8007a24:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8007a26:	461c      	mov	r4, r3
 8007a28:	b953      	cbnz	r3, 8007a40 <xQueueGenericCreateStatic.part.0+0x1c>
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	b672      	cpsid	i
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	b662      	cpsie	i
 8007a3e:	e7fe      	b.n	8007a3e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a40:	b15a      	cbz	r2, 8007a5a <xQueueGenericCreateStatic.part.0+0x36>
 8007a42:	b9b1      	cbnz	r1, 8007a72 <xQueueGenericCreateStatic.part.0+0x4e>
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	b672      	cpsid	i
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	b662      	cpsie	i
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a5a:	b151      	cbz	r1, 8007a72 <xQueueGenericCreateStatic.part.0+0x4e>
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	e7fe      	b.n	8007a70 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a72:	2350      	movs	r3, #80	; 0x50
 8007a74:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	2b50      	cmp	r3, #80	; 0x50
 8007a7a:	d00a      	beq.n	8007a92 <xQueueGenericCreateStatic.part.0+0x6e>
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	b672      	cpsid	i
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	b662      	cpsie	i
 8007a90:	e7fe      	b.n	8007a90 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a92:	2900      	cmp	r1, #0
 8007a94:	bf08      	it	eq
 8007a96:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a98:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	6022      	str	r2, [r4, #0]
 8007a9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007aa2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7ff ff7a 	bl	80079a2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007aae:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007ab2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007ab4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd10      	pop	{r4, pc}

08007abc <xQueueGenericCreateStatic>:
	{
 8007abc:	b410      	push	{r4}
 8007abe:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ac2:	b950      	cbnz	r0, 8007ada <xQueueGenericCreateStatic+0x1e>
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericCreateStatic+0x1c>
 8007ada:	9401      	str	r4, [sp, #4]
	}
 8007adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae0:	f7ff bfa0 	b.w	8007a24 <xQueueGenericCreateStatic.part.0>

08007ae4 <xQueueGenericCreate>:
	{
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aea:	4606      	mov	r6, r0
 8007aec:	b950      	cbnz	r0, 8007b04 <xQueueGenericCreate+0x20>
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	e7fe      	b.n	8007b02 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b06:	3050      	adds	r0, #80	; 0x50
 8007b08:	f7ff fc12 	bl	8007330 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	b170      	cbz	r0, 8007b2e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b16:	b165      	cbz	r5, 8007b32 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b18:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007b22:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b26:	f7ff ff3c 	bl	80079a2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007b2a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8007b2e:	4620      	mov	r0, r4
 8007b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b32:	4603      	mov	r3, r0
 8007b34:	e7f2      	b.n	8007b1c <xQueueGenericCreate+0x38>

08007b36 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007b36:	b513      	push	{r0, r1, r4, lr}
 8007b38:	4613      	mov	r3, r2
 8007b3a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007b3c:	b950      	cbnz	r0, 8007b54 <xQueueCreateCountingSemaphoreStatic+0x1e>
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	e7fe      	b.n	8007b52 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b54:	4288      	cmp	r0, r1
 8007b56:	d20a      	bcs.n	8007b6e <xQueueCreateCountingSemaphoreStatic+0x38>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	b672      	cpsid	i
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	b662      	cpsie	i
 8007b6c:	e7fe      	b.n	8007b6c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b6e:	2202      	movs	r2, #2
 8007b70:	9200      	str	r2, [sp, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	4611      	mov	r1, r2
 8007b76:	f7ff ffa1 	bl	8007abc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007b7a:	b100      	cbz	r0, 8007b7e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b7c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007b7e:	b002      	add	sp, #8
 8007b80:	bd10      	pop	{r4, pc}

08007b82 <xQueueCreateCountingSemaphore>:
	{
 8007b82:	b510      	push	{r4, lr}
 8007b84:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007b86:	b950      	cbnz	r0, 8007b9e <xQueueCreateCountingSemaphore+0x1c>
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	b672      	cpsid	i
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	b662      	cpsie	i
 8007b9c:	e7fe      	b.n	8007b9c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b9e:	4288      	cmp	r0, r1
 8007ba0:	d20a      	bcs.n	8007bb8 <xQueueCreateCountingSemaphore+0x36>
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	e7fe      	b.n	8007bb6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007bb8:	2202      	movs	r2, #2
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f7ff ff92 	bl	8007ae4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007bc0:	b100      	cbz	r0, 8007bc4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007bc2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007bc4:	bd10      	pop	{r4, pc}

08007bc6 <xQueueGenericSend>:
{
 8007bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	4688      	mov	r8, r1
 8007bce:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007bd0:	4604      	mov	r4, r0
{
 8007bd2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007bd4:	b950      	cbnz	r0, 8007bec <xQueueGenericSend+0x26>
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	b672      	cpsid	i
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	b662      	cpsie	i
 8007bea:	e7fe      	b.n	8007bea <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	b961      	cbnz	r1, 8007c08 <xQueueGenericSend+0x42>
 8007bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007bf0:	b153      	cbz	r3, 8007c08 <xQueueGenericSend+0x42>
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	b672      	cpsid	i
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	b662      	cpsie	i
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	2f02      	cmp	r7, #2
 8007c0a:	d10d      	bne.n	8007c28 <xQueueGenericSend+0x62>
 8007c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d00a      	beq.n	8007c28 <xQueueGenericSend+0x62>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	e7fe      	b.n	8007c26 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c28:	f001 f8ac 	bl	8008d84 <xTaskGetSchedulerState>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b960      	cbnz	r0, 8007c4a <xQueueGenericSend+0x84>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	b15b      	cbz	r3, 8007c4c <xQueueGenericSend+0x86>
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	b672      	cpsid	i
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	b662      	cpsie	i
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericSend+0x82>
 8007c4a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007c4c:	f04f 0900 	mov.w	r9, #0
 8007c50:	e037      	b.n	8007cc2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c52:	9d01      	ldr	r5, [sp, #4]
 8007c54:	b91d      	cbnz	r5, 8007c5e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8007c56:	f7ff fd09 	bl	800766c <vPortExitCritical>
			return errQUEUE_FULL;
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e052      	b.n	8007d04 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8007c5e:	b916      	cbnz	r6, 8007c66 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c60:	a802      	add	r0, sp, #8
 8007c62:	f001 f837 	bl	8008cd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007c66:	f7ff fd01 	bl	800766c <vPortExitCritical>
		vTaskSuspendAll();
 8007c6a:	f000 fdb1 	bl	80087d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c6e:	f7ff fcd9 	bl	8007624 <vPortEnterCritical>
 8007c72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c76:	2bff      	cmp	r3, #255	; 0xff
 8007c78:	d101      	bne.n	8007c7e <xQueueGenericSend+0xb8>
 8007c7a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8007c7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c82:	2bff      	cmp	r3, #255	; 0xff
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericSend+0xc4>
 8007c86:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8007c8a:	f7ff fcef 	bl	800766c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c8e:	a901      	add	r1, sp, #4
 8007c90:	a802      	add	r0, sp, #8
 8007c92:	f001 f82b 	bl	8008cec <xTaskCheckForTimeOut>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d14a      	bne.n	8007d30 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c9a:	f7ff fcc3 	bl	8007624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d131      	bne.n	8007d0a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007ca6:	f7ff fce1 	bl	800766c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007caa:	9901      	ldr	r1, [sp, #4]
 8007cac:	f104 0010 	add.w	r0, r4, #16
 8007cb0:	f000 ff8e 	bl	8008bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7ff fe3c 	bl	8007932 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cba:	f000 fe2f 	bl	800891c <xTaskResumeAll>
 8007cbe:	b360      	cbz	r0, 8007d1a <xQueueGenericSend+0x154>
 8007cc0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007cc2:	f7ff fcaf 	bl	8007624 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d301      	bcc.n	8007cd2 <xQueueGenericSend+0x10c>
 8007cce:	2f02      	cmp	r7, #2
 8007cd0:	d1bf      	bne.n	8007c52 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4641      	mov	r1, r8
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fde1 	bl	800789e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cde:	b11b      	cbz	r3, 8007ce8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ce4:	f000 ffb0 	bl	8008c48 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007ce8:	b148      	cbz	r0, 8007cfe <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007cea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007cfe:	f7ff fcb5 	bl	800766c <vPortExitCritical>
				return pdPASS;
 8007d02:	2001      	movs	r0, #1
}
 8007d04:	b005      	add	sp, #20
 8007d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8007d0a:	f7ff fcaf 	bl	800766c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f7ff fe0f 	bl	8007932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d14:	f000 fe02 	bl	800891c <xTaskResumeAll>
 8007d18:	e7d2      	b.n	8007cc0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007d1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	e7c7      	b.n	8007cc0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff fdfe 	bl	8007932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d36:	f000 fdf1 	bl	800891c <xTaskResumeAll>
 8007d3a:	e78e      	b.n	8007c5a <xQueueGenericSend+0x94>

08007d3c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007d3c:	2200      	movs	r2, #0
	{
 8007d3e:	460b      	mov	r3, r1
 8007d40:	b513      	push	{r0, r1, r4, lr}
 8007d42:	4611      	mov	r1, r2
 8007d44:	9000      	str	r0, [sp, #0]
 8007d46:	2001      	movs	r0, #1
 8007d48:	f7ff fe6c 	bl	8007a24 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	b138      	cbz	r0, 8007d60 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d50:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d52:	461a      	mov	r2, r3
 8007d54:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d56:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d58:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d5a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d5c:	f7ff ff33 	bl	8007bc6 <xQueueGenericSend>
	}
 8007d60:	4620      	mov	r0, r4
 8007d62:	b002      	add	sp, #8
 8007d64:	bd10      	pop	{r4, pc}

08007d66 <xQueueGiveMutexRecursive>:
	{
 8007d66:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007d68:	4604      	mov	r4, r0
 8007d6a:	b950      	cbnz	r0, 8007d82 <xQueueGiveMutexRecursive+0x1c>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	e7fe      	b.n	8007d80 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d82:	6885      	ldr	r5, [r0, #8]
 8007d84:	f000 fff8 	bl	8008d78 <xTaskGetCurrentTaskHandle>
 8007d88:	4285      	cmp	r5, r0
 8007d8a:	d10a      	bne.n	8007da2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007d8c:	68e3      	ldr	r3, [r4, #12]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007d92:	b923      	cbnz	r3, 8007d9e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007d94:	461a      	mov	r2, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff ff14 	bl	8007bc6 <xQueueGenericSend>
			xReturn = pdPASS;
 8007d9e:	2001      	movs	r0, #1
		return xReturn;
 8007da0:	e000      	b.n	8007da4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8007da2:	2000      	movs	r0, #0
	}
 8007da4:	bd38      	pop	{r3, r4, r5, pc}

08007da6 <xQueueCreateMutex>:
	{
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007daa:	2050      	movs	r0, #80	; 0x50
 8007dac:	f7ff fac0 	bl	8007330 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007db0:	4604      	mov	r4, r0
 8007db2:	b198      	cbz	r0, 8007ddc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007db4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007db6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007db8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dba:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007dbe:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dc2:	f7ff fdee 	bl	80079a2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007dce:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dd2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007dd4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007dd6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dd8:	f7ff fef5 	bl	8007bc6 <xQueueGenericSend>
	}
 8007ddc:	4620      	mov	r0, r4
 8007dde:	bd70      	pop	{r4, r5, r6, pc}

08007de0 <xQueueGenericSendFromISR>:
{
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4689      	mov	r9, r1
 8007de6:	4690      	mov	r8, r2
 8007de8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007dea:	4604      	mov	r4, r0
 8007dec:	b950      	cbnz	r0, 8007e04 <xQueueGenericSendFromISR+0x24>
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	b672      	cpsid	i
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	b662      	cpsie	i
 8007e02:	e7fe      	b.n	8007e02 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e04:	b961      	cbnz	r1, 8007e20 <xQueueGenericSendFromISR+0x40>
 8007e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007e08:	b153      	cbz	r3, 8007e20 <xQueueGenericSendFromISR+0x40>
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	b672      	cpsid	i
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	b662      	cpsie	i
 8007e1e:	e7fe      	b.n	8007e1e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e20:	2f02      	cmp	r7, #2
 8007e22:	d10d      	bne.n	8007e40 <xQueueGenericSendFromISR+0x60>
 8007e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d00a      	beq.n	8007e40 <xQueueGenericSendFromISR+0x60>
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	b672      	cpsid	i
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	b662      	cpsie	i
 8007e3e:	e7fe      	b.n	8007e3e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e40:	f7ff fcf0 	bl	8007824 <vPortValidateInterruptPriority>
	__asm volatile
 8007e44:	f3ef 8611 	mrs	r6, BASEPRI
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	b672      	cpsid	i
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007e5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d301      	bcc.n	8007e68 <xQueueGenericSendFromISR+0x88>
 8007e64:	2f02      	cmp	r7, #2
 8007e66:	d122      	bne.n	8007eae <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e68:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e6c:	463a      	mov	r2, r7
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e72:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e74:	f7ff fd13 	bl	800789e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007e78:	1c6b      	adds	r3, r5, #1
 8007e7a:	d113      	bne.n	8007ea4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e7e:	b90b      	cbnz	r3, 8007e84 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8007e80:	2001      	movs	r0, #1
 8007e82:	e00b      	b.n	8007e9c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e88:	f000 fede 	bl	8008c48 <xTaskRemoveFromEventList>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0f7      	beq.n	8007e80 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007e90:	f1b8 0f00 	cmp.w	r8, #0
 8007e94:	d0f4      	beq.n	8007e80 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e96:	2001      	movs	r0, #1
 8007e98:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007e9c:	f386 8811 	msr	BASEPRI, r6
}
 8007ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	b26d      	sxtb	r5, r5
 8007ea8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007eac:	e7e8      	b.n	8007e80 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e7f4      	b.n	8007e9c <xQueueGenericSendFromISR+0xbc>

08007eb2 <xQueueGiveFromISR>:
{
 8007eb2:	b570      	push	{r4, r5, r6, lr}
 8007eb4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	b950      	cbnz	r0, 8007ed0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	b672      	cpsid	i
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	b662      	cpsie	i
 8007ece:	e7fe      	b.n	8007ece <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ed0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007ed2:	b153      	cbz	r3, 8007eea <xQueueGiveFromISR+0x38>
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	e7fe      	b.n	8007ee8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007eea:	6803      	ldr	r3, [r0, #0]
 8007eec:	b963      	cbnz	r3, 8007f08 <xQueueGiveFromISR+0x56>
 8007eee:	6883      	ldr	r3, [r0, #8]
 8007ef0:	b153      	cbz	r3, 8007f08 <xQueueGiveFromISR+0x56>
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	b672      	cpsid	i
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	b662      	cpsie	i
 8007f06:	e7fe      	b.n	8007f06 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f08:	f7ff fc8c 	bl	8007824 <vPortValidateInterruptPriority>
	__asm volatile
 8007f0c:	f3ef 8611 	mrs	r6, BASEPRI
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d91c      	bls.n	8007f66 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f30:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007f32:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f34:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f36:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007f38:	d110      	bne.n	8007f5c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f3c:	b90b      	cbnz	r3, 8007f42 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e009      	b.n	8007f56 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f46:	f000 fe7f 	bl	8008c48 <xTaskRemoveFromEventList>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d0f7      	beq.n	8007f3e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	d0f5      	beq.n	8007f3e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f52:	2001      	movs	r0, #1
 8007f54:	6028      	str	r0, [r5, #0]
	__asm volatile
 8007f56:	f386 8811 	msr	BASEPRI, r6
}
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f64:	e7eb      	b.n	8007f3e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007f66:	2000      	movs	r0, #0
 8007f68:	e7f5      	b.n	8007f56 <xQueueGiveFromISR+0xa4>

08007f6a <xQueueReceive>:
{
 8007f6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007f6e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007f70:	4604      	mov	r4, r0
{
 8007f72:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007f74:	b950      	cbnz	r0, 8007f8c <xQueueReceive+0x22>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	b672      	cpsid	i
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	b662      	cpsie	i
 8007f8a:	e7fe      	b.n	8007f8a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f8c:	b961      	cbnz	r1, 8007fa8 <xQueueReceive+0x3e>
 8007f8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f90:	b153      	cbz	r3, 8007fa8 <xQueueReceive+0x3e>
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	b672      	cpsid	i
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	b662      	cpsie	i
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fa8:	f000 feec 	bl	8008d84 <xTaskGetSchedulerState>
 8007fac:	4606      	mov	r6, r0
 8007fae:	b960      	cbnz	r0, 8007fca <xQueueReceive+0x60>
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	b15b      	cbz	r3, 8007fcc <xQueueReceive+0x62>
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	b672      	cpsid	i
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	b662      	cpsie	i
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueReceive+0x5e>
 8007fca:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007fcc:	f04f 0800 	mov.w	r8, #0
 8007fd0:	e03d      	b.n	800804e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd2:	9d01      	ldr	r5, [sp, #4]
 8007fd4:	b91d      	cbnz	r5, 8007fde <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8007fd6:	f7ff fb49 	bl	800766c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e056      	b.n	800808c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8007fde:	b916      	cbnz	r6, 8007fe6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fe0:	a802      	add	r0, sp, #8
 8007fe2:	f000 fe77 	bl	8008cd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007fe6:	f7ff fb41 	bl	800766c <vPortExitCritical>
		vTaskSuspendAll();
 8007fea:	f000 fbf1 	bl	80087d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fee:	f7ff fb19 	bl	8007624 <vPortEnterCritical>
 8007ff2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ff6:	2bff      	cmp	r3, #255	; 0xff
 8007ff8:	d101      	bne.n	8007ffe <xQueueReceive+0x94>
 8007ffa:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007ffe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008002:	2bff      	cmp	r3, #255	; 0xff
 8008004:	d101      	bne.n	800800a <xQueueReceive+0xa0>
 8008006:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800800a:	f7ff fb2f 	bl	800766c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800800e:	a901      	add	r1, sp, #4
 8008010:	a802      	add	r0, sp, #8
 8008012:	f000 fe6b 	bl	8008cec <xTaskCheckForTimeOut>
 8008016:	2800      	cmp	r0, #0
 8008018:	d141      	bne.n	800809e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800801a:	4620      	mov	r0, r4
 800801c:	f7ff fc34 	bl	8007888 <prvIsQueueEmpty>
 8008020:	b3b8      	cbz	r0, 8008092 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008022:	9901      	ldr	r1, [sp, #4]
 8008024:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008028:	f000 fdd2 	bl	8008bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800802c:	4620      	mov	r0, r4
 800802e:	f7ff fc80 	bl	8007932 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008032:	f000 fc73 	bl	800891c <xTaskResumeAll>
 8008036:	b948      	cbnz	r0, 800804c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008038:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800803c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008040:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800804e:	f7ff fae9 	bl	8007624 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008052:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008054:	2d00      	cmp	r5, #0
 8008056:	d0bc      	beq.n	8007fd2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008058:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800805a:	4639      	mov	r1, r7
 800805c:	4620      	mov	r0, r4
 800805e:	f7ff fc53 	bl	8007908 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008062:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	b173      	cbz	r3, 8008086 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008068:	f104 0010 	add.w	r0, r4, #16
 800806c:	f000 fdec 	bl	8008c48 <xTaskRemoveFromEventList>
 8008070:	b148      	cbz	r0, 8008086 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8008072:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008086:	f7ff faf1 	bl	800766c <vPortExitCritical>
				return pdPASS;
 800808a:	2001      	movs	r0, #1
}
 800808c:	b004      	add	sp, #16
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff fc4d 	bl	8007932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008098:	f000 fc40 	bl	800891c <xTaskResumeAll>
 800809c:	e7d6      	b.n	800804c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800809e:	4620      	mov	r0, r4
 80080a0:	f7ff fc47 	bl	8007932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a4:	f000 fc3a 	bl	800891c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7ff fbed 	bl	8007888 <prvIsQueueEmpty>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0cc      	beq.n	800804c <xQueueReceive+0xe2>
 80080b2:	e792      	b.n	8007fda <xQueueReceive+0x70>

080080b4 <xQueueSemaphoreTake>:
{
 80080b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b6:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80080b8:	4604      	mov	r4, r0
{
 80080ba:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80080bc:	b950      	cbnz	r0, 80080d4 <xQueueSemaphoreTake+0x20>
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	b672      	cpsid	i
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	b662      	cpsie	i
 80080d2:	e7fe      	b.n	80080d2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80080d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80080d6:	b155      	cbz	r5, 80080ee <xQueueSemaphoreTake+0x3a>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	b672      	cpsid	i
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	b662      	cpsie	i
 80080ec:	e7fe      	b.n	80080ec <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ee:	f000 fe49 	bl	8008d84 <xTaskGetSchedulerState>
 80080f2:	4606      	mov	r6, r0
 80080f4:	b960      	cbnz	r0, 8008110 <xQueueSemaphoreTake+0x5c>
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	b16b      	cbz	r3, 8008116 <xQueueSemaphoreTake+0x62>
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	b672      	cpsid	i
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	b662      	cpsie	i
 800810e:	e7fe      	b.n	800810e <xQueueSemaphoreTake+0x5a>
 8008110:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008112:	2700      	movs	r7, #0
 8008114:	e055      	b.n	80081c2 <xQueueSemaphoreTake+0x10e>
 8008116:	4605      	mov	r5, r0
 8008118:	e7fb      	b.n	8008112 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	b973      	cbnz	r3, 800813c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800811e:	b155      	cbz	r5, 8008136 <xQueueSemaphoreTake+0x82>
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	b672      	cpsid	i
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	b662      	cpsie	i
 8008134:	e7fe      	b.n	8008134 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008136:	f7ff fa99 	bl	800766c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800813a:	e062      	b.n	8008202 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800813c:	b916      	cbnz	r6, 8008144 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800813e:	a802      	add	r0, sp, #8
 8008140:	f000 fdc8 	bl	8008cd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008144:	f7ff fa92 	bl	800766c <vPortExitCritical>
		vTaskSuspendAll();
 8008148:	f000 fb42 	bl	80087d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814c:	f7ff fa6a 	bl	8007624 <vPortEnterCritical>
 8008150:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008154:	2bff      	cmp	r3, #255	; 0xff
 8008156:	d101      	bne.n	800815c <xQueueSemaphoreTake+0xa8>
 8008158:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800815c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008160:	2bff      	cmp	r3, #255	; 0xff
 8008162:	d101      	bne.n	8008168 <xQueueSemaphoreTake+0xb4>
 8008164:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008168:	f7ff fa80 	bl	800766c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800816c:	a901      	add	r1, sp, #4
 800816e:	a802      	add	r0, sp, #8
 8008170:	f000 fdbc 	bl	8008cec <xTaskCheckForTimeOut>
 8008174:	2800      	cmp	r0, #0
 8008176:	d14d      	bne.n	8008214 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008178:	4620      	mov	r0, r4
 800817a:	f7ff fb85 	bl	8007888 <prvIsQueueEmpty>
 800817e:	2800      	cmp	r0, #0
 8008180:	d042      	beq.n	8008208 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	b93b      	cbnz	r3, 8008196 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8008186:	f7ff fa4d 	bl	8007624 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800818a:	68a0      	ldr	r0, [r4, #8]
 800818c:	f000 fe0a 	bl	8008da4 <xTaskPriorityInherit>
 8008190:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008192:	f7ff fa6b 	bl	800766c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008196:	9901      	ldr	r1, [sp, #4]
 8008198:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800819c:	f000 fd18 	bl	8008bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff fbc6 	bl	8007932 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081a6:	f000 fbb9 	bl	800891c <xTaskResumeAll>
 80081aa:	b948      	cbnz	r0, 80081c0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 80081ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80081c2:	f7ff fa2f 	bl	8007624 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0a6      	beq.n	800811a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081cc:	3b01      	subs	r3, #1
 80081ce:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	b913      	cbnz	r3, 80081da <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081d4:	f000 fec4 	bl	8008f60 <pvTaskIncrementMutexHeldCount>
 80081d8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	b173      	cbz	r3, 80081fc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081de:	f104 0010 	add.w	r0, r4, #16
 80081e2:	f000 fd31 	bl	8008c48 <xTaskRemoveFromEventList>
 80081e6:	b148      	cbz	r0, 80081fc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 80081e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80081fc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80081fe:	f7ff fa35 	bl	800766c <vPortExitCritical>
}
 8008202:	4628      	mov	r0, r5
 8008204:	b005      	add	sp, #20
 8008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008208:	4620      	mov	r0, r4
 800820a:	f7ff fb92 	bl	8007932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800820e:	f000 fb85 	bl	800891c <xTaskResumeAll>
 8008212:	e7d5      	b.n	80081c0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff fb8c 	bl	8007932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800821a:	f000 fb7f 	bl	800891c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800821e:	4620      	mov	r0, r4
 8008220:	f7ff fb32 	bl	8007888 <prvIsQueueEmpty>
 8008224:	2800      	cmp	r0, #0
 8008226:	d0cb      	beq.n	80081c0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008228:	2d00      	cmp	r5, #0
 800822a:	d0ea      	beq.n	8008202 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800822c:	f7ff f9fa 	bl	8007624 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008232:	b119      	cbz	r1, 800823c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008236:	6819      	ldr	r1, [r3, #0]
 8008238:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800823c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800823e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008240:	f000 fe38 	bl	8008eb4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008244:	f7ff fa12 	bl	800766c <vPortExitCritical>
 8008248:	e7db      	b.n	8008202 <xQueueSemaphoreTake+0x14e>

0800824a <xQueueTakeMutexRecursive>:
	{
 800824a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800824c:	4604      	mov	r4, r0
 800824e:	b950      	cbnz	r0, 8008266 <xQueueTakeMutexRecursive+0x1c>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	b672      	cpsid	i
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	b662      	cpsie	i
 8008264:	e7fe      	b.n	8008264 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008266:	6885      	ldr	r5, [r0, #8]
 8008268:	9101      	str	r1, [sp, #4]
 800826a:	f000 fd85 	bl	8008d78 <xTaskGetCurrentTaskHandle>
 800826e:	4285      	cmp	r5, r0
 8008270:	9901      	ldr	r1, [sp, #4]
 8008272:	d105      	bne.n	8008280 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008274:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008276:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008278:	3301      	adds	r3, #1
 800827a:	60e3      	str	r3, [r4, #12]
	}
 800827c:	b003      	add	sp, #12
 800827e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008280:	4620      	mov	r0, r4
 8008282:	f7ff ff17 	bl	80080b4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008286:	2800      	cmp	r0, #0
 8008288:	d0f8      	beq.n	800827c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800828a:	68e3      	ldr	r3, [r4, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008290:	e7f4      	b.n	800827c <xQueueTakeMutexRecursive+0x32>

08008292 <xQueueReceiveFromISR>:
{
 8008292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008296:	4689      	mov	r9, r1
 8008298:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800829a:	4605      	mov	r5, r0
 800829c:	b950      	cbnz	r0, 80082b4 <xQueueReceiveFromISR+0x22>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	e7fe      	b.n	80082b2 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b4:	b961      	cbnz	r1, 80082d0 <xQueueReceiveFromISR+0x3e>
 80082b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80082b8:	b153      	cbz	r3, 80082d0 <xQueueReceiveFromISR+0x3e>
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	b672      	cpsid	i
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	b662      	cpsie	i
 80082ce:	e7fe      	b.n	80082ce <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082d0:	f7ff faa8 	bl	8007824 <vPortValidateInterruptPriority>
	__asm volatile
 80082d4:	f3ef 8711 	mrs	r7, BASEPRI
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	b672      	cpsid	i
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ec:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ee:	b31c      	cbz	r4, 8008338 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 80082f0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f4:	4649      	mov	r1, r9
 80082f6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082f8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80082fa:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082fc:	f7ff fb04 	bl	8007908 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008300:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008302:	1c73      	adds	r3, r6, #1
 8008304:	d113      	bne.n	800832e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008306:	692b      	ldr	r3, [r5, #16]
 8008308:	b90b      	cbnz	r3, 800830e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800830a:	2001      	movs	r0, #1
 800830c:	e00b      	b.n	8008326 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830e:	f105 0010 	add.w	r0, r5, #16
 8008312:	f000 fc99 	bl	8008c48 <xTaskRemoveFromEventList>
 8008316:	2800      	cmp	r0, #0
 8008318:	d0f7      	beq.n	800830a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800831a:	f1b8 0f00 	cmp.w	r8, #0
 800831e:	d0f4      	beq.n	800830a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008320:	2001      	movs	r0, #1
 8008322:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008326:	f387 8811 	msr	BASEPRI, r7
}
 800832a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800832e:	3601      	adds	r6, #1
 8008330:	b276      	sxtb	r6, r6
 8008332:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008336:	e7e8      	b.n	800830a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008338:	4620      	mov	r0, r4
 800833a:	e7f4      	b.n	8008326 <xQueueReceiveFromISR+0x94>

0800833c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800833c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800833e:	4a07      	ldr	r2, [pc, #28]	; (800835c <vQueueAddToRegistry+0x20>)
	{
 8008340:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008342:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008346:	b92c      	cbnz	r4, 8008354 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008348:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800834c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008350:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008352:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008354:	3301      	adds	r3, #1
 8008356:	2b08      	cmp	r3, #8
 8008358:	d1f3      	bne.n	8008342 <vQueueAddToRegistry+0x6>
 800835a:	e7fa      	b.n	8008352 <vQueueAddToRegistry+0x16>
 800835c:	20014c60 	.word	0x20014c60

08008360 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008360:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008362:	4a08      	ldr	r2, [pc, #32]	; (8008384 <vQueueUnregisterQueue+0x24>)
	{
 8008364:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008366:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800836a:	684c      	ldr	r4, [r1, #4]
 800836c:	4284      	cmp	r4, r0
 800836e:	d104      	bne.n	800837a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008370:	2000      	movs	r0, #0
 8008372:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008376:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008378:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800837a:	3301      	adds	r3, #1
 800837c:	2b08      	cmp	r3, #8
 800837e:	d1f2      	bne.n	8008366 <vQueueUnregisterQueue+0x6>
 8008380:	e7fa      	b.n	8008378 <vQueueUnregisterQueue+0x18>
 8008382:	bf00      	nop
 8008384:	20014c60 	.word	0x20014c60

08008388 <vQueueDelete>:
{
 8008388:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800838a:	4604      	mov	r4, r0
 800838c:	b950      	cbnz	r0, 80083a4 <vQueueDelete+0x1c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	b672      	cpsid	i
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	b662      	cpsie	i
 80083a2:	e7fe      	b.n	80083a2 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 80083a4:	f7ff ffdc 	bl	8008360 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80083ac:	b923      	cbnz	r3, 80083b8 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 80083ae:	4620      	mov	r0, r4
}
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80083b4:	f7ff b852 	b.w	800745c <vPortFree>
}
 80083b8:	bd10      	pop	{r4, pc}

080083ba <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083c2:	f7ff f92f 	bl	8007624 <vPortEnterCritical>
 80083c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083ca:	2bff      	cmp	r3, #255	; 0xff
 80083cc:	d102      	bne.n	80083d4 <vQueueWaitForMessageRestricted+0x1a>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80083d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083d8:	2bff      	cmp	r3, #255	; 0xff
 80083da:	d102      	bne.n	80083e2 <vQueueWaitForMessageRestricted+0x28>
 80083dc:	2300      	movs	r3, #0
 80083de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083e2:	f7ff f943 	bl	800766c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083e8:	b92b      	cbnz	r3, 80083f6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083ea:	4632      	mov	r2, r6
 80083ec:	4629      	mov	r1, r5
 80083ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083f2:	f000 fc09 	bl	8008c08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083f6:	4620      	mov	r0, r4
	}
 80083f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80083fc:	f7ff ba99 	b.w	8007932 <prvUnlockQueue>

08008400 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008406:	f7ff f90d 	bl	8007624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800840a:	4b2f      	ldr	r3, [pc, #188]	; (80084c8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800840c:	4e2f      	ldr	r6, [pc, #188]	; (80084cc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4f2f      	ldr	r7, [pc, #188]	; (80084d0 <prvAddNewTaskToReadyList+0xd0>)
 8008412:	3201      	adds	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008416:	6835      	ldr	r5, [r6, #0]
 8008418:	2d00      	cmp	r5, #0
 800841a:	d14a      	bne.n	80084b2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800841c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d11f      	bne.n	8008464 <prvAddNewTaskToReadyList+0x64>
 8008424:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008426:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008428:	4640      	mov	r0, r8
 800842a:	f7ff f853 	bl	80074d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800842e:	f108 0814 	add.w	r8, r8, #20
 8008432:	2d38      	cmp	r5, #56	; 0x38
 8008434:	d1f7      	bne.n	8008426 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008436:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80084f8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800843a:	4d26      	ldr	r5, [pc, #152]	; (80084d4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800843c:	4640      	mov	r0, r8
 800843e:	f7ff f849 	bl	80074d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff f846 	bl	80074d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008448:	4823      	ldr	r0, [pc, #140]	; (80084d8 <prvAddNewTaskToReadyList+0xd8>)
 800844a:	f7ff f843 	bl	80074d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800844e:	4823      	ldr	r0, [pc, #140]	; (80084dc <prvAddNewTaskToReadyList+0xdc>)
 8008450:	f7ff f840 	bl	80074d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008454:	4822      	ldr	r0, [pc, #136]	; (80084e0 <prvAddNewTaskToReadyList+0xe0>)
 8008456:	f7ff f83d 	bl	80074d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800845a:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <prvAddNewTaskToReadyList+0xe4>)
 800845c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008460:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <prvAddNewTaskToReadyList+0xe8>)
 8008462:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008464:	4a21      	ldr	r2, [pc, #132]	; (80084ec <prvAddNewTaskToReadyList+0xec>)
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800846c:	4a20      	ldr	r2, [pc, #128]	; (80084f0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800846e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008470:	6811      	ldr	r1, [r2, #0]
 8008472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008474:	428b      	cmp	r3, r1
 8008476:	d900      	bls.n	800847a <prvAddNewTaskToReadyList+0x7a>
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	2014      	movs	r0, #20
 800847c:	1d21      	adds	r1, r4, #4
 800847e:	fb00 7003 	mla	r0, r0, r3, r7
 8008482:	f7ff f835 	bl	80074f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008486:	f7ff f8f1 	bl	800766c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <prvAddNewTaskToReadyList+0xf4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	b173      	cbz	r3, 80084ae <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008496:	429a      	cmp	r2, r3
 8008498:	d209      	bcs.n	80084ae <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800849a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
}
 80084ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <prvAddNewTaskToReadyList+0xf4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1d4      	bne.n	8008464 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084ba:	6833      	ldr	r3, [r6, #0]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d8cf      	bhi.n	8008464 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80084c4:	6034      	str	r4, [r6, #0]
 80084c6:	e7cd      	b.n	8008464 <prvAddNewTaskToReadyList+0x64>
 80084c8:	2001510c 	.word	0x2001510c
 80084cc:	20014ca0 	.word	0x20014ca0
 80084d0:	20014cac 	.word	0x20014cac
 80084d4:	20015138 	.word	0x20015138
 80084d8:	20015154 	.word	0x20015154
 80084dc:	20015180 	.word	0x20015180
 80084e0:	2001516c 	.word	0x2001516c
 80084e4:	20014ca4 	.word	0x20014ca4
 80084e8:	20014ca8 	.word	0x20014ca8
 80084ec:	2001511c 	.word	0x2001511c
 80084f0:	20015120 	.word	0x20015120
 80084f4:	20015168 	.word	0x20015168
 80084f8:	20015124 	.word	0x20015124

080084fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084fe:	4b15      	ldr	r3, [pc, #84]	; (8008554 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008500:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008502:	4e15      	ldr	r6, [pc, #84]	; (8008558 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008504:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008506:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008508:	6830      	ldr	r0, [r6, #0]
 800850a:	3004      	adds	r0, #4
 800850c:	f7ff f813 	bl	8007536 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008510:	1c63      	adds	r3, r4, #1
 8008512:	d107      	bne.n	8008524 <prvAddCurrentTaskToDelayedList+0x28>
 8008514:	b137      	cbz	r7, 8008524 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	4810      	ldr	r0, [pc, #64]	; (800855c <prvAddCurrentTaskToDelayedList+0x60>)
 800851a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800851c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008520:	f7fe bfe6 	b.w	80074f0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008524:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008526:	6833      	ldr	r3, [r6, #0]
 8008528:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800852a:	d307      	bcc.n	800853c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <prvAddCurrentTaskToDelayedList+0x64>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	6831      	ldr	r1, [r6, #0]
}
 8008532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008536:	3104      	adds	r1, #4
 8008538:	f7fe bfe6 	b.w	8007508 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <prvAddCurrentTaskToDelayedList+0x68>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	6831      	ldr	r1, [r6, #0]
 8008542:	3104      	adds	r1, #4
 8008544:	f7fe ffe0 	bl	8007508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008548:	4b07      	ldr	r3, [pc, #28]	; (8008568 <prvAddCurrentTaskToDelayedList+0x6c>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	42a2      	cmp	r2, r4
 800854e:	d900      	bls.n	8008552 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008550:	601c      	str	r4, [r3, #0]
}
 8008552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008554:	20015194 	.word	0x20015194
 8008558:	20014ca0 	.word	0x20014ca0
 800855c:	2001516c 	.word	0x2001516c
 8008560:	20014ca8 	.word	0x20014ca8
 8008564:	20014ca4 	.word	0x20014ca4
 8008568:	2001514c 	.word	0x2001514c

0800856c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800856c:	4a06      	ldr	r2, [pc, #24]	; (8008588 <prvResetNextTaskUnblockTime+0x1c>)
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <prvResetNextTaskUnblockTime+0x20>)
 8008574:	b919      	cbnz	r1, 800857e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800857a:	601a      	str	r2, [r3, #0]
}
 800857c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857e:	6812      	ldr	r2, [r2, #0]
 8008580:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008582:	68d2      	ldr	r2, [r2, #12]
 8008584:	6852      	ldr	r2, [r2, #4]
 8008586:	e7f8      	b.n	800857a <prvResetNextTaskUnblockTime+0xe>
 8008588:	20014ca4 	.word	0x20014ca4
 800858c:	2001514c 	.word	0x2001514c

08008590 <prvDeleteTCB>:
	{
 8008590:	b510      	push	{r4, lr}
 8008592:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008594:	3058      	adds	r0, #88	; 0x58
 8008596:	f021 fa3d 	bl	8029a14 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800859a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800859e:	b93b      	cbnz	r3, 80085b0 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80085a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80085a2:	f7fe ff5b 	bl	800745c <vPortFree>
				vPortFree( pxTCB );
 80085a6:	4620      	mov	r0, r4
	}
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80085ac:	f7fe bf56 	b.w	800745c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d0f8      	beq.n	80085a6 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d00a      	beq.n	80085ce <prvDeleteTCB+0x3e>
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	b672      	cpsid	i
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	b662      	cpsie	i
 80085cc:	e7fe      	b.n	80085cc <prvDeleteTCB+0x3c>
	}
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <prvIdleTask>:
{
 80085d0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085d2:	4c14      	ldr	r4, [pc, #80]	; (8008624 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d4:	4f14      	ldr	r7, [pc, #80]	; (8008628 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80085d6:	4d15      	ldr	r5, [pc, #84]	; (800862c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	b983      	cbnz	r3, 80085fe <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <prvIdleTask+0x60>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d909      	bls.n	80085f8 <prvIdleTask+0x28>
				taskYIELD();
 80085e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80085f8:	f7f8 fbfa 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80085fc:	e7eb      	b.n	80085d6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80085fe:	f7ff f811 	bl	8007624 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008606:	1d30      	adds	r0, r6, #4
 8008608:	f7fe ff95 	bl	8007536 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	3b01      	subs	r3, #1
 8008610:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	3b01      	subs	r3, #1
 8008616:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008618:	f7ff f828 	bl	800766c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ffb7 	bl	8008590 <prvDeleteTCB>
 8008622:	e7d9      	b.n	80085d8 <prvIdleTask+0x8>
 8008624:	20015110 	.word	0x20015110
 8008628:	20015180 	.word	0x20015180
 800862c:	2001510c 	.word	0x2001510c
 8008630:	20014cac 	.word	0x20014cac

08008634 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008638:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800863c:	4606      	mov	r6, r0
 800863e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008640:	21a5      	movs	r1, #165	; 0xa5
 8008642:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008644:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008646:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800864a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800864e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008650:	f020 fdfc 	bl	802924c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008654:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008656:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008658:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800865c:	2d00      	cmp	r5, #0
 800865e:	d042      	beq.n	80086e6 <prvInitialiseNewTask.constprop.0+0xb2>
 8008660:	1e6b      	subs	r3, r5, #1
 8008662:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008666:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008668:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800866c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008670:	b108      	cbz	r0, 8008676 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008672:	42ab      	cmp	r3, r5
 8008674:	d1f8      	bne.n	8008668 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008676:	2300      	movs	r3, #0
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800867c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800867e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008682:	1d20      	adds	r0, r4, #4
 8008684:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008686:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800868a:	bf28      	it	cs
 800868c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800868e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008690:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008692:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008696:	f7fe ff28 	bl	80074ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800869a:	f104 0018 	add.w	r0, r4, #24
 800869e:	f7fe ff24 	bl	80074ea <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086a2:	2260      	movs	r2, #96	; 0x60
 80086a4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 80086a6:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086b2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80086b4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086b8:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086bc:	f020 fdc6 	bl	802924c <memset>
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086c2:	463a      	mov	r2, r7
 80086c4:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086c6:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086c8:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <prvInitialiseNewTask.constprop.0+0xbc>)
 80086cc:	6623      	str	r3, [r4, #96]	; 0x60
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <prvInitialiseNewTask.constprop.0+0xc0>)
 80086d0:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086d2:	f7fe ff83 	bl	80075dc <pxPortInitialiseStack>
 80086d6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80086d8:	f1b8 0f00 	cmp.w	r8, #0
 80086dc:	d001      	beq.n	80086e2 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086de:	f8c8 4000 	str.w	r4, [r8]
}
 80086e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086e6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80086ea:	e7c7      	b.n	800867c <prvInitialiseNewTask.constprop.0+0x48>
 80086ec:	0802f06c 	.word	0x0802f06c
 80086f0:	0802f08c 	.word	0x0802f08c
 80086f4:	0802f04c 	.word	0x0802f04c

080086f8 <xTaskCreateStatic>:
	{
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008700:	b955      	cbnz	r5, 8008718 <xTaskCreateStatic+0x20>
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	b672      	cpsid	i
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	b662      	cpsie	i
 8008716:	e7fe      	b.n	8008716 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008718:	b954      	cbnz	r4, 8008730 <xTaskCreateStatic+0x38>
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	e7fe      	b.n	800872e <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008730:	26c0      	movs	r6, #192	; 0xc0
 8008732:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008734:	9e05      	ldr	r6, [sp, #20]
 8008736:	2ec0      	cmp	r6, #192	; 0xc0
 8008738:	d00a      	beq.n	8008750 <xTaskCreateStatic+0x58>
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	b672      	cpsid	i
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	b662      	cpsie	i
 800874e:	e7fe      	b.n	800874e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008750:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008752:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008754:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008756:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800875a:	ad04      	add	r5, sp, #16
 800875c:	9402      	str	r4, [sp, #8]
 800875e:	9501      	str	r5, [sp, #4]
 8008760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008762:	9500      	str	r5, [sp, #0]
 8008764:	f7ff ff66 	bl	8008634 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff fe49 	bl	8008400 <prvAddNewTaskToReadyList>
	}
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	b006      	add	sp, #24
 8008772:	bd70      	pop	{r4, r5, r6, pc}

08008774 <xTaskCreate>:
	{
 8008774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008778:	4607      	mov	r7, r0
 800877a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800877c:	0090      	lsls	r0, r2, #2
	{
 800877e:	4688      	mov	r8, r1
 8008780:	4616      	mov	r6, r2
 8008782:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008784:	f7fe fdd4 	bl	8007330 <pvPortMalloc>
			if( pxStack != NULL )
 8008788:	4605      	mov	r5, r0
 800878a:	b1e8      	cbz	r0, 80087c8 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800878c:	20c0      	movs	r0, #192	; 0xc0
 800878e:	f7fe fdcf 	bl	8007330 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008792:	4604      	mov	r4, r0
 8008794:	b1a8      	cbz	r0, 80087c2 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008796:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008798:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800879a:	4632      	mov	r2, r6
 800879c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800879e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a4:	9002      	str	r0, [sp, #8]
 80087a6:	4638      	mov	r0, r7
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	464b      	mov	r3, r9
 80087b0:	f7ff ff40 	bl	8008634 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7ff fe23 	bl	8008400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087ba:	2001      	movs	r0, #1
	}
 80087bc:	b005      	add	sp, #20
 80087be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80087c2:	4628      	mov	r0, r5
 80087c4:	f7fe fe4a 	bl	800745c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80087cc:	e7f6      	b.n	80087bc <xTaskCreate+0x48>
	...

080087d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80087d0:	4a02      	ldr	r2, [pc, #8]	; (80087dc <vTaskSuspendAll+0xc>)
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	6013      	str	r3, [r2, #0]
}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20015118 	.word	0x20015118

080087e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80087e0:	4b01      	ldr	r3, [pc, #4]	; (80087e8 <xTaskGetTickCount+0x8>)
 80087e2:	6818      	ldr	r0, [r3, #0]
}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20015194 	.word	0x20015194

080087ec <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ec:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <xTaskIncrementTick+0x104>)
 80087ee:	681b      	ldr	r3, [r3, #0]
{
 80087f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d174      	bne.n	80088e2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087f8:	4b3e      	ldr	r3, [pc, #248]	; (80088f4 <xTaskIncrementTick+0x108>)
 80087fa:	681d      	ldr	r5, [r3, #0]
 80087fc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80087fe:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008800:	b9cd      	cbnz	r5, 8008836 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008802:	4b3d      	ldr	r3, [pc, #244]	; (80088f8 <xTaskIncrementTick+0x10c>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	b152      	cbz	r2, 8008820 <xTaskIncrementTick+0x34>
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	b672      	cpsid	i
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	b662      	cpsie	i
 800881e:	e7fe      	b.n	800881e <xTaskIncrementTick+0x32>
 8008820:	4a36      	ldr	r2, [pc, #216]	; (80088fc <xTaskIncrementTick+0x110>)
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	6810      	ldr	r0, [r2, #0]
 8008826:	6018      	str	r0, [r3, #0]
 8008828:	6011      	str	r1, [r2, #0]
 800882a:	4a35      	ldr	r2, [pc, #212]	; (8008900 <xTaskIncrementTick+0x114>)
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	f7ff fe9b 	bl	800856c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008836:	4e33      	ldr	r6, [pc, #204]	; (8008904 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008838:	2400      	movs	r4, #0
 800883a:	4f33      	ldr	r7, [pc, #204]	; (8008908 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008914 <xTaskIncrementTick+0x128>
 8008842:	42ab      	cmp	r3, r5
 8008844:	d911      	bls.n	800886a <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008846:	f8d8 3000 	ldr.w	r3, [r8]
 800884a:	2214      	movs	r2, #20
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	4353      	muls	r3, r2
 8008850:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008852:	2b02      	cmp	r3, #2
 8008854:	bf28      	it	cs
 8008856:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008858:	4b2c      	ldr	r3, [pc, #176]	; (800890c <xTaskIncrementTick+0x120>)
 800885a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800885c:	2b00      	cmp	r3, #0
}
 800885e:	bf0c      	ite	eq
 8008860:	4620      	moveq	r0, r4
 8008862:	2001      	movne	r0, #1
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80088f8 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800886e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008918 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008872:	f8d9 3000 	ldr.w	r3, [r9]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	b91b      	cbnz	r3, 8008882 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887a:	f04f 33ff 	mov.w	r3, #4294967295
 800887e:	6033      	str	r3, [r6, #0]
					break;
 8008880:	e7e1      	b.n	8008846 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008882:	f8d9 3000 	ldr.w	r3, [r9]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800888c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008890:	4295      	cmp	r5, r2
 8008892:	d201      	bcs.n	8008898 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008894:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008896:	e7d6      	b.n	8008846 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008898:	f10b 0104 	add.w	r1, fp, #4
 800889c:	4608      	mov	r0, r1
 800889e:	9101      	str	r1, [sp, #4]
 80088a0:	f7fe fe49 	bl	8007536 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088a4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	b122      	cbz	r2, 80088b6 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ac:	f10b 0018 	add.w	r0, fp, #24
 80088b0:	f7fe fe41 	bl	8007536 <uxListRemove>
 80088b4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80088b6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80088ba:	f8da 2000 	ldr.w	r2, [sl]
 80088be:	4290      	cmp	r0, r2
 80088c0:	d901      	bls.n	80088c6 <xTaskIncrementTick+0xda>
 80088c2:	f8ca 0000 	str.w	r0, [sl]
 80088c6:	2314      	movs	r3, #20
 80088c8:	fb03 7000 	mla	r0, r3, r0, r7
 80088cc:	f7fe fe10 	bl	80074f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088d0:	f8d8 1000 	ldr.w	r1, [r8]
 80088d4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80088d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80088da:	429a      	cmp	r2, r3
 80088dc:	bf28      	it	cs
 80088de:	2401      	movcs	r4, #1
 80088e0:	e7c7      	b.n	8008872 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 80088e2:	4a0b      	ldr	r2, [pc, #44]	; (8008910 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 80088e4:	2400      	movs	r4, #0
		++uxPendedTicks;
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	e7b4      	b.n	8008858 <xTaskIncrementTick+0x6c>
 80088ee:	bf00      	nop
 80088f0:	20015118 	.word	0x20015118
 80088f4:	20015194 	.word	0x20015194
 80088f8:	20014ca4 	.word	0x20014ca4
 80088fc:	20014ca8 	.word	0x20014ca8
 8008900:	20015150 	.word	0x20015150
 8008904:	2001514c 	.word	0x2001514c
 8008908:	20014cac 	.word	0x20014cac
 800890c:	20015198 	.word	0x20015198
 8008910:	20015114 	.word	0x20015114
 8008914:	20014ca0 	.word	0x20014ca0
 8008918:	20015120 	.word	0x20015120

0800891c <xTaskResumeAll>:
{
 800891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800891e:	4c32      	ldr	r4, [pc, #200]	; (80089e8 <xTaskResumeAll+0xcc>)
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	b953      	cbnz	r3, 800893a <xTaskResumeAll+0x1e>
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	b672      	cpsid	i
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	b662      	cpsie	i
 8008938:	e7fe      	b.n	8008938 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800893a:	f7fe fe73 	bl	8007624 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	3b01      	subs	r3, #1
 8008942:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008944:	6824      	ldr	r4, [r4, #0]
 8008946:	b12c      	cbz	r4, 8008954 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008948:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800894a:	f7fe fe8f 	bl	800766c <vPortExitCritical>
}
 800894e:	4620      	mov	r0, r4
 8008950:	b003      	add	sp, #12
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008954:	4b25      	ldr	r3, [pc, #148]	; (80089ec <xTaskResumeAll+0xd0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f5      	beq.n	8008948 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800895c:	4d24      	ldr	r5, [pc, #144]	; (80089f0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800895e:	4e25      	ldr	r6, [pc, #148]	; (80089f4 <xTaskResumeAll+0xd8>)
 8008960:	4f25      	ldr	r7, [pc, #148]	; (80089f8 <xTaskResumeAll+0xdc>)
 8008962:	e01e      	b.n	80089a2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008964:	68eb      	ldr	r3, [r5, #12]
 8008966:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008968:	f104 0018 	add.w	r0, r4, #24
 800896c:	f7fe fde3 	bl	8007536 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008970:	1d21      	adds	r1, r4, #4
 8008972:	4608      	mov	r0, r1
 8008974:	9101      	str	r1, [sp, #4]
 8008976:	f7fe fdde 	bl	8007536 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800897a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800897c:	6832      	ldr	r2, [r6, #0]
 800897e:	9901      	ldr	r1, [sp, #4]
 8008980:	4293      	cmp	r3, r2
 8008982:	d900      	bls.n	8008986 <xTaskResumeAll+0x6a>
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	2014      	movs	r0, #20
 8008988:	fb00 7003 	mla	r0, r0, r3, r7
 800898c:	f7fe fdb0 	bl	80074f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008990:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <xTaskResumeAll+0xe0>)
 8008992:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800899c:	4b18      	ldr	r3, [pc, #96]	; (8008a00 <xTaskResumeAll+0xe4>)
 800899e:	2201      	movs	r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1dd      	bne.n	8008964 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80089a8:	b10c      	cbz	r4, 80089ae <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80089aa:	f7ff fddf 	bl	800856c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089ae:	4d15      	ldr	r5, [pc, #84]	; (8008a04 <xTaskResumeAll+0xe8>)
 80089b0:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089b2:	b144      	cbz	r4, 80089c6 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80089b4:	4e12      	ldr	r6, [pc, #72]	; (8008a00 <xTaskResumeAll+0xe4>)
 80089b6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80089b8:	f7ff ff18 	bl	80087ec <xTaskIncrementTick>
 80089bc:	b100      	cbz	r0, 80089c0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80089be:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089c0:	3c01      	subs	r4, #1
 80089c2:	d1f9      	bne.n	80089b8 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80089c4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80089c6:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <xTaskResumeAll+0xe4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0bc      	beq.n	8008948 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80089ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80089e2:	2401      	movs	r4, #1
 80089e4:	e7b1      	b.n	800894a <xTaskResumeAll+0x2e>
 80089e6:	bf00      	nop
 80089e8:	20015118 	.word	0x20015118
 80089ec:	2001510c 	.word	0x2001510c
 80089f0:	20015154 	.word	0x20015154
 80089f4:	20015120 	.word	0x20015120
 80089f8:	20014cac 	.word	0x20014cac
 80089fc:	20014ca0 	.word	0x20014ca0
 8008a00:	20015198 	.word	0x20015198
 8008a04:	20015114 	.word	0x20015114

08008a08 <vTaskDelay>:
	{
 8008a08:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a0a:	b950      	cbnz	r0, 8008a22 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008a0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
	}
 8008a20:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <vTaskDelay+0x48>)
 8008a24:	6819      	ldr	r1, [r3, #0]
 8008a26:	b151      	cbz	r1, 8008a3e <vTaskDelay+0x36>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	e7fe      	b.n	8008a3c <vTaskDelay+0x34>
			vTaskSuspendAll();
 8008a3e:	f7ff fec7 	bl	80087d0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a42:	f7ff fd5b 	bl	80084fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008a46:	f7ff ff69 	bl	800891c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0de      	beq.n	8008a0c <vTaskDelay+0x4>
 8008a4e:	e7e7      	b.n	8008a20 <vTaskDelay+0x18>
 8008a50:	20015118 	.word	0x20015118

08008a54 <vTaskSetApplicationTaskTag>:
	{
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008a58:	4604      	mov	r4, r0
 8008a5a:	b908      	cbnz	r0, 8008a60 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <vTaskSetApplicationTaskTag+0x1c>)
 8008a5e:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8008a60:	f7fe fde0 	bl	8007624 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008a64:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008a6a:	f7fe bdff 	b.w	800766c <vPortExitCritical>
 8008a6e:	bf00      	nop
 8008a70:	20014ca0 	.word	0x20014ca0

08008a74 <xTaskCallApplicationTaskHook>:
	{
 8008a74:	4603      	mov	r3, r0
 8008a76:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008a78:	b90b      	cbnz	r3, 8008a7e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <xTaskCallApplicationTaskHook+0x14>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a80:	b103      	cbz	r3, 8008a84 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8008a82:	4718      	bx	r3
	}
 8008a84:	4618      	mov	r0, r3
 8008a86:	4770      	bx	lr
 8008a88:	20014ca0 	.word	0x20014ca0

08008a8c <vTaskStartScheduler>:
{
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a90:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a92:	aa07      	add	r2, sp, #28
 8008a94:	a906      	add	r1, sp, #24
 8008a96:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a98:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a9c:	f7fe fc0c 	bl	80072b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008aa0:	9b05      	ldr	r3, [sp, #20]
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	9302      	str	r3, [sp, #8]
 8008aa6:	9b06      	ldr	r3, [sp, #24]
 8008aa8:	491d      	ldr	r1, [pc, #116]	; (8008b20 <vTaskStartScheduler+0x94>)
 8008aaa:	481e      	ldr	r0, [pc, #120]	; (8008b24 <vTaskStartScheduler+0x98>)
 8008aac:	e9cd 4300 	strd	r4, r3, [sp]
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	f7ff fe21 	bl	80086f8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d030      	beq.n	8008b1c <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 8008aba:	f000 faaf 	bl	800901c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008abe:	2801      	cmp	r0, #1
 8008ac0:	d11f      	bne.n	8008b02 <vTaskStartScheduler+0x76>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ad6:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <vTaskStartScheduler+0x9c>)
 8008ad8:	4914      	ldr	r1, [pc, #80]	; (8008b2c <vTaskStartScheduler+0xa0>)
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	3358      	adds	r3, #88	; 0x58
 8008ade:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <vTaskStartScheduler+0xa4>)
 8008ae6:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 8008ae8:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 8008aea:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <vTaskStartScheduler+0xa8>)
 8008aec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aee:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <vTaskStartScheduler+0xac>)
 8008af0:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8008af2:	6810      	ldr	r0, [r2, #0]
 8008af4:	f7ff ffbe 	bl	8008a74 <xTaskCallApplicationTaskHook>
}
 8008af8:	b008      	add	sp, #32
 8008afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008afe:	f7fe be2b 	b.w	8007758 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b02:	3001      	adds	r0, #1
 8008b04:	d10a      	bne.n	8008b1c <vTaskStartScheduler+0x90>
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	e7fe      	b.n	8008b1a <vTaskStartScheduler+0x8e>
}
 8008b1c:	b008      	add	sp, #32
 8008b1e:	bd10      	pop	{r4, pc}
 8008b20:	0802c710 	.word	0x0802c710
 8008b24:	080085d1 	.word	0x080085d1
 8008b28:	20014ca0 	.word	0x20014ca0
 8008b2c:	200000bc 	.word	0x200000bc
 8008b30:	2001514c 	.word	0x2001514c
 8008b34:	20015168 	.word	0x20015168
 8008b38:	20015194 	.word	0x20015194

08008b3c <vTaskSwitchContext>:
{
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <vTaskSwitchContext+0x7c>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <vTaskSwitchContext+0x80>)
 8008b44:	b112      	cbz	r2, 8008b4c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
}
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8008b4c:	4c1c      	ldr	r4, [pc, #112]	; (8008bc0 <vTaskSwitchContext+0x84>)
 8008b4e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b50:	4e1c      	ldr	r6, [pc, #112]	; (8008bc4 <vTaskSwitchContext+0x88>)
 8008b52:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8008b54:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	f7ff ff8c 	bl	8008a74 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <vTaskSwitchContext+0x8c>)
 8008b60:	fb07 f302 	mul.w	r3, r7, r2
 8008b64:	58cd      	ldr	r5, [r1, r3]
 8008b66:	18c8      	adds	r0, r1, r3
 8008b68:	b1c5      	cbz	r5, 8008b9c <vTaskSwitchContext+0x60>
 8008b6a:	6845      	ldr	r5, [r0, #4]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	686d      	ldr	r5, [r5, #4]
 8008b70:	440b      	add	r3, r1
 8008b72:	429d      	cmp	r5, r3
 8008b74:	6045      	str	r5, [r0, #4]
 8008b76:	bf04      	itt	eq
 8008b78:	686b      	ldreq	r3, [r5, #4]
 8008b7a:	6043      	streq	r3, [r0, #4]
 8008b7c:	2314      	movs	r3, #20
 8008b7e:	fb03 1102 	mla	r1, r3, r2, r1
 8008b82:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8008b84:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	f7ff ff71 	bl	8008a74 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <vTaskSwitchContext+0x90>)
 8008b96:	3358      	adds	r3, #88	; 0x58
 8008b98:	6013      	str	r3, [r2, #0]
}
 8008b9a:	e7d6      	b.n	8008b4a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	b952      	cbnz	r2, 8008bb4 <vTaskSwitchContext+0x78>
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	b672      	cpsid	i
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	b662      	cpsie	i
 8008bb2:	e7fe      	b.n	8008bb2 <vTaskSwitchContext+0x76>
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	e7d3      	b.n	8008b60 <vTaskSwitchContext+0x24>
 8008bb8:	20015118 	.word	0x20015118
 8008bbc:	20015198 	.word	0x20015198
 8008bc0:	20014ca0 	.word	0x20014ca0
 8008bc4:	20015120 	.word	0x20015120
 8008bc8:	20014cac 	.word	0x20014cac
 8008bcc:	200000bc 	.word	0x200000bc

08008bd0 <vTaskPlaceOnEventList>:
{
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008bd4:	b950      	cbnz	r0, 8008bec <vTaskPlaceOnEventList+0x1c>
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	b672      	cpsid	i
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	b662      	cpsie	i
 8008bea:	e7fe      	b.n	8008bea <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <vTaskPlaceOnEventList+0x34>)
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	3118      	adds	r1, #24
 8008bf2:	f7fe fc89 	bl	8007508 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	2101      	movs	r1, #1
}
 8008bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bfe:	f7ff bc7d 	b.w	80084fc <prvAddCurrentTaskToDelayedList>
 8008c02:	bf00      	nop
 8008c04:	20014ca0 	.word	0x20014ca0

08008c08 <vTaskPlaceOnEventListRestricted>:
	{
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008c0e:	b950      	cbnz	r0, 8008c26 <vTaskPlaceOnEventListRestricted+0x1e>
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	e7fe      	b.n	8008c24 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c26:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	3118      	adds	r1, #24
 8008c2c:	f7fe fc60 	bl	80074f0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008c30:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c32:	4621      	mov	r1, r4
 8008c34:	bf0c      	ite	eq
 8008c36:	4628      	moveq	r0, r5
 8008c38:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c40:	f7ff bc5c 	b.w	80084fc <prvAddCurrentTaskToDelayedList>
 8008c44:	20014ca0 	.word	0x20014ca0

08008c48 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c48:	68c3      	ldr	r3, [r0, #12]
{
 8008c4a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008c4e:	b954      	cbnz	r4, 8008c66 <xTaskRemoveFromEventList+0x1e>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	b672      	cpsid	i
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	b662      	cpsie	i
 8008c64:	e7fe      	b.n	8008c64 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c66:	f104 0118 	add.w	r1, r4, #24
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	9101      	str	r1, [sp, #4]
 8008c6e:	f7fe fc62 	bl	8007536 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c72:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <xTaskRemoveFromEventList+0x74>)
 8008c74:	9901      	ldr	r1, [sp, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	b9e3      	cbnz	r3, 8008cb4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c7a:	1d21      	adds	r1, r4, #4
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	9101      	str	r1, [sp, #4]
 8008c80:	f7fe fc59 	bl	8007536 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c84:	4a0e      	ldr	r2, [pc, #56]	; (8008cc0 <xTaskRemoveFromEventList+0x78>)
 8008c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c88:	6810      	ldr	r0, [r2, #0]
 8008c8a:	9901      	ldr	r1, [sp, #4]
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	d900      	bls.n	8008c92 <xTaskRemoveFromEventList+0x4a>
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4a0c      	ldr	r2, [pc, #48]	; (8008cc4 <xTaskRemoveFromEventList+0x7c>)
 8008c94:	2014      	movs	r0, #20
 8008c96:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c9a:	f7fe fc29 	bl	80074f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <xTaskRemoveFromEventList+0x80>)
 8008ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d906      	bls.n	8008cb8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008caa:	2001      	movs	r0, #1
 8008cac:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <xTaskRemoveFromEventList+0x84>)
 8008cae:	6018      	str	r0, [r3, #0]
}
 8008cb0:	b002      	add	sp, #8
 8008cb2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb4:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <xTaskRemoveFromEventList+0x88>)
 8008cb6:	e7f0      	b.n	8008c9a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8008cb8:	2000      	movs	r0, #0
	return xReturn;
 8008cba:	e7f9      	b.n	8008cb0 <xTaskRemoveFromEventList+0x68>
 8008cbc:	20015118 	.word	0x20015118
 8008cc0:	20015120 	.word	0x20015120
 8008cc4:	20014cac 	.word	0x20014cac
 8008cc8:	20014ca0 	.word	0x20014ca0
 8008ccc:	20015198 	.word	0x20015198
 8008cd0:	20015154 	.word	0x20015154

08008cd4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <vTaskInternalSetTimeOutState+0x10>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <vTaskInternalSetTimeOutState+0x14>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6043      	str	r3, [r0, #4]
}
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20015150 	.word	0x20015150
 8008ce8:	20015194 	.word	0x20015194

08008cec <xTaskCheckForTimeOut>:
{
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	b950      	cbnz	r0, 8008d0a <xTaskCheckForTimeOut+0x1e>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	b672      	cpsid	i
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	b662      	cpsie	i
 8008d08:	e7fe      	b.n	8008d08 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8008d0a:	b951      	cbnz	r1, 8008d22 <xTaskCheckForTimeOut+0x36>
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	b672      	cpsid	i
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	b662      	cpsie	i
 8008d20:	e7fe      	b.n	8008d20 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8008d22:	f7fe fc7f 	bl	8007624 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008d26:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <xTaskCheckForTimeOut+0x78>)
 8008d28:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	d010      	beq.n	8008d52 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d30:	480d      	ldr	r0, [pc, #52]	; (8008d68 <xTaskCheckForTimeOut+0x7c>)
 8008d32:	682e      	ldr	r6, [r5, #0]
 8008d34:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d36:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d38:	4286      	cmp	r6, r0
 8008d3a:	d001      	beq.n	8008d40 <xTaskCheckForTimeOut+0x54>
 8008d3c:	428a      	cmp	r2, r1
 8008d3e:	d90f      	bls.n	8008d60 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d40:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d42:	4283      	cmp	r3, r0
 8008d44:	d90a      	bls.n	8008d5c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8008d46:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d48:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008d4a:	4413      	add	r3, r2
 8008d4c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d4e:	f7ff ffc1 	bl	8008cd4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008d52:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d54:	f7fe fc8a 	bl	800766c <vPortExitCritical>
}
 8008d58:	4620      	mov	r0, r4
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008d60:	2401      	movs	r4, #1
 8008d62:	e7f7      	b.n	8008d54 <xTaskCheckForTimeOut+0x68>
 8008d64:	20015194 	.word	0x20015194
 8008d68:	20015150 	.word	0x20015150

08008d6c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <vTaskMissedYield+0x8>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	601a      	str	r2, [r3, #0]
}
 8008d72:	4770      	bx	lr
 8008d74:	20015198 	.word	0x20015198

08008d78 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008d78:	4b01      	ldr	r3, [pc, #4]	; (8008d80 <xTaskGetCurrentTaskHandle+0x8>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
	}
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20014ca0 	.word	0x20014ca0

08008d84 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <xTaskGetSchedulerState+0x18>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	b133      	cbz	r3, 8008d98 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <xTaskGetSchedulerState+0x1c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bf0c      	ite	eq
 8008d92:	2002      	moveq	r0, #2
 8008d94:	2000      	movne	r0, #0
 8008d96:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d98:	2001      	movs	r0, #1
	}
 8008d9a:	4770      	bx	lr
 8008d9c:	20015168 	.word	0x20015168
 8008da0:	20015118 	.word	0x20015118

08008da4 <xTaskPriorityInherit>:
	{
 8008da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008da6:	4604      	mov	r4, r0
 8008da8:	b340      	cbz	r0, 8008dfc <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008daa:	4d1b      	ldr	r5, [pc, #108]	; (8008e18 <xTaskPriorityInherit+0x74>)
 8008dac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008dae:	682a      	ldr	r2, [r5, #0]
 8008db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d228      	bcs.n	8008e08 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008db6:	6982      	ldr	r2, [r0, #24]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	db04      	blt.n	8008dc6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbc:	682a      	ldr	r2, [r5, #0]
 8008dbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dc0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008dc4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dc6:	2214      	movs	r2, #20
 8008dc8:	4e14      	ldr	r6, [pc, #80]	; (8008e1c <xTaskPriorityInherit+0x78>)
 8008dca:	fb02 6303 	mla	r3, r2, r3, r6
 8008dce:	6962      	ldr	r2, [r4, #20]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d115      	bne.n	8008e00 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd4:	1d21      	adds	r1, r4, #4
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	9101      	str	r1, [sp, #4]
 8008dda:	f7fe fbac 	bl	8007536 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dde:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008de0:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008de4:	6810      	ldr	r0, [r2, #0]
 8008de6:	9901      	ldr	r1, [sp, #4]
 8008de8:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dea:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008dec:	d900      	bls.n	8008df0 <xTaskPriorityInherit+0x4c>
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	2014      	movs	r0, #20
 8008df2:	fb00 6003 	mla	r0, r0, r3, r6
 8008df6:	f7fe fb7b 	bl	80074f0 <vListInsertEnd>
				xReturn = pdTRUE;
 8008dfa:	2001      	movs	r0, #1
	}
 8008dfc:	b002      	add	sp, #8
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e06:	e7f8      	b.n	8008dfa <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008e0c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008e0e:	42a0      	cmp	r0, r4
 8008e10:	bf2c      	ite	cs
 8008e12:	2000      	movcs	r0, #0
 8008e14:	2001      	movcc	r0, #1
 8008e16:	e7f1      	b.n	8008dfc <xTaskPriorityInherit+0x58>
 8008e18:	20014ca0 	.word	0x20014ca0
 8008e1c:	20014cac 	.word	0x20014cac
 8008e20:	20015120 	.word	0x20015120

08008e24 <xTaskPriorityDisinherit>:
	{
 8008e24:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8008e26:	b910      	cbnz	r0, 8008e2e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008e28:	2000      	movs	r0, #0
	}
 8008e2a:	b002      	add	sp, #8
 8008e2c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <xTaskPriorityDisinherit+0x84>)
 8008e30:	681c      	ldr	r4, [r3, #0]
 8008e32:	4284      	cmp	r4, r0
 8008e34:	d00a      	beq.n	8008e4c <xTaskPriorityDisinherit+0x28>
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	b672      	cpsid	i
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	b662      	cpsie	i
 8008e4a:	e7fe      	b.n	8008e4a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e4e:	b953      	cbnz	r3, 8008e66 <xTaskPriorityDisinherit+0x42>
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	b672      	cpsid	i
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	b662      	cpsie	i
 8008e64:	e7fe      	b.n	8008e64 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008e68:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008e6c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	d0da      	beq.n	8008e28 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1d8      	bne.n	8008e28 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e76:	1d21      	adds	r1, r4, #4
 8008e78:	4608      	mov	r0, r1
 8008e7a:	9101      	str	r1, [sp, #4]
 8008e7c:	f7fe fb5b 	bl	8007536 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8008e82:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e88:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e8a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e8c:	4a07      	ldr	r2, [pc, #28]	; (8008eac <xTaskPriorityDisinherit+0x88>)
 8008e8e:	6810      	ldr	r0, [r2, #0]
 8008e90:	4283      	cmp	r3, r0
 8008e92:	d900      	bls.n	8008e96 <xTaskPriorityDisinherit+0x72>
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	4a06      	ldr	r2, [pc, #24]	; (8008eb0 <xTaskPriorityDisinherit+0x8c>)
 8008e98:	2014      	movs	r0, #20
 8008e9a:	fb00 2003 	mla	r0, r0, r3, r2
 8008e9e:	f7fe fb27 	bl	80074f0 <vListInsertEnd>
					xReturn = pdTRUE;
 8008ea2:	2001      	movs	r0, #1
		return xReturn;
 8008ea4:	e7c1      	b.n	8008e2a <xTaskPriorityDisinherit+0x6>
 8008ea6:	bf00      	nop
 8008ea8:	20014ca0 	.word	0x20014ca0
 8008eac:	20015120 	.word	0x20015120
 8008eb0:	20014cac 	.word	0x20014cac

08008eb4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d048      	beq.n	8008f4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ebc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008ebe:	b952      	cbnz	r2, 8008ed6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	e7fe      	b.n	8008ed4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ed6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	bf38      	it	cc
 8008edc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ede:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	d034      	beq.n	8008f4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ee4:	2a01      	cmp	r2, #1
 8008ee6:	d132      	bne.n	8008f4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8008ee8:	4a1a      	ldr	r2, [pc, #104]	; (8008f54 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	4282      	cmp	r2, r0
 8008eee:	d10a      	bne.n	8008f06 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	e7fe      	b.n	8008f04 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f06:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f08:	4d13      	ldr	r5, [pc, #76]	; (8008f58 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f0a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f0c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8008f10:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f12:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f16:	bfa8      	it	ge
 8008f18:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f1c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1e:	bfa8      	it	ge
 8008f20:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d113      	bne.n	8008f4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f26:	1d01      	adds	r1, r0, #4
 8008f28:	4608      	mov	r0, r1
 8008f2a:	9101      	str	r1, [sp, #4]
 8008f2c:	f7fe fb03 	bl	8007536 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008f30:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008f32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f34:	6810      	ldr	r0, [r2, #0]
 8008f36:	9901      	ldr	r1, [sp, #4]
 8008f38:	4283      	cmp	r3, r0
 8008f3a:	d900      	bls.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	2014      	movs	r0, #20
 8008f40:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8008f44:	b003      	add	sp, #12
 8008f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8008f4a:	f7fe bad1 	b.w	80074f0 <vListInsertEnd>
	}
 8008f4e:	b003      	add	sp, #12
 8008f50:	bd30      	pop	{r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	20014ca0 	.word	0x20014ca0
 8008f58:	20014cac 	.word	0x20014cac
 8008f5c:	20015120 	.word	0x20015120

08008f60 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <pvTaskIncrementMutexHeldCount+0x14>)
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	b11a      	cbz	r2, 8008f6e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f66:	6819      	ldr	r1, [r3, #0]
 8008f68:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8008f6e:	6818      	ldr	r0, [r3, #0]
	}
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20014ca0 	.word	0x20014ca0

08008f78 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008f7a:	4c11      	ldr	r4, [pc, #68]	; (8008fc0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008f7c:	f7fe fb52 	bl	8007624 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	b9bd      	cbnz	r5, 8008fb4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f84:	4f0f      	ldr	r7, [pc, #60]	; (8008fc4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008f86:	4e10      	ldr	r6, [pc, #64]	; (8008fc8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7fe faa3 	bl	80074d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7fe faa0 	bl	80074d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f94:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <prvCheckForValidListAndQueue+0x58>)
 8008f98:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008f9a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f9c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <prvCheckForValidListAndQueue+0x5c>)
 8008fa0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	; (8008fd8 <prvCheckForValidListAndQueue+0x60>)
 8008fa4:	9500      	str	r5, [sp, #0]
 8008fa6:	f7fe fd89 	bl	8007abc <xQueueGenericCreateStatic>
 8008faa:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fac:	b110      	cbz	r0, 8008fb4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fae:	490b      	ldr	r1, [pc, #44]	; (8008fdc <prvCheckForValidListAndQueue+0x64>)
 8008fb0:	f7ff f9c4 	bl	800833c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008fb4:	b003      	add	sp, #12
 8008fb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008fba:	f7fe bb57 	b.w	800766c <vPortExitCritical>
 8008fbe:	bf00      	nop
 8008fc0:	200152c0 	.word	0x200152c0
 8008fc4:	20015244 	.word	0x20015244
 8008fc8:	20015258 	.word	0x20015258
 8008fcc:	2001519c 	.word	0x2001519c
 8008fd0:	200151a4 	.word	0x200151a4
 8008fd4:	200151a0 	.word	0x200151a0
 8008fd8:	20015270 	.word	0x20015270
 8008fdc:	0802c715 	.word	0x0802c715

08008fe0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008fe0:	4291      	cmp	r1, r2
{
 8008fe2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fe4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fe6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008fe8:	d80a      	bhi.n	8009000 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	6983      	ldr	r3, [r0, #24]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d20d      	bcs.n	800900e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ff2:	1d01      	adds	r1, r0, #4
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	f7fe fa86 	bl	8007508 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008ffc:	2000      	movs	r0, #0
}
 8008ffe:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009000:	429a      	cmp	r2, r3
 8009002:	d201      	bcs.n	8009008 <prvInsertTimerInActiveList+0x28>
 8009004:	4299      	cmp	r1, r3
 8009006:	d202      	bcs.n	800900e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009008:	1d01      	adds	r1, r0, #4
 800900a:	4b03      	ldr	r3, [pc, #12]	; (8009018 <prvInsertTimerInActiveList+0x38>)
 800900c:	e7f3      	b.n	8008ff6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800900e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009010:	e7f5      	b.n	8008ffe <prvInsertTimerInActiveList+0x1e>
 8009012:	bf00      	nop
 8009014:	200151a0 	.word	0x200151a0
 8009018:	2001519c 	.word	0x2001519c

0800901c <xTimerCreateTimerTask>:
{
 800901c:	b510      	push	{r4, lr}
 800901e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009020:	f7ff ffaa 	bl	8008f78 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009024:	4b13      	ldr	r3, [pc, #76]	; (8009074 <xTimerCreateTimerTask+0x58>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	b1b3      	cbz	r3, 8009058 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800902a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800902c:	aa07      	add	r2, sp, #28
 800902e:	a906      	add	r1, sp, #24
 8009030:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009032:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009036:	f7fe f94b 	bl	80072d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800903a:	9b05      	ldr	r3, [sp, #20]
 800903c:	9a07      	ldr	r2, [sp, #28]
 800903e:	9302      	str	r3, [sp, #8]
 8009040:	9b06      	ldr	r3, [sp, #24]
 8009042:	490d      	ldr	r1, [pc, #52]	; (8009078 <xTimerCreateTimerTask+0x5c>)
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	2302      	movs	r3, #2
 8009048:	480c      	ldr	r0, [pc, #48]	; (800907c <xTimerCreateTimerTask+0x60>)
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	4623      	mov	r3, r4
 800904e:	f7ff fb53 	bl	80086f8 <xTaskCreateStatic>
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <xTimerCreateTimerTask+0x64>)
 8009054:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009056:	b950      	cbnz	r0, 800906e <xTimerCreateTimerTask+0x52>
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	b672      	cpsid	i
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	b662      	cpsie	i
	configASSERT( xReturn );
 800906c:	e7fe      	b.n	800906c <xTimerCreateTimerTask+0x50>
}
 800906e:	2001      	movs	r0, #1
 8009070:	b008      	add	sp, #32
 8009072:	bd10      	pop	{r4, pc}
 8009074:	200152c0 	.word	0x200152c0
 8009078:	0802c71a 	.word	0x0802c71a
 800907c:	0800918d 	.word	0x0800918d
 8009080:	200152c4 	.word	0x200152c4

08009084 <xTimerGenericCommand>:
{
 8009084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009086:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009088:	4604      	mov	r4, r0
{
 800908a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800908c:	b950      	cbnz	r0, 80090a4 <xTimerGenericCommand+0x20>
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	b672      	cpsid	i
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	b662      	cpsie	i
 80090a2:	e7fe      	b.n	80090a2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 80090a4:	4d0c      	ldr	r5, [pc, #48]	; (80090d8 <xTimerGenericCommand+0x54>)
 80090a6:	6828      	ldr	r0, [r5, #0]
 80090a8:	b178      	cbz	r0, 80090ca <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090aa:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090ac:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090ae:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090b2:	dc0c      	bgt.n	80090ce <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090b4:	f7ff fe66 	bl	8008d84 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090b8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090ba:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090bc:	4669      	mov	r1, sp
 80090be:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090c0:	bf0c      	ite	eq
 80090c2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090c4:	461a      	movne	r2, r3
 80090c6:	f7fe fd7e 	bl	8007bc6 <xQueueGenericSend>
}
 80090ca:	b004      	add	sp, #16
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090ce:	2300      	movs	r3, #0
 80090d0:	4669      	mov	r1, sp
 80090d2:	f7fe fe85 	bl	8007de0 <xQueueGenericSendFromISR>
 80090d6:	e7f8      	b.n	80090ca <xTimerGenericCommand+0x46>
 80090d8:	200152c0 	.word	0x200152c0

080090dc <prvSampleTimeNow>:
{
 80090dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80090e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009188 <prvSampleTimeNow+0xac>
{
 80090e4:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80090e6:	f7ff fb7b 	bl	80087e0 <xTaskGetTickCount>
 80090ea:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80090ec:	f8d8 3000 	ldr.w	r3, [r8]
 80090f0:	4283      	cmp	r3, r0
 80090f2:	d942      	bls.n	800917a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f4:	4f22      	ldr	r7, [pc, #136]	; (8009180 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090f6:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	b95a      	cbnz	r2, 8009118 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009100:	4a20      	ldr	r2, [pc, #128]	; (8009184 <prvSampleTimeNow+0xa8>)
 8009102:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009104:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009106:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009108:	6039      	str	r1, [r7, #0]
}
 800910a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800910c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800910e:	f8c8 5000 	str.w	r5, [r8]
}
 8009112:	b004      	add	sp, #16
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009118:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800911c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009120:	1d21      	adds	r1, r4, #4
 8009122:	4608      	mov	r0, r1
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	f7fe fa06 	bl	8007536 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800912a:	6a23      	ldr	r3, [r4, #32]
 800912c:	4620      	mov	r0, r4
 800912e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009130:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009134:	9903      	ldr	r1, [sp, #12]
 8009136:	f013 0f04 	tst.w	r3, #4
 800913a:	d0de      	beq.n	80090fa <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800913c:	69a3      	ldr	r3, [r4, #24]
 800913e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009140:	459a      	cmp	sl, r3
 8009142:	d205      	bcs.n	8009150 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009144:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009146:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009148:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800914a:	f7fe f9dd 	bl	8007508 <vListInsert>
 800914e:	e7d4      	b.n	80090fa <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009150:	2300      	movs	r3, #0
 8009152:	4652      	mov	r2, sl
 8009154:	4620      	mov	r0, r4
 8009156:	f8cd 9000 	str.w	r9, [sp]
 800915a:	4619      	mov	r1, r3
 800915c:	f7ff ff92 	bl	8009084 <xTimerGenericCommand>
				configASSERT( xResult );
 8009160:	2800      	cmp	r0, #0
 8009162:	d1ca      	bne.n	80090fa <prvSampleTimeNow+0x1e>
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	b672      	cpsid	i
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	b662      	cpsie	i
 8009178:	e7fe      	b.n	8009178 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	e7c5      	b.n	800910a <prvSampleTimeNow+0x2e>
 800917e:	bf00      	nop
 8009180:	2001519c 	.word	0x2001519c
 8009184:	200151a0 	.word	0x200151a0
 8009188:	2001526c 	.word	0x2001526c

0800918c <prvTimerTask>:
{
 800918c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009190:	4d71      	ldr	r5, [pc, #452]	; (8009358 <prvTimerTask+0x1cc>)
{
 8009192:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009194:	4e71      	ldr	r6, [pc, #452]	; (800935c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	f8d3 8000 	ldr.w	r8, [r3]
 800919c:	f1b8 0f00 	cmp.w	r8, #0
 80091a0:	d037      	beq.n	8009212 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091a4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80091aa:	f7ff fb11 	bl	80087d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ae:	a804      	add	r0, sp, #16
 80091b0:	f7ff ff94 	bl	80090dc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80091b4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091b6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d16b      	bne.n	8009294 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091bc:	2c00      	cmp	r4, #0
 80091be:	d14e      	bne.n	800925e <prvTimerTask+0xd2>
 80091c0:	4540      	cmp	r0, r8
 80091c2:	d352      	bcc.n	800926a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 80091c4:	f7ff fbaa 	bl	800891c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ce:	1d38      	adds	r0, r7, #4
 80091d0:	f7fe f9b1 	bl	8007536 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091d8:	0758      	lsls	r0, r3, #29
 80091da:	d51c      	bpl.n	8009216 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	4643      	mov	r3, r8
 80091e0:	464a      	mov	r2, r9
 80091e2:	4638      	mov	r0, r7
 80091e4:	4441      	add	r1, r8
 80091e6:	f7ff fefb 	bl	8008fe0 <prvInsertTimerInActiveList>
 80091ea:	b1c0      	cbz	r0, 800921e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ec:	4623      	mov	r3, r4
 80091ee:	4642      	mov	r2, r8
 80091f0:	4621      	mov	r1, r4
 80091f2:	4638      	mov	r0, r7
 80091f4:	9400      	str	r4, [sp, #0]
 80091f6:	f7ff ff45 	bl	8009084 <xTimerGenericCommand>
			configASSERT( xResult );
 80091fa:	b980      	cbnz	r0, 800921e <prvTimerTask+0x92>
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	e7fe      	b.n	8009210 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009212:	2401      	movs	r4, #1
 8009214:	e7c9      	b.n	80091aa <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009216:	f023 0301 	bic.w	r3, r3, #1
 800921a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	4638      	mov	r0, r7
 8009222:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009224:	2200      	movs	r2, #0
 8009226:	a904      	add	r1, sp, #16
 8009228:	6830      	ldr	r0, [r6, #0]
 800922a:	f7fe fe9e 	bl	8007f6a <xQueueReceive>
 800922e:	2800      	cmp	r0, #0
 8009230:	d0b1      	beq.n	8009196 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009232:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009234:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009236:	2b00      	cmp	r3, #0
 8009238:	db2f      	blt.n	800929a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800923a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800923c:	6963      	ldr	r3, [r4, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d132      	bne.n	80092a8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009242:	a803      	add	r0, sp, #12
 8009244:	f7ff ff4a 	bl	80090dc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009248:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800924a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800924c:	2b09      	cmp	r3, #9
 800924e:	d8e9      	bhi.n	8009224 <prvTimerTask+0x98>
 8009250:	e8df f003 	tbb	[pc, r3]
 8009254:	592e2e2e 	.word	0x592e2e2e
 8009258:	2e2e7a60 	.word	0x2e2e7a60
 800925c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800925e:	4b40      	ldr	r3, [pc, #256]	; (8009360 <prvTimerTask+0x1d4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681c      	ldr	r4, [r3, #0]
 8009264:	fab4 f484 	clz	r4, r4
 8009268:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800926a:	4622      	mov	r2, r4
 800926c:	eba8 0109 	sub.w	r1, r8, r9
 8009270:	6830      	ldr	r0, [r6, #0]
 8009272:	f7ff f8a2 	bl	80083ba <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009276:	f7ff fb51 	bl	800891c <xTaskResumeAll>
 800927a:	2800      	cmp	r0, #0
 800927c:	d1d2      	bne.n	8009224 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800927e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009286:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	e7c7      	b.n	8009224 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8009294:	f7ff fb42 	bl	800891c <xTaskResumeAll>
}
 8009298:	e7c4      	b.n	8009224 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	9907      	ldr	r1, [sp, #28]
 800929e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dbbe      	blt.n	8009224 <prvTimerTask+0x98>
 80092a6:	e7c8      	b.n	800923a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a8:	1d20      	adds	r0, r4, #4
 80092aa:	f7fe f944 	bl	8007536 <uxListRemove>
 80092ae:	e7c8      	b.n	8009242 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092b4:	4620      	mov	r0, r4
 80092b6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092b8:	f043 0301 	orr.w	r3, r3, #1
 80092bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	4419      	add	r1, r3
 80092c4:	f7ff fe8c 	bl	8008fe0 <prvInsertTimerInActiveList>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d0ab      	beq.n	8009224 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092cc:	6a23      	ldr	r3, [r4, #32]
 80092ce:	4620      	mov	r0, r4
 80092d0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80092d6:	0759      	lsls	r1, r3, #29
 80092d8:	d5a4      	bpl.n	8009224 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092da:	69a2      	ldr	r2, [r4, #24]
 80092dc:	2300      	movs	r3, #0
 80092de:	9905      	ldr	r1, [sp, #20]
 80092e0:	4620      	mov	r0, r4
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	440a      	add	r2, r1
 80092e6:	4619      	mov	r1, r3
 80092e8:	f7ff fecc 	bl	8009084 <xTimerGenericCommand>
							configASSERT( xResult );
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d199      	bne.n	8009224 <prvTimerTask+0x98>
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	e7fe      	b.n	8009304 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009306:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009312:	e787      	b.n	8009224 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009314:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009320:	9905      	ldr	r1, [sp, #20]
 8009322:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009324:	b951      	cbnz	r1, 800933c <prvTimerTask+0x1b0>
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	e7fe      	b.n	800933a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800933c:	4603      	mov	r3, r0
 800933e:	4401      	add	r1, r0
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff fe4d 	bl	8008fe0 <prvInsertTimerInActiveList>
					break;
 8009346:	e76d      	b.n	8009224 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009348:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800934c:	079a      	lsls	r2, r3, #30
 800934e:	d4dc      	bmi.n	800930a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8009350:	4620      	mov	r0, r4
 8009352:	f7fe f883 	bl	800745c <vPortFree>
 8009356:	e765      	b.n	8009224 <prvTimerTask+0x98>
 8009358:	2001519c 	.word	0x2001519c
 800935c:	200152c0 	.word	0x200152c0
 8009360:	200151a0 	.word	0x200151a0

08009364 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009364:	6843      	ldr	r3, [r0, #4]
{
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800936a:	b14b      	cbz	r3, 8009380 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2101      	movs	r1, #1
 8009370:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	b12b      	cbz	r3, 8009382 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009376:	23c8      	movs	r3, #200	; 0xc8
 8009378:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009380:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009382:	2364      	movs	r3, #100	; 0x64
 8009384:	6163      	str	r3, [r4, #20]
 8009386:	e7fb      	b.n	8009380 <jpeg_abort+0x1c>

08009388 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009388:	6843      	ldr	r3, [r0, #4]
{
 800938a:	b510      	push	{r4, lr}
 800938c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800938e:	b10b      	cbz	r3, 8009394 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009394:	2300      	movs	r3, #0
 8009396:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009398:	6163      	str	r3, [r4, #20]
}
 800939a:	bd10      	pop	{r4, pc}

0800939c <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800939c:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800939e:	6843      	ldr	r3, [r0, #4]
 80093a0:	2284      	movs	r2, #132	; 0x84
 80093a2:	2100      	movs	r1, #0
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 80093ae:	bd08      	pop	{r3, pc}

080093b0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 80093b0:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 80093b2:	6843      	ldr	r3, [r0, #4]
 80093b4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80093b8:	2100      	movs	r1, #0
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 80093c4:	bd08      	pop	{r3, pc}

080093c6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80093c6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 80093c8:	2950      	cmp	r1, #80	; 0x50
{
 80093ca:	b570      	push	{r4, r5, r6, lr}
 80093cc:	4604      	mov	r4, r0
 80093ce:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80093d0:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 80093d2:	d007      	beq.n	80093e4 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 80093d4:	6803      	ldr	r3, [r0, #0]
 80093d6:	260d      	movs	r6, #13
 80093d8:	2250      	movs	r2, #80	; 0x50
 80093da:	61d9      	str	r1, [r3, #28]
 80093dc:	e9c3 6205 	strd	r6, r2, [r3, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 80093e4:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 80093e8:	d009      	beq.n	80093fe <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	2116      	movs	r1, #22
 80093ee:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80093f2:	4620      	mov	r0, r4
 80093f4:	61dd      	str	r5, [r3, #28]
 80093f6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80093fe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009402:	2100      	movs	r1, #0
 8009404:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009406:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009408:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800940a:	f01f ff1f 	bl	802924c <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800940e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009410:	4620      	mov	r0, r4
    cinfo->err = err;
 8009412:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009414:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009416:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009418:	f00b feac 	bl	8015174 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800941c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800941e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009420:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009422:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009424:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009428:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800942c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009430:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009434:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009438:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800943c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009440:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009444:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009448:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800944c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8009450:	f005 f8ba 	bl	800e5c8 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009454:	4620      	mov	r0, r4
 8009456:	f003 fdbd 	bl	800cfd4 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800945a:	23c8      	movs	r3, #200	; 0xc8
 800945c:	6163      	str	r3, [r4, #20]
}
 800945e:	bd70      	pop	{r4, r5, r6, pc}

08009460 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009460:	f7ff bf92 	b.w	8009388 <jpeg_destroy>

08009464 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009464:	6942      	ldr	r2, [r0, #20]
 8009466:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800946a:	b570      	push	{r4, r5, r6, lr}
 800946c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800946e:	2b0a      	cmp	r3, #10
 8009470:	f200 80a5 	bhi.w	80095be <jpeg_consume_input+0x15a>
 8009474:	e8df f003 	tbb	[pc, r3]
 8009478:	9dab1006 	.word	0x9dab1006
 800947c:	9d9d9d9d 	.word	0x9d9d9d9d
 8009480:	a39d      	.short	0xa39d
 8009482:	9d          	.byte	0x9d
 8009483:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009484:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800948c:	69a3      	ldr	r3, [r4, #24]
 800948e:	4620      	mov	r0, r4
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8009494:	23c9      	movs	r3, #201	; 0xc9
 8009496:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009498:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800949c:	4620      	mov	r0, r4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80094a2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80094a4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80094a6:	d146      	bne.n	8009536 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 80094a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80094aa:	2d03      	cmp	r5, #3
 80094ac:	d007      	beq.n	80094be <jpeg_consume_input+0x5a>
 80094ae:	2d04      	cmp	r5, #4
 80094b0:	d064      	beq.n	800957c <jpeg_consume_input+0x118>
 80094b2:	2d01      	cmp	r5, #1
 80094b4:	d17b      	bne.n	80095ae <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 80094b6:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80094ba:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 80094bc:	e01c      	b.n	80094f8 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 80094be:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80094c2:	b10b      	cbz	r3, 80094c8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80094c4:	2303      	movs	r3, #3
 80094c6:	e056      	b.n	8009576 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 80094c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d034      	beq.n	800953a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 80094d0:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	d04d      	beq.n	8009574 <jpeg_consume_input+0x110>
 80094d8:	2a01      	cmp	r2, #1
 80094da:	d008      	beq.n	80094ee <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	2174      	movs	r1, #116	; 0x74
 80094e0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80094e2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f04f 31ff 	mov.w	r1, #4294967295
 80094ec:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80094ee:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 80094f2:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 80094f4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 80094f8:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 80094fc:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 80094fe:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009500:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009504:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8009506:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800950a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800950e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009510:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009512:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009516:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800951a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 800951c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 800951e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009522:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009524:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009528:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 800952c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009530:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009532:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009534:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009536:	4630      	mov	r0, r6
 8009538:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800953a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800953e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009540:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009542:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009544:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009548:	d10e      	bne.n	8009568 <jpeg_consume_input+0x104>
 800954a:	2902      	cmp	r1, #2
 800954c:	d101      	bne.n	8009552 <jpeg_consume_input+0xee>
 800954e:	2a03      	cmp	r2, #3
 8009550:	d0b8      	beq.n	80094c4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	621a      	str	r2, [r3, #32]
 8009556:	2271      	movs	r2, #113	; 0x71
 8009558:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800955c:	615a      	str	r2, [r3, #20]
 800955e:	2101      	movs	r1, #1
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	4620      	mov	r0, r4
 8009564:	4798      	blx	r3
 8009566:	e7ad      	b.n	80094c4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009568:	2852      	cmp	r0, #82	; 0x52
 800956a:	d1f2      	bne.n	8009552 <jpeg_consume_input+0xee>
 800956c:	2947      	cmp	r1, #71	; 0x47
 800956e:	d1f0      	bne.n	8009552 <jpeg_consume_input+0xee>
 8009570:	2a42      	cmp	r2, #66	; 0x42
 8009572:	d1ee      	bne.n	8009552 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009574:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009576:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800957a:	e7ba      	b.n	80094f2 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 800957c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009580:	b193      	cbz	r3, 80095a8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009582:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009586:	b17a      	cbz	r2, 80095a8 <jpeg_consume_input+0x144>
 8009588:	2a02      	cmp	r2, #2
 800958a:	d008      	beq.n	800959e <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	2174      	movs	r1, #116	; 0x74
 8009590:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009592:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f04f 31ff 	mov.w	r1, #4294967295
 800959c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 800959e:	2305      	movs	r3, #5
 80095a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 80095a4:	2304      	movs	r3, #4
 80095a6:	e7a5      	b.n	80094f4 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 80095a8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80095ac:	e7fa      	b.n	80095a4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e783      	b.n	80094ba <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80095b2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 80095b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80095be:	6803      	ldr	r3, [r0, #0]
 80095c0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 80095c2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80095c4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4798      	blx	r3
 80095cc:	e7b3      	b.n	8009536 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 80095ce:	2601      	movs	r6, #1
  return retcode;
 80095d0:	e7b1      	b.n	8009536 <jpeg_consume_input+0xd2>
 80095d2:	bf00      	nop
 80095d4:	3ff00000 	.word	0x3ff00000

080095d8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 80095d8:	6942      	ldr	r2, [r0, #20]
 80095da:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 80095de:	2b01      	cmp	r3, #1
{
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4604      	mov	r4, r0
 80095e4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 80095e6:	d905      	bls.n	80095f4 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80095e8:	6803      	ldr	r3, [r0, #0]
 80095ea:	2115      	movs	r1, #21
 80095ec:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7ff ff35 	bl	8009464 <jpeg_consume_input>
  switch (retcode) {
 80095fa:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 80095fc:	4605      	mov	r5, r0
  switch (retcode) {
 80095fe:	d00b      	beq.n	8009618 <jpeg_read_header+0x40>
 8009600:	2802      	cmp	r0, #2
 8009602:	d109      	bne.n	8009618 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009604:	b12e      	cbz	r6, 8009612 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	2235      	movs	r2, #53	; 0x35
 800960a:	4620      	mov	r0, r4
 800960c:	615a      	str	r2, [r3, #20]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009612:	4620      	mov	r0, r4
 8009614:	f7ff fea6 	bl	8009364 <jpeg_abort>
}
 8009618:	4628      	mov	r0, r5
 800961a:	bd70      	pop	{r4, r5, r6, pc}

0800961c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800961c:	6943      	ldr	r3, [r0, #20]
 800961e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009622:	2a01      	cmp	r2, #1
{
 8009624:	b510      	push	{r4, lr}
 8009626:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009628:	d81f      	bhi.n	800966a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800962a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800962c:	bb0a      	cbnz	r2, 8009672 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800962e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009632:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009634:	429a      	cmp	r2, r3
 8009636:	d204      	bcs.n	8009642 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009638:	6803      	ldr	r3, [r0, #0]
 800963a:	2245      	movs	r2, #69	; 0x45
 800963c:	615a      	str	r2, [r3, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009642:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009646:	4620      	mov	r0, r4
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800964c:	23d2      	movs	r3, #210	; 0xd2
 800964e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009650:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009654:	695a      	ldr	r2, [r3, #20]
 8009656:	b1a2      	cbz	r2, 8009682 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8009658:	69a3      	ldr	r3, [r4, #24]
 800965a:	4620      	mov	r0, r4
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff fe7f 	bl	8009364 <jpeg_abort>
  return TRUE;
 8009666:	2001      	movs	r0, #1
 8009668:	e010      	b.n	800968c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800966a:	2bcf      	cmp	r3, #207	; 0xcf
 800966c:	d0ee      	beq.n	800964c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800966e:	2bd2      	cmp	r3, #210	; 0xd2
 8009670:	d0ee      	beq.n	8009650 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009672:	6822      	ldr	r2, [r4, #0]
 8009674:	2115      	movs	r1, #21
 8009676:	4620      	mov	r0, r4
 8009678:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800967c:	6813      	ldr	r3, [r2, #0]
 800967e:	4798      	blx	r3
 8009680:	e7e6      	b.n	8009650 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4620      	mov	r0, r4
 8009686:	4798      	blx	r3
 8009688:	2800      	cmp	r0, #0
 800968a:	d1e1      	bne.n	8009650 <jpeg_finish_decompress+0x34>
}
 800968c:	bd10      	pop	{r4, pc}

0800968e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800968e:	6943      	ldr	r3, [r0, #20]
 8009690:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009698:	d008      	beq.n	80096ac <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800969a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80096a8:	23cc      	movs	r3, #204	; 0xcc
 80096aa:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80096ac:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 80096b0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 80096b2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	b9f3      	cbnz	r3, 80096f8 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 80096ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 80096bc:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bf14      	ite	ne
 80096c2:	23ce      	movne	r3, #206	; 0xce
 80096c4:	23cd      	moveq	r3, #205	; 0xcd
 80096c6:	6163      	str	r3, [r4, #20]
}
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	b123      	cbz	r3, 80096da <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80096d0:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 80096d2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80096da:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80096de:	462a      	mov	r2, r5
 80096e0:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 80096e2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80096e6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80096ea:	2300      	movs	r3, #0
 80096ec:	4619      	mov	r1, r3
 80096ee:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 80096f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80096f4:	42bb      	cmp	r3, r7
 80096f6:	d011      	beq.n	800971c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 80096f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80096fc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80096fe:	4291      	cmp	r1, r2
 8009700:	d3e4      	bcc.n	80096cc <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009702:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009706:	4620      	mov	r0, r4
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800970c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009710:	4620      	mov	r0, r4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009716:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800971a:	e7ca      	b.n	80096b2 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 800971c:	2000      	movs	r0, #0
 800971e:	e7d3      	b.n	80096c8 <output_pass_setup+0x3a>

08009720 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009720:	6943      	ldr	r3, [r0, #20]
 8009722:	2bca      	cmp	r3, #202	; 0xca
{
 8009724:	b510      	push	{r4, lr}
 8009726:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009728:	d109      	bne.n	800973e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800972a:	f005 f8f7 	bl	800e91c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800972e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009730:	b11b      	cbz	r3, 800973a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009732:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009734:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009736:	6163      	str	r3, [r4, #20]
}
 8009738:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800973a:	23cb      	movs	r3, #203	; 0xcb
 800973c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800973e:	6962      	ldr	r2, [r4, #20]
 8009740:	2acb      	cmp	r2, #203	; 0xcb
 8009742:	d12c      	bne.n	800979e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009744:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	b1fb      	cbz	r3, 800978c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	b113      	cbz	r3, 8009756 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4620      	mov	r0, r4
 8009754:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009756:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800975a:	4620      	mov	r0, r4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009760:	2800      	cmp	r0, #0
 8009762:	d0e9      	beq.n	8009738 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009764:	2802      	cmp	r0, #2
 8009766:	d011      	beq.n	800978c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ee      	beq.n	800974c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800976e:	f020 0002 	bic.w	r0, r0, #2
 8009772:	2801      	cmp	r0, #1
 8009774:	d1ea      	bne.n	800974c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	6899      	ldr	r1, [r3, #8]
 800977a:	3201      	adds	r2, #1
 800977c:	428a      	cmp	r2, r1
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	dbe4      	blt.n	800974c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009782:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009786:	440a      	add	r2, r1
 8009788:	609a      	str	r2, [r3, #8]
 800978a:	e7df      	b.n	800974c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800978c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009790:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009794:	4620      	mov	r0, r4
}
 8009796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800979a:	f7ff bf78 	b.w	800968e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800979e:	2acc      	cmp	r2, #204	; 0xcc
 80097a0:	d0f8      	beq.n	8009794 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	2115      	movs	r1, #21
 80097a6:	4620      	mov	r0, r4
 80097a8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4798      	blx	r3
 80097b0:	e7f0      	b.n	8009794 <jpeg_start_decompress+0x74>

080097b2 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 80097b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b4:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 80097b6:	6942      	ldr	r2, [r0, #20]
{
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 80097bc:	2acd      	cmp	r2, #205	; 0xcd
 80097be:	d005      	beq.n	80097cc <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80097c0:	6803      	ldr	r3, [r0, #0]
 80097c2:	2115      	movs	r1, #21
 80097c4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 80097cc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80097d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d30a      	bcc.n	80097ec <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	227e      	movs	r2, #126	; 0x7e
 80097da:	4620      	mov	r0, r4
 80097dc:	f04f 31ff 	mov.w	r1, #4294967295
 80097e0:	615a      	str	r2, [r3, #20]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4798      	blx	r3
    return 0;
 80097e6:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 80097e8:	b003      	add	sp, #12
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 80097ec:	68a0      	ldr	r0, [r4, #8]
 80097ee:	b120      	cbz	r0, 80097fa <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 80097f0:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80097f4:	6803      	ldr	r3, [r0, #0]
 80097f6:	4620      	mov	r0, r4
 80097f8:	4798      	blx	r3
  row_ctr = 0;
 80097fa:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 80097fc:	4620      	mov	r0, r4
 80097fe:	aa01      	add	r2, sp, #4
 8009800:	4629      	mov	r1, r5
  row_ctr = 0;
 8009802:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009804:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009808:	685f      	ldr	r7, [r3, #4]
 800980a:	4633      	mov	r3, r6
 800980c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800980e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009812:	9801      	ldr	r0, [sp, #4]
 8009814:	4403      	add	r3, r0
 8009816:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800981a:	e7e5      	b.n	80097e8 <jpeg_read_scanlines+0x36>

0800981c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800981c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800981e:	6984      	ldr	r4, [r0, #24]
{
 8009820:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	b943      	cbnz	r3, 8009838 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 8009826:	68e3      	ldr	r3, [r4, #12]
 8009828:	4798      	blx	r3
 800982a:	b928      	cbnz	r0, 8009838 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	2219      	movs	r2, #25
 8009830:	4628      	mov	r0, r5
 8009832:	615a      	str	r2, [r3, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009838:	6863      	ldr	r3, [r4, #4]
 800983a:	3b01      	subs	r3, #1
 800983c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	6022      	str	r2, [r4, #0]
}
 8009844:	7818      	ldrb	r0, [r3, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}

08009848 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984c:	4680      	mov	r8, r0
 800984e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009850:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009854:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 8009858:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 800985c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009860:	db20      	blt.n	80098a4 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009862:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009864:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <arith_decode+0xd8>)
 8009866:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800986a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800986e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 8009870:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009874:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009878:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800987c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009880:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8009882:	428d      	cmp	r5, r1
 8009884:	db3c      	blt.n	8009900 <arith_decode+0xb8>
    e->c -= temp;
 8009886:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009888:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800988a:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 800988e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009892:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009894:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8009896:	dd2e      	ble.n	80098f6 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009898:	ea85 050e 	eor.w	r5, r5, lr
 800989c:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800989e:	09c0      	lsrs	r0, r0, #7
 80098a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 80098a4:	3901      	subs	r1, #1
 80098a6:	2900      	cmp	r1, #0
 80098a8:	6121      	str	r1, [r4, #16]
 80098aa:	da1a      	bge.n	80098e2 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 80098ac:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 80098b0:	b96b      	cbnz	r3, 80098ce <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 80098b2:	4640      	mov	r0, r8
 80098b4:	f7ff ffb2 	bl	800981c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 80098b8:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 80098ba:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 80098bc:	d108      	bne.n	80098d0 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 80098be:	4640      	mov	r0, r8
 80098c0:	f7ff ffac 	bl	800981c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 80098c4:	28ff      	cmp	r0, #255	; 0xff
 80098c6:	d0fa      	beq.n	80098be <arith_decode+0x76>
	  if (data == 0)
 80098c8:	b110      	cbz	r0, 80098d0 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 80098ca:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 80098ce:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 80098d0:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80098d2:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 80098d4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80098d8:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 80098dc:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80098de:	d404      	bmi.n	80098ea <arith_decode+0xa2>
 80098e0:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	60e3      	str	r3, [r4, #12]
 80098e8:	e7b6      	b.n	8009858 <arith_decode+0x10>
	if (++e->ct == 0)
 80098ea:	3309      	adds	r3, #9
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f7      	bne.n	80098e2 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80098f2:	60e7      	str	r7, [r4, #12]
 80098f4:	e7f5      	b.n	80098e2 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80098f6:	407d      	eors	r5, r7
 80098f8:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 80098fa:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 80098fe:	e7ce      	b.n	800989e <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009900:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009904:	dacb      	bge.n	800989e <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009906:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800990a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800990c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800990e:	dd02      	ble.n	8009916 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009910:	407b      	eors	r3, r7
 8009912:	7033      	strb	r3, [r6, #0]
 8009914:	e7f1      	b.n	80098fa <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009916:	ea83 030e 	eor.w	r3, r3, lr
 800991a:	7033      	strb	r3, [r6, #0]
 800991c:	e7bf      	b.n	800989e <arith_decode+0x56>
 800991e:	bf00      	nop
 8009920:	0802c724 	.word	0x0802c724

08009924 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009928:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800992c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 8009930:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009932:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009936:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800993a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 808a 	beq.w	8009a56 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 8009942:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8009946:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800994a:	b95a      	cbnz	r2, 8009964 <start_pass+0x40>
      if (cinfo->Se != 0)
 800994c:	b1a1      	cbz	r1, 8009978 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	2611      	movs	r6, #17
 8009952:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8009956:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800995a:	6258      	str	r0, [r3, #36]	; 0x24
 800995c:	4620      	mov	r0, r4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4798      	blx	r3
 8009962:	e00f      	b.n	8009984 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009964:	428a      	cmp	r2, r1
 8009966:	dcf2      	bgt.n	800994e <start_pass+0x2a>
 8009968:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800996c:	428b      	cmp	r3, r1
 800996e:	dbee      	blt.n	800994e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 8009970:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009974:	2b01      	cmp	r3, #1
 8009976:	d1ea      	bne.n	800994e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8009978:	b117      	cbz	r7, 8009980 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800997a:	1e7b      	subs	r3, r7, #1
 800997c:	4283      	cmp	r3, r0
 800997e:	d1e6      	bne.n	800994e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009980:	280d      	cmp	r0, #13
 8009982:	dce4      	bgt.n	800994e <start_pass+0x2a>
 8009984:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8009988:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800998c:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009990:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009994:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009998:	454b      	cmp	r3, r9
 800999a:	dc1d      	bgt.n	80099d8 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800999c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d153      	bne.n	8009a4c <start_pass+0x128>
      if (cinfo->Ss == 0)
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	d14f      	bne.n	8009a48 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 80099a8:	4b63      	ldr	r3, [pc, #396]	; (8009b38 <start_pass+0x214>)
{
 80099aa:	f04f 0800 	mov.w	r8, #0
 80099ae:	f105 0914 	add.w	r9, r5, #20
 80099b2:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80099b4:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 80099b6:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80099b8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80099bc:	4543      	cmp	r3, r8
 80099be:	dc63      	bgt.n	8009a88 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 80099c0:	2300      	movs	r3, #0
  entropy->a = 0;
 80099c2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80099c6:	f06f 030f 	mvn.w	r3, #15
 80099ca:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80099cc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80099d0:	636b      	str	r3, [r5, #52]	; 0x34
}
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 80099d8:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 80099dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 80099e0:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 80099e2:	0230      	lsls	r0, r6, #8
 80099e4:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80099e8:	b162      	cbz	r2, 8009a04 <start_pass+0xe0>
 80099ea:	580a      	ldr	r2, [r1, r0]
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	da09      	bge.n	8009a04 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	2300      	movs	r3, #0
 80099f4:	f04f 31ff 	mov.w	r1, #4294967295
 80099f8:	4620      	mov	r0, r4
 80099fa:	61d3      	str	r3, [r2, #28]
 80099fc:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009a00:	6852      	ldr	r2, [r2, #4]
 8009a02:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009a04:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8009a08:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8009a0c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009a10:	42ba      	cmp	r2, r7
 8009a12:	da02      	bge.n	8009a1a <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009a14:	f109 0901 	add.w	r9, r9, #1
 8009a18:	e7ba      	b.n	8009990 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009a1a:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8009a1e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009a22:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8009a26:	4291      	cmp	r1, r2
 8009a28:	d008      	beq.n	8009a3c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8009a30:	4620      	mov	r0, r4
 8009a32:	61d7      	str	r7, [r2, #28]
 8009a34:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009a38:	6852      	ldr	r2, [r2, #4]
 8009a3a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8009a3c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009a40:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8009a42:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009a46:	e7e1      	b.n	8009a0c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8009a48:	4b3c      	ldr	r3, [pc, #240]	; (8009b3c <start_pass+0x218>)
 8009a4a:	e7ae      	b.n	80099aa <start_pass+0x86>
      if (cinfo->Ss == 0)
 8009a4c:	b90a      	cbnz	r2, 8009a52 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8009a4e:	4b3c      	ldr	r3, [pc, #240]	; (8009b40 <start_pass+0x21c>)
 8009a50:	e7ab      	b.n	80099aa <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8009a52:	4b3c      	ldr	r3, [pc, #240]	; (8009b44 <start_pass+0x220>)
 8009a54:	e7a9      	b.n	80099aa <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009a56:	b96a      	cbnz	r2, 8009a74 <start_pass+0x150>
 8009a58:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8009a5c:	b953      	cbnz	r3, 8009a74 <start_pass+0x150>
 8009a5e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8009a62:	b93b      	cbnz	r3, 8009a74 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009a64:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009a68:	2b3f      	cmp	r3, #63	; 0x3f
 8009a6a:	dc0b      	bgt.n	8009a84 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009a6c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d007      	beq.n	8009a84 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	227d      	movs	r2, #125	; 0x7d
 8009a78:	f04f 31ff 	mov.w	r1, #4294967295
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	615a      	str	r2, [r3, #20]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8009a84:	4b30      	ldr	r3, [pc, #192]	; (8009b48 <start_pass+0x224>)
 8009a86:	e790      	b.n	80099aa <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009a88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009a8c:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009a90:	b133      	cbz	r3, 8009aa0 <start_pass+0x17c>
 8009a92:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009a96:	bb43      	cbnz	r3, 8009aea <start_pass+0x1c6>
 8009a98:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d13a      	bne.n	8009b16 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 8009aa0:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009aa4:	2f0f      	cmp	r7, #15
 8009aa6:	d906      	bls.n	8009ab6 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	2232      	movs	r2, #50	; 0x32
 8009aac:	4620      	mov	r0, r4
 8009aae:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8009ab6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	b933      	cbnz	r3, 8009acc <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	2240      	movs	r2, #64	; 0x40
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4798      	blx	r3
 8009aca:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8009acc:	2240      	movs	r2, #64	; 0x40
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ad2:	f01f fbbb 	bl	802924c <memset>
      entropy->last_dc_val[ci] = 0;
 8009ad6:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8009ada:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009ade:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009ae2:	b9eb      	cbnz	r3, 8009b20 <start_pass+0x1fc>
 8009ae4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009ae8:	b1ab      	cbz	r3, 8009b16 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 8009aea:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009aee:	2f0f      	cmp	r7, #15
 8009af0:	d819      	bhi.n	8009b26 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 8009af2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af8:	b93b      	cbnz	r3, 8009b0a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009afa:	6863      	ldr	r3, [r4, #4]
 8009afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b00:	2101      	movs	r1, #1
 8009b02:	4620      	mov	r0, r4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4798      	blx	r3
 8009b08:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b0e:	2100      	movs	r1, #0
 8009b10:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009b12:	f01f fb9b 	bl	802924c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009b16:	f108 0801 	add.w	r8, r8, #1
 8009b1a:	f109 0904 	add.w	r9, r9, #4
 8009b1e:	e74b      	b.n	80099b8 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009b20:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009b24:	e7e0      	b.n	8009ae8 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	2232      	movs	r2, #50	; 0x32
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4798      	blx	r3
 8009b34:	e7dd      	b.n	8009af2 <start_pass+0x1ce>
 8009b36:	bf00      	nop
 8009b38:	0800a0ef 	.word	0x0800a0ef
 8009b3c:	08009fbb 	.word	0x08009fbb
 8009b40:	08009f69 	.word	0x08009f69
 8009b44:	08009e43 	.word	0x08009e43
 8009b48:	08009bef 	.word	0x08009bef

08009b4c <process_restart>:
{
 8009b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009b50:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8009b54:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	4798      	blx	r3
 8009b5a:	b928      	cbnz	r0, 8009b68 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	2219      	movs	r2, #25
 8009b60:	4620      	mov	r0, r4
 8009b62:	615a      	str	r2, [r3, #20]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4798      	blx	r3
{
 8009b68:	2600      	movs	r6, #0
 8009b6a:	f105 0714 	add.w	r7, r5, #20
 8009b6e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009b72:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009b74:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009b78:	42b3      	cmp	r3, r6
 8009b7a:	dc0a      	bgt.n	8009b92 <process_restart+0x46>
  entropy->c = 0;
 8009b7c:	2300      	movs	r3, #0
  entropy->a = 0;
 8009b7e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009b82:	f06f 030f 	mvn.w	r3, #15
 8009b86:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8009b88:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009b8c:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009b92:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009b96:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009b9a:	b12b      	cbz	r3, 8009ba8 <process_restart+0x5c>
 8009b9c:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009ba0:	b9ab      	cbnz	r3, 8009bce <process_restart+0x82>
 8009ba2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009ba6:	b9e3      	cbnz	r3, 8009be2 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8009ba8:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009bac:	2240      	movs	r2, #64	; 0x40
 8009bae:	2100      	movs	r1, #0
 8009bb0:	330e      	adds	r3, #14
 8009bb2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009bb6:	f01f fb49 	bl	802924c <memset>
      entropy->last_dc_val[ci] = 0;
 8009bba:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 8009bbe:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009bc2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009bc6:	b97b      	cbnz	r3, 8009be8 <process_restart+0x9c>
 8009bc8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009bcc:	b14b      	cbz	r3, 8009be2 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009bce:	f8da 3018 	ldr.w	r3, [sl, #24]
 8009bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	331e      	adds	r3, #30
 8009bda:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009bde:	f01f fb35 	bl	802924c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009be2:	3601      	adds	r6, #1
 8009be4:	3704      	adds	r7, #4
 8009be6:	e7c5      	b.n	8009b74 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009be8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009bec:	e7ee      	b.n	8009bcc <process_restart+0x80>

08009bee <decode_mcu>:
{
 8009bee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009bf2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009bf6:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009bf8:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8009bfc:	ed2d 8b02 	vpush	{d8}
 8009c00:	b087      	sub	sp, #28
 8009c02:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8009c04:	b133      	cbz	r3, 8009c14 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8009c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009c08:	b90b      	cbnz	r3, 8009c0e <decode_mcu+0x20>
      process_restart(cinfo);
 8009c0a:	f7ff ff9f 	bl	8009b4c <process_restart>
    entropy->restarts_to_go--;
 8009c0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009c10:	3b01      	subs	r3, #1
 8009c12:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009c14:	692b      	ldr	r3, [r5, #16]
 8009c16:	3301      	adds	r3, #1
 8009c18:	f000 809f 	beq.w	8009d5a <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 8009c1c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c20:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8009c22:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c24:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8009c28:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009c2a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 8009c2e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c32:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009c36:	42bb      	cmp	r3, r7
 8009c38:	f340 808f 	ble.w	8009d5a <decode_mcu+0x16c>
    block = MCU_data[blkn];
 8009c3c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 8009c3e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009c40:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 8009c42:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009c46:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8009c48:	f852 3b04 	ldr.w	r3, [r2], #4
 8009c4c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 8009c4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009c52:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8009c56:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009c5a:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 8009c5e:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 8009c60:	6952      	ldr	r2, [r2, #20]
 8009c62:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8009c66:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009c68:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8009c6c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 8009c6e:	4631      	mov	r1, r6
 8009c70:	f7ff fdea 	bl	8009848 <arith_decode>
 8009c74:	bb68      	cbnz	r0, 8009cd2 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8009c76:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8009c7a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009c7e:	9a00      	ldr	r2, [sp, #0]
 8009c80:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 8009c82:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80c4 	beq.w	8009e14 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8009c8c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 8009c8e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 8009c90:	699b      	ldr	r3, [r3, #24]
    k = 0;
 8009c92:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009c96:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8009c9a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8009c9e:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009ca2:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8009ca4:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009ca8:	4649      	mov	r1, r9
 8009caa:	f7ff fdcd 	bl	8009848 <arith_decode>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f040 80b0 	bne.w	8009e14 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 8009cb4:	f109 0101 	add.w	r1, r9, #1
 8009cb8:	4620      	mov	r0, r4
	k++;
 8009cba:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 8009cbc:	f7ff fdc4 	bl	8009848 <arith_decode>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d16e      	bne.n	8009da2 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 8009cc4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8009cc8:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8009ccc:	42b2      	cmp	r2, r6
 8009cce:	dcf1      	bgt.n	8009cb4 <decode_mcu+0xc6>
 8009cd0:	e038      	b.n	8009d44 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 8009cd2:	1c71      	adds	r1, r6, #1
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7ff fdb7 	bl	8009848 <arith_decode>
      st += 2; st += sign;
 8009cda:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009cdc:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009cde:	4620      	mov	r0, r4
      st += 2; st += sign;
 8009ce0:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009ce4:	4651      	mov	r1, sl
 8009ce6:	f7ff fdaf 	bl	8009848 <arith_decode>
 8009cea:	4606      	mov	r6, r0
 8009cec:	b140      	cbz	r0, 8009d00 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009cee:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8009cf2:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8009cf6:	4651      	mov	r1, sl
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f7ff fda5 	bl	8009848 <arith_decode>
 8009cfe:	b9e8      	cbnz	r0, 8009d3c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009d00:	9b02      	ldr	r3, [sp, #8]
 8009d02:	4423      	add	r3, r4
 8009d04:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009d08:	4699      	mov	r9, r3
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	fa03 f202 	lsl.w	r2, r3, r2
 8009d10:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8009d14:	da2a      	bge.n	8009d6c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009d16:	2200      	movs	r2, #0
      st += 14;
 8009d18:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8009d1c:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009d1e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 8009d22:	1076      	asrs	r6, r6, #1
 8009d24:	d130      	bne.n	8009d88 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 8009d26:	f1b8 0f00 	cmp.w	r8, #0
 8009d2a:	d137      	bne.n	8009d9c <decode_mcu+0x1ae>
 8009d2c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8009d30:	f8db 2014 	ldr.w	r2, [fp, #20]
 8009d34:	444a      	add	r2, r9
 8009d36:	f8cb 2014 	str.w	r2, [fp, #20]
 8009d3a:	e79e      	b.n	8009c7a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8009d3c:	0076      	lsls	r6, r6, #1
 8009d3e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8009d42:	d110      	bne.n	8009d66 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	2275      	movs	r2, #117	; 0x75
 8009d48:	f04f 31ff 	mov.w	r1, #4294967295
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	615a      	str	r2, [r3, #20]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	612b      	str	r3, [r5, #16]
}
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	b007      	add	sp, #28
 8009d5e:	ecbd 8b02 	vpop	{d8}
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009d66:	f10a 0a01 	add.w	sl, sl, #1
 8009d6a:	e7c4      	b.n	8009cf6 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009d6c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8009d70:	2301      	movs	r3, #1
 8009d72:	fa03 f202 	lsl.w	r2, r3, r2
 8009d76:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009d7a:	bfcc      	ite	gt
 8009d7c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009d80:	f108 0201 	addle.w	r2, r8, #1
 8009d84:	0092      	lsls	r2, r2, #2
 8009d86:	e7c7      	b.n	8009d18 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 8009d88:	4620      	mov	r0, r4
 8009d8a:	9102      	str	r1, [sp, #8]
 8009d8c:	f7ff fd5c 	bl	8009848 <arith_decode>
 8009d90:	9902      	ldr	r1, [sp, #8]
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d0c5      	beq.n	8009d22 <decode_mcu+0x134>
 8009d96:	ea49 0906 	orr.w	r9, r9, r6
 8009d9a:	e7c2      	b.n	8009d22 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 8009d9c:	ea6f 0909 	mvn.w	r9, r9
 8009da0:	e7c6      	b.n	8009d30 <decode_mcu+0x142>
      st += 2;
 8009da2:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009da6:	ee18 1a10 	vmov	r1, s16
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff fd4c 	bl	8009848 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009db0:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009db2:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7ff fd47 	bl	8009848 <arith_decode>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	b1a8      	cbz	r0, 8009dea <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff fd41 	bl	8009848 <arith_decode>
 8009dc6:	b180      	cbz	r0, 8009dea <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009dc8:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8009dcc:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 8009dd0:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009dd4:	42b1      	cmp	r1, r6
 8009dd6:	bfac      	ite	ge
 8009dd8:	21bd      	movge	r1, #189	; 0xbd
 8009dda:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8009ddc:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 8009de0:	4649      	mov	r1, r9
 8009de2:	4620      	mov	r0, r4
 8009de4:	f7ff fd30 	bl	8009848 <arith_decode>
 8009de8:	b9b0      	cbnz	r0, 8009e18 <decode_mcu+0x22a>
      st += 14;
 8009dea:	f109 010e 	add.w	r1, r9, #14
      v = m;
 8009dee:	46c1      	mov	r9, r8
      while (m >>= 1)
 8009df0:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009df4:	d118      	bne.n	8009e28 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	bb03      	cbnz	r3, 8009e3c <decode_mcu+0x24e>
 8009dfa:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	9900      	ldr	r1, [sp, #0]
 8009e02:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009e06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8009e0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009e0e:	42b3      	cmp	r3, r6
 8009e10:	f73f af43 	bgt.w	8009c9a <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009e14:	3701      	adds	r7, #1
 8009e16:	e70c      	b.n	8009c32 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8009e18:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009e1c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 8009e20:	d090      	beq.n	8009d44 <decode_mcu+0x156>
	    st += 1;
 8009e22:	f109 0901 	add.w	r9, r9, #1
 8009e26:	e7db      	b.n	8009de0 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 8009e28:	4620      	mov	r0, r4
 8009e2a:	9102      	str	r1, [sp, #8]
 8009e2c:	f7ff fd0c 	bl	8009848 <arith_decode>
 8009e30:	9902      	ldr	r1, [sp, #8]
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0dc      	beq.n	8009df0 <decode_mcu+0x202>
 8009e36:	ea49 0908 	orr.w	r9, r9, r8
 8009e3a:	e7d9      	b.n	8009df0 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 8009e3c:	ea6f 0209 	mvn.w	r2, r9
 8009e40:	e7dd      	b.n	8009dfe <decode_mcu+0x210>

08009e42 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8009e42:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009e4e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009e52:	ed2d 8b02 	vpush	{d8}
 8009e56:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8009e58:	b133      	cbz	r3, 8009e68 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8009e5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009e5c:	b90b      	cbnz	r3, 8009e62 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 8009e5e:	f7ff fe75 	bl	8009b4c <process_restart>
    entropy->restarts_to_go--;
 8009e62:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009e64:	3b01      	subs	r3, #1
 8009e66:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009e68:	6933      	ldr	r3, [r6, #16]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	d076      	beq.n	8009f5c <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009e6e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009e72:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009e74:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8009e78:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009e7c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009e7e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 8009e82:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009e86:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 8009e88:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009e8c:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009e90:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009e92:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 8009e94:	2f00      	cmp	r7, #0
 8009e96:	dc37      	bgt.n	8009f08 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009e98:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009e9c:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009ea0:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009ea2:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 8009ea6:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009eaa:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009eae:	42ab      	cmp	r3, r5
 8009eb0:	db54      	blt.n	8009f5c <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009eb2:	1e6b      	subs	r3, r5, #1
 8009eb4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 8009eb6:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009eb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009ebc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009ec0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 8009ec4:	dd05      	ble.n	8009ed2 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009ec6:	4651      	mov	r1, sl
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff fcbd 	bl	8009848 <arith_decode>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d144      	bne.n	8009f5c <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 8009ed2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 8009ed6:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 8009ed8:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 8009edc:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8009ee0:	b1d1      	cbz	r1, 8009f18 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 8009ee2:	f10a 0102 	add.w	r1, sl, #2
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7ff fcae 	bl	8009848 <arith_decode>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d0dc      	beq.n	8009eaa <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 8009ef0:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 8009ef4:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 8009ef8:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 8009efa:	bfb4      	ite	lt
 8009efc:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 8009efe:	9a01      	ldrge	r2, [sp, #4]
 8009f00:	4413      	add	r3, r2
 8009f02:	f8a8 3000 	strh.w	r3, [r8]
 8009f06:	e7d0      	b.n	8009eaa <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 8009f08:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009f0c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1c1      	bne.n	8009e98 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 8009f14:	3f01      	subs	r7, #1
 8009f16:	e7bd      	b.n	8009e94 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 8009f18:	f10a 0101 	add.w	r1, sl, #1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7ff fc93 	bl	8009848 <arith_decode>
 8009f22:	b150      	cbz	r0, 8009f3a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009f24:	ee18 1a10 	vmov	r1, s16
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7ff fc8d 	bl	8009848 <arith_decode>
	  *thiscoef = m1;
 8009f2e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8009f32:	2800      	cmp	r0, #0
 8009f34:	bf18      	it	ne
 8009f36:	4613      	movne	r3, r2
 8009f38:	e7e3      	b.n	8009f02 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 8009f3a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8009f3e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 8009f42:	42aa      	cmp	r2, r5
 8009f44:	dac5      	bge.n	8009ed2 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	2275      	movs	r2, #117	; 0x75
 8009f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f4e:	4620      	mov	r0, r4
 8009f50:	615a      	str	r2, [r3, #20]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5a:	6133      	str	r3, [r6, #16]
}
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	b005      	add	sp, #20
 8009f60:	ecbd 8b02 	vpop	{d8}
 8009f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f68 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8009f68:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	4604      	mov	r4, r0
 8009f72:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009f74:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009f78:	b133      	cbz	r3, 8009f88 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8009f7a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009f7c:	b90b      	cbnz	r3, 8009f82 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 8009f7e:	f7ff fde5 	bl	8009b4c <process_restart>
    entropy->restarts_to_go--;
 8009f82:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009f84:	3b01      	subs	r3, #1
 8009f86:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009f88:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8009f8c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8009f8e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009f90:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009f92:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009f94:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	dc02      	bgt.n	8009fa2 <decode_mcu_DC_refine+0x3a>
}
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f7ff fc4f 	bl	8009848 <arith_decode>
 8009faa:	b120      	cbz	r0, 8009fb6 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8009fac:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8009fb0:	8813      	ldrh	r3, [r2, #0]
 8009fb2:	433b      	orrs	r3, r7
 8009fb4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	e7ec      	b.n	8009f94 <decode_mcu_DC_refine+0x2c>

08009fba <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8009fba:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	b087      	sub	sp, #28
 8009fc6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009fc8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009fcc:	b133      	cbz	r3, 8009fdc <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009fce:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 8009fd2:	f7ff fdbb 	bl	8009b4c <process_restart>
    entropy->restarts_to_go--;
 8009fd6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009fdc:	6933      	ldr	r3, [r6, #16]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	d01d      	beq.n	800a01e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 8009fe2:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009fe4:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 8009fe8:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 8009fec:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009fee:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009ff2:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 8009ffc:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009ffe:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a002:	42ab      	cmp	r3, r5
 800a004:	db0b      	blt.n	800a01e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a006:	1e69      	subs	r1, r5, #1
 800a008:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a00c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a00e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a012:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a016:	4641      	mov	r1, r8
 800a018:	f7ff fc16 	bl	8009848 <arith_decode>
 800a01c:	b1b0      	cbz	r0, 800a04c <decode_mcu_AC_first+0x92>
}
 800a01e:	2001      	movs	r0, #1
 800a020:	b007      	add	sp, #28
 800a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a026:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a028:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a02c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a030:	42aa      	cmp	r2, r5
 800a032:	da0b      	bge.n	800a04c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	2275      	movs	r2, #117	; 0x75
 800a038:	f04f 31ff 	mov.w	r1, #4294967295
 800a03c:	4620      	mov	r0, r4
 800a03e:	615a      	str	r2, [r3, #20]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a044:	f04f 33ff 	mov.w	r3, #4294967295
 800a048:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a04a:	e7e8      	b.n	800a01e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a04c:	f108 0101 	add.w	r1, r8, #1
 800a050:	4620      	mov	r0, r4
 800a052:	f7ff fbf9 	bl	8009848 <arith_decode>
 800a056:	2800      	cmp	r0, #0
 800a058:	d0e5      	beq.n	800a026 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a05a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a05e:	4659      	mov	r1, fp
 800a060:	4620      	mov	r0, r4
 800a062:	f7ff fbf1 	bl	8009848 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a066:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a068:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7ff fbec 	bl	8009848 <arith_decode>
 800a070:	4607      	mov	r7, r0
 800a072:	b1b0      	cbz	r0, 800a0a2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a074:	4641      	mov	r1, r8
 800a076:	4620      	mov	r0, r4
 800a078:	f7ff fbe6 	bl	8009848 <arith_decode>
 800a07c:	b188      	cbz	r0, 800a0a2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a07e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a080:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a082:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a086:	18e1      	adds	r1, r4, r3
 800a088:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a08c:	42a9      	cmp	r1, r5
 800a08e:	bfac      	ite	ge
 800a090:	21bd      	movge	r1, #189	; 0xbd
 800a092:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a094:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a098:	4641      	mov	r1, r8
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff fbd4 	bl	8009848 <arith_decode>
 800a0a0:	b988      	cbnz	r0, 800a0c6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a0a2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a0a6:	463a      	mov	r2, r7
    while (m >>= 1)
 800a0a8:	107f      	asrs	r7, r7, #1
 800a0aa:	d113      	bne.n	800a0d4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	b9e3      	cbnz	r3, 800a0ea <decode_mcu_AC_first+0x130>
 800a0b0:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a0b2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a0b6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a0ba:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a0bc:	408a      	lsls	r2, r1
 800a0be:	9902      	ldr	r1, [sp, #8]
 800a0c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a0c4:	e79b      	b.n	8009ffe <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a0c6:	007f      	lsls	r7, r7, #1
 800a0c8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a0cc:	d0b2      	beq.n	800a034 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a0ce:	f108 0801 	add.w	r8, r8, #1
 800a0d2:	e7e1      	b.n	800a098 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a0da:	f7ff fbb5 	bl	8009848 <arith_decode>
 800a0de:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0e0      	beq.n	800a0a8 <decode_mcu_AC_first+0xee>
 800a0e6:	433a      	orrs	r2, r7
 800a0e8:	e7de      	b.n	800a0a8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a0ea:	43d2      	mvns	r2, r2
 800a0ec:	e7e1      	b.n	800a0b2 <decode_mcu_AC_first+0xf8>

0800a0ee <decode_mcu_DC_first>:
{
 800a0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a0f2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a0fa:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a0fe:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a100:	b133      	cbz	r3, 800a110 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a102:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a104:	b90b      	cbnz	r3, 800a10a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a106:	f7ff fd21 	bl	8009b4c <process_restart>
    entropy->restarts_to_go--;
 800a10a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a10c:	3b01      	subs	r3, #1
 800a10e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a110:	6933      	ldr	r3, [r6, #16]
 800a112:	3301      	adds	r3, #1
 800a114:	d073      	beq.n	800a1fe <decode_mcu_DC_first+0x110>
 800a116:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a11a:	f04f 0800 	mov.w	r8, #0
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a124:	4543      	cmp	r3, r8
 800a126:	dd6a      	ble.n	800a1fe <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a128:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a12a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a12c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a12e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a132:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a134:	f852 3b04 	ldr.w	r3, [r2], #4
 800a138:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a13a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a13e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a142:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a146:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a14a:	6952      	ldr	r2, [r2, #20]
 800a14c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a150:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a152:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a156:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a158:	4629      	mov	r1, r5
 800a15a:	f7ff fb75 	bl	8009848 <arith_decode>
 800a15e:	b958      	cbnz	r0, 800a178 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a160:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a164:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a168:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a16c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a170:	4093      	lsls	r3, r2
 800a172:	9a02      	ldr	r2, [sp, #8]
 800a174:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a176:	e7d3      	b.n	800a120 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a178:	1c69      	adds	r1, r5, #1
 800a17a:	4620      	mov	r0, r4
 800a17c:	f7ff fb64 	bl	8009848 <arith_decode>
      st += 2; st += sign;
 800a180:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a182:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a184:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a186:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a18a:	4659      	mov	r1, fp
 800a18c:	f7ff fb5c 	bl	8009848 <arith_decode>
 800a190:	4605      	mov	r5, r0
 800a192:	b140      	cbz	r0, 800a1a6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a194:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a198:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a19c:	4659      	mov	r1, fp
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff fb52 	bl	8009848 <arith_decode>
 800a1a4:	b9e0      	cbnz	r0, 800a1e0 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	4423      	add	r3, r4
 800a1aa:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a1ae:	4699      	mov	r9, r3
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	fa03 f202 	lsl.w	r2, r3, r2
 800a1b6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a1ba:	da27      	bge.n	800a20c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a1c2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a1c6:	46a9      	mov	r9, r5
 800a1c8:	106d      	asrs	r5, r5, #1
 800a1ca:	d12d      	bne.n	800a228 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a1cc:	2f00      	cmp	r7, #0
 800a1ce:	d135      	bne.n	800a23c <decode_mcu_DC_first+0x14e>
 800a1d0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a1d4:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a1d8:	444a      	add	r2, r9
 800a1da:	f8ca 2014 	str.w	r2, [sl, #20]
 800a1de:	e7c1      	b.n	800a164 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a1e0:	006d      	lsls	r5, r5, #1
 800a1e2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a1e6:	d10e      	bne.n	800a206 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	2275      	movs	r2, #117	; 0x75
 800a1ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	615a      	str	r2, [r3, #20]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	6133      	str	r3, [r6, #16]
}
 800a1fe:	2001      	movs	r0, #1
 800a200:	b005      	add	sp, #20
 800a202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a206:	f10b 0b01 	add.w	fp, fp, #1
 800a20a:	e7c7      	b.n	800a19c <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a20c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a210:	2301      	movs	r3, #1
 800a212:	fa03 f202 	lsl.w	r2, r3, r2
 800a216:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a21a:	bfcc      	ite	gt
 800a21c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a21e:	1c7a      	addle	r2, r7, #1
 800a220:	0092      	lsls	r2, r2, #2
 800a222:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a226:	e7cc      	b.n	800a1c2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a228:	4620      	mov	r0, r4
 800a22a:	9100      	str	r1, [sp, #0]
 800a22c:	f7ff fb0c 	bl	8009848 <arith_decode>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	2800      	cmp	r0, #0
 800a234:	d0c8      	beq.n	800a1c8 <decode_mcu_DC_first+0xda>
 800a236:	ea49 0905 	orr.w	r9, r9, r5
 800a23a:	e7c5      	b.n	800a1c8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a23c:	ea6f 0909 	mvn.w	r9, r9
 800a240:	e7c8      	b.n	800a1d4 <decode_mcu_DC_first+0xe6>
	...

0800a244 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a244:	6843      	ldr	r3, [r0, #4]
 800a246:	22bc      	movs	r2, #188	; 0xbc
 800a248:	2101      	movs	r1, #1
 800a24a:	681b      	ldr	r3, [r3, #0]
{
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a250:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a254:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a256:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a25a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800a25c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800a260:	2100      	movs	r1, #0
 800a262:	f01e fff3 	bl	802924c <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a266:	2371      	movs	r3, #113	; 0x71
 800a268:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a26c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a270:	b17b      	cbz	r3, 800a292 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a272:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a274:	2101      	movs	r1, #1
 800a276:	6863      	ldr	r3, [r4, #4]
 800a278:	4620      	mov	r0, r4
 800a27a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a27c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4798      	blx	r3
 800a282:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a284:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28a:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800a28e:	42ab      	cmp	r3, r5
 800a290:	dc00      	bgt.n	800a294 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800a292:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800a294:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a298:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a29a:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800a29c:	f01e ffd6 	bl	802924c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a2a0:	e7f2      	b.n	800a288 <jinit_arith_decoder+0x44>
 800a2a2:	bf00      	nop
 800a2a4:	08009925 	.word	0x08009925

0800a2a8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a2a8:	4770      	bx	lr
	...

0800a2ac <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a2ac:	6803      	ldr	r3, [r0, #0]
 800a2ae:	227b      	movs	r2, #123	; 0x7b
 800a2b0:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a2b8:	615a      	str	r2, [r3, #20]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a2be:	69a3      	ldr	r3, [r4, #24]
 800a2c0:	4a02      	ldr	r2, [pc, #8]	; (800a2cc <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a2c2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a2c4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	605a      	str	r2, [r3, #4]
}
 800a2ca:	bd10      	pop	{r4, pc}
 800a2cc:	0802c8ec 	.word	0x0802c8ec

0800a2d0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a2d0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a2d2:	1e0c      	subs	r4, r1, #0
{
 800a2d4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a2d6:	dd08      	ble.n	800a2ea <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a2d8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a2da:	6869      	ldr	r1, [r5, #4]
 800a2dc:	42a1      	cmp	r1, r4
 800a2de:	db05      	blt.n	800a2ec <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a2e0:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a2e2:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a2e4:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a2e6:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a2e8:	602b      	str	r3, [r5, #0]
  }
}
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a2ec:	68eb      	ldr	r3, [r5, #12]
 800a2ee:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800a2f0:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800a2f2:	4798      	blx	r3
 800a2f4:	e7f1      	b.n	800a2da <skip_input_data+0xa>

0800a2f6 <term_source>:
 800a2f6:	4770      	bx	lr

0800a2f8 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a2fe:	460d      	mov	r5, r1
 800a300:	b101      	cbz	r1, 800a304 <jpeg_mem_src+0xc>
 800a302:	b92a      	cbnz	r2, 800a310 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	222b      	movs	r2, #43	; 0x2b
 800a308:	4620      	mov	r0, r4
 800a30a:	615a      	str	r2, [r3, #20]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a310:	69a1      	ldr	r1, [r4, #24]
 800a312:	b929      	cbnz	r1, 800a320 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a314:	6863      	ldr	r3, [r4, #4]
 800a316:	221c      	movs	r2, #28
 800a318:	4620      	mov	r0, r4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a31e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a320:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a322:	4a06      	ldr	r2, [pc, #24]	; (800a33c <jpeg_mem_src+0x44>)
 800a324:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a326:	4a06      	ldr	r2, [pc, #24]	; (800a340 <jpeg_mem_src+0x48>)
 800a328:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a32a:	4a06      	ldr	r2, [pc, #24]	; (800a344 <jpeg_mem_src+0x4c>)
 800a32c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a32e:	4a06      	ldr	r2, [pc, #24]	; (800a348 <jpeg_mem_src+0x50>)
 800a330:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a332:	4a06      	ldr	r2, [pc, #24]	; (800a34c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a334:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a338:	619a      	str	r2, [r3, #24]
}
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	0800a2a9 	.word	0x0800a2a9
 800a340:	0800a2ad 	.word	0x0800a2ad
 800a344:	0800a2d1 	.word	0x0800a2d1
 800a348:	0800e529 	.word	0x0800e529
 800a34c:	0800a2f7 	.word	0x0800a2f7

0800a350 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a350:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a354:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a358:	2a01      	cmp	r2, #1
 800a35a:	dd05      	ble.n	800a368 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800a35c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a35e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a360:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a362:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a366:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a368:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a36c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a370:	3a01      	subs	r2, #1
 800a372:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a376:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a378:	bf34      	ite	cc
 800a37a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a37c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800a37e:	e7ee      	b.n	800a35e <start_iMCU_row+0xe>

0800a380 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a380:	2200      	movs	r2, #0
 800a382:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a386:	f7ff bfe3 	b.w	800a350 <start_iMCU_row>

0800a38a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a38a:	2000      	movs	r0, #0
 800a38c:	4770      	bx	lr

0800a38e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a38e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a392:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800a396:	b08f      	sub	sp, #60	; 0x3c
 800a398:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a39a:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a39e:	465f      	mov	r7, fp
 800a3a0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a3a2:	f04f 0801 	mov.w	r8, #1
 800a3a6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a3aa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a3ae:	42b3      	cmp	r3, r6
 800a3b0:	dc13      	bgt.n	800a3da <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a3b2:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a3b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a3b8:	69eb      	ldr	r3, [r5, #28]
 800a3ba:	42b3      	cmp	r3, r6
 800a3bc:	dc22      	bgt.n	800a404 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a3be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a3c2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a3ce:	d270      	bcs.n	800a4b2 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff ffbd 	bl	800a350 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a3d6:	2003      	movs	r0, #3
 800a3d8:	e044      	b.n	800a464 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800a3da:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a3de:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a3e0:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a3e8:	3112      	adds	r1, #18
 800a3ea:	f8cd 8000 	str.w	r8, [sp]
 800a3ee:	435a      	muls	r2, r3
 800a3f0:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a3f4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	47d0      	blx	sl
 800a3fc:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a400:	3601      	adds	r6, #1
 800a402:	e7d2      	b.n	800a3aa <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800a404:	00b3      	lsls	r3, r6, #2
 800a406:	696f      	ldr	r7, [r5, #20]
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800a40e:	42bb      	cmp	r3, r7
 800a410:	f04f 0300 	mov.w	r3, #0
 800a414:	d94a      	bls.n	800a4ac <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a416:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a41a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800a41c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a41e:	9206      	str	r2, [sp, #24]
 800a420:	e013      	b.n	800a44a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800a422:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a426:	f04f 0c00 	mov.w	ip, #0
 800a42a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a42e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800a432:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a434:	fb07 f20e 	mul.w	r2, r7, lr
 800a438:	01d2      	lsls	r2, r2, #7
 800a43a:	9204      	str	r2, [sp, #16]
 800a43c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800a440:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a442:	9a05      	ldr	r2, [sp, #20]
 800a444:	4562      	cmp	r2, ip
 800a446:	dc10      	bgt.n	800a46a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a448:	3301      	adds	r3, #1
 800a44a:	9a06      	ldr	r2, [sp, #24]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	dce8      	bgt.n	800a422 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a450:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a454:	f105 0120 	add.w	r1, r5, #32
 800a458:	4620      	mov	r0, r4
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	4798      	blx	r3
 800a45e:	bb18      	cbnz	r0, 800a4a8 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800a460:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800a464:	b00f      	add	sp, #60	; 0x3c
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a46a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800a46e:	9904      	ldr	r1, [sp, #16]
 800a470:	f852 2008 	ldr.w	r2, [r2, r8]
 800a474:	440a      	add	r2, r1
 800a476:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a478:	9a03      	ldr	r2, [sp, #12]
 800a47a:	f102 0108 	add.w	r1, r2, #8
 800a47e:	2200      	movs	r2, #0
 800a480:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800a484:	9807      	ldr	r0, [sp, #28]
 800a486:	4596      	cmp	lr, r2
 800a488:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800a48c:	dc08      	bgt.n	800a4a0 <consume_data+0x112>
 800a48e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a490:	f10c 0c01 	add.w	ip, ip, #1
 800a494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a496:	f108 0804 	add.w	r8, r8, #4
 800a49a:	4411      	add	r1, r2
 800a49c:	9103      	str	r1, [sp, #12]
 800a49e:	e7d0      	b.n	800a442 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a4a0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800a4a2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a4a6:	e7ed      	b.n	800a484 <consume_data+0xf6>
	 MCU_col_num++) {
 800a4a8:	3701      	adds	r7, #1
 800a4aa:	e7ae      	b.n	800a40a <consume_data+0x7c>
       yoffset++) {
 800a4ac:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800a4ae:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a4b0:	e782      	b.n	800a3b8 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a4b2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a4bc:	2004      	movs	r0, #4
 800a4be:	e7d1      	b.n	800a464 <consume_data+0xd6>

0800a4c0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	b089      	sub	sp, #36	; 0x24
 800a4c8:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a4ca:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a4ce:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a4d2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a4d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	db1d      	blt.n	800a51a <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800a4de:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a4e2:	d103      	bne.n	800a4ec <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800a4e4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d916      	bls.n	800a51a <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a4ec:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a4f4:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800a4f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4fa:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a4fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a4fe:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a502:	42b3      	cmp	r3, r6
 800a504:	dc13      	bgt.n	800a52e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a506:	1c50      	adds	r0, r2, #1
 800a508:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a50c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a510:	4290      	cmp	r0, r2
 800a512:	bf2c      	ite	cs
 800a514:	2004      	movcs	r0, #4
 800a516:	2003      	movcc	r0, #3
 800a518:	e006      	b.n	800a528 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a51a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a51e:	4620      	mov	r0, r4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4798      	blx	r3
 800a524:	2800      	cmp	r0, #0
 800a526:	d1d4      	bne.n	800a4d2 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800a528:	b009      	add	sp, #36	; 0x24
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a52e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a530:	b913      	cbnz	r3, 800a538 <decompress_data+0x78>
       ci++, compptr++) {
 800a532:	3601      	adds	r6, #1
 800a534:	3558      	adds	r5, #88	; 0x58
 800a536:	e7e1      	b.n	800a4fc <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a53c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a53e:	9000      	str	r0, [sp, #0]
 800a540:	4620      	mov	r0, r4
 800a542:	6a0f      	ldr	r7, [r1, #32]
 800a544:	435a      	muls	r2, r3
 800a546:	9906      	ldr	r1, [sp, #24]
 800a548:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a54c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a54e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a552:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a554:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a556:	4293      	cmp	r3, r2
 800a558:	68eb      	ldr	r3, [r5, #12]
 800a55a:	d221      	bcs.n	800a5a0 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800a55c:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a55e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a562:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a564:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800a56c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a570:	9202      	str	r2, [sp, #8]
 800a572:	9a02      	ldr	r2, [sp, #8]
 800a574:	4552      	cmp	r2, sl
 800a576:	dadc      	bge.n	800a532 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800a578:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800a57a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800a57e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a580:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800a582:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a586:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a588:	69e9      	ldr	r1, [r5, #28]
 800a58a:	9a05      	ldr	r2, [sp, #20]
 800a58c:	4541      	cmp	r1, r8
 800a58e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800a592:	d80f      	bhi.n	800a5b4 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800a594:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a596:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a59a:	9a02      	ldr	r2, [sp, #8]
 800a59c:	3201      	adds	r2, #1
 800a59e:	e7e7      	b.n	800a570 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a5a0:	6a2a      	ldr	r2, [r5, #32]
 800a5a2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5a6:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a5aa:	f1ba 0f00 	cmp.w	sl, #0
 800a5ae:	bf08      	it	eq
 800a5b0:	469a      	moveq	sl, r3
 800a5b2:	e7d4      	b.n	800a55e <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a5b4:	f8cd 9000 	str.w	r9, [sp]
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a5c0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a5c2:	f108 0801 	add.w	r8, r8, #1
 800a5c6:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800a5c8:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a5ca:	e7dd      	b.n	800a588 <decompress_data+0xc8>

0800a5cc <start_output_pass>:
{
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a5d0:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a5d4:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800a5d6:	692b      	ldr	r3, [r5, #16]
 800a5d8:	b323      	cbz	r3, 800a624 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a5da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d04b      	beq.n	800a678 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800a5e0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d047      	beq.n	800a678 <start_output_pass+0xac>
 800a5e8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d043      	beq.n	800a678 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800a5f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a5f2:	b93b      	cbnz	r3, 800a604 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a5f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a5f6:	2118      	movs	r1, #24
 800a5f8:	6843      	ldr	r3, [r0, #4]
 800a5fa:	434a      	muls	r2, r1
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800a602:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a604:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800a606:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a60a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800a60e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800a612:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a614:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a616:	fb0e c703 	mla	r7, lr, r3, ip
 800a61a:	4293      	cmp	r3, r2
 800a61c:	db07      	blt.n	800a62e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a61e:	b359      	cbz	r1, 800a678 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800a620:	4b16      	ldr	r3, [pc, #88]	; (800a67c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800a622:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800a62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800a62e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a630:	b312      	cbz	r2, 800a678 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800a632:	8816      	ldrh	r6, [r2, #0]
 800a634:	b306      	cbz	r6, 800a678 <start_output_pass+0xac>
 800a636:	8856      	ldrh	r6, [r2, #2]
 800a638:	b1f6      	cbz	r6, 800a678 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800a63a:	8a16      	ldrh	r6, [r2, #16]
 800a63c:	b1e6      	cbz	r6, 800a678 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800a63e:	8c16      	ldrh	r6, [r2, #32]
 800a640:	b1d6      	cbz	r6, 800a678 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800a642:	8a56      	ldrh	r6, [r2, #18]
 800a644:	b1c6      	cbz	r6, 800a678 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800a646:	8892      	ldrh	r2, [r2, #4]
 800a648:	b1b2      	cbz	r2, 800a678 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800a64a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800a64e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800a650:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800a652:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800a656:	2a00      	cmp	r2, #0
 800a658:	db0e      	blt.n	800a678 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800a65a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a65c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800a660:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a662:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800a666:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800a66a:	bf18      	it	ne
 800a66c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800a66e:	2a06      	cmp	r2, #6
 800a670:	d1f4      	bne.n	800a65c <start_output_pass+0x90>
       ci++, compptr++) {
 800a672:	3301      	adds	r3, #1
 800a674:	3058      	adds	r0, #88	; 0x58
 800a676:	e7cd      	b.n	800a614 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800a678:	4b01      	ldr	r3, [pc, #4]	; (800a680 <start_output_pass+0xb4>)
 800a67a:	e7d2      	b.n	800a622 <start_output_pass+0x56>
 800a67c:	0800a803 	.word	0x0800a803
 800a680:	0800a4c1 	.word	0x0800a4c1

0800a684 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a684:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a68c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a68e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a692:	4604      	mov	r4, r0
 800a694:	ed2d 8b02 	vpush	{d8}
 800a698:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a69a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a69c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800a6a0:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a6a6:	69ab      	ldr	r3, [r5, #24]
 800a6a8:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a6aa:	f105 0320 	add.w	r3, r5, #32
 800a6ae:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a6b2:	69eb      	ldr	r3, [r5, #28]
 800a6b4:	9a03      	ldr	r2, [sp, #12]
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	dc13      	bgt.n	800a6e2 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800a6ba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a6be:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a6c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a6d4:	f080 808e 	bcs.w	800a7f4 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff fe39 	bl	800a350 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a6de:	2003      	movs	r0, #3
 800a6e0:	e02a      	b.n	800a738 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800a6e2:	696f      	ldr	r7, [r5, #20]
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	429f      	cmp	r7, r3
 800a6e8:	d905      	bls.n	800a6f6 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	e7dd      	b.n	800a6b2 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800a6f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a6fa:	b133      	cbz	r3, 800a70a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800a6fc:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800a700:	2100      	movs	r1, #0
 800a702:	6a28      	ldr	r0, [r5, #32]
 800a704:	01d2      	lsls	r2, r2, #7
 800a706:	f01e fda1 	bl	802924c <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a70a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a70e:	ee18 1a10 	vmov	r1, s16
 800a712:	4620      	mov	r0, r4
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	4798      	blx	r3
 800a718:	b158      	cbz	r0, 800a732 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a71a:	f04f 0b00 	mov.w	fp, #0
 800a71e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800a722:	46da      	mov	sl, fp
 800a724:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a726:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a72a:	455b      	cmp	r3, fp
 800a72c:	dc09      	bgt.n	800a742 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800a72e:	3701      	adds	r7, #1
 800a730:	e7d8      	b.n	800a6e4 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800a732:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800a734:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800a738:	b00f      	add	sp, #60	; 0x3c
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	f853 1b04 	ldr.w	r1, [r3], #4
 800a748:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800a74a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a74c:	b923      	cbnz	r3, 800a758 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800a74e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a750:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a752:	f10b 0b01 	add.w	fp, fp, #1
 800a756:	e7e6      	b.n	800a726 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a758:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a75a:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a75e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800a762:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a764:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	429f      	cmp	r7, r3
 800a770:	bf34      	ite	cc
 800a772:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800a774:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800a776:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800a778:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a77a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800a77c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a77e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800a786:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a788:	437a      	muls	r2, r7
 800a78a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a78c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a78e:	4542      	cmp	r2, r8
 800a790:	dddf      	ble.n	800a752 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800a792:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a796:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a798:	4282      	cmp	r2, r0
 800a79a:	d304      	bcc.n	800a7a6 <decompress_onepass+0x122>
 800a79c:	9a03      	ldr	r2, [sp, #12]
 800a79e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800a7a0:	4442      	add	r2, r8
 800a7a2:	4290      	cmp	r0, r2
 800a7a4:	dd0b      	ble.n	800a7be <decompress_onepass+0x13a>
 800a7a6:	f10a 0908 	add.w	r9, sl, #8
 800a7aa:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800a7ae:	f04f 0900 	mov.w	r9, #0
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7b6:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a7b8:	9a06      	ldr	r2, [sp, #24]
 800a7ba:	4591      	cmp	r9, r2
 800a7bc:	db07      	blt.n	800a7ce <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800a7be:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a7c0:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800a7c4:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800a7c6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a7c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a7cc:	e7de      	b.n	800a78c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a7ce:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a7d0:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a7d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7d8:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800a7da:	9804      	ldr	r0, [sp, #16]
 800a7dc:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800a7e0:	9000      	str	r0, [sp, #0]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800a7e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7e8:	9b04      	ldr	r3, [sp, #16]
 800a7ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800a7ec:	4413      	add	r3, r2
 800a7ee:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f2:	e7e1      	b.n	800a7b8 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a7f4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a7fe:	2004      	movs	r0, #4
 800a800:	e79a      	b.n	800a738 <decompress_onepass+0xb4>

0800a802 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a806:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800a80a:	b0c5      	sub	sp, #276	; 0x114
 800a80c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a80e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800a812:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a814:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a816:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a81a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a81e:	428b      	cmp	r3, r1
 800a820:	dc03      	bgt.n	800a82a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800a822:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a826:	6950      	ldr	r0, [r2, #20]
 800a828:	b1a8      	cbz	r0, 800a856 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a82a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a82c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a830:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a832:	2300      	movs	r3, #0
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a838:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a83a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a83e:	428b      	cmp	r3, r1
 800a840:	dc1e      	bgt.n	800a880 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a842:	3201      	adds	r2, #1
 800a844:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800a848:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a84c:	4282      	cmp	r2, r0
 800a84e:	bf2c      	ite	cs
 800a850:	2004      	movcs	r0, #4
 800a852:	2003      	movcc	r0, #3
 800a854:	e011      	b.n	800a87a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800a856:	428b      	cmp	r3, r1
 800a858:	d10a      	bne.n	800a870 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800a85a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800a85e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a862:	2900      	cmp	r1, #0
 800a864:	bf08      	it	eq
 800a866:	3301      	addeq	r3, #1
 800a868:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d8dc      	bhi.n	800a82a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a870:	6813      	ldr	r3, [r2, #0]
 800a872:	4620      	mov	r0, r4
 800a874:	4798      	blx	r3
 800a876:	2800      	cmp	r0, #0
 800a878:	d1cd      	bne.n	800a816 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800a87a:	b045      	add	sp, #276	; 0x114
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a880:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a882:	b923      	cbnz	r3, 800a88e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	3558      	adds	r5, #88	; 0x58
 800a888:	3301      	adds	r3, #1
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	e7d3      	b.n	800a836 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a88e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800a890:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a892:	4293      	cmp	r3, r2
 800a894:	f240 815a 	bls.w	800ab4c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800a898:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800a89a:	4681      	mov	r9, r0
      last_row = FALSE;
 800a89c:	2100      	movs	r1, #0
      last_row = TRUE;
 800a89e:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	9e03      	ldr	r6, [sp, #12]
 800a8a4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800a8a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a8aa:	3148      	adds	r1, #72	; 0x48
 800a8ac:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	f000 8159 	beq.w	800ab68 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800a8b6:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800a8b8:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800a8ba:	4403      	add	r3, r0
 800a8bc:	4342      	muls	r2, r0
 800a8be:	4620      	mov	r0, r4
 800a8c0:	9600      	str	r6, [sp, #0]
 800a8c2:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a8c4:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800a8c6:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a8c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a8cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8ce:	2218      	movs	r2, #24
 800a8d0:	9903      	ldr	r1, [sp, #12]
 800a8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a8d4:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a8d6:	fb02 3301 	mla	r3, r2, r1, r3
 800a8da:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800a8dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800a8de:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800a8e0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800a8e4:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800a8e8:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800a8ea:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800a8ec:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800a8ee:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a8f0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a8f4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800a8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8fe:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a902:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a904:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800a908:	9313      	str	r3, [sp, #76]	; 0x4c
 800a90a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800a90e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a910:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800a914:	9315      	str	r3, [sp, #84]	; 0x54
 800a916:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800a91a:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a91c:	01f3      	lsls	r3, r6, #7
 800a91e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a920:	0233      	lsls	r3, r6, #8
 800a922:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a924:	01cb      	lsls	r3, r1, #7
 800a926:	9319      	str	r3, [sp, #100]	; 0x64
 800a928:	020b      	lsls	r3, r1, #8
 800a92a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a92c:	01d3      	lsls	r3, r2, #7
 800a92e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a930:	0213      	lsls	r3, r2, #8
 800a932:	931c      	str	r3, [sp, #112]	; 0x70
 800a934:	1f03      	subs	r3, r0, #4
 800a936:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a938:	2300      	movs	r3, #0
 800a93a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800a93c:	f109 33ff 	add.w	r3, r9, #4294967295
 800a940:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	454b      	cmp	r3, r9
 800a946:	da9d      	bge.n	800a884 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800a948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a94a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800a94e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800a950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a952:	b11b      	cbz	r3, 800a95c <decompress_smooth_data+0x15a>
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 810c 	beq.w	800ab74 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800a95c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a95e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a962:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800a964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a966:	b123      	cbz	r3, 800a972 <decompress_smooth_data+0x170>
 800a968:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a96a:	9a04      	ldr	r2, [sp, #16]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	f000 8104 	beq.w	800ab7a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800a972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a978:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a97a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800a97c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a97e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800a982:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a984:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a986:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800a98a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800a98c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a98e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a990:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a992:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a996:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a99a:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a99e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	a924      	add	r1, sp, #144	; 0x90
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9aa:	f00b fe0e 	bl	80165ca <jcopy_block_row>
	if (block_num < last_block_column) {
 800a9ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b6:	f240 80ea 	bls.w	800ab8e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800a9ba:	9a07      	ldr	r2, [sp, #28]
 800a9bc:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800a9c0:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800a9c2:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800a9c6:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800a9c8:	9a08      	ldr	r2, [sp, #32]
 800a9ca:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800a9ce:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800a9d0:	9a05      	ldr	r2, [sp, #20]
 800a9d2:	6851      	ldr	r1, [r2, #4]
 800a9d4:	b1c1      	cbz	r1, 800aa08 <decompress_smooth_data+0x206>
 800a9d6:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800a9da:	b9aa      	cbnz	r2, 800aa08 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800a9dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9de:	1a3a      	subs	r2, r7, r0
 800a9e0:	9806      	ldr	r0, [sp, #24]
 800a9e2:	4342      	muls	r2, r0
	  if (num >= 0) {
 800a9e4:	2024      	movs	r0, #36	; 0x24
 800a9e6:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a9e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800a9ea:	f100 80d7 	bmi.w	800ab9c <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a9ee:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a9f0:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a9f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a9f4:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a9f8:	dd04      	ble.n	800aa04 <decompress_smooth_data+0x202>
 800a9fa:	fa06 f101 	lsl.w	r1, r6, r1
 800a9fe:	4291      	cmp	r1, r2
 800aa00:	dc00      	bgt.n	800aa04 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800aa02:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800aa04:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800aa08:	9a05      	ldr	r2, [sp, #20]
 800aa0a:	6891      	ldr	r1, [r2, #8]
 800aa0c:	b1c9      	cbz	r1, 800aa42 <decompress_smooth_data+0x240>
 800aa0e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800aa12:	b9b2      	cbnz	r2, 800aa42 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800aa14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa16:	9806      	ldr	r0, [sp, #24]
 800aa18:	ebab 0202 	sub.w	r2, fp, r2
 800aa1c:	4342      	muls	r2, r0
	  if (num >= 0) {
 800aa1e:	2024      	movs	r0, #36	; 0x24
 800aa20:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800aa22:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800aa24:	f100 80c8 	bmi.w	800abb8 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800aa28:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aa2a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800aa2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aa2e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aa32:	dd04      	ble.n	800aa3e <decompress_smooth_data+0x23c>
 800aa34:	fa06 f101 	lsl.w	r1, r6, r1
 800aa38:	4291      	cmp	r1, r2
 800aa3a:	dc00      	bgt.n	800aa3e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800aa3c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800aa3e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800aa42:	9a05      	ldr	r2, [sp, #20]
 800aa44:	68d1      	ldr	r1, [r2, #12]
 800aa46:	b1d1      	cbz	r1, 800aa7e <decompress_smooth_data+0x27c>
 800aa48:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800aa4c:	b9ba      	cbnz	r2, 800aa7e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800aa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa50:	9806      	ldr	r0, [sp, #24]
 800aa52:	445a      	add	r2, fp
 800aa54:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800aa58:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800aa5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800aa5c:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800aa60:	f100 80b8 	bmi.w	800abd4 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800aa64:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aa66:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800aa68:	9818      	ldr	r0, [sp, #96]	; 0x60
 800aa6a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aa6e:	dd04      	ble.n	800aa7a <decompress_smooth_data+0x278>
 800aa70:	fa06 f101 	lsl.w	r1, r6, r1
 800aa74:	4291      	cmp	r1, r2
 800aa76:	dc00      	bgt.n	800aa7a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800aa78:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800aa7a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800aa7e:	9a05      	ldr	r2, [sp, #20]
 800aa80:	6912      	ldr	r2, [r2, #16]
 800aa82:	b1e2      	cbz	r2, 800aabe <decompress_smooth_data+0x2bc>
 800aa84:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800aa88:	b9c9      	cbnz	r1, 800aabe <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800aa8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aa8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa8e:	1a09      	subs	r1, r1, r0
 800aa90:	1acb      	subs	r3, r1, r3
 800aa92:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa94:	440b      	add	r3, r1
 800aa96:	9906      	ldr	r1, [sp, #24]
 800aa98:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800aa9a:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800aa9c:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800aaa0:	f100 80a6 	bmi.w	800abf0 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800aaa4:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800aaa6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800aaa8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aaaa:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800aaae:	dd04      	ble.n	800aaba <decompress_smooth_data+0x2b8>
 800aab0:	fa06 f202 	lsl.w	r2, r6, r2
 800aab4:	429a      	cmp	r2, r3
 800aab6:	dc00      	bgt.n	800aaba <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800aab8:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800aaba:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800aabe:	9b05      	ldr	r3, [sp, #20]
 800aac0:	695a      	ldr	r2, [r3, #20]
 800aac2:	b1da      	cbz	r2, 800aafc <decompress_smooth_data+0x2fa>
 800aac4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800aac8:	b9c3      	cbnz	r3, 800aafc <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800aaca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aacc:	463b      	mov	r3, r7
 800aace:	440b      	add	r3, r1
 800aad0:	9906      	ldr	r1, [sp, #24]
 800aad2:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800aad6:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800aad8:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800aada:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800aade:	f100 8095 	bmi.w	800ac0c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800aae2:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800aae4:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800aae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aae8:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800aaec:	dd04      	ble.n	800aaf8 <decompress_smooth_data+0x2f6>
 800aaee:	fa06 f202 	lsl.w	r2, r6, r2
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	dc00      	bgt.n	800aaf8 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800aaf6:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800aaf8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800aafc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aafe:	aa24      	add	r2, sp, #144	; 0x90
 800ab00:	4629      	mov	r1, r5
 800ab02:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4620      	mov	r0, r4
 800ab08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ab0a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800ab0e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ab10:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800ab12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab14:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ab16:	3380      	adds	r3, #128	; 0x80
 800ab18:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800ab1c:	9307      	str	r3, [sp, #28]
 800ab1e:	9b08      	ldr	r3, [sp, #32]
 800ab20:	3380      	adds	r3, #128	; 0x80
 800ab22:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800ab24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab26:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800ab28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800ab2a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800ab2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab2e:	3301      	adds	r3, #1
 800ab30:	930c      	str	r3, [sp, #48]	; 0x30
 800ab32:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab36:	428a      	cmp	r2, r1
 800ab38:	d222      	bcs.n	800ab80 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800ab3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ab3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab42:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	3301      	adds	r3, #1
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	e6fa      	b.n	800a942 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ab4c:	6a2b      	ldr	r3, [r5, #32]
 800ab4e:	fbb3 f1f0 	udiv	r1, r3, r0
 800ab52:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800ab56:	f1b9 0f00 	cmp.w	r9, #0
 800ab5a:	d103      	bne.n	800ab64 <decompress_smooth_data+0x362>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	4681      	mov	r9, r0
      last_row = TRUE;
 800ab60:	2101      	movs	r1, #1
 800ab62:	e69c      	b.n	800a89e <decompress_smooth_data+0x9c>
 800ab64:	464b      	mov	r3, r9
 800ab66:	e7fb      	b.n	800ab60 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800ab68:	4620      	mov	r0, r4
 800ab6a:	9200      	str	r2, [sp, #0]
 800ab6c:	47c0      	blx	r8
      first_row = TRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	931d      	str	r3, [sp, #116]	; 0x74
 800ab72:	e6ab      	b.n	800a8cc <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800ab74:	f8cd 801c 	str.w	r8, [sp, #28]
 800ab78:	e6f4      	b.n	800a964 <decompress_smooth_data+0x162>
 800ab7a:	f8cd 8020 	str.w	r8, [sp, #32]
 800ab7e:	e6fb      	b.n	800a978 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800ab80:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800ab82:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800ab86:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800ab8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab8c:	e709      	b.n	800a9a2 <decompress_smooth_data+0x1a0>
 800ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab90:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ab94:	9211      	str	r2, [sp, #68]	; 0x44
 800ab96:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800ab9a:	e719      	b.n	800a9d0 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ab9c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800ab9e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800aba0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aba2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aba6:	dd05      	ble.n	800abb4 <decompress_smooth_data+0x3b2>
 800aba8:	fa06 f101 	lsl.w	r1, r6, r1
 800abac:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800abae:	bfd8      	it	le
 800abb0:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800abb4:	4252      	negs	r2, r2
 800abb6:	e725      	b.n	800aa04 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800abb8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800abba:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800abbc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800abbe:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800abc2:	dd05      	ble.n	800abd0 <decompress_smooth_data+0x3ce>
 800abc4:	fa06 f101 	lsl.w	r1, r6, r1
 800abc8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800abca:	bfd8      	it	le
 800abcc:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800abd0:	4252      	negs	r2, r2
 800abd2:	e734      	b.n	800aa3e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800abd4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800abd6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800abd8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800abda:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800abde:	dd05      	ble.n	800abec <decompress_smooth_data+0x3ea>
 800abe0:	fa06 f101 	lsl.w	r1, r6, r1
 800abe4:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800abe6:	bfd8      	it	le
 800abe8:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800abec:	4252      	negs	r2, r2
 800abee:	e744      	b.n	800aa7a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800abf0:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800abf2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800abf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800abf6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800abfa:	dd05      	ble.n	800ac08 <decompress_smooth_data+0x406>
 800abfc:	fa06 f202 	lsl.w	r2, r6, r2
 800ac00:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800ac02:	bfd8      	it	le
 800ac04:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800ac08:	425b      	negs	r3, r3
 800ac0a:	e756      	b.n	800aaba <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800ac0c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800ac0e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800ac10:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac12:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ac16:	dd05      	ble.n	800ac24 <decompress_smooth_data+0x422>
 800ac18:	fa06 f202 	lsl.w	r2, r6, r2
 800ac1c:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800ac1e:	bfd8      	it	le
 800ac20:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800ac24:	425b      	negs	r3, r3
 800ac26:	e767      	b.n	800aaf8 <decompress_smooth_data+0x2f6>

0800ac28 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac28:	6843      	ldr	r3, [r0, #4]
 800ac2a:	2274      	movs	r2, #116	; 0x74
{
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac30:	681b      	ldr	r3, [r3, #0]
{
 800ac32:	b085      	sub	sp, #20
 800ac34:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac36:	2101      	movs	r1, #1
{
 800ac38:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac3a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800ac3c:	4b2c      	ldr	r3, [pc, #176]	; (800acf0 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800ac3e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800ac40:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac44:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800ac46:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800ac48:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800ac4c:	4b29      	ldr	r3, [pc, #164]	; (800acf4 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800ac4e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800ac50:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800ac52:	b37e      	cbz	r6, 800acb4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac54:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800ac58:	46ca      	mov	sl, r9
 800ac5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac5c:	42bb      	cmp	r3, r7
 800ac5e:	dc07      	bgt.n	800ac70 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800ac60:	4b25      	ldr	r3, [pc, #148]	; (800acf8 <jinit_d_coef_controller+0xd0>)
 800ac62:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800ac64:	4b25      	ldr	r3, [pc, #148]	; (800acfc <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800ac66:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800ac6a:	b005      	add	sp, #20
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800ac70:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800ac74:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800ac78:	b10b      	cbz	r3, 800ac7e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800ac7a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800ac7e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800ac80:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ac82:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800ac84:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ac86:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800ac8a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ac8e:	f00b fc82 	bl	8016596 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800ac92:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ac96:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800ac98:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800ac9c:	f00b fc7b 	bl	8016596 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800aca0:	2201      	movs	r2, #1
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	4611      	mov	r1, r2
 800aca6:	e9cd 0800 	strd	r0, r8, [sp]
 800acaa:	4628      	mov	r0, r5
 800acac:	47d8      	blx	fp
 800acae:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800acb2:	e7d2      	b.n	800ac5a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800acb4:	686b      	ldr	r3, [r5, #4]
 800acb6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800acba:	2101      	movs	r1, #1
 800acbc:	4628      	mov	r0, r5
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800acc2:	f104 0320 	add.w	r3, r4, #32
 800acc6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800acc8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800accc:	454b      	cmp	r3, r9
 800acce:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800acd2:	d1f9      	bne.n	800acc8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800acd4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800acd8:	b919      	cbnz	r1, 800ace2 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800acda:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800acde:	f01e fab5 	bl	802924c <memset>
    coef->pub.consume_data = dummy_consume_data;
 800ace2:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <jinit_d_coef_controller+0xd8>)
 800ace4:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800ace6:	4b07      	ldr	r3, [pc, #28]	; (800ad04 <jinit_d_coef_controller+0xdc>)
 800ace8:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800acea:	2300      	movs	r3, #0
 800acec:	6123      	str	r3, [r4, #16]
}
 800acee:	e7bc      	b.n	800ac6a <jinit_d_coef_controller+0x42>
 800acf0:	0800a381 	.word	0x0800a381
 800acf4:	0800a5cd 	.word	0x0800a5cd
 800acf8:	0800a38f 	.word	0x0800a38f
 800acfc:	0800a4c1 	.word	0x0800a4c1
 800ad00:	0800a38b 	.word	0x0800a38b
 800ad04:	0800a685 	.word	0x0800a685

0800ad08 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad08:	6843      	ldr	r3, [r0, #4]
 800ad0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad0e:	2101      	movs	r1, #1
 800ad10:	681b      	ldr	r3, [r3, #0]
{
 800ad12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800ad18:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad1c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800ad26:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad28:	4620      	mov	r0, r4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad2e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800ad30:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ad3c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800adbc <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad40:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad42:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800ad44:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad46:	2101      	movs	r1, #1
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ad50:	4f17      	ldr	r7, [pc, #92]	; (800adb0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad52:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ad54:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800ad56:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ad58:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ad5a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800adc0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ad5e:	4915      	ldr	r1, [pc, #84]	; (800adb4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800ad60:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ad64:	4d14      	ldr	r5, [pc, #80]	; (800adb8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ad66:	fb08 e203 	mla	r2, r8, r3, lr
 800ad6a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800ad6c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ad70:	fb07 f203 	mul.w	r2, r7, r3
 800ad74:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800ad78:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800ad7c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800ad7e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ad82:	fb05 f203 	mul.w	r2, r5, r3
 800ad86:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800ad8a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800ad8e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ad92:	fb01 f203 	mul.w	r2, r1, r3
 800ad96:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800ad9a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800ad9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ada2:	3301      	adds	r3, #1
 800ada4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada8:	d1dd      	bne.n	800ad66 <build_ycc_rgb_table+0x5e>
  }
}
 800adaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adae:	bf00      	nop
 800adb0:	0001c5a2 	.word	0x0001c5a2
 800adb4:	ffffa7e6 	.word	0xffffa7e6
 800adb8:	ffff492e 	.word	0xffff492e
 800adbc:	000166e9 	.word	0x000166e9
 800adc0:	ff4d0b80 	.word	0xff4d0b80

0800adc4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800adc8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800adcc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800adce:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800add0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800add4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800add8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800addc:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800adde:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800ade0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800ade2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800ade6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800ade8:	6920      	ldr	r0, [r4, #16]
 800adea:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800adec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adee:	3a01      	subs	r2, #1
 800adf0:	9210      	str	r2, [sp, #64]	; 0x40
 800adf2:	d502      	bpl.n	800adfa <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800adf4:	b007      	add	sp, #28
 800adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800adfa:	9a05      	ldr	r2, [sp, #20]
 800adfc:	680c      	ldr	r4, [r1, #0]
 800adfe:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800ae00:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae04:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800ae08:	684c      	ldr	r4, [r1, #4]
 800ae0a:	5964      	ldr	r4, [r4, r5]
 800ae0c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800ae10:	688c      	ldr	r4, [r1, #8]
 800ae12:	5967      	ldr	r7, [r4, r5]
 800ae14:	9c01      	ldr	r4, [sp, #4]
 800ae16:	3f01      	subs	r7, #1
 800ae18:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800ae1c:	45d0      	cmp	r8, sl
 800ae1e:	f100 0003 	add.w	r0, r0, #3
 800ae22:	d0e3      	beq.n	800adec <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ae24:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800ae28:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ae2c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800ae2e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ae32:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800ae36:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ae38:	fa0f fb8b 	sxth.w	fp, fp
 800ae3c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ae3e:	5d65      	ldrb	r5, [r4, r5]
 800ae40:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ae44:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800ae48:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800ae4c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ae4e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ae50:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800ae52:	5d65      	ldrb	r5, [r4, r5]
 800ae54:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ae58:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800ae5c:	5d64      	ldrb	r4, [r4, r5]
 800ae5e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800ae62:	e7db      	b.n	800ae1c <ycc_rgb_convert+0x58>

0800ae64 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ae68:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800ae6c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800ae70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ae72:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800ae74:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800ae76:	3d01      	subs	r5, #1
 800ae78:	d501      	bpl.n	800ae7e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800ae7e:	189c      	adds	r4, r3, r2
 800ae80:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800ae82:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800ae86:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800ae8a:	6848      	ldr	r0, [r1, #4]
 800ae8c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800ae90:	6888      	ldr	r0, [r1, #8]
 800ae92:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800ae96:	2000      	movs	r0, #0
 800ae98:	42b8      	cmp	r0, r7
 800ae9a:	d0ec      	beq.n	800ae76 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800ae9c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800aea0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800aea4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800aea8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800aeac:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800aeb0:	4454      	add	r4, sl
 800aeb2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800aeb6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800aeba:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800aebe:	4454      	add	r4, sl
		 >> SCALEBITS);
 800aec0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800aec2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800aec6:	3001      	adds	r0, #1
 800aec8:	e7e6      	b.n	800ae98 <rgb_gray_convert+0x34>

0800aeca <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800aeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	9d06      	ldr	r5, [sp, #24]
 800aed0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aed4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800aed6:	3d01      	subs	r5, #1
 800aed8:	d501      	bpl.n	800aede <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800aeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800aede:	1898      	adds	r0, r3, r2
 800aee0:	680c      	ldr	r4, [r1, #0]
 800aee2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800aee4:	684c      	ldr	r4, [r1, #4]
 800aee6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800aeea:	688c      	ldr	r4, [r1, #8]
 800aeec:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800aef0:	2000      	movs	r0, #0
 800aef2:	f853 4b04 	ldr.w	r4, [r3], #4
 800aef6:	42b0      	cmp	r0, r6
 800aef8:	f104 0403 	add.w	r4, r4, #3
 800aefc:	d0eb      	beq.n	800aed6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800aefe:	f817 8000 	ldrb.w	r8, [r7, r0]
 800af02:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800af06:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800af0a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800af0e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800af12:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800af14:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800af18:	e7ed      	b.n	800aef6 <rgb_convert+0x2c>

0800af1a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800af1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af1e:	9e07      	ldr	r6, [sp, #28]
 800af20:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800af24:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800af26:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800af2a:	3e01      	subs	r6, #1
 800af2c:	d418      	bmi.n	800af60 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800af2e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800af32:	2000      	movs	r0, #0
 800af34:	e00a      	b.n	800af4c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800af36:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800af3a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	eb05 080e 	add.w	r8, r5, lr
 800af44:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800af46:	4545      	cmp	r5, r8
 800af48:	d104      	bne.n	800af54 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800af4a:	3001      	adds	r0, #1
 800af4c:	42b8      	cmp	r0, r7
 800af4e:	dbf2      	blt.n	800af36 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800af50:	3304      	adds	r3, #4
 800af52:	e7ea      	b.n	800af2a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800af54:	f815 9b01 	ldrb.w	r9, [r5], #1
 800af58:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800af5c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800af5e:	e7f2      	b.n	800af46 <null_convert+0x2c>
  }
}
 800af60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800af64 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800af64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af66:	9d05      	ldr	r5, [sp, #20]
 800af68:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800af6c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800af6e:	3d01      	subs	r5, #1
 800af70:	d500      	bpl.n	800af74 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800af72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800af74:	6808      	ldr	r0, [r1, #0]
 800af76:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800af78:	f853 0b04 	ldr.w	r0, [r3], #4
 800af7c:	58a4      	ldr	r4, [r4, r2]
 800af7e:	eb04 0c07 	add.w	ip, r4, r7
 800af82:	4564      	cmp	r4, ip
 800af84:	f100 0003 	add.w	r0, r0, #3
 800af88:	d0f1      	beq.n	800af6e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800af8a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800af8e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800af92:	f800 6c02 	strb.w	r6, [r0, #-2]
 800af96:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800af9a:	e7f2      	b.n	800af82 <gray_rgb_convert+0x1e>

0800af9c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800afa0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800afa4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800afa6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800afa8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800afac:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800afb0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800afb4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800afb6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800afba:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800afbc:	6920      	ldr	r0, [r4, #16]
 800afbe:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800afc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afc2:	3a01      	subs	r2, #1
 800afc4:	9210      	str	r2, [sp, #64]	; 0x40
 800afc6:	d502      	bpl.n	800afce <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800afc8:	b007      	add	sp, #28
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800afce:	eb03 0008 	add.w	r0, r3, r8
 800afd2:	680a      	ldr	r2, [r1, #0]
 800afd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800afd8:	5812      	ldr	r2, [r2, r0]
 800afda:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800afdc:	684a      	ldr	r2, [r1, #4]
 800afde:	5812      	ldr	r2, [r2, r0]
 800afe0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800afe2:	688a      	ldr	r2, [r1, #8]
 800afe4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800afe8:	68ca      	ldr	r2, [r1, #12]
 800afea:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800afee:	2200      	movs	r2, #0
 800aff0:	9800      	ldr	r0, [sp, #0]
 800aff2:	3504      	adds	r5, #4
 800aff4:	4282      	cmp	r2, r0
 800aff6:	d0e3      	beq.n	800afc0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800aff8:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800affc:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800affe:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b000:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b004:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b006:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b00a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b00e:	4404      	add	r4, r0
 800b010:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b014:	5d34      	ldrb	r4, [r6, r4]
 800b016:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b01a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b01e:	9405      	str	r4, [sp, #20]
 800b020:	9c02      	ldr	r4, [sp, #8]
 800b022:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b026:	9c05      	ldr	r4, [sp, #20]
 800b028:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b02a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b02e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b032:	5d34      	ldrb	r4, [r6, r4]
 800b034:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b038:	9c01      	ldr	r4, [sp, #4]
 800b03a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b03e:	4420      	add	r0, r4
 800b040:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b044:	5c30      	ldrb	r0, [r6, r0]
 800b046:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b04a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b04e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b050:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b054:	e7cc      	b.n	800aff0 <ycck_cmyk_convert+0x54>

0800b056 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b056:	4770      	bx	lr

0800b058 <grayscale_convert>:
{
 800b058:	b513      	push	{r0, r1, r4, lr}
 800b05a:	460c      	mov	r4, r1
 800b05c:	4611      	mov	r1, r2
 800b05e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b060:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b062:	6820      	ldr	r0, [r4, #0]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	2300      	movs	r3, #0
 800b06c:	f00b fa9b 	bl	80165a6 <jcopy_sample_rows>
}
 800b070:	b002      	add	sp, #8
 800b072:	bd10      	pop	{r4, pc}

0800b074 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b074:	6843      	ldr	r3, [r0, #4]
 800b076:	221c      	movs	r2, #28
 800b078:	2101      	movs	r1, #1
 800b07a:	681b      	ldr	r3, [r3, #0]
{
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b080:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b082:	4b4a      	ldr	r3, [pc, #296]	; (800b1ac <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b084:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b086:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b08a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b08c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b090:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b092:	2b03      	cmp	r3, #3
 800b094:	d821      	bhi.n	800b0da <jinit_color_deconverter+0x66>
 800b096:	2b01      	cmp	r3, #1
 800b098:	d82d      	bhi.n	800b0f6 <jinit_color_deconverter+0x82>
 800b09a:	d023      	beq.n	800b0e4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b09c:	2a00      	cmp	r2, #0
 800b09e:	dd23      	ble.n	800b0e8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b0a0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b0a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b0a8:	2902      	cmp	r1, #2
 800b0aa:	d055      	beq.n	800b158 <jinit_color_deconverter+0xe4>
 800b0ac:	2904      	cmp	r1, #4
 800b0ae:	d066      	beq.n	800b17e <jinit_color_deconverter+0x10a>
 800b0b0:	2901      	cmp	r1, #1
 800b0b2:	d16d      	bne.n	800b190 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b0b4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b0b8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b0ba:	2a01      	cmp	r2, #1
 800b0bc:	d124      	bne.n	800b108 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b0be:	4b3c      	ldr	r3, [pc, #240]	; (800b1b0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b0c0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b0c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b0c4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b0c6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b0c8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	dc15      	bgt.n	800b0fa <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b0ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d169      	bne.n	800b1a8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b0d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b0d6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b0d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b0da:	3b04      	subs	r3, #4
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d8dd      	bhi.n	800b09c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b0e0:	2a04      	cmp	r2, #4
 800b0e2:	e000      	b.n	800b0e6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b0e4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b0e6:	d0db      	beq.n	800b0a0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	220b      	movs	r2, #11
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	615a      	str	r2, [r3, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4798      	blx	r3
 800b0f4:	e7d4      	b.n	800b0a0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b0f6:	2a03      	cmp	r2, #3
 800b0f8:	e7f5      	b.n	800b0e6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b0fa:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b0fe:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b102:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b104:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b106:	e7e0      	b.n	800b0ca <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d146      	bne.n	800b19a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b10e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b112:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b114:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b118:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b11a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b11c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b124:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b126:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b128:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b12c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b12e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b132:	fb06 f203 	mul.w	r2, r6, r3
 800b136:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b13a:	fb05 f203 	mul.w	r2, r5, r3
 800b13e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b142:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b146:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b148:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b150:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b154:	d1ed      	bne.n	800b132 <jinit_color_deconverter+0xbe>
 800b156:	e7ba      	b.n	800b0ce <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b158:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b15a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b15c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b15e:	d105      	bne.n	800b16c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b160:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b162:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b164:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b166:	f7ff fdcf 	bl	800ad08 <build_ycc_rgb_table>
 800b16a:	e7b0      	b.n	800b0ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d102      	bne.n	800b176 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b170:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b172:	606b      	str	r3, [r5, #4]
 800b174:	e7ab      	b.n	800b0ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b176:	2b02      	cmp	r3, #2
 800b178:	d10f      	bne.n	800b19a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <jinit_color_deconverter+0x14c>)
 800b17c:	e7f9      	b.n	800b172 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b17e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b180:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b182:	d101      	bne.n	800b188 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <jinit_color_deconverter+0x150>)
 800b186:	e7ec      	b.n	800b162 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d106      	bne.n	800b19a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b18c:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <jinit_color_deconverter+0x154>)
 800b18e:	e7f0      	b.n	800b172 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b190:	4299      	cmp	r1, r3
 800b192:	d102      	bne.n	800b19a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b196:	67a3      	str	r3, [r4, #120]	; 0x78
 800b198:	e7f8      	b.n	800b18c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	221c      	movs	r2, #28
 800b19e:	4620      	mov	r0, r4
 800b1a0:	615a      	str	r2, [r3, #20]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4798      	blx	r3
 800b1a6:	e792      	b.n	800b0ce <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e794      	b.n	800b0d6 <jinit_color_deconverter+0x62>
 800b1ac:	0800b057 	.word	0x0800b057
 800b1b0:	0800b059 	.word	0x0800b059
 800b1b4:	0800ae65 	.word	0x0800ae65
 800b1b8:	0800adc5 	.word	0x0800adc5
 800b1bc:	0800af65 	.word	0x0800af65
 800b1c0:	0800aecb 	.word	0x0800aecb
 800b1c4:	0800af9d 	.word	0x0800af9d
 800b1c8:	0800af1b 	.word	0x0800af1b

0800b1cc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b1d4:	2500      	movs	r5, #0
{
 800b1d6:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b1d8:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b1dc:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b1e0:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b1e2:	46ab      	mov	fp, r5
{
 800b1e4:	ed2d 8b04 	vpush	{d8-d9}
 800b1e8:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	455b      	cmp	r3, fp
 800b1ee:	dc04      	bgt.n	800b1fa <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b1f0:	b007      	add	sp, #28
 800b1f2:	ecbd 8b04 	vpop	{d8-d9}
 800b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b1fa:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b1fe:	f240 700e 	movw	r0, #1806	; 0x70e
 800b202:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b206:	4283      	cmp	r3, r0
 800b208:	f000 80d9 	beq.w	800b3be <start_pass+0x1f2>
 800b20c:	dc5a      	bgt.n	800b2c4 <start_pass+0xf8>
 800b20e:	f240 4004 	movw	r0, #1028	; 0x404
 800b212:	4283      	cmp	r3, r0
 800b214:	f000 80d6 	beq.w	800b3c4 <start_pass+0x1f8>
 800b218:	dc2f      	bgt.n	800b27a <start_pass+0xae>
 800b21a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b21e:	f000 80d3 	beq.w	800b3c8 <start_pass+0x1fc>
 800b222:	dc1a      	bgt.n	800b25a <start_pass+0x8e>
 800b224:	f240 2001 	movw	r0, #513	; 0x201
 800b228:	4283      	cmp	r3, r0
 800b22a:	f000 80cf 	beq.w	800b3cc <start_pass+0x200>
 800b22e:	dc0e      	bgt.n	800b24e <start_pass+0x82>
 800b230:	f240 1001 	movw	r0, #257	; 0x101
 800b234:	4283      	cmp	r3, r0
 800b236:	f000 80cb 	beq.w	800b3d0 <start_pass+0x204>
 800b23a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b23e:	f000 80c9 	beq.w	800b3d4 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2007      	movs	r0, #7
 800b246:	61da      	str	r2, [r3, #28]
 800b248:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b24c:	e0b3      	b.n	800b3b6 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b24e:	f240 2002 	movw	r0, #514	; 0x202
 800b252:	4283      	cmp	r3, r0
 800b254:	d1f5      	bne.n	800b242 <start_pass+0x76>
 800b256:	4d9e      	ldr	r5, [pc, #632]	; (800b4d0 <start_pass+0x304>)
 800b258:	e0b2      	b.n	800b3c0 <start_pass+0x1f4>
 800b25a:	f240 3006 	movw	r0, #774	; 0x306
 800b25e:	4283      	cmp	r3, r0
 800b260:	f000 80ba 	beq.w	800b3d8 <start_pass+0x20c>
 800b264:	f240 4002 	movw	r0, #1026	; 0x402
 800b268:	4283      	cmp	r3, r0
 800b26a:	f000 80b7 	beq.w	800b3dc <start_pass+0x210>
 800b26e:	f240 3003 	movw	r0, #771	; 0x303
 800b272:	4283      	cmp	r3, r0
 800b274:	d1e5      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800b276:	4d97      	ldr	r5, [pc, #604]	; (800b4d4 <start_pass+0x308>)
 800b278:	e0a2      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b27a:	f240 6003 	movw	r0, #1539	; 0x603
 800b27e:	4283      	cmp	r3, r0
 800b280:	f000 80ae 	beq.w	800b3e0 <start_pass+0x214>
 800b284:	dc0e      	bgt.n	800b2a4 <start_pass+0xd8>
 800b286:	f240 5005 	movw	r0, #1285	; 0x505
 800b28a:	4283      	cmp	r3, r0
 800b28c:	f000 80aa 	beq.w	800b3e4 <start_pass+0x218>
 800b290:	f240 500a 	movw	r0, #1290	; 0x50a
 800b294:	4283      	cmp	r3, r0
 800b296:	f000 80a7 	beq.w	800b3e8 <start_pass+0x21c>
 800b29a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b29e:	d1d0      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800b2a0:	4d8d      	ldr	r5, [pc, #564]	; (800b4d8 <start_pass+0x30c>)
 800b2a2:	e08d      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b2a4:	f240 600c 	movw	r0, #1548	; 0x60c
 800b2a8:	4283      	cmp	r3, r0
 800b2aa:	f000 809f 	beq.w	800b3ec <start_pass+0x220>
 800b2ae:	f240 7007 	movw	r0, #1799	; 0x707
 800b2b2:	4283      	cmp	r3, r0
 800b2b4:	f000 809c 	beq.w	800b3f0 <start_pass+0x224>
 800b2b8:	f240 6006 	movw	r0, #1542	; 0x606
 800b2bc:	4283      	cmp	r3, r0
 800b2be:	d1c0      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800b2c0:	4d86      	ldr	r5, [pc, #536]	; (800b4dc <start_pass+0x310>)
 800b2c2:	e07d      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b2c4:	f640 4006 	movw	r0, #3078	; 0xc06
 800b2c8:	4283      	cmp	r3, r0
 800b2ca:	f000 8093 	beq.w	800b3f4 <start_pass+0x228>
 800b2ce:	dc21      	bgt.n	800b314 <start_pass+0x148>
 800b2d0:	f640 1009 	movw	r0, #2313	; 0x909
 800b2d4:	4283      	cmp	r3, r0
 800b2d6:	f000 808f 	beq.w	800b3f8 <start_pass+0x22c>
 800b2da:	dc0d      	bgt.n	800b2f8 <start_pass+0x12c>
 800b2dc:	f640 0008 	movw	r0, #2056	; 0x808
 800b2e0:	4283      	cmp	r3, r0
 800b2e2:	d039      	beq.n	800b358 <start_pass+0x18c>
 800b2e4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b2e8:	f000 8088 	beq.w	800b3fc <start_pass+0x230>
 800b2ec:	f640 0004 	movw	r0, #2052	; 0x804
 800b2f0:	4283      	cmp	r3, r0
 800b2f2:	d1a6      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800b2f4:	4d7a      	ldr	r5, [pc, #488]	; (800b4e0 <start_pass+0x314>)
 800b2f6:	e063      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b2f8:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b2fc:	4283      	cmp	r3, r0
 800b2fe:	d07f      	beq.n	800b400 <start_pass+0x234>
 800b300:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b304:	4283      	cmp	r3, r0
 800b306:	d07d      	beq.n	800b404 <start_pass+0x238>
 800b308:	f640 2005 	movw	r0, #2565	; 0xa05
 800b30c:	4283      	cmp	r3, r0
 800b30e:	d198      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800b310:	4d74      	ldr	r5, [pc, #464]	; (800b4e4 <start_pass+0x318>)
 800b312:	e055      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b314:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b318:	4283      	cmp	r3, r0
 800b31a:	d075      	beq.n	800b408 <start_pass+0x23c>
 800b31c:	dc0d      	bgt.n	800b33a <start_pass+0x16e>
 800b31e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b322:	4283      	cmp	r3, r0
 800b324:	d072      	beq.n	800b40c <start_pass+0x240>
 800b326:	f640 6007 	movw	r0, #3591	; 0xe07
 800b32a:	4283      	cmp	r3, r0
 800b32c:	d070      	beq.n	800b410 <start_pass+0x244>
 800b32e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b332:	4283      	cmp	r3, r0
 800b334:	d185      	bne.n	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800b336:	4d6c      	ldr	r5, [pc, #432]	; (800b4e8 <start_pass+0x31c>)
 800b338:	e042      	b.n	800b3c0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b33a:	f241 0008 	movw	r0, #4104	; 0x1008
 800b33e:	4283      	cmp	r3, r0
 800b340:	d068      	beq.n	800b414 <start_pass+0x248>
 800b342:	f241 0010 	movw	r0, #4112	; 0x1010
 800b346:	4283      	cmp	r3, r0
 800b348:	d066      	beq.n	800b418 <start_pass+0x24c>
 800b34a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b34e:	4283      	cmp	r3, r0
 800b350:	f47f af77 	bne.w	800b242 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800b354:	4d65      	ldr	r5, [pc, #404]	; (800b4ec <start_pass+0x320>)
 800b356:	e033      	b.n	800b3c0 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800b358:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d827      	bhi.n	800b3b0 <start_pass+0x1e4>
 800b360:	461c      	mov	r4, r3
 800b362:	4b63      	ldr	r3, [pc, #396]	; (800b4f0 <start_pass+0x324>)
 800b364:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b368:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b36c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b370:	b1cb      	cbz	r3, 800b3a6 <start_pass+0x1da>
 800b372:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b376:	42a3      	cmp	r3, r4
 800b378:	d015      	beq.n	800b3a6 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800b37a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b37e:	b196      	cbz	r6, 800b3a6 <start_pass+0x1da>
    switch (method) {
 800b380:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b382:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800b386:	d049      	beq.n	800b41c <start_pass+0x250>
 800b388:	2c02      	cmp	r4, #2
 800b38a:	d05a      	beq.n	800b442 <start_pass+0x276>
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	f040 8098 	bne.w	800b4c2 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b392:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b396:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b398:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b39c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	2b40      	cmp	r3, #64	; 0x40
 800b3a4:	d1f8      	bne.n	800b398 <start_pass+0x1cc>
       ci++, compptr++) {
 800b3a6:	f10b 0b01 	add.w	fp, fp, #1
 800b3aa:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800b3ae:	e71c      	b.n	800b1ea <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2231      	movs	r2, #49	; 0x31
 800b3b4:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	4798      	blx	r3
      break;
 800b3bc:	e7d4      	b.n	800b368 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800b3be:	4d4d      	ldr	r5, [pc, #308]	; (800b4f4 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b3c0:	2400      	movs	r4, #0
 800b3c2:	e7d1      	b.n	800b368 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800b3c4:	4d4c      	ldr	r5, [pc, #304]	; (800b4f8 <start_pass+0x32c>)
 800b3c6:	e7fb      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800b3c8:	4d4c      	ldr	r5, [pc, #304]	; (800b4fc <start_pass+0x330>)
 800b3ca:	e7f9      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800b3cc:	4d4c      	ldr	r5, [pc, #304]	; (800b500 <start_pass+0x334>)
 800b3ce:	e7f7      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800b3d0:	4d4c      	ldr	r5, [pc, #304]	; (800b504 <start_pass+0x338>)
 800b3d2:	e7f5      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800b3d4:	4d4c      	ldr	r5, [pc, #304]	; (800b508 <start_pass+0x33c>)
 800b3d6:	e7f3      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800b3d8:	4d4c      	ldr	r5, [pc, #304]	; (800b50c <start_pass+0x340>)
 800b3da:	e7f1      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800b3dc:	4d4c      	ldr	r5, [pc, #304]	; (800b510 <start_pass+0x344>)
 800b3de:	e7ef      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800b3e0:	4d4c      	ldr	r5, [pc, #304]	; (800b514 <start_pass+0x348>)
 800b3e2:	e7ed      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800b3e4:	4d4c      	ldr	r5, [pc, #304]	; (800b518 <start_pass+0x34c>)
 800b3e6:	e7eb      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800b3e8:	4d4c      	ldr	r5, [pc, #304]	; (800b51c <start_pass+0x350>)
 800b3ea:	e7e9      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800b3ec:	4d4c      	ldr	r5, [pc, #304]	; (800b520 <start_pass+0x354>)
 800b3ee:	e7e7      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800b3f0:	4d4c      	ldr	r5, [pc, #304]	; (800b524 <start_pass+0x358>)
 800b3f2:	e7e5      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800b3f4:	4d4c      	ldr	r5, [pc, #304]	; (800b528 <start_pass+0x35c>)
 800b3f6:	e7e3      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800b3f8:	4d4c      	ldr	r5, [pc, #304]	; (800b52c <start_pass+0x360>)
 800b3fa:	e7e1      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800b3fc:	4d4c      	ldr	r5, [pc, #304]	; (800b530 <start_pass+0x364>)
 800b3fe:	e7df      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800b400:	4d4c      	ldr	r5, [pc, #304]	; (800b534 <start_pass+0x368>)
 800b402:	e7dd      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800b404:	4d4c      	ldr	r5, [pc, #304]	; (800b538 <start_pass+0x36c>)
 800b406:	e7db      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800b408:	4d4c      	ldr	r5, [pc, #304]	; (800b53c <start_pass+0x370>)
 800b40a:	e7d9      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800b40c:	4d4c      	ldr	r5, [pc, #304]	; (800b540 <start_pass+0x374>)
 800b40e:	e7d7      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800b410:	4d4c      	ldr	r5, [pc, #304]	; (800b544 <start_pass+0x378>)
 800b412:	e7d5      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800b414:	4d4c      	ldr	r5, [pc, #304]	; (800b548 <start_pass+0x37c>)
 800b416:	e7d3      	b.n	800b3c0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800b418:	4d4c      	ldr	r5, [pc, #304]	; (800b54c <start_pass+0x380>)
 800b41a:	e7d1      	b.n	800b3c0 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b41c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b420:	2200      	movs	r2, #0
 800b422:	494b      	ldr	r1, [pc, #300]	; (800b550 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800b424:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800b428:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800b42c:	fb0c f303 	mul.w	r3, ip, r3
 800b430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b434:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800b436:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b43a:	3201      	adds	r2, #1
 800b43c:	2a40      	cmp	r2, #64	; 0x40
 800b43e:	d1f1      	bne.n	800b424 <start_pass+0x258>
 800b440:	e7b1      	b.n	800b3a6 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b442:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800b446:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	4b41      	ldr	r3, [pc, #260]	; (800b554 <start_pass+0x388>)
 800b44e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	ecb3 7b02 	vldmia	r3!, {d7}
 800b456:	9303      	str	r3, [sp, #12]
 800b458:	eeb0 8a47 	vmov.f32	s16, s14
 800b45c:	eef0 8a67 	vmov.f32	s17, s15
 800b460:	9b04      	ldr	r3, [sp, #16]
 800b462:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b466:	9301      	str	r3, [sp, #4]
 800b468:	4b3a      	ldr	r3, [pc, #232]	; (800b554 <start_pass+0x388>)
 800b46a:	9302      	str	r3, [sp, #8]
 800b46c:	f106 0310 	add.w	r3, r6, #16
 800b470:	9305      	str	r3, [sp, #20]
 800b472:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b474:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b478:	ecb3 7b02 	vldmia	r3!, {d7}
 800b47c:	eeb0 9a47 	vmov.f32	s18, s14
 800b480:	eef0 9a67 	vmov.f32	s19, s15
 800b484:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b486:	f7f5 f855 	bl	8000534 <__aeabi_ui2d>
 800b48a:	ec53 2b18 	vmov	r2, r3, d8
 800b48e:	f7f5 f8cb 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b492:	ec53 2b19 	vmov	r2, r3, d9
 800b496:	f7f5 f8c7 	bl	8000628 <__aeabi_dmul>
 800b49a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f7f5 f8c2 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800b4a4:	f7f5 fad2 	bl	8000a4c <__aeabi_d2f>
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	f843 0b04 	str.w	r0, [r3], #4
 800b4ae:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800b4b0:	9b05      	ldr	r3, [sp, #20]
 800b4b2:	429e      	cmp	r6, r3
 800b4b4:	d1dd      	bne.n	800b472 <start_pass+0x2a6>
	    i++;
 800b4b6:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800b4ba:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800b4be:	d1c7      	bne.n	800b450 <start_pass+0x284>
 800b4c0:	e771      	b.n	800b3a6 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2231      	movs	r2, #49	; 0x31
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	615a      	str	r2, [r3, #20]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4798      	blx	r3
      break;
 800b4ce:	e76a      	b.n	800b3a6 <start_pass+0x1da>
 800b4d0:	08010689 	.word	0x08010689
 800b4d4:	08010595 	.word	0x08010595
 800b4d8:	08014505 	.word	0x08014505
 800b4dc:	08010135 	.word	0x08010135
 800b4e0:	0801345d 	.word	0x0801345d
 800b4e4:	08013215 	.word	0x08013215
 800b4e8:	080110e1 	.word	0x080110e1
 800b4ec:	08011db5 	.word	0x08011db5
 800b4f0:	0802c8f0 	.word	0x0802c8f0
 800b4f4:	08013c99 	.word	0x08013c99
 800b4f8:	08010469 	.word	0x08010469
 800b4fc:	0801486d 	.word	0x0801486d
 800b500:	0801387d 	.word	0x0801387d
 800b504:	08010701 	.word	0x08010701
 800b508:	08014945 	.word	0x08014945
 800b50c:	08014721 	.word	0x08014721
 800b510:	080137ad 	.word	0x080137ad
 800b514:	08013651 	.word	0x08013651
 800b518:	080102e5 	.word	0x080102e5
 800b51c:	080142d1 	.word	0x080142d1
 800b520:	08014011 	.word	0x08014011
 800b524:	0800fe8d 	.word	0x0800fe8d
 800b528:	08012f49 	.word	0x08012f49
 800b52c:	08010725 	.word	0x08010725
 800b530:	080138b5 	.word	0x080138b5
 800b534:	080109f1 	.word	0x080109f1
 800b538:	08010ce9 	.word	0x08010ce9
 800b53c:	08011961 	.word	0x08011961
 800b540:	0801149d 	.word	0x0801149d
 800b544:	08012bc9 	.word	0x08012bc9
 800b548:	08012781 	.word	0x08012781
 800b54c:	08012249 	.word	0x08012249
 800b550:	0802c940 	.word	0x0802c940
 800b554:	0802c900 	.word	0x0802c900

0800b558 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b55a:	6843      	ldr	r3, [r0, #4]
{
 800b55c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b55e:	2254      	movs	r2, #84	; 0x54
 800b560:	2101      	movs	r1, #1
 800b562:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b564:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b566:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800b568:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <jinit_inverse_dct+0x50>)
 800b56a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b56c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800b570:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800b574:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b578:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b57a:	42b3      	cmp	r3, r6
 800b57c:	dc00      	bgt.n	800b580 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b580:	686b      	ldr	r3, [r5, #4]
 800b582:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b586:	2101      	movs	r1, #1
 800b588:	4628      	mov	r0, r5
 800b58a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800b58c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b58e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b590:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800b594:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b596:	2100      	movs	r1, #0
 800b598:	f01d fe58 	bl	802924c <memset>
    idct->cur_method[ci] = -1;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800b5a0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800b5a2:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800b5a6:	e7e7      	b.n	800b578 <jinit_inverse_dct+0x20>
 800b5a8:	0800b1cd 	.word	0x0800b1cd

0800b5ac <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800b5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800b5b0:	6905      	ldr	r5, [r0, #16]
{
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	4688      	mov	r8, r1
 800b5b6:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b5b8:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800b5bc:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800b5be:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b5c2:	f1bb 0f00 	cmp.w	fp, #0
 800b5c6:	d042      	beq.n	800b64e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800b5c8:	454e      	cmp	r6, r9
 800b5ca:	da42      	bge.n	800b652 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800b5cc:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	b95b      	cbnz	r3, 800b5ec <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	2278      	movs	r2, #120	; 0x78
 800b5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b5dc:	4628      	mov	r0, r5
 800b5de:	615a      	str	r2, [r3, #20]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800b5e4:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800b5ec:	f1c6 0619 	rsb	r6, r6, #25
 800b5f0:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800b5f4:	2619      	movs	r6, #25
 800b5f6:	e02c      	b.n	800b652 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800b5f8:	f1ba 0f00 	cmp.w	sl, #0
 800b5fc:	d107      	bne.n	800b60e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b5fe:	69ab      	ldr	r3, [r5, #24]
 800b600:	4628      	mov	r0, r5
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	4798      	blx	r3
 800b606:	b350      	cbz	r0, 800b65e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800b608:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b60a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800b60e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800b612:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800b616:	2aff      	cmp	r2, #255	; 0xff
 800b618:	d116      	bne.n	800b648 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800b61a:	f1ba 0f00 	cmp.w	sl, #0
 800b61e:	d109      	bne.n	800b634 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b620:	69ab      	ldr	r3, [r5, #24]
 800b622:	4628      	mov	r0, r5
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	4798      	blx	r3
 800b62a:	b1c0      	cbz	r0, 800b65e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800b62c:	69ab      	ldr	r3, [r5, #24]
 800b62e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b630:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800b634:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800b638:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800b63c:	2bff      	cmp	r3, #255	; 0xff
 800b63e:	d0ec      	beq.n	800b61a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800b640:	b113      	cbz	r3, 800b648 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800b642:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800b646:	e7bf      	b.n	800b5c8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800b648:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800b64c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800b64e:	2e18      	cmp	r6, #24
 800b650:	ddd2      	ble.n	800b5f8 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800b652:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800b656:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800b65a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800b65e:	4658      	mov	r0, fp
 800b660:	b003      	add	sp, #12
 800b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b668 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	9d06      	ldr	r5, [sp, #24]
 800b66c:	4606      	mov	r6, r0
 800b66e:	468c      	mov	ip, r1
 800b670:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800b672:	4295      	cmp	r5, r2
{
 800b674:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b676:	dd08      	ble.n	800b68a <jpeg_huff_decode+0x22>
 800b678:	462b      	mov	r3, r5
 800b67a:	f7ff ff97 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b67e:	b910      	cbnz	r0, 800b686 <jpeg_huff_decode+0x1e>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b686:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800b68a:	1b62      	subs	r2, r4, r5
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <jpeg_huff_decode+0x90>)
 800b68e:	fa4c f002 	asr.w	r0, ip, r2
 800b692:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b696:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800b698:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b69c:	4283      	cmp	r3, r0
 800b69e:	db0d      	blt.n	800b6bc <jpeg_huff_decode+0x54>
  if (l > 16) {
 800b6a0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800b6a2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800b6a6:	dd1e      	ble.n	800b6e6 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800b6a8:	6930      	ldr	r0, [r6, #16]
 800b6aa:	2279      	movs	r2, #121	; 0x79
 800b6ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b6b0:	6803      	ldr	r3, [r0, #0]
 800b6b2:	615a      	str	r2, [r3, #20]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e7e3      	b.n	800b684 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b6bc:	2a00      	cmp	r2, #0
    code <<= 1;
 800b6be:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b6c2:	dc08      	bgt.n	800b6d6 <jpeg_huff_decode+0x6e>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4661      	mov	r1, ip
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff ff6f 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d0d6      	beq.n	800b680 <jpeg_huff_decode+0x18>
 800b6d2:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800b6d6:	3a01      	subs	r2, #1
    l++;
 800b6d8:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800b6da:	fa4c f002 	asr.w	r0, ip, r2
 800b6de:	f000 0001 	and.w	r0, r0, #1
 800b6e2:	4320      	orrs	r0, r4
    l++;
 800b6e4:	e7d8      	b.n	800b698 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800b6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ea:	3512      	adds	r5, #18
 800b6ec:	4418      	add	r0, r3
 800b6ee:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800b6f2:	4410      	add	r0, r2
 800b6f4:	7c40      	ldrb	r0, [r0, #17]
 800b6f6:	e7c5      	b.n	800b684 <jpeg_huff_decode+0x1c>
 800b6f8:	0802c9c0 	.word	0x0802c9c0

0800b6fc <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800b6fc:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b6fe:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800b702:	2600      	movs	r6, #0
{
 800b704:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b706:	68eb      	ldr	r3, [r5, #12]
 800b708:	6991      	ldr	r1, [r2, #24]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bfb8      	it	lt
 800b70e:	3307      	addlt	r3, #7
 800b710:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800b714:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b716:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800b718:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b71a:	4798      	blx	r3
 800b71c:	b190      	cbz	r0, 800b744 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800b71e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800b722:	4631      	mov	r1, r6
 800b724:	f105 0014 	add.w	r0, r5, #20
 800b728:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b72c:	0092      	lsls	r2, r2, #2
 800b72e:	f01d fd8d 	bl	802924c <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b732:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800b736:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b738:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800b73a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800b73e:	b903      	cbnz	r3, 800b742 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800b740:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800b742:	2001      	movs	r0, #1
}
 800b744:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b748 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800b74c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800b750:	b091      	sub	sp, #68	; 0x44
 800b752:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b754:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800b758:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b75a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b75e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b760:	b933      	cbnz	r3, 800b770 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b762:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b764:	b17e      	cbz	r6, 800b786 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b766:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800b768:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b76a:	3b01      	subs	r3, #1
 800b76c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800b76e:	e007      	b.n	800b780 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800b770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1f5      	bne.n	800b762 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800b776:	f7ff ffc1 	bl	800b6fc <process_restart>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d1f1      	bne.n	800b762 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800b77e:	2000      	movs	r0, #0
}
 800b780:	b011      	add	sp, #68	; 0x44
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b786:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800b788:	f104 0810 	add.w	r8, r4, #16
 800b78c:	af0b      	add	r7, sp, #44	; 0x2c
 800b78e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	f104 0b10 	add.w	fp, r4, #16
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	9206      	str	r2, [sp, #24]
 800b79c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800b79e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b8b8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b7a2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b7a4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b7a8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b7ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b7b4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	dc0d      	bgt.n	800b7d8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b7bc:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b7be:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b7c0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b7c2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	9a07      	ldr	r2, [sp, #28]
 800b7c8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b7ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b7cc:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b7d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7d2:	6833      	ldr	r3, [r6, #0]
 800b7d4:	602b      	str	r3, [r5, #0]
 800b7d6:	e7c6      	b.n	800b766 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800b7d8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b7da:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800b7de:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800b7e2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b7e6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800b7e8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800b7ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7f6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b7fa:	dc0c      	bgt.n	800b816 <decode_mcu_DC_first+0xce>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4662      	mov	r2, ip
 800b800:	4671      	mov	r1, lr
 800b802:	a806      	add	r0, sp, #24
 800b804:	f7ff fed2 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0b8      	beq.n	800b77e <decode_mcu_DC_first+0x36>
 800b80c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b810:	f1bc 0f07 	cmp.w	ip, #7
 800b814:	dd3e      	ble.n	800b894 <decode_mcu_DC_first+0x14c>
 800b816:	f1ac 0308 	sub.w	r3, ip, #8
 800b81a:	fa4e f303 	asr.w	r3, lr, r3
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b824:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b828:	2a00      	cmp	r2, #0
 800b82a:	d042      	beq.n	800b8b2 <decode_mcu_DC_first+0x16a>
 800b82c:	4443      	add	r3, r8
 800b82e:	ebac 0c02 	sub.w	ip, ip, r2
 800b832:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800b836:	f1b8 0f00 	cmp.w	r8, #0
 800b83a:	d01b      	beq.n	800b874 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b83c:	45e0      	cmp	r8, ip
 800b83e:	dd09      	ble.n	800b854 <decode_mcu_DC_first+0x10c>
 800b840:	4643      	mov	r3, r8
 800b842:	4662      	mov	r2, ip
 800b844:	4671      	mov	r1, lr
 800b846:	a806      	add	r0, sp, #24
 800b848:	f7ff feb0 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d096      	beq.n	800b77e <decode_mcu_DC_first+0x36>
 800b850:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800b854:	ebac 0c08 	sub.w	ip, ip, r8
 800b858:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800b85c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800b860:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800b864:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800b868:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800b86a:	4299      	cmp	r1, r3
 800b86c:	bfac      	ite	ge
 800b86e:	eba3 0802 	subge.w	r8, r3, r2
 800b872:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800b874:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b876:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800b878:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800b87c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800b87e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800b882:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800b884:	fa00 f803 	lsl.w	r8, r0, r3
 800b888:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800b88a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800b88e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b892:	e78f      	b.n	800b7b4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b894:	2301      	movs	r3, #1
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	4662      	mov	r2, ip
 800b89a:	4643      	mov	r3, r8
 800b89c:	4671      	mov	r1, lr
 800b89e:	a806      	add	r0, sp, #24
 800b8a0:	f7ff fee2 	bl	800b668 <jpeg_huff_decode>
 800b8a4:	f1b0 0800 	subs.w	r8, r0, #0
 800b8a8:	f6ff af69 	blt.w	800b77e <decode_mcu_DC_first+0x36>
 800b8ac:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b8b0:	e7c1      	b.n	800b836 <decode_mcu_DC_first+0xee>
 800b8b2:	2309      	movs	r3, #9
 800b8b4:	e7ef      	b.n	800b896 <decode_mcu_DC_first+0x14e>
 800b8b6:	bf00      	nop
 800b8b8:	0802c9c0 	.word	0x0802c9c0

0800b8bc <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b8bc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	b08d      	sub	sp, #52	; 0x34
 800b8c8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b8ca:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b8ce:	b933      	cbnz	r3, 800b8de <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b8d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8d2:	b17b      	cbz	r3, 800b8f4 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b8d4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800b8d6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b8dc:	e007      	b.n	800b8ee <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800b8de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1f5      	bne.n	800b8d0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800b8e4:	f7ff ff0a 	bl	800b6fc <process_restart>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d1f1      	bne.n	800b8d0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800b8ec:	2000      	movs	r0, #0
}
 800b8ee:	b00d      	add	sp, #52	; 0x34
 800b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800b8f4:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800b8f6:	b116      	cbz	r6, 800b8fe <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800b8f8:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800b8fa:	612e      	str	r6, [r5, #16]
 800b8fc:	e7ea      	b.n	800b8d4 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800b8fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800b902:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800b906:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800b908:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800b90c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800b910:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b912:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b914:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	9207      	str	r2, [sp, #28]
 800b91e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800b920:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800ba18 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800b924:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b926:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800b928:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b92a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	4598      	cmp	r8, r3
 800b932:	dc69      	bgt.n	800ba08 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b934:	2a07      	cmp	r2, #7
 800b936:	dc09      	bgt.n	800b94c <decode_mcu_AC_first+0x90>
 800b938:	2300      	movs	r3, #0
 800b93a:	a807      	add	r0, sp, #28
 800b93c:	f7ff fe36 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b940:	2800      	cmp	r0, #0
 800b942:	d0d3      	beq.n	800b8ec <decode_mcu_AC_first+0x30>
 800b944:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b948:	2a07      	cmp	r2, #7
 800b94a:	dd33      	ble.n	800b9b4 <decode_mcu_AC_first+0xf8>
 800b94c:	f1a2 0308 	sub.w	r3, r2, #8
 800b950:	fa41 f303 	asr.w	r3, r1, r3
 800b954:	b2db      	uxtb	r3, r3
 800b956:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b95a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b95e:	b3a0      	cbz	r0, 800b9ca <decode_mcu_AC_first+0x10e>
 800b960:	444b      	add	r3, r9
 800b962:	1a12      	subs	r2, r2, r0
 800b964:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b968:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800b96c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b970:	d02d      	beq.n	800b9ce <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b972:	42a2      	cmp	r2, r4
	  k += r;
 800b974:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b976:	da07      	bge.n	800b988 <decode_mcu_AC_first+0xcc>
 800b978:	4623      	mov	r3, r4
 800b97a:	a807      	add	r0, sp, #28
 800b97c:	f7ff fe16 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b980:	2800      	cmp	r0, #0
 800b982:	d0b3      	beq.n	800b8ec <decode_mcu_AC_first+0x30>
 800b984:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800b988:	1b12      	subs	r2, r2, r4
 800b98a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b98e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b990:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800b994:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b998:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800b99a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b99c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800b99e:	bfa8      	it	ge
 800b9a0:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b9a2:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800b9a6:	40a3      	lsls	r3, r4
 800b9a8:	9c05      	ldr	r4, [sp, #20]
 800b9aa:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b9ae:	f108 0801 	add.w	r8, r8, #1
 800b9b2:	e7bc      	b.n	800b92e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	a807      	add	r0, sp, #28
 800b9ba:	464b      	mov	r3, r9
 800b9bc:	f7ff fe54 	bl	800b668 <jpeg_huff_decode>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	db93      	blt.n	800b8ec <decode_mcu_AC_first+0x30>
 800b9c4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b9c8:	e7ce      	b.n	800b968 <decode_mcu_AC_first+0xac>
 800b9ca:	2309      	movs	r3, #9
 800b9cc:	e7f3      	b.n	800b9b6 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800b9ce:	2b0f      	cmp	r3, #15
 800b9d0:	d102      	bne.n	800b9d8 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800b9d2:	f108 080f 	add.w	r8, r8, #15
 800b9d6:	e7ea      	b.n	800b9ae <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800b9d8:	2601      	movs	r6, #1
 800b9da:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800b9dc:	b19b      	cbz	r3, 800ba06 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	da09      	bge.n	800b9f6 <decode_mcu_AC_first+0x13a>
 800b9e2:	a807      	add	r0, sp, #28
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	f7ff fde1 	bl	800b5ac <jpeg_fill_bit_buffer>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	f43f af7e 	beq.w	800b8ec <decode_mcu_AC_first+0x30>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800b9f6:	1ad2      	subs	r2, r2, r3
 800b9f8:	4807      	ldr	r0, [pc, #28]	; (800ba18 <decode_mcu_AC_first+0x15c>)
 800b9fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b9fe:	fa41 f302 	asr.w	r3, r1, r2
 800ba02:	4003      	ands	r3, r0
	      EOBRUN += r;
 800ba04:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800ba06:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	9807      	ldr	r0, [sp, #28]
 800ba0c:	6018      	str	r0, [r3, #0]
 800ba0e:	9808      	ldr	r0, [sp, #32]
 800ba10:	6058      	str	r0, [r3, #4]
 800ba12:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800ba16:	e770      	b.n	800b8fa <decode_mcu_AC_first+0x3e>
 800ba18:	0802c9c0 	.word	0x0802c9c0

0800ba1c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800ba1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ba20:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800ba24:	2701      	movs	r7, #1
{   
 800ba26:	b087      	sub	sp, #28
 800ba28:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ba2a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800ba2c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800ba30:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ba32:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800ba36:	b9c3      	cbnz	r3, 800ba6a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ba38:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba3a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ba3c:	9405      	str	r4, [sp, #20]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	9201      	str	r2, [sp, #4]
 800ba44:	9302      	str	r3, [sp, #8]
 800ba46:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba4a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ba4e:	42b3      	cmp	r3, r6
 800ba50:	dc16      	bgt.n	800ba80 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ba52:	69a3      	ldr	r3, [r4, #24]
 800ba54:	9801      	ldr	r0, [sp, #4]
 800ba56:	6018      	str	r0, [r3, #0]
 800ba58:	9802      	ldr	r0, [sp, #8]
 800ba5a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800ba5c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800ba5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba60:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ba62:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800ba66:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800ba68:	e007      	b.n	800ba7a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800ba6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e3      	bne.n	800ba38 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800ba70:	f7ff fe44 	bl	800b6fc <process_restart>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d1df      	bne.n	800ba38 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800ba78:	2000      	movs	r0, #0
}
 800ba7a:	b007      	add	sp, #28
 800ba7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800ba80:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800ba82:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800ba86:	dc07      	bgt.n	800ba98 <decode_mcu_DC_refine+0x7c>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	a801      	add	r0, sp, #4
 800ba8c:	f7ff fd8e 	bl	800b5ac <jpeg_fill_bit_buffer>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d0f1      	beq.n	800ba78 <decode_mcu_DC_refine+0x5c>
 800ba94:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800ba98:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba9a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800ba9c:	fa41 f302 	asr.w	r3, r1, r2
 800baa0:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800baa2:	bf42      	ittt	mi
 800baa4:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800baa8:	433b      	orrmi	r3, r7
 800baaa:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800baae:	e7cc      	b.n	800ba4a <decode_mcu_DC_refine+0x2e>

0800bab0 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bab0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	4606      	mov	r6, r0
 800baba:	b0d1      	sub	sp, #324	; 0x144
 800babc:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800babe:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bac2:	b95b      	cbnz	r3, 800badc <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800bac4:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800bac8:	f1bb 0f00 	cmp.w	fp, #0
 800bacc:	d012      	beq.n	800baf4 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bace:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800bad2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bad4:	3b01      	subs	r3, #1
 800bad6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800bada:	e008      	b.n	800baee <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800badc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1ef      	bne.n	800bac4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800bae4:	f7ff fe0a 	bl	800b6fc <process_restart>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d1eb      	bne.n	800bac4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800baec:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800baee:	b051      	add	sp, #324	; 0x144
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800baf4:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800baf8:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bafa:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800bafc:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800bb00:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bb02:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800bb06:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bb0a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bb0c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bb0e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295
 800bb14:	fa02 f303 	lsl.w	r3, r2, r3
 800bb18:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800bb1a:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800bb1e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bb20:	69b3      	ldr	r3, [r6, #24]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	602a      	str	r2, [r5, #0]
 800bb28:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800bb2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bb2e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800bb32:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f040 80bf 	bne.w	800bcb8 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800bb3a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800bb3e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800bb40:	9b06      	ldr	r3, [sp, #24]
 800bb42:	429f      	cmp	r7, r3
 800bb44:	dd0a      	ble.n	800bb5c <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb46:	69b3      	ldr	r3, [r6, #24]
 800bb48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb4a:	6019      	str	r1, [r3, #0]
 800bb4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb4e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bb50:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb52:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bb56:	f8c8 3010 	str.w	r3, [r8, #16]
 800bb5a:	e7b8      	b.n	800bace <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bb5c:	2a07      	cmp	r2, #7
 800bb5e:	dc0a      	bgt.n	800bb76 <decode_mcu_AC_refine+0xc6>
 800bb60:	2300      	movs	r3, #0
 800bb62:	4621      	mov	r1, r4
 800bb64:	4628      	mov	r0, r5
 800bb66:	f7ff fd21 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d06e      	beq.n	800bc4c <decode_mcu_AC_refine+0x19c>
 800bb6e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800bb72:	2a07      	cmp	r2, #7
 800bb74:	dd61      	ble.n	800bc3a <decode_mcu_AC_refine+0x18a>
 800bb76:	f1a2 0308 	sub.w	r3, r2, #8
 800bb7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7c:	fa44 f303 	asr.w	r3, r4, r3
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bb86:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	d06b      	beq.n	800bc66 <decode_mcu_AC_refine+0x1b6>
 800bb8e:	4403      	add	r3, r0
 800bb90:	1a52      	subs	r2, r2, r1
 800bb92:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bb96:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800bb9a:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800bb9e:	9304      	str	r3, [sp, #16]
 800bba0:	d066      	beq.n	800bc70 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d009      	beq.n	800bbba <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800bba6:	6833      	ldr	r3, [r6, #0]
 800bba8:	2179      	movs	r1, #121	; 0x79
 800bbaa:	4630      	mov	r0, r6
 800bbac:	9204      	str	r2, [sp, #16]
 800bbae:	6159      	str	r1, [r3, #20]
 800bbb0:	f04f 31ff 	mov.w	r1, #4294967295
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4798      	blx	r3
 800bbb8:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	dc08      	bgt.n	800bbd0 <decode_mcu_AC_refine+0x120>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7ff fcf2 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d03f      	beq.n	800bc4c <decode_mcu_AC_refine+0x19c>
 800bbcc:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800bbd0:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800bbd2:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800bbd4:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800bbd8:	f013 0f01 	tst.w	r3, #1
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	bf08      	it	eq
 800bbe0:	460b      	moveq	r3, r1
 800bbe2:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800bbe4:	9b08      	ldr	r3, [sp, #32]
 800bbe6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bbea:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800bbec:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d068      	beq.n	800bcc6 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	dc07      	bgt.n	800bc08 <decode_mcu_AC_refine+0x158>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7ff fcd5 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bc02:	b318      	cbz	r0, 800bc4c <decode_mcu_AC_refine+0x19c>
 800bc04:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800bc08:	3a01      	subs	r2, #1
 800bc0a:	fa44 f302 	asr.w	r3, r4, r2
 800bc0e:	07d9      	lsls	r1, r3, #31
 800bc10:	d50e      	bpl.n	800bc30 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	4219      	tst	r1, r3
 800bc1c:	d108      	bne.n	800bc30 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800bc1e:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800bc20:	b28b      	uxth	r3, r1
 800bc22:	bfac      	ite	ge
 800bc24:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800bc26:	9907      	ldrlt	r1, [sp, #28]
 800bc28:	440b      	add	r3, r1
 800bc2a:	9905      	ldr	r1, [sp, #20]
 800bc2c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800bc30:	3701      	adds	r7, #1
	} while (k <= Se);
 800bc32:	9b06      	ldr	r3, [sp, #24]
 800bc34:	42bb      	cmp	r3, r7
 800bc36:	dad5      	bge.n	800bbe4 <decode_mcu_AC_refine+0x134>
 800bc38:	e048      	b.n	800bccc <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	4621      	mov	r1, r4
 800bc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7ff fd10 	bl	800b668 <jpeg_huff_decode>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	da0e      	bge.n	800bc6a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bc4c:	ab10      	add	r3, sp, #64	; 0x40
 800bc4e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800bc50:	f1bb 0f00 	cmp.w	fp, #0
 800bc54:	f43f af4a 	beq.w	800baec <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bc58:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc5c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800bc60:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800bc64:	e7f4      	b.n	800bc50 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bc66:	2309      	movs	r3, #9
 800bc68:	e7e8      	b.n	800bc3c <decode_mcu_AC_refine+0x18c>
 800bc6a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800bc6e:	e792      	b.n	800bb96 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800bc70:	f1ba 0f0f 	cmp.w	sl, #15
 800bc74:	d0b6      	beq.n	800bbe4 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800bc76:	2301      	movs	r3, #1
 800bc78:	fa03 f30a 	lsl.w	r3, r3, sl
 800bc7c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800bc7e:	f1ba 0f00 	cmp.w	sl, #0
 800bc82:	d015      	beq.n	800bcb0 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800bc84:	4552      	cmp	r2, sl
 800bc86:	da08      	bge.n	800bc9a <decode_mcu_AC_refine+0x1ea>
 800bc88:	4653      	mov	r3, sl
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	a80b      	add	r0, sp, #44	; 0x2c
 800bc8e:	f7ff fc8d 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d0da      	beq.n	800bc4c <decode_mcu_AC_refine+0x19c>
 800bc96:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800bc9a:	4b26      	ldr	r3, [pc, #152]	; (800bd34 <decode_mcu_AC_refine+0x284>)
 800bc9c:	eba2 020a 	sub.w	r2, r2, sl
 800bca0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800bca4:	fa44 f302 	asr.w	r3, r4, r2
 800bca8:	400b      	ands	r3, r1
	      EOBRUN += r;
 800bcaa:	9902      	ldr	r1, [sp, #8]
 800bcac:	4419      	add	r1, r3
 800bcae:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800bcb0:	9b02      	ldr	r3, [sp, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f43f af47 	beq.w	800bb46 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800bcb8:	9b06      	ldr	r3, [sp, #24]
 800bcba:	429f      	cmp	r7, r3
 800bcbc:	dd15      	ble.n	800bcea <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800bcbe:	9b02      	ldr	r3, [sp, #8]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	9302      	str	r3, [sp, #8]
 800bcc4:	e73f      	b.n	800bb46 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800bcc6:	f1ba 0a01 	subs.w	sl, sl, #1
 800bcca:	d2b1      	bcs.n	800bc30 <decode_mcu_AC_refine+0x180>
	if (s) {
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	b153      	cbz	r3, 800bce6 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800bcd0:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800bcd2:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800bcd4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800bcd8:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800bcdc:	a910      	add	r1, sp, #64	; 0x40
 800bcde:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800bce2:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800bce6:	3701      	adds	r7, #1
 800bce8:	e72a      	b.n	800bb40 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800bcf0:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800bcf4:	b1e3      	cbz	r3, 800bd30 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	dc08      	bgt.n	800bd0c <decode_mcu_AC_refine+0x25c>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	a80b      	add	r0, sp, #44	; 0x2c
 800bd00:	f7ff fc54 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0a1      	beq.n	800bc4c <decode_mcu_AC_refine+0x19c>
 800bd08:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800bd0c:	3a01      	subs	r2, #1
 800bd0e:	fa44 f302 	asr.w	r3, r4, r2
 800bd12:	07db      	lsls	r3, r3, #31
 800bd14:	d50c      	bpl.n	800bd30 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800bd16:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800bd1a:	9b03      	ldr	r3, [sp, #12]
 800bd1c:	4219      	tst	r1, r3
 800bd1e:	d107      	bne.n	800bd30 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800bd20:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800bd22:	b28b      	uxth	r3, r1
 800bd24:	bfac      	ite	ge
 800bd26:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800bd28:	9907      	ldrlt	r1, [sp, #28]
 800bd2a:	440b      	add	r3, r1
 800bd2c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800bd30:	3701      	adds	r7, #1
 800bd32:	e7c1      	b.n	800bcb8 <decode_mcu_AC_refine+0x208>
 800bd34:	0802c9c0 	.word	0x0802c9c0

0800bd38 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bd3c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bd40:	b093      	sub	sp, #76	; 0x4c
 800bd42:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bd44:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800bd48:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800bd4a:	b933      	cbnz	r3, 800bd5a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bd4c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800bd4e:	b17f      	cbz	r7, 800bd70 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bd50:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bd52:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bd54:	3b01      	subs	r3, #1
 800bd56:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bd58:	e007      	b.n	800bd6a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800bd5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f5      	bne.n	800bd4c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800bd60:	f7ff fccc 	bl	800b6fc <process_restart>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d1f1      	bne.n	800bd4c <decode_mcu_sub+0x14>
	return FALSE;
 800bd68:	2000      	movs	r0, #0
}
 800bd6a:	b013      	add	sp, #76	; 0x4c
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800bd70:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800bd74:	f105 0810 	add.w	r8, r5, #16
 800bd78:	ac0d      	add	r4, sp, #52	; 0x34
 800bd7a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800bd7e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800bd80:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800bd84:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c024 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800bd88:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd8a:	69b3      	ldr	r3, [r6, #24]
 800bd8c:	960c      	str	r6, [sp, #48]	; 0x30
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	9208      	str	r2, [sp, #32]
 800bd94:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800bd96:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd9a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bd9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bda0:	f8d8 3000 	ldr.w	r3, [r8]
 800bda4:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bda6:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800bdaa:	42bb      	cmp	r3, r7
 800bdac:	dc0e      	bgt.n	800bdcc <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdae:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bdb0:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdb2:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800bdb4:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdbc:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bdbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdc0:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bdc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdc6:	6833      	ldr	r3, [r6, #0]
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	e7c1      	b.n	800bd50 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800bdcc:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bdce:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800bdd2:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800bdd6:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bdda:	dc0c      	bgt.n	800bdf6 <decode_mcu_sub+0xbe>
 800bddc:	2300      	movs	r3, #0
 800bdde:	4662      	mov	r2, ip
 800bde0:	4671      	mov	r1, lr
 800bde2:	a808      	add	r0, sp, #32
 800bde4:	f7ff fbe2 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d0bd      	beq.n	800bd68 <decode_mcu_sub+0x30>
 800bdec:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bdf0:	f1bc 0f07 	cmp.w	ip, #7
 800bdf4:	dd4a      	ble.n	800be8c <decode_mcu_sub+0x154>
 800bdf6:	f1ac 0308 	sub.w	r3, ip, #8
 800bdfa:	fa4e f303 	asr.w	r3, lr, r3
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800be04:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be08:	2a00      	cmp	r2, #0
 800be0a:	d04d      	beq.n	800bea8 <decode_mcu_sub+0x170>
 800be0c:	4423      	add	r3, r4
 800be0e:	ebac 0c02 	sub.w	ip, ip, r2
 800be12:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800be16:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800be1a:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800be1e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 80a0 	beq.w	800bf66 <decode_mcu_sub+0x22e>
	if (s) {
 800be26:	b1cc      	cbz	r4, 800be5c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be28:	45a4      	cmp	ip, r4
 800be2a:	da09      	bge.n	800be40 <decode_mcu_sub+0x108>
 800be2c:	4623      	mov	r3, r4
 800be2e:	4662      	mov	r2, ip
 800be30:	4671      	mov	r1, lr
 800be32:	a808      	add	r0, sp, #32
 800be34:	f7ff fbba 	bl	800b5ac <jpeg_fill_bit_buffer>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d095      	beq.n	800bd68 <decode_mcu_sub+0x30>
 800be3c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800be40:	ebac 0c04 	sub.w	ip, ip, r4
 800be44:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800be48:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800be4a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800be4e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800be52:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800be54:	4299      	cmp	r1, r3
 800be56:	bfac      	ite	ge
 800be58:	1a9c      	subge	r4, r3, r2
 800be5a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800be5c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800be60:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800be64:	ab12      	add	r3, sp, #72	; 0x48
 800be66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800be6a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800be6e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800be70:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800be74:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800be78:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	429c      	cmp	r4, r3
 800be7e:	db15      	blt.n	800beac <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800be80:	9b05      	ldr	r3, [sp, #20]
 800be82:	429c      	cmp	r4, r3
 800be84:	f340 8081 	ble.w	800bf8a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800be88:	3701      	adds	r7, #1
 800be8a:	e78c      	b.n	800bda6 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800be8c:	2301      	movs	r3, #1
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	4662      	mov	r2, ip
 800be92:	4623      	mov	r3, r4
 800be94:	4671      	mov	r1, lr
 800be96:	a808      	add	r0, sp, #32
 800be98:	f7ff fbe6 	bl	800b668 <jpeg_huff_decode>
 800be9c:	1e04      	subs	r4, r0, #0
 800be9e:	f6ff af63 	blt.w	800bd68 <decode_mcu_sub+0x30>
 800bea2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bea6:	e7b6      	b.n	800be16 <decode_mcu_sub+0xde>
 800bea8:	2309      	movs	r3, #9
 800beaa:	e7f0      	b.n	800be8e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800beac:	f1bc 0f07 	cmp.w	ip, #7
 800beb0:	dc0d      	bgt.n	800bece <decode_mcu_sub+0x196>
 800beb2:	2300      	movs	r3, #0
 800beb4:	4662      	mov	r2, ip
 800beb6:	4671      	mov	r1, lr
 800beb8:	a808      	add	r0, sp, #32
 800beba:	f7ff fb77 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f af52 	beq.w	800bd68 <decode_mcu_sub+0x30>
 800bec4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bec8:	f1bc 0f07 	cmp.w	ip, #7
 800becc:	dd37      	ble.n	800bf3e <decode_mcu_sub+0x206>
 800bece:	f1ac 0308 	sub.w	r3, ip, #8
 800bed2:	fa4e f303 	asr.w	r3, lr, r3
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bedc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	d03a      	beq.n	800bf5a <decode_mcu_sub+0x222>
 800bee4:	4443      	add	r3, r8
 800bee6:	ebac 0c02 	sub.w	ip, ip, r2
 800beea:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800beee:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800bef2:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800bef6:	d032      	beq.n	800bf5e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bef8:	459c      	cmp	ip, r3
	    k += r;
 800befa:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800befc:	da0b      	bge.n	800bf16 <decode_mcu_sub+0x1de>
 800befe:	4662      	mov	r2, ip
 800bf00:	4671      	mov	r1, lr
 800bf02:	a808      	add	r0, sp, #32
 800bf04:	9307      	str	r3, [sp, #28]
 800bf06:	f7ff fb51 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	f43f af2c 	beq.w	800bd68 <decode_mcu_sub+0x30>
 800bf10:	9b07      	ldr	r3, [sp, #28]
 800bf12:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800bf16:	ebac 0c03 	sub.w	ip, ip, r3
 800bf1a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800bf1e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800bf20:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800bf24:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800bf28:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800bf2a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800bf2c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800bf2e:	bfa8      	it	ge
 800bf30:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800bf32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf36:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800bf3a:	3401      	adds	r4, #1
 800bf3c:	e79d      	b.n	800be7a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bf3e:	2301      	movs	r3, #1
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4662      	mov	r2, ip
 800bf44:	4643      	mov	r3, r8
 800bf46:	4671      	mov	r1, lr
 800bf48:	a808      	add	r0, sp, #32
 800bf4a:	f7ff fb8d 	bl	800b668 <jpeg_huff_decode>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f6ff af0a 	blt.w	800bd68 <decode_mcu_sub+0x30>
 800bf54:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bf58:	e7c9      	b.n	800beee <decode_mcu_sub+0x1b6>
 800bf5a:	2309      	movs	r3, #9
 800bf5c:	e7f0      	b.n	800bf40 <decode_mcu_sub+0x208>
	    if (r != 15)
 800bf5e:	2a0f      	cmp	r2, #15
 800bf60:	d192      	bne.n	800be88 <decode_mcu_sub+0x150>
	    k += 15;
 800bf62:	340f      	adds	r4, #15
 800bf64:	e7e9      	b.n	800bf3a <decode_mcu_sub+0x202>
	if (s) {
 800bf66:	b174      	cbz	r4, 800bf86 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf68:	45a4      	cmp	ip, r4
 800bf6a:	da0a      	bge.n	800bf82 <decode_mcu_sub+0x24a>
 800bf6c:	4623      	mov	r3, r4
 800bf6e:	4662      	mov	r2, ip
 800bf70:	4671      	mov	r1, lr
 800bf72:	a808      	add	r0, sp, #32
 800bf74:	f7ff fb1a 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f43f aef5 	beq.w	800bd68 <decode_mcu_sub+0x30>
 800bf7e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800bf82:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800bf86:	2401      	movs	r4, #1
 800bf88:	e77a      	b.n	800be80 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bf8a:	f1bc 0f07 	cmp.w	ip, #7
 800bf8e:	dc0d      	bgt.n	800bfac <decode_mcu_sub+0x274>
 800bf90:	2300      	movs	r3, #0
 800bf92:	4662      	mov	r2, ip
 800bf94:	4671      	mov	r1, lr
 800bf96:	a808      	add	r0, sp, #32
 800bf98:	f7ff fb08 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f43f aee3 	beq.w	800bd68 <decode_mcu_sub+0x30>
 800bfa2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bfa6:	f1bc 0f07 	cmp.w	ip, #7
 800bfaa:	dd25      	ble.n	800bff8 <decode_mcu_sub+0x2c0>
 800bfac:	f1ac 0308 	sub.w	r3, ip, #8
 800bfb0:	fa4e f303 	asr.w	r3, lr, r3
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bfba:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bfbe:	b34a      	cbz	r2, 800c014 <decode_mcu_sub+0x2dc>
 800bfc0:	4443      	add	r3, r8
 800bfc2:	ebac 0c02 	sub.w	ip, ip, r2
 800bfc6:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bfca:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800bfce:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bfd2:	d021      	beq.n	800c018 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bfd4:	45dc      	cmp	ip, fp
	  k += r;
 800bfd6:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bfd8:	da0a      	bge.n	800bff0 <decode_mcu_sub+0x2b8>
 800bfda:	465b      	mov	r3, fp
 800bfdc:	4662      	mov	r2, ip
 800bfde:	4671      	mov	r1, lr
 800bfe0:	a808      	add	r0, sp, #32
 800bfe2:	f7ff fae3 	bl	800b5ac <jpeg_fill_bit_buffer>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f43f aebe 	beq.w	800bd68 <decode_mcu_sub+0x30>
 800bfec:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800bff0:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800bff4:	3401      	adds	r4, #1
 800bff6:	e743      	b.n	800be80 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bff8:	2301      	movs	r3, #1
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	4662      	mov	r2, ip
 800bffe:	4643      	mov	r3, r8
 800c000:	4671      	mov	r1, lr
 800c002:	a808      	add	r0, sp, #32
 800c004:	f7ff fb30 	bl	800b668 <jpeg_huff_decode>
 800c008:	2800      	cmp	r0, #0
 800c00a:	f6ff aead 	blt.w	800bd68 <decode_mcu_sub+0x30>
 800c00e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c012:	e7da      	b.n	800bfca <decode_mcu_sub+0x292>
 800c014:	2309      	movs	r3, #9
 800c016:	e7f0      	b.n	800bffa <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c018:	2b0f      	cmp	r3, #15
 800c01a:	f47f af35 	bne.w	800be88 <decode_mcu_sub+0x150>
	  k += 15;
 800c01e:	340f      	adds	r4, #15
 800c020:	e7e8      	b.n	800bff4 <decode_mcu_sub+0x2bc>
 800c022:	bf00      	nop
 800c024:	0802c9c0 	.word	0x0802c9c0

0800c028 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c02c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c030:	b091      	sub	sp, #68	; 0x44
 800c032:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c034:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c038:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c03a:	b933      	cbnz	r3, 800c04a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c03c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c03e:	b17f      	cbz	r7, 800c060 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c040:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c042:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c044:	3b01      	subs	r3, #1
 800c046:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c048:	e007      	b.n	800c05a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c04a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1f5      	bne.n	800c03c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c050:	f7ff fb54 	bl	800b6fc <process_restart>
 800c054:	2800      	cmp	r0, #0
 800c056:	d1f1      	bne.n	800c03c <decode_mcu+0x14>
	return FALSE;
 800c058:	2000      	movs	r0, #0
}
 800c05a:	b011      	add	sp, #68	; 0x44
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c060:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c062:	f105 0810 	add.w	r8, r5, #16
 800c066:	ac0b      	add	r4, sp, #44	; 0x2c
 800c068:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	9206      	str	r2, [sp, #24]
 800c072:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c074:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c308 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c078:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c07a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c07e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c084:	f8d8 3000 	ldr.w	r3, [r8]
 800c088:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c08a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c08e:	42bb      	cmp	r3, r7
 800c090:	dc0e      	bgt.n	800c0b0 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c092:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c094:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c096:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c098:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	9a07      	ldr	r2, [sp, #28]
 800c0a0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c0a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c0a4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c0a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0aa:	6833      	ldr	r3, [r6, #0]
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	e7c7      	b.n	800c040 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c0b0:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c0b2:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c0b6:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c0ba:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c0be:	dc0c      	bgt.n	800c0da <decode_mcu+0xb2>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4662      	mov	r2, ip
 800c0c4:	4671      	mov	r1, lr
 800c0c6:	a806      	add	r0, sp, #24
 800c0c8:	f7ff fa70 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	d0c3      	beq.n	800c058 <decode_mcu+0x30>
 800c0d0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c0d4:	f1bc 0f07 	cmp.w	ip, #7
 800c0d8:	dd49      	ble.n	800c16e <decode_mcu+0x146>
 800c0da:	f1ac 0308 	sub.w	r3, ip, #8
 800c0de:	fa4e f303 	asr.w	r3, lr, r3
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c0e8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	d04c      	beq.n	800c18a <decode_mcu+0x162>
 800c0f0:	4423      	add	r3, r4
 800c0f2:	ebac 0c02 	sub.w	ip, ip, r2
 800c0f6:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c0fa:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c0fe:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c102:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 809f 	beq.w	800c248 <decode_mcu+0x220>
	if (s) {
 800c10a:	b1cc      	cbz	r4, 800c140 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c10c:	45a4      	cmp	ip, r4
 800c10e:	da09      	bge.n	800c124 <decode_mcu+0xfc>
 800c110:	4623      	mov	r3, r4
 800c112:	4662      	mov	r2, ip
 800c114:	4671      	mov	r1, lr
 800c116:	a806      	add	r0, sp, #24
 800c118:	f7ff fa48 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d09b      	beq.n	800c058 <decode_mcu+0x30>
 800c120:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c124:	ebac 0c04 	sub.w	ip, ip, r4
 800c128:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c12c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c12e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c132:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c136:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c138:	4299      	cmp	r1, r3
 800c13a:	bfac      	ite	ge
 800c13c:	1a9c      	subge	r4, r3, r2
 800c13e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c140:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c144:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c148:	ab10      	add	r3, sp, #64	; 0x40
 800c14a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c14e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c152:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c154:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c158:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c15c:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	429c      	cmp	r4, r3
 800c162:	db14      	blt.n	800c18e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c164:	2c3f      	cmp	r4, #63	; 0x3f
 800c166:	f340 8081 	ble.w	800c26c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c16a:	3701      	adds	r7, #1
 800c16c:	e78d      	b.n	800c08a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c16e:	2301      	movs	r3, #1
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	4662      	mov	r2, ip
 800c174:	4623      	mov	r3, r4
 800c176:	4671      	mov	r1, lr
 800c178:	a806      	add	r0, sp, #24
 800c17a:	f7ff fa75 	bl	800b668 <jpeg_huff_decode>
 800c17e:	1e04      	subs	r4, r0, #0
 800c180:	f6ff af6a 	blt.w	800c058 <decode_mcu+0x30>
 800c184:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c188:	e7b7      	b.n	800c0fa <decode_mcu+0xd2>
 800c18a:	2309      	movs	r3, #9
 800c18c:	e7f0      	b.n	800c170 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c18e:	f1bc 0f07 	cmp.w	ip, #7
 800c192:	dc0d      	bgt.n	800c1b0 <decode_mcu+0x188>
 800c194:	2300      	movs	r3, #0
 800c196:	4662      	mov	r2, ip
 800c198:	4671      	mov	r1, lr
 800c19a:	a806      	add	r0, sp, #24
 800c19c:	f7ff fa06 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	f43f af59 	beq.w	800c058 <decode_mcu+0x30>
 800c1a6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c1aa:	f1bc 0f07 	cmp.w	ip, #7
 800c1ae:	dd37      	ble.n	800c220 <decode_mcu+0x1f8>
 800c1b0:	f1ac 0308 	sub.w	r3, ip, #8
 800c1b4:	fa4e f303 	asr.w	r3, lr, r3
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c1be:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	d03a      	beq.n	800c23c <decode_mcu+0x214>
 800c1c6:	4443      	add	r3, r8
 800c1c8:	ebac 0c02 	sub.w	ip, ip, r2
 800c1cc:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c1d0:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c1d4:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c1d8:	d032      	beq.n	800c240 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c1da:	459c      	cmp	ip, r3
	    k += r;
 800c1dc:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c1de:	da0b      	bge.n	800c1f8 <decode_mcu+0x1d0>
 800c1e0:	4662      	mov	r2, ip
 800c1e2:	4671      	mov	r1, lr
 800c1e4:	a806      	add	r0, sp, #24
 800c1e6:	9305      	str	r3, [sp, #20]
 800c1e8:	f7ff f9e0 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	f43f af33 	beq.w	800c058 <decode_mcu+0x30>
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c1f8:	ebac 0c03 	sub.w	ip, ip, r3
 800c1fc:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c200:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c202:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c206:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c20a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c20c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c20e:	4b3d      	ldr	r3, [pc, #244]	; (800c304 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c210:	bfa8      	it	ge
 800c212:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c214:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c218:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c21c:	3401      	adds	r4, #1
 800c21e:	e79e      	b.n	800c15e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c220:	2301      	movs	r3, #1
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4662      	mov	r2, ip
 800c226:	4643      	mov	r3, r8
 800c228:	4671      	mov	r1, lr
 800c22a:	a806      	add	r0, sp, #24
 800c22c:	f7ff fa1c 	bl	800b668 <jpeg_huff_decode>
 800c230:	2800      	cmp	r0, #0
 800c232:	f6ff af11 	blt.w	800c058 <decode_mcu+0x30>
 800c236:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c23a:	e7c9      	b.n	800c1d0 <decode_mcu+0x1a8>
 800c23c:	2309      	movs	r3, #9
 800c23e:	e7f0      	b.n	800c222 <decode_mcu+0x1fa>
	    if (r != 15)
 800c240:	2a0f      	cmp	r2, #15
 800c242:	d192      	bne.n	800c16a <decode_mcu+0x142>
	    k += 15;
 800c244:	340f      	adds	r4, #15
 800c246:	e7e9      	b.n	800c21c <decode_mcu+0x1f4>
	if (s) {
 800c248:	b174      	cbz	r4, 800c268 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c24a:	45a4      	cmp	ip, r4
 800c24c:	da0a      	bge.n	800c264 <decode_mcu+0x23c>
 800c24e:	4623      	mov	r3, r4
 800c250:	4662      	mov	r2, ip
 800c252:	4671      	mov	r1, lr
 800c254:	a806      	add	r0, sp, #24
 800c256:	f7ff f9a9 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f aefc 	beq.w	800c058 <decode_mcu+0x30>
 800c260:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c264:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c268:	2401      	movs	r4, #1
 800c26a:	e77b      	b.n	800c164 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c26c:	f1bc 0f07 	cmp.w	ip, #7
 800c270:	dc0d      	bgt.n	800c28e <decode_mcu+0x266>
 800c272:	2300      	movs	r3, #0
 800c274:	4662      	mov	r2, ip
 800c276:	4671      	mov	r1, lr
 800c278:	a806      	add	r0, sp, #24
 800c27a:	f7ff f997 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c27e:	2800      	cmp	r0, #0
 800c280:	f43f aeea 	beq.w	800c058 <decode_mcu+0x30>
 800c284:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c288:	f1bc 0f07 	cmp.w	ip, #7
 800c28c:	dd25      	ble.n	800c2da <decode_mcu+0x2b2>
 800c28e:	f1ac 0308 	sub.w	r3, ip, #8
 800c292:	fa4e f303 	asr.w	r3, lr, r3
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c29c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c2a0:	b34a      	cbz	r2, 800c2f6 <decode_mcu+0x2ce>
 800c2a2:	4443      	add	r3, r8
 800c2a4:	ebac 0c02 	sub.w	ip, ip, r2
 800c2a8:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c2ac:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c2b0:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c2b4:	d021      	beq.n	800c2fa <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c2b6:	45dc      	cmp	ip, fp
	  k += r;
 800c2b8:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c2ba:	da0a      	bge.n	800c2d2 <decode_mcu+0x2aa>
 800c2bc:	465b      	mov	r3, fp
 800c2be:	4662      	mov	r2, ip
 800c2c0:	4671      	mov	r1, lr
 800c2c2:	a806      	add	r0, sp, #24
 800c2c4:	f7ff f972 	bl	800b5ac <jpeg_fill_bit_buffer>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f43f aec5 	beq.w	800c058 <decode_mcu+0x30>
 800c2ce:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c2d2:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c2d6:	3401      	adds	r4, #1
 800c2d8:	e744      	b.n	800c164 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c2da:	2301      	movs	r3, #1
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	4662      	mov	r2, ip
 800c2e0:	4643      	mov	r3, r8
 800c2e2:	4671      	mov	r1, lr
 800c2e4:	a806      	add	r0, sp, #24
 800c2e6:	f7ff f9bf 	bl	800b668 <jpeg_huff_decode>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f6ff aeb4 	blt.w	800c058 <decode_mcu+0x30>
 800c2f0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c2f4:	e7da      	b.n	800c2ac <decode_mcu+0x284>
 800c2f6:	2309      	movs	r3, #9
 800c2f8:	e7f0      	b.n	800c2dc <decode_mcu+0x2b4>
	  if (r != 15)
 800c2fa:	2b0f      	cmp	r3, #15
 800c2fc:	f47f af35 	bne.w	800c16a <decode_mcu+0x142>
	  k += 15;
 800c300:	340f      	adds	r4, #15
 800c302:	e7e8      	b.n	800c2d6 <decode_mcu+0x2ae>
 800c304:	0802e298 	.word	0x0802e298
 800c308:	0802c9c0 	.word	0x0802c9c0

0800c30c <jpeg_make_d_derived_tbl>:
{
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c310:	2a03      	cmp	r2, #3
{
 800c312:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c316:	4604      	mov	r4, r0
 800c318:	4616      	mov	r6, r2
 800c31a:	461f      	mov	r7, r3
 800c31c:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c31e:	d905      	bls.n	800c32c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c320:	6803      	ldr	r3, [r0, #0]
 800c322:	2234      	movs	r2, #52	; 0x34
 800c324:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d044      	beq.n	800c3bc <jpeg_make_d_derived_tbl+0xb0>
 800c332:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c336:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c33a:	b935      	cbnz	r5, 800c34a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	2234      	movs	r2, #52	; 0x34
 800c340:	4620      	mov	r0, r4
 800c342:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	b93b      	cbnz	r3, 800c35e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c34e:	6863      	ldr	r3, [r4, #4]
 800c350:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c354:	2101      	movs	r1, #1
 800c356:	4620      	mov	r0, r4
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c35c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c35e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800c362:	2601      	movs	r6, #1
  p = 0;
 800c364:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c366:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c36a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c36e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c372:	46ba      	mov	sl, r7
 800c374:	444f      	add	r7, r9
 800c376:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800c37a:	dd05      	ble.n	800c388 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	4620      	mov	r0, r4
 800c380:	f8c3 b014 	str.w	fp, [r3, #20]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4798      	blx	r3
 800c388:	f10a 0318 	add.w	r3, sl, #24
 800c38c:	446b      	add	r3, sp
    while (i--)
 800c38e:	f1b9 0901 	subs.w	r9, r9, #1
 800c392:	d218      	bcs.n	800c3c6 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800c394:	3601      	adds	r6, #1
 800c396:	2e11      	cmp	r6, #17
 800c398:	d1e9      	bne.n	800c36e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c39a:	2200      	movs	r2, #0
 800c39c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c39e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c3a2:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c3a6:	55da      	strb	r2, [r3, r7]
  p = 0;
 800c3a8:	4691      	mov	r9, r2
  si = huffsize[0];
 800c3aa:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800c3ae:	ab06      	add	r3, sp, #24
 800c3b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c3b4:	b313      	cbz	r3, 800c3fc <jpeg_make_d_derived_tbl+0xf0>
 800c3b6:	4649      	mov	r1, r9
 800c3b8:	1a52      	subs	r2, r2, r1
 800c3ba:	e00a      	b.n	800c3d2 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c3bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c3c0:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c3c4:	e7b9      	b.n	800c33a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c3c6:	f803 6b01 	strb.w	r6, [r3], #1
 800c3ca:	e7e0      	b.n	800c38e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800c3cc:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c3d0:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c3d2:	a806      	add	r0, sp, #24
 800c3d4:	1853      	adds	r3, r2, r1
 800c3d6:	4689      	mov	r9, r1
 800c3d8:	5c40      	ldrb	r0, [r0, r1]
 800c3da:	42b0      	cmp	r0, r6
 800c3dc:	d0f6      	beq.n	800c3cc <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c3de:	fa0b f206 	lsl.w	r2, fp, r6
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	dc07      	bgt.n	800c3f6 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c3e6:	6822      	ldr	r2, [r4, #0]
 800c3e8:	2109      	movs	r1, #9
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	6151      	str	r1, [r2, #20]
 800c3f0:	6812      	ldr	r2, [r2, #0]
 800c3f2:	4790      	blx	r2
 800c3f4:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800c3f6:	005a      	lsls	r2, r3, #1
    si++;
 800c3f8:	3601      	adds	r6, #1
 800c3fa:	e7d8      	b.n	800c3ae <jpeg_make_d_derived_tbl+0xa2>
 800c3fc:	1c68      	adds	r0, r5, #1
 800c3fe:	f108 0204 	add.w	r2, r8, #4
 800c402:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c406:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c40a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800c40c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800c410:	f1b9 0f00 	cmp.w	r9, #0
 800c414:	d029      	beq.n	800c46a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c416:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c41a:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800c41c:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c41e:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800c420:	1e59      	subs	r1, r3, #1
 800c422:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c426:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800c428:	3204      	adds	r2, #4
 800c42a:	4594      	cmp	ip, r2
 800c42c:	d1ee      	bne.n	800c40c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c42e:	4b2d      	ldr	r3, [pc, #180]	; (800c4e4 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c434:	2100      	movs	r1, #0
 800c436:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c43a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c43e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c440:	f01c ff04 	bl	802924c <memset>
  p = 0;
 800c444:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c448:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c44a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c44c:	2101      	movs	r1, #1
 800c44e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c450:	9201      	str	r2, [sp, #4]
 800c452:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c456:	fa01 fb02 	lsl.w	fp, r1, r2
 800c45a:	9202      	str	r2, [sp, #8]
 800c45c:	9a01      	ldr	r2, [sp, #4]
 800c45e:	4452      	add	r2, sl
 800c460:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c462:	f105 0211 	add.w	r2, r5, #17
 800c466:	9205      	str	r2, [sp, #20]
 800c468:	e020      	b.n	800c4ac <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c46a:	f8c2 e000 	str.w	lr, [r2]
 800c46e:	e7db      	b.n	800c428 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c470:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c472:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c474:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c478:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c47a:	9a05      	ldr	r2, [sp, #20]
 800c47c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800c480:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800c484:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c488:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800c48c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c490:	d1fa      	bne.n	800c488 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c492:	f1bb 0f00 	cmp.w	fp, #0
 800c496:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c49a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c49e:	bfcc      	ite	gt
 800c4a0:	465a      	movgt	r2, fp
 800c4a2:	2201      	movle	r2, #1
 800c4a4:	4440      	add	r0, r8
 800c4a6:	f01c fed1 	bl	802924c <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c4aa:	ab47      	add	r3, sp, #284	; 0x11c
 800c4ac:	9a04      	ldr	r2, [sp, #16]
 800c4ae:	4591      	cmp	r9, r2
 800c4b0:	d1de      	bne.n	800c470 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c4b2:	3601      	adds	r6, #1
 800c4b4:	9a01      	ldr	r2, [sp, #4]
 800c4b6:	2e09      	cmp	r6, #9
 800c4b8:	4492      	add	sl, r2
 800c4ba:	d1c6      	bne.n	800c44a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	b11b      	cbz	r3, 800c4c8 <jpeg_make_d_derived_tbl+0x1bc>
 800c4c0:	3511      	adds	r5, #17
 800c4c2:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800c4c4:	42af      	cmp	r7, r5
 800c4c6:	d103      	bne.n	800c4d0 <jpeg_make_d_derived_tbl+0x1c4>
}
 800c4c8:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800c4d0:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800c4d4:	2b0f      	cmp	r3, #15
 800c4d6:	d9f5      	bls.n	800c4c4 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	4620      	mov	r0, r4
 800c4dc:	615e      	str	r6, [r3, #20]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800c4e2:	e7ef      	b.n	800c4c4 <jpeg_make_d_derived_tbl+0x1b8>
 800c4e4:	000fffff 	.word	0x000fffff

0800c4e8 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800c4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800c4ec:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800c4f0:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c4f2:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800c4f6:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800c4fa:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	f000 80b1 	beq.w	800c666 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800c504:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800c508:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800c50c:	b962      	cbnz	r2, 800c528 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800c50e:	b1a9      	cbz	r1, 800c53c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c510:	f8da 3000 	ldr.w	r3, [sl]
 800c514:	2711      	movs	r7, #17
 800c516:	4650      	mov	r0, sl
 800c518:	625d      	str	r5, [r3, #36]	; 0x24
 800c51a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800c51e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4798      	blx	r3
 800c526:	e00f      	b.n	800c548 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800c528:	428a      	cmp	r2, r1
 800c52a:	dcf1      	bgt.n	800c510 <start_pass_huff_decoder+0x28>
 800c52c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800c530:	428b      	cmp	r3, r1
 800c532:	dbed      	blt.n	800c510 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800c534:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d1e9      	bne.n	800c510 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800c53c:	b116      	cbz	r6, 800c544 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800c53e:	1e73      	subs	r3, r6, #1
 800c540:	42ab      	cmp	r3, r5
 800c542:	d1e5      	bne.n	800c510 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800c544:	2d0d      	cmp	r5, #13
 800c546:	dce3      	bgt.n	800c510 <start_pass_huff_decoder+0x28>
{
 800c548:	46a1      	mov	r9, r4
 800c54a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c54c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c550:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c554:	42ba      	cmp	r2, r7
 800c556:	dc1e      	bgt.n	800c596 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800c558:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c55c:	2a00      	cmp	r2, #0
 800c55e:	d158      	bne.n	800c612 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800c560:	2b00      	cmp	r3, #0
 800c562:	d154      	bne.n	800c60e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800c564:	4bbb      	ldr	r3, [pc, #748]	; (800c854 <start_pass_huff_decoder+0x36c>)
{
 800c566:	2600      	movs	r6, #0
 800c568:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c56c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c570:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c572:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c576:	42b3      	cmp	r3, r6
 800c578:	dc50      	bgt.n	800c61c <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800c580:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800c582:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800c586:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c58a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800c58e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800c592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800c596:	f859 2b04 	ldr.w	r2, [r9], #4
 800c59a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800c59e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800c5a2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800c5a6:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c5aa:	b173      	cbz	r3, 800c5ca <start_pass_huff_decoder+0xe2>
 800c5ac:	5853      	ldr	r3, [r2, r1]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	da0b      	bge.n	800c5ca <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800c5b2:	f8da 3000 	ldr.w	r3, [sl]
 800c5b6:	2276      	movs	r2, #118	; 0x76
 800c5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5bc:	4650      	mov	r0, sl
 800c5be:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	61da      	str	r2, [r3, #28]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c5ca:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800c5ce:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c5d2:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800c5d6:	42ab      	cmp	r3, r5
 800c5d8:	da01      	bge.n	800c5de <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c5da:	3701      	adds	r7, #1
 800c5dc:	e7b6      	b.n	800c54c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c5de:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800c5e0:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c5e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d00a      	beq.n	800c602 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800c5ec:	f8da 3000 	ldr.w	r3, [sl]
 800c5f0:	2276      	movs	r2, #118	; 0x76
 800c5f2:	f04f 31ff 	mov.w	r1, #4294967295
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	61dd      	str	r5, [r3, #28]
 800c5fa:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800c602:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c606:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800c608:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c60c:	e7e1      	b.n	800c5d2 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c60e:	4b92      	ldr	r3, [pc, #584]	; (800c858 <start_pass_huff_decoder+0x370>)
 800c610:	e7a9      	b.n	800c566 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800c612:	b90b      	cbnz	r3, 800c618 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c614:	4b91      	ldr	r3, [pc, #580]	; (800c85c <start_pass_huff_decoder+0x374>)
 800c616:	e7a6      	b.n	800c566 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800c618:	4b91      	ldr	r3, [pc, #580]	; (800c860 <start_pass_huff_decoder+0x378>)
 800c61a:	e7a4      	b.n	800c566 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800c61c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800c620:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800c624:	b97a      	cbnz	r2, 800c646 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800c626:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c62a:	b942      	cbnz	r2, 800c63e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800c62c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c62e:	2101      	movs	r1, #1
 800c630:	4650      	mov	r0, sl
 800c632:	f102 030b 	add.w	r3, r2, #11
 800c636:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c63a:	f7ff fe67 	bl	800c30c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c63e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c640:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c644:	e795      	b.n	800c572 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800c646:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c648:	2100      	movs	r1, #0
 800c64a:	4650      	mov	r0, sl
 800c64c:	f105 030b 	add.w	r3, r5, #11
 800c650:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c652:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c656:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c65a:	f7ff fe57 	bl	800c30c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c65e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c660:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c664:	e7eb      	b.n	800c63e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c666:	b982      	cbnz	r2, 800c68a <start_pass_huff_decoder+0x1a2>
 800c668:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800c66c:	b96b      	cbnz	r3, 800c68a <start_pass_huff_decoder+0x1a2>
 800c66e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c672:	b953      	cbnz	r3, 800c68a <start_pass_huff_decoder+0x1a2>
 800c674:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800c678:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c67c:	b90a      	cbnz	r2, 800c682 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800c67e:	2b3f      	cmp	r3, #63	; 0x3f
 800c680:	dc0c      	bgt.n	800c69c <start_pass_huff_decoder+0x1b4>
 800c682:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800c686:	429a      	cmp	r2, r3
 800c688:	d008      	beq.n	800c69c <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800c68a:	f8da 3000 	ldr.w	r3, [sl]
 800c68e:	227d      	movs	r2, #125	; 0x7d
 800c690:	f04f 31ff 	mov.w	r1, #4294967295
 800c694:	4650      	mov	r0, sl
 800c696:	615a      	str	r2, [r3, #20]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800c69c:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800c6a0:	2600      	movs	r6, #0
 800c6a2:	4b70      	ldr	r3, [pc, #448]	; (800c864 <start_pass_huff_decoder+0x37c>)
 800c6a4:	f10b 0714 	add.w	r7, fp, #20
 800c6a8:	4a6f      	ldr	r2, [pc, #444]	; (800c868 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c6aa:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800c6ac:	293f      	cmp	r1, #63	; 0x3f
 800c6ae:	bf08      	it	eq
 800c6b0:	4613      	moveq	r3, r2
 800c6b2:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6b6:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c6ba:	42b3      	cmp	r3, r6
 800c6bc:	dc3c      	bgt.n	800c738 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c6be:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800c6c2:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800c6c6:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800c6ca:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c6ce:	4f67      	ldr	r7, [pc, #412]	; (800c86c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800c6d0:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c6d4:	42a8      	cmp	r0, r5
 800c6d6:	f77f af53 	ble.w	800c580 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800c6da:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800c6de:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800c6e2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800c6e6:	6953      	ldr	r3, [r2, #20]
 800c6e8:	3310      	adds	r3, #16
 800c6ea:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c6ee:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800c6f2:	6993      	ldr	r3, [r2, #24]
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c6fa:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800c6fc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d052      	beq.n	800c7a8 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800c702:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800c706:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800c708:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800c70c:	d075      	beq.n	800c7fa <start_pass_huff_decoder+0x312>
 800c70e:	dc30      	bgt.n	800c772 <start_pass_huff_decoder+0x28a>
 800c710:	2c03      	cmp	r4, #3
 800c712:	d04f      	beq.n	800c7b4 <start_pass_huff_decoder+0x2cc>
 800c714:	2c08      	cmp	r4, #8
 800c716:	d05d      	beq.n	800c7d4 <start_pass_huff_decoder+0x2ec>
 800c718:	2c00      	cmp	r4, #0
 800c71a:	d047      	beq.n	800c7ac <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800c71c:	1e5c      	subs	r4, r3, #1
 800c71e:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800c720:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800c724:	bf28      	it	cs
 800c726:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800c728:	2c08      	cmp	r4, #8
 800c72a:	bf28      	it	cs
 800c72c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c72e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c732:	4b4f      	ldr	r3, [pc, #316]	; (800c870 <start_pass_huff_decoder+0x388>)
 800c734:	3a09      	subs	r2, #9
 800c736:	e04a      	b.n	800c7ce <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800c738:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c73c:	2101      	movs	r1, #1
 800c73e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800c740:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c744:	f102 0310 	add.w	r3, r2, #16
 800c748:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c74c:	f7ff fdde 	bl	800c30c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800c750:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800c754:	b14b      	cbz	r3, 800c76a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800c756:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c75a:	2100      	movs	r1, #0
 800c75c:	4650      	mov	r0, sl
 800c75e:	f102 0314 	add.w	r3, r2, #20
 800c762:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c766:	f7ff fdd1 	bl	800c30c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c76a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c76c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c770:	e7a1      	b.n	800c6b6 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800c772:	2c23      	cmp	r4, #35	; 0x23
 800c774:	f103 3eff 	add.w	lr, r3, #4294967295
 800c778:	f102 39ff 	add.w	r9, r2, #4294967295
 800c77c:	d04b      	beq.n	800c816 <start_pass_huff_decoder+0x32e>
 800c77e:	2c30      	cmp	r4, #48	; 0x30
 800c780:	d057      	beq.n	800c832 <start_pass_huff_decoder+0x34a>
 800c782:	2c18      	cmp	r4, #24
 800c784:	d1ca      	bne.n	800c71c <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800c786:	f1be 0f05 	cmp.w	lr, #5
 800c78a:	bf28      	it	cs
 800c78c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800c78e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c792:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800c796:	bf28      	it	cs
 800c798:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c79a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c79e:	3a01      	subs	r2, #1
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c7a6:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800c7a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c7aa:	e001      	b.n	800c7b0 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800c7ac:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c7b0:	3501      	adds	r5, #1
 800c7b2:	e78f      	b.n	800c6d4 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800c7b4:	1e5c      	subs	r4, r3, #1
 800c7b6:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800c7b8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800c7bc:	bf28      	it	cs
 800c7be:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800c7c0:	2c02      	cmp	r4, #2
 800c7c2:	bf28      	it	cs
 800c7c4:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800c7c6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c7ca:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <start_pass_huff_decoder+0x38c>)
 800c7cc:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d2:	e7e8      	b.n	800c7a6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800c7d4:	1e5c      	subs	r4, r3, #1
 800c7d6:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800c7d8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800c7dc:	bf28      	it	cs
 800c7de:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800c7e0:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c7e2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800c7e6:	bf28      	it	cs
 800c7e8:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c7ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c7ee:	3a01      	subs	r2, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	4a21      	ldr	r2, [pc, #132]	; (800c878 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f8:	e7d5      	b.n	800c7a6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800c7fa:	1e5c      	subs	r4, r3, #1
 800c7fc:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800c7fe:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800c802:	bf28      	it	cs
 800c804:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800c806:	2c04      	cmp	r4, #4
 800c808:	bf28      	it	cs
 800c80a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800c80c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c810:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <start_pass_huff_decoder+0x394>)
 800c812:	3a05      	subs	r2, #5
 800c814:	e7db      	b.n	800c7ce <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800c816:	f1be 0f06 	cmp.w	lr, #6
 800c81a:	bf28      	it	cs
 800c81c:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800c81e:	f1b9 0f06 	cmp.w	r9, #6
 800c822:	bf28      	it	cs
 800c824:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800c826:	3b01      	subs	r3, #1
 800c828:	3a01      	subs	r2, #1
 800c82a:	fb0c 2303 	mla	r3, ip, r3, r2
 800c82e:	4a14      	ldr	r2, [pc, #80]	; (800c880 <start_pass_huff_decoder+0x398>)
 800c830:	e7e0      	b.n	800c7f4 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800c832:	f1be 0f07 	cmp.w	lr, #7
 800c836:	bf28      	it	cs
 800c838:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800c83a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c83e:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800c842:	bf28      	it	cs
 800c844:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c846:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c84a:	3a01      	subs	r2, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	4a0d      	ldr	r2, [pc, #52]	; (800c884 <start_pass_huff_decoder+0x39c>)
 800c850:	e7d0      	b.n	800c7f4 <start_pass_huff_decoder+0x30c>
 800c852:	bf00      	nop
 800c854:	0800b749 	.word	0x0800b749
 800c858:	0800b8bd 	.word	0x0800b8bd
 800c85c:	0800ba1d 	.word	0x0800ba1d
 800c860:	0800bab1 	.word	0x0800bab1
 800c864:	0800bd39 	.word	0x0800bd39
 800c868:	0800c029 	.word	0x0800c029
 800c86c:	0802cb74 	.word	0x0802cb74
 800c870:	0802ca00 	.word	0x0802ca00
 800c874:	0802cb00 	.word	0x0802cb00
 800c878:	0802cb10 	.word	0x0802cb10
 800c87c:	0802cb34 	.word	0x0802cb34
 800c880:	0802cbd8 	.word	0x0802cbd8
 800c884:	0802cc68 	.word	0x0802cc68

0800c888 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c88a:	6843      	ldr	r3, [r0, #4]
 800c88c:	22d8      	movs	r2, #216	; 0xd8
 800c88e:	2101      	movs	r1, #1
{
 800c890:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c896:	4b17      	ldr	r3, [pc, #92]	; (800c8f4 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800c898:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c89c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c89e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800c8a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800c8a4:	b943      	cbnz	r3, 800c8b8 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800c8a6:	6503      	str	r3, [r0, #80]	; 0x50
 800c8a8:	6403      	str	r3, [r0, #64]	; 0x40
 800c8aa:	6543      	str	r3, [r0, #84]	; 0x54
 800c8ac:	6443      	str	r3, [r0, #68]	; 0x44
 800c8ae:	6583      	str	r3, [r0, #88]	; 0x58
 800c8b0:	6483      	str	r3, [r0, #72]	; 0x48
 800c8b2:	65c3      	str	r3, [r0, #92]	; 0x5c
 800c8b4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800c8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c8b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	686b      	ldr	r3, [r5, #4]
 800c8be:	4628      	mov	r0, r5
 800c8c0:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c8c2:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4798      	blx	r3
 800c8c8:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800c8ca:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c8ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8d0:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800c8d4:	42b3      	cmp	r3, r6
 800c8d6:	dc05      	bgt.n	800c8e4 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800c8de:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800c8e2:	e7e8      	b.n	800c8b6 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800c8e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8e8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c8ea:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800c8ec:	f01c fcae 	bl	802924c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c8f0:	e7ed      	b.n	800c8ce <jinit_huff_decoder+0x46>
 800c8f2:	bf00      	nop
 800c8f4:	0800c4e9 	.word	0x0800c4e9

0800c8f8 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800c8f8:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800c8fc:	4a01      	ldr	r2, [pc, #4]	; (800c904 <finish_input_pass+0xc>)
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	0800cac1 	.word	0x0800cac1

0800c908 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800c908:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800c90a:	4a0a      	ldr	r2, [pc, #40]	; (800c934 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800c90c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800c90e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800c912:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800c914:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800c916:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800c918:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800c91c:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800c91e:	6803      	ldr	r3, [r0, #0]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800c924:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c928:	4620      	mov	r0, r4
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800c92e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	0800cac1 	.word	0x0800cac1

0800c938 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800c938:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800c93c:	2a01      	cmp	r2, #1
{
 800c93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800c948:	d135      	bne.n	800c9b6 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800c94a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c94e:	69d9      	ldr	r1, [r3, #28]
 800c950:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c954:	6a19      	ldr	r1, [r3, #32]
 800c956:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800c95a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800c95c:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800c95e:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c962:	68d8      	ldr	r0, [r3, #12]
 800c964:	fbb1 f5f0 	udiv	r5, r1, r0
 800c968:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800c96c:	2900      	cmp	r1, #0
 800c96e:	bf08      	it	eq
 800c970:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800c972:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800c976:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800c978:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800c97a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800c97e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800c982:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c984:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800c986:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c98a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c98e:	429f      	cmp	r7, r3
 800c990:	db71      	blt.n	800ca76 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800c992:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800c996:	4620      	mov	r0, r4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800c99c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800c9a6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800c9aa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c9ae:	6852      	ldr	r2, [r2, #4]
 800c9b0:	601a      	str	r2, [r3, #0]
}
 800c9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800c9b6:	1e53      	subs	r3, r2, #1
 800c9b8:	2b03      	cmp	r3, #3
 800c9ba:	d907      	bls.n	800c9cc <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800c9bc:	6803      	ldr	r3, [r0, #0]
 800c9be:	211b      	movs	r1, #27
 800c9c0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c9c4:	2204      	movs	r2, #4
 800c9c6:	61da      	str	r2, [r3, #28]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c9cc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800c9d0:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c9d2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c9d6:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800c9d8:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c9da:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800c9de:	4359      	muls	r1, r3
 800c9e0:	f009 fdd4 	bl	801658c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c9e4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800c9e8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800c9ec:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800c9f0:	4359      	muls	r1, r3
 800c9f2:	6a20      	ldr	r0, [r4, #32]
 800c9f4:	f009 fdca 	bl	801658c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800c9f8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800c9fc:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca00:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ca04:	429d      	cmp	r5, r3
 800ca06:	dabc      	bge.n	800c982 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800ca08:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800ca0c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800ca0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800ca10:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800ca12:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800ca14:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800ca18:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800ca1a:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800ca1c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800ca1e:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800ca20:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800ca22:	fbb2 fcf1 	udiv	ip, r2, r1
 800ca26:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800ca2a:	2a00      	cmp	r2, #0
 800ca2c:	bf08      	it	eq
 800ca2e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800ca30:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800ca32:	6a1a      	ldr	r2, [r3, #32]
 800ca34:	fbb2 f1f0 	udiv	r1, r2, r0
 800ca38:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	bf08      	it	eq
 800ca40:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800ca42:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800ca44:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ca48:	443b      	add	r3, r7
 800ca4a:	2b0a      	cmp	r3, #10
 800ca4c:	dd05      	ble.n	800ca5a <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4620      	mov	r0, r4
 800ca52:	f8c3 9014 	str.w	r9, [r3, #20]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4798      	blx	r3
      while (mcublks-- > 0) {
 800ca5a:	2f00      	cmp	r7, #0
 800ca5c:	dc01      	bgt.n	800ca62 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca5e:	3501      	adds	r5, #1
 800ca60:	e7ce      	b.n	800ca00 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800ca62:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ca66:	3f01      	subs	r7, #1
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	335c      	adds	r3, #92	; 0x5c
 800ca6c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800ca70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ca74:	e7f1      	b.n	800ca5a <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800ca76:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800ca7a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca7c:	b9eb      	cbnz	r3, 800caba <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800ca7e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ca80:	2a03      	cmp	r2, #3
 800ca82:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800ca86:	d803      	bhi.n	800ca90 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800ca88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	b92b      	cbnz	r3, 800ca9c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	4620      	mov	r0, r4
 800ca94:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca9c:	6863      	ldr	r3, [r4, #4]
 800ca9e:	2284      	movs	r2, #132	; 0x84
 800caa0:	2101      	movs	r1, #1
 800caa2:	4620      	mov	r0, r4
 800caa4:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800caa6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800caaa:	4798      	blx	r3
 800caac:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800caae:	2284      	movs	r2, #132	; 0x84
 800cab0:	6869      	ldr	r1, [r5, #4]
 800cab2:	f01c fbbd 	bl	8029230 <memcpy>
    compptr->quant_table = qtbl;
 800cab6:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800caba:	3701      	adds	r7, #1
 800cabc:	e765      	b.n	800c98a <start_input_pass+0x52>
	...

0800cac0 <consume_markers>:
{
 800cac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cac4:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800cac8:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800caca:	6973      	ldr	r3, [r6, #20]
 800cacc:	b9eb      	cbnz	r3, 800cb0a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800cace:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800cad2:	4db0      	ldr	r5, [pc, #704]	; (800cd94 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800cad4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cad8:	4620      	mov	r0, r4
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4798      	blx	r3
    switch (val) {
 800cade:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800cae0:	4607      	mov	r7, r0
    switch (val) {
 800cae2:	d016      	beq.n	800cb12 <consume_markers+0x52>
 800cae4:	2802      	cmp	r0, #2
 800cae6:	d111      	bne.n	800cb0c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800cae8:	2301      	movs	r3, #1
 800caea:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800caec:	69b3      	ldr	r3, [r6, #24]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 8174 	beq.w	800cddc <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800caf4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	b133      	cbz	r3, 800cb0a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	223d      	movs	r2, #61	; 0x3d
 800cb00:	4620      	mov	r0, r4
 800cb02:	615a      	str	r2, [r3, #20]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4798      	blx	r3
 800cb08:	e000      	b.n	800cb0c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800cb0a:	2702      	movs	r7, #2
}
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800cb12:	69b3      	ldr	r3, [r6, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 8150 	beq.w	800cdba <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 80d8 	bne.w	800ccd0 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800cb20:	6a22      	ldr	r2, [r4, #32]
 800cb22:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800cb26:	429a      	cmp	r2, r3
 800cb28:	dc02      	bgt.n	800cb30 <consume_markers+0x70>
 800cb2a:	69e2      	ldr	r2, [r4, #28]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	dd08      	ble.n	800cb42 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	212a      	movs	r1, #42	; 0x2a
 800cb34:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800cb38:	4620      	mov	r0, r4
 800cb3a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800cb42:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800cb46:	2a08      	cmp	r2, #8
 800cb48:	d006      	beq.n	800cb58 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	2110      	movs	r1, #16
 800cb4e:	4620      	mov	r0, r4
 800cb50:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800cb58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cb5a:	2a0a      	cmp	r2, #10
 800cb5c:	dd08      	ble.n	800cb70 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	211b      	movs	r1, #27
 800cb62:	4620      	mov	r0, r4
 800cb64:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cb68:	220a      	movs	r2, #10
 800cb6a:	61da      	str	r2, [r3, #28]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb70:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800cb74:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cb78:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800cb7c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb82:	459a      	cmp	sl, r3
 800cb84:	db0d      	blt.n	800cba2 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800cb86:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800cb8a:	b92b      	cbnz	r3, 800cb98 <consume_markers+0xd8>
 800cb8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb90:	b383      	cbz	r3, 800cbf4 <consume_markers+0x134>
 800cb92:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cb96:	b36b      	cbz	r3, 800cbf4 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800cb98:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800cb9a:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800cb9e:	233f      	movs	r3, #63	; 0x3f
 800cba0:	e071      	b.n	800cc86 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800cba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d804      	bhi.n	800cbb6 <consume_markers+0xf6>
 800cbac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d905      	bls.n	800cbc2 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f8c3 b014 	str.w	fp, [r3, #20]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cbc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800cbc6:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cbca:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800cbce:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	bfac      	ite	ge
 800cbd6:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800cbda:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800cbde:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800cbe2:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	bfac      	ite	ge
 800cbea:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800cbee:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800cbf2:	e7c5      	b.n	800cb80 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800cbf4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800cbf8:	2b50      	cmp	r3, #80	; 0x50
 800cbfa:	f000 808a 	beq.w	800cd12 <consume_markers+0x252>
 800cbfe:	dc2b      	bgt.n	800cc58 <consume_markers+0x198>
 800cc00:	2b18      	cmp	r3, #24
 800cc02:	d078      	beq.n	800ccf6 <consume_markers+0x236>
 800cc04:	dc1d      	bgt.n	800cc42 <consume_markers+0x182>
 800cc06:	2b08      	cmp	r3, #8
 800cc08:	d070      	beq.n	800ccec <consume_markers+0x22c>
 800cc0a:	dc13      	bgt.n	800cc34 <consume_markers+0x174>
 800cc0c:	b3bb      	cbz	r3, 800cc7e <consume_markers+0x1be>
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d065      	beq.n	800ccde <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	2111      	movs	r1, #17
 800cc16:	4620      	mov	r0, r4
 800cc18:	6151      	str	r1, [r2, #20]
 800cc1a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800cc1e:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800cc22:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800cc26:	6213      	str	r3, [r2, #32]
 800cc28:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800cc2c:	6253      	str	r3, [r2, #36]	; 0x24
 800cc2e:	6813      	ldr	r3, [r2, #0]
 800cc30:	4798      	blx	r3
      break;
 800cc32:	e02a      	b.n	800cc8a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800cc34:	2b0f      	cmp	r3, #15
 800cc36:	d1ec      	bne.n	800cc12 <consume_markers+0x152>
      cinfo->block_size = 4;
 800cc38:	2204      	movs	r2, #4
 800cc3a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800cc3e:	4a56      	ldr	r2, [pc, #344]	; (800cd98 <consume_markers+0x2d8>)
 800cc40:	e051      	b.n	800cce6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cc42:	2b30      	cmp	r3, #48	; 0x30
 800cc44:	d05c      	beq.n	800cd00 <consume_markers+0x240>
 800cc46:	2b3f      	cmp	r3, #63	; 0x3f
 800cc48:	d05f      	beq.n	800cd0a <consume_markers+0x24a>
 800cc4a:	2b23      	cmp	r3, #35	; 0x23
 800cc4c:	d1e1      	bne.n	800cc12 <consume_markers+0x152>
      cinfo->block_size = 6;
 800cc4e:	2206      	movs	r2, #6
 800cc50:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800cc54:	4a51      	ldr	r2, [pc, #324]	; (800cd9c <consume_markers+0x2dc>)
 800cc56:	e046      	b.n	800cce6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cc58:	2ba8      	cmp	r3, #168	; 0xa8
 800cc5a:	d060      	beq.n	800cd1e <consume_markers+0x25e>
 800cc5c:	dc07      	bgt.n	800cc6e <consume_markers+0x1ae>
 800cc5e:	2b78      	cmp	r3, #120	; 0x78
 800cc60:	d059      	beq.n	800cd16 <consume_markers+0x256>
 800cc62:	2b8f      	cmp	r3, #143	; 0x8f
 800cc64:	d059      	beq.n	800cd1a <consume_markers+0x25a>
 800cc66:	2b63      	cmp	r3, #99	; 0x63
 800cc68:	d1d3      	bne.n	800cc12 <consume_markers+0x152>
      cinfo->block_size = 10;
 800cc6a:	230a      	movs	r3, #10
 800cc6c:	e795      	b.n	800cb9a <consume_markers+0xda>
    switch (cinfo->Se) {
 800cc6e:	2be0      	cmp	r3, #224	; 0xe0
 800cc70:	d057      	beq.n	800cd22 <consume_markers+0x262>
 800cc72:	2bff      	cmp	r3, #255	; 0xff
 800cc74:	d057      	beq.n	800cd26 <consume_markers+0x266>
 800cc76:	2bc3      	cmp	r3, #195	; 0xc3
 800cc78:	d1cb      	bne.n	800cc12 <consume_markers+0x152>
      cinfo->block_size = 14;
 800cc7a:	230e      	movs	r3, #14
 800cc7c:	e78d      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 1;
 800cc7e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800cc82:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800cc86:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc8a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800cc8e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc92:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800cc96:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800cc98:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800cc9e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cca2:	459a      	cmp	sl, r3
 800cca4:	db41      	blt.n	800cd2a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cca6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800ccaa:	6a20      	ldr	r0, [r4, #32]
 800ccac:	4359      	muls	r1, r3
 800ccae:	f009 fc6d 	bl	801658c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ccb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccb4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800ccb8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ccc2:	db03      	blt.n	800cccc <consume_markers+0x20c>
 800ccc4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	d071      	beq.n	800cdb0 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800cccc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800ccd0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d16d      	bne.n	800cdb4 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800ccd8:	2302      	movs	r3, #2
 800ccda:	61b3      	str	r3, [r6, #24]
	  break;
 800ccdc:	e6fa      	b.n	800cad4 <consume_markers+0x14>
      cinfo->block_size = 2;
 800ccde:	2202      	movs	r2, #2
 800cce0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800cce4:	4a2e      	ldr	r2, [pc, #184]	; (800cda0 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800cce6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ccea:	e7cc      	b.n	800cc86 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800ccec:	2203      	movs	r2, #3
 800ccee:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800ccf2:	4a2c      	ldr	r2, [pc, #176]	; (800cda4 <consume_markers+0x2e4>)
 800ccf4:	e7f7      	b.n	800cce6 <consume_markers+0x226>
      cinfo->block_size = 5;
 800ccf6:	2205      	movs	r2, #5
 800ccf8:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800ccfc:	4a2a      	ldr	r2, [pc, #168]	; (800cda8 <consume_markers+0x2e8>)
 800ccfe:	e7f2      	b.n	800cce6 <consume_markers+0x226>
      cinfo->block_size = 7;
 800cd00:	2207      	movs	r2, #7
 800cd02:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800cd06:	4a29      	ldr	r2, [pc, #164]	; (800cdac <consume_markers+0x2ec>)
 800cd08:	e7ed      	b.n	800cce6 <consume_markers+0x226>
      cinfo->block_size = 8;
 800cd0a:	2208      	movs	r2, #8
 800cd0c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800cd10:	e7b7      	b.n	800cc82 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800cd12:	2309      	movs	r3, #9
 800cd14:	e741      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 11;
 800cd16:	230b      	movs	r3, #11
 800cd18:	e73f      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 12;
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	e73d      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 13;
 800cd1e:	230d      	movs	r3, #13
 800cd20:	e73b      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 15;
 800cd22:	230f      	movs	r3, #15
 800cd24:	e739      	b.n	800cb9a <consume_markers+0xda>
      cinfo->block_size = 16;
 800cd26:	2310      	movs	r3, #16
 800cd28:	e737      	b.n	800cb9a <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800cd2a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800cd2e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800cd32:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cd36:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800cd3a:	69e3      	ldr	r3, [r4, #28]
 800cd3c:	4351      	muls	r1, r2
 800cd3e:	4358      	muls	r0, r3
 800cd40:	f009 fc24 	bl	801658c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800cd44:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cd48:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cd4c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cd50:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cd52:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cd56:	4358      	muls	r0, r3
 800cd58:	4351      	muls	r1, r2
 800cd5a:	f009 fc17 	bl	801658c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800cd5e:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800cd62:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800cd66:	69e3      	ldr	r3, [r4, #28]
 800cd68:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800cd6c:	4358      	muls	r0, r3
 800cd6e:	f009 fc0d 	bl	801658c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800cd72:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cd76:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800cd7a:	6a23      	ldr	r3, [r4, #32]
 800cd7c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800cd80:	4358      	muls	r0, r3
 800cd82:	f009 fc03 	bl	801658c <jdiv_round_up>
    compptr->quant_table = NULL;
 800cd86:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800cd8a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800cd8e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800cd92:	e783      	b.n	800cc9c <consume_markers+0x1dc>
 800cd94:	0802e298 	.word	0x0802e298
 800cd98:	0802e48c 	.word	0x0802e48c
 800cd9c:	0802e5b0 	.word	0x0802e5b0
 800cda0:	0802e3d8 	.word	0x0802e3d8
 800cda4:	0802e428 	.word	0x0802e428
 800cda8:	0802e50c 	.word	0x0802e50c
 800cdac:	0802e680 	.word	0x0802e680
    cinfo->inputctl->has_multiple_scans = FALSE;
 800cdb0:	611a      	str	r2, [r3, #16]
 800cdb2:	e78d      	b.n	800ccd0 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	61b3      	str	r3, [r6, #24]
 800cdb8:	e6a8      	b.n	800cb0c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800cdba:	6933      	ldr	r3, [r6, #16]
 800cdbc:	b92b      	cbnz	r3, 800cdca <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	2224      	movs	r2, #36	; 0x24
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	615a      	str	r2, [r3, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800cdca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f43f ae80 	beq.w	800cad4 <consume_markers+0x14>
	start_input_pass(cinfo);
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f7ff fdaf 	bl	800c938 <start_input_pass>
 800cdda:	e697      	b.n	800cb0c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800cddc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cde0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cde4:	429a      	cmp	r2, r3
 800cde6:	f77f ae90 	ble.w	800cb0a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800cdea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800cdee:	e68d      	b.n	800cb0c <consume_markers+0x4c>

0800cdf0 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800cdf0:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800cdf4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cdf6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cdf8:	434a      	muls	r2, r1
 800cdfa:	429a      	cmp	r2, r3
{
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800ce00:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800ce02:	d80c      	bhi.n	800ce1e <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800ce04:	f009 fbc2 	bl	801658c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800ce08:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800ce0c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800ce0e:	6a20      	ldr	r0, [r4, #32]
 800ce10:	f009 fbbc 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800ce14:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800ce16:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800ce18:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800ce1c:	e059      	b.n	800ced2 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800ce1e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800ce22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800ce26:	d80c      	bhi.n	800ce42 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800ce28:	0040      	lsls	r0, r0, #1
 800ce2a:	f009 fbaf 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ce2e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800ce30:	6a20      	ldr	r0, [r4, #32]
 800ce32:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ce36:	0040      	lsls	r0, r0, #1
 800ce38:	f009 fba8 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800ce3c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800ce3e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800ce40:	e7ea      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800ce42:	441d      	add	r5, r3
 800ce44:	42aa      	cmp	r2, r5
 800ce46:	d80e      	bhi.n	800ce66 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800ce48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ce4c:	f009 fb9e 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ce50:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800ce52:	6a20      	ldr	r0, [r4, #32]
 800ce54:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ce58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ce5c:	f009 fb96 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800ce60:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800ce62:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800ce64:	e7d8      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800ce66:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800ce6a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800ce6e:	d80c      	bhi.n	800ce8a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800ce70:	0080      	lsls	r0, r0, #2
 800ce72:	f009 fb8b 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ce76:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800ce78:	6a20      	ldr	r0, [r4, #32]
 800ce7a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ce7e:	0080      	lsls	r0, r0, #2
 800ce80:	f009 fb84 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800ce84:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800ce86:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800ce88:	e7c6      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800ce8a:	441d      	add	r5, r3
 800ce8c:	42aa      	cmp	r2, r5
 800ce8e:	d80e      	bhi.n	800ceae <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800ce90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ce94:	f009 fb7a 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ce98:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800ce9a:	6a20      	ldr	r0, [r4, #32]
 800ce9c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cea0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cea4:	f009 fb72 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800cea8:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800ceaa:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800ceac:	e7b4      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800ceae:	2506      	movs	r5, #6
 800ceb0:	fb05 f603 	mul.w	r6, r5, r3
 800ceb4:	42b2      	cmp	r2, r6
 800ceb6:	d813      	bhi.n	800cee0 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800ceb8:	4368      	muls	r0, r5
 800ceba:	f009 fb67 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cebe:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800cec0:	6a20      	ldr	r0, [r4, #32]
 800cec2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cec6:	4368      	muls	r0, r5
 800cec8:	f009 fb60 	bl	801658c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800cecc:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800cece:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ced2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800ced6:	2200      	movs	r2, #0
 800ced8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ceda:	4291      	cmp	r1, r2
 800cedc:	dc6f      	bgt.n	800cfbe <jpeg_core_output_dimensions+0x1ce>
}
 800cede:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800cee0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800cee4:	00dd      	lsls	r5, r3, #3
 800cee6:	42b2      	cmp	r2, r6
 800cee8:	d80e      	bhi.n	800cf08 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800ceea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ceee:	f009 fb4d 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cef2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800cef4:	6a20      	ldr	r0, [r4, #32]
 800cef6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cefa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800cefe:	f009 fb45 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800cf02:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800cf04:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800cf06:	e787      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800cf08:	42aa      	cmp	r2, r5
 800cf0a:	d80c      	bhi.n	800cf26 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800cf0c:	00c0      	lsls	r0, r0, #3
 800cf0e:	f009 fb3d 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cf12:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800cf14:	6a20      	ldr	r0, [r4, #32]
 800cf16:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cf1a:	00c0      	lsls	r0, r0, #3
 800cf1c:	f009 fb36 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800cf20:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800cf22:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800cf24:	e778      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800cf26:	441d      	add	r5, r3
 800cf28:	42aa      	cmp	r2, r5
 800cf2a:	d80e      	bhi.n	800cf4a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800cf2c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800cf30:	f009 fb2c 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cf34:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800cf36:	6a20      	ldr	r0, [r4, #32]
 800cf38:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cf3c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800cf40:	f009 fb24 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800cf44:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800cf46:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800cf48:	e766      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800cf4a:	250a      	movs	r5, #10
 800cf4c:	fb05 f603 	mul.w	r6, r5, r3
 800cf50:	42b2      	cmp	r2, r6
 800cf52:	d9b1      	bls.n	800ceb8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800cf54:	250b      	movs	r5, #11
 800cf56:	fb05 f603 	mul.w	r6, r5, r3
 800cf5a:	42b2      	cmp	r2, r6
 800cf5c:	d9ac      	bls.n	800ceb8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800cf5e:	250c      	movs	r5, #12
 800cf60:	fb05 f603 	mul.w	r6, r5, r3
 800cf64:	42b2      	cmp	r2, r6
 800cf66:	d9a7      	bls.n	800ceb8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800cf68:	250d      	movs	r5, #13
 800cf6a:	fb05 f603 	mul.w	r6, r5, r3
 800cf6e:	42b2      	cmp	r2, r6
 800cf70:	d9a2      	bls.n	800ceb8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800cf72:	250e      	movs	r5, #14
 800cf74:	fb05 f603 	mul.w	r6, r5, r3
 800cf78:	42b2      	cmp	r2, r6
 800cf7a:	d99d      	bls.n	800ceb8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800cf7c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800cf80:	429a      	cmp	r2, r3
 800cf82:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800cf86:	d80d      	bhi.n	800cfa4 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800cf88:	1a18      	subs	r0, r3, r0
 800cf8a:	f009 faff 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cf8e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800cf90:	6a20      	ldr	r0, [r4, #32]
 800cf92:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cf96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800cf9a:	f009 faf7 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800cf9e:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800cfa0:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800cfa2:	e739      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f009 faf1 	bl	801658c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cfaa:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800cfac:	6a20      	ldr	r0, [r4, #32]
 800cfae:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cfb2:	0100      	lsls	r0, r0, #4
 800cfb4:	f009 faea 	bl	801658c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800cfb8:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800cfba:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800cfbc:	e72c      	b.n	800ce18 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800cfbe:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800cfc2:	3201      	adds	r2, #1
 800cfc4:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800cfc6:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800cfca:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800cfce:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800cfd2:	e782      	b.n	800ceda <jpeg_core_output_dimensions+0xea>

0800cfd4 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cfd4:	6843      	ldr	r3, [r0, #4]
 800cfd6:	221c      	movs	r2, #28
 800cfd8:	2100      	movs	r1, #0
 800cfda:	681b      	ldr	r3, [r3, #0]
{
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cfe0:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800cfe2:	4b08      	ldr	r3, [pc, #32]	; (800d004 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800cfe4:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800cfe8:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800cfea:	4b07      	ldr	r3, [pc, #28]	; (800d008 <jinit_input_controller+0x34>)
 800cfec:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800cfee:	4b07      	ldr	r3, [pc, #28]	; (800d00c <jinit_input_controller+0x38>)
 800cff0:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800cff2:	4b07      	ldr	r3, [pc, #28]	; (800d010 <jinit_input_controller+0x3c>)
 800cff4:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cff6:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800cff8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800cffc:	2301      	movs	r3, #1
 800cffe:	6183      	str	r3, [r0, #24]
}
 800d000:	bd10      	pop	{r4, pc}
 800d002:	bf00      	nop
 800d004:	0800cac1 	.word	0x0800cac1
 800d008:	0800c909 	.word	0x0800c909
 800d00c:	0800c939 	.word	0x0800c939
 800d010:	0800c8f9 	.word	0x0800c8f9

0800d014 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d018:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d01c:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d01e:	b149      	cbz	r1, 800d034 <start_pass_main+0x20>
 800d020:	2902      	cmp	r1, #2
 800d022:	d070      	beq.n	800d106 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d024:	6803      	ldr	r3, [r0, #0]
 800d026:	2203      	movs	r2, #3
 800d028:	615a      	str	r2, [r3, #20]
 800d02a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d02c:	b003      	add	sp, #12
 800d02e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d032:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d034:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d038:	6880      	ldr	r0, [r0, #8]
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d060      	beq.n	800d100 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d03e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d042:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d046:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d04a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d04c:	482f      	ldr	r0, [pc, #188]	; (800d10c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d04e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d050:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d052:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d054:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d056:	9a00      	ldr	r2, [sp, #0]
 800d058:	4291      	cmp	r1, r2
 800d05a:	db09      	blt.n	800d070 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d05c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d05e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d062:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d064:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d066:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d06a:	b003      	add	sp, #12
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d070:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d072:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d074:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d076:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d078:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d07a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d07e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d082:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d084:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d088:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d08c:	fb02 f905 	mul.w	r9, r2, r5
 800d090:	2500      	movs	r5, #0
 800d092:	454d      	cmp	r5, r9
 800d094:	db1c      	blt.n	800d0d0 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d096:	fb02 fb07 	mul.w	fp, r2, r7
 800d09a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d09e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d0a2:	fb05 b502 	mla	r5, r5, r2, fp
 800d0a6:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d0aa:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d0ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d0b8:	4554      	cmp	r4, sl
 800d0ba:	db11      	blt.n	800d0e0 <start_pass_main+0xcc>
 800d0bc:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d0c0:	2400      	movs	r4, #0
 800d0c2:	fb00 c502 	mla	r5, r0, r2, ip
 800d0c6:	42a2      	cmp	r2, r4
 800d0c8:	dc14      	bgt.n	800d0f4 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d0ca:	3101      	adds	r1, #1
 800d0cc:	3658      	adds	r6, #88	; 0x58
 800d0ce:	e7c2      	b.n	800d056 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d0d0:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d0d4:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d0d8:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d0dc:	3501      	adds	r5, #1
 800d0de:	e7d8      	b.n	800d092 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d0e0:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d0e4:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d0e6:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d0ea:	f855 bb04 	ldr.w	fp, [r5], #4
 800d0ee:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d0f2:	e7e1      	b.n	800d0b8 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d0f4:	f8dc 0000 	ldr.w	r0, [ip]
 800d0f8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d0fc:	3401      	adds	r4, #1
 800d0fe:	e7e2      	b.n	800d0c6 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d100:	4a03      	ldr	r2, [pc, #12]	; (800d110 <start_pass_main+0xfc>)
 800d102:	605a      	str	r2, [r3, #4]
 800d104:	e7ae      	b.n	800d064 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d106:	4a03      	ldr	r2, [pc, #12]	; (800d114 <start_pass_main+0x100>)
 800d108:	605a      	str	r2, [r3, #4]
    break;
 800d10a:	e7ae      	b.n	800d06a <start_pass_main+0x56>
 800d10c:	0800d171 	.word	0x0800d171
 800d110:	0800d119 	.word	0x0800d119
 800d114:	0800d365 	.word	0x0800d365

0800d118 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d11c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d120:	4698      	mov	r8, r3
 800d122:	460e      	mov	r6, r1
 800d124:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d126:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d128:	4605      	mov	r5, r0
 800d12a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d12c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d130:	b943      	cbnz	r3, 800d144 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d132:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d136:	9105      	str	r1, [sp, #20]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	4798      	blx	r3
 800d13c:	b1a8      	cbz	r0, 800d16a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d13e:	2301      	movs	r3, #1
 800d140:	9905      	ldr	r1, [sp, #20]
 800d142:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d144:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d148:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d14c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d150:	4628      	mov	r0, r5
 800d152:	9600      	str	r6, [sp, #0]
 800d154:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d158:	685e      	ldr	r6, [r3, #4]
 800d15a:	464b      	mov	r3, r9
 800d15c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d160:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d162:	bf24      	itt	cs
 800d164:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d166:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d16a:	b007      	add	sp, #28
 800d16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d170 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d174:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d178:	4698      	mov	r8, r3
 800d17a:	b08b      	sub	sp, #44	; 0x2c
 800d17c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d17e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d180:	4689      	mov	r9, r1
 800d182:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d184:	b973      	cbnz	r3, 800d1a4 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d188:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d18c:	330e      	adds	r3, #14
 800d18e:	68d2      	ldr	r2, [r2, #12]
 800d190:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d194:	4790      	blx	r2
 800d196:	2800      	cmp	r0, #0
 800d198:	d05a      	beq.n	800d250 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d19a:	2301      	movs	r3, #1
 800d19c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d19e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d1a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d011      	beq.n	800d1ce <process_data_context_main+0x5e>
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d036      	beq.n	800d21c <process_data_context_main+0xac>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d14e      	bne.n	800d250 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d1b2:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d1b6:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d1b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d1ba:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d1be:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d1c0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d1c2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d045      	beq.n	800d256 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d1ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1d0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f103 010e 	add.w	r1, r3, #14
 800d1da:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d1de:	f8cd 9000 	str.w	r9, [sp]
 800d1e2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d1e6:	685e      	ldr	r6, [r3, #4]
 800d1e8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d1ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d1ee:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d1f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d1f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d32b      	bcc.n	800d250 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d1f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d1fa:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d063      	beq.n	800d2ca <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d204:	f083 0301 	eor.w	r3, r3, #1
 800d208:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d20e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d210:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d212:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d214:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d216:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d218:	6463      	str	r3, [r4, #68]	; 0x44
 800d21a:	e019      	b.n	800d250 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d21c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d21e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d222:	4628      	mov	r0, r5
 800d224:	f103 010e 	add.w	r1, r3, #14
 800d228:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d22c:	f8cd 9000 	str.w	r9, [sp]
 800d230:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d234:	685e      	ldr	r6, [r3, #4]
 800d236:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d23a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d23c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d23e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d240:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d242:	429a      	cmp	r2, r3
 800d244:	d304      	bcc.n	800d250 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d246:	2300      	movs	r3, #0
 800d248:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	4543      	cmp	r3, r8
 800d24e:	d3b0      	bcc.n	800d1b2 <process_data_context_main+0x42>
  }
}
 800d250:	b00b      	add	sp, #44	; 0x2c
 800d252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d256:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d258:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d25c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d260:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d264:	9206      	str	r2, [sp, #24]
 800d266:	9a06      	ldr	r2, [sp, #24]
 800d268:	4296      	cmp	r6, r2
 800d26a:	daae      	bge.n	800d1ca <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d26c:	68d8      	ldr	r0, [r3, #12]
 800d26e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d270:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d272:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d274:	fbb0 fbf2 	udiv	fp, r0, r2
 800d278:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d27c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d280:	2800      	cmp	r0, #0
 800d282:	bf08      	it	eq
 800d284:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d286:	b926      	cbnz	r6, 800d292 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d288:	1e42      	subs	r2, r0, #1
 800d28a:	fb92 f2fa 	sdiv	r2, r2, sl
 800d28e:	3201      	adds	r2, #1
 800d290:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d292:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d294:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d296:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d29a:	320e      	adds	r2, #14
 800d29c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d2a0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d2a4:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4658      	mov	r0, fp
 800d2ac:	3004      	adds	r0, #4
 800d2ae:	9205      	str	r2, [sp, #20]
 800d2b0:	9a05      	ldr	r2, [sp, #20]
 800d2b2:	4552      	cmp	r2, sl
 800d2b4:	db02      	blt.n	800d2bc <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d2b6:	3601      	adds	r6, #1
 800d2b8:	3358      	adds	r3, #88	; 0x58
 800d2ba:	e7d4      	b.n	800d266 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d2bc:	f8db 2000 	ldr.w	r2, [fp]
 800d2c0:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d2c4:	9a05      	ldr	r2, [sp, #20]
 800d2c6:	3201      	adds	r2, #1
 800d2c8:	e7f1      	b.n	800d2ae <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2ca:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d2ce:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2d2:	9305      	str	r3, [sp, #20]
 800d2d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2d6:	2500      	movs	r5, #0
 800d2d8:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2de:	9b08      	ldr	r3, [sp, #32]
 800d2e0:	429d      	cmp	r5, r3
 800d2e2:	da8e      	bge.n	800d202 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d2e4:	9b05      	ldr	r3, [sp, #20]
 800d2e6:	68da      	ldr	r2, [r3, #12]
 800d2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ea:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d2ec:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d2f0:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d2f4:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d2f8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d2fc:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d300:	9b07      	ldr	r3, [sp, #28]
 800d302:	4353      	muls	r3, r2
 800d304:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d308:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d30c:	4413      	add	r3, r2
 800d30e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800d310:	2100      	movs	r1, #0
 800d312:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d316:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d31a:	461e      	mov	r6, r3
 800d31c:	f06f 0303 	mvn.w	r3, #3
 800d320:	fb03 fe02 	mul.w	lr, r3, r2
 800d324:	eb07 030e 	add.w	r3, r7, lr
 800d328:	44e6      	add	lr, ip
 800d32a:	9309      	str	r3, [sp, #36]	; 0x24
 800d32c:	428a      	cmp	r2, r1
 800d32e:	dc04      	bgt.n	800d33a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800d330:	9b05      	ldr	r3, [sp, #20]
 800d332:	3501      	adds	r5, #1
 800d334:	3358      	adds	r3, #88	; 0x58
 800d336:	9305      	str	r3, [sp, #20]
 800d338:	e7d1      	b.n	800d2de <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d33a:	9b06      	ldr	r3, [sp, #24]
 800d33c:	f853 bb04 	ldr.w	fp, [r3], #4
 800d340:	9306      	str	r3, [sp, #24]
 800d342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d344:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d348:	f85a bb04 	ldr.w	fp, [sl], #4
 800d34c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d350:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d354:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d358:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d35c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d35e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d362:	e7e3      	b.n	800d32c <process_data_context_main+0x1bc>

0800d364 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d366:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d36a:	9100      	str	r1, [sp, #0]
 800d36c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d370:	2300      	movs	r3, #0
 800d372:	6864      	ldr	r4, [r4, #4]
 800d374:	461a      	mov	r2, r3
 800d376:	4619      	mov	r1, r3
 800d378:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d37a:	b004      	add	sp, #16
 800d37c:	bd10      	pop	{r4, pc}
	...

0800d380 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d384:	6843      	ldr	r3, [r0, #4]
{
 800d386:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d388:	2250      	movs	r2, #80	; 0x50
 800d38a:	2101      	movs	r1, #1
 800d38c:	681b      	ldr	r3, [r3, #0]
{
 800d38e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d390:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d392:	4b3a      	ldr	r3, [pc, #232]	; (800d47c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d394:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d398:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d39a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d39c:	b12d      	cbz	r5, 800d3aa <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	615a      	str	r2, [r3, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d3aa:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d3ae:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	b31b      	cbz	r3, 800d3fe <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d3b6:	2d01      	cmp	r5, #1
 800d3b8:	dc05      	bgt.n	800d3c6 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	2230      	movs	r2, #48	; 0x30
 800d3be:	4620      	mov	r0, r4
 800d3c0:	615a      	str	r2, [r3, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d3c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	6863      	ldr	r3, [r4, #4]
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d3d0:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d3d4:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3d6:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d3da:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d3de:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d3e2:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d3e4:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d3e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3ec:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d3f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d3f4:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3f8:	4598      	cmp	r8, r3
 800d3fa:	db0a      	blt.n	800d412 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d3fc:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3fe:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d402:	3608      	adds	r6, #8
 800d404:	f04f 0800 	mov.w	r8, #0
 800d408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d40a:	4543      	cmp	r3, r8
 800d40c:	dc1d      	bgt.n	800d44a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800d40e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d412:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d414:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d416:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800d418:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d41a:	4353      	muls	r3, r2
 800d41c:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d420:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d422:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d426:	4620      	mov	r0, r4
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d42e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800d432:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800d436:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800d43a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800d43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d440:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800d444:	f108 0801 	add.w	r8, r8, #1
 800d448:	e7d3      	b.n	800d3f2 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800d44c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d450:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800d452:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d454:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d458:	4353      	muls	r3, r2
 800d45a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d45e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d460:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d464:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800d468:	436b      	muls	r3, r5
 800d46a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d46e:	4620      	mov	r0, r4
 800d470:	434a      	muls	r2, r1
 800d472:	2101      	movs	r1, #1
 800d474:	47c8      	blx	r9
 800d476:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800d47a:	e7c5      	b.n	800d408 <jinit_d_main_controller+0x88>
 800d47c:	0800d015 	.word	0x0800d015

0800d480 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d484:	6986      	ldr	r6, [r0, #24]
{
 800d486:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800d488:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800d48c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800d490:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d494:	b93d      	cbnz	r5, 800d4a6 <get_sof+0x26>
 800d496:	68f3      	ldr	r3, [r6, #12]
 800d498:	4798      	blx	r3
 800d49a:	b910      	cbnz	r0, 800d4a2 <get_sof+0x22>
 800d49c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4a2:	e9d6 c500 	ldrd	ip, r5, [r6]
 800d4a6:	1e6b      	subs	r3, r5, #1
 800d4a8:	f89c 7000 	ldrb.w	r7, [ip]
 800d4ac:	f000 8088 	beq.w	800d5c0 <get_sof+0x140>
 800d4b0:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d4b4:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4b6:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d4ba:	f000 808a 	beq.w	800d5d2 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4be:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d4c0:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d4c2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d4c4:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d4c8:	f000 808c 	beq.w	800d5e4 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d4cc:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d4ce:	782a      	ldrb	r2, [r5, #0]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d4d6:	6222      	str	r2, [r4, #32]
 800d4d8:	f000 808d 	beq.w	800d5f6 <get_sof+0x176>
 800d4dc:	3501      	adds	r5, #1
 800d4de:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d4e0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d4e2:	6a22      	ldr	r2, [r4, #32]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d4e8:	f000 808e 	beq.w	800d608 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d4ec:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d4ee:	782a      	ldrb	r2, [r5, #0]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d4f6:	61e2      	str	r2, [r4, #28]
 800d4f8:	f000 808f 	beq.w	800d61a <get_sof+0x19a>
 800d4fc:	3501      	adds	r5, #1
 800d4fe:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d500:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d502:	69e2      	ldr	r2, [r4, #28]
 800d504:	440a      	add	r2, r1
 800d506:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d508:	f000 8090 	beq.w	800d62c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d50c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d50e:	f103 39ff 	add.w	r9, r3, #4294967295
 800d512:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d516:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800d51a:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d51c:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d51e:	4620      	mov	r0, r4
 800d520:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d522:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d526:	619a      	str	r2, [r3, #24]
  length -= 8;
 800d528:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d52c:	69e2      	ldr	r2, [r4, #28]
 800d52e:	61da      	str	r2, [r3, #28]
 800d530:	6a22      	ldr	r2, [r4, #32]
 800d532:	621a      	str	r2, [r3, #32]
 800d534:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d536:	625a      	str	r2, [r3, #36]	; 0x24
 800d538:	2266      	movs	r2, #102	; 0x66
 800d53a:	615a      	str	r2, [r3, #20]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800d540:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	b12b      	cbz	r3, 800d554 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	223c      	movs	r2, #60	; 0x3c
 800d54c:	4620      	mov	r0, r4
 800d54e:	615a      	str	r2, [r3, #20]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d554:	6a23      	ldr	r3, [r4, #32]
 800d556:	b123      	cbz	r3, 800d562 <get_sof+0xe2>
 800d558:	69e3      	ldr	r3, [r4, #28]
 800d55a:	b113      	cbz	r3, 800d562 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800d55c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d55e:	2b00      	cmp	r3, #0
 800d560:	dc05      	bgt.n	800d56e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	2221      	movs	r2, #33	; 0x21
 800d566:	4620      	mov	r0, r4
 800d568:	615a      	str	r2, [r3, #20]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800d56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d574:	4543      	cmp	r3, r8
 800d576:	d005      	beq.n	800d584 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	220c      	movs	r2, #12
 800d57c:	4620      	mov	r0, r4
 800d57e:	615a      	str	r2, [r3, #20]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d584:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d588:	b94b      	cbnz	r3, 800d59e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d58a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d58c:	2158      	movs	r1, #88	; 0x58
 800d58e:	6863      	ldr	r3, [r4, #4]
 800d590:	4620      	mov	r0, r4
 800d592:	434a      	muls	r2, r1
 800d594:	2101      	movs	r1, #1
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4798      	blx	r3
 800d59a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d59e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d5a2:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d5a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d5aa:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ae:	4543      	cmp	r3, r8
 800d5b0:	dc45      	bgt.n	800d63e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800d5b2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800d5ba:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800d5be:	e76e      	b.n	800d49e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5c0:	68f3      	ldr	r3, [r6, #12]
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4798      	blx	r3
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	f43f af68 	beq.w	800d49c <get_sof+0x1c>
 800d5cc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d5d0:	e770      	b.n	800d4b4 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d5d2:	68f3      	ldr	r3, [r6, #12]
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	4798      	blx	r3
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f43f af5f 	beq.w	800d49c <get_sof+0x1c>
 800d5de:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d5e2:	e76d      	b.n	800d4c0 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d5e4:	68f3      	ldr	r3, [r6, #12]
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4798      	blx	r3
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f43f af56 	beq.w	800d49c <get_sof+0x1c>
 800d5f0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d5f4:	e76b      	b.n	800d4ce <get_sof+0x4e>
 800d5f6:	68f3      	ldr	r3, [r6, #12]
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	4798      	blx	r3
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f43f af4d 	beq.w	800d49c <get_sof+0x1c>
 800d602:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d606:	e76a      	b.n	800d4de <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d608:	68f3      	ldr	r3, [r6, #12]
 800d60a:	4620      	mov	r0, r4
 800d60c:	4798      	blx	r3
 800d60e:	2800      	cmp	r0, #0
 800d610:	f43f af44 	beq.w	800d49c <get_sof+0x1c>
 800d614:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d618:	e769      	b.n	800d4ee <get_sof+0x6e>
 800d61a:	68f3      	ldr	r3, [r6, #12]
 800d61c:	4620      	mov	r0, r4
 800d61e:	4798      	blx	r3
 800d620:	2800      	cmp	r0, #0
 800d622:	f43f af3b 	beq.w	800d49c <get_sof+0x1c>
 800d626:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d62a:	e768      	b.n	800d4fe <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d62c:	68f3      	ldr	r3, [r6, #12]
 800d62e:	4620      	mov	r0, r4
 800d630:	4798      	blx	r3
 800d632:	2800      	cmp	r0, #0
 800d634:	f43f af32 	beq.w	800d49c <get_sof+0x1c>
 800d638:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d63c:	e767      	b.n	800d50e <get_sof+0x8e>
    compptr->component_index = ci;
 800d63e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d642:	f1b9 0f00 	cmp.w	r9, #0
 800d646:	d107      	bne.n	800d658 <get_sof+0x1d8>
 800d648:	68f3      	ldr	r3, [r6, #12]
 800d64a:	4620      	mov	r0, r4
 800d64c:	4798      	blx	r3
 800d64e:	2800      	cmp	r0, #0
 800d650:	f43f af24 	beq.w	800d49c <get_sof+0x1c>
 800d654:	e9d6 5900 	ldrd	r5, r9, [r6]
 800d658:	782b      	ldrb	r3, [r5, #0]
 800d65a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d65e:	f1b9 0301 	subs.w	r3, r9, #1
 800d662:	d029      	beq.n	800d6b8 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d664:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d666:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d668:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800d66a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800d66e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800d672:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800d676:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d67a:	d026      	beq.n	800d6ca <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d67c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d67e:	f103 39ff 	add.w	r9, r3, #4294967295
 800d682:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d686:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800d68a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d68c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d690:	4620      	mov	r0, r4
 800d692:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800d694:	f108 0801 	add.w	r8, r8, #1
 800d698:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d69a:	619a      	str	r2, [r3, #24]
 800d69c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800d6a0:	61da      	str	r2, [r3, #28]
 800d6a2:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800d6a6:	621a      	str	r2, [r3, #32]
 800d6a8:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800d6ac:	f8c3 a014 	str.w	sl, [r3, #20]
 800d6b0:	625a      	str	r2, [r3, #36]	; 0x24
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	4798      	blx	r3
       ci++, compptr++) {
 800d6b6:	e779      	b.n	800d5ac <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d6b8:	68f3      	ldr	r3, [r6, #12]
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	4798      	blx	r3
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f43f aeec 	beq.w	800d49c <get_sof+0x1c>
 800d6c4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d6c8:	e7cd      	b.n	800d666 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d6ca:	68f3      	ldr	r3, [r6, #12]
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	4798      	blx	r3
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	f43f aee3 	beq.w	800d49c <get_sof+0x1c>
 800d6d6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d6da:	e7d0      	b.n	800d67e <get_sof+0x1fe>

0800d6dc <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800d6e0:	2a0d      	cmp	r2, #13
{
 800d6e2:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d6e4:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800d6e6:	eb02 0603 	add.w	r6, r2, r3
{
 800d6ea:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d6ec:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800d6ee:	d96d      	bls.n	800d7cc <examine_app0+0xf0>
 800d6f0:	7822      	ldrb	r2, [r4, #0]
 800d6f2:	2a4a      	cmp	r2, #74	; 0x4a
 800d6f4:	f040 808f 	bne.w	800d816 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d6f8:	7862      	ldrb	r2, [r4, #1]
 800d6fa:	2a46      	cmp	r2, #70	; 0x46
 800d6fc:	f040 808b 	bne.w	800d816 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d700:	78a2      	ldrb	r2, [r4, #2]
 800d702:	2a49      	cmp	r2, #73	; 0x49
 800d704:	d16a      	bne.n	800d7dc <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800d706:	78e2      	ldrb	r2, [r4, #3]
 800d708:	2a46      	cmp	r2, #70	; 0x46
 800d70a:	d167      	bne.n	800d7dc <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800d70c:	7922      	ldrb	r2, [r4, #4]
 800d70e:	2a00      	cmp	r2, #0
 800d710:	d164      	bne.n	800d7dc <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800d712:	2201      	movs	r2, #1
 800d714:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800d718:	7962      	ldrb	r2, [r4, #5]
 800d71a:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800d71e:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800d720:	f894 c006 	ldrb.w	ip, [r4, #6]
 800d724:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800d728:	79e7      	ldrb	r7, [r4, #7]
 800d72a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800d72e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800d732:	7a67      	ldrb	r7, [r4, #9]
 800d734:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d738:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800d73c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800d740:	7ae7      	ldrb	r7, [r4, #11]
 800d742:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d746:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800d74a:	d007      	beq.n	800d75c <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d74c:	277a      	movs	r7, #122	; 0x7a
 800d74e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800d752:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800d756:	f04f 31ff 	mov.w	r1, #4294967295
 800d75a:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	2101      	movs	r1, #1
 800d760:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800d764:	4628      	mov	r0, r5
 800d766:	619a      	str	r2, [r3, #24]
 800d768:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800d76c:	61da      	str	r2, [r3, #28]
 800d76e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800d772:	621a      	str	r2, [r3, #32]
 800d774:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800d778:	625a      	str	r2, [r3, #36]	; 0x24
 800d77a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800d77e:	629a      	str	r2, [r3, #40]	; 0x28
 800d780:	2259      	movs	r2, #89	; 0x59
 800d782:	615a      	str	r2, [r3, #20]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800d788:	7b22      	ldrb	r2, [r4, #12]
 800d78a:	7b63      	ldrb	r3, [r4, #13]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	d00a      	beq.n	800d7a6 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	225c      	movs	r2, #92	; 0x5c
 800d794:	2101      	movs	r1, #1
 800d796:	4628      	mov	r0, r5
 800d798:	615a      	str	r2, [r3, #20]
 800d79a:	7b22      	ldrb	r2, [r4, #12]
 800d79c:	619a      	str	r2, [r3, #24]
 800d79e:	7b62      	ldrb	r2, [r4, #13]
 800d7a0:	61da      	str	r2, [r3, #28]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d7a6:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800d7a8:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d7aa:	7b63      	ldrb	r3, [r4, #13]
 800d7ac:	fb12 f203 	smulbb	r2, r2, r3
 800d7b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800d7b4:	42b2      	cmp	r2, r6
 800d7b6:	d030      	beq.n	800d81a <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800d7b8:	682a      	ldr	r2, [r5, #0]
 800d7ba:	235a      	movs	r3, #90	; 0x5a
 800d7bc:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800d7c0:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	2101      	movs	r1, #1
  }
}
 800d7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d7ca:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800d7cc:	2a05      	cmp	r2, #5
 800d7ce:	d922      	bls.n	800d816 <examine_app0+0x13a>
 800d7d0:	7822      	ldrb	r2, [r4, #0]
 800d7d2:	2a4a      	cmp	r2, #74	; 0x4a
 800d7d4:	d11f      	bne.n	800d816 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d7d6:	7862      	ldrb	r2, [r4, #1]
 800d7d8:	2a46      	cmp	r2, #70	; 0x46
 800d7da:	d11c      	bne.n	800d816 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d7dc:	78a2      	ldrb	r2, [r4, #2]
 800d7de:	2a58      	cmp	r2, #88	; 0x58
 800d7e0:	d119      	bne.n	800d816 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800d7e2:	78e2      	ldrb	r2, [r4, #3]
 800d7e4:	2a58      	cmp	r2, #88	; 0x58
 800d7e6:	d116      	bne.n	800d816 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800d7e8:	7922      	ldrb	r2, [r4, #4]
 800d7ea:	b9a2      	cbnz	r2, 800d816 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800d7ec:	7962      	ldrb	r2, [r4, #5]
 800d7ee:	2a11      	cmp	r2, #17
 800d7f0:	d007      	beq.n	800d802 <examine_app0+0x126>
 800d7f2:	2a13      	cmp	r2, #19
 800d7f4:	d007      	beq.n	800d806 <examine_app0+0x12a>
 800d7f6:	2a10      	cmp	r2, #16
 800d7f8:	d107      	bne.n	800d80a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800d7fa:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d7fc:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800d800:	e7df      	b.n	800d7c2 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800d802:	226f      	movs	r2, #111	; 0x6f
 800d804:	e7fa      	b.n	800d7fc <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800d806:	2270      	movs	r2, #112	; 0x70
 800d808:	e7f8      	b.n	800d7fc <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800d80a:	225b      	movs	r2, #91	; 0x5b
 800d80c:	614a      	str	r2, [r1, #20]
 800d80e:	7962      	ldrb	r2, [r4, #5]
 800d810:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800d814:	e7d5      	b.n	800d7c2 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d816:	224f      	movs	r2, #79	; 0x4f
 800d818:	e7f0      	b.n	800d7fc <examine_app0+0x120>
}
 800d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d81e <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800d822:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d824:	6804      	ldr	r4, [r0, #0]
{
 800d826:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d828:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800d82a:	d92b      	bls.n	800d884 <examine_app14+0x66>
 800d82c:	780f      	ldrb	r7, [r1, #0]
 800d82e:	2f41      	cmp	r7, #65	; 0x41
 800d830:	d128      	bne.n	800d884 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800d832:	784f      	ldrb	r7, [r1, #1]
 800d834:	2f64      	cmp	r7, #100	; 0x64
 800d836:	d125      	bne.n	800d884 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800d838:	788f      	ldrb	r7, [r1, #2]
 800d83a:	2f6f      	cmp	r7, #111	; 0x6f
 800d83c:	d122      	bne.n	800d884 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800d83e:	78cf      	ldrb	r7, [r1, #3]
 800d840:	2f62      	cmp	r7, #98	; 0x62
 800d842:	d11f      	bne.n	800d884 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800d844:	790f      	ldrb	r7, [r1, #4]
 800d846:	2f65      	cmp	r7, #101	; 0x65
 800d848:	d11c      	bne.n	800d884 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d84a:	79cb      	ldrb	r3, [r1, #7]
 800d84c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d84e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d850:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d854:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d856:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d85a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800d85e:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d860:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d862:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d866:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d86a:	234e      	movs	r3, #78	; 0x4e
 800d86c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800d870:	6163      	str	r3, [r4, #20]
 800d872:	2101      	movs	r1, #1
 800d874:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800d876:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800d878:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800d87c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800d880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800d884:	2150      	movs	r1, #80	; 0x50
 800d886:	4413      	add	r3, r2
 800d888:	4628      	mov	r0, r5
 800d88a:	6161      	str	r1, [r4, #20]
 800d88c:	2101      	movs	r1, #1
 800d88e:	61a3      	str	r3, [r4, #24]
 800d890:	4633      	mov	r3, r6
}
 800d892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800d896:	4718      	bx	r3

0800d898 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800d898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800d89c:	6986      	ldr	r6, [r0, #24]
{
 800d89e:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800d8a0:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d8a2:	b39f      	cbz	r7, 800d90c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800d8a4:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d8a6:	7825      	ldrb	r5, [r4, #0]
 800d8a8:	3f01      	subs	r7, #1
 800d8aa:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800d8ae:	d037      	beq.n	800d920 <get_interesting_appn+0x88>
 800d8b0:	3401      	adds	r4, #1
 800d8b2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d8b6:	3f01      	subs	r7, #1
 800d8b8:	444d      	add	r5, r9
  length -= 2;
 800d8ba:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800d8bc:	2d0d      	cmp	r5, #13
 800d8be:	dc37      	bgt.n	800d930 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	dd38      	ble.n	800d936 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800d8c4:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800d8c6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800d8ca:	b92f      	cbnz	r7, 800d8d8 <get_interesting_appn+0x40>
 800d8cc:	68f3      	ldr	r3, [r6, #12]
 800d8ce:	4640      	mov	r0, r8
 800d8d0:	4798      	blx	r3
 800d8d2:	b1f0      	cbz	r0, 800d912 <get_interesting_appn+0x7a>
 800d8d4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d8d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8dc:	3f01      	subs	r7, #1
 800d8de:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800d8e2:	f10a 0a01 	add.w	sl, sl, #1
 800d8e6:	45d1      	cmp	r9, sl
 800d8e8:	d1ef      	bne.n	800d8ca <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800d8ea:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800d8ee:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800d8f2:	2ae0      	cmp	r2, #224	; 0xe0
 800d8f4:	d022      	beq.n	800d93c <get_interesting_appn+0xa4>
 800d8f6:	2aee      	cmp	r2, #238	; 0xee
 800d8f8:	d032      	beq.n	800d960 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d8fe:	2146      	movs	r1, #70	; 0x46
 800d900:	4640      	mov	r0, r8
 800d902:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4798      	blx	r3
    break;
 800d90a:	e01d      	b.n	800d948 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d90c:	68f3      	ldr	r3, [r6, #12]
 800d90e:	4798      	blx	r3
 800d910:	b918      	cbnz	r0, 800d91a <get_interesting_appn+0x82>
 800d912:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800d914:	b004      	add	sp, #16
 800d916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d91a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d91e:	e7c2      	b.n	800d8a6 <get_interesting_appn+0xe>
 800d920:	68f3      	ldr	r3, [r6, #12]
 800d922:	4640      	mov	r0, r8
 800d924:	4798      	blx	r3
 800d926:	2800      	cmp	r0, #0
 800d928:	d0f3      	beq.n	800d912 <get_interesting_appn+0x7a>
 800d92a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d92e:	e7c0      	b.n	800d8b2 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800d930:	f04f 090e 	mov.w	r9, #14
 800d934:	e7c7      	b.n	800d8c6 <get_interesting_appn+0x2e>
    numtoread = 0;
 800d936:	f04f 0900 	mov.w	r9, #0
 800d93a:	e7d6      	b.n	800d8ea <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800d93c:	462b      	mov	r3, r5
 800d93e:	464a      	mov	r2, r9
 800d940:	4669      	mov	r1, sp
 800d942:	4640      	mov	r0, r8
 800d944:	f7ff feca 	bl	800d6dc <examine_app0>
  if (length > 0)
 800d948:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800d94a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800d94e:	dd05      	ble.n	800d95c <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800d950:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d954:	4629      	mov	r1, r5
 800d956:	4640      	mov	r0, r8
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	4798      	blx	r3
  return TRUE;
 800d95c:	2001      	movs	r0, #1
 800d95e:	e7d9      	b.n	800d914 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800d960:	462b      	mov	r3, r5
 800d962:	464a      	mov	r2, r9
 800d964:	4669      	mov	r1, sp
 800d966:	4640      	mov	r0, r8
 800d968:	f7ff ff59 	bl	800d81e <examine_app14>
    break;
 800d96c:	e7ec      	b.n	800d948 <get_interesting_appn+0xb0>

0800d96e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800d96e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800d972:	6984      	ldr	r4, [r0, #24]
{
 800d974:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800d976:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d978:	b31b      	cbz	r3, 800d9c2 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800d97a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d97c:	782e      	ldrb	r6, [r5, #0]
 800d97e:	f1b3 0801 	subs.w	r8, r3, #1
 800d982:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800d986:	d025      	beq.n	800d9d4 <skip_variable+0x66>
 800d988:	3501      	adds	r5, #1
 800d98a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d98e:	235d      	movs	r3, #93	; 0x5d
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d994:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d996:	4638      	mov	r0, r7
 800d998:	6153      	str	r3, [r2, #20]
  length -= 2;
 800d99a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d99c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800d9a0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800d9a4:	6853      	ldr	r3, [r2, #4]
 800d9a6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9a8:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800d9ac:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800d9ae:	6025      	str	r5, [r4, #0]
 800d9b0:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800d9b2:	dd04      	ble.n	800d9be <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	4798      	blx	r3

  return TRUE;
 800d9be:	2001      	movs	r0, #1
 800d9c0:	e003      	b.n	800d9ca <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9c2:	68e3      	ldr	r3, [r4, #12]
 800d9c4:	4798      	blx	r3
 800d9c6:	b910      	cbnz	r0, 800d9ce <skip_variable+0x60>
 800d9c8:	2000      	movs	r0, #0
}
 800d9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9ce:	e9d4 5300 	ldrd	r5, r3, [r4]
 800d9d2:	e7d3      	b.n	800d97c <skip_variable+0xe>
 800d9d4:	68e3      	ldr	r3, [r4, #12]
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	4798      	blx	r3
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d0f4      	beq.n	800d9c8 <skip_variable+0x5a>
 800d9de:	e9d4 5800 	ldrd	r5, r8, [r4]
 800d9e2:	e7d2      	b.n	800d98a <skip_variable+0x1c>

0800d9e4 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800d9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800d9e8:	6986      	ldr	r6, [r0, #24]
{
 800d9ea:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800d9ec:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9f0:	b987      	cbnz	r7, 800da14 <next_marker+0x30>
 800d9f2:	68f3      	ldr	r3, [r6, #12]
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4798      	blx	r3
 800d9f8:	b950      	cbnz	r0, 800da10 <next_marker+0x2c>
 800d9fa:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800da00:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800da04:	6993      	ldr	r3, [r2, #24]
 800da06:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800da08:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800da0a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800da0e:	e7ef      	b.n	800d9f0 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800da10:	e9d6 4700 	ldrd	r4, r7, [r6]
 800da14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da18:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800da1a:	2bff      	cmp	r3, #255	; 0xff
 800da1c:	d1f0      	bne.n	800da00 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800da1e:	b937      	cbnz	r7, 800da2e <next_marker+0x4a>
 800da20:	68f3      	ldr	r3, [r6, #12]
 800da22:	4640      	mov	r0, r8
 800da24:	4798      	blx	r3
 800da26:	2800      	cmp	r0, #0
 800da28:	d0e7      	beq.n	800d9fa <next_marker+0x16>
 800da2a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800da2e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800da32:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800da34:	2dff      	cmp	r5, #255	; 0xff
 800da36:	d0f2      	beq.n	800da1e <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800da38:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800da3c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800da3e:	b90d      	cbnz	r5, 800da44 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800da40:	3302      	adds	r3, #2
 800da42:	e7e1      	b.n	800da08 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800da44:	b173      	cbz	r3, 800da64 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800da46:	f8d8 2000 	ldr.w	r2, [r8]
 800da4a:	2177      	movs	r1, #119	; 0x77
 800da4c:	4640      	mov	r0, r8
 800da4e:	61d5      	str	r5, [r2, #28]
 800da50:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800da54:	6853      	ldr	r3, [r2, #4]
 800da56:	f04f 31ff 	mov.w	r1, #4294967295
 800da5a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800da5c:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800da60:	2200      	movs	r2, #0
 800da62:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800da64:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800da68:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800da6a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800da6e:	e7c5      	b.n	800d9fc <next_marker+0x18>

0800da70 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800da70:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800da74:	b510      	push	{r4, lr}
 800da76:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800da78:	b1e3      	cbz	r3, 800dab4 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800da7a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800da7e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800da82:	6959      	ldr	r1, [r3, #20]
 800da84:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800da88:	429a      	cmp	r2, r3
 800da8a:	d119      	bne.n	800dac0 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800da8c:	6823      	ldr	r3, [r4, #0]
 800da8e:	2264      	movs	r2, #100	; 0x64
 800da90:	4620      	mov	r0, r4
 800da92:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	2103      	movs	r1, #3
 800da9a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800daa2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800daa6:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800daa8:	6953      	ldr	r3, [r2, #20]
 800daaa:	3301      	adds	r3, #1
 800daac:	f003 0307 	and.w	r3, r3, #7
 800dab0:	6153      	str	r3, [r2, #20]
  return TRUE;
 800dab2:	e004      	b.n	800dabe <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800dab4:	f7ff ff96 	bl	800d9e4 <next_marker>
 800dab8:	2800      	cmp	r0, #0
 800daba:	d1de      	bne.n	800da7a <read_restart_marker+0xa>
      return FALSE;
 800dabc:	2000      	movs	r0, #0
}
 800dabe:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800dac0:	69a3      	ldr	r3, [r4, #24]
 800dac2:	4620      	mov	r0, r4
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	4798      	blx	r3
 800dac8:	2800      	cmp	r0, #0
 800daca:	d1ea      	bne.n	800daa2 <read_restart_marker+0x32>
 800dacc:	e7f6      	b.n	800dabc <read_restart_marker+0x4c>

0800dace <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dace:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800dad0:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dad4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800dad8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800dadc:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800dae0:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800dae2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800dae6:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800daea:	4770      	bx	lr

0800daec <get_dht>:
{
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800daf0:	6987      	ldr	r7, [r0, #24]
{
 800daf2:	b0c9      	sub	sp, #292	; 0x124
 800daf4:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800daf6:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800daf8:	b1fe      	cbz	r6, 800db3a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800dafa:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dafc:	f894 9000 	ldrb.w	r9, [r4]
 800db00:	3e01      	subs	r6, #1
 800db02:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800db06:	d022      	beq.n	800db4e <get_dht+0x62>
 800db08:	3401      	adds	r4, #1
 800db0a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800db0e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800db10:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db14:	44c1      	add	r9, r8
  length -= 2;
 800db16:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800db1a:	f1b9 0f10 	cmp.w	r9, #16
 800db1e:	dc1e      	bgt.n	800db5e <get_dht+0x72>
  if (length != 0)
 800db20:	f1b9 0f00 	cmp.w	r9, #0
 800db24:	d005      	beq.n	800db32 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	220c      	movs	r2, #12
 800db2a:	4628      	mov	r0, r5
 800db2c:	615a      	str	r2, [r3, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4798      	blx	r3
  return TRUE;
 800db32:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800db34:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800db38:	e003      	b.n	800db42 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	4798      	blx	r3
 800db3e:	b918      	cbnz	r0, 800db48 <get_dht+0x5c>
 800db40:	2000      	movs	r0, #0
}
 800db42:	b049      	add	sp, #292	; 0x124
 800db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db48:	e9d7 4600 	ldrd	r4, r6, [r7]
 800db4c:	e7d6      	b.n	800dafc <get_dht+0x10>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4628      	mov	r0, r5
 800db52:	4798      	blx	r3
 800db54:	2800      	cmp	r0, #0
 800db56:	d0f3      	beq.n	800db40 <get_dht+0x54>
 800db58:	e9d7 4600 	ldrd	r4, r6, [r7]
 800db5c:	e7d5      	b.n	800db0a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800db5e:	b936      	cbnz	r6, 800db6e <get_dht+0x82>
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4628      	mov	r0, r5
 800db64:	4790      	blx	r2
 800db66:	2800      	cmp	r0, #0
 800db68:	d0ea      	beq.n	800db40 <get_dht+0x54>
 800db6a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800db6e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800db72:	2152      	movs	r1, #82	; 0x52
 800db74:	682a      	ldr	r2, [r5, #0]
 800db76:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800db78:	f8cd 8000 	str.w	r8, [sp]
 800db7c:	3e01      	subs	r6, #1
    count = 0;
 800db7e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800db82:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800db86:	6852      	ldr	r2, [r2, #4]
 800db88:	2101      	movs	r1, #1
 800db8a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800db8c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800db8e:	b946      	cbnz	r6, 800dba2 <get_dht+0xb6>
 800db90:	68f9      	ldr	r1, [r7, #12]
 800db92:	4628      	mov	r0, r5
 800db94:	9201      	str	r2, [sp, #4]
 800db96:	4788      	blx	r1
 800db98:	2800      	cmp	r0, #0
 800db9a:	d0d1      	beq.n	800db40 <get_dht+0x54>
 800db9c:	9a01      	ldr	r2, [sp, #4]
 800db9e:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba6:	3e01      	subs	r6, #1
 800dba8:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800dbac:	3201      	adds	r2, #1
      count += bits[i];
 800dbae:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800dbb0:	2a11      	cmp	r2, #17
 800dbb2:	d1ec      	bne.n	800db8e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dbb4:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800dbb6:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dbba:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800dbbe:	f04f 0958 	mov.w	r9, #88	; 0x58
 800dbc2:	4628      	mov	r0, r5
    length -= 1 + 16;
 800dbc4:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dbc6:	6191      	str	r1, [r2, #24]
 800dbc8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800dbcc:	f8c2 9014 	str.w	r9, [r2, #20]
 800dbd0:	61d1      	str	r1, [r2, #28]
 800dbd2:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800dbd6:	6211      	str	r1, [r2, #32]
 800dbd8:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800dbdc:	6251      	str	r1, [r2, #36]	; 0x24
 800dbde:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800dbe2:	6291      	str	r1, [r2, #40]	; 0x28
 800dbe4:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800dbe8:	62d1      	str	r1, [r2, #44]	; 0x2c
 800dbea:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800dbee:	6311      	str	r1, [r2, #48]	; 0x30
 800dbf0:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800dbf4:	6351      	str	r1, [r2, #52]	; 0x34
 800dbf6:	2102      	movs	r1, #2
 800dbf8:	6852      	ldr	r2, [r2, #4]
 800dbfa:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dbfc:	682a      	ldr	r2, [r5, #0]
 800dbfe:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800dc02:	4628      	mov	r0, r5
 800dc04:	f8c2 9014 	str.w	r9, [r2, #20]
 800dc08:	6191      	str	r1, [r2, #24]
 800dc0a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800dc0e:	61d1      	str	r1, [r2, #28]
 800dc10:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800dc14:	6211      	str	r1, [r2, #32]
 800dc16:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800dc1a:	6251      	str	r1, [r2, #36]	; 0x24
 800dc1c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800dc20:	6291      	str	r1, [r2, #40]	; 0x28
 800dc22:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800dc26:	62d1      	str	r1, [r2, #44]	; 0x2c
 800dc28:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800dc2c:	6311      	str	r1, [r2, #48]	; 0x30
 800dc2e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800dc32:	6351      	str	r1, [r2, #52]	; 0x34
 800dc34:	2102      	movs	r1, #2
 800dc36:	6852      	ldr	r2, [r2, #4]
 800dc38:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800dc3a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800dc3e:	dc02      	bgt.n	800dc46 <get_dht+0x15a>
 800dc40:	9b01      	ldr	r3, [sp, #4]
 800dc42:	4553      	cmp	r3, sl
 800dc44:	da05      	bge.n	800dc52 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800dc46:	682a      	ldr	r2, [r5, #0]
 800dc48:	2109      	movs	r1, #9
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	6151      	str	r1, [r2, #20]
 800dc4e:	6812      	ldr	r2, [r2, #0]
 800dc50:	4790      	blx	r2
 800dc52:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800dc56:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800dc58:	45d1      	cmp	r9, sl
 800dc5a:	d13f      	bne.n	800dcdc <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800dc5c:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800dc60:	9b01      	ldr	r3, [sp, #4]
 800dc62:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800dc66:	bf17      	itett	ne
 800dc68:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800dc6c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800dc70:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800dc74:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800dc76:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800dc78:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800dc7c:	2b03      	cmp	r3, #3
 800dc7e:	d906      	bls.n	800dc8e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800dc80:	682a      	ldr	r2, [r5, #0]
 800dc82:	211f      	movs	r1, #31
 800dc84:	4628      	mov	r0, r5
 800dc86:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dc8a:	6812      	ldr	r2, [r2, #0]
 800dc8c:	4790      	blx	r2
    if (*htblptr == NULL)
 800dc8e:	f8d8 2000 	ldr.w	r2, [r8]
 800dc92:	b922      	cbnz	r2, 800dc9e <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7fb fb8b 	bl	80093b0 <jpeg_alloc_huff_table>
 800dc9a:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800dc9e:	2200      	movs	r2, #0
 800dca0:	46de      	mov	lr, fp
 800dca2:	f10d 0a1c 	add.w	sl, sp, #28
 800dca6:	f88b 2000 	strb.w	r2, [fp]
 800dcaa:	f8d8 2000 	ldr.w	r2, [r8]
 800dcae:	46f4      	mov	ip, lr
 800dcb0:	3208      	adds	r2, #8
 800dcb2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800dcb6:	45d4      	cmp	ip, sl
 800dcb8:	f842 0c08 	str.w	r0, [r2, #-8]
 800dcbc:	f842 1c04 	str.w	r1, [r2, #-4]
 800dcc0:	46e6      	mov	lr, ip
 800dcc2:	d1f4      	bne.n	800dcae <get_dht+0x1c2>
 800dcc4:	f89c 1000 	ldrb.w	r1, [ip]
 800dcc8:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800dcca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcce:	f8d8 0000 	ldr.w	r0, [r8]
 800dcd2:	a908      	add	r1, sp, #32
 800dcd4:	3011      	adds	r0, #17
 800dcd6:	f01b faab 	bl	8029230 <memcpy>
 800dcda:	e71e      	b.n	800db1a <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800dcdc:	b946      	cbnz	r6, 800dcf0 <get_dht+0x204>
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	4628      	mov	r0, r5
 800dce2:	4790      	blx	r2
 800dce4:	2800      	cmp	r0, #0
 800dce6:	f43f af2b 	beq.w	800db40 <get_dht+0x54>
 800dcea:	a908      	add	r1, sp, #32
 800dcec:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dcf0:	f814 2b01 	ldrb.w	r2, [r4], #1
 800dcf4:	3e01      	subs	r6, #1
 800dcf6:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800dcfa:	f109 0901 	add.w	r9, r9, #1
 800dcfe:	e7ab      	b.n	800dc58 <get_dht+0x16c>

0800dd00 <read_markers>:
{
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	4604      	mov	r4, r0
 800dd06:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800dd08:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800dd0c:	bb2b      	cbnz	r3, 800dd5a <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800dd0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d17c      	bne.n	800de12 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800dd18:	69a7      	ldr	r7, [r4, #24]
 800dd1a:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d06a      	beq.n	800ddf6 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800dd20:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dd22:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dd24:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dd28:	d06c      	beq.n	800de04 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800dd2a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800dd2c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dd30:	f103 36ff 	add.w	r6, r3, #4294967295
 800dd34:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800dd38:	d102      	bne.n	800dd40 <read_markers+0x40>
 800dd3a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800dd3e:	d008      	beq.n	800dd52 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	2237      	movs	r2, #55	; 0x37
 800dd44:	4620      	mov	r0, r4
 800dd46:	f8c3 901c 	str.w	r9, [r3, #28]
 800dd4a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800dd52:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800dd56:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800dd5a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	f000 83c3 	beq.w	800e4ea <read_markers+0x7ea>
 800dd64:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800dd68:	2a3e      	cmp	r2, #62	; 0x3e
 800dd6a:	f200 83cb 	bhi.w	800e504 <read_markers+0x804>
 800dd6e:	2a3e      	cmp	r2, #62	; 0x3e
 800dd70:	f200 83c8 	bhi.w	800e504 <read_markers+0x804>
 800dd74:	e8df f012 	tbh	[pc, r2, lsl #1]
 800dd78:	009b0092 	.word	0x009b0092
 800dd7c:	00a7009e 	.word	0x00a7009e
 800dd80:	00a70239 	.word	0x00a70239
 800dd84:	00a700a7 	.word	0x00a700a7
 800dd88:	00a200a7 	.word	0x00a200a7
 800dd8c:	00a700a4 	.word	0x00a700a4
 800dd90:	00a701bf 	.word	0x00a701bf
 800dd94:	00a700a7 	.word	0x00a700a7
 800dd98:	03b903b9 	.word	0x03b903b9
 800dd9c:	03b903b9 	.word	0x03b903b9
 800dda0:	03b903b9 	.word	0x03b903b9
 800dda4:	03b903b9 	.word	0x03b903b9
 800dda8:	01b30054 	.word	0x01b30054
 800ddac:	023d00af 	.word	0x023d00af
 800ddb0:	035b03c2 	.word	0x035b03c2
 800ddb4:	03c603c6 	.word	0x03c603c6
 800ddb8:	03ad03ad 	.word	0x03ad03ad
 800ddbc:	03ad03ad 	.word	0x03ad03ad
 800ddc0:	03ad03ad 	.word	0x03ad03ad
 800ddc4:	03ad03ad 	.word	0x03ad03ad
 800ddc8:	03ad03ad 	.word	0x03ad03ad
 800ddcc:	03ad03ad 	.word	0x03ad03ad
 800ddd0:	03ad03ad 	.word	0x03ad03ad
 800ddd4:	03ad03ad 	.word	0x03ad03ad
 800ddd8:	03c603c6 	.word	0x03c603c6
 800dddc:	03c603c6 	.word	0x03c603c6
 800dde0:	03c603c6 	.word	0x03c603c6
 800dde4:	03c603c6 	.word	0x03c603c6
 800dde8:	03c603c6 	.word	0x03c603c6
 800ddec:	03c603c6 	.word	0x03c603c6
 800ddf0:	03c603c6 	.word	0x03c603c6
 800ddf4:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	4798      	blx	r3
 800ddfc:	b170      	cbz	r0, 800de1c <read_markers+0x11c>
 800ddfe:	e9d7 5300 	ldrd	r5, r3, [r7]
 800de02:	e78e      	b.n	800dd22 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4620      	mov	r0, r4
 800de08:	4798      	blx	r3
 800de0a:	b138      	cbz	r0, 800de1c <read_markers+0x11c>
 800de0c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800de10:	e78c      	b.n	800dd2c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800de12:	4620      	mov	r0, r4
 800de14:	f7ff fde6 	bl	800d9e4 <next_marker>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d19e      	bne.n	800dd5a <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800de1c:	2000      	movs	r0, #0
 800de1e:	e0e9      	b.n	800dff4 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800de20:	6823      	ldr	r3, [r4, #0]
 800de22:	2268      	movs	r2, #104	; 0x68
 800de24:	2101      	movs	r1, #1
 800de26:	4620      	mov	r0, r4
 800de28:	615a      	str	r2, [r3, #20]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800de2e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	b12b      	cbz	r3, 800de42 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	223f      	movs	r2, #63	; 0x3f
 800de3a:	4620      	mov	r0, r4
 800de3c:	615a      	str	r2, [r3, #20]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800de42:	2210      	movs	r2, #16
 800de44:	2100      	movs	r1, #0
 800de46:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800de4a:	f01b f9ff 	bl	802924c <memset>
    cinfo->arith_dc_U[i] = 1;
 800de4e:	2210      	movs	r2, #16
 800de50:	2101      	movs	r1, #1
 800de52:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800de56:	f01b f9f9 	bl	802924c <memset>
    cinfo->arith_ac_K[i] = 5;
 800de5a:	2210      	movs	r2, #16
 800de5c:	2105      	movs	r1, #5
 800de5e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800de62:	f01b f9f3 	bl	802924c <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800de66:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800de6a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800de6c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800de70:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800de74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800de78:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800de7c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800de80:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800de84:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800de88:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800de8c:	2201      	movs	r2, #1
 800de8e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800de92:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800de94:	2300      	movs	r3, #0
 800de96:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800de9a:	e735      	b.n	800dd08 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800de9c:	2300      	movs	r3, #0
 800de9e:	2101      	movs	r1, #1
 800dea0:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff faec 	bl	800d480 <get_sof>
      if (! skip_variable(cinfo))
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d1f3      	bne.n	800de94 <read_markers+0x194>
 800deac:	e7b6      	b.n	800de1c <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800deae:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800deb0:	2200      	movs	r2, #0
 800deb2:	e001      	b.n	800deb8 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800deb4:	2300      	movs	r3, #0
 800deb6:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800deb8:	2100      	movs	r1, #0
 800deba:	e7f2      	b.n	800dea2 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800debc:	2301      	movs	r3, #1
 800debe:	e7f7      	b.n	800deb0 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800dec0:	2301      	movs	r3, #1
 800dec2:	461a      	mov	r2, r3
 800dec4:	e7f8      	b.n	800deb8 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800dec6:	6822      	ldr	r2, [r4, #0]
 800dec8:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800deca:	4620      	mov	r0, r4
 800decc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ded0:	6813      	ldr	r3, [r2, #0]
 800ded2:	4798      	blx	r3
      break;
 800ded4:	e7de      	b.n	800de94 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800ded6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800deda:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800dedc:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800dede:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800dee2:	b92b      	cbnz	r3, 800def0 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	2240      	movs	r2, #64	; 0x40
 800dee8:	4620      	mov	r0, r4
 800deea:	615a      	str	r2, [r3, #20]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800def0:	b936      	cbnz	r6, 800df00 <read_markers+0x200>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	4620      	mov	r0, r4
 800def6:	4798      	blx	r3
 800def8:	2800      	cmp	r0, #0
 800defa:	d08f      	beq.n	800de1c <read_markers+0x11c>
 800defc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800df00:	f895 8000 	ldrb.w	r8, [r5]
 800df04:	3e01      	subs	r6, #1
 800df06:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800df0a:	d076      	beq.n	800dffa <read_markers+0x2fa>
 800df0c:	3501      	adds	r5, #1
 800df0e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800df10:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df12:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800df14:	d07a      	beq.n	800e00c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df16:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800df18:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800df1c:	2269      	movs	r2, #105	; 0x69
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	2101      	movs	r1, #1
 800df22:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800df24:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800df26:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800df2e:	f109 0303 	add.w	r3, r9, #3
 800df32:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800df36:	d108      	bne.n	800df4a <read_markers+0x24a>
 800df38:	f1b9 0f04 	cmp.w	r9, #4
 800df3c:	dc05      	bgt.n	800df4a <read_markers+0x24a>
 800df3e:	f1b9 0f00 	cmp.w	r9, #0
 800df42:	d108      	bne.n	800df56 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800df44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800df48:	b92b      	cbnz	r3, 800df56 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	220c      	movs	r2, #12
 800df4e:	4620      	mov	r0, r4
 800df50:	615a      	str	r2, [r3, #20]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800df56:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800df5a:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800df5e:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800df62:	9301      	str	r3, [sp, #4]
 800df64:	45d1      	cmp	r9, sl
 800df66:	dc5a      	bgt.n	800e01e <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800df68:	b93e      	cbnz	r6, 800df7a <read_markers+0x27a>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	4620      	mov	r0, r4
 800df6e:	4798      	blx	r3
 800df70:	2800      	cmp	r0, #0
 800df72:	f43f af53 	beq.w	800de1c <read_markers+0x11c>
 800df76:	e9d7 5600 	ldrd	r5, r6, [r7]
 800df7a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800df7c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800df7e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800df82:	f000 809a 	beq.w	800e0ba <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800df86:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800df88:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800df8a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800df8c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800df90:	f000 809c 	beq.w	800e0cc <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800df94:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800df96:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800df9a:	2101      	movs	r1, #1
 800df9c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800df9e:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800dfa0:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800dfa2:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800dfa6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800dfaa:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800dfae:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	619a      	str	r2, [r3, #24]
 800dfb6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800dfba:	61da      	str	r2, [r3, #28]
 800dfbc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800dfc0:	621a      	str	r2, [r3, #32]
 800dfc2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800dfc6:	625a      	str	r2, [r3, #36]	; 0x24
 800dfc8:	226b      	movs	r2, #107	; 0x6b
 800dfca:	615a      	str	r2, [r3, #20]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800dfd0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800dfd8:	f1b9 0f00 	cmp.w	r9, #0
 800dfdc:	d004      	beq.n	800dfe8 <read_markers+0x2e8>
 800dfde:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800dfe8:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800dfea:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800dfec:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800dff0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800dff4:	b005      	add	sp, #20
 800dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	4620      	mov	r0, r4
 800dffe:	4798      	blx	r3
 800e000:	2800      	cmp	r0, #0
 800e002:	f43f af0b 	beq.w	800de1c <read_markers+0x11c>
 800e006:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e00a:	e780      	b.n	800df0e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	4620      	mov	r0, r4
 800e010:	4798      	blx	r3
 800e012:	2800      	cmp	r0, #0
 800e014:	f43f af02 	beq.w	800de1c <read_markers+0x11c>
 800e018:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e01c:	e77c      	b.n	800df18 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e01e:	b93e      	cbnz	r6, 800e030 <read_markers+0x330>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4620      	mov	r0, r4
 800e024:	4798      	blx	r3
 800e026:	2800      	cmp	r0, #0
 800e028:	f43f aef8 	beq.w	800de1c <read_markers+0x11c>
 800e02c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e030:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e032:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e036:	d02f      	beq.n	800e098 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e038:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e03a:	3e01      	subs	r6, #1
 800e03c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e040:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e044:	2000      	movs	r0, #0
 800e046:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e048:	4290      	cmp	r0, r2
 800e04a:	db2e      	blt.n	800e0aa <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	4620      	mov	r0, r4
 800e050:	9302      	str	r3, [sp, #8]
 800e052:	2304      	movs	r3, #4
 800e054:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e058:	6809      	ldr	r1, [r1, #0]
 800e05a:	4788      	blx	r1
 800e05c:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e05e:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e060:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e062:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e066:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e068:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e06c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e070:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e074:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e076:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e07a:	f8c1 b018 	str.w	fp, [r1, #24]
 800e07e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e082:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e084:	61cb      	str	r3, [r1, #28]
 800e086:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e08a:	620b      	str	r3, [r1, #32]
 800e08c:	236a      	movs	r3, #106	; 0x6a
 800e08e:	614b      	str	r3, [r1, #20]
 800e090:	684b      	ldr	r3, [r1, #4]
 800e092:	2101      	movs	r1, #1
 800e094:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e096:	e765      	b.n	800df64 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4620      	mov	r0, r4
 800e09c:	4798      	blx	r3
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f43f aebc 	beq.w	800de1c <read_markers+0x11c>
 800e0a4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e0a8:	e7c7      	b.n	800e03a <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e0aa:	f8d8 1000 	ldr.w	r1, [r8]
 800e0ae:	458b      	cmp	fp, r1
 800e0b0:	d0d5      	beq.n	800e05e <read_markers+0x35e>
	 ci++, compptr++) {
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e0b8:	e7c6      	b.n	800e048 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4798      	blx	r3
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f43f aeab 	beq.w	800de1c <read_markers+0x11c>
 800e0c6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e0ca:	e75d      	b.n	800df88 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4798      	blx	r3
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	f43f aea2 	beq.w	800de1c <read_markers+0x11c>
 800e0d8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e0dc:	e75b      	b.n	800df96 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	2257      	movs	r2, #87	; 0x57
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	615a      	str	r2, [r3, #20]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e0ec:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e0ee:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e0f0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e0f4:	e77e      	b.n	800dff4 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e0f6:	69a7      	ldr	r7, [r4, #24]
 800e0f8:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0fa:	b1e6      	cbz	r6, 800e136 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800e0fc:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0fe:	f895 9000 	ldrb.w	r9, [r5]
 800e102:	3e01      	subs	r6, #1
 800e104:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e108:	d01e      	beq.n	800e148 <read_markers+0x448>
 800e10a:	3501      	adds	r5, #1
 800e10c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e110:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e112:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e116:	4499      	add	r9, r3
  length -= 2;
 800e118:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e11c:	f1b9 0f00 	cmp.w	r9, #0
 800e120:	dc1b      	bgt.n	800e15a <read_markers+0x45a>
  if (length != 0)
 800e122:	d005      	beq.n	800e130 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	220c      	movs	r2, #12
 800e128:	4620      	mov	r0, r4
 800e12a:	615a      	str	r2, [r3, #20]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e130:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e132:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e134:	e6ae      	b.n	800de94 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	4620      	mov	r0, r4
 800e13a:	4798      	blx	r3
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f43f ae6d 	beq.w	800de1c <read_markers+0x11c>
 800e142:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e146:	e7da      	b.n	800e0fe <read_markers+0x3fe>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	4620      	mov	r0, r4
 800e14c:	4798      	blx	r3
 800e14e:	2800      	cmp	r0, #0
 800e150:	f43f ae64 	beq.w	800de1c <read_markers+0x11c>
 800e154:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e158:	e7d8      	b.n	800e10c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e15a:	b93e      	cbnz	r6, 800e16c <read_markers+0x46c>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4620      	mov	r0, r4
 800e160:	4798      	blx	r3
 800e162:	2800      	cmp	r0, #0
 800e164:	f43f ae5a 	beq.w	800de1c <read_markers+0x11c>
 800e168:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e16c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e16e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e172:	d01f      	beq.n	800e1b4 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e174:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e176:	6822      	ldr	r2, [r4, #0]
 800e178:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e17a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e17e:	2101      	movs	r1, #1
 800e180:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e182:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e184:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e188:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e18c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e190:	6852      	ldr	r2, [r2, #4]
 800e192:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e194:	f1b8 0f1f 	cmp.w	r8, #31
 800e198:	d905      	bls.n	800e1a6 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e19a:	6822      	ldr	r2, [r4, #0]
 800e19c:	4620      	mov	r0, r4
 800e19e:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e1a2:	6812      	ldr	r2, [r2, #0]
 800e1a4:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e1a6:	f1b8 0f0f 	cmp.w	r8, #15
 800e1aa:	44a0      	add	r8, r4
 800e1ac:	dd0b      	ble.n	800e1c6 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e1ae:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e1b2:	e7b3      	b.n	800e11c <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	4798      	blx	r3
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f43f ae2e 	beq.w	800de1c <read_markers+0x11c>
 800e1c0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e1c4:	e7d7      	b.n	800e176 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e1c6:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e1ca:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e1ce:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e1d0:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e1d4:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e1d8:	d9a0      	bls.n	800e11c <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	211e      	movs	r1, #30
 800e1de:	4620      	mov	r0, r4
 800e1e0:	6813      	ldr	r3, [r2, #0]
 800e1e2:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e1e6:	4798      	blx	r3
 800e1e8:	e798      	b.n	800e11c <read_markers+0x41c>
      if (! get_dht(cinfo))
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f7ff fc7e 	bl	800daec <get_dht>
 800e1f0:	e65a      	b.n	800dea8 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800e1f2:	69a6      	ldr	r6, [r4, #24]
 800e1f4:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e1f6:	b1db      	cbz	r3, 800e230 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800e1f8:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e1fa:	f895 8000 	ldrb.w	r8, [r5]
 800e1fe:	3b01      	subs	r3, #1
 800e200:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e204:	d01d      	beq.n	800e242 <read_markers+0x542>
 800e206:	3501      	adds	r5, #1
 800e208:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e20c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e210:	44b8      	add	r8, r7
  length -= 2;
 800e212:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e216:	f1b8 0f00 	cmp.w	r8, #0
 800e21a:	dc1b      	bgt.n	800e254 <read_markers+0x554>
  if (length != 0)
 800e21c:	d005      	beq.n	800e22a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e21e:	6822      	ldr	r2, [r4, #0]
 800e220:	210c      	movs	r1, #12
 800e222:	4620      	mov	r0, r4
 800e224:	6151      	str	r1, [r2, #20]
 800e226:	6812      	ldr	r2, [r2, #0]
 800e228:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e22a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e22e:	e631      	b.n	800de94 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e230:	68f3      	ldr	r3, [r6, #12]
 800e232:	4620      	mov	r0, r4
 800e234:	4798      	blx	r3
 800e236:	2800      	cmp	r0, #0
 800e238:	f43f adf0 	beq.w	800de1c <read_markers+0x11c>
 800e23c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e240:	e7db      	b.n	800e1fa <read_markers+0x4fa>
 800e242:	68f3      	ldr	r3, [r6, #12]
 800e244:	4620      	mov	r0, r4
 800e246:	4798      	blx	r3
 800e248:	2800      	cmp	r0, #0
 800e24a:	f43f ade7 	beq.w	800de1c <read_markers+0x11c>
 800e24e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e252:	e7d9      	b.n	800e208 <read_markers+0x508>
    length--;
 800e254:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e258:	f1ba 0f00 	cmp.w	sl, #0
 800e25c:	d107      	bne.n	800e26e <read_markers+0x56e>
 800e25e:	68f3      	ldr	r3, [r6, #12]
 800e260:	4620      	mov	r0, r4
 800e262:	4798      	blx	r3
 800e264:	2800      	cmp	r0, #0
 800e266:	f43f add9 	beq.w	800de1c <read_markers+0x11c>
 800e26a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e26e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e272:	2153      	movs	r1, #83	; 0x53
 800e274:	6822      	ldr	r2, [r4, #0]
 800e276:	4620      	mov	r0, r4
    prec = n >> 4;
 800e278:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e27c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e280:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e284:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e286:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e288:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e28c:	6852      	ldr	r2, [r2, #4]
 800e28e:	2101      	movs	r1, #1
 800e290:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e292:	f019 0f0c 	tst.w	r9, #12
 800e296:	d006      	beq.n	800e2a6 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	2120      	movs	r1, #32
 800e29c:	4620      	mov	r0, r4
 800e29e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e2a2:	6812      	ldr	r2, [r2, #0]
 800e2a4:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e2a6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e2aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e2ae:	b922      	cbnz	r2, 800e2ba <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f7fb f873 	bl	800939c <jpeg_alloc_quant_table>
 800e2b6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e2ba:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e2bc:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d057      	beq.n	800e374 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800e2c4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e2c8:	dc6c      	bgt.n	800e3a4 <read_markers+0x6a4>
 800e2ca:	f1ab 0202 	sub.w	r2, fp, #2
 800e2ce:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e2d2:	2001      	movs	r0, #1
 800e2d4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e2d8:	4291      	cmp	r1, r2
 800e2da:	d1fb      	bne.n	800e2d4 <read_markers+0x5d4>
	count = length >> 1;
 800e2dc:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e2e0:	f1b9 0f19 	cmp.w	r9, #25
 800e2e4:	d062      	beq.n	800e3ac <read_markers+0x6ac>
 800e2e6:	dc53      	bgt.n	800e390 <read_markers+0x690>
 800e2e8:	f1b9 0f09 	cmp.w	r9, #9
 800e2ec:	d060      	beq.n	800e3b0 <read_markers+0x6b0>
 800e2ee:	f1b9 0f10 	cmp.w	r9, #16
 800e2f2:	d05f      	beq.n	800e3b4 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800e2f4:	4f85      	ldr	r7, [pc, #532]	; (800e50c <read_markers+0x80c>)
 800e2f6:	4a86      	ldr	r2, [pc, #536]	; (800e510 <read_markers+0x810>)
 800e2f8:	f1b9 0f04 	cmp.w	r9, #4
 800e2fc:	bf18      	it	ne
 800e2fe:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e300:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e304:	9302      	str	r3, [sp, #8]
 800e306:	9b02      	ldr	r3, [sp, #8]
 800e308:	42bb      	cmp	r3, r7
 800e30a:	d157      	bne.n	800e3bc <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e310:	2a01      	cmp	r2, #1
 800e312:	dd26      	ble.n	800e362 <read_markers+0x662>
 800e314:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e318:	275f      	movs	r7, #95	; 0x5f
 800e31a:	f8bb 1000 	ldrh.w	r1, [fp]
 800e31e:	4620      	mov	r0, r4
 800e320:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e322:	f10b 0b10 	add.w	fp, fp, #16
 800e326:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e328:	6191      	str	r1, [r2, #24]
 800e32a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e32e:	61d1      	str	r1, [r2, #28]
 800e330:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e334:	6211      	str	r1, [r2, #32]
 800e336:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e33a:	6251      	str	r1, [r2, #36]	; 0x24
 800e33c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e340:	6291      	str	r1, [r2, #40]	; 0x28
 800e342:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e346:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e348:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e34c:	6311      	str	r1, [r2, #48]	; 0x30
 800e34e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e352:	6157      	str	r7, [r2, #20]
 800e354:	6351      	str	r1, [r2, #52]	; 0x34
 800e356:	2102      	movs	r1, #2
 800e358:	6852      	ldr	r2, [r2, #4]
 800e35a:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e35c:	9b02      	ldr	r3, [sp, #8]
 800e35e:	459b      	cmp	fp, r3
 800e360:	d1db      	bne.n	800e31a <read_markers+0x61a>
    if (prec) length -= count;
 800e362:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e364:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f43f af54 	beq.w	800e216 <read_markers+0x516>
 800e36e:	eba8 0809 	sub.w	r8, r8, r9
 800e372:	e750      	b.n	800e216 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800e374:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e378:	dc14      	bgt.n	800e3a4 <read_markers+0x6a4>
 800e37a:	f1ab 0202 	sub.w	r2, fp, #2
 800e37e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e382:	2001      	movs	r0, #1
 800e384:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e388:	4291      	cmp	r1, r2
 800e38a:	d1fb      	bne.n	800e384 <read_markers+0x684>
 800e38c:	46c1      	mov	r9, r8
 800e38e:	e7a7      	b.n	800e2e0 <read_markers+0x5e0>
    switch (count) {
 800e390:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e394:	d010      	beq.n	800e3b8 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800e396:	4f5e      	ldr	r7, [pc, #376]	; (800e510 <read_markers+0x810>)
 800e398:	4b5e      	ldr	r3, [pc, #376]	; (800e514 <read_markers+0x814>)
 800e39a:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e39e:	bf08      	it	eq
 800e3a0:	461f      	moveq	r7, r3
 800e3a2:	e7ad      	b.n	800e300 <read_markers+0x600>
	count = DCTSIZE2;
 800e3a4:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e3a8:	4f59      	ldr	r7, [pc, #356]	; (800e510 <read_markers+0x810>)
 800e3aa:	e7a9      	b.n	800e300 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e3ac:	4f5a      	ldr	r7, [pc, #360]	; (800e518 <read_markers+0x818>)
 800e3ae:	e7a7      	b.n	800e300 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e3b0:	4f5a      	ldr	r7, [pc, #360]	; (800e51c <read_markers+0x81c>)
 800e3b2:	e7a5      	b.n	800e300 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e3b4:	4f5a      	ldr	r7, [pc, #360]	; (800e520 <read_markers+0x820>)
 800e3b6:	e7a3      	b.n	800e300 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e3b8:	4f5a      	ldr	r7, [pc, #360]	; (800e524 <read_markers+0x824>)
 800e3ba:	e7a1      	b.n	800e300 <read_markers+0x600>
      if (prec)
 800e3bc:	9b01      	ldr	r3, [sp, #4]
 800e3be:	b333      	cbz	r3, 800e40e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e3c0:	f1ba 0f00 	cmp.w	sl, #0
 800e3c4:	d107      	bne.n	800e3d6 <read_markers+0x6d6>
 800e3c6:	68f3      	ldr	r3, [r6, #12]
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	4798      	blx	r3
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	f43f ad25 	beq.w	800de1c <read_markers+0x11c>
 800e3d2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e3d6:	782a      	ldrb	r2, [r5, #0]
 800e3d8:	f1ba 0301 	subs.w	r3, sl, #1
 800e3dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e3e0:	d00a      	beq.n	800e3f8 <read_markers+0x6f8>
 800e3e2:	3501      	adds	r5, #1
 800e3e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e3e8:	f103 3aff 	add.w	sl, r3, #4294967295
 800e3ec:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e3ee:	f857 1b04 	ldr.w	r1, [r7], #4
 800e3f2:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e3f6:	e786      	b.n	800e306 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e3f8:	68f3      	ldr	r3, [r6, #12]
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	9203      	str	r2, [sp, #12]
 800e3fe:	4798      	blx	r3
 800e400:	2800      	cmp	r0, #0
 800e402:	f43f ad0b 	beq.w	800de1c <read_markers+0x11c>
 800e406:	9a03      	ldr	r2, [sp, #12]
 800e408:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e40c:	e7ea      	b.n	800e3e4 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e40e:	f1ba 0f00 	cmp.w	sl, #0
 800e412:	d107      	bne.n	800e424 <read_markers+0x724>
 800e414:	68f3      	ldr	r3, [r6, #12]
 800e416:	4620      	mov	r0, r4
 800e418:	4798      	blx	r3
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f43f acfe 	beq.w	800de1c <read_markers+0x11c>
 800e420:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e424:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e428:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e42c:	e7df      	b.n	800e3ee <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800e42e:	69a7      	ldr	r7, [r4, #24]
 800e430:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e432:	b353      	cbz	r3, 800e48a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800e434:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e436:	782a      	ldrb	r2, [r5, #0]
 800e438:	3b01      	subs	r3, #1
 800e43a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800e43e:	d02d      	beq.n	800e49c <read_markers+0x79c>
 800e440:	3501      	adds	r5, #1
 800e442:	782a      	ldrb	r2, [r5, #0]
 800e444:	1e5e      	subs	r6, r3, #1
 800e446:	4442      	add	r2, r8
  if (length != 4)
 800e448:	2a04      	cmp	r2, #4
 800e44a:	d005      	beq.n	800e458 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	220c      	movs	r2, #12
 800e450:	4620      	mov	r0, r4
 800e452:	615a      	str	r2, [r3, #20]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e458:	b34e      	cbz	r6, 800e4ae <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e45a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e45c:	f895 8000 	ldrb.w	r8, [r5]
 800e460:	3e01      	subs	r6, #1
 800e462:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800e466:	d02b      	beq.n	800e4c0 <read_markers+0x7c0>
 800e468:	3501      	adds	r5, #1
 800e46a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e46e:	2254      	movs	r2, #84	; 0x54
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e474:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e476:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e478:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e47a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e482:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e486:	603d      	str	r5, [r7, #0]
 800e488:	e653      	b.n	800e132 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4620      	mov	r0, r4
 800e48e:	4798      	blx	r3
 800e490:	2800      	cmp	r0, #0
 800e492:	f43f acc3 	beq.w	800de1c <read_markers+0x11c>
 800e496:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e49a:	e7cc      	b.n	800e436 <read_markers+0x736>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4798      	blx	r3
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f43f acba 	beq.w	800de1c <read_markers+0x11c>
 800e4a8:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e4ac:	e7c9      	b.n	800e442 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	4798      	blx	r3
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f43f acb1 	beq.w	800de1c <read_markers+0x11c>
 800e4ba:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e4be:	e7cd      	b.n	800e45c <read_markers+0x75c>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	4798      	blx	r3
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f43f aca8 	beq.w	800de1c <read_markers+0x11c>
 800e4cc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e4d0:	e7cb      	b.n	800e46a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e4d2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e4d6:	3bd8      	subs	r3, #216	; 0xd8
 800e4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4dc:	4620      	mov	r0, r4
 800e4de:	4798      	blx	r3
 800e4e0:	e4e2      	b.n	800dea8 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800e4e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e4e6:	69db      	ldr	r3, [r3, #28]
 800e4e8:	e7f8      	b.n	800e4dc <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800e4ea:	6822      	ldr	r2, [r4, #0]
 800e4ec:	215e      	movs	r1, #94	; 0x5e
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e4f4:	6853      	ldr	r3, [r2, #4]
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4798      	blx	r3
      break;
 800e4fa:	e4cb      	b.n	800de94 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7ff fa36 	bl	800d96e <skip_variable>
 800e502:	e4d1      	b.n	800dea8 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	2146      	movs	r1, #70	; 0x46
 800e508:	e4df      	b.n	800deca <read_markers+0x1ca>
 800e50a:	bf00      	nop
 800e50c:	0802e3d8 	.word	0x0802e3d8
 800e510:	0802e298 	.word	0x0802e298
 800e514:	0802e680 	.word	0x0802e680
 800e518:	0802e50c 	.word	0x0802e50c
 800e51c:	0802e428 	.word	0x0802e428
 800e520:	0802e48c 	.word	0x0802e48c
 800e524:	0802e5b0 	.word	0x0802e5b0

0800e528 <jpeg_resync_to_restart>:
{
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e52e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800e530:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e534:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e536:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e53a:	61d9      	str	r1, [r3, #28]
 800e53c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e540:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e542:	f008 0807 	and.w	r8, r8, #7
 800e546:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e54a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800e552:	2dbf      	cmp	r5, #191	; 0xbf
 800e554:	dd2e      	ble.n	800e5b4 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800e556:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800e55a:	2b07      	cmp	r3, #7
 800e55c:	d828      	bhi.n	800e5b0 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e55e:	4545      	cmp	r5, r8
 800e560:	d026      	beq.n	800e5b0 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800e562:	1cbb      	adds	r3, r7, #2
 800e564:	f003 0307 	and.w	r3, r3, #7
 800e568:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e56a:	429d      	cmp	r5, r3
 800e56c:	d020      	beq.n	800e5b0 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800e56e:	1e7b      	subs	r3, r7, #1
 800e570:	f003 0307 	and.w	r3, r3, #7
 800e574:	33d0      	adds	r3, #208	; 0xd0
 800e576:	429d      	cmp	r5, r3
 800e578:	d01c      	beq.n	800e5b4 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800e57a:	1ebc      	subs	r4, r7, #2
 800e57c:	f004 0407 	and.w	r4, r4, #7
 800e580:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800e582:	42a5      	cmp	r5, r4
 800e584:	bf14      	ite	ne
 800e586:	2401      	movne	r4, #1
 800e588:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800e58a:	6833      	ldr	r3, [r6, #0]
 800e58c:	2263      	movs	r2, #99	; 0x63
 800e58e:	2104      	movs	r1, #4
 800e590:	4630      	mov	r0, r6
 800e592:	61dc      	str	r4, [r3, #28]
 800e594:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	4798      	blx	r3
    switch (action) {
 800e59c:	2c02      	cmp	r4, #2
 800e59e:	d00b      	beq.n	800e5b8 <jpeg_resync_to_restart+0x90>
 800e5a0:	2c03      	cmp	r4, #3
 800e5a2:	d002      	beq.n	800e5aa <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800e5aa:	2001      	movs	r0, #1
}
 800e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800e5b0:	2403      	movs	r4, #3
 800e5b2:	e7ea      	b.n	800e58a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800e5b4:	2402      	movs	r4, #2
 800e5b6:	e7e8      	b.n	800e58a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7ff fa13 	bl	800d9e4 <next_marker>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d0f4      	beq.n	800e5ac <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800e5c2:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800e5c6:	e7c4      	b.n	800e552 <jpeg_resync_to_restart+0x2a>

0800e5c8 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800e5c8:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e5ca:	6843      	ldr	r3, [r0, #4]
 800e5cc:	22ac      	movs	r2, #172	; 0xac
 800e5ce:	2100      	movs	r1, #0
{
 800e5d0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e5d6:	4b11      	ldr	r3, [pc, #68]	; (800e61c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800e5d8:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e5dc:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e5de:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800e5e0:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800e5e6:	4a0f      	ldr	r2, [pc, #60]	; (800e624 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800e5e8:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800e5ea:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800e5ec:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800e5ee:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800e5f4:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800e5f8:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800e5fc:	4299      	cmp	r1, r3
 800e5fe:	d1fb      	bne.n	800e5f8 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800e600:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e604:	2240      	movs	r2, #64	; 0x40
 800e606:	2100      	movs	r1, #0
 800e608:	f01a fe20 	bl	802924c <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800e60c:	4b07      	ldr	r3, [pc, #28]	; (800e62c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800e60e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800e610:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800e612:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800e614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800e618:	f7ff ba59 	b.w	800dace <reset_marker_reader>
 800e61c:	0800dacf 	.word	0x0800dacf
 800e620:	0800dd01 	.word	0x0800dd01
 800e624:	0800d96f 	.word	0x0800d96f
 800e628:	0800da71 	.word	0x0800da71
 800e62c:	0800d899 	.word	0x0800d899

0800e630 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800e630:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e632:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800e636:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800e638:	68ab      	ldr	r3, [r5, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d02a      	beq.n	800e694 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800e63e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e640:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800e644:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e64a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e64e:	2102      	movs	r1, #2
 800e650:	4620      	mov	r0, r4
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e656:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e65a:	2102      	movs	r1, #2
 800e65c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e65e:	4620      	mov	r0, r4
 800e660:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800e662:	68a2      	ldr	r2, [r4, #8]
 800e664:	b1aa      	cbz	r2, 800e692 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e666:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800e668:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e66a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800e66c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e66e:	bf14      	ite	ne
 800e670:	2102      	movne	r1, #2
 800e672:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800e674:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e676:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800e678:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e67a:	b151      	cbz	r1, 800e692 <prepare_for_output_pass+0x62>
 800e67c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800e680:	6949      	ldr	r1, [r1, #20]
 800e682:	b931      	cbnz	r1, 800e692 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800e684:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e686:	2900      	cmp	r1, #0
 800e688:	bf14      	ite	ne
 800e68a:	2102      	movne	r1, #2
 800e68c:	2101      	moveq	r1, #1
 800e68e:	440b      	add	r3, r1
 800e690:	6113      	str	r3, [r2, #16]
    }
  }
}
 800e692:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800e694:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e696:	b16b      	cbz	r3, 800e6b4 <prepare_for_output_pass+0x84>
 800e698:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e69c:	b953      	cbnz	r3, 800e6b4 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800e69e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d037      	beq.n	800e714 <prepare_for_output_pass+0xe4>
 800e6a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d034      	beq.n	800e714 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800e6aa:	69ab      	ldr	r3, [r5, #24]
 800e6ac:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800e6b4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800e6be:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800e6c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1c9      	bne.n	800e662 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800e6ce:	692b      	ldr	r3, [r5, #16]
 800e6d0:	b923      	cbnz	r3, 800e6dc <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800e6d2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800e6dc:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800e6e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e6e8:	b12b      	cbz	r3, 800e6f6 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800e6ea:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	68a9      	ldr	r1, [r5, #8]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800e6f6:	68aa      	ldr	r2, [r5, #8]
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	bf14      	ite	ne
 800e704:	2103      	movne	r1, #3
 800e706:	2100      	moveq	r1, #0
 800e708:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e70a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e70e:	2100      	movs	r1, #0
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	e7a4      	b.n	800e65e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800e714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e716:	b11b      	cbz	r3, 800e720 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800e718:	696b      	ldr	r3, [r5, #20]
 800e71a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800e71e:	e7c9      	b.n	800e6b4 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	222f      	movs	r2, #47	; 0x2f
 800e724:	4620      	mov	r0, r4
 800e726:	615a      	str	r2, [r3, #20]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4798      	blx	r3
 800e72c:	e7c2      	b.n	800e6b4 <prepare_for_output_pass+0x84>

0800e72e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800e72e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800e730:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e732:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800e736:	b11a      	cbz	r2, 800e740 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800e738:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	4798      	blx	r3
  master->pass_number++;
 800e740:	68e3      	ldr	r3, [r4, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60e3      	str	r3, [r4, #12]
}
 800e746:	bd10      	pop	{r4, pc}

0800e748 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e748:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800e74a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d143      	bne.n	800e7d8 <use_merged_upsample+0x90>
 800e750:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800e754:	2a00      	cmp	r2, #0
 800e756:	d141      	bne.n	800e7dc <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800e758:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d139      	bne.n	800e7d4 <use_merged_upsample+0x8c>
 800e760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e762:	2b03      	cmp	r3, #3
 800e764:	d136      	bne.n	800e7d4 <use_merged_upsample+0x8c>
 800e766:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d132      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800e76e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800e770:	2b03      	cmp	r3, #3
 800e772:	d12f      	bne.n	800e7d4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800e774:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e778:	6899      	ldr	r1, [r3, #8]
 800e77a:	2902      	cmp	r1, #2
 800e77c:	d12a      	bne.n	800e7d4 <use_merged_upsample+0x8c>
 800e77e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e780:	2901      	cmp	r1, #1
 800e782:	d127      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800e784:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e788:	2901      	cmp	r1, #1
 800e78a:	d123      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800e78c:	68d9      	ldr	r1, [r3, #12]
 800e78e:	2902      	cmp	r1, #2
 800e790:	dc20      	bgt.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800e792:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800e794:	2901      	cmp	r1, #1
 800e796:	d11d      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800e798:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e79c:	2901      	cmp	r1, #1
 800e79e:	d119      	bne.n	800e7d4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e7a0:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800e7a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e7a6:	42a1      	cmp	r1, r4
 800e7a8:	d114      	bne.n	800e7d4 <use_merged_upsample+0x8c>
 800e7aa:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e7ac:	42a1      	cmp	r1, r4
 800e7ae:	d111      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e7b0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800e7b4:	42a1      	cmp	r1, r4
 800e7b6:	d10d      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e7b8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e7bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e7be:	4281      	cmp	r1, r0
 800e7c0:	d108      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e7c2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e7c6:	4281      	cmp	r1, r0
 800e7c8:	d104      	bne.n	800e7d4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e7ca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e7ce:	1a53      	subs	r3, r2, r1
 800e7d0:	425a      	negs	r2, r3
 800e7d2:	415a      	adcs	r2, r3
}
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	bd10      	pop	{r4, pc}
    return FALSE;
 800e7d8:	2200      	movs	r2, #0
 800e7da:	e7fb      	b.n	800e7d4 <use_merged_upsample+0x8c>
 800e7dc:	461a      	mov	r2, r3
 800e7de:	e7f9      	b.n	800e7d4 <use_merged_upsample+0x8c>

0800e7e0 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800e7e0:	6942      	ldr	r2, [r0, #20]
 800e7e2:	2aca      	cmp	r2, #202	; 0xca
{
 800e7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e8:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800e7ea:	d005      	beq.n	800e7f8 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800e7ec:	6803      	ldr	r3, [r0, #0]
 800e7ee:	2115      	movs	r1, #21
 800e7f0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800e7f8:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e7fa:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800e7fc:	f7fe faf8 	bl	800cdf0 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e800:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800e804:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e808:	462b      	mov	r3, r5
 800e80a:	45b4      	cmp	ip, r6
 800e80c:	dd6b      	ble.n	800e8e6 <jpeg_calc_output_dimensions+0x106>
 800e80e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800e810:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e812:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800e816:	2a00      	cmp	r2, #0
 800e818:	bf14      	ite	ne
 800e81a:	2708      	movne	r7, #8
 800e81c:	2704      	moveq	r7, #4
 800e81e:	e00a      	b.n	800e836 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800e820:	689a      	ldr	r2, [r3, #8]
 800e822:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800e826:	434a      	muls	r2, r1
 800e828:	0052      	lsls	r2, r2, #1
 800e82a:	fb9e f9f2 	sdiv	r9, lr, r2
 800e82e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e832:	b922      	cbnz	r2, 800e83e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800e834:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e836:	fb01 f008 	mul.w	r0, r1, r8
 800e83a:	42b8      	cmp	r0, r7
 800e83c:	ddf0      	ble.n	800e820 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800e83e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800e840:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800e844:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800e848:	fb08 f109 	mul.w	r1, r8, r9
 800e84c:	42b9      	cmp	r1, r7
 800e84e:	dd0b      	ble.n	800e868 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e850:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800e854:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e856:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e85a:	dc14      	bgt.n	800e886 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800e85c:	0042      	lsls	r2, r0, #1
 800e85e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800e862:	bfc8      	it	gt
 800e864:	629a      	strgt	r2, [r3, #40]	; 0x28
 800e866:	e00f      	b.n	800e888 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800e868:	68da      	ldr	r2, [r3, #12]
 800e86a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800e86e:	fb02 f208 	mul.w	r2, r2, r8
 800e872:	0052      	lsls	r2, r2, #1
 800e874:	fb9e faf2 	sdiv	sl, lr, r2
 800e878:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e87c:	2a00      	cmp	r2, #0
 800e87e:	d1e7      	bne.n	800e850 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800e880:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800e884:	e7e0      	b.n	800e848 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800e886:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800e888:	3601      	adds	r6, #1
 800e88a:	3358      	adds	r3, #88	; 0x58
 800e88c:	e7bd      	b.n	800e80a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800e890:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e892:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800e894:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e896:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e89a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e89e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800e8a0:	69e3      	ldr	r3, [r4, #28]
 800e8a2:	4351      	muls	r1, r2
 800e8a4:	4358      	muls	r0, r3
 800e8a6:	f007 fe71 	bl	801658c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e8aa:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800e8ae:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e8b2:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e8b6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800e8ba:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e8be:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800e8c0:	6a23      	ldr	r3, [r4, #32]
 800e8c2:	4351      	muls	r1, r2
 800e8c4:	4358      	muls	r0, r3
 800e8c6:	f007 fe61 	bl	801658c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800e8ca:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e8ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e8d0:	42b2      	cmp	r2, r6
 800e8d2:	dcdc      	bgt.n	800e88e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800e8d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d806      	bhi.n	800e8ea <jpeg_calc_output_dimensions+0x10a>
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d809      	bhi.n	800e8f4 <jpeg_calc_output_dimensions+0x114>
 800e8e0:	d009      	beq.n	800e8f6 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800e8e2:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800e8e4:	e008      	b.n	800e8f8 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e8e6:	2600      	movs	r6, #0
 800e8e8:	e7f1      	b.n	800e8ce <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800e8ea:	3b04      	subs	r3, #4
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d8f8      	bhi.n	800e8e2 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	e000      	b.n	800e8f6 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800e8f4:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800e8f6:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e8f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e8fa:	b95b      	cbnz	r3, 800e914 <jpeg_calc_output_dimensions+0x134>
 800e8fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800e8fe:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e900:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800e902:	f7ff ff21 	bl	800e748 <use_merged_upsample>
 800e906:	b138      	cbz	r0, 800e918 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800e908:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800e90c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800e910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e914:	2301      	movs	r3, #1
 800e916:	e7f2      	b.n	800e8fe <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800e918:	2301      	movs	r3, #1
 800e91a:	e7f7      	b.n	800e90c <jpeg_calc_output_dimensions+0x12c>

0800e91c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e91e:	6843      	ldr	r3, [r0, #4]
 800e920:	221c      	movs	r2, #28
 800e922:	2101      	movs	r1, #1
{
 800e924:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e926:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800e928:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e92a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e92c:	4b6d      	ldr	r3, [pc, #436]	; (800eae4 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800e92e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e932:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e934:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800e936:	4b6c      	ldr	r3, [pc, #432]	; (800eae8 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800e938:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800e93a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7ff ff4f 	bl	800e7e0 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e942:	6863      	ldr	r3, [r4, #4]
 800e944:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800e948:	2101      	movs	r1, #1
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4620      	mov	r0, r4
 800e94e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800e950:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e954:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e956:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800e958:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e95c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e960:	f01a fc74 	bl	802924c <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e964:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800e968:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800e96a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e96e:	3101      	adds	r1, #1
 800e970:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e974:	d1f9      	bne.n	800e96a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800e976:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e97a:	21ff      	movs	r1, #255	; 0xff
 800e97c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800e980:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800e982:	f01a fc63 	bl	802924c <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800e986:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e98a:	2100      	movs	r1, #0
 800e98c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800e990:	f01a fc5c 	bl	802924c <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800e994:	2280      	movs	r2, #128	; 0x80
 800e996:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800e99a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800e99e:	f01a fc47 	bl	8029230 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e9a2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800e9a4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e9a6:	f7ff fecf 	bl	800e748 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e9aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800e9ac:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800e9ae:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e9b2:	b1b3      	cbz	r3, 800e9e2 <jinit_master_decompress+0xc6>
 800e9b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e9b6:	b1a2      	cbz	r2, 800e9e2 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800e9b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d166      	bne.n	800ea8c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800e9be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	f04f 0301 	mov.w	r3, #1
 800e9c6:	d068      	beq.n	800ea9a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800e9c8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800e9ca:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800e9cc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800e9d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f006 fef1 	bl	80157bc <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800e9da:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e9de:	616b      	str	r3, [r5, #20]
 800e9e0:	e062      	b.n	800eaa8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800e9e2:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800e9e6:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e5      	bne.n	800e9b8 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800e9ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9ee:	b94b      	cbnz	r3, 800ea04 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800e9f0:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e9f2:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d069      	beq.n	800eacc <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e9f8:	f000 fa1c 	bl	800ee34 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800e9fc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f000 fb98 	bl	800f134 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800ea04:	4620      	mov	r0, r4
 800ea06:	f7fc fda7 	bl	800b558 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800ea0a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800ea0e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d061      	beq.n	800ead8 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800ea14:	f7fb fc16 	bl	800a244 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ea18:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d15d      	bne.n	800eade <jinit_master_decompress+0x1c2>
 800ea22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea24:	3900      	subs	r1, #0
 800ea26:	bf18      	it	ne
 800ea28:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7fc f8fc 	bl	800ac28 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800ea30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ea32:	b911      	cbnz	r1, 800ea3a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800ea34:	4620      	mov	r0, r4
 800ea36:	f7fe fca3 	bl	800d380 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800ea3a:	6863      	ldr	r3, [r4, #4]
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800ea42:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ea46:	4620      	mov	r0, r4
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ea4c:	68a2      	ldr	r2, [r4, #8]
 800ea4e:	b1e2      	cbz	r2, 800ea8a <jinit_master_decompress+0x16e>
 800ea50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea52:	b9d3      	cbnz	r3, 800ea8a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800ea54:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	b1b3      	cbz	r3, 800ea8a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800ea5c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800ea60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800ea62:	b111      	cbz	r1, 800ea6a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800ea64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea68:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ea6a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800ea6e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ea70:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800ea72:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800ea74:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800ea78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ea7a:	4283      	cmp	r3, r0
 800ea7c:	bf14      	ite	ne
 800ea7e:	2303      	movne	r3, #3
 800ea80:	2302      	moveq	r3, #2
 800ea82:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800ea84:	68eb      	ldr	r3, [r5, #12]
 800ea86:	3301      	adds	r3, #1
 800ea88:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800ea8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	2230      	movs	r2, #48	; 0x30
 800ea90:	4620      	mov	r0, r4
 800ea92:	615a      	str	r2, [r3, #20]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4798      	blx	r3
 800ea98:	e791      	b.n	800e9be <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800ea9a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800ea9e:	b17a      	cbz	r2, 800eac0 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800eaa0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800eaa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d195      	bne.n	800e9d4 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800eaa8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800eaaa:	b913      	cbnz	r3, 800eab2 <jinit_master_decompress+0x196>
 800eaac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d09c      	beq.n	800e9ec <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800eab2:	4620      	mov	r0, r4
 800eab4:	f007 fcfe 	bl	80164b4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800eab8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800eabc:	61ab      	str	r3, [r5, #24]
 800eabe:	e795      	b.n	800e9ec <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800eac0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800eac2:	b10a      	cbz	r2, 800eac8 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800eac4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800eac6:	e7ec      	b.n	800eaa2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800eac8:	6663      	str	r3, [r4, #100]	; 0x64
 800eaca:	e783      	b.n	800e9d4 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800eacc:	f7fc fad2 	bl	800b074 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800ead0:	4620      	mov	r0, r4
 800ead2:	f000 fc4f 	bl	800f374 <jinit_upsampler>
 800ead6:	e791      	b.n	800e9fc <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800ead8:	f7fd fed6 	bl	800c888 <jinit_huff_decoder>
 800eadc:	e79c      	b.n	800ea18 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800eade:	2101      	movs	r1, #1
 800eae0:	e7a3      	b.n	800ea2a <jinit_master_decompress+0x10e>
 800eae2:	bf00      	nop
 800eae4:	0800e631 	.word	0x0800e631
 800eae8:	0800e72f 	.word	0x0800e72f

0800eaec <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eaec:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800eaf4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800eaf8:	4770      	bx	lr

0800eafa <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800eafa:	b570      	push	{r4, r5, r6, lr}
 800eafc:	9d05      	ldr	r5, [sp, #20]
 800eafe:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800eb00:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800eb04:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800eb06:	68de      	ldr	r6, [r3, #12]
 800eb08:	9b04      	ldr	r3, [sp, #16]
 800eb0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eb0e:	6822      	ldr	r2, [r4, #0]
 800eb10:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800eb12:	682b      	ldr	r3, [r5, #0]
 800eb14:	3301      	adds	r3, #1
 800eb16:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	6023      	str	r3, [r4, #0]
}
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}

0800eb20 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800eb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eb24:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800eb28:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800eb2a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800eb2e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800eb30:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800eb34:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800eb36:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800eb38:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800eb3a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800eb3e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800eb40:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800eb42:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800eb44:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800eb46:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800eb4a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800eb4c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800eb4e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800eb50:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800eb54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eb58:	9903      	ldr	r1, [sp, #12]
 800eb5a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800eb5c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800eb5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800eb62:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800eb66:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800eb6a:	9205      	str	r2, [sp, #20]
 800eb6c:	9a05      	ldr	r2, [sp, #20]
 800eb6e:	3306      	adds	r3, #6
 800eb70:	3102      	adds	r1, #2
 800eb72:	4295      	cmp	r5, r2
 800eb74:	d128      	bne.n	800ebc8 <h2v1_merged_upsample+0xa8>
 800eb76:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800eb78:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800eb7a:	fb03 f30e 	mul.w	r3, r3, lr
 800eb7e:	07d2      	lsls	r2, r2, #31
 800eb80:	eb0c 0103 	add.w	r1, ip, r3
 800eb84:	d51d      	bpl.n	800ebc2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800eb86:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eb88:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800eb8a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eb8e:	782a      	ldrb	r2, [r5, #0]
 800eb90:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800eb94:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800eb98:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eb9a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800eb9c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800eb9e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800eba2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800eba6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800ebaa:	9a03      	ldr	r2, [sp, #12]
 800ebac:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ebb0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ebb2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800ebb4:	5dbe      	ldrb	r6, [r7, r6]
 800ebb6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ebb8:	5c80      	ldrb	r0, [r0, r2]
 800ebba:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ebbc:	5ca2      	ldrb	r2, [r4, r2]
 800ebbe:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800ebc2:	b007      	add	sp, #28
 800ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800ebc8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800ebcc:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ebce:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800ebd2:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ebd6:	9a02      	ldr	r2, [sp, #8]
 800ebd8:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800ebdc:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800ebe0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ebe4:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800ebe6:	9f01      	ldr	r7, [sp, #4]
 800ebe8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ebec:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ebf0:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800ebf4:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ebf8:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800ebfa:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ebfe:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800ec02:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ec06:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800ec0a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800ec0e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ec12:	f817 700a 	ldrb.w	r7, [r7, sl]
 800ec16:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ec1a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800ec1e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ec22:	f816 200a 	ldrb.w	r2, [r6, sl]
 800ec26:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ec2a:	e79f      	b.n	800eb6c <h2v1_merged_upsample+0x4c>

0800ec2c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800ec2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ec30:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800ec34:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ec36:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800ec3a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ec3c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800ec40:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800ec42:	696e      	ldr	r6, [r5, #20]
 800ec44:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ec46:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ec48:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ec4a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ec4c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800ec50:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800ec54:	686d      	ldr	r5, [r5, #4]
 800ec56:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ec58:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800ec5a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ec5c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ec5e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ec60:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ec64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ec68:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800ec6a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ec6c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ec7a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800ec7c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800ec7e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800ec80:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ec82:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ec84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec86:	3206      	adds	r2, #6
 800ec88:	3306      	adds	r3, #6
 800ec8a:	f10e 0e02 	add.w	lr, lr, #2
 800ec8e:	4588      	cmp	r8, r1
 800ec90:	f10c 0c02 	add.w	ip, ip, #2
 800ec94:	d13a      	bne.n	800ed0c <h2v2_merged_upsample+0xe0>
 800ec96:	2306      	movs	r3, #6
 800ec98:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800ec9a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ec9c:	437b      	muls	r3, r7
 800ec9e:	07c0      	lsls	r0, r0, #31
 800eca0:	eb02 0103 	add.w	r1, r2, r3
 800eca4:	9a01      	ldr	r2, [sp, #4]
 800eca6:	441a      	add	r2, r3
 800eca8:	d52d      	bpl.n	800ed06 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800ecaa:	9808      	ldr	r0, [sp, #32]
 800ecac:	9d03      	ldr	r5, [sp, #12]
 800ecae:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ecb0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800ecb4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ecb8:	9d05      	ldr	r5, [sp, #20]
 800ecba:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800ecbe:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ecc2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ecc6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800ecc8:	9804      	ldr	r0, [sp, #16]
 800ecca:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ecce:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800ecd2:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ecd4:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800ecd6:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ecda:	f815 e000 	ldrb.w	lr, [r5, r0]
 800ecde:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ece2:	f81c e000 	ldrb.w	lr, [ip, r0]
 800ece6:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ecea:	5c21      	ldrb	r1, [r4, r0]
 800ecec:	9800      	ldr	r0, [sp, #0]
 800ecee:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800ecf0:	9907      	ldr	r1, [sp, #28]
 800ecf2:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ecf6:	5c68      	ldrb	r0, [r5, r1]
 800ecf8:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ecfa:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800ecfe:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ed00:	5c62      	ldrb	r2, [r4, r1]
 800ed02:	9901      	ldr	r1, [sp, #4]
 800ed04:	54ca      	strb	r2, [r1, r3]
  }
}
 800ed06:	b00b      	add	sp, #44	; 0x2c
 800ed08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800ed0c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed0e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800ed12:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed16:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800ed1a:	9102      	str	r1, [sp, #8]
 800ed1c:	9903      	ldr	r1, [sp, #12]
 800ed1e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed22:	9905      	ldr	r1, [sp, #20]
 800ed24:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800ed28:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed2c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800ed2e:	9e04      	ldr	r6, [sp, #16]
 800ed30:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ed34:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ed38:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ed3c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ed40:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ed42:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ed46:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ed4a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ed4e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ed52:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800ed56:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ed5a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ed5e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ed62:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ed66:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ed6a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ed6e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800ed72:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ed76:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ed7a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ed7e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ed82:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ed86:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ed8a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800ed8e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ed92:	f816 6009 	ldrb.w	r6, [r6, r9]
 800ed96:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ed9a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800ed9e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800eda2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800eda6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800edaa:	e76b      	b.n	800ec84 <h2v2_merged_upsample+0x58>

0800edac <merged_2v_upsample>:
{
 800edac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800edb0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800edb4:	4616      	mov	r6, r2
 800edb6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800edba:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800edbc:	f8d8 3000 	ldr.w	r3, [r8]
 800edc0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800edc4:	b1dd      	cbz	r5, 800edfe <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800edc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edc8:	2501      	movs	r5, #1
 800edca:	f104 0020 	add.w	r0, r4, #32
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	2300      	movs	r3, #0
 800edd2:	9500      	str	r5, [sp, #0]
 800edd4:	4619      	mov	r1, r3
 800edd6:	f007 fbe6 	bl	80165a6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800edda:	2300      	movs	r3, #0
 800eddc:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800edde:	f8d8 3000 	ldr.w	r3, [r8]
 800ede2:	442b      	add	r3, r5
 800ede4:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800ede8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800edea:	1b5b      	subs	r3, r3, r5
 800edec:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800edee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edf0:	b913      	cbnz	r3, 800edf8 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800edf2:	6833      	ldr	r3, [r6, #0]
 800edf4:	3301      	adds	r3, #1
 800edf6:	6033      	str	r3, [r6, #0]
}
 800edf8:	b004      	add	sp, #16
 800edfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800edfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800ee00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800ee02:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800ee04:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800ee08:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800ee0c:	bf28      	it	cs
 800ee0e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800ee10:	9302      	str	r3, [sp, #8]
 800ee12:	42bd      	cmp	r5, r7
 800ee14:	bf28      	it	cs
 800ee16:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800ee18:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800ee1a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800ee1c:	bf17      	itett	ne
 800ee1e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800ee20:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800ee22:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800ee24:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800ee26:	bf0c      	ite	eq
 800ee28:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800ee2a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800ee2c:	ab02      	add	r3, sp, #8
 800ee2e:	6832      	ldr	r2, [r6, #0]
 800ee30:	47b8      	blx	r7
 800ee32:	e7d4      	b.n	800edde <merged_2v_upsample+0x32>

0800ee34 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee34:	6843      	ldr	r3, [r0, #4]
 800ee36:	2230      	movs	r2, #48	; 0x30
 800ee38:	2101      	movs	r1, #1
 800ee3a:	681b      	ldr	r3, [r3, #0]
{
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee42:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800ee44:	4b37      	ldr	r3, [pc, #220]	; (800ef24 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee46:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ee48:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ee4a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800ee4c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ee50:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800ee52:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800ee56:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800ee58:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800ee5a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ee5c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800ee5e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800ee60:	d15a      	bne.n	800ef18 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800ee62:	4b31      	ldr	r3, [pc, #196]	; (800ef28 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee64:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800ee66:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800ee68:	4b30      	ldr	r3, [pc, #192]	; (800ef2c <jinit_merged_upsampler+0xf8>)
 800ee6a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	6863      	ldr	r3, [r4, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800ee74:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee76:	6863      	ldr	r3, [r4, #4]
 800ee78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	4620      	mov	r0, r4
 800ee80:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ee82:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee86:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee88:	6863      	ldr	r3, [r4, #4]
 800ee8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800ee8e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee90:	2101      	movs	r1, #1
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4620      	mov	r0, r4
 800ee96:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee98:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800ee9a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2101      	movs	r1, #1
 800eea4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800eea6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ef44 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eeaa:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eeac:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800eeae:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800eeba:	4f1d      	ldr	r7, [pc, #116]	; (800ef30 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eebc:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800eebe:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800eec0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800eec2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800eec4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800ef48 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800eec8:	491a      	ldr	r1, [pc, #104]	; (800ef34 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800eeca:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800eece:	4d1a      	ldr	r5, [pc, #104]	; (800ef38 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800eed0:	fb08 e203 	mla	r2, r8, r3, lr
 800eed4:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800eed6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800eeda:	fb07 f203 	mul.w	r2, r7, r3
 800eede:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800eee2:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800eee6:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800eee8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800eeec:	fb05 f203 	mul.w	r2, r5, r3
 800eef0:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800eef4:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800eef8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800eefc:	fb01 f203 	mul.w	r2, r1, r3
 800ef00:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800ef04:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800ef08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef12:	d1dd      	bne.n	800eed0 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800ef18:	4a08      	ldr	r2, [pc, #32]	; (800ef3c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800ef1a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800ef1c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800ef1e:	4a08      	ldr	r2, [pc, #32]	; (800ef40 <jinit_merged_upsampler+0x10c>)
 800ef20:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800ef22:	e7a8      	b.n	800ee76 <jinit_merged_upsampler+0x42>
 800ef24:	0800eaed 	.word	0x0800eaed
 800ef28:	0800edad 	.word	0x0800edad
 800ef2c:	0800ec2d 	.word	0x0800ec2d
 800ef30:	0001c5a2 	.word	0x0001c5a2
 800ef34:	ffffa7e6 	.word	0xffffa7e6
 800ef38:	ffff492e 	.word	0xffff492e
 800ef3c:	0800eafb 	.word	0x0800eafb
 800ef40:	0800eb21 	.word	0x0800eb21
 800ef44:	000166e9 	.word	0x000166e9
 800ef48:	ff4d0b80 	.word	0xff4d0b80

0800ef4c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800ef4c:	2902      	cmp	r1, #2
{
 800ef4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ef50:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800ef54:	d023      	beq.n	800ef9e <start_pass_dpost+0x52>
 800ef56:	2903      	cmp	r1, #3
 800ef58:	d019      	beq.n	800ef8e <start_pass_dpost+0x42>
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	d128      	bne.n	800efb0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800ef5e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ef60:	b182      	cbz	r2, 800ef84 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <start_pass_dpost+0x70>)
 800ef64:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800ef66:	68e2      	ldr	r2, [r4, #12]
 800ef68:	b93a      	cbnz	r2, 800ef7a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800ef6a:	6843      	ldr	r3, [r0, #4]
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	9100      	str	r1, [sp, #0]
 800ef70:	69dd      	ldr	r5, [r3, #28]
 800ef72:	68a1      	ldr	r1, [r4, #8]
 800ef74:	6923      	ldr	r3, [r4, #16]
 800ef76:	47a8      	blx	r5
 800ef78:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800ef80:	b003      	add	sp, #12
 800ef82:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800ef84:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800ef88:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800ef8a:	6063      	str	r3, [r4, #4]
    break;
 800ef8c:	e7f5      	b.n	800ef7a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800ef8e:	68a2      	ldr	r2, [r4, #8]
 800ef90:	b91a      	cbnz	r2, 800ef9a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ef92:	6803      	ldr	r3, [r0, #0]
 800ef94:	6159      	str	r1, [r3, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800ef9a:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <start_pass_dpost+0x74>)
 800ef9c:	e7f5      	b.n	800ef8a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800ef9e:	68a2      	ldr	r2, [r4, #8]
 800efa0:	b922      	cbnz	r2, 800efac <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800efa2:	6803      	ldr	r3, [r0, #0]
 800efa4:	2203      	movs	r2, #3
 800efa6:	615a      	str	r2, [r3, #20]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800efac:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <start_pass_dpost+0x78>)
 800efae:	e7ec      	b.n	800ef8a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800efb0:	6803      	ldr	r3, [r0, #0]
 800efb2:	2203      	movs	r2, #3
 800efb4:	615a      	str	r2, [r3, #20]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4798      	blx	r3
    break;
 800efba:	e7de      	b.n	800ef7a <start_pass_dpost+0x2e>
 800efbc:	0800efc9 	.word	0x0800efc9
 800efc0:	0800f029 	.word	0x0800f029
 800efc4:	0800f0b7 	.word	0x0800f0b7

0800efc8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800efc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efcc:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800efce:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800efd2:	4604      	mov	r4, r0
 800efd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800efd6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800efd8:	682f      	ldr	r7, [r5, #0]
 800efda:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800efdc:	2700      	movs	r7, #0
 800efde:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800efe0:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800efe4:	9705      	str	r7, [sp, #20]
 800efe6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800efea:	42be      	cmp	r6, r7
 800efec:	bf94      	ite	ls
 800efee:	9602      	strls	r6, [sp, #8]
 800eff0:	9702      	strhi	r7, [sp, #8]
 800eff2:	ae07      	add	r6, sp, #28
 800eff4:	9601      	str	r6, [sp, #4]
 800eff6:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800effa:	9600      	str	r6, [sp, #0]
 800effc:	9e05      	ldr	r6, [sp, #20]
 800effe:	6876      	ldr	r6, [r6, #4]
 800f000:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f002:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f004:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f008:	4620      	mov	r0, r4
 800f00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f00c:	685e      	ldr	r6, [r3, #4]
 800f00e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f012:	9b07      	ldr	r3, [sp, #28]
 800f014:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f018:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f01a:	682b      	ldr	r3, [r5, #0]
 800f01c:	9a07      	ldr	r2, [sp, #28]
 800f01e:	4413      	add	r3, r2
 800f020:	602b      	str	r3, [r5, #0]
}
 800f022:	b008      	add	sp, #32
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f028 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f02c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f030:	b085      	sub	sp, #20
 800f032:	469a      	mov	sl, r3
 800f034:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f036:	69a3      	ldr	r3, [r4, #24]
{
 800f038:	460e      	mov	r6, r1
 800f03a:	4691      	mov	r9, r2
 800f03c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f040:	b943      	cbnz	r3, 800f054 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f042:	6843      	ldr	r3, [r0, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	9200      	str	r2, [sp, #0]
 800f048:	69df      	ldr	r7, [r3, #28]
 800f04a:	68a1      	ldr	r1, [r4, #8]
 800f04c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f050:	47b8      	blx	r7
 800f052:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f054:	6922      	ldr	r2, [r4, #16]
 800f056:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f058:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f05a:	4628      	mov	r0, r5
 800f05c:	9202      	str	r2, [sp, #8]
 800f05e:	f104 0218 	add.w	r2, r4, #24
 800f062:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f066:	9201      	str	r2, [sp, #4]
 800f068:	68e2      	ldr	r2, [r4, #12]
 800f06a:	9200      	str	r2, [sp, #0]
 800f06c:	464a      	mov	r2, r9
 800f06e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f072:	4653      	mov	r3, sl
 800f074:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f076:	69a6      	ldr	r6, [r4, #24]
 800f078:	42be      	cmp	r6, r7
 800f07a:	d910      	bls.n	800f09e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f07c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f080:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f082:	68e1      	ldr	r1, [r4, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f08a:	4628      	mov	r0, r5
 800f08c:	4633      	mov	r3, r6
 800f08e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f092:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f094:	f8d8 3000 	ldr.w	r3, [r8]
 800f098:	4433      	add	r3, r6
 800f09a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f09e:	6922      	ldr	r2, [r4, #16]
 800f0a0:	69a3      	ldr	r3, [r4, #24]
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d304      	bcc.n	800f0b0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f0a6:	6963      	ldr	r3, [r4, #20]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	61a3      	str	r3, [r4, #24]
  }
}
 800f0b0:	b005      	add	sp, #20
 800f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0b6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f0b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f0ba:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f0be:	4607      	mov	r7, r0
 800f0c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f0c2:	69a3      	ldr	r3, [r4, #24]
 800f0c4:	b93b      	cbnz	r3, 800f0d6 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f0c6:	6842      	ldr	r2, [r0, #4]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	69d5      	ldr	r5, [r2, #28]
 800f0cc:	68a1      	ldr	r1, [r4, #8]
 800f0ce:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f0d2:	47a8      	blx	r5
 800f0d4:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f0d6:	6963      	ldr	r3, [r4, #20]
 800f0d8:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f0da:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f0dc:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f0de:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f0e0:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f0e2:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f0e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f0e6:	429d      	cmp	r5, r3
 800f0e8:	bf28      	it	cs
 800f0ea:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0ee:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f0f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f0f4:	429d      	cmp	r5, r3
 800f0f6:	bf28      	it	cs
 800f0f8:	461d      	movcs	r5, r3
 800f0fa:	68e3      	ldr	r3, [r4, #12]
 800f0fc:	9303      	str	r3, [sp, #12]
 800f0fe:	9803      	ldr	r0, [sp, #12]
 800f100:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f108:	4638      	mov	r0, r7
 800f10a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f10e:	462b      	mov	r3, r5
 800f110:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f112:	6833      	ldr	r3, [r6, #0]
 800f114:	442b      	add	r3, r5
 800f116:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f118:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f11a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f11c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f11e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f120:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f122:	d304      	bcc.n	800f12e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f124:	6963      	ldr	r3, [r4, #20]
 800f126:	4413      	add	r3, r2
 800f128:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	61a3      	str	r3, [r4, #24]
  }
}
 800f12e:	b004      	add	sp, #16
 800f130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f134 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f134:	6843      	ldr	r3, [r0, #4]
 800f136:	221c      	movs	r2, #28
{
 800f138:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f13a:	681b      	ldr	r3, [r3, #0]
{
 800f13c:	b085      	sub	sp, #20
 800f13e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f140:	2101      	movs	r1, #1
{
 800f142:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f144:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f146:	4b15      	ldr	r3, [pc, #84]	; (800f19c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f148:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f14a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f14e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f150:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f152:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f154:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f158:	b1bb      	cbz	r3, 800f18a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f15a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f15e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f160:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f162:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f164:	6861      	ldr	r1, [r4, #4]
 800f166:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f168:	b18f      	cbz	r7, 800f18e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f16a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f16c:	4619      	mov	r1, r3
 800f16e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f170:	9203      	str	r2, [sp, #12]
 800f172:	f007 fa10 	bl	8016596 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f176:	692b      	ldr	r3, [r5, #16]
 800f178:	2101      	movs	r1, #1
 800f17a:	9a03      	ldr	r2, [sp, #12]
 800f17c:	e9cd 0300 	strd	r0, r3, [sp]
 800f180:	4613      	mov	r3, r2
 800f182:	4620      	mov	r0, r4
 800f184:	4632      	mov	r2, r6
 800f186:	47b8      	blx	r7
 800f188:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f18a:	b005      	add	sp, #20
 800f18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f18e:	688e      	ldr	r6, [r1, #8]
 800f190:	4620      	mov	r0, r4
 800f192:	2101      	movs	r1, #1
 800f194:	47b0      	blx	r6
 800f196:	60e8      	str	r0, [r5, #12]
}
 800f198:	e7f7      	b.n	800f18a <jinit_d_post_controller+0x56>
 800f19a:	bf00      	nop
 800f19c:	0800ef4d 	.word	0x0800ef4d

0800f1a0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f1a0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f1a4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f1a8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f1aa:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f1ac:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f1ae:	4770      	bx	lr

0800f1b0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f1b4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f1b8:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f1ba:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f1be:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f1c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f1c2:	4683      	mov	fp, r0
 800f1c4:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	db10      	blt.n	800f1ec <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f1ca:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f1ce:	2600      	movs	r6, #0
 800f1d0:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f1d4:	9303      	str	r3, [sp, #12]
 800f1d6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f1da:	9a03      	ldr	r2, [sp, #12]
 800f1dc:	fb0a 2106 	mla	r1, sl, r6, r2
 800f1e0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f1e4:	42b2      	cmp	r2, r6
 800f1e6:	dc32      	bgt.n	800f24e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f1ee:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f1f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f1f2:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f1fa:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f1fe:	1ace      	subs	r6, r1, r3
 800f200:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f202:	428e      	cmp	r6, r1
 800f204:	bf28      	it	cs
 800f206:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f208:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f20c:	4566      	cmp	r6, ip
 800f20e:	bf28      	it	cs
 800f210:	4666      	movcs	r6, ip
 800f212:	9600      	str	r6, [sp, #0]
 800f214:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f218:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f21a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f21e:	f104 010c 	add.w	r1, r4, #12
 800f222:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4433      	add	r3, r6
 800f22c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f22e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f230:	1b9b      	subs	r3, r3, r6
 800f232:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f234:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f236:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f238:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f23c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f23e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f240:	bfa2      	ittt	ge
 800f242:	682b      	ldrge	r3, [r5, #0]
 800f244:	3301      	addge	r3, #1
 800f246:	602b      	strge	r3, [r5, #0]
}
 800f248:	b005      	add	sp, #20
 800f24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f24e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f250:	f103 0904 	add.w	r9, r3, #4
 800f254:	682a      	ldr	r2, [r5, #0]
 800f256:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f258:	f853 0928 	ldr.w	r0, [r3], #-40
 800f25c:	4607      	mov	r7, r0
 800f25e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f262:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f264:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f268:	4658      	mov	r0, fp
 800f26a:	47b8      	blx	r7
	 ci++, compptr++) {
 800f26c:	464b      	mov	r3, r9
 800f26e:	e7b4      	b.n	800f1da <sep_upsample+0x2a>

0800f270 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f270:	601a      	str	r2, [r3, #0]
}
 800f272:	4770      	bx	lr

0800f274 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]
}
 800f278:	4770      	bx	lr

0800f27a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f27a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f27c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f27e:	2300      	movs	r3, #0
 800f280:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f284:	4299      	cmp	r1, r3
 800f286:	dc00      	bgt.n	800f28a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f28a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f28e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f290:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f294:	440c      	add	r4, r1
    while (outptr < outend) {
 800f296:	42a1      	cmp	r1, r4
 800f298:	d301      	bcc.n	800f29e <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f29a:	3301      	adds	r3, #1
 800f29c:	e7f0      	b.n	800f280 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f29e:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f2a2:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f2a6:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f2aa:	e7f4      	b.n	800f296 <h2v1_upsample+0x1c>

0800f2ac <int_upsample>:
{
 800f2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b0:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f2b2:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f2b4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800f2b8:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800f2ba:	684b      	ldr	r3, [r1, #4]
 800f2bc:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800f2be:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800f2c0:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800f2c2:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f2c6:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f2ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800f2ce:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800f2d0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f2d4:	42a3      	cmp	r3, r4
 800f2d6:	dc02      	bgt.n	800f2de <int_upsample+0x32>
}
 800f2d8:	b005      	add	sp, #20
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800f2de:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f2e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f2e4:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f2e8:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800f2ec:	454b      	cmp	r3, r9
 800f2ee:	d30e      	bcc.n	800f30e <int_upsample+0x62>
    if (v_expand > 1) {
 800f2f0:	f1b8 0f01 	cmp.w	r8, #1
 800f2f4:	dd09      	ble.n	800f30a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f2f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	9b03      	ldr	r3, [sp, #12]
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	1c63      	adds	r3, r4, #1
 800f306:	f007 f94e 	bl	80165a6 <jcopy_sample_rows>
    outrow += v_expand;
 800f30a:	4444      	add	r4, r8
 800f30c:	e7e0      	b.n	800f2d0 <int_upsample+0x24>
	*outptr++ = invalue;
 800f30e:	4618      	mov	r0, r3
 800f310:	4652      	mov	r2, sl
 800f312:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800f316:	f019 ff99 	bl	802924c <memset>
 800f31a:	4603      	mov	r3, r0
 800f31c:	4453      	add	r3, sl
 800f31e:	e7e5      	b.n	800f2ec <int_upsample+0x40>

0800f320 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f324:	4605      	mov	r5, r0
 800f326:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f328:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f32a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f32c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f330:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f334:	42a3      	cmp	r3, r4
 800f336:	dc02      	bgt.n	800f33e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f338:	b002      	add	sp, #8
 800f33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f33e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f342:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f344:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f348:	441a      	add	r2, r3
    while (outptr < outend) {
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d30a      	bcc.n	800f364 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f34e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f350:	4621      	mov	r1, r4
 800f352:	4632      	mov	r2, r6
 800f354:	4630      	mov	r0, r6
 800f356:	e9cd 8300 	strd	r8, r3, [sp]
 800f35a:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f35c:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f35e:	f007 f922 	bl	80165a6 <jcopy_sample_rows>
    outrow += 2;
 800f362:	e7e5      	b.n	800f330 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f364:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f368:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f36c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f370:	e7eb      	b.n	800f34a <h2v2_upsample+0x2a>
	...

0800f374 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f378:	6843      	ldr	r3, [r0, #4]
 800f37a:	22a0      	movs	r2, #160	; 0xa0
 800f37c:	2101      	movs	r1, #1
{
 800f37e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f384:	4b3f      	ldr	r3, [pc, #252]	; (800f484 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f386:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f38a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f38c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f38e:	4b3e      	ldr	r3, [pc, #248]	; (800f488 <jinit_upsampler+0x114>)
 800f390:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f392:	2300      	movs	r3, #0
 800f394:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f396:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f39a:	b12b      	cbz	r3, 800f3a8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	221a      	movs	r2, #26
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	615a      	str	r2, [r3, #20]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3a8:	f105 060c 	add.w	r6, r5, #12
 800f3ac:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f3b0:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f3b4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f3b8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800f498 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3bc:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f3c0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f49c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3c4:	3574      	adds	r5, #116	; 0x74
 800f3c6:	eb05 0308 	add.w	r3, r5, r8
 800f3ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	dc01      	bgt.n	800f3d4 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3d6:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f3d8:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3dc:	4343      	muls	r3, r0
 800f3de:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f3e2:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f3e6:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3ea:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f3ee:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f3f2:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f3f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3f6:	b932      	cbnz	r2, 800f406 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f3f8:	4b24      	ldr	r3, [pc, #144]	; (800f48c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f3fa:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800f3fc:	3758      	adds	r7, #88	; 0x58
 800f3fe:	3604      	adds	r6, #4
 800f400:	f108 0801 	add.w	r8, r8, #1
 800f404:	e7df      	b.n	800f3c6 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f406:	fb0c f20e 	mul.w	r2, ip, lr
 800f40a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800f40e:	4559      	cmp	r1, fp
 800f410:	d103      	bne.n	800f41a <jinit_upsampler+0xa6>
 800f412:	4283      	cmp	r3, r0
 800f414:	d101      	bne.n	800f41a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800f416:	4b1e      	ldr	r3, [pc, #120]	; (800f490 <jinit_upsampler+0x11c>)
 800f418:	e7ef      	b.n	800f3fa <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800f41a:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800f41e:	d119      	bne.n	800f454 <jinit_upsampler+0xe0>
 800f420:	4283      	cmp	r3, r0
 800f422:	d111      	bne.n	800f448 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800f424:	4b1b      	ldr	r3, [pc, #108]	; (800f494 <jinit_upsampler+0x120>)
 800f426:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f428:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f42a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800f42e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f430:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f434:	f007 f8af 	bl	8016596 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f438:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f43c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f43e:	2101      	movs	r1, #1
 800f440:	4620      	mov	r0, r4
 800f442:	47d8      	blx	fp
 800f444:	6030      	str	r0, [r6, #0]
 800f446:	e7d9      	b.n	800f3fc <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800f448:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f44c:	d102      	bne.n	800f454 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800f44e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800f452:	e7e9      	b.n	800f428 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800f454:	fb9b f2f1 	sdiv	r2, fp, r1
 800f458:	fb01 b112 	mls	r1, r1, r2, fp
 800f45c:	b959      	cbnz	r1, 800f476 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800f45e:	fb90 f1f3 	sdiv	r1, r0, r3
 800f462:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800f466:	b933      	cbnz	r3, 800f476 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800f468:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800f46c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800f470:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800f474:	e7d8      	b.n	800f428 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	2227      	movs	r2, #39	; 0x27
 800f47a:	4620      	mov	r0, r4
 800f47c:	615a      	str	r2, [r3, #20]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4798      	blx	r3
    if (need_buffer) {
 800f482:	e7d1      	b.n	800f428 <jinit_upsampler+0xb4>
 800f484:	0800f1a1 	.word	0x0800f1a1
 800f488:	0800f1b1 	.word	0x0800f1b1
 800f48c:	0800f275 	.word	0x0800f275
 800f490:	0800f271 	.word	0x0800f271
 800f494:	0800f27b 	.word	0x0800f27b
 800f498:	0800f2ad 	.word	0x0800f2ad
 800f49c:	0800f321 	.word	0x0800f321

0800f4a0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f4a0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f4a2:	6803      	ldr	r3, [r0, #0]
{
 800f4a4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	4669      	mov	r1, sp
 800f4aa:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f4ac:	b033      	add	sp, #204	; 0xcc
 800f4ae:	f85d fb04 	ldr.w	pc, [sp], #4

0800f4b2 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800f4b2:	2900      	cmp	r1, #0
{
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800f4b8:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800f4ba:	da0b      	bge.n	800f4d4 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f4bc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800f4be:	b112      	cbz	r2, 800f4c6 <emit_message+0x14>
 800f4c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f4c2:	2a02      	cmp	r2, #2
 800f4c4:	dd02      	ble.n	800f4cc <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800f4c6:	68a2      	ldr	r2, [r4, #8]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f4cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f4d2:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f4d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f4d6:	428b      	cmp	r3, r1
 800f4d8:	dbfb      	blt.n	800f4d2 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f4da:	68a3      	ldr	r3, [r4, #8]
}
 800f4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800f4e0:	4718      	bx	r3

0800f4e2 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800f4e2:	6803      	ldr	r3, [r0, #0]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f4e8:	615a      	str	r2, [r3, #20]
}
 800f4ea:	4770      	bx	lr

0800f4ec <format_message>:
{
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800f4f0:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800f4f2:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f4f4:	2b00      	cmp	r3, #0
{
 800f4f6:	b530      	push	{r4, r5, lr}
 800f4f8:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f4fa:	dd1f      	ble.n	800f53c <format_message+0x50>
 800f4fc:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800f4fe:	4299      	cmp	r1, r3
 800f500:	db1c      	blt.n	800f53c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800f502:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f504:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800f508:	b911      	cbnz	r1, 800f510 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800f50a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800f50c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f50e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800f510:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800f512:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f516:	b9fc      	cbnz	r4, 800f558 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800f518:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f51a:	9305      	str	r3, [sp, #20]
 800f51c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f522:	9303      	str	r3, [sp, #12]
 800f524:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f526:	9302      	str	r3, [sp, #8]
 800f528:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f52a:	9301      	str	r3, [sp, #4]
 800f52c:	6a13      	ldr	r3, [r2, #32]
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800f534:	f01a fb1e 	bl	8029b74 <siprintf>
}
 800f538:	b007      	add	sp, #28
 800f53a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800f53c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800f53e:	2c00      	cmp	r4, #0
 800f540:	d0e3      	beq.n	800f50a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f542:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800f544:	4299      	cmp	r1, r3
 800f546:	dce0      	bgt.n	800f50a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f548:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800f54c:	429d      	cmp	r5, r3
 800f54e:	dbdc      	blt.n	800f50a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f550:	1a59      	subs	r1, r3, r1
 800f552:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f556:	e7d7      	b.n	800f508 <format_message+0x1c>
    if (ch == '%') {
 800f558:	2c25      	cmp	r4, #37	; 0x25
 800f55a:	d1da      	bne.n	800f512 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	2b73      	cmp	r3, #115	; 0x73
 800f560:	d1da      	bne.n	800f518 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f562:	3218      	adds	r2, #24
}
 800f564:	b007      	add	sp, #28
 800f566:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f56a:	f01a bb03 	b.w	8029b74 <siprintf>

0800f56e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800f56e:	6803      	ldr	r3, [r0, #0]
{
 800f570:	b510      	push	{r4, lr}
 800f572:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800f578:	4620      	mov	r0, r4
}
 800f57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800f57e:	f7f9 bf03 	b.w	8009388 <jpeg_destroy>
	...

0800f584 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800f584:	4a0a      	ldr	r2, [pc, #40]	; (800f5b0 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f586:	490b      	ldr	r1, [pc, #44]	; (800f5b4 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800f588:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800f58a:	4a0b      	ldr	r2, [pc, #44]	; (800f5b8 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800f58c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f58e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800f590:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800f592:	4a0a      	ldr	r2, [pc, #40]	; (800f5bc <jpeg_std_error+0x38>)
 800f594:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800f596:	4a0a      	ldr	r2, [pc, #40]	; (800f5c0 <jpeg_std_error+0x3c>)
 800f598:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f59a:	4a0a      	ldr	r2, [pc, #40]	; (800f5c4 <jpeg_std_error+0x40>)
 800f59c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800f59e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f5a0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f5a4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800f5a6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800f5aa:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800f5ae:	4770      	bx	lr
 800f5b0:	0800f56f 	.word	0x0800f56f
 800f5b4:	0802df7c 	.word	0x0802df7c
 800f5b8:	0800f4b3 	.word	0x0800f4b3
 800f5bc:	0800f4a1 	.word	0x0800f4a1
 800f5c0:	0800f4ed 	.word	0x0800f4ed
 800f5c4:	0800f4e3 	.word	0x0800f4e3

0800f5c8 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800f5cc:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800f5d0:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800f5d2:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f5d6:	3a02      	subs	r2, #2
 800f5d8:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800f5dc:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f5de:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800f8d4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f5e2:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800f8d8 <jpeg_idct_float+0x310>
 800f5e6:	eddf 4abd 	vldr	s9, [pc, #756]	; 800f8dc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f5ea:	eddf 3abd 	vldr	s7, [pc, #756]	; 800f8e0 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f5ee:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800f5f2:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f5f4:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f5f8:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800f5fc:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f600:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f604:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f608:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f60c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800f610:	ecbc 7a01 	vldmia	ip!, {s14}
 800f614:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f618:	ea4e 0b09 	orr.w	fp, lr, r9
 800f61c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f624:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f628:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f62c:	ea41 0b0b 	orr.w	fp, r1, fp
 800f630:	ea45 0b0b 	orr.w	fp, r5, fp
 800f634:	ea50 0b0b 	orrs.w	fp, r0, fp
 800f638:	f040 80c0 	bne.w	800f7bc <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800f63c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f640:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f644:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f648:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f64c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f650:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f654:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f658:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f65c:	45e2      	cmp	sl, ip
 800f65e:	d1c6      	bne.n	800f5ee <jpeg_idct_float+0x26>
 800f660:	1f1c      	subs	r4, r3, #4
 800f662:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f666:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f668:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800f8e4 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f66c:	eddf 4a99 	vldr	s9, [pc, #612]	; 800f8d4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f670:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800f8d8 <jpeg_idct_float+0x310>
 800f674:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800f8dc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f678:	eddf 3a99 	vldr	s7, [pc, #612]	; 800f8e0 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f67c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f680:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800f682:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f686:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800f68a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800f68e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800f692:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800f696:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800f69a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800f69c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800f6a0:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800f6a4:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f6a6:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800f6a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f6ac:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f6ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6b2:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800f6b6:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800f6ba:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800f6be:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f6c2:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800f6c6:	ed52 7a03 	vldr	s15, [r2, #-12]
 800f6ca:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800f6ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800f6d2:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800f6d6:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800f6da:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800f6de:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800f6e2:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800f6e6:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800f6ea:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f6ee:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f6f2:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f6f6:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f6fa:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f6fe:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800f702:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800f706:	eef0 1a67 	vmov.f32	s3, s15
 800f70a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f70e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f712:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f716:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f71a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800f71e:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f722:	ee12 3a10 	vmov	r3, s4
 800f726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f72a:	5cf3      	ldrb	r3, [r6, r3]
 800f72c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f72e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f732:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f736:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f73a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f73e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f742:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f744:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f748:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f74a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f74e:	ee16 3a10 	vmov	r3, s12
 800f752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f756:	5cf3      	ldrb	r3, [r6, r3]
 800f758:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f75a:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f75e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f766:	5cf3      	ldrb	r3, [r6, r3]
 800f768:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f76a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f76e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f772:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f77a:	5cf3      	ldrb	r3, [r6, r3]
 800f77c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f77e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f782:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f786:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f78a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f792:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f794:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f798:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f79a:	ee17 3a90 	vmov	r3, s15
 800f79e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7a2:	5cf3      	ldrb	r3, [r6, r3]
 800f7a4:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f7a6:	ee17 3a10 	vmov	r3, s14
 800f7aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7ae:	5cf3      	ldrb	r3, [r6, r3]
 800f7b0:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f7b2:	f47f af63 	bne.w	800f67c <jpeg_idct_float+0xb4>
  }
}
 800f7b6:	b041      	add	sp, #260	; 0x104
 800f7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f7bc:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7c0:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f7c4:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f7c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f7cc:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f7d0:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f7d4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7d8:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f7dc:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7e4:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f7e8:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7ec:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f7f0:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800f7f4:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f7f8:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f7fc:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f800:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f804:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f808:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f80c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800f810:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f814:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f818:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800f81c:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800f820:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f824:	ee07 ea90 	vmov	s15, lr
 800f828:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f82c:	ee07 8a90 	vmov	s15, r8
 800f830:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f834:	ee07 1a90 	vmov	s15, r1
 800f838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f83c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f840:	ee07 0a10 	vmov	s14, r0
 800f844:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f848:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f84c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800f850:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f854:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800f858:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800f85c:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800f860:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f864:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f868:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800f86c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f870:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f874:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800f878:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f87c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f880:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800f884:	eeb0 6a67 	vmov.f32	s12, s15
 800f888:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f88c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f890:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f894:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f898:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f89c:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f8a0:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f8a4:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800f8a8:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f8ac:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f8b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f8b4:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f8b8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f8bc:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f8c0:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f8c4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f8c8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f8cc:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800f8d0:	e6c4      	b.n	800f65c <jpeg_idct_float+0x94>
 800f8d2:	bf00      	nop
 800f8d4:	3fb504f3 	.word	0x3fb504f3
 800f8d8:	3f8a8bd4 	.word	0x3f8a8bd4
 800f8dc:	3fec835e 	.word	0x3fec835e
 800f8e0:	40273d75 	.word	0x40273d75
 800f8e4:	43008000 	.word	0x43008000

0800f8e8 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ec:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800f8ee:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f8f0:	3a02      	subs	r2, #2
{
 800f8f2:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f8f4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f8f8:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f8fc:	f105 0320 	add.w	r3, r5, #32
 800f900:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800f902:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f904:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800f908:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f90a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800f90e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f912:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800f916:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f91a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f91e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f922:	f855 0b04 	ldr.w	r0, [r5], #4
 800f926:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f92a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f92c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f92e:	ea46 000c 	orr.w	r0, r6, ip
 800f932:	4338      	orrs	r0, r7
 800f934:	ea4a 0000 	orr.w	r0, sl, r0
 800f938:	4308      	orrs	r0, r1
 800f93a:	ea4e 0000 	orr.w	r0, lr, r0
 800f93e:	ea58 0100 	orrs.w	r1, r8, r0
 800f942:	d146      	bne.n	800f9d2 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800f944:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f948:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f94a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f94c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f94e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f950:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f954:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f958:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f95c:	9903      	ldr	r1, [sp, #12]
 800f95e:	42a9      	cmp	r1, r5
 800f960:	d1d0      	bne.n	800f904 <jpeg_idct_ifast+0x1c>
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	f1a3 0b04 	sub.w	fp, r3, #4
 800f968:	331c      	adds	r3, #28
 800f96a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800f96c:	ab04      	add	r3, sp, #16
 800f96e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f970:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800f972:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f976:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800f978:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f97c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f97e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f980:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800f984:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f986:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f98a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f98e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800f992:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f994:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f996:	ea47 0708 	orr.w	r7, r7, r8
 800f99a:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800f99e:	4327      	orrs	r7, r4
 800f9a0:	ea47 070c 	orr.w	r7, r7, ip
 800f9a4:	ea57 0502 	orrs.w	r5, r7, r2
 800f9a8:	d17e      	bne.n	800faa8 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800f9aa:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800f9ae:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f9b0:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800f9b4:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800f9b8:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800f9ba:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800f9bc:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800f9be:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800f9c0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800f9c2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800f9c4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f9c6:	9b02      	ldr	r3, [sp, #8]
 800f9c8:	455b      	cmp	r3, fp
 800f9ca:	d1d1      	bne.n	800f970 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800f9cc:	b045      	add	sp, #276	; 0x114
 800f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f9d2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f9d4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f9d8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f9dc:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800f9de:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f9e2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800f9e6:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f9ea:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800f9ee:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f9f2:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f9f6:	ebac 0000 	sub.w	r0, ip, r0
 800f9fa:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f9fc:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fa00:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800fa04:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800fa08:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800fa0c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa0e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fa10:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800fa14:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa16:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa18:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa1a:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa1c:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa1e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800fa22:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fa24:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800fa28:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fa2c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800fa30:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800fa32:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800fa36:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fa38:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800fa3a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fa3e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fa42:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fa44:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800fa48:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fa4a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800fa4e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fa52:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fa56:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fa58:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fa5a:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fa5e:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fa60:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fa62:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fa66:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800fa6a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fa6e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fa72:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fa76:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fa7a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800fa7e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fa80:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fa84:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fa88:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fa8a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fa8c:	4459      	add	r1, fp
 800fa8e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fa90:	9900      	ldr	r1, [sp, #0]
 800fa92:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800fa96:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800fa9a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fa9e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800faa2:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800faa4:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800faa6:	e759      	b.n	800f95c <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800faa8:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800faac:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800fab0:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800fab4:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fab8:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800fabc:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fac0:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fac2:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800fac4:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800fac6:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800faca:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800face:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800fad2:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fad4:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800fad6:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fada:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800fade:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800fae2:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fae6:	f240 15d9 	movw	r5, #473	; 0x1d9
 800faea:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800faee:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800faf2:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800faf4:	9d01      	ldr	r5, [sp, #4]
 800faf6:	1b64      	subs	r4, r4, r5
 800faf8:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fafc:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fafe:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fb00:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fb04:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fb08:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fb0a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fb0c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fb10:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800fb12:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fb16:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fb1a:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fb1e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800fb22:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800fb26:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800fb28:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fb2c:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fb30:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fb34:	f819 200c 	ldrb.w	r2, [r9, ip]
 800fb38:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fb3a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fb3c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800fb3e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800fb42:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fb46:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fb4a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fb4c:	f819 3007 	ldrb.w	r3, [r9, r7]
 800fb50:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fb52:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fb54:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800fb56:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800fb5a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fb5e:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fb62:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fb64:	f819 3001 	ldrb.w	r3, [r9, r1]
 800fb68:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fb6a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fb6e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800fb72:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800fb76:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fb7a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fb7e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fb80:	f819 300e 	ldrb.w	r3, [r9, lr]
 800fb84:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fb86:	e71e      	b.n	800f9c6 <jpeg_idct_ifast+0xde>

0800fb88 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800fb8e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fb90:	3a02      	subs	r2, #2
{
 800fb92:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 800fb94:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb96:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fb9a:	3380      	adds	r3, #128	; 0x80
 800fb9c:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fb9e:	f105 0320 	add.w	r3, r5, #32
 800fba2:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fba4:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800fba8:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fbaa:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fbae:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 800fbb2:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fbb6:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800fbba:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fbbe:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800fbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800fbca:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fbcc:	ea4a 030b 	orr.w	r3, sl, fp
 800fbd0:	ea4e 0303 	orr.w	r3, lr, r3
 800fbd4:	433b      	orrs	r3, r7
 800fbd6:	ea48 0303 	orr.w	r3, r8, r3
 800fbda:	4333      	orrs	r3, r6
 800fbdc:	ea59 0303 	orrs.w	r3, r9, r3
 800fbe0:	d145      	bne.n	800fc6e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800fbe2:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 800fbe4:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fbe8:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fbea:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fbec:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fbee:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fbf0:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fbf4:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fbf8:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fbfc:	9b05      	ldr	r3, [sp, #20]
 800fbfe:	42ab      	cmp	r3, r5
 800fc00:	d1d0      	bne.n	800fba4 <jpeg_idct_islow+0x1c>
 800fc02:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fc04:	ad06      	add	r5, sp, #24
 800fc06:	f1a3 0904 	sub.w	r9, r3, #4
 800fc0a:	331c      	adds	r3, #28
 800fc0c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fc0e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800fc12:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800fc14:	9302      	str	r3, [sp, #8]
 800fc16:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fc18:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fc1c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800fc20:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fc24:	ea4a 0200 	orr.w	r2, sl, r0
 800fc28:	ea42 020e 	orr.w	r2, r2, lr
 800fc2c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 800fc30:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fc32:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fc36:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fc3a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fc3c:	430a      	orrs	r2, r1
 800fc3e:	ea52 020c 	orrs.w	r2, r2, ip
 800fc42:	f040 8098 	bne.w	800fd76 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fc46:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800fc48:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 800fc4c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fc4e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800fc50:	9902      	ldr	r1, [sp, #8]
 800fc52:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800fc54:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800fc56:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800fc58:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800fc5a:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800fc5c:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800fc5e:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800fc60:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fc62:	9b05      	ldr	r3, [sp, #20]
 800fc64:	454b      	cmp	r3, r9
 800fc66:	d1d2      	bne.n	800fc0e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800fc68:	b047      	add	sp, #284	; 0x11c
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fc6e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800fc70:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fc74:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fc78:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800fc7a:	f241 1651 	movw	r6, #4433	; 0x1151
 800fc7e:	eb0b 0300 	add.w	r3, fp, r0
 800fc82:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800fc84:	f641 067e 	movw	r6, #6270	; 0x187e
 800fc88:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800fc8c:	4e7a      	ldr	r6, [pc, #488]	; (800fe78 <jpeg_idct_islow+0x2f0>)
 800fc8e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 800fc92:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fc94:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fc96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fc9a:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 800fc9c:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 800fca0:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 800fca4:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 800fca8:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fcac:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 800fcae:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 800fcb0:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 800fcb2:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fcb4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fcb8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 800fcbc:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fcbe:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fcc2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fcc6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800fcca:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fcce:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800fcd0:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800fcd4:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800fcd8:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fcdc:	1930      	adds	r0, r6, r4
 800fcde:	4358      	muls	r0, r3
    z2 += z1;
 800fce0:	4b66      	ldr	r3, [pc, #408]	; (800fe7c <jpeg_idct_islow+0x2f4>)
 800fce2:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 800fce6:	4b66      	ldr	r3, [pc, #408]	; (800fe80 <jpeg_idct_islow+0x2f8>)
 800fce8:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800fcec:	eb09 040a 	add.w	r4, r9, sl
 800fcf0:	4b64      	ldr	r3, [pc, #400]	; (800fe84 <jpeg_idct_islow+0x2fc>)
 800fcf2:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 800fcf4:	f640 138e 	movw	r3, #2446	; 0x98e
 800fcf8:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800fcfc:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800fcfe:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 800fd02:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fd06:	4b60      	ldr	r3, [pc, #384]	; (800fe88 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800fd08:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fd0c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800fd10:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fd14:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fd18:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 800fd1a:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800fd1c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800fd1e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800fd22:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800fd26:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fd2a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fd2e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fd32:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fd34:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fd36:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fd3a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fd3e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fd42:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fd46:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fd48:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fd4c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fd4e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fd50:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fd52:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fd54:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fd56:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fd5a:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fd5c:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fd5e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fd60:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fd62:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fd66:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800fd68:	9b02      	ldr	r3, [sp, #8]
 800fd6a:	eba3 0909 	sub.w	r9, r3, r9
 800fd6e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 800fd72:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800fd74:	e742      	b.n	800fbfc <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800fd76:	1842      	adds	r2, r0, r1
 800fd78:	f241 1451 	movw	r4, #4433	; 0x1151
 800fd7c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800fd7e:	f641 047e 	movw	r4, #6270	; 0x187e
 800fd82:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800fd86:	4c3c      	ldr	r4, [pc, #240]	; (800fe78 <jpeg_idct_islow+0x2f0>)
 800fd88:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800fd8c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 800fd8e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 800fd90:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800fd94:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800fd98:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 800fd9c:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 800fda0:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 800fda2:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 800fda6:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800fdaa:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fdac:	f242 52a1 	movw	r2, #9633	; 0x25a1
 800fdb0:	1821      	adds	r1, r4, r0
 800fdb2:	4351      	muls	r1, r2
    z2 += z1;
 800fdb4:	4a31      	ldr	r2, [pc, #196]	; (800fe7c <jpeg_idct_islow+0x2f4>)
 800fdb6:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 800fdba:	4a31      	ldr	r2, [pc, #196]	; (800fe80 <jpeg_idct_islow+0x2f8>)
 800fdbc:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800fdc0:	eb0a 000c 	add.w	r0, sl, ip
 800fdc4:	4a2f      	ldr	r2, [pc, #188]	; (800fe84 <jpeg_idct_islow+0x2fc>)
 800fdc6:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 800fdc8:	f640 128e 	movw	r2, #2446	; 0x98e
 800fdcc:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 800fdd0:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800fdd2:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 800fdd6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fdda:	4a2b      	ldr	r2, [pc, #172]	; (800fe88 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800fddc:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fde0:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800fde4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fde8:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fdec:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 800fdee:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800fdf0:	4454      	add	r4, sl
 800fdf2:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800fdf6:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fdfa:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 800fdfe:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fe02:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 800fe04:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fe08:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800fe0a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fe0e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 800fe12:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fe16:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 800fe18:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fe1c:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fe20:	9a01      	ldr	r2, [sp, #4]
 800fe22:	5dd0      	ldrb	r0, [r2, r7]
 800fe24:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800fe26:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 800fe28:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800fe2c:	5c10      	ldrb	r0, [r2, r0]
 800fe2e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800fe30:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fe34:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800fe36:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fe38:	eb02 000b 	add.w	r0, r2, fp
 800fe3c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800fe3e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fe42:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fe44:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fe46:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fe48:	eba2 010b 	sub.w	r1, r2, fp
 800fe4c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800fe4e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fe52:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fe54:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fe56:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fe58:	9a03      	ldr	r2, [sp, #12]
 800fe5a:	4462      	add	r2, ip
			    & RANGE_MASK];
 800fe5c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fe60:	5c8a      	ldrb	r2, [r1, r2]
 800fe62:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800fe64:	9a03      	ldr	r2, [sp, #12]
 800fe66:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 800fe6a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800fe6e:	f811 200c 	ldrb.w	r2, [r1, ip]
 800fe72:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fe74:	e6f5      	b.n	800fc62 <jpeg_idct_islow+0xda>
 800fe76:	bf00      	nop
 800fe78:	ffffc4df 	.word	0xffffc4df
 800fe7c:	ffffc13b 	.word	0xffffc13b
 800fe80:	fffff384 	.word	0xfffff384
 800fe84:	ffffe333 	.word	0xffffe333
 800fe88:	ffffadfd 	.word	0xffffadfd

0800fe8c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	b0b9      	sub	sp, #228	; 0xe4
 800fe92:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fe94:	1e96      	subs	r6, r2, #2
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe9a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fe9e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fea2:	3380      	adds	r3, #128	; 0x80
 800fea4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fea6:	f102 030c 	add.w	r3, r2, #12
 800feaa:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800feac:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800feb0:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800feb4:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800feb8:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800febc:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fec0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fec2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fec6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 800feca:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fed0:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fed2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800fed4:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fed6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800feda:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fede:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 800fee2:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fee4:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 800fee8:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800feec:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fef0:	eba4 010e 	sub.w	r1, r4, lr
 800fef4:	f640 2212 	movw	r2, #2578	; 0xa12
 800fef8:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fefc:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fefe:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800ff02:	eb09 0007 	add.w	r0, r9, r7
 800ff06:	4410      	add	r0, r2
 800ff08:	4a87      	ldr	r2, [pc, #540]	; (8010128 <jpeg_idct_7x7+0x29c>)
 800ff0a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800ff0e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 800ff10:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800ff14:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800ff18:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800ff1c:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800ff20:	fb02 1203 	mla	r2, r2, r3, r1
 800ff24:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff28:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800ff2c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800ff30:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800ff32:	4b7e      	ldr	r3, [pc, #504]	; (801012c <jpeg_idct_7x7+0x2a0>)
 800ff34:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff38:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 800ff3c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800ff3e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff40:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff44:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff46:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800ff48:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff4a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 800ff4e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800ff52:	eb03 0904 	add.w	r9, r3, r4
 800ff56:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800ff5a:	eba3 0904 	sub.w	r9, r3, r4
 800ff5e:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800ff62:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800ff64:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800ff66:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800ff6a:	4a71      	ldr	r2, [pc, #452]	; (8010130 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 800ff6c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 800ff70:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800ff72:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800ff76:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800ff78:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ff7c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800ff80:	44a1      	add	r9, r4
    tmp0 += z2;
 800ff82:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ff84:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800ff88:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ff8a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800ff8c:	4453      	add	r3, sl
 800ff8e:	12db      	asrs	r3, r3, #11
 800ff90:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ff94:	9b03      	ldr	r3, [sp, #12]
 800ff96:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ff9a:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ff9e:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ffa2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ffa4:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ffa8:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ffac:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ffae:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ffb0:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ffb2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ffb4:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ffb8:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ffba:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ffbe:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800ffc2:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ffc4:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800ffc8:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800ffcc:	ea4f 23ee 	mov.w	r3, lr, asr #11
 800ffd0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	42b3      	cmp	r3, r6
 800ffd8:	f47f af68 	bne.w	800feac <jpeg_idct_7x7+0x20>
 800ffdc:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 800ffde:	ac07      	add	r4, sp, #28
 800ffe0:	f1a3 0904 	sub.w	r9, r3, #4
 800ffe4:	3318      	adds	r3, #24
 800ffe6:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800ffe8:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 800ffec:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 800ffee:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 800fff0:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 800fff4:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fff6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 800fffa:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fffc:	1b51      	subs	r1, r2, r5
 800fffe:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8010002:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010006:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801000a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801000e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8010012:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010016:	eba3 0c02 	sub.w	ip, r3, r2
 801001a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801001e:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010020:	4941      	ldr	r1, [pc, #260]	; (8010128 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010022:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010026:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801002a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801002e:	eb0e 000c 	add.w	r0, lr, ip
 8010032:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8010036:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801003a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801003e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010042:	fb02 f208 	mul.w	r2, r2, r8
 8010046:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801004a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801004e:	4d37      	ldr	r5, [pc, #220]	; (801012c <jpeg_idct_7x7+0x2a0>)
 8010050:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8010054:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010058:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 801005a:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801005e:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010060:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010064:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010066:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010068:	f641 53ef 	movw	r3, #7663	; 0x1def
 801006c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010070:	eba2 050a 	sub.w	r5, r2, sl
 8010074:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010078:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801007a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801007c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801007e:	4b2c      	ldr	r3, [pc, #176]	; (8010130 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8010080:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8010084:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010086:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801008a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801008e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010090:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010094:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010098:	4455      	add	r5, sl
    tmp0 += z2;
 801009a:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801009c:	fb0b 220e 	mla	r2, fp, lr, r2
 80100a0:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80100a2:	eb01 020c 	add.w	r2, r1, ip
 80100a6:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 80100a8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80100ac:	5c9a      	ldrb	r2, [r3, r2]
 80100ae:	9b04      	ldr	r3, [sp, #16]
 80100b0:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80100b2:	9b02      	ldr	r3, [sp, #8]
 80100b4:	eba3 0c0c 	sub.w	ip, r3, ip
 80100b8:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80100ba:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80100be:	f813 200c 	ldrb.w	r2, [r3, ip]
 80100c2:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80100c4:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80100c6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80100c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80100cc:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80100d0:	5c9a      	ldrb	r2, [r3, r2]
 80100d2:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80100d4:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100d6:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80100d8:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100da:	eb03 020a 	add.w	r2, r3, sl
 80100de:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80100e0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100e4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80100e6:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100e8:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80100ea:	eba3 0a0a 	sub.w	sl, r3, sl
 80100ee:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80100f0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80100f4:	f813 300a 	ldrb.w	r3, [r3, sl]
 80100f8:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 80100fa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80100fe:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010102:	f642 5341 	movw	r3, #11585	; 0x2d41
 8010106:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801010a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801010c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010110:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010114:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010118:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801011a:	9b05      	ldr	r3, [sp, #20]
 801011c:	454b      	cmp	r3, r9
 801011e:	f47f af63 	bne.w	800ffe8 <jpeg_idct_7x7+0x15c>
  }
}
 8010122:	b039      	add	sp, #228	; 0xe4
 8010124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010128:	ffffc515 	.word	0xffffc515
 801012c:	ffffb0f1 	.word	0xffffb0f1
 8010130:	ffffd3e1 	.word	0xffffd3e1

08010134 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010138:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801013c:	b0a7      	sub	sp, #156	; 0x9c
 801013e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010140:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010142:	3080      	adds	r0, #128	; 0x80
 8010144:	320a      	adds	r2, #10
 8010146:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010148:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801014a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801014c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801014e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010152:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010156:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801015a:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801015c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010160:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010162:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010166:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801016a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 801016c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801016e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010172:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010176:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801017a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801017e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8010180:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010182:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010186:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8010188:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801018c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010190:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010192:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8010194:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010198:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 801019c:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801019e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101a2:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80101a4:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80101a8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101ac:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80101b0:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80101b4:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80101b8:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80101bc:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80101c0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80101c4:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80101c8:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80101cc:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80101d0:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80101d4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80101d8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80101dc:	12d2      	asrs	r2, r2, #11
 80101de:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80101e2:	ea4f 22ee 	mov.w	r2, lr, asr #11
 80101e6:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80101e8:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80101ec:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80101f0:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80101f2:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80101f6:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80101fa:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80101fc:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80101fe:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010202:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010204:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010206:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010208:	42b2      	cmp	r2, r6
 801020a:	d1a0      	bne.n	801014e <jpeg_idct_6x6+0x1a>
 801020c:	f1a3 0e04 	sub.w	lr, r3, #4
 8010210:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010214:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010216:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801021a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801021e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010220:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010222:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8010226:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8010228:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801022c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010230:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010234:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010238:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801023c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010240:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010244:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8010248:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 801024c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010250:	f242 7231 	movw	r2, #10033	; 0x2731
 8010254:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8010258:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 801025c:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010260:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010264:	eb04 0508 	add.w	r5, r4, r8
 8010268:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801026c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010270:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010274:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010278:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801027c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801027e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010282:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010286:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801028a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801028e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8010292:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010296:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801029a:	5d04      	ldrb	r4, [r0, r4]
 801029c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801029e:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80102a2:	9800      	ldr	r0, [sp, #0]
 80102a4:	5d84      	ldrb	r4, [r0, r6]
 80102a6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80102a8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80102ac:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80102b0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80102b4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80102b8:	5d04      	ldrb	r4, [r0, r4]
 80102ba:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80102bc:	f810 3008 	ldrb.w	r3, [r0, r8]
 80102c0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80102c2:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80102c6:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 80102ca:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80102ce:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80102d2:	5cc3      	ldrb	r3, [r0, r3]
 80102d4:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80102d6:	5d43      	ldrb	r3, [r0, r5]
 80102d8:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80102da:	d19c      	bne.n	8010216 <jpeg_idct_6x6+0xe2>
  }
}
 80102dc:	b027      	add	sp, #156	; 0x9c
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080102e4 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80102e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102e8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80102ec:	b09d      	sub	sp, #116	; 0x74
 80102ee:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80102f0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102f2:	3080      	adds	r0, #128	; 0x80
 80102f4:	3208      	adds	r2, #8
 80102f6:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80102f8:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80102fa:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80102fe:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010302:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010304:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010306:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801030a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801030c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010310:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010314:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010316:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010318:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801031c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801031e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010322:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010324:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010326:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801032a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801032e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010332:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010336:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801033a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801033e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010342:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010344:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010348:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801034c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8010350:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010352:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8010356:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801035a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801035e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010362:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010366:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010368:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801036c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010370:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010372:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010376:	483b      	ldr	r0, [pc, #236]	; (8010464 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010378:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801037a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801037e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010382:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010386:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010388:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801038c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010390:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010394:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010398:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801039c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80103a0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80103a4:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80103a8:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80103ac:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80103ae:	d1aa      	bne.n	8010306 <jpeg_idct_5x5+0x22>
 80103b0:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 80103b4:	a903      	add	r1, sp, #12
 80103b6:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80103b8:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80103bc:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80103c0:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80103c2:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80103c6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80103ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80103cc:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80103ce:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80103d2:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103d6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80103da:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103de:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 80103e2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 80103e6:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80103ea:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80103ec:	1b1b      	subs	r3, r3, r4
 80103ee:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80103f2:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80103f6:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 80103fa:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 80103fc:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 80103fe:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010400:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8010404:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010408:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801040a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 801040e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010412:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010416:	4813      	ldr	r0, [pc, #76]	; (8010464 <jpeg_idct_5x5+0x180>)
 8010418:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801041c:	eb05 0b06 	add.w	fp, r5, r6
 8010420:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010422:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8010424:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010428:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801042c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010430:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010432:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010436:	9800      	ldr	r0, [sp, #0]
 8010438:	5d45      	ldrb	r5, [r0, r5]
 801043a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801043c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801043e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010440:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010444:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010448:	5d45      	ldrb	r5, [r0, r5]
 801044a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801044c:	5c82      	ldrb	r2, [r0, r2]
 801044e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010450:	f810 300c 	ldrb.w	r3, [r0, ip]
 8010454:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8010456:	9b01      	ldr	r3, [sp, #4]
 8010458:	4573      	cmp	r3, lr
 801045a:	d1b2      	bne.n	80103c2 <jpeg_idct_5x5+0xde>
  }
}
 801045c:	b01d      	add	sp, #116	; 0x74
 801045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010462:	bf00      	nop
 8010464:	ffffba5c 	.word	0xffffba5c

08010468 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801046e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010470:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8010474:	1e96      	subs	r6, r2, #2
 8010476:	3c04      	subs	r4, #4
 8010478:	1d97      	adds	r7, r2, #6
 801047a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801047c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801047e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010482:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010486:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010590 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801048a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801048e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010490:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010494:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010498:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801049a:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801049e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104a0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104a4:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104a8:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80104ac:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80104b0:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104b4:	6a22      	ldr	r2, [r4, #32]
 80104b6:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80104bc:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80104c0:	eb0a 020b 	add.w	r2, sl, fp
 80104c4:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80104c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80104cc:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80104d0:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80104d4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80104d8:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 80104dc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80104e0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80104e4:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 80104e8:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80104ec:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80104f0:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80104f4:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80104f8:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80104fa:	d1c6      	bne.n	801048a <jpeg_idct_4x4+0x22>
 80104fc:	1f1e      	subs	r6, r3, #4
 80104fe:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010502:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010504:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010508:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801050c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010590 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010510:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010514:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010518:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 801051c:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 801051e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010522:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010526:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801052a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801052e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010532:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010536:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801053a:	eb01 020b 	add.w	r2, r1, fp
 801053e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010542:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010546:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801054a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801054e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010552:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8010554:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010558:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 801055a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801055e:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8010562:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010566:	5c6b      	ldrb	r3, [r5, r1]
 8010568:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801056a:	9b01      	ldr	r3, [sp, #4]
 801056c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010570:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010574:	5ceb      	ldrb	r3, [r5, r3]
 8010576:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010578:	9b01      	ldr	r3, [sp, #4]
 801057a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 801057e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010582:	5cab      	ldrb	r3, [r5, r2]
 8010584:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010586:	d1c3      	bne.n	8010510 <jpeg_idct_4x4+0xa8>
  }
}
 8010588:	b013      	add	sp, #76	; 0x4c
 801058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058e:	bf00      	nop
 8010590:	ffffc4df 	.word	0xffffc4df

08010594 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010598:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801059a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801059e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80105a0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80105a4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80105a6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80105aa:	f1a1 0c04 	sub.w	ip, r1, #4
 80105ae:	1d10      	adds	r0, r2, #4
 80105b0:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80105b2:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80105b6:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105ba:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80105be:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105c0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105c4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80105c8:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105ca:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105ce:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105d2:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105d6:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 80105da:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105de:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80105e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80105e6:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105ea:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 80105ee:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 80105f2:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80105f6:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80105fa:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80105fe:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010602:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010606:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010608:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801060c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010610:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010614:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010616:	d1d0      	bne.n	80105ba <jpeg_idct_3x3+0x26>
 8010618:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801061a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 801061e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010620:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010624:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010628:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801062a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801062c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010630:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010632:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010636:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801063a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801063e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010642:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010646:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010648:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 801064c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010650:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010654:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010658:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 801065c:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8010660:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010664:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010668:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801066c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010670:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010674:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010678:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801067a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801067e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010680:	d1d0      	bne.n	8010624 <jpeg_idct_3x3+0x90>
  }
}
 8010682:	b00b      	add	sp, #44	; 0x2c
 8010684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010688 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801068c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 801068e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010690:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010694:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010698:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801069a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801069c:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80106a0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106a2:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80106a4:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106a6:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 80106a8:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80106aa:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 80106ac:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 80106ae:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80106b0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80106b4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80106b8:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 80106ba:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80106be:	437a      	muls	r2, r7
{
 80106c0:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 80106c2:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 80106c4:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 80106c6:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80106ca:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80106cc:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80106ce:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80106d0:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80106d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80106d6:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80106da:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80106de:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80106e2:	5d2c      	ldrb	r4, [r5, r4]
 80106e4:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80106e8:	5c28      	ldrb	r0, [r5, r0]
 80106ea:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 80106ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80106f2:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 80106f4:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80106f6:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80106f8:	5c6b      	ldrb	r3, [r5, r1]
 80106fa:	7063      	strb	r3, [r4, #1]
}
 80106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010700 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010700:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010702:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010706:	6809      	ldr	r1, [r1, #0]
 8010708:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 801070a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 801070e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010710:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010714:	440a      	add	r2, r1
 8010716:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	9b00      	ldr	r3, [sp, #0]
 801071e:	54d1      	strb	r1, [r2, r3]
}
 8010720:	4770      	bx	lr
	...

08010724 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	b0d1      	sub	sp, #324	; 0x144
 801072a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801072c:	1e96      	subs	r6, r2, #2
 801072e:	9306      	str	r3, [sp, #24]
 8010730:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010732:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010736:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010738:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801073c:	f102 030e 	add.w	r3, r2, #14
 8010740:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010742:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010746:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010748:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801074c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010750:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010752:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010754:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010758:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801075a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801075e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8010762:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010764:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010766:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801076a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801076e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010772:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010774:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010778:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801077c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 801077e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010780:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010784:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8010788:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 801078a:	1a8b      	subs	r3, r1, r2
 801078c:	436b      	muls	r3, r5
 801078e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010790:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010794:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010796:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 801079a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801079c:	188b      	adds	r3, r1, r2
 801079e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80107a0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80107a4:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80107a6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80107aa:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 80107ac:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80107ae:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 80107b0:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 80107b2:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 80107b4:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80107b6:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 80107ba:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107bc:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 80107c0:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 80107c2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107c4:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80107c6:	4b89      	ldr	r3, [pc, #548]	; (80109ec <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107c8:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80107ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80107cc:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80107ce:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 80107d2:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80107d6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80107da:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80107dc:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80107e0:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80107e4:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80107e8:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80107ec:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80107f0:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80107f4:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80107f8:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80107fc:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010800:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010804:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010808:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801080c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8010810:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8010814:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8010818:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801081a:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801081e:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8010822:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010824:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010826:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010828:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 801082a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801082c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010830:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010834:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010836:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010838:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801083a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801083c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801083e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010840:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010844:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010848:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801084a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801084c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010850:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010854:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010858:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801085a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801085e:	9b05      	ldr	r3, [sp, #20]
 8010860:	4413      	add	r3, r2
 8010862:	12db      	asrs	r3, r3, #11
 8010864:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010866:	9b05      	ldr	r3, [sp, #20]
 8010868:	1a9a      	subs	r2, r3, r2
 801086a:	12d2      	asrs	r2, r2, #11
 801086c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010870:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010874:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010878:	12db      	asrs	r3, r3, #11
 801087a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801087c:	9b07      	ldr	r3, [sp, #28]
 801087e:	42b3      	cmp	r3, r6
 8010880:	f47f af5f 	bne.w	8010742 <jpeg_idct_9x9+0x1e>
 8010884:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010886:	aa08      	add	r2, sp, #32
 8010888:	3b04      	subs	r3, #4
 801088a:	9301      	str	r3, [sp, #4]
 801088c:	9b06      	ldr	r3, [sp, #24]
 801088e:	3320      	adds	r3, #32
 8010890:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010892:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010894:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8010898:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801089a:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 801089c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 80108a0:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 80108a4:	9106      	str	r1, [sp, #24]
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	995a      	ldr	r1, [sp, #360]	; 0x168
 80108ac:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80108ae:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 80108b2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80108b6:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80108ba:	f852 3c08 	ldr.w	r3, [r2, #-8]
 80108be:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80108c2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 80108c6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80108ca:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 80108ce:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80108d0:	1a43      	subs	r3, r0, r1
 80108d2:	fb0c f303 	mul.w	r3, ip, r3
 80108d6:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 80108d8:	18f3      	adds	r3, r6, r3
 80108da:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80108dc:	1843      	adds	r3, r0, r1
 80108de:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80108e0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80108e4:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80108e6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80108ea:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 80108ec:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80108ee:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 80108f0:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 80108f2:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 80108f4:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80108f6:	4f3d      	ldr	r7, [pc, #244]	; (80109ec <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 80108f8:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 80108fa:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 80108fe:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010900:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8010904:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010906:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 801090a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801090e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010910:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010914:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010918:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801091c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010920:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010924:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010928:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801092c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010930:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010934:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010938:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 801093c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010940:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8010942:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010944:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010948:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801094a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801094e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010952:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010956:	448e      	add	lr, r1
			    & RANGE_MASK];
 8010958:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801095c:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010960:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8010962:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010966:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801096a:	9b06      	ldr	r3, [sp, #24]
 801096c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801096e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010970:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8010974:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010976:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801097a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801097e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8010980:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010984:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010988:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801098c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801098e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8010992:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010994:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010996:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8010998:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 801099c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80109a0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80109a4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80109a6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80109aa:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80109ac:	9b05      	ldr	r3, [sp, #20]
 80109ae:	4473      	add	r3, lr
			    & RANGE_MASK];
 80109b0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80109b4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80109b8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80109ba:	9b05      	ldr	r3, [sp, #20]
 80109bc:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 80109c0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80109c4:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 80109c8:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80109ca:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 80109cc:	9b02      	ldr	r3, [sp, #8]
 80109ce:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 80109d2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80109d6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80109da:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 80109dc:	9b07      	ldr	r3, [sp, #28]
 80109de:	428b      	cmp	r3, r1
 80109e0:	f47f af57 	bne.w	8010892 <jpeg_idct_9x9+0x16e>
  }
}
 80109e4:	b051      	add	sp, #324	; 0x144
 80109e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ea:	bf00      	nop
 80109ec:	ffffd8cf 	.word	0xffffd8cf

080109f0 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80109f4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80109f8:	b0d7      	sub	sp, #348	; 0x15c
 80109fa:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80109fc:	f1a2 0b02 	sub.w	fp, r2, #2
 8010a00:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a02:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8010a06:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010a08:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a0a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a0c:	f102 030e 	add.w	r3, r2, #14
 8010a10:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a12:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010a16:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a1a:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a1e:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a20:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a24:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010a2a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a2e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010a30:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010a34:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010a36:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010a3a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010a3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010a42:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8010a44:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8010a46:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010a48:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010a4a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010a4e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a52:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010a56:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a5a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010a5c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8010a60:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010a62:	19f3      	adds	r3, r6, r7
 8010a64:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010a66:	f241 0071 	movw	r0, #4209	; 0x1071
 8010a6a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010a6e:	489d      	ldr	r0, [pc, #628]	; (8010ce4 <jpeg_idct_10x10+0x2f4>)
 8010a70:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010a74:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8010a78:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a7a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8010a7e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010a80:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a82:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8010a86:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a88:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010a8a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a8e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a90:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8010a92:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010a94:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a98:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010a9a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010a9e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010aa2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8010aa6:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8010aa8:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8010aac:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010aae:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010ab2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010ab6:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010aba:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 8010abe:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010ac2:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010ac6:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010aca:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010ace:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010ad0:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010ad2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010ad6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010ad8:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010ada:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010ade:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010ae2:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010ae4:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010ae8:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010aea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010aee:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010af2:	f241 468c 	movw	r6, #5260	; 0x148c
 8010af6:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010af8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010afc:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010b00:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010b04:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010b08:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010b0a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010b0c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010b0e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010b12:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8010b16:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010b1a:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010b1c:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010b1e:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010b20:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010b22:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010b26:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010b28:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010b2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010b2c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010b2e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010b32:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8010b36:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010b3a:	9b02      	ldr	r3, [sp, #8]
 8010b3c:	442b      	add	r3, r5
 8010b3e:	12db      	asrs	r3, r3, #11
 8010b40:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b42:	9b02      	ldr	r3, [sp, #8]
 8010b44:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b46:	9b01      	ldr	r3, [sp, #4]
 8010b48:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b4a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b4c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b4e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b52:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010b54:	9b01      	ldr	r3, [sp, #4]
 8010b56:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010b5a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010b5c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010b60:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010b62:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010b66:	f47f af54 	bne.w	8010a12 <jpeg_idct_10x10+0x22>
 8010b6a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8010b6c:	a906      	add	r1, sp, #24
 8010b6e:	f1a3 0b04 	sub.w	fp, r3, #4
 8010b72:	3324      	adds	r3, #36	; 0x24
 8010b74:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010b76:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010b7a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010b7e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010b80:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8010b82:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8010b86:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010b88:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8010b8c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010b8e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b92:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010b96:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b9a:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010b9c:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8010b9e:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010ba2:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8010ba4:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8010ba8:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010bac:	006d      	lsls	r5, r5, #1
 8010bae:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8010bb2:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010bb6:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010bb8:	19eb      	adds	r3, r5, r7
 8010bba:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010bbc:	f241 0071 	movw	r0, #4209	; 0x1071
 8010bc0:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010bc4:	4847      	ldr	r0, [pc, #284]	; (8010ce4 <jpeg_idct_10x10+0x2f4>)
 8010bc6:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010bca:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8010bce:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8010bd0:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8010bd4:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010bd6:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8010bd8:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010bda:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8010bde:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8010be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8010be4:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8010be8:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8010bec:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010bee:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010bf2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010bf6:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8010bfa:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010bfe:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010c02:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8010c06:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c0a:	f240 7014 	movw	r0, #1812	; 0x714
 8010c0e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010c12:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010c16:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010c18:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c1c:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010c20:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010c24:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c26:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010c28:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010c2c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010c2e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c32:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010c36:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c3a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c3e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c40:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c42:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c44:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c46:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c4a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c4e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010c52:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c56:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8010c58:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c5c:	444d      	add	r5, r9
			    & RANGE_MASK];
 8010c5e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c62:	5c82      	ldrb	r2, [r0, r2]
 8010c64:	9804      	ldr	r0, [sp, #16]
 8010c66:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010c68:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c6a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010c6c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010c70:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c72:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010c74:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8010c76:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8010c7a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c7e:	5c82      	ldrb	r2, [r0, r2]
 8010c80:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010c82:	5dc3      	ldrb	r3, [r0, r7]
 8010c84:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	4443      	add	r3, r8
			    & RANGE_MASK];
 8010c8a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010c8e:	5cc3      	ldrb	r3, [r0, r3]
 8010c90:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010c92:	9b01      	ldr	r3, [sp, #4]
 8010c94:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8010c98:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010c9c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010ca0:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010ca2:	9b03      	ldr	r3, [sp, #12]
 8010ca4:	442b      	add	r3, r5
			    & RANGE_MASK];
 8010ca6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010caa:	5cc3      	ldrb	r3, [r0, r3]
 8010cac:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010cae:	9b03      	ldr	r3, [sp, #12]
 8010cb0:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8010cb2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010cb6:	5d43      	ldrb	r3, [r0, r5]
 8010cb8:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010cba:	9b02      	ldr	r3, [sp, #8]
 8010cbc:	4453      	add	r3, sl
			    & RANGE_MASK];
 8010cbe:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010cc2:	5cc3      	ldrb	r3, [r0, r3]
 8010cc4:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 8010ccc:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010cd0:	f810 300a 	ldrb.w	r3, [r0, sl]
 8010cd4:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8010cd6:	9b05      	ldr	r3, [sp, #20]
 8010cd8:	455b      	cmp	r3, fp
 8010cda:	f47f af4c 	bne.w	8010b76 <jpeg_idct_10x10+0x186>
  }
}
 8010cde:	b057      	add	sp, #348	; 0x15c
 8010ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce4:	ffffba5c 	.word	0xffffba5c

08010ce8 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	b0e5      	sub	sp, #404	; 0x194
 8010cee:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010cf0:	f1a2 0a02 	sub.w	sl, r2, #2
 8010cf4:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010cf6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010cfa:	3380      	adds	r3, #128	; 0x80
 8010cfc:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010cfe:	1f0b      	subs	r3, r1, #4
 8010d00:	9302      	str	r3, [sp, #8]
 8010d02:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8010d06:	aa0c      	add	r2, sp, #48	; 0x30
 8010d08:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d0a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010d0c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d10:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d14:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d16:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d1a:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d1e:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d20:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d22:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d26:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d28:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d2c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8010d30:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d32:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d34:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d38:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d3e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010d40:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010d44:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010d46:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010d4a:	eba4 0b06 	sub.w	fp, r4, r6
 8010d4e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010d52:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8010d56:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8010d58:	1985      	adds	r5, r0, r6
    z4 -= z2;
 8010d5a:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010d5c:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010d60:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8010d64:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010d66:	449c      	add	ip, r3
 8010d68:	49d0      	ldr	r1, [pc, #832]	; (80110ac <jpeg_idct_11x11+0x3c4>)
 8010d6a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010d6e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010d72:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010d74:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010d78:	49cd      	ldr	r1, [pc, #820]	; (80110b0 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010d7a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010d7c:	fb01 3c00 	mla	ip, r1, r0, r3
 8010d80:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010d84:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010d88:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010d8c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 8010d8e:	49c9      	ldr	r1, [pc, #804]	; (80110b4 <jpeg_idct_11x11+0x3cc>)
 8010d90:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010d94:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8010d98:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010d9c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010da0:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010da2:	49c5      	ldr	r1, [pc, #788]	; (80110b8 <jpeg_idct_11x11+0x3d0>)
 8010da4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010da6:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010daa:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010dae:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010db2:	1941      	adds	r1, r0, r5
 8010db4:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010db6:	9902      	ldr	r1, [sp, #8]
 8010db8:	6a08      	ldr	r0, [r1, #32]
 8010dba:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dbe:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010dc0:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dc4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010dc6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8010dca:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010dce:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8010dd2:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8010dd4:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010dd8:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010ddc:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010de0:	4435      	add	r5, r6
 8010de2:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010de4:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8010de8:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010dea:	eb09 040c 	add.w	r4, r9, ip
 8010dee:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010df2:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010df6:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010dfa:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010dfe:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010e00:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010e04:	44c6      	add	lr, r8
 8010e06:	49ad      	ldr	r1, [pc, #692]	; (80110bc <jpeg_idct_11x11+0x3d4>)
 8010e08:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010e0c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010e10:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010e14:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010e18:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010e1a:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010e1e:	fb01 440c 	mla	r4, r1, ip, r4
 8010e22:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010e24:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010e26:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010e28:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010e2a:	49a5      	ldr	r1, [pc, #660]	; (80110c0 <jpeg_idct_11x11+0x3d8>)
 8010e2c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010e2e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8010e32:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010e34:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010e38:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010e3a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010e3c:	f242 000b 	movw	r0, #8203	; 0x200b
 8010e40:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010e44:	489f      	ldr	r0, [pc, #636]	; (80110c4 <jpeg_idct_11x11+0x3dc>)
 8010e46:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010e4a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 8010e4e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e52:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010e56:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e5a:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010e5c:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e5e:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010e62:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8010e66:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010e6a:	eb01 0009 	add.w	r0, r1, r9
 8010e6e:	12c0      	asrs	r0, r0, #11
 8010e70:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010e72:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010e76:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010e78:	12c0      	asrs	r0, r0, #11
 8010e7a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010e7e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010e80:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010e82:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010e84:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010e86:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010e88:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010e8a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010e8e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010e92:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010e96:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010e98:	12c0      	asrs	r0, r0, #11
 8010e9a:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010e9c:	ea4f 20e8 	mov.w	r0, r8, asr #11
 8010ea0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010ea4:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010ea6:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010eaa:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010eac:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010eae:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010eb0:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010eb4:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010eb8:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8010ebc:	12db      	asrs	r3, r3, #11
 8010ebe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ec4:	4553      	cmp	r3, sl
 8010ec6:	f47f af20 	bne.w	8010d0a <jpeg_idct_11x11+0x22>
 8010eca:	9b08      	ldr	r3, [sp, #32]
 8010ecc:	3b04      	subs	r3, #4
 8010ece:	9303      	str	r3, [sp, #12]
 8010ed0:	9b08      	ldr	r3, [sp, #32]
 8010ed2:	3328      	adds	r3, #40	; 0x28
 8010ed4:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8010ed6:	ab0c      	add	r3, sp, #48	; 0x30
 8010ed8:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010eda:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010edc:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8010ee0:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010ee2:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8010ee6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010eea:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 8010eee:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8010ef0:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8010ef2:	9109      	str	r1, [sp, #36]	; 0x24
 8010ef4:	9303      	str	r3, [sp, #12]
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010efa:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 8010efc:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8010efe:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010f00:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8010f02:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010f04:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010f08:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010f0c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010f0e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010f12:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010f14:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010f16:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 8010f1a:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8010f1c:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8010f1e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010f20:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8010f24:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010f28:	eb0e 000c 	add.w	r0, lr, ip
 8010f2c:	4a5f      	ldr	r2, [pc, #380]	; (80110ac <jpeg_idct_11x11+0x3c4>)
 8010f2e:	4418      	add	r0, r3
 8010f30:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f34:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8010f38:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010f3c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f3e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f42:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f44:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010f46:	4a5a      	ldr	r2, [pc, #360]	; (80110b0 <jpeg_idct_11x11+0x3c8>)
 8010f48:	fb02 3e04 	mla	lr, r2, r4, r3
 8010f4c:	eb0e 020c 	add.w	r2, lr, ip
 8010f50:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8010f52:	4a58      	ldr	r2, [pc, #352]	; (80110b4 <jpeg_idct_11x11+0x3cc>)
 8010f54:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010f58:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 8010f5c:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f60:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010f64:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010f66:	4a54      	ldr	r2, [pc, #336]	; (80110b8 <jpeg_idct_11x11+0x3d0>)
 8010f68:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f6a:	fb07 4406 	mla	r4, r7, r6, r4
 8010f6e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f70:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f74:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8010f76:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8010f78:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 8010f7c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 8010f7e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8010f82:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8010f86:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010f8a:	4a4c      	ldr	r2, [pc, #304]	; (80110bc <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f8c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010f90:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f94:	4466      	add	r6, ip
 8010f96:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010f98:	f641 456a 	movw	r5, #7274	; 0x1c6a
 8010f9c:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010f9e:	eb07 0508 	add.w	r5, r7, r8
 8010fa2:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010fa6:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8010faa:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010fae:	eb04 050b 	add.w	r5, r4, fp
 8010fb2:	444d      	add	r5, r9
 8010fb4:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010fb8:	eb0e 0508 	add.w	r5, lr, r8
 8010fbc:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8010fc0:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fc4:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010fc6:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fca:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010fce:	4a3c      	ldr	r2, [pc, #240]	; (80110c0 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010fd0:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010fd2:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fd6:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010fd8:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010fdc:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010fde:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8010fe0:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010fe2:	fb0b 440c 	mla	r4, fp, ip, r4
 8010fe6:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010fe8:	f242 040b 	movw	r4, #8203	; 0x200b
 8010fec:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010ff0:	4c34      	ldr	r4, [pc, #208]	; (80110c4 <jpeg_idct_11x11+0x3dc>)
 8010ff2:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010ff6:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 8010ffa:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010ffe:	19d4      	adds	r4, r2, r7
 8011000:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011002:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011006:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011008:	5d14      	ldrb	r4, [r2, r4]
 801100a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801100c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801100e:	9a05      	ldr	r2, [sp, #20]
 8011010:	1bd0      	subs	r0, r2, r7
 8011012:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011014:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011018:	5c10      	ldrb	r0, [r2, r0]
 801101a:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801101c:	9a04      	ldr	r2, [sp, #16]
 801101e:	eb02 000a 	add.w	r0, r2, sl
 8011022:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011024:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011028:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801102a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801102c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801102e:	eba2 0a0a 	sub.w	sl, r2, sl
 8011032:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011034:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011038:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801103c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801103e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011040:	1950      	adds	r0, r2, r5
 8011042:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011044:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011048:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801104a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801104c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801104e:	1b55      	subs	r5, r2, r5
 8011050:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011052:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011056:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011058:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801105a:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801105c:	eb02 0009 	add.w	r0, r2, r9
 8011060:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011062:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011066:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011068:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801106a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801106c:	eba2 0909 	sub.w	r9, r2, r9
 8011070:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011072:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011076:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801107a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801107c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801107e:	1990      	adds	r0, r2, r6
 8011080:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011082:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011086:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011088:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801108a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801108c:	1b96      	subs	r6, r2, r6
 801108e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011090:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011094:	5d90      	ldrb	r0, [r2, r6]
 8011096:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011098:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801109c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801109e:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80110a2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80110a4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80110a8:	5cd3      	ldrb	r3, [r2, r3]
 80110aa:	e00d      	b.n	80110c8 <jpeg_idct_11x11+0x3e0>
 80110ac:	ffffc5b4 	.word	0xffffc5b4
 80110b0:	ffffcf91 	.word	0xffffcf91
 80110b4:	ffffdb05 	.word	0xffffdb05
 80110b8:	ffffd37d 	.word	0xffffd37d
 80110bc:	ffffe276 	.word	0xffffe276
 80110c0:	ffffc675 	.word	0xffffc675
 80110c4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80110c8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80110ca:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80110cc:	9b02      	ldr	r3, [sp, #8]
 80110ce:	3320      	adds	r3, #32
 80110d0:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80110d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110d4:	4293      	cmp	r3, r2
 80110d6:	f47f af00 	bne.w	8010eda <jpeg_idct_11x11+0x1f2>
  }
}
 80110da:	b065      	add	sp, #404	; 0x194
 80110dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110e0 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	b0eb      	sub	sp, #428	; 0x1ac
 80110e6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80110e8:	f1a2 0902 	sub.w	r9, r2, #2
 80110ec:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80110ee:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80110f2:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80110f6:	1f0b      	subs	r3, r1, #4
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	f102 030e 	add.w	r3, r2, #14
 80110fe:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8011100:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011102:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011104:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011108:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801110c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011110:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011114:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011116:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801111a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801111c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011120:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011124:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011126:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801112a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801112c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801112e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011130:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011132:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011136:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801113a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801113c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011140:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011144:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011146:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8011148:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801114a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 801114e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8011152:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8011154:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8011158:	eb07 010c 	add.w	r1, r7, ip
 801115c:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 801115e:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8011162:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8011164:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8011168:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 801116a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 801116c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801116e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8011172:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8011174:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011176:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801117a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801117c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801117e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011180:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011184:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8011188:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801118a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801118c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801118e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011192:	6a12      	ldr	r2, [r2, #32]
 8011194:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011196:	9a00      	ldr	r2, [sp, #0]
 8011198:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801119a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801119e:	9a00      	ldr	r2, [sp, #0]
 80111a0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80111a4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80111a8:	49b6      	ldr	r1, [pc, #728]	; (8011484 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80111aa:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80111ac:	9a00      	ldr	r2, [sp, #0]
 80111ae:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80111b2:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80111b4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80111b6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80111ba:	49b3      	ldr	r1, [pc, #716]	; (8011488 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80111bc:	eb02 0e06 	add.w	lr, r2, r6
 80111c0:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80111c4:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80111c8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80111cc:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80111d0:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80111d4:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80111d8:	18ae      	adds	r6, r5, r2
 80111da:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80111dc:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80111de:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80111e0:	49aa      	ldr	r1, [pc, #680]	; (801148c <jpeg_idct_12x12+0x3ac>)
 80111e2:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80111e6:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80111e8:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80111ec:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80111f0:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80111f2:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 80111f6:	fb0a 4402 	mla	r4, sl, r2, r4
 80111fa:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80111fc:	49a4      	ldr	r1, [pc, #656]	; (8011490 <jpeg_idct_12x12+0x3b0>)
 80111fe:	fb01 0007 	mla	r0, r1, r7, r0
 8011202:	49a4      	ldr	r1, [pc, #656]	; (8011494 <jpeg_idct_12x12+0x3b4>)
 8011204:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011208:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801120a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801120e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011212:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011214:	eb02 0e05 	add.w	lr, r2, r5
 8011218:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801121c:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011220:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011222:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011226:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801122a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801122e:	12ff      	asrs	r7, r7, #11
 8011230:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011234:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011238:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801123a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801123e:	188f      	adds	r7, r1, r2
 8011240:	12ff      	asrs	r7, r7, #11
 8011242:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011244:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011246:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011248:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801124a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801124c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011250:	12d2      	asrs	r2, r2, #11
 8011252:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011254:	9a05      	ldr	r2, [sp, #20]
 8011256:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011258:	9a06      	ldr	r2, [sp, #24]
 801125a:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801125c:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801125e:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011260:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011264:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011266:	9a06      	ldr	r2, [sp, #24]
 8011268:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801126a:	9a02      	ldr	r2, [sp, #8]
 801126c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801126e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011270:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011272:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011276:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011278:	9a02      	ldr	r2, [sp, #8]
 801127a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801127c:	9a04      	ldr	r2, [sp, #16]
 801127e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011280:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011282:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011284:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011288:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801128c:	9a04      	ldr	r2, [sp, #16]
 801128e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011290:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011292:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011294:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011296:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801129a:	f47f af32 	bne.w	8011102 <jpeg_idct_12x12+0x22>
 801129e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80112a0:	aa0a      	add	r2, sp, #40	; 0x28
 80112a2:	f1a3 0a04 	sub.w	sl, r3, #4
 80112a6:	332c      	adds	r3, #44	; 0x2c
 80112a8:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80112aa:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80112ae:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 80112b2:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80112b4:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 80112b6:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 80112ba:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 80112be:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80112c0:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80112c2:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80112c6:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80112c8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80112cc:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80112d0:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 80112d2:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80112d4:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80112d8:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80112dc:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80112de:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 80112e2:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 80112e6:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 80112ea:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 80112ec:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 80112f0:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 80112f4:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 80112f8:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 80112fc:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 80112fe:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8011300:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011304:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8011308:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 801130c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 801130e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 8011310:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 8011314:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011316:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 8011318:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801131c:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801131e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011322:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011326:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801132a:	4956      	ldr	r1, [pc, #344]	; (8011484 <jpeg_idct_12x12+0x3a4>)
 801132c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 801132e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011332:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011334:	eb04 0c06 	add.w	ip, r4, r6
 8011338:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801133c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8011340:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011344:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011348:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801134c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011350:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011354:	4b4c      	ldr	r3, [pc, #304]	; (8011488 <jpeg_idct_12x12+0x3a8>)
 8011356:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801135a:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 801135e:	eb01 0609 	add.w	r6, r1, r9
 8011362:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011366:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801136a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801136c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8011370:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011374:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011378:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801137a:	4845      	ldr	r0, [pc, #276]	; (8011490 <jpeg_idct_12x12+0x3b0>)
 801137c:	fb00 1103 	mla	r1, r0, r3, r1
 8011380:	4b44      	ldr	r3, [pc, #272]	; (8011494 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011382:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011384:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011388:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 801138c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 801138e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011392:	4461      	add	r1, ip
    z2 -= z3;
 8011394:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011396:	4b40      	ldr	r3, [pc, #256]	; (8011498 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011398:	eb04 0c05 	add.w	ip, r4, r5
 801139c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80113a0:	f641 087e 	movw	r8, #6270	; 0x187e
 80113a4:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113a8:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113ac:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80113b0:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 80113b4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113b8:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80113ba:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113be:	f81b c008 	ldrb.w	ip, [fp, r8]
 80113c2:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113c6:	9b00      	ldr	r3, [sp, #0]
 80113c8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80113cc:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113ce:	9b01      	ldr	r3, [sp, #4]
 80113d0:	191f      	adds	r7, r3, r4
 80113d2:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80113d4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113d8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80113dc:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80113de:	9b01      	ldr	r3, [sp, #4]
 80113e0:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 80113e4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80113e8:	f81b 4008 	ldrb.w	r4, [fp, r8]
 80113ec:	9b00      	ldr	r3, [sp, #0]
 80113ee:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80113f0:	9b04      	ldr	r3, [sp, #16]
 80113f2:	199c      	adds	r4, r3, r6
 80113f4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80113f6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80113fa:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80113fe:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011400:	9b04      	ldr	r3, [sp, #16]
 8011402:	1b9e      	subs	r6, r3, r6
 8011404:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011406:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801140a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 801140e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011410:	9b05      	ldr	r3, [sp, #20]
 8011412:	eb03 0409 	add.w	r4, r3, r9
 8011416:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011418:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801141c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011420:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011422:	9b05      	ldr	r3, [sp, #20]
 8011424:	eba3 0009 	sub.w	r0, r3, r9
 8011428:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801142a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801142e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011432:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011434:	9b02      	ldr	r3, [sp, #8]
 8011436:	1958      	adds	r0, r3, r5
 8011438:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801143a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801143e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011442:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011444:	9b02      	ldr	r3, [sp, #8]
 8011446:	1b5d      	subs	r5, r3, r5
 8011448:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801144a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801144e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8011452:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	1858      	adds	r0, r3, r1
 8011458:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801145a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801145e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011462:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011468:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801146c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011470:	9b00      	ldr	r3, [sp, #0]
 8011472:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011474:	9b07      	ldr	r3, [sp, #28]
 8011476:	4553      	cmp	r3, sl
 8011478:	f47f af17 	bne.w	80112aa <jpeg_idct_12x12+0x1ca>
  }
}
 801147c:	b06b      	add	sp, #428	; 0x1ac
 801147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011482:	bf00      	nop
 8011484:	ffffeeaf 	.word	0xffffeeaf
 8011488:	ffffde8b 	.word	0xffffde8b
 801148c:	ffffd0b0 	.word	0xffffd0b0
 8011490:	ffffea5c 	.word	0xffffea5c
 8011494:	ffffc08c 	.word	0xffffc08c
 8011498:	ffffc4df 	.word	0xffffc4df

0801149c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a0:	b0f9      	sub	sp, #484	; 0x1e4
 80114a2:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 80114a4:	f1a2 0b02 	sub.w	fp, r2, #2
 80114a8:	930c      	str	r3, [sp, #48]	; 0x30
 80114aa:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80114ac:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80114b0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80114b4:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80114b8:	aa10      	add	r2, sp, #64	; 0x40
 80114ba:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114bc:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80114c0:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114c4:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80114c8:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80114cc:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80114d0:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114d2:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114d4:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80114d8:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 80114dc:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80114de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114e2:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80114e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114e6:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80114ec:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80114ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80114f2:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 80114f4:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 80114f6:	1a09      	subs	r1, r1, r0
 80114f8:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80114fa:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80114fe:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011500:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8011504:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011508:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 801150c:	fb00 5004 	mla	r0, r0, r4, r5
 8011510:	4408      	add	r0, r1
 8011512:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011514:	f241 000c 	movw	r0, #4108	; 0x100c
 8011518:	4360      	muls	r0, r4
 801151a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801151c:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011520:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011522:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011526:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801152a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801152c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011530:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011532:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011534:	1a2d      	subs	r5, r5, r0
 8011536:	440d      	add	r5, r1
 8011538:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801153a:	4dd0      	ldr	r5, [pc, #832]	; (801187c <jpeg_idct_13x13+0x3e0>)
 801153c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011540:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011544:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011546:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011548:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801154a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801154e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011550:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011554:	4371      	muls	r1, r6
 8011556:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011558:	48c9      	ldr	r0, [pc, #804]	; (8011880 <jpeg_idct_13x13+0x3e4>)
 801155a:	4360      	muls	r0, r4
 801155c:	1ac0      	subs	r0, r0, r3
 801155e:	1a40      	subs	r0, r0, r1
 8011560:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011562:	48c8      	ldr	r0, [pc, #800]	; (8011884 <jpeg_idct_13x13+0x3e8>)
 8011564:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011568:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801156c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801156e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011572:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	434b      	muls	r3, r1
 8011578:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801157a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801157c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801157e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011580:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8011584:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011586:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801158a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801158c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801158e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8011592:	4368      	muls	r0, r5
 8011594:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011596:	f642 2050 	movw	r0, #10832	; 0x2a50
 801159a:	4370      	muls	r0, r6
 801159c:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801159e:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 80115a2:	4428      	add	r0, r5
 80115a4:	f242 553e 	movw	r5, #9534	; 0x253e
 80115a8:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80115aa:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80115ae:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 80115b2:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80115b6:	48b4      	ldr	r0, [pc, #720]	; (8011888 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80115b8:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80115bc:	44d6      	add	lr, sl
 80115be:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80115c2:	9801      	ldr	r0, [sp, #4]
 80115c4:	4eb1      	ldr	r6, [pc, #708]	; (801188c <jpeg_idct_13x13+0x3f0>)
 80115c6:	1818      	adds	r0, r3, r0
 80115c8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80115ca:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80115ce:	fb06 0603 	mla	r6, r6, r3, r0
 80115d2:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80115d4:	4eae      	ldr	r6, [pc, #696]	; (8011890 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80115d6:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80115d8:	9901      	ldr	r1, [sp, #4]
 80115da:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 80115de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80115e0:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80115e2:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80115e6:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80115e8:	9903      	ldr	r1, [sp, #12]
 80115ea:	185d      	adds	r5, r3, r1
 80115ec:	49a9      	ldr	r1, [pc, #676]	; (8011894 <jpeg_idct_13x13+0x3f8>)
 80115ee:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80115f0:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 80115f2:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80115f4:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80115f8:	9901      	ldr	r1, [sp, #4]
 80115fa:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80115fc:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80115fe:	eb01 0a00 	add.w	sl, r1, r0
 8011602:	49a5      	ldr	r1, [pc, #660]	; (8011898 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8011604:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011606:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801160a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 801160c:	4450      	add	r0, sl
    tmp13 += tmp14;
 801160e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011610:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011614:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011618:	f640 2533 	movw	r5, #2611	; 0xa33
 801161c:	fb05 9101 	mla	r1, r5, r1, r9
 8011620:	4d9e      	ldr	r5, [pc, #632]	; (801189c <jpeg_idct_13x13+0x400>)
 8011622:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011626:	9d01      	ldr	r5, [sp, #4]
 8011628:	1aeb      	subs	r3, r5, r3
 801162a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801162e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011632:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011634:	fb03 8805 	mla	r8, r3, r5, r8
 8011638:	9d03      	ldr	r5, [sp, #12]
 801163a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 801163e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011642:	9b06      	ldr	r3, [sp, #24]
 8011644:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011646:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011648:	12db      	asrs	r3, r3, #11
 801164a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801164e:	9b06      	ldr	r3, [sp, #24]
 8011650:	eba3 0e0e 	sub.w	lr, r3, lr
 8011654:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8011658:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801165c:	9b08      	ldr	r3, [sp, #32]
 801165e:	4433      	add	r3, r6
 8011660:	12db      	asrs	r3, r3, #11
 8011662:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011664:	9b08      	ldr	r3, [sp, #32]
 8011666:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011668:	9b07      	ldr	r3, [sp, #28]
 801166a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801166c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801166e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011670:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011674:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011676:	9b07      	ldr	r3, [sp, #28]
 8011678:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801167a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801167c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801167e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011680:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011682:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011686:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801168a:	eba3 0a0a 	sub.w	sl, r3, sl
 801168e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8011692:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011698:	440b      	add	r3, r1
 801169a:	12db      	asrs	r3, r3, #11
 801169c:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801169e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116a0:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80116a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a4:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80116a6:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80116a8:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80116aa:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80116ae:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80116b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80116b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116b6:	eba3 0909 	sub.w	r9, r3, r9
 80116ba:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80116be:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80116c2:	9b04      	ldr	r3, [sp, #16]
 80116c4:	1b1c      	subs	r4, r3, r4
 80116c6:	f642 5341 	movw	r3, #11585	; 0x2d41
 80116ca:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80116ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80116d0:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80116d2:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80116d4:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80116d8:	f47f aef0 	bne.w	80114bc <jpeg_idct_13x13+0x20>
 80116dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 80116de:	ac10      	add	r4, sp, #64	; 0x40
 80116e0:	3b04      	subs	r3, #4
 80116e2:	9303      	str	r3, [sp, #12]
 80116e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e6:	3330      	adds	r3, #48	; 0x30
 80116e8:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80116ea:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80116ec:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 80116f0:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80116f2:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 80116f6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80116fa:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 80116fe:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011700:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011702:	920b      	str	r2, [sp, #44]	; 0x2c
 8011704:	9303      	str	r3, [sp, #12]
 8011706:	4613      	mov	r3, r2
 8011708:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 801170a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 801170e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011710:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8011714:	3310      	adds	r3, #16
 8011716:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8011718:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 801171a:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801171c:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 801171e:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011720:	f240 3119 	movw	r1, #793	; 0x319
 8011724:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011726:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011728:	4341      	muls	r1, r0
 801172a:	9802      	ldr	r0, [sp, #8]
 801172c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011730:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011734:	fb00 500e 	mla	r0, r0, lr, r5
 8011738:	4408      	add	r0, r1
 801173a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801173c:	f241 000c 	movw	r0, #4108	; 0x100c
 8011740:	fb00 f00e 	mul.w	r0, r0, lr
 8011744:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011746:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801174a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801174c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011750:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011754:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011756:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801175a:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801175e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011760:	1a2d      	subs	r5, r5, r0
 8011762:	440d      	add	r5, r1
 8011764:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011766:	4d45      	ldr	r5, [pc, #276]	; (801187c <jpeg_idct_13x13+0x3e0>)
 8011768:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801176c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011770:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011772:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011774:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011776:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801177a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801177c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011780:	4371      	muls	r1, r6
 8011782:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011786:	483e      	ldr	r0, [pc, #248]	; (8011880 <jpeg_idct_13x13+0x3e4>)
 8011788:	fb00 f00e 	mul.w	r0, r0, lr
 801178c:	1ac0      	subs	r0, r0, r3
 801178e:	1a40      	subs	r0, r0, r1
 8011790:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011792:	483c      	ldr	r0, [pc, #240]	; (8011884 <jpeg_idct_13x13+0x3e8>)
 8011794:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011798:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801179c:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 801179e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80117a2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80117a4:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 80117a6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80117aa:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80117ac:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80117b0:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 80117b2:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80117b6:	4834      	ldr	r0, [pc, #208]	; (8011888 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80117b8:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80117bc:	4e33      	ldr	r6, [pc, #204]	; (801188c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80117be:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80117c2:	eb0b 0705 	add.w	r7, fp, r5
 80117c6:	4457      	add	r7, sl
 80117c8:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80117cc:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80117d0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80117d2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80117d6:	1818      	adds	r0, r3, r0
 80117d8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80117da:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80117de:	fb06 0603 	mla	r6, r6, r3, r0
 80117e2:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80117e4:	4e2a      	ldr	r6, [pc, #168]	; (8011890 <jpeg_idct_13x13+0x3f4>)
 80117e6:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80117ea:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80117ee:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80117f2:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80117f4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80117f8:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80117fa:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80117fc:	4375      	muls	r5, r6
    tmp11 += tmp14;
 80117fe:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011802:	f244 6b94 	movw	fp, #18068	; 0x4694
 8011806:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801180a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 801180e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011812:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011814:	eb07 0a00 	add.w	sl, r7, r0
 8011818:	481f      	ldr	r0, [pc, #124]	; (8011898 <jpeg_idct_13x13+0x3fc>)
 801181a:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 801181e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011820:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011822:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011824:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011828:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801182c:	f640 2533 	movw	r5, #2611	; 0xa33
 8011830:	fb05 9101 	mla	r1, r5, r1, r9
 8011834:	4d19      	ldr	r5, [pc, #100]	; (801189c <jpeg_idct_13x13+0x400>)
 8011836:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801183a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801183c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011840:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011844:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011848:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801184a:	fb03 8807 	mla	r8, r3, r7, r8
 801184e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011852:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011854:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011858:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801185a:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801185c:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801185e:	442b      	add	r3, r5
 8011860:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8011862:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011866:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801186a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801186c:	9b04      	ldr	r3, [sp, #16]
 801186e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011870:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8011872:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011876:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801187a:	e011      	b.n	80118a0 <jpeg_idct_13x13+0x404>
 801187c:	ffffd7ee 	.word	0xffffd7ee
 8011880:	fffffa8c 	.word	0xfffffa8c
 8011884:	ffffe64b 	.word	0xffffe64b
 8011888:	ffffbf5b 	.word	0xffffbf5b
 801188c:	fffff52b 	.word	0xfffff52b
 8011890:	ffffcdb1 	.word	0xffffcdb1
 8011894:	ffffdac2 	.word	0xffffdac2
 8011898:	ffffeaf8 	.word	0xffffeaf8
 801189c:	fffff116 	.word	0xfffff116
 80118a0:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118a2:	9b06      	ldr	r3, [sp, #24]
 80118a4:	4433      	add	r3, r6
			     & RANGE_MASK];
 80118a6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118aa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80118ae:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80118b0:	9b06      	ldr	r3, [sp, #24]
 80118b2:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 80118b4:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80118b8:	f81c 3006 	ldrb.w	r3, [ip, r6]
 80118bc:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80118be:	9b05      	ldr	r3, [sp, #20]
 80118c0:	4403      	add	r3, r0
			     & RANGE_MASK];
 80118c2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80118c6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80118ca:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80118cc:	9b05      	ldr	r3, [sp, #20]
 80118ce:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 80118d0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80118d4:	f81c 3000 	ldrb.w	r3, [ip, r0]
 80118d8:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80118da:	9b08      	ldr	r3, [sp, #32]
 80118dc:	4453      	add	r3, sl
			     & RANGE_MASK];
 80118de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80118e2:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80118e6:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80118e8:	9b08      	ldr	r3, [sp, #32]
 80118ea:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 80118ee:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80118f2:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80118f6:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80118f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118fa:	440b      	add	r3, r1
			     & RANGE_MASK];
 80118fc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011900:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011904:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011908:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 801190a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801190e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011912:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011916:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011918:	9b07      	ldr	r3, [sp, #28]
 801191a:	444b      	add	r3, r9
			     & RANGE_MASK];
 801191c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011920:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011924:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011926:	9b07      	ldr	r3, [sp, #28]
 8011928:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 801192c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011930:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011934:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011936:	9b01      	ldr	r3, [sp, #4]
 8011938:	eba3 030e 	sub.w	r3, r3, lr
 801193c:	434b      	muls	r3, r1
 801193e:	9902      	ldr	r1, [sp, #8]
 8011940:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8011944:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8011948:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801194c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 801194e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011950:	9a03      	ldr	r2, [sp, #12]
 8011952:	4293      	cmp	r3, r2
 8011954:	f47f aec9 	bne.w	80116ea <jpeg_idct_13x13+0x24e>
  }
}
 8011958:	b079      	add	sp, #484	; 0x1e4
 801195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195e:	bf00      	nop

08011960 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011964:	b0ff      	sub	sp, #508	; 0x1fc
 8011966:	f1a2 0a02 	sub.w	sl, r2, #2
 801196a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801196c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011970:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011972:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011976:	1f03      	subs	r3, r0, #4
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	f102 030e 	add.w	r3, r2, #14
 801197e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011980:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011982:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011984:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011988:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801198c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011990:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011994:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011996:	9101      	str	r1, [sp, #4]
 8011998:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801199a:	9a01      	ldr	r2, [sp, #4]
 801199c:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 80119a0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 80119a4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119a6:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119a8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80119aa:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80119ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80119b2:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80119b6:	f640 2112 	movw	r1, #2578	; 0xa12
 80119ba:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80119be:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 80119c2:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80119c4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80119c6:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 80119c8:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80119cc:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80119d0:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 80119d2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80119d4:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119d8:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119dc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80119e0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119e2:	9a01      	ldr	r2, [sp, #4]
 80119e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80119e6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119e8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80119ec:	48d2      	ldr	r0, [pc, #840]	; (8011d38 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119ee:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80119f0:	1916      	adds	r6, r2, r4
 80119f2:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80119f6:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 80119fa:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80119fe:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011a02:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011a06:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8011a08:	eb07 000c 	add.w	r0, r7, ip
 8011a0c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8011a0e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011a12:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a16:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 8011a1a:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011a1c:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a1e:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8011a22:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8011a24:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a26:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8011a2a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011a2c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8011a2e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a30:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8011a34:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8011a36:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a38:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011a3a:	48c0      	ldr	r0, [pc, #768]	; (8011d3c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a3c:	6a12      	ldr	r2, [r2, #32]
 8011a3e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a40:	9a01      	ldr	r2, [sp, #4]
 8011a42:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011a44:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a46:	9a01      	ldr	r2, [sp, #4]
 8011a48:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011a4c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a50:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a52:	9a01      	ldr	r2, [sp, #4]
 8011a54:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8011a58:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a5c:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011a5e:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8011a62:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011a66:	f242 6152 	movw	r1, #9810	; 0x2652
 8011a6a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011a6e:	49b4      	ldr	r1, [pc, #720]	; (8011d40 <jpeg_idct_14x14+0x3e0>)
 8011a70:	eb09 0e05 	add.w	lr, r9, r5
 8011a74:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8011a78:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011a7c:	f641 0114 	movw	r1, #6164	; 0x1814
 8011a80:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011a84:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011a88:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011a8a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8011a8e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011a90:	48ac      	ldr	r0, [pc, #688]	; (8011d44 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011a92:	fb08 f804 	mul.w	r8, r8, r4
 8011a96:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8011a9a:	4441      	add	r1, r8
 8011a9c:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011a9e:	19b9      	adds	r1, r7, r6
 8011aa0:	fb0c f101 	mul.w	r1, ip, r1
 8011aa4:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011aa8:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011aac:	48a6      	ldr	r0, [pc, #664]	; (8011d48 <jpeg_idct_14x14+0x3e8>)
 8011aae:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011ab2:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011ab4:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ab8:	48a4      	ldr	r0, [pc, #656]	; (8011d4c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011aba:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011abc:	1bf5      	subs	r5, r6, r7
 8011abe:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ac2:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8011ac6:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ac8:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8011acc:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011ace:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011ad0:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ad2:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011ad4:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ad6:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011ad8:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011adc:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011ade:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011ae2:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011ae6:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011ae8:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011aea:	eba2 0e0e 	sub.w	lr, r2, lr
 8011aee:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011af2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011af6:	9a04      	ldr	r2, [sp, #16]
 8011af8:	444a      	add	r2, r9
 8011afa:	12d2      	asrs	r2, r2, #11
 8011afc:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011afe:	9a04      	ldr	r2, [sp, #16]
 8011b00:	eba2 0909 	sub.w	r9, r2, r9
 8011b04:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8011b08:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011b0c:	9a06      	ldr	r2, [sp, #24]
 8011b0e:	440a      	add	r2, r1
 8011b10:	12d2      	asrs	r2, r2, #11
 8011b12:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011b14:	9a06      	ldr	r2, [sp, #24]
 8011b16:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b1a:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011b1e:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011b20:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011b24:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011b28:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011b2c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011b30:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011b32:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011b36:	12d2      	asrs	r2, r2, #11
 8011b38:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011b3a:	9a07      	ldr	r2, [sp, #28]
 8011b3c:	eba2 0c0c 	sub.w	ip, r2, ip
 8011b40:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011b44:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011b48:	9a05      	ldr	r2, [sp, #20]
 8011b4a:	442a      	add	r2, r5
 8011b4c:	12d2      	asrs	r2, r2, #11
 8011b4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011b52:	9a05      	ldr	r2, [sp, #20]
 8011b54:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011b56:	9a03      	ldr	r2, [sp, #12]
 8011b58:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011b5a:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011b5c:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011b5e:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011b62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011b66:	9a03      	ldr	r2, [sp, #12]
 8011b68:	1a52      	subs	r2, r2, r1
 8011b6a:	12d2      	asrs	r2, r2, #11
 8011b6c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b72:	4552      	cmp	r2, sl
 8011b74:	f47f af05 	bne.w	8011982 <jpeg_idct_14x14+0x22>
 8011b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b7a:	3b04      	subs	r3, #4
 8011b7c:	9302      	str	r3, [sp, #8]
 8011b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b80:	3334      	adds	r3, #52	; 0x34
 8011b82:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8011b84:	ab0e      	add	r3, sp, #56	; 0x38
 8011b86:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011b88:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011b8a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011b8e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011b92:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8011b96:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8011b9a:	920c      	str	r2, [sp, #48]	; 0x30
 8011b9c:	9302      	str	r3, [sp, #8]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8011ba2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ba4:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8011ba6:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ba8:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011baa:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011bae:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011bb2:	4861      	ldr	r0, [pc, #388]	; (8011d38 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011bb4:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011bb6:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011bb8:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 8011bba:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011bbe:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8011bc0:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011bc4:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8011bc6:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011bca:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011bce:	005b      	lsls	r3, r3, #1
 8011bd0:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8011bd4:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8011bd6:	9b01      	ldr	r3, [sp, #4]
 8011bd8:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 8011bda:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011bdc:	18f1      	adds	r1, r6, r3
 8011bde:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011be0:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8011be4:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011be8:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011bec:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011bf0:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8011bf2:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011bf6:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 8011bfa:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 8011bfe:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8011c00:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8011c02:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011c04:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8011c08:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8011c0a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8011c0c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 8011c0e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011c10:	484a      	ldr	r0, [pc, #296]	; (8011d3c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8011c12:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8011c14:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8011c16:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8011c18:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 8011c1a:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 8011c1e:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8011c20:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8011c24:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011c28:	eb03 0a08 	add.w	sl, r3, r8
 8011c2c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8011c30:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011c34:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011c38:	f242 6152 	movw	r1, #9810	; 0x2652
 8011c3c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011c40:	493f      	ldr	r1, [pc, #252]	; (8011d40 <jpeg_idct_14x14+0x3e0>)
 8011c42:	eb0a 0704 	add.w	r7, sl, r4
 8011c46:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8011c4a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011c4e:	f641 0114 	movw	r1, #6164	; 0x1814
 8011c52:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011c54:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011c58:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011c5a:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 8011c5e:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011c62:	4838      	ldr	r0, [pc, #224]	; (8011d44 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011c64:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011c68:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011c6c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011c70:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8011c72:	4471      	add	r1, lr
 8011c74:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011c76:	eb08 010c 	add.w	r1, r8, ip
 8011c7a:	4369      	muls	r1, r5
 8011c7c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011c80:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011c84:	4830      	ldr	r0, [pc, #192]	; (8011d48 <jpeg_idct_14x14+0x3e8>)
 8011c86:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011c8a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011c8c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c90:	482e      	ldr	r0, [pc, #184]	; (8011d4c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011c92:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011c94:	ebac 0408 	sub.w	r4, ip, r8
 8011c98:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011c9a:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011c9c:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ca0:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011ca4:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ca8:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011caa:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011cae:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011cb2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011cb6:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011cba:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011cbe:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011cc0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011cc4:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011cc6:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011cc8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011cca:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011ccc:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8011cd0:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011cd2:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011cd6:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011cd8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011cdc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011ce0:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011ce8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011cec:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8011cf0:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011cf2:	9b07      	ldr	r3, [sp, #28]
 8011cf4:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011cf6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011cfa:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011cfe:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011d00:	9b07      	ldr	r3, [sp, #28]
 8011d02:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d04:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011d08:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8011d0c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011d0e:	9b03      	ldr	r3, [sp, #12]
 8011d10:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d12:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011d16:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011d1a:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011d1c:	9b03      	ldr	r3, [sp, #12]
 8011d1e:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d22:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011d26:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011d2a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011d2c:	9b08      	ldr	r3, [sp, #32]
 8011d2e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d30:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8011d34:	e00c      	b.n	8011d50 <jpeg_idct_14x14+0x3f0>
 8011d36:	bf00      	nop
 8011d38:	ffffc8fc 	.word	0xffffc8fc
 8011d3c:	ffffde0b 	.word	0xffffde0b
 8011d40:	ffffdbf0 	.word	0xffffdbf0
 8011d44:	fffff26e 	.word	0xfffff26e
 8011d48:	ffffb409 	.word	0xffffb409
 8011d4c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011d50:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011d54:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011d56:	9b08      	ldr	r3, [sp, #32]
 8011d58:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d5a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011d5e:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8011d62:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011d6c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011d70:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011d72:	9b06      	ldr	r3, [sp, #24]
 8011d74:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d76:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011d7a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8011d7e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011d80:	9b04      	ldr	r3, [sp, #16]
 8011d82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d84:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d86:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011d8a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011d8e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011d90:	9b04      	ldr	r3, [sp, #16]
 8011d92:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011d94:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011d98:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8011d9c:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 8011d9e:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8011da0:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 8011da2:	3320      	adds	r3, #32
 8011da4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8011da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011da8:	4293      	cmp	r3, r2
 8011daa:	f47f aeed 	bne.w	8011b88 <jpeg_idct_14x14+0x228>
  }
}
 8011dae:	b07f      	add	sp, #508	; 0x1fc
 8011db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011db4 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8011dbc:	f1a2 0b02 	sub.w	fp, r2, #2
 8011dc0:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011dc2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011dc6:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011dc8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011dcc:	1f03      	subs	r3, r0, #4
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	f102 030e 	add.w	r3, r2, #14
 8011dd4:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011dd6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011dd8:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011dda:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011dde:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011de2:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011de6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011dea:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011dee:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011df2:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011df4:	9100      	str	r1, [sp, #0]
 8011df6:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011df8:	9a00      	ldr	r2, [sp, #0]
 8011dfa:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 8011dfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8011e00:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e02:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e04:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011e06:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e08:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011e0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011e10:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011e14:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e16:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011e1a:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e1e:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011e20:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011e24:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011e28:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011e2c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8011e2e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8011e32:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011e34:	eba4 040c 	sub.w	r4, r4, ip
 8011e38:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8011e3c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8011e3e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011e40:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011e44:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011e46:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011e4a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8011e4e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011e52:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011e56:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8011e58:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011e5c:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011e5e:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8011e62:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011e64:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011e66:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011e6a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011e6e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011e70:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8011e72:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011e76:	443c      	add	r4, r7
 8011e78:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8011e7c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011e80:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011e84:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8011e86:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011e88:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8011e8a:	f641 114c 	movw	r1, #6476	; 0x194c
 8011e8e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011e90:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011e94:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011e96:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8011e98:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e9a:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011e9e:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8011ea0:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8011ea2:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8011ea4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8011ea6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8011eaa:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011eac:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8011eb0:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011eb2:	9908      	ldr	r1, [sp, #32]
 8011eb4:	9a01      	ldr	r2, [sp, #4]
 8011eb6:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011eb8:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011ebc:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011ebe:	9a00      	ldr	r2, [sp, #0]
 8011ec0:	6a12      	ldr	r2, [r2, #32]
 8011ec2:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011ec4:	9900      	ldr	r1, [sp, #0]
 8011ec6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8011ec8:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011eca:	9900      	ldr	r1, [sp, #0]
 8011ecc:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ed0:	9800      	ldr	r0, [sp, #0]
 8011ed2:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011ed6:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ed8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011edc:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011ee0:	48d2      	ldr	r0, [pc, #840]	; (801222c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ee2:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011ee6:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8011ee8:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011eec:	1917      	adds	r7, r2, r4
 8011eee:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8011ef2:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011ef6:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011efa:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011efe:	48cc      	ldr	r0, [pc, #816]	; (8012230 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011f00:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011f04:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011f06:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011f0a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011f0c:	48c9      	ldr	r0, [pc, #804]	; (8012234 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011f0e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011f12:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011f16:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011f1a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011f1c:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011f20:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011f24:	fb00 4402 	mla	r4, r0, r2, r4
 8011f28:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011f2a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011f2e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011f30:	f241 2068 	movw	r0, #4712	; 0x1268
 8011f34:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011f36:	f640 7039 	movw	r0, #3897	; 0xf39
 8011f3a:	fb00 1202 	mla	r2, r0, r2, r1
 8011f3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011f40:	1b92      	subs	r2, r2, r6
 8011f42:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011f44:	48bc      	ldr	r0, [pc, #752]	; (8012238 <jpeg_idct_15x15+0x484>)
 8011f46:	fb00 110e 	mla	r1, r0, lr, r1
 8011f4a:	4431      	add	r1, r6
 8011f4c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011f4e:	9902      	ldr	r1, [sp, #8]
 8011f50:	4441      	add	r1, r8
 8011f52:	12c9      	asrs	r1, r1, #11
 8011f54:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011f58:	9902      	ldr	r1, [sp, #8]
 8011f5a:	eba1 0808 	sub.w	r8, r1, r8
 8011f5e:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8011f62:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011f66:	9906      	ldr	r1, [sp, #24]
 8011f68:	4449      	add	r1, r9
 8011f6a:	12c9      	asrs	r1, r1, #11
 8011f6c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011f6e:	9906      	ldr	r1, [sp, #24]
 8011f70:	eba1 0909 	sub.w	r9, r1, r9
 8011f74:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8011f78:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f7e:	4461      	add	r1, ip
 8011f80:	12c9      	asrs	r1, r1, #11
 8011f82:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f86:	eba1 0c0c 	sub.w	ip, r1, ip
 8011f8a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8011f8e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011f92:	9903      	ldr	r1, [sp, #12]
 8011f94:	4411      	add	r1, r2
 8011f96:	12c9      	asrs	r1, r1, #11
 8011f98:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011f9a:	9903      	ldr	r1, [sp, #12]
 8011f9c:	1a8a      	subs	r2, r1, r2
 8011f9e:	12d2      	asrs	r2, r2, #11
 8011fa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011fa4:	9a07      	ldr	r2, [sp, #28]
 8011fa6:	443a      	add	r2, r7
 8011fa8:	12d2      	asrs	r2, r2, #11
 8011faa:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011fac:	9a07      	ldr	r2, [sp, #28]
 8011fae:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011fb0:	9a04      	ldr	r2, [sp, #16]
 8011fb2:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011fb4:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011fb6:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011fb8:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011fc0:	9a04      	ldr	r2, [sp, #16]
 8011fc2:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011fc4:	9a05      	ldr	r2, [sp, #20]
 8011fc6:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011fc8:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011fca:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011fcc:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011fd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011fd4:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011fd6:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011fd8:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011fda:	9a01      	ldr	r2, [sp, #4]
 8011fdc:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011fe0:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8011fe2:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011fe4:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8011fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fee:	455a      	cmp	r2, fp
 8011ff0:	f47f aef2 	bne.w	8011dd8 <jpeg_idct_15x15+0x24>
 8011ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ff6:	f1a3 0904 	sub.w	r9, r3, #4
 8011ffa:	3338      	adds	r3, #56	; 0x38
 8011ffc:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8011ffe:	ab0e      	add	r3, sp, #56	; 0x38
 8012000:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012002:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012006:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801200a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801200c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8012010:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012012:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012016:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012018:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801201a:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 801201e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012020:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012022:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8012024:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012026:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012028:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801202c:	f242 419d 	movw	r1, #9373	; 0x249d
 8012030:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8012032:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8012036:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801203a:	eba2 020c 	sub.w	r2, r2, ip
 801203e:	0052      	lsls	r2, r2, #1
 8012040:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8012044:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8012046:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012048:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801204c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801204e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012052:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012056:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8012058:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801205c:	1a8a      	subs	r2, r1, r2
 801205e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8012060:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012064:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012068:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 801206a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801206c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012070:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012072:	f241 1282 	movw	r2, #4482	; 0x1182
 8012076:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8012078:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801207c:	440a      	add	r2, r1
 801207e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8012082:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012086:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8012088:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801208a:	4c68      	ldr	r4, [pc, #416]	; (801222c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801208c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801208e:	f641 124c 	movw	r2, #6476	; 0x194c
 8012092:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012094:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012098:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801209a:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 801209c:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 801209e:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80120a0:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 80120a2:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80120a4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80120a6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 80120aa:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 80120ac:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80120ae:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 80120b2:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 80120b4:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80120b6:	9808      	ldr	r0, [sp, #32]
 80120b8:	9a01      	ldr	r2, [sp, #4]
 80120ba:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80120be:	6948      	ldr	r0, [r1, #20]
 80120c0:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 80120c4:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80120c6:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 80120ca:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80120cc:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 80120ce:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80120d2:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80120d6:	1950      	adds	r0, r2, r5
 80120d8:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80120da:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80120de:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80120e2:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 80120e6:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80120ea:	4c54      	ldr	r4, [pc, #336]	; (801223c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80120ec:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80120ee:	4850      	ldr	r0, [pc, #320]	; (8012230 <jpeg_idct_15x15+0x47c>)
 80120f0:	4378      	muls	r0, r7
 80120f2:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80120f4:	484f      	ldr	r0, [pc, #316]	; (8012234 <jpeg_idct_15x15+0x480>)
 80120f6:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80120f8:	f642 5002 	movw	r0, #11522	; 0x2d02
 80120fc:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012100:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012102:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012106:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801210a:	fb04 0002 	mla	r0, r4, r2, r0
 801210e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012110:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012112:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012116:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012118:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801211c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801211e:	eb02 000e 	add.w	r0, r2, lr
 8012122:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012124:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012126:	fb01 0202 	mla	r2, r1, r2, r0
 801212a:	eba2 020c 	sub.w	r2, r2, ip
 801212e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012130:	4c41      	ldr	r4, [pc, #260]	; (8012238 <jpeg_idct_15x15+0x484>)
 8012132:	fb04 000e 	mla	r0, r4, lr, r0
 8012136:	4460      	add	r0, ip
 8012138:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801213a:	9802      	ldr	r0, [sp, #8]
 801213c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801213e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012142:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012148:	9990      	ldr	r1, [sp, #576]	; 0x240
 801214a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801214c:	9902      	ldr	r1, [sp, #8]
 801214e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012150:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 8012152:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012156:	f81a 0006 	ldrb.w	r0, [sl, r6]
 801215a:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801215c:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012160:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8012164:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012168:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801216c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012170:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012172:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012176:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012178:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801217c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8012180:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012184:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012188:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801218c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801218e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8012192:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012194:	9903      	ldr	r1, [sp, #12]
 8012196:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012198:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801219c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80121a0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80121a2:	9903      	ldr	r1, [sp, #12]
 80121a4:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80121a6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80121a8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80121ac:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80121b0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80121b2:	9a07      	ldr	r2, [sp, #28]
 80121b4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121b6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80121ba:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80121be:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80121c0:	9a07      	ldr	r2, [sp, #28]
 80121c2:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121c4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80121c8:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80121cc:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80121ce:	9a04      	ldr	r2, [sp, #16]
 80121d0:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121d2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80121d6:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80121da:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80121dc:	9a04      	ldr	r2, [sp, #16]
 80121de:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121e0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80121e4:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80121e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80121ea:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80121ec:	9a05      	ldr	r2, [sp, #20]
 80121ee:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80121f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80121f4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80121f8:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80121fa:	9a05      	ldr	r2, [sp, #20]
 80121fc:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80121fe:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012200:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012204:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012208:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801220a:	9a01      	ldr	r2, [sp, #4]
 801220c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012210:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012214:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012218:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 801221a:	9b00      	ldr	r3, [sp, #0]
 801221c:	3320      	adds	r3, #32
 801221e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012222:	454b      	cmp	r3, r9
 8012224:	f47f aeed 	bne.w	8012002 <jpeg_idct_15x15+0x24e>
 8012228:	e00a      	b.n	8012240 <jpeg_idct_15x15+0x48c>
 801222a:	bf00      	nop
 801222c:	ffffba5c 	.word	0xffffba5c
 8012230:	ffffe566 	.word	0xffffe566
 8012234:	ffffd4f6 	.word	0xffffd4f6
 8012238:	ffffe42f 	.word	0xffffe42f
 801223c:	ffffdc67 	.word	0xffffdc67
  }
}
 8012240:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012248 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8012250:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012252:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012256:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801225a:	1e93      	subs	r3, r2, #2
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012260:	f1a3 0904 	sub.w	r9, r3, #4
 8012264:	f102 030e 	add.w	r3, r2, #14
 8012268:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801226a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801226c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801226e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012272:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012276:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801227a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801227e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012280:	9100      	str	r1, [sp, #0]
 8012282:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8012286:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012288:	9900      	ldr	r1, [sp, #0]
 801228a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801228e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012290:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8012294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012298:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801229a:	f642 10cf 	movw	r0, #10703	; 0x29cf
 801229e:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80122a0:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 80122a2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80122a4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80122a6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80122a8:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122ac:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80122ae:	4ad6      	ldr	r2, [pc, #856]	; (8012608 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122b0:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 80122b4:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80122b8:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80122bc:	9900      	ldr	r1, [sp, #0]
 80122be:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 80122c2:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 80122c6:	4361      	muls	r1, r4
    z3 = z1 - z2;
 80122c8:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80122cc:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80122d0:	f642 4563 	movw	r5, #11363	; 0x2c63
 80122d4:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80122d6:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80122da:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80122de:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80122e2:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80122e6:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80122ea:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 80122ee:	eb07 020c 	add.w	r2, r7, ip
 80122f2:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80122f4:	eba7 020c 	sub.w	r2, r7, ip
 80122f8:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80122fa:	1972      	adds	r2, r6, r5
 80122fc:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80122fe:	1b72      	subs	r2, r6, r5
 8012300:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012302:	eb0b 0204 	add.w	r2, fp, r4
 8012306:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012308:	ebab 0204 	sub.w	r2, fp, r4
 801230c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801230e:	1842      	adds	r2, r0, r1
 8012310:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012312:	1a42      	subs	r2, r0, r1
 8012314:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012316:	9a00      	ldr	r2, [sp, #0]
 8012318:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 801231c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012320:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012322:	9a00      	ldr	r2, [sp, #0]
 8012324:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8012328:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 801232c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801232e:	9800      	ldr	r0, [sp, #0]
 8012330:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012334:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012336:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801233a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801233e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012340:	9800      	ldr	r0, [sp, #0]
 8012342:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8012346:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012348:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 801234c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801234e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 8012352:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012354:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012358:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801235c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012360:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012364:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012368:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801236c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012370:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012374:	f241 5455 	movw	r4, #5461	; 0x1555
 8012378:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801237a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801237e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012380:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012384:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012386:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 801238a:	4ca0      	ldr	r4, [pc, #640]	; (801260c <jpeg_idct_16x16+0x3c4>)
 801238c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012390:	4f9f      	ldr	r7, [pc, #636]	; (8012610 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012392:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012394:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012396:	4464      	add	r4, ip
 8012398:	445c      	add	r4, fp
 801239a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801239e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80123a0:	4f9c      	ldr	r7, [pc, #624]	; (8012614 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80123a2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80123a4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80123a8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80123aa:	f240 214d 	movw	r1, #589	; 0x24d
 80123ae:	fb01 4102 	mla	r1, r1, r2, r4
 80123b2:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80123b4:	4998      	ldr	r1, [pc, #608]	; (8012618 <jpeg_idct_16x16+0x3d0>)
 80123b6:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80123ba:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80123bc:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80123be:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80123c2:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80123c6:	fb07 1a05 	mla	sl, r7, r5, r1
 80123ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80123cc:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80123ce:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80123d2:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 80123d6:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80123d8:	4990      	ldr	r1, [pc, #576]	; (801261c <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80123da:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80123dc:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80123e0:	4351      	muls	r1, r2
    tmp1  += z1;
 80123e2:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80123e4:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80123e8:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80123ec:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80123ee:	498c      	ldr	r1, [pc, #560]	; (8012620 <jpeg_idct_16x16+0x3d8>)
 80123f0:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80123f2:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80123f6:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80123f8:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80123fc:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80123fe:	eb05 0b00 	add.w	fp, r5, r0
 8012402:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012404:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012406:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012408:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801240c:	f640 5123 	movw	r1, #3363	; 0xd23
 8012410:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012412:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8012414:	445c      	add	r4, fp
    tmp3  += z2;
 8012416:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012418:	4429      	add	r1, r5
    tmp10 += z2;
 801241a:	4484      	add	ip, r0
    tmp11 += z2;
 801241c:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801241e:	12c9      	asrs	r1, r1, #11
 8012420:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012424:	9901      	ldr	r1, [sp, #4]
 8012426:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012428:	9903      	ldr	r1, [sp, #12]
 801242a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801242c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801242e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012430:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012434:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012436:	9903      	ldr	r1, [sp, #12]
 8012438:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801243a:	9905      	ldr	r1, [sp, #20]
 801243c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801243e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012440:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012442:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012446:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012448:	9905      	ldr	r1, [sp, #20]
 801244a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801244c:	9907      	ldr	r1, [sp, #28]
 801244e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012450:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012452:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012454:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012458:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801245a:	9907      	ldr	r1, [sp, #28]
 801245c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012460:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8012464:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012468:	9908      	ldr	r1, [sp, #32]
 801246a:	4461      	add	r1, ip
 801246c:	12c9      	asrs	r1, r1, #11
 801246e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012470:	9908      	ldr	r1, [sp, #32]
 8012472:	eba1 0c0c 	sub.w	ip, r1, ip
 8012476:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801247a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801247e:	9906      	ldr	r1, [sp, #24]
 8012480:	4401      	add	r1, r0
 8012482:	12c9      	asrs	r1, r1, #11
 8012484:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012488:	9906      	ldr	r1, [sp, #24]
 801248a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801248c:	9904      	ldr	r1, [sp, #16]
 801248e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012490:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012492:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012494:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012498:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801249c:	9904      	ldr	r1, [sp, #16]
 801249e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80124a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80124a2:	12d2      	asrs	r2, r2, #11
 80124a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80124a8:	9a02      	ldr	r2, [sp, #8]
 80124aa:	440a      	add	r2, r1
 80124ac:	12d2      	asrs	r2, r2, #11
 80124ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80124b2:	9a02      	ldr	r2, [sp, #8]
 80124b4:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80124b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124b8:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80124ba:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80124bc:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80124be:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80124c2:	f47f aed3 	bne.w	801226c <jpeg_idct_16x16+0x24>
 80124c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80124c8:	ad0e      	add	r5, sp, #56	; 0x38
 80124ca:	3b04      	subs	r3, #4
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124d0:	333c      	adds	r3, #60	; 0x3c
 80124d2:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80124d4:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80124d6:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80124da:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80124de:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 80124e2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80124e6:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 80124ea:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80124ee:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 80124f2:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80124f4:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	4613      	mov	r3, r2
 80124fa:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80124fc:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 80124fe:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012502:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012506:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012508:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801250a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801250c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012510:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012514:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012518:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 801251c:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012520:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012522:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012526:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012528:	4a37      	ldr	r2, [pc, #220]	; (8012608 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801252a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801252e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012532:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012536:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801253a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801253e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012542:	eb0e 0207 	add.w	r2, lr, r7
 8012546:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012548:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 801254c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012550:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012552:	eb0c 0206 	add.w	r2, ip, r6
 8012556:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012558:	ebac 0206 	sub.w	r2, ip, r6
 801255c:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 801255e:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012562:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012566:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012568:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801256a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 801256c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012570:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012572:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012574:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012578:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 801257c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 801257e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012582:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012586:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801258a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801258e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012590:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012594:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012596:	4e1d      	ldr	r6, [pc, #116]	; (801260c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012598:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801259a:	f242 74e9 	movw	r4, #10217	; 0x27e9
 801259e:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80125a2:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80125a6:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80125aa:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80125ae:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80125b2:	f241 5455 	movw	r4, #5461	; 0x1555
 80125b6:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80125ba:	f640 5423 	movw	r4, #3363	; 0xd23
 80125be:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80125c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80125c4:	4454      	add	r4, sl
 80125c6:	4474      	add	r4, lr
 80125c8:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125cc:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80125d0:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125d2:	eb0c 0409 	add.w	r4, ip, r9
 80125d6:	445c      	add	r4, fp
 80125d8:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80125dc:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80125de:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125e0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80125e2:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80125e6:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80125e8:	f240 224d 	movw	r2, #589	; 0x24d
 80125ec:	fb02 4203 	mla	r2, r2, r3, r4
 80125f0:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80125f2:	4a09      	ldr	r2, [pc, #36]	; (8012618 <jpeg_idct_16x16+0x3d0>)
 80125f4:	fb02 4407 	mla	r4, r2, r7, r4
 80125f8:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80125fc:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012600:	4c04      	ldr	r4, [pc, #16]	; (8012614 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012602:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012604:	1afa      	subs	r2, r7, r3
 8012606:	e00d      	b.n	8012624 <jpeg_idct_16x16+0x3dc>
 8012608:	ffffecc2 	.word	0xffffecc2
 801260c:	ffffb6d6 	.word	0xffffb6d6
 8012610:	ffffc542 	.word	0xffffc542
 8012614:	ffffe77a 	.word	0xffffe77a
 8012618:	ffffdbfa 	.word	0xffffdbfa
 801261c:	ffffeaab 	.word	0xffffeaab
 8012620:	ffffd817 	.word	0xffffd817
 8012624:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012628:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 801262c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801262e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012630:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012634:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012638:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801263a:	4a4f      	ldr	r2, [pc, #316]	; (8012778 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801263c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801263e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012642:	435a      	muls	r2, r3
    tmp1  += z1;
 8012644:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012646:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801264a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801264e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012650:	4a4a      	ldr	r2, [pc, #296]	; (801277c <jpeg_idct_16x16+0x534>)
 8012652:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012654:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012658:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801265a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801265e:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012660:	eb07 0b00 	add.w	fp, r7, r0
 8012664:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012666:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012668:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801266a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801266e:	f640 5223 	movw	r2, #3363	; 0xd23
 8012672:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012674:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012676:	445c      	add	r4, fp
    tmp3  += z2;
 8012678:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801267a:	443a      	add	r2, r7
 801267c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 801267e:	4484      	add	ip, r0
    tmp11 += z2;
 8012680:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012682:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012686:	f818 2002 	ldrb.w	r2, [r8, r2]
 801268a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 801268c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801268e:	9b01      	ldr	r3, [sp, #4]
 8012690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012692:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012694:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012696:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801269a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801269e:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80126a0:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80126a2:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80126a4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80126a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80126aa:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80126ae:	f818 2002 	ldrb.w	r2, [r8, r2]
 80126b2:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80126b4:	f818 2006 	ldrb.w	r2, [r8, r6]
 80126b8:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80126ba:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80126bc:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80126be:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80126c0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80126c4:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80126c8:	f818 2002 	ldrb.w	r2, [r8, r2]
 80126cc:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80126ce:	f818 2004 	ldrb.w	r2, [r8, r4]
 80126d2:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80126d4:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80126d8:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80126dc:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80126de:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80126e2:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80126e6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80126ea:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80126ec:	f818 200e 	ldrb.w	r2, [r8, lr]
 80126f0:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80126f2:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80126f6:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80126fa:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80126fc:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012700:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012704:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012708:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801270a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801270e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012710:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012712:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012714:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012716:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801271a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801271e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012722:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012724:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012728:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801272a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801272e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012732:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012736:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801273a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801273e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012740:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012746:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012748:	9b02      	ldr	r3, [sp, #8]
 801274a:	4413      	add	r3, r2
			     & RANGE_MASK];
 801274c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012750:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012754:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012756:	9b02      	ldr	r3, [sp, #8]
 8012758:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 801275c:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 801275e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012762:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012766:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801276a:	4293      	cmp	r3, r2
 801276c:	f47f aeb2 	bne.w	80124d4 <jpeg_idct_16x16+0x28c>
  }
}
 8012770:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012778:	ffffeaab 	.word	0xffffeaab
 801277c:	ffffd817 	.word	0xffffd817

08012780 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012784:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012786:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012788:	3a02      	subs	r2, #2
{
 801278a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801278c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801278e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012792:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012796:	f105 0320 	add.w	r3, r5, #32
 801279a:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801279c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80127a0:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80127a2:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80127a6:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80127aa:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80127ae:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 80127b2:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80127b6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80127ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80127be:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80127c2:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80127c4:	ea4a 030b 	orr.w	r3, sl, fp
 80127c8:	ea4e 0303 	orr.w	r3, lr, r3
 80127cc:	ea4c 0303 	orr.w	r3, ip, r3
 80127d0:	433b      	orrs	r3, r7
 80127d2:	4333      	orrs	r3, r6
 80127d4:	ea59 0303 	orrs.w	r3, r9, r3
 80127d8:	f040 8159 	bne.w	8012a8e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80127dc:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 80127de:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80127e2:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80127e4:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80127e6:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80127e8:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80127ea:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80127ee:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 80127f2:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80127f6:	9b04      	ldr	r3, [sp, #16]
 80127f8:	42ab      	cmp	r3, r5
 80127fa:	d1cf      	bne.n	801279c <jpeg_idct_16x8+0x1c>
 80127fc:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 80127fe:	ad0e      	add	r5, sp, #56	; 0x38
 8012800:	3b04      	subs	r3, #4
 8012802:	9300      	str	r3, [sp, #0]
 8012804:	9b03      	ldr	r3, [sp, #12]
 8012806:	331c      	adds	r3, #28
 8012808:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801280a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801280c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012810:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8012814:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012818:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801281c:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012820:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012824:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012828:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801282a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	4613      	mov	r3, r2
 8012830:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012832:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012834:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012838:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801283c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801283e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012840:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012842:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012846:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 801284a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 801284e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012852:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012856:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012858:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801285c:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801285e:	4acf      	ldr	r2, [pc, #828]	; (8012b9c <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012860:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012864:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012868:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801286c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012870:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012874:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012878:	eb0e 0207 	add.w	r2, lr, r7
 801287c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 801287e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012882:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012886:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012888:	eb0c 0206 	add.w	r2, ip, r6
 801288c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801288e:	ebac 0206 	sub.w	r2, ip, r6
 8012892:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012894:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012898:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 801289c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801289e:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80128a0:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 80128a2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 80128a6:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80128a8:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128aa:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 80128ae:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 80128b2:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 80128b4:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 80128b8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80128bc:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80128c0:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128c4:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80128c6:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128ca:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128cc:	4eb4      	ldr	r6, [pc, #720]	; (8012ba0 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128ce:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80128d0:	f242 74e9 	movw	r4, #10217	; 0x27e9
 80128d4:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80128d8:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80128dc:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80128e0:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80128e4:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80128e8:	f241 5455 	movw	r4, #5461	; 0x1555
 80128ec:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80128f0:	f640 5423 	movw	r4, #3363	; 0xd23
 80128f4:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80128fa:	4454      	add	r4, sl
 80128fc:	4474      	add	r4, lr
 80128fe:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012902:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012906:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012908:	eb0c 0409 	add.w	r4, ip, r9
 801290c:	445c      	add	r4, fp
 801290e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012912:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012914:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012916:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012918:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801291c:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801291e:	f240 224d 	movw	r2, #589	; 0x24d
 8012922:	fb02 4203 	mla	r2, r2, r3, r4
 8012926:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012928:	4a9e      	ldr	r2, [pc, #632]	; (8012ba4 <jpeg_idct_16x8+0x424>)
 801292a:	fb02 4407 	mla	r4, r2, r7, r4
 801292e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012932:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012936:	4c9c      	ldr	r4, [pc, #624]	; (8012ba8 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012938:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801293a:	1afa      	subs	r2, r7, r3
 801293c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012940:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012944:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012946:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012948:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801294c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012950:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012952:	4a96      	ldr	r2, [pc, #600]	; (8012bac <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012954:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012956:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801295a:	435a      	muls	r2, r3
    tmp1  += z1;
 801295c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801295e:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012962:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012966:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012968:	4a91      	ldr	r2, [pc, #580]	; (8012bb0 <jpeg_idct_16x8+0x430>)
 801296a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801296c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012970:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012972:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012976:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012978:	eb07 0b00 	add.w	fp, r7, r0
 801297c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801297e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012980:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012982:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012986:	f640 5223 	movw	r2, #3363	; 0xd23
 801298a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801298c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 801298e:	445c      	add	r4, fp
    tmp3  += z2;
 8012990:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012992:	443a      	add	r2, r7
 8012994:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012996:	4484      	add	ip, r0
    tmp11 += z2;
 8012998:	4448      	add	r0, r9
			     & RANGE_MASK];
 801299a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801299e:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129a2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80129a4:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80129a6:	9b01      	ldr	r3, [sp, #4]
 80129a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129aa:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129ac:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 80129ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80129b2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129b6:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129b8:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80129ba:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80129bc:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80129be:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80129c2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129c6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129ca:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80129cc:	f818 2006 	ldrb.w	r2, [r8, r6]
 80129d0:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80129d2:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80129d4:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80129d6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80129d8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80129dc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80129e0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129e4:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80129e6:	f818 2004 	ldrb.w	r2, [r8, r4]
 80129ea:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80129ec:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80129f0:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80129f4:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80129f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80129fa:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80129fe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a02:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012a04:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012a08:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012a0a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012a0e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a12:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012a14:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a18:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012a1c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a20:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012a22:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012a26:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a28:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012a2a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a2c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012a2e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a32:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a36:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a3a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012a3c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012a40:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a42:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a46:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012a4a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a4e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a52:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a56:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a58:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a5e:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012a60:	9b02      	ldr	r3, [sp, #8]
 8012a62:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012a64:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012a68:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012a6c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012a6e:	9b02      	ldr	r3, [sp, #8]
 8012a70:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8012a74:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012a76:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012a7a:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012a7e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8012a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a82:	4293      	cmp	r3, r2
 8012a84:	f47f aec1 	bne.w	801280a <jpeg_idct_16x8+0x8a>
  }
}
 8012a88:	b04f      	add	sp, #316	; 0x13c
 8012a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a8e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8012a90:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a94:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8012a98:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012a9a:	f241 1651 	movw	r6, #4433	; 0x1151
 8012a9e:	eb0b 0300 	add.w	r3, fp, r0
 8012aa2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012aa4:	f641 067e 	movw	r6, #6270	; 0x187e
 8012aa8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012aac:	4e41      	ldr	r6, [pc, #260]	; (8012bb4 <jpeg_idct_16x8+0x434>)
 8012aae:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8012ab2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012ab4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012aba:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8012abe:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8012ac2:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012ac6:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8012aca:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012ace:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8012ad0:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8012ad2:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012ad4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8012ad8:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8012ada:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012adc:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8012ae0:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012ae2:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012ae6:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012aea:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8012aee:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012af0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8012af2:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8012af6:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 8012afa:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012afe:	1930      	adds	r0, r6, r4
 8012b00:	4358      	muls	r0, r3
    z2 += z1;
 8012b02:	4b2d      	ldr	r3, [pc, #180]	; (8012bb8 <jpeg_idct_16x8+0x438>)
 8012b04:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8012b08:	4b2c      	ldr	r3, [pc, #176]	; (8012bbc <jpeg_idct_16x8+0x43c>)
 8012b0a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012b0e:	eb09 040a 	add.w	r4, r9, sl
 8012b12:	4b2b      	ldr	r3, [pc, #172]	; (8012bc0 <jpeg_idct_16x8+0x440>)
 8012b14:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8012b16:	f640 138e 	movw	r3, #2446	; 0x98e
 8012b1a:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8012b1e:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8012b20:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8012b24:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b28:	4b26      	ldr	r3, [pc, #152]	; (8012bc4 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 8012b2a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b2e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8012b32:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b36:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012b3a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8012b3c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8012b3e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8012b40:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8012b44:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8012b48:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012b4c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012b50:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012b54:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012b56:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012b58:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012b5c:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012b60:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012b64:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012b68:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012b6a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012b6c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012b70:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012b72:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012b74:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012b76:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012b78:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012b7a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012b7e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012b80:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012b82:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012b84:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012b86:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012b8a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8012b8c:	9b00      	ldr	r3, [sp, #0]
 8012b8e:	eba3 0909 	sub.w	r9, r3, r9
 8012b92:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8012b96:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8012b98:	e62d      	b.n	80127f6 <jpeg_idct_16x8+0x76>
 8012b9a:	bf00      	nop
 8012b9c:	ffffecc2 	.word	0xffffecc2
 8012ba0:	ffffb6d6 	.word	0xffffb6d6
 8012ba4:	ffffdbfa 	.word	0xffffdbfa
 8012ba8:	ffffe77a 	.word	0xffffe77a
 8012bac:	ffffeaab 	.word	0xffffeaab
 8012bb0:	ffffd817 	.word	0xffffd817
 8012bb4:	ffffc4df 	.word	0xffffc4df
 8012bb8:	ffffc13b 	.word	0xffffc13b
 8012bbc:	fffff384 	.word	0xfffff384
 8012bc0:	ffffe333 	.word	0xffffe333
 8012bc4:	ffffadfd 	.word	0xffffadfd

08012bc8 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	b0c5      	sub	sp, #276	; 0x114
 8012bce:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8012bd0:	f1a2 0c02 	sub.w	ip, r2, #2
 8012bd4:	320e      	adds	r2, #14
 8012bd6:	9302      	str	r3, [sp, #8]
 8012bd8:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012bda:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012bde:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8012be2:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012be4:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012be6:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012bea:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012bee:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012bf2:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012bf6:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012bfa:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012bfe:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c00:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012c04:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8012c08:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c0e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012c10:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012c12:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c14:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8012c18:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012c1c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8012c20:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012c22:	eba8 0102 	sub.w	r1, r8, r2
 8012c26:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012c2a:	eba5 0008 	sub.w	r0, r5, r8
 8012c2e:	f640 2112 	movw	r1, #2578	; 0xa12
 8012c32:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012c36:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012c38:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012c3a:	eb09 0407 	add.w	r4, r9, r7
 8012c3e:	440c      	add	r4, r1
 8012c40:	49ba      	ldr	r1, [pc, #744]	; (8012f2c <jpeg_idct_14x7+0x364>)
 8012c42:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8012c46:	18a9      	adds	r1, r5, r2
 8012c48:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012c4a:	9900      	ldr	r1, [sp, #0]
 8012c4c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012c50:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8012c54:	fb01 0102 	mla	r1, r1, r2, r0
 8012c58:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c5c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012c60:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012c64:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012c66:	4ab2      	ldr	r2, [pc, #712]	; (8012f30 <jpeg_idct_14x7+0x368>)
 8012c68:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c6c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8012c70:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012c72:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c74:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c78:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c7a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8012c7c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c7e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8012c82:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012c86:	eb02 0905 	add.w	r9, r2, r5
 8012c8a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012c8e:	eba2 0905 	sub.w	r9, r2, r5
 8012c92:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012c96:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012c98:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012c9a:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012c9e:	49a5      	ldr	r1, [pc, #660]	; (8012f34 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8012ca0:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8012ca4:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012ca6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012caa:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012cac:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012cb0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8012cb4:	44a9      	add	r9, r5
    tmp10 += z2;
 8012cb6:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012cb8:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cbc:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012cbe:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cc0:	4452      	add	r2, sl
 8012cc2:	12d2      	asrs	r2, r2, #11
 8012cc4:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012cc8:	9a01      	ldr	r2, [sp, #4]
 8012cca:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012cce:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012cd2:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012cd6:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012cd8:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012cdc:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ce0:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ce2:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012ce6:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012ce8:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012cea:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012cec:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cee:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012cf2:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8012cf4:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012cf6:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8012cfa:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012cfe:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012d02:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012d06:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8012d0a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 8012d0e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d12:	9a04      	ldr	r2, [sp, #16]
 8012d14:	4562      	cmp	r2, ip
 8012d16:	f47f af66 	bne.w	8012be6 <jpeg_idct_14x7+0x1e>
 8012d1a:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8012d1c:	ac0c      	add	r4, sp, #48	; 0x30
 8012d1e:	3a04      	subs	r2, #4
 8012d20:	9200      	str	r2, [sp, #0]
 8012d22:	9a02      	ldr	r2, [sp, #8]
 8012d24:	3218      	adds	r2, #24
 8012d26:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012d28:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012d2a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8012d2e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012d30:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8012d34:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012d38:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012d3c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012d3e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8012d42:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012d44:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8012d48:	9200      	str	r2, [sp, #0]
 8012d4a:	460a      	mov	r2, r1
 8012d4c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012d4e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012d50:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8012d52:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012d54:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8012d58:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012d5c:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012d5e:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012d60:	4d75      	ldr	r5, [pc, #468]	; (8012f38 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8012d62:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012d66:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8012d68:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8012d6c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012d70:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012d72:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012d76:	0052      	lsls	r2, r2, #1
 8012d78:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8012d7c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 8012d7e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012d82:	eb0e 0002 	add.w	r0, lr, r2
 8012d86:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012d88:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012d8c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012d90:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012d94:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 8012d98:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 8012d9a:	eb0c 0507 	add.w	r5, ip, r7
 8012d9e:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8012da0:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012da4:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 8012da8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 8012dac:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8012dae:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8012db0:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8012db2:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8012db6:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012db8:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8012dbc:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8012dbe:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8012dc2:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8012dc6:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 8012dca:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012dcc:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8012dd0:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8012dd2:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012dd6:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 8012dda:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012dde:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012de2:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012de6:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012dea:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012dee:	4853      	ldr	r0, [pc, #332]	; (8012f3c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012df0:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012df4:	eb0a 0705 	add.w	r7, sl, r5
 8012df8:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8012dfc:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012e00:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8012e04:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8012e08:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012e0c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012e10:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012e14:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012e18:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8012e1a:	4470      	add	r0, lr
 8012e1c:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012e1e:	eb08 000c 	add.w	r0, r8, ip
 8012e22:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012e24:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012e28:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012e2c:	fb06 0608 	mla	r6, r6, r8, r0
 8012e30:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012e32:	4e43      	ldr	r6, [pc, #268]	; (8012f40 <jpeg_idct_14x7+0x378>)
 8012e34:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012e38:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012e3c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012e3e:	ebac 0508 	sub.w	r5, ip, r8
 8012e42:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012e44:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012e46:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 8012e4a:	483e      	ldr	r0, [pc, #248]	; (8012f44 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012e4c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012e50:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012e52:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012e56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e58:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012e5a:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012e5c:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8012e60:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012e64:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012e68:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012e6a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012e6c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8012e6e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012e70:	9a02      	ldr	r2, [sp, #8]
 8012e72:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8012e74:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012e78:	5dda      	ldrb	r2, [r3, r7]
 8012e7a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012e7c:	9a04      	ldr	r2, [sp, #16]
 8012e7e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8012e80:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012e84:	5c9a      	ldrb	r2, [r3, r2]
 8012e86:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e88:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e8c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8012e90:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e94:	f813 200a 	ldrb.w	r2, [r3, sl]
 8012e98:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e9a:	9a06      	ldr	r2, [sp, #24]
 8012e9c:	4402      	add	r2, r0
			     & RANGE_MASK];
 8012e9e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012ea2:	5c9a      	ldrb	r2, [r3, r2]
 8012ea4:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012ea6:	9a06      	ldr	r2, [sp, #24]
 8012ea8:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8012eaa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012eae:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012eb0:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012eb2:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012eb4:	9a01      	ldr	r2, [sp, #4]
 8012eb6:	444a      	add	r2, r9
			     & RANGE_MASK];
 8012eb8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012ebc:	5c9a      	ldrb	r2, [r3, r2]
 8012ebe:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012ec0:	9a01      	ldr	r2, [sp, #4]
 8012ec2:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8012ec6:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012eca:	f813 2009 	ldrb.w	r2, [r3, r9]
 8012ece:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ed0:	9a07      	ldr	r2, [sp, #28]
 8012ed2:	4432      	add	r2, r6
			     & RANGE_MASK];
 8012ed4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ed8:	5c9a      	ldrb	r2, [r3, r2]
 8012eda:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012edc:	9a07      	ldr	r2, [sp, #28]
 8012ede:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8012ee0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012ee4:	5d9a      	ldrb	r2, [r3, r6]
 8012ee6:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012ee8:	9a05      	ldr	r2, [sp, #20]
 8012eea:	4472      	add	r2, lr
			     & RANGE_MASK];
 8012eec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012ef0:	5c9a      	ldrb	r2, [r3, r2]
 8012ef2:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012ef4:	9a05      	ldr	r2, [sp, #20]
 8012ef6:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 8012efa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012efe:	5d5a      	ldrb	r2, [r3, r5]
 8012f00:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012f02:	9a03      	ldr	r2, [sp, #12]
 8012f04:	4402      	add	r2, r0
			     & RANGE_MASK];
 8012f06:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012f0a:	5c9a      	ldrb	r2, [r3, r2]
 8012f0c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012f0e:	9a03      	ldr	r2, [sp, #12]
 8012f10:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8012f12:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012f16:	5c1a      	ldrb	r2, [r3, r0]
 8012f18:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8012f1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f1c:	9900      	ldr	r1, [sp, #0]
 8012f1e:	428a      	cmp	r2, r1
 8012f20:	f47f af02 	bne.w	8012d28 <jpeg_idct_14x7+0x160>
  }
}
 8012f24:	b045      	add	sp, #276	; 0x114
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	bf00      	nop
 8012f2c:	ffffc515 	.word	0xffffc515
 8012f30:	ffffb0f1 	.word	0xffffb0f1
 8012f34:	ffffd3e1 	.word	0xffffd3e1
 8012f38:	ffffc8fc 	.word	0xffffc8fc
 8012f3c:	ffffdbf0 	.word	0xffffdbf0
 8012f40:	ffffb409 	.word	0xffffb409
 8012f44:	ffffc9e6 	.word	0xffffc9e6

08012f48 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012f4c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012f50:	b0bb      	sub	sp, #236	; 0xec
 8012f52:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012f54:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012f56:	3080      	adds	r0, #128	; 0x80
 8012f58:	320e      	adds	r2, #14
 8012f5a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012f5c:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012f5e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f60:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f62:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012f66:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f6a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f6e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f70:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f74:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f76:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012f7a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f7e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8012f80:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012f82:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f86:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012f8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012f8e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012f92:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8012f94:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8012f96:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012f9a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8012f9c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fa0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012fa4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012fa6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8012fa8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012fac:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8012fb0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012fb2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fb6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012fb8:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012fbc:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fc0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012fc4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012fc8:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012fcc:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012fd0:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012fd4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012fd8:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012fdc:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012fe0:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012fe4:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012fe8:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012fec:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ff0:	12d2      	asrs	r2, r2, #11
 8012ff2:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ff6:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8012ffa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012ffe:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013002:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013006:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013008:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801300c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013010:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013012:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013014:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013018:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801301a:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801301c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801301e:	42b2      	cmp	r2, r6
 8013020:	d19f      	bne.n	8012f62 <jpeg_idct_12x6+0x1a>
 8013022:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8013026:	aa0a      	add	r2, sp, #40	; 0x28
 8013028:	3314      	adds	r3, #20
 801302a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801302c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013030:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8013034:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013036:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013038:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801303a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 801303e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013040:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013044:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8013048:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801304a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 801304e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013052:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8013056:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801305a:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801305e:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013060:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8013064:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013068:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801306a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 801306e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8013070:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8013074:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8013078:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801307c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8013080:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8013084:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8013086:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801308a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801308c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8013090:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8013092:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8013096:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8013098:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 801309c:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801309e:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 80130a2:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 80130a4:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 80130a6:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80130aa:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80130ac:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80130b0:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80130b4:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80130b8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80130bc:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80130c0:	484f      	ldr	r0, [pc, #316]	; (8013200 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80130c2:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80130c6:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80130ca:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80130cc:	484d      	ldr	r0, [pc, #308]	; (8013204 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80130ce:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80130d2:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80130d6:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130da:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80130de:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130e2:	eb01 0709 	add.w	r7, r1, r9
 80130e6:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80130ea:	4847      	ldr	r0, [pc, #284]	; (8013208 <jpeg_idct_12x6+0x2c0>)
 80130ec:	fb00 1108 	mla	r1, r0, r8, r1
 80130f0:	4846      	ldr	r0, [pc, #280]	; (801320c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130f2:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80130f4:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80130f8:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 80130fc:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013100:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8013104:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8013108:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801310a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801310e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013110:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013114:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013118:	483d      	ldr	r0, [pc, #244]	; (8013210 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801311a:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801311c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013120:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013124:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013128:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801312a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801312e:	eb00 080e 	add.w	r8, r0, lr
 8013132:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8013134:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013138:	f811 c008 	ldrb.w	ip, [r1, r8]
 801313c:	9944      	ldr	r1, [sp, #272]	; 0x110
 801313e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013142:	9904      	ldr	r1, [sp, #16]
 8013144:	eba1 0e0e 	sub.w	lr, r1, lr
 8013148:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801314a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801314e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013152:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013154:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013158:	eb01 0c05 	add.w	ip, r1, r5
 801315c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801315e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013162:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8013166:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801316a:	9902      	ldr	r1, [sp, #8]
 801316c:	eba1 0805 	sub.w	r8, r1, r5
 8013170:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013172:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013176:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801317a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801317c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801317e:	19cd      	adds	r5, r1, r7
 8013180:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013182:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013186:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013188:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801318a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801318c:	1bcf      	subs	r7, r1, r7
 801318e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013190:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013194:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013196:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013198:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801319a:	190d      	adds	r5, r1, r4
 801319c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801319e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80131a2:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80131a4:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80131a6:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80131a8:	1b0c      	subs	r4, r1, r4
 80131aa:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80131ac:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80131b0:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80131b2:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80131b4:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80131b6:	198c      	adds	r4, r1, r6
 80131b8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80131ba:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80131be:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80131c0:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80131c2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80131c4:	1b8e      	subs	r6, r1, r6
 80131c6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80131c8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80131cc:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80131ce:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80131d0:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80131d2:	eb01 0409 	add.w	r4, r1, r9
 80131d6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80131d8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80131dc:	5d0c      	ldrb	r4, [r1, r4]
 80131de:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80131e0:	9905      	ldr	r1, [sp, #20]
 80131e2:	9801      	ldr	r0, [sp, #4]
 80131e4:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 80131e8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80131ec:	5c41      	ldrb	r1, [r0, r1]
 80131ee:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 80131f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f2:	4553      	cmp	r3, sl
 80131f4:	f47f af1a 	bne.w	801302c <jpeg_idct_12x6+0xe4>
  }
}
 80131f8:	b03b      	add	sp, #236	; 0xec
 80131fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fe:	bf00      	nop
 8013200:	ffffeeaf 	.word	0xffffeeaf
 8013204:	ffffde8b 	.word	0xffffde8b
 8013208:	ffffea5c 	.word	0xffffea5c
 801320c:	ffffc08c 	.word	0xffffc08c
 8013210:	ffffc4df 	.word	0xffffc4df

08013214 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013218:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801321c:	b0af      	sub	sp, #188	; 0xbc
 801321e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013220:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013222:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013224:	320e      	adds	r2, #14
 8013226:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013228:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801322a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801322e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013236:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801323a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801323c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013240:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013244:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013246:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013248:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801324c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801324e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013252:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013254:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013256:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801325a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801325e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013262:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013266:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801326a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801326e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013272:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013274:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013278:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801327c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8013280:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013282:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8013286:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801328a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801328e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013292:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013296:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013298:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801329c:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80132a0:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80132a2:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80132a6:	4b6c      	ldr	r3, [pc, #432]	; (8013458 <jpeg_idct_10x5+0x244>)
 80132a8:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80132ac:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80132b0:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80132b2:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80132b6:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80132ba:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80132be:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80132c2:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80132c4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80132c8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80132cc:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80132d0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80132d4:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80132d8:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80132dc:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80132de:	d1aa      	bne.n	8013236 <jpeg_idct_10x5+0x22>
 80132e0:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80132e2:	a906      	add	r1, sp, #24
 80132e4:	f1a3 0b04 	sub.w	fp, r3, #4
 80132e8:	3310      	adds	r3, #16
 80132ea:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80132ec:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80132f0:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 80132f2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 80132f4:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80132f8:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80132fa:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80132fe:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013300:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013304:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013308:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 801330c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013310:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013312:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013314:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013318:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 801331a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801331e:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013322:	006d      	lsls	r5, r5, #1
 8013324:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013328:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801332c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801332e:	eb05 030c 	add.w	r3, r5, ip
 8013332:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013334:	f241 0771 	movw	r7, #4209	; 0x1071
 8013338:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801333c:	4f46      	ldr	r7, [pc, #280]	; (8013458 <jpeg_idct_10x5+0x244>)
 801333e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8013342:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013346:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013348:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 801334c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801334e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8013350:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013352:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 8013354:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 8013358:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 801335c:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013360:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8013364:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013366:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801336a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 801336e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013372:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8013374:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013378:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 801337c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013380:	f240 7614 	movw	r6, #1812	; 0x714
 8013384:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013386:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013388:	eba6 0608 	sub.w	r6, r6, r8
 801338c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801338e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8013392:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013396:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801339a:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 801339e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	035b      	lsls	r3, r3, #13
 80133a6:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80133aa:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80133ae:	f642 0353 	movw	r3, #10323	; 0x2853
 80133b2:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80133b4:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80133b6:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80133b8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80133bc:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80133c0:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80133c4:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80133c6:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 80133ca:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80133ce:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80133d0:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 80133d2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80133d6:	5c82      	ldrb	r2, [r0, r2]
 80133d8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80133da:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133dc:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80133de:	f810 200c 	ldrb.w	r2, [r0, ip]
 80133e2:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133e4:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133e6:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80133e8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80133ec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133f0:	5c82      	ldrb	r2, [r0, r2]
 80133f2:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133f4:	5dc3      	ldrb	r3, [r0, r7]
 80133f6:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133f8:	9b00      	ldr	r3, [sp, #0]
 80133fa:	4443      	add	r3, r8
			    & RANGE_MASK];
 80133fc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013400:	5cc3      	ldrb	r3, [r0, r3]
 8013402:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013404:	9b00      	ldr	r3, [sp, #0]
 8013406:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 801340a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801340e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013412:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013414:	9b02      	ldr	r3, [sp, #8]
 8013416:	442b      	add	r3, r5
			    & RANGE_MASK];
 8013418:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801341c:	5cc3      	ldrb	r3, [r0, r3]
 801341e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013420:	9b02      	ldr	r3, [sp, #8]
 8013422:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8013424:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013428:	5d43      	ldrb	r3, [r0, r5]
 801342a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8013430:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013434:	5cc3      	ldrb	r3, [r0, r3]
 8013436:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013438:	9b01      	ldr	r3, [sp, #4]
 801343a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801343e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013442:	f810 300a 	ldrb.w	r3, [r0, sl]
 8013446:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013448:	9b05      	ldr	r3, [sp, #20]
 801344a:	455b      	cmp	r3, fp
 801344c:	f47f af4e 	bne.w	80132ec <jpeg_idct_10x5+0xd8>
  }
}
 8013450:	b02f      	add	sp, #188	; 0xbc
 8013452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013456:	bf00      	nop
 8013458:	ffffba5c 	.word	0xffffba5c

0801345c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013460:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013464:	b0a5      	sub	sp, #148	; 0x94
 8013466:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013468:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801346a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801346e:	f102 070e 	add.w	r7, r2, #14
 8013472:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013474:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013476:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801347a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801347e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013482:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013484:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013488:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801348c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801348e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013492:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013494:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013498:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801349c:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80134a0:	4966      	ldr	r1, [pc, #408]	; (801363c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80134a2:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80134a6:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80134aa:	6a2a      	ldr	r2, [r5, #32]
 80134ac:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80134b0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80134b2:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80134b6:	eb0a 020b 	add.w	r2, sl, fp
 80134ba:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80134be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80134c2:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80134c6:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80134ca:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80134ce:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 80134d2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80134d6:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80134da:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 80134de:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80134e2:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80134e6:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80134ea:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80134ee:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80134f0:	d1c5      	bne.n	801347e <jpeg_idct_8x4+0x22>
 80134f2:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80134f6:	a904      	add	r1, sp, #16
 80134f8:	330c      	adds	r3, #12
 80134fa:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80134fc:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013500:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013504:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013506:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013508:	9302      	str	r3, [sp, #8]
 801350a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 801350c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8013510:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8013514:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013518:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 801351c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8013520:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013524:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013528:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 801352c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013530:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013534:	4841      	ldr	r0, [pc, #260]	; (801363c <jpeg_idct_8x4+0x1e0>)
 8013536:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801353a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 801353e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013540:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8013542:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013544:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8013548:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801354c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8013550:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013552:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8013556:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 801355a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 801355e:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8013560:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8013564:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013566:	1883      	adds	r3, r0, r2
 8013568:	436b      	muls	r3, r5
    z2 += z1;
 801356a:	4d35      	ldr	r5, [pc, #212]	; (8013640 <jpeg_idct_8x4+0x1e4>)
 801356c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8013570:	4d34      	ldr	r5, [pc, #208]	; (8013644 <jpeg_idct_8x4+0x1e8>)
 8013572:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013576:	eb07 0209 	add.w	r2, r7, r9
 801357a:	4d33      	ldr	r5, [pc, #204]	; (8013648 <jpeg_idct_8x4+0x1ec>)
 801357c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 801357e:	f640 158e 	movw	r5, #2446	; 0x98e
 8013582:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8013586:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013588:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801358c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013590:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013594:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013598:	eb0e 0905 	add.w	r9, lr, r5
 801359c:	4d2b      	ldr	r5, [pc, #172]	; (801364c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 801359e:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80135a2:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 80135a6:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 80135aa:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 80135ac:	4448      	add	r0, r9
 80135ae:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 80135b2:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80135b6:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80135ba:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 80135bc:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 80135c0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80135c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80135c6:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 80135c8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80135cc:	f81c e00e 	ldrb.w	lr, [ip, lr]
 80135d0:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80135d4:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80135d6:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80135da:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80135de:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80135e0:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 80135e2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80135e6:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 80135ea:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80135ee:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80135f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80135f6:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80135f8:	f81c 2009 	ldrb.w	r2, [ip, r9]
 80135fc:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80135fe:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8013602:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013606:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801360a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801360c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013610:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013612:	9b00      	ldr	r3, [sp, #0]
 8013614:	443b      	add	r3, r7
			    & RANGE_MASK];
 8013616:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801361a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801361e:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013620:	9b00      	ldr	r3, [sp, #0]
 8013622:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8013624:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013628:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801362c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 801362e:	9b03      	ldr	r3, [sp, #12]
 8013630:	4543      	cmp	r3, r8
 8013632:	f47f af63 	bne.w	80134fc <jpeg_idct_8x4+0xa0>
  }
}
 8013636:	b025      	add	sp, #148	; 0x94
 8013638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363c:	ffffc4df 	.word	0xffffc4df
 8013640:	ffffc13b 	.word	0xffffc13b
 8013644:	fffff384 	.word	0xfffff384
 8013648:	ffffe333 	.word	0xffffe333
 801364c:	ffffadfd 	.word	0xffffadfd

08013650 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013654:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013656:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801365a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801365c:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013660:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013662:	3080      	adds	r0, #128	; 0x80
 8013664:	f102 040a 	add.w	r4, r2, #10
 8013668:	f1a1 0c04 	sub.w	ip, r1, #4
 801366c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801366e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013672:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013676:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013678:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801367c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801367e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013682:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013686:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013688:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801368c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013690:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013694:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8013698:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801369c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80136a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80136a4:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136a8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 80136ac:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 80136b0:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80136b4:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80136b8:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80136bc:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80136c0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80136c4:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80136c6:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80136ca:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80136ce:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80136d2:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80136d4:	d1d0      	bne.n	8013678 <jpeg_idct_6x3+0x28>
 80136d6:	f1a3 0e04 	sub.w	lr, r3, #4
 80136da:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80136de:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136e2:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80136e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80136e8:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136ea:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 80136ee:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 80136f0:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136f4:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136f8:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80136fc:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013700:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013704:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013708:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 801370c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013710:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8013714:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013718:	f242 7131 	movw	r1, #10033	; 0x2731
 801371c:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013720:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8013724:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8013728:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801372c:	eb04 0508 	add.w	r5, r4, r8
 8013730:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013734:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013738:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801373c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013740:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013744:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013746:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801374a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801374e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013752:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013756:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 801375a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801375e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013762:	5d04      	ldrb	r4, [r0, r4]
 8013764:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013766:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801376a:	9801      	ldr	r0, [sp, #4]
 801376c:	5d84      	ldrb	r4, [r0, r6]
 801376e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013770:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013774:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013778:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801377c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013780:	5d04      	ldrb	r4, [r0, r4]
 8013782:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013784:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013788:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801378a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801378e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013792:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013796:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801379a:	5cc3      	ldrb	r3, [r0, r3]
 801379c:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801379e:	5d43      	ldrb	r3, [r0, r5]
 80137a0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 80137a2:	d19c      	bne.n	80136de <jpeg_idct_6x3+0x8e>
  }
}
 80137a4:	b015      	add	sp, #84	; 0x54
 80137a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080137ac <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b0:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80137b2:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 80137b6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80137b8:	1e96      	subs	r6, r2, #2
 80137ba:	f10d 0c08 	add.w	ip, sp, #8
 80137be:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80137c0:	3c04      	subs	r4, #4
 80137c2:	f102 0e06 	add.w	lr, r2, #6
 80137c6:	4660      	mov	r0, ip
{
 80137c8:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80137ca:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 80137ce:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80137d2:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80137d4:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80137d8:	6a27      	ldr	r7, [r4, #32]
 80137da:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 80137de:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 80137e2:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 80137e6:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 80137ea:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 80137ee:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80137f2:	d1ea      	bne.n	80137ca <jpeg_idct_4x2+0x1e>
 80137f4:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80137f6:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80137fa:	f641 097e 	movw	r9, #6270	; 0x187e
 80137fe:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013802:	46e0      	mov	r8, ip
 8013804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013806:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 801380a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 801380c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013810:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8013814:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8013818:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 801381c:	3404      	adds	r4, #4
    z2 = wsptr[1];
 801381e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013822:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013826:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013828:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801382a:	4b13      	ldr	r3, [pc, #76]	; (8013878 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801382c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013830:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013834:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801383a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801383e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013842:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013846:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801384a:	5def      	ldrb	r7, [r5, r7]
 801384c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013850:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013852:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013854:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013856:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801385a:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 801385e:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013860:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013864:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013868:	5c69      	ldrb	r1, [r5, r1]
 801386a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801386c:	5caa      	ldrb	r2, [r5, r2]
 801386e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013870:	d1c7      	bne.n	8013802 <jpeg_idct_4x2+0x56>
  }
}
 8013872:	b00b      	add	sp, #44	; 0x2c
 8013874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013878:	ffffc4df 	.word	0xffffc4df

0801387c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801387c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801387e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013882:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013884:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013886:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013888:	f9b2 3000 	ldrsh.w	r3, [r2]
 801388c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801388e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013892:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013894:	437b      	muls	r3, r7
{
 8013896:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013898:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801389a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 801389c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801389e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80138a0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80138a2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80138a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80138aa:	5c41      	ldrb	r1, [r0, r1]
 80138ac:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80138ae:	5cc3      	ldrb	r3, [r0, r3]
 80138b0:	7073      	strb	r3, [r6, #1]
}
 80138b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080138b4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80138b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80138bc:	f1a2 0802 	sub.w	r8, r2, #2
 80138c0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80138c2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80138c6:	3380      	adds	r3, #128	; 0x80
 80138c8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138ca:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80138cc:	f1a3 0904 	sub.w	r9, r3, #4
 80138d0:	f102 030e 	add.w	r3, r2, #14
 80138d4:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80138d6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138d8:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80138dc:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138e0:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80138e4:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80138e8:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80138ec:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138f0:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80138f2:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138f6:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80138f8:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 80138fa:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80138fc:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013904:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013906:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013908:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 801390c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801390e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013910:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013912:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013916:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801391a:	4ad3      	ldr	r2, [pc, #844]	; (8013c68 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801391c:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013920:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8013924:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8013928:	4361      	muls	r1, r4
    z3 = z1 - z2;
 801392a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801392e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013932:	f642 4563 	movw	r5, #11363	; 0x2c63
 8013936:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013938:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801393c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013940:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013944:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013948:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801394c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8013950:	eb07 020c 	add.w	r2, r7, ip
 8013954:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013956:	eba7 020c 	sub.w	r2, r7, ip
 801395a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801395c:	1972      	adds	r2, r6, r5
 801395e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013960:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013962:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8013966:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013968:	eb0b 0204 	add.w	r2, fp, r4
 801396c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801396e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013972:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8013976:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013978:	1842      	adds	r2, r0, r1
 801397a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801397c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801397e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8013982:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013984:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013988:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801398c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801398e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8013992:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013994:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8013998:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801399a:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801399e:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80139a0:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80139a4:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80139a6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 80139aa:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80139ac:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80139ae:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80139b2:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139b6:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80139ba:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80139be:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80139c2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139c6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80139ca:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80139ce:	f241 5455 	movw	r4, #5461	; 0x1555
 80139d2:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139d4:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80139d8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80139da:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139de:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80139e0:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139e4:	4ca1      	ldr	r4, [pc, #644]	; (8013c6c <jpeg_idct_8x16+0x3b8>)
 80139e6:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139ea:	4fa1      	ldr	r7, [pc, #644]	; (8013c70 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 80139ec:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80139f0:	4464      	add	r4, ip
 80139f2:	445c      	add	r4, fp
 80139f4:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80139f8:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80139fa:	4f9e      	ldr	r7, [pc, #632]	; (8013c74 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80139fc:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80139fe:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8013a02:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013a04:	f240 214d 	movw	r1, #589	; 0x24d
 8013a08:	fb01 4102 	mla	r1, r1, r2, r4
 8013a0c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a0e:	499a      	ldr	r1, [pc, #616]	; (8013c78 <jpeg_idct_8x16+0x3c4>)
 8013a10:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a14:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a16:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a18:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8013a1c:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013a20:	fb07 1a05 	mla	sl, r7, r5, r1
 8013a24:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013a26:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a28:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013a2c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013a30:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a32:	4992      	ldr	r1, [pc, #584]	; (8013c7c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a34:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a36:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a3a:	4351      	muls	r1, r2
    tmp1  += z1;
 8013a3c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a3e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a42:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a46:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013a48:	498d      	ldr	r1, [pc, #564]	; (8013c80 <jpeg_idct_8x16+0x3cc>)
 8013a4a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a4c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013a50:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a52:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a56:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a58:	eb05 0b00 	add.w	fp, r5, r0
 8013a5c:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a5e:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013a60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a62:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a66:	f640 5123 	movw	r1, #3363	; 0xd23
 8013a6a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013a6c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013a6e:	445c      	add	r4, fp
    tmp3  += z2;
 8013a70:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013a72:	4429      	add	r1, r5
    tmp10 += z2;
 8013a74:	4484      	add	ip, r0
    tmp11 += z2;
 8013a76:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013a78:	12c9      	asrs	r1, r1, #11
 8013a7a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013a7e:	9901      	ldr	r1, [sp, #4]
 8013a80:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013a82:	9903      	ldr	r1, [sp, #12]
 8013a84:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013a86:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013a88:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013a8a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013a8e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013a90:	9903      	ldr	r1, [sp, #12]
 8013a92:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013a94:	9905      	ldr	r1, [sp, #20]
 8013a96:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013a98:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013a9a:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013a9c:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013aa0:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013aa2:	9905      	ldr	r1, [sp, #20]
 8013aa4:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013aa6:	9907      	ldr	r1, [sp, #28]
 8013aa8:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013aaa:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013aac:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013aae:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013ab2:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013ab4:	9907      	ldr	r1, [sp, #28]
 8013ab6:	eba1 0e0e 	sub.w	lr, r1, lr
 8013aba:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013abe:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013ac2:	9908      	ldr	r1, [sp, #32]
 8013ac4:	4461      	add	r1, ip
 8013ac6:	12c9      	asrs	r1, r1, #11
 8013ac8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013aca:	9908      	ldr	r1, [sp, #32]
 8013acc:	eba1 0c0c 	sub.w	ip, r1, ip
 8013ad0:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013ad4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013ad8:	9906      	ldr	r1, [sp, #24]
 8013ada:	4401      	add	r1, r0
 8013adc:	12c9      	asrs	r1, r1, #11
 8013ade:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013ae2:	9906      	ldr	r1, [sp, #24]
 8013ae4:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013ae6:	9904      	ldr	r1, [sp, #16]
 8013ae8:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013aea:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013aec:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013aee:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013af2:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013af6:	9904      	ldr	r1, [sp, #16]
 8013af8:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013afa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013afc:	12d2      	asrs	r2, r2, #11
 8013afe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013b02:	9a02      	ldr	r2, [sp, #8]
 8013b04:	440a      	add	r2, r1
 8013b06:	12d2      	asrs	r2, r2, #11
 8013b08:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b0c:	9a02      	ldr	r2, [sp, #8]
 8013b0e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b12:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b14:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b16:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b1a:	f47f aedd 	bne.w	80138d8 <jpeg_idct_8x16+0x24>
 8013b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013b20:	a80e      	add	r0, sp, #56	; 0x38
 8013b22:	f1a3 0904 	sub.w	r9, r3, #4
 8013b26:	333c      	adds	r3, #60	; 0x3c
 8013b28:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013b2a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b2e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013b32:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013b34:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8013b36:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8013b3a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8013b3c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8013b40:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b42:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8013b44:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8013b48:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b4c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013b4e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8013b52:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013b56:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013b5a:	4c4a      	ldr	r4, [pc, #296]	; (8013c84 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 8013b5c:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013b60:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b64:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8013b68:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b6c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013b6e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013b70:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8013b72:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8013b76:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8013b7a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 8013b7e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013b82:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8013b84:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8013b88:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8013b8c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013b8e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8013b92:	1862      	adds	r2, r4, r1
 8013b94:	435a      	muls	r2, r3
    z2 += z1;
 8013b96:	4b3c      	ldr	r3, [pc, #240]	; (8013c88 <jpeg_idct_8x16+0x3d4>)
 8013b98:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8013b9c:	4b3b      	ldr	r3, [pc, #236]	; (8013c8c <jpeg_idct_8x16+0x3d8>)
 8013b9e:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013ba2:	eb0c 010a 	add.w	r1, ip, sl
 8013ba6:	4b3a      	ldr	r3, [pc, #232]	; (8013c90 <jpeg_idct_8x16+0x3dc>)
 8013ba8:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8013baa:	f640 138e 	movw	r3, #2446	; 0x98e
 8013bae:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8013bb2:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8013bb4:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8013bb8:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013bbc:	4b35      	ldr	r3, [pc, #212]	; (8013c94 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 8013bbe:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013bc2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013bc6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013bca:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bce:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8013bd0:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8013bd2:	4454      	add	r4, sl
 8013bd4:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013bd8:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bdc:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8013be0:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013be4:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8013be6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013bea:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013bec:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bf0:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8013bf4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bf8:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 8013bfa:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bfe:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013c02:	9b00      	ldr	r3, [sp, #0]
 8013c04:	5dd9      	ldrb	r1, [r3, r7]
 8013c06:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013c08:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 8013c0a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013c0e:	5c59      	ldrb	r1, [r3, r1]
 8013c10:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013c12:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c16:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013c18:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c1a:	eb03 010b 	add.w	r1, r3, fp
 8013c1e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013c20:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c24:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013c26:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c28:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013c2a:	eba3 020b 	sub.w	r2, r3, fp
 8013c2e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013c30:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013c34:	5c9b      	ldrb	r3, [r3, r2]
 8013c36:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	9a00      	ldr	r2, [sp, #0]
 8013c3c:	4463      	add	r3, ip
			    & RANGE_MASK];
 8013c3e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013c42:	5cd3      	ldrb	r3, [r2, r3]
 8013c44:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013c46:	9b01      	ldr	r3, [sp, #4]
 8013c48:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 8013c4c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013c50:	f812 300c 	ldrb.w	r3, [r2, ip]
 8013c54:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8013c56:	9b04      	ldr	r3, [sp, #16]
 8013c58:	454b      	cmp	r3, r9
 8013c5a:	f47f af66 	bne.w	8013b2a <jpeg_idct_8x16+0x276>
  }
}
 8013c5e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8013c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c66:	bf00      	nop
 8013c68:	ffffecc2 	.word	0xffffecc2
 8013c6c:	ffffb6d6 	.word	0xffffb6d6
 8013c70:	ffffc542 	.word	0xffffc542
 8013c74:	ffffe77a 	.word	0xffffe77a
 8013c78:	ffffdbfa 	.word	0xffffdbfa
 8013c7c:	ffffeaab 	.word	0xffffeaab
 8013c80:	ffffd817 	.word	0xffffd817
 8013c84:	ffffc4df 	.word	0xffffc4df
 8013c88:	ffffc13b 	.word	0xffffc13b
 8013c8c:	fffff384 	.word	0xfffff384
 8013c90:	ffffe333 	.word	0xffffe333
 8013c94:	ffffadfd 	.word	0xffffadfd

08013c98 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c9c:	b0ef      	sub	sp, #444	; 0x1bc
 8013c9e:	f1a2 0e02 	sub.w	lr, r2, #2
 8013ca2:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ca4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013ca8:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013caa:	3380      	adds	r3, #128	; 0x80
 8013cac:	3804      	subs	r0, #4
 8013cae:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013cb0:	f102 030c 	add.w	r3, r2, #12
 8013cb4:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8013cb6:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cb8:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013cbc:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cc0:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013cc4:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013cc8:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013ccc:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cce:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013cd0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8013cd4:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013cd6:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8013cda:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013cdc:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013ce0:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013ce8:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013cec:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8013cf0:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013cf2:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013cf4:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8013cf6:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013cfa:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013cfe:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8013d00:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013d04:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013d08:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013d0c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013d10:	49b7      	ldr	r1, [pc, #732]	; (8013ff0 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013d12:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013d16:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013d18:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8013d1c:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013d1e:	1916      	adds	r6, r2, r4
 8013d20:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013d24:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8013d28:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013d2c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8013d30:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8013d34:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8013d36:	eb07 010c 	add.w	r1, r7, ip
 8013d3a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8013d3c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013d40:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d44:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8013d48:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8013d4a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013d4c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8013d50:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8013d52:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013d54:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8013d58:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8013d5a:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8013d5e:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013d62:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8013d66:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8013d68:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d6a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d6c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d70:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013d72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013d74:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013d76:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8013d7a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d7c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013d80:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d84:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013d86:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8013d8a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013d8e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013d92:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013d96:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013d9a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013d9e:	4995      	ldr	r1, [pc, #596]	; (8013ff4 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013da0:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013da4:	eb0a 0805 	add.w	r8, sl, r5
 8013da8:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8013dac:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013db0:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8013db4:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8013db8:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013dba:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8013dbe:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013dc0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013dc4:	4c8c      	ldr	r4, [pc, #560]	; (8013ff8 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8013dc6:	4449      	add	r1, r9
 8013dc8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013dca:	19b9      	adds	r1, r7, r6
 8013dcc:	fb0c f101 	mul.w	r1, ip, r1
 8013dd0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013dd4:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013dd8:	4c88      	ldr	r4, [pc, #544]	; (8013ffc <jpeg_idct_7x14+0x364>)
 8013dda:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013dde:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013de0:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013de4:	4c86      	ldr	r4, [pc, #536]	; (8014000 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013de6:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013de8:	1bf5      	subs	r5, r6, r7
 8013dea:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013dee:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8013df2:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8013df6:	9c07      	ldr	r4, [sp, #28]
 8013df8:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013dfa:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013dfc:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8013e00:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013e02:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013e04:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013e08:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013e0a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013e0c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013e0e:	12d2      	asrs	r2, r2, #11
 8013e10:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013e14:	9a01      	ldr	r2, [sp, #4]
 8013e16:	eba2 0208 	sub.w	r2, r2, r8
 8013e1a:	12d2      	asrs	r2, r2, #11
 8013e1c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013e20:	9a03      	ldr	r2, [sp, #12]
 8013e22:	4452      	add	r2, sl
 8013e24:	12d2      	asrs	r2, r2, #11
 8013e26:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013e28:	9a03      	ldr	r2, [sp, #12]
 8013e2a:	eba2 0a0a 	sub.w	sl, r2, sl
 8013e2e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8013e32:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013e36:	9a05      	ldr	r2, [sp, #20]
 8013e38:	440a      	add	r2, r1
 8013e3a:	12d2      	asrs	r2, r2, #11
 8013e3c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013e3e:	9a05      	ldr	r2, [sp, #20]
 8013e40:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8013e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e44:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013e48:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8013e4a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013e4e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013e52:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013e56:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013e58:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013e5a:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013e5c:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013e60:	12d2      	asrs	r2, r2, #11
 8013e62:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013e64:	9a06      	ldr	r2, [sp, #24]
 8013e66:	eba2 0c0c 	sub.w	ip, r2, ip
 8013e6a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8013e6e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013e72:	9a04      	ldr	r2, [sp, #16]
 8013e74:	442a      	add	r2, r5
 8013e76:	12d2      	asrs	r2, r2, #11
 8013e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013e7c:	9a04      	ldr	r2, [sp, #16]
 8013e7e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013e80:	9a02      	ldr	r2, [sp, #8]
 8013e82:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013e84:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013e86:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013e88:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013e8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013e90:	9a02      	ldr	r2, [sp, #8]
 8013e92:	1a52      	subs	r2, r2, r1
 8013e94:	12d2      	asrs	r2, r2, #11
 8013e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e9c:	4572      	cmp	r2, lr
 8013e9e:	f47f af0b 	bne.w	8013cb8 <jpeg_idct_7x14+0x20>
 8013ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8013ea4:	ac0c      	add	r4, sp, #48	; 0x30
 8013ea6:	f1a3 0904 	sub.w	r9, r3, #4
 8013eaa:	3334      	adds	r3, #52	; 0x34
 8013eac:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013eae:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8013eb2:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8013eb4:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8013eb6:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8013eba:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013ebc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8013ec0:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013ec2:	1b51      	subs	r1, r2, r5
 8013ec4:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8013ec8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013ecc:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013ed0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ed4:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8013ed8:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013edc:	eba3 0c02 	sub.w	ip, r3, r2
 8013ee0:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ee4:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013ee6:	4947      	ldr	r1, [pc, #284]	; (8014004 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013ee8:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013eec:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8013ef0:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013ef4:	eb0e 000c 	add.w	r0, lr, ip
 8013ef8:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8013efc:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013f00:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013f04:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013f08:	fb02 f208 	mul.w	r2, r2, r8
 8013f0c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013f10:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013f14:	4d3c      	ldr	r5, [pc, #240]	; (8014008 <jpeg_idct_7x14+0x370>)
 8013f16:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8013f1a:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013f1e:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8013f20:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013f24:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013f26:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013f2a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013f2c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013f2e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8013f32:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013f36:	eba2 050a 	sub.w	r5, r2, sl
 8013f3a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013f3e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013f40:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013f42:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013f44:	4b31      	ldr	r3, [pc, #196]	; (801400c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8013f46:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8013f4a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013f4c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013f50:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013f54:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013f56:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013f5a:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8013f5e:	4455      	add	r5, sl
    tmp10 += z2;
 8013f60:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013f62:	fb0b 220e 	mla	r2, fp, lr, r2
 8013f66:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013f68:	eb01 020c 	add.w	r2, r1, ip
 8013f6c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 8013f6e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013f72:	5c9a      	ldrb	r2, [r3, r2]
 8013f74:	9b03      	ldr	r3, [sp, #12]
 8013f76:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	eba3 0c0c 	sub.w	ip, r3, ip
 8013f7e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013f80:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013f84:	f813 200c 	ldrb.w	r2, [r3, ip]
 8013f88:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013f8a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f8c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8013f8e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013f92:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013f96:	5c9a      	ldrb	r2, [r3, r2]
 8013f98:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f9a:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013f9c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f9e:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013fa0:	eb03 020a 	add.w	r2, r3, sl
 8013fa4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013fa6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013faa:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013fac:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013fae:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013fb0:	eba3 0a0a 	sub.w	sl, r3, sl
 8013fb4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013fb6:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013fba:	f813 300a 	ldrb.w	r3, [r3, sl]
 8013fbe:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8013fc0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8013fc4:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013fc8:	f642 5341 	movw	r3, #11585	; 0x2d41
 8013fcc:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013fd0:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013fd2:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8013fd6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013fda:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013fde:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8013fe0:	9b04      	ldr	r3, [sp, #16]
 8013fe2:	454b      	cmp	r3, r9
 8013fe4:	f47f af63 	bne.w	8013eae <jpeg_idct_7x14+0x216>
  }
}
 8013fe8:	b06f      	add	sp, #444	; 0x1bc
 8013fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fee:	bf00      	nop
 8013ff0:	ffffc8fc 	.word	0xffffc8fc
 8013ff4:	ffffdbf0 	.word	0xffffdbf0
 8013ff8:	fffff26e 	.word	0xfffff26e
 8013ffc:	ffffb409 	.word	0xffffb409
 8014000:	ffffc9e6 	.word	0xffffc9e6
 8014004:	ffffc515 	.word	0xffffc515
 8014008:	ffffb0f1 	.word	0xffffb0f1
 801400c:	ffffd3e1 	.word	0xffffd3e1

08014010 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	b0d3      	sub	sp, #332	; 0x14c
 8014016:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014018:	f1a2 0a02 	sub.w	sl, r2, #2
 801401c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801401e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014022:	3380      	adds	r3, #128	; 0x80
 8014024:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014026:	1f0b      	subs	r3, r1, #4
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	f102 030a 	add.w	r3, r2, #10
 801402e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014030:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014032:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014034:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014038:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801403c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014040:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014044:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014046:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801404a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801404c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014050:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014054:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014056:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801405a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801405c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801405e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014060:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014062:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014066:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801406a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801406c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014070:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014074:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014078:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801407a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801407c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801407e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8014082:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8014086:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8014088:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801408c:	eb07 010c 	add.w	r1, r7, ip
 8014090:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8014092:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8014096:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 801409a:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 801409e:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 80140a0:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 80140a2:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 80140a6:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140aa:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 80140ae:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80140b0:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 80140b2:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140b4:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140b8:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 80140bc:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140be:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80140c0:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80140c2:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140c6:	6a12      	ldr	r2, [r2, #32]
 80140c8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140cc:	9a00      	ldr	r2, [sp, #0]
 80140ce:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80140d0:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140d4:	9a00      	ldr	r2, [sp, #0]
 80140d6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80140da:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80140de:	4977      	ldr	r1, [pc, #476]	; (80142bc <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140e0:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140e2:	9a00      	ldr	r2, [sp, #0]
 80140e4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80140e8:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140ec:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80140ee:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80140f2:	4973      	ldr	r1, [pc, #460]	; (80142c0 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80140f4:	eb02 0806 	add.w	r8, r2, r6
 80140f8:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80140fc:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014100:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014104:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014108:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801410c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014110:	18ae      	adds	r6, r5, r2
 8014112:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014114:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014116:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014118:	496a      	ldr	r1, [pc, #424]	; (80142c4 <jpeg_idct_6x12+0x2b4>)
 801411a:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801411e:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014120:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014124:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014128:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801412a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801412e:	fb0b 4402 	mla	r4, fp, r2, r4
 8014132:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014134:	4964      	ldr	r1, [pc, #400]	; (80142c8 <jpeg_idct_6x12+0x2b8>)
 8014136:	fb01 000c 	mla	r0, r1, ip, r0
 801413a:	4964      	ldr	r1, [pc, #400]	; (80142cc <jpeg_idct_6x12+0x2bc>)
 801413c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8014140:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014144:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014148:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801414c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801414e:	eb02 0805 	add.w	r8, r2, r5
 8014152:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014156:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801415a:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801415e:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014162:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014166:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014168:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801416a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801416e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014172:	9902      	ldr	r1, [sp, #8]
 8014174:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014176:	1a8a      	subs	r2, r1, r2
 8014178:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801417a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801417c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014180:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014182:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014184:	4432      	add	r2, r6
 8014186:	12d2      	asrs	r2, r2, #11
 8014188:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801418a:	9a05      	ldr	r2, [sp, #20]
 801418c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801418e:	9a06      	ldr	r2, [sp, #24]
 8014190:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014192:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014194:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014196:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801419a:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801419c:	9a06      	ldr	r2, [sp, #24]
 801419e:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141a0:	9a03      	ldr	r2, [sp, #12]
 80141a2:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80141a4:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141a6:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80141a8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141ac:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80141ae:	9a03      	ldr	r2, [sp, #12]
 80141b0:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80141b4:	9a04      	ldr	r2, [sp, #16]
 80141b6:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80141b8:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80141ba:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80141bc:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80141c0:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141c2:	9a04      	ldr	r2, [sp, #16]
 80141c4:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80141c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141c8:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80141ca:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141cc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80141d0:	f47f af2f 	bne.w	8014032 <jpeg_idct_6x12+0x22>
 80141d4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80141d6:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80141d8:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 80141dc:	f1a3 0c04 	sub.w	ip, r3, #4
 80141e0:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 80141e4:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80141e8:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 80141ec:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80141ee:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80141f0:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 80141f4:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 80141f6:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80141fa:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80141fe:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014202:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014206:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801420a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801420e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014212:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014216:	eba3 0302 	sub.w	r3, r3, r2
 801421a:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801421c:	f242 7331 	movw	r3, #10033	; 0x2731
 8014220:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8014224:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014228:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 801422c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8014230:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014234:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014238:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801423c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014240:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014244:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014246:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801424a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801424c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014250:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014254:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014258:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801425c:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014260:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014264:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014268:	5c18      	ldrb	r0, [r3, r0]
 801426a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801426c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014270:	9b01      	ldr	r3, [sp, #4]
 8014272:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014274:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014276:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014278:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801427c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801427e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014282:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014284:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014286:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014288:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801428c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801428e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8014290:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014294:	f813 300e 	ldrb.w	r3, [r3, lr]
 8014298:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801429a:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801429e:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 80142a2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80142a6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80142aa:	5cc3      	ldrb	r3, [r0, r3]
 80142ac:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80142ae:	5d03      	ldrb	r3, [r0, r4]
 80142b0:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 80142b2:	d197      	bne.n	80141e4 <jpeg_idct_6x12+0x1d4>
  }
}
 80142b4:	b053      	add	sp, #332	; 0x14c
 80142b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ba:	bf00      	nop
 80142bc:	ffffeeaf 	.word	0xffffeeaf
 80142c0:	ffffde8b 	.word	0xffffde8b
 80142c4:	ffffd0b0 	.word	0xffffd0b0
 80142c8:	ffffea5c 	.word	0xffffea5c
 80142cc:	ffffc08c 	.word	0xffffc08c

080142d0 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80142d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	b0b9      	sub	sp, #228	; 0xe4
 80142d6:	1e94      	subs	r4, r2, #2
 80142d8:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80142da:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80142de:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80142e0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80142e2:	3380      	adds	r3, #128	; 0x80
 80142e4:	3804      	subs	r0, #4
 80142e6:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80142e8:	f102 0308 	add.w	r3, r2, #8
 80142ec:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142ee:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80142f2:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142f4:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142f8:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142fc:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142fe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014302:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014304:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014308:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801430a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801430e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014312:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014316:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014318:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 801431c:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 801431e:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014322:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014324:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014328:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801432c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014330:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014332:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014334:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014336:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801433a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801433c:	19f3      	adds	r3, r6, r7
 801433e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014340:	f241 0271 	movw	r2, #4209	; 0x1071
 8014344:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014348:	4a6d      	ldr	r2, [pc, #436]	; (8014500 <jpeg_idct_5x10+0x230>)
 801434a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 801434e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8014350:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014354:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8014358:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 801435c:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014360:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014362:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014364:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014368:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801436a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801436e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014370:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014372:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014376:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014378:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 801437c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014380:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8014384:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014386:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 801438a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801438e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014390:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014394:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014398:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801439c:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801439e:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80143a2:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 80143a6:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80143aa:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80143ac:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80143b0:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80143b2:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80143b6:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80143ba:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80143bc:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80143be:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80143c2:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80143c6:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80143ca:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80143ce:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80143d2:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80143d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80143d8:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80143da:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80143de:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143e2:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80143e6:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80143ea:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143ec:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80143ee:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80143f0:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80143f4:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80143f8:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80143fc:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80143fe:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014400:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014402:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014404:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014408:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801440a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801440c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801440e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014410:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014414:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8014418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801441c:	9b02      	ldr	r3, [sp, #8]
 801441e:	442b      	add	r3, r5
 8014420:	12db      	asrs	r3, r3, #11
 8014422:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014424:	9b02      	ldr	r3, [sp, #8]
 8014426:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014428:	9b01      	ldr	r3, [sp, #4]
 801442a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801442c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801442e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014430:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014432:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014434:	9b01      	ldr	r3, [sp, #4]
 8014436:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801443a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801443c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014440:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014442:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014444:	f47f af53 	bne.w	80142ee <jpeg_idct_5x10+0x1e>
 8014448:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801444a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801444c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014450:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8014454:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014458:	f641 289a 	movw	r8, #6810	; 0x1a9a
 801445c:	3324      	adds	r3, #36	; 0x24
 801445e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014460:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014464:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014466:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014468:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801446c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014470:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014474:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014478:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801447a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801447c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801447e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014482:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014486:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801448a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 801448e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014492:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014494:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014498:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 801449a:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801449c:	eb05 000b 	add.w	r0, r5, fp
 80144a0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80144a4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80144a8:	4b15      	ldr	r3, [pc, #84]	; (8014500 <jpeg_idct_5x10+0x230>)
 80144aa:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80144ae:	eb04 0b05 	add.w	fp, r4, r5
 80144b2:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80144b4:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 80144b6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 80144ba:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80144be:	f813 b00b 	ldrb.w	fp, [r3, fp]
 80144c2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80144c4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80144c8:	9b00      	ldr	r3, [sp, #0]
 80144ca:	5d1c      	ldrb	r4, [r3, r4]
 80144cc:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80144ce:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80144d0:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 80144d2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80144d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80144da:	5d1c      	ldrb	r4, [r3, r4]
 80144dc:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80144de:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 80144e0:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80144e2:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80144ea:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80144ec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80144f0:	5ddb      	ldrb	r3, [r3, r7]
 80144f2:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 80144f4:	9b02      	ldr	r3, [sp, #8]
 80144f6:	4563      	cmp	r3, ip
 80144f8:	d1b2      	bne.n	8014460 <jpeg_idct_5x10+0x190>
  }
}
 80144fa:	b039      	add	sp, #228	; 0xe4
 80144fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014500:	ffffba5c 	.word	0xffffba5c

08014504 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014508:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801450a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801450c:	3a02      	subs	r2, #2
{
 801450e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8014510:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014512:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014516:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 801451a:	f105 0310 	add.w	r3, r5, #16
 801451e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014520:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014524:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014526:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801452a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801452e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014532:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8014536:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801453a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801453e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014542:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8014546:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014548:	ea4a 030b 	orr.w	r3, sl, fp
 801454c:	ea4e 0303 	orr.w	r3, lr, r3
 8014550:	433b      	orrs	r3, r7
 8014552:	ea48 0303 	orr.w	r3, r8, r3
 8014556:	4333      	orrs	r3, r6
 8014558:	ea59 0303 	orrs.w	r3, r9, r3
 801455c:	d154      	bne.n	8014608 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801455e:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8014560:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8014564:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8014566:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8014568:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801456a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801456c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 801456e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014570:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014572:	9b05      	ldr	r3, [sp, #20]
 8014574:	42ab      	cmp	r3, r5
 8014576:	d1d3      	bne.n	8014520 <jpeg_idct_4x8+0x1c>
 8014578:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801457a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801457c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014580:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014584:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014586:	f8df b184 	ldr.w	fp, [pc, #388]	; 801470c <jpeg_idct_4x8+0x208>
 801458a:	331c      	adds	r3, #28
 801458c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 801458e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014592:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014594:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014596:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 801459a:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 801459c:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 80145a0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145a4:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 80145a6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80145aa:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80145ae:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80145b0:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80145b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80145b6:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80145ba:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80145be:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80145c2:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80145c6:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 80145ca:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80145ce:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80145d2:	f81c a00a 	ldrb.w	sl, [ip, sl]
 80145d6:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80145da:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 80145de:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80145e0:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80145e2:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80145e6:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 80145ea:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 80145ec:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80145f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80145f4:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80145f8:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80145fa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80145fe:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014600:	d1c5      	bne.n	801458e <jpeg_idct_4x8+0x8a>
  }
}
 8014602:	b027      	add	sp, #156	; 0x9c
 8014604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014608:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801460a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801460e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014612:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014614:	f241 1651 	movw	r6, #4433	; 0x1151
 8014618:	eb0b 0300 	add.w	r3, fp, r0
 801461c:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801461e:	f641 067e 	movw	r6, #6270	; 0x187e
 8014622:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014626:	4e39      	ldr	r6, [pc, #228]	; (801470c <jpeg_idct_4x8+0x208>)
 8014628:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 801462c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801462e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014634:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8014636:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 801463a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 801463e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8014642:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8014644:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014646:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8014648:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801464c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 801464e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014650:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014654:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8014658:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801465a:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801465e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014662:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8014666:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801466a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801466c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014670:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014674:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014678:	1930      	adds	r0, r6, r4
 801467a:	4358      	muls	r0, r3
    z2 += z1;
 801467c:	4b24      	ldr	r3, [pc, #144]	; (8014710 <jpeg_idct_4x8+0x20c>)
 801467e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014682:	4b24      	ldr	r3, [pc, #144]	; (8014714 <jpeg_idct_4x8+0x210>)
 8014684:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014688:	eb09 040a 	add.w	r4, r9, sl
 801468c:	4b22      	ldr	r3, [pc, #136]	; (8014718 <jpeg_idct_4x8+0x214>)
 801468e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8014690:	f640 138e 	movw	r3, #2446	; 0x98e
 8014694:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014698:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801469a:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 801469e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80146a2:	4b1e      	ldr	r3, [pc, #120]	; (801471c <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 80146a4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80146a8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80146ac:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80146b0:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80146b4:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 80146b6:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80146b8:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80146ba:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80146be:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 80146c2:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80146c6:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80146c8:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80146ca:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80146cc:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80146ce:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80146d0:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80146d4:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80146d6:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80146da:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80146de:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80146e0:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80146e4:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80146e6:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80146e8:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80146ea:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80146ec:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80146ee:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80146f0:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80146f2:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80146f4:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80146f6:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80146f8:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80146fa:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80146fc:	9b02      	ldr	r3, [sp, #8]
 80146fe:	eba3 0909 	sub.w	r9, r3, r9
 8014702:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8014706:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014708:	e733      	b.n	8014572 <jpeg_idct_4x8+0x6e>
 801470a:	bf00      	nop
 801470c:	ffffc4df 	.word	0xffffc4df
 8014710:	ffffc13b 	.word	0xffffc13b
 8014714:	fffff384 	.word	0xfffff384
 8014718:	ffffe333 	.word	0xffffe333
 801471c:	ffffadfd 	.word	0xffffadfd

08014720 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014724:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014728:	b095      	sub	sp, #84	; 0x54
 801472a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801472c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801472e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014732:	3204      	adds	r2, #4
 8014734:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014736:	ae02      	add	r6, sp, #8
{
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801473c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014740:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014744:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014748:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801474a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801474e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014750:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014754:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014758:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 801475a:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801475c:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014760:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014764:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014768:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801476c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 801476e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014770:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014776:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014778:	f242 7731 	movw	r7, #10033	; 0x2731
 801477c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801477e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014782:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014786:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014788:	6a22      	ldr	r2, [r4, #32]
 801478a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801478c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 801478e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014792:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014796:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801479a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801479e:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80147a2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80147a6:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80147a8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80147aa:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80147ae:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80147b0:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80147b4:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80147b8:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80147bc:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80147c0:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80147c4:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80147c8:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80147cc:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80147d0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80147d4:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80147d6:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80147da:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80147de:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80147e0:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80147e4:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80147e8:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80147ea:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80147ee:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80147f2:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80147f4:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80147f6:	d1a1      	bne.n	801473c <jpeg_idct_3x6+0x1c>
 80147f8:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 80147fa:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80147fc:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014800:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014804:	1f1d      	subs	r5, r3, #4
 8014806:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014808:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 801480c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801480e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014810:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014814:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014816:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801481a:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801481e:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014822:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014826:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801482a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801482c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014830:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014834:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014838:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801483c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014840:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014844:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014848:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801484c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014850:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014854:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014858:	f81e 4008 	ldrb.w	r4, [lr, r8]
 801485c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801485e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014862:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014864:	d1d0      	bne.n	8014808 <jpeg_idct_3x6+0xe8>
  }
}
 8014866:	b015      	add	sp, #84	; 0x54
 8014868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801486c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014870:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014874:	b08b      	sub	sp, #44	; 0x2c
 8014876:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014878:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801487a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801487e:	ad02      	add	r5, sp, #8
 8014880:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014882:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014886:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801488a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801488c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014890:	46b4      	mov	ip, r6
 8014892:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014896:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014898:	4f29      	ldr	r7, [pc, #164]	; (8014940 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801489a:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801489c:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148a0:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 80148a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80148a6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148aa:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80148ae:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80148b2:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80148b6:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80148ba:	6a21      	ldr	r1, [r4, #32]
 80148bc:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80148c0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80148c2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80148c6:	eb0a 010b 	add.w	r1, sl, fp
 80148ca:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80148ce:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80148d2:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 80148d6:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80148da:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 80148de:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 80148e2:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 80148e6:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80148ea:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 80148ee:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 80148f2:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80148f4:	d1ca      	bne.n	801488c <jpeg_idct_2x4+0x20>
 80148f6:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80148f8:	a902      	add	r1, sp, #8
 80148fa:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80148fc:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8014900:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8014902:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014904:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014908:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 801490a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801490e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014912:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014914:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014918:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801491c:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8014920:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8014924:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014928:	5d3c      	ldrb	r4, [r7, r4]
 801492a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801492c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801492e:	9c01      	ldr	r4, [sp, #4]
 8014930:	5ca2      	ldrb	r2, [r4, r2]
 8014932:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8014936:	d1e1      	bne.n	80148fc <jpeg_idct_2x4+0x90>
  }
}
 8014938:	b00b      	add	sp, #44	; 0x2c
 801493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801493e:	bf00      	nop
 8014940:	ffffc4df 	.word	0xffffc4df

08014944 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014944:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014946:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014948:	f9b2 1000 	ldrsh.w	r1, [r2]
 801494c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801494e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8014952:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014954:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014956:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801495a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 801495c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801495e:	3080      	adds	r0, #128	; 0x80
{
 8014960:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014962:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014964:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8014966:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801496a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801496e:	5d06      	ldrb	r6, [r0, r4]
 8014970:	681c      	ldr	r4, [r3, #0]
 8014972:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014974:	5c42      	ldrb	r2, [r0, r1]
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	555a      	strb	r2, [r3, r5]
}
 801497a:	bd70      	pop	{r4, r5, r6, pc}

0801497c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801497c:	6803      	ldr	r3, [r0, #0]
 801497e:	2238      	movs	r2, #56	; 0x38
 8014980:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	4718      	bx	r3

08014988 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014988:	688b      	ldr	r3, [r1, #8]
{
 801498a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801498e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8014992:	698b      	ldr	r3, [r1, #24]
{
 8014994:	b085      	sub	sp, #20
 8014996:	4681      	mov	r9, r0
 8014998:	460c      	mov	r4, r1
 801499a:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 801499c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80149a0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80149a2:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80149a6:	6922      	ldr	r2, [r4, #16]
 80149a8:	42b2      	cmp	r2, r6
 80149aa:	dc02      	bgt.n	80149b2 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 80149ac:	b005      	add	sp, #20
 80149ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80149b2:	1b92      	subs	r2, r2, r6
 80149b4:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80149b6:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80149b8:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80149ba:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 80149bc:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80149c0:	bfa8      	it	ge
 80149c2:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80149c4:	69e1      	ldr	r1, [r4, #28]
 80149c6:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80149c8:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80149ca:	428a      	cmp	r2, r1
 80149cc:	bfa8      	it	ge
 80149ce:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80149d0:	42aa      	cmp	r2, r5
 80149d2:	bfa8      	it	ge
 80149d4:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	dde8      	ble.n	80149ac <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 80149da:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80149de:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 80149e0:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80149e2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 80149e6:	f1ba 0f00 	cmp.w	sl, #0
 80149ea:	d00a      	beq.n	8014a02 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80149ec:	9300      	str	r3, [sp, #0]
 80149ee:	4659      	mov	r1, fp
 80149f0:	463b      	mov	r3, r7
 80149f2:	4648      	mov	r0, r9
 80149f4:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80149f6:	47a8      	blx	r5
    file_offset += byte_count;
 80149f8:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80149fa:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80149fc:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80149fe:	4416      	add	r6, r2
 8014a00:	e7d1      	b.n	80149a6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014a02:	9b03      	ldr	r3, [sp, #12]
 8014a04:	4659      	mov	r1, fp
 8014a06:	4648      	mov	r0, r9
 8014a08:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	463b      	mov	r3, r7
 8014a0e:	e7f2      	b.n	80149f6 <do_barray_io+0x6e>

08014a10 <alloc_small>:
{
 8014a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014a14:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014a18:	4606      	mov	r6, r0
 8014a1a:	460d      	mov	r5, r1
 8014a1c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014a1e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014a20:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014a22:	d902      	bls.n	8014a2a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8014a24:	2101      	movs	r1, #1
 8014a26:	f7ff ffa9 	bl	801497c <out_of_memory>
  if (odd_bytes > 0)
 8014a2a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014a2e:	bf1c      	itt	ne
 8014a30:	3408      	addne	r4, #8
 8014a32:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014a34:	2d01      	cmp	r5, #1
 8014a36:	d906      	bls.n	8014a46 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014a38:	6833      	ldr	r3, [r6, #0]
 8014a3a:	220f      	movs	r2, #15
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8014a46:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8014a4a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8014a4e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8014a52:	b9e8      	cbnz	r0, 8014a90 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8014a54:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014a58:	f1ba 0f00 	cmp.w	sl, #0
 8014a5c:	d11e      	bne.n	8014a9c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8014a5e:	4b1d      	ldr	r3, [pc, #116]	; (8014ad4 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8014a60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8014a64:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8014a68:	429d      	cmp	r5, r3
 8014a6a:	bf28      	it	cs
 8014a6c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8014a6e:	eb05 0b09 	add.w	fp, r5, r9
 8014a72:	4630      	mov	r0, r6
 8014a74:	4659      	mov	r1, fp
 8014a76:	f000 fbcf 	bl	8015218 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8014a7a:	b988      	cbnz	r0, 8014aa0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014a7c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8014a7e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014a82:	d803      	bhi.n	8014a8c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014a84:	2102      	movs	r1, #2
 8014a86:	4630      	mov	r0, r6
 8014a88:	f7ff ff78 	bl	801497c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014a8c:	465d      	mov	r5, fp
 8014a8e:	e7ee      	b.n	8014a6e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8014a90:	6883      	ldr	r3, [r0, #8]
 8014a92:	42a3      	cmp	r3, r4
 8014a94:	d211      	bcs.n	8014aba <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8014a96:	4682      	mov	sl, r0
 8014a98:	6800      	ldr	r0, [r0, #0]
 8014a9a:	e7da      	b.n	8014a52 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014a9c:	4b0e      	ldr	r3, [pc, #56]	; (8014ad8 <alloc_small+0xc8>)
 8014a9e:	e7df      	b.n	8014a60 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8014aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014aa2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014aa4:	445b      	add	r3, fp
 8014aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8014aa8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014aaa:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014aac:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014ab0:	f1ba 0f00 	cmp.w	sl, #0
 8014ab4:	d10b      	bne.n	8014ace <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8014ab6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014aba:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014abc:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014abe:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014ac0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8014ac2:	6882      	ldr	r2, [r0, #8]
 8014ac4:	1b12      	subs	r2, r2, r4
 8014ac6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014ac8:	4418      	add	r0, r3
}
 8014aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8014ace:	f8ca 0000 	str.w	r0, [sl]
 8014ad2:	e7f2      	b.n	8014aba <alloc_small+0xaa>
 8014ad4:	0802e184 	.word	0x0802e184
 8014ad8:	0802e17c 	.word	0x0802e17c

08014adc <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014adc:	2901      	cmp	r1, #1
{
 8014ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	460d      	mov	r5, r1
 8014ae6:	4616      	mov	r6, r2
 8014ae8:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014aea:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014aee:	d005      	beq.n	8014afc <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014af0:	6803      	ldr	r3, [r0, #0]
 8014af2:	220f      	movs	r2, #15
 8014af4:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8014afc:	223c      	movs	r2, #60	; 0x3c
 8014afe:	4629      	mov	r1, r5
 8014b00:	4620      	mov	r0, r4
 8014b02:	f7ff ff85 	bl	8014a10 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014b06:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014b08:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014b0a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014b0c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014b0e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8014b12:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014b14:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8014b16:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014b1a:	9a07      	ldr	r2, [sp, #28]
 8014b1c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8014b1e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8014b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b26 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8014b26:	2901      	cmp	r1, #1
{
 8014b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	460d      	mov	r5, r1
 8014b30:	4616      	mov	r6, r2
 8014b32:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014b34:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014b38:	d005      	beq.n	8014b46 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014b3a:	6803      	ldr	r3, [r0, #0]
 8014b3c:	220f      	movs	r2, #15
 8014b3e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8014b46:	223c      	movs	r2, #60	; 0x3c
 8014b48:	4629      	mov	r1, r5
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ff ff60 	bl	8014a10 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014b50:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014b52:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014b54:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014b56:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014b58:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8014b5c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014b5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8014b60:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014b64:	9a07      	ldr	r2, [sp, #28]
 8014b66:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8014b68:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8014b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b70 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014b70:	2901      	cmp	r1, #1
{
 8014b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b76:	4606      	mov	r6, r0
 8014b78:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014b7a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014b7c:	d910      	bls.n	8014ba0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014b7e:	6803      	ldr	r3, [r0, #0]
 8014b80:	220f      	movs	r2, #15
 8014b82:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8014b8a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8014b8e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8014b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8014b92:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8014b94:	bb0b      	cbnz	r3, 8014bda <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8014b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8014b98:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8014b9a:	bb69      	cbnz	r1, 8014bf8 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8014b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8014ba0:	d1f3      	bne.n	8014b8a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ba2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014ba4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ba6:	b924      	cbnz	r4, 8014bb2 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014ba8:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8014baa:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014bac:	b95f      	cbnz	r7, 8014bc6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8014bae:	64af      	str	r7, [r5, #72]	; 0x48
 8014bb0:	e7eb      	b.n	8014b8a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8014bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014bb4:	b12b      	cbz	r3, 8014bc2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014bb8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014bbc:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014bbe:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014bc0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014bc2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014bc4:	e7ef      	b.n	8014ba6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8014bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc8:	b12b      	cbz	r3, 8014bd6 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bcc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014bd0:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014bd2:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014bd4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014bd6:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8014bd8:	e7e8      	b.n	8014bac <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014bda:	e9d3 8700 	ldrd	r8, r7, [r3]
 8014bde:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014be0:	4619      	mov	r1, r3
 8014be2:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014be4:	4417      	add	r7, r2
 8014be6:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014be8:	463a      	mov	r2, r7
 8014bea:	f000 fb1e 	bl	801522a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8014bee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014bf0:	1bdb      	subs	r3, r3, r7
 8014bf2:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8014bf4:	4643      	mov	r3, r8
 8014bf6:	e7cd      	b.n	8014b94 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8014bf8:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014bfa:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8014bfc:	e9d1 7400 	ldrd	r7, r4, [r1]
 8014c00:	4414      	add	r4, r2
 8014c02:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014c04:	4622      	mov	r2, r4
 8014c06:	f000 fb0a 	bl	801521e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8014c0a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014c0c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8014c0e:	1b1b      	subs	r3, r3, r4
 8014c10:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014c12:	e7c2      	b.n	8014b9a <free_pool+0x2a>

08014c14 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8014c14:	b510      	push	{r4, lr}
 8014c16:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8014c18:	2101      	movs	r1, #1
 8014c1a:	f7ff ffa9 	bl	8014b70 <free_pool>
 8014c1e:	2100      	movs	r1, #0
 8014c20:	4620      	mov	r0, r4
 8014c22:	f7ff ffa5 	bl	8014b70 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8014c26:	4620      	mov	r0, r4
 8014c28:	6861      	ldr	r1, [r4, #4]
 8014c2a:	2254      	movs	r2, #84	; 0x54
 8014c2c:	f000 faf7 	bl	801521e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014c30:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014c32:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014c34:	6063      	str	r3, [r4, #4]
}
 8014c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014c3a:	f000 bb02 	b.w	8015242 <jpeg_mem_term>

08014c3e <access_virt_barray>:
{
 8014c3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014c42:	18d7      	adds	r7, r2, r3
{
 8014c44:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014c46:	684a      	ldr	r2, [r1, #4]
{
 8014c48:	460c      	mov	r4, r1
 8014c4a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014c4e:	42ba      	cmp	r2, r7
 8014c50:	d304      	bcc.n	8014c5c <access_virt_barray+0x1e>
 8014c52:	68ca      	ldr	r2, [r1, #12]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d301      	bcc.n	8014c5c <access_virt_barray+0x1e>
 8014c58:	680b      	ldr	r3, [r1, #0]
 8014c5a:	b933      	cbnz	r3, 8014c6a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014c5c:	6803      	ldr	r3, [r0, #0]
 8014c5e:	2217      	movs	r2, #23
 8014c60:	9001      	str	r0, [sp, #4]
 8014c62:	615a      	str	r2, [r3, #20]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	4798      	blx	r3
 8014c68:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8014c6a:	69a3      	ldr	r3, [r4, #24]
 8014c6c:	42ab      	cmp	r3, r5
 8014c6e:	d803      	bhi.n	8014c78 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014c70:	6922      	ldr	r2, [r4, #16]
 8014c72:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014c74:	42bb      	cmp	r3, r7
 8014c76:	d221      	bcs.n	8014cbc <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8014c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014c7a:	b933      	cbnz	r3, 8014c8a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014c7c:	6803      	ldr	r3, [r0, #0]
 8014c7e:	2247      	movs	r2, #71	; 0x47
 8014c80:	9001      	str	r0, [sp, #4]
 8014c82:	615a      	str	r2, [r3, #20]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	4798      	blx	r3
 8014c88:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8014c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c8c:	b13b      	cbz	r3, 8014c9e <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8014c8e:	2201      	movs	r2, #1
 8014c90:	4621      	mov	r1, r4
 8014c92:	9001      	str	r0, [sp, #4]
 8014c94:	f7ff fe78 	bl	8014988 <do_barray_io>
      ptr->dirty = FALSE;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	9801      	ldr	r0, [sp, #4]
 8014c9c:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014c9e:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	4621      	mov	r1, r4
 8014ca4:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8014ca6:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014ca8:	bf29      	itett	cs
 8014caa:	6923      	ldrcs	r3, [r4, #16]
 8014cac:	462b      	movcc	r3, r5
 8014cae:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8014cb0:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014cb4:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014cb6:	f7ff fe67 	bl	8014988 <do_barray_io>
 8014cba:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8014cbc:	69e6      	ldr	r6, [r4, #28]
 8014cbe:	42be      	cmp	r6, r7
 8014cc0:	d21c      	bcs.n	8014cfc <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8014cc2:	42ae      	cmp	r6, r5
 8014cc4:	d20c      	bcs.n	8014ce0 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8014cc6:	f1b8 0f00 	cmp.w	r8, #0
 8014cca:	d01b      	beq.n	8014d04 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014ccc:	6803      	ldr	r3, [r0, #0]
 8014cce:	2217      	movs	r2, #23
 8014cd0:	9001      	str	r0, [sp, #4]
 8014cd2:	462e      	mov	r6, r5
 8014cd4:	615a      	str	r2, [r3, #20]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4798      	blx	r3
    if (writable)
 8014cda:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8014cdc:	61e7      	str	r7, [r4, #28]
 8014cde:	e002      	b.n	8014ce6 <access_virt_barray+0xa8>
    if (writable)
 8014ce0:	f1b8 0f00 	cmp.w	r8, #0
 8014ce4:	d1fa      	bne.n	8014cdc <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8014ce6:	6a22      	ldr	r2, [r4, #32]
 8014ce8:	b1b2      	cbz	r2, 8014d18 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014cea:	68a2      	ldr	r2, [r4, #8]
 8014cec:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014cf0:	69a2      	ldr	r2, [r4, #24]
 8014cf2:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8014cf4:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8014cf6:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014cf8:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8014cfa:	d305      	bcc.n	8014d08 <access_virt_barray+0xca>
  if (writable)
 8014cfc:	f1b8 0f00 	cmp.w	r8, #0
 8014d00:	d10d      	bne.n	8014d1e <access_virt_barray+0xe0>
 8014d02:	e00e      	b.n	8014d22 <access_virt_barray+0xe4>
 8014d04:	462e      	mov	r6, r5
 8014d06:	e7ee      	b.n	8014ce6 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014d08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d0c:	464a      	mov	r2, r9
 8014d0e:	2100      	movs	r1, #0
	undef_row++;
 8014d10:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014d12:	f014 fa9b 	bl	802924c <memset>
	undef_row++;
 8014d16:	e7ee      	b.n	8014cf6 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8014d18:	f1b8 0f00 	cmp.w	r8, #0
 8014d1c:	d009      	beq.n	8014d32 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8014d1e:	2301      	movs	r3, #1
 8014d20:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8014d22:	69a0      	ldr	r0, [r4, #24]
 8014d24:	1a2d      	subs	r5, r5, r0
 8014d26:	6820      	ldr	r0, [r4, #0]
}
 8014d28:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8014d2c:	b003      	add	sp, #12
 8014d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014d32:	6803      	ldr	r3, [r0, #0]
 8014d34:	2217      	movs	r2, #23
 8014d36:	615a      	str	r2, [r3, #20]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4798      	blx	r3
  if (writable)
 8014d3c:	e7f1      	b.n	8014d22 <access_virt_barray+0xe4>

08014d3e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8014d3e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8014d42:	429a      	cmp	r2, r3
{
 8014d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d48:	4606      	mov	r6, r0
 8014d4a:	4688      	mov	r8, r1
 8014d4c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014d4e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8014d50:	d902      	bls.n	8014d58 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8014d52:	2103      	movs	r1, #3
 8014d54:	f7ff fe12 	bl	801497c <out_of_memory>
  if (odd_bytes > 0)
 8014d58:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014d5c:	bf1c      	itt	ne
 8014d5e:	3408      	addne	r4, #8
 8014d60:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014d62:	f1b8 0f01 	cmp.w	r8, #1
 8014d66:	d906      	bls.n	8014d76 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014d68:	6833      	ldr	r3, [r6, #0]
 8014d6a:	220f      	movs	r2, #15
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8014d76:	f104 0110 	add.w	r1, r4, #16
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f000 fa52 	bl	8015224 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8014d80:	4605      	mov	r5, r0
 8014d82:	b918      	cbnz	r0, 8014d8c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8014d84:	2104      	movs	r1, #4
 8014d86:	4630      	mov	r0, r6
 8014d88:	f7ff fdf8 	bl	801497c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014d8e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014d92:	3310      	adds	r3, #16
 8014d94:	4423      	add	r3, r4
 8014d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8014d98:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8014d9e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8014da2:	2300      	movs	r3, #0
 8014da4:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8014da6:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 8014da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014dac <alloc_barray>:
{
 8014dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8014db0:	01d7      	lsls	r7, r2, #7
{
 8014db2:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014db4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014db8:	4680      	mov	r8, r0
 8014dba:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014dbc:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8014dbe:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014dc0:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8014dc4:	d904      	bls.n	8014dd0 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014dc6:	6803      	ldr	r3, [r0, #0]
 8014dc8:	2248      	movs	r2, #72	; 0x48
 8014dca:	615a      	str	r2, [r3, #20]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014dd0:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014dd2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014dd6:	4651      	mov	r1, sl
 8014dd8:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8014dda:	bfa8      	it	ge
 8014ddc:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014dde:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014de0:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014de2:	f7ff fe15 	bl	8014a10 <alloc_small>
 8014de6:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014de8:	42ae      	cmp	r6, r5
 8014dea:	d302      	bcc.n	8014df2 <alloc_barray+0x46>
}
 8014dec:	4648      	mov	r0, r9
 8014dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014df2:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014df4:	4651      	mov	r1, sl
 8014df6:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014df8:	429c      	cmp	r4, r3
 8014dfa:	bf28      	it	cs
 8014dfc:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014dfe:	fb04 f207 	mul.w	r2, r4, r7
 8014e02:	f7ff ff9c 	bl	8014d3e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014e06:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014e0a:	4426      	add	r6, r4
 8014e0c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014e10:	4293      	cmp	r3, r2
 8014e12:	d0e9      	beq.n	8014de8 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8014e14:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8014e18:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8014e1a:	e7f9      	b.n	8014e10 <alloc_barray+0x64>

08014e1c <alloc_sarray>:
{
 8014e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e20:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014e22:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014e26:	4607      	mov	r7, r0
 8014e28:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8014e2a:	429a      	cmp	r2, r3
{
 8014e2c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014e2e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014e30:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8014e34:	d904      	bls.n	8014e40 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014e36:	6803      	ldr	r3, [r0, #0]
 8014e38:	2248      	movs	r2, #72	; 0x48
 8014e3a:	615a      	str	r2, [r3, #20]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014e40:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014e42:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014e46:	4651      	mov	r1, sl
 8014e48:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8014e4a:	bfa8      	it	ge
 8014e4c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014e4e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014e50:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014e52:	f7ff fddd 	bl	8014a10 <alloc_small>
 8014e56:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014e58:	42ae      	cmp	r6, r5
 8014e5a:	d302      	bcc.n	8014e62 <alloc_sarray+0x46>
}
 8014e5c:	4648      	mov	r0, r9
 8014e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014e62:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014e64:	4651      	mov	r1, sl
 8014e66:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014e68:	429c      	cmp	r4, r3
 8014e6a:	bf28      	it	cs
 8014e6c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014e6e:	fb04 f208 	mul.w	r2, r4, r8
 8014e72:	f7ff ff64 	bl	8014d3e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014e76:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014e7a:	4426      	add	r6, r4
 8014e7c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d0e9      	beq.n	8014e58 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8014e84:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8014e88:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8014e8a:	e7f9      	b.n	8014e80 <alloc_sarray+0x64>

08014e8c <realize_virt_arrays>:
{
 8014e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014e90:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8014e94:	2500      	movs	r5, #0
{
 8014e96:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014e98:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8014e9c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014e9e:	bb03      	cbnz	r3, 8014ee2 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014ea0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8014ea4:	bb43      	cbnz	r3, 8014ef8 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8014ea6:	2e00      	cmp	r6, #0
 8014ea8:	dd19      	ble.n	8014ede <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8014eaa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4631      	mov	r1, r6
 8014eb2:	4638      	mov	r0, r7
 8014eb4:	f000 f9bc 	bl	8015230 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8014eb8:	4285      	cmp	r5, r0
 8014eba:	dd2a      	ble.n	8014f12 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8014ebc:	fb90 f6f6 	sdiv	r6, r0, r6
 8014ec0:	2e01      	cmp	r6, #1
 8014ec2:	bfb8      	it	lt
 8014ec4:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ec6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014eca:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8014ece:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ed0:	bb0c      	cbnz	r4, 8014f16 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014ed2:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014ed6:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014eda:	2d00      	cmp	r5, #0
 8014edc:	d141      	bne.n	8014f62 <realize_virt_arrays+0xd6>
}
 8014ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	b932      	cbnz	r2, 8014ef4 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8014ee6:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8014eea:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8014eee:	6859      	ldr	r1, [r3, #4]
 8014ef0:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef6:	e7d2      	b.n	8014e9e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014ef8:	681a      	ldr	r2, [r3, #0]
 8014efa:	b942      	cbnz	r2, 8014f0e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8014efc:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8014f00:	4351      	muls	r1, r2
 8014f02:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8014f06:	6859      	ldr	r1, [r3, #4]
 8014f08:	434a      	muls	r2, r1
 8014f0a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f10:	e7c8      	b.n	8014ea4 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8014f12:	4e27      	ldr	r6, [pc, #156]	; (8014fb0 <realize_virt_arrays+0x124>)
 8014f14:	e7d7      	b.n	8014ec6 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014f16:	6823      	ldr	r3, [r4, #0]
 8014f18:	b9ab      	cbnz	r3, 8014f46 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8014f1a:	6862      	ldr	r2, [r4, #4]
 8014f1c:	68e1      	ldr	r1, [r4, #12]
 8014f1e:	1e53      	subs	r3, r2, #1
 8014f20:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f24:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014f26:	429e      	cmp	r6, r3
 8014f28:	db0f      	blt.n	8014f4a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 8014f2a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014f2c:	6923      	ldr	r3, [r4, #16]
 8014f2e:	2101      	movs	r1, #1
 8014f30:	68a2      	ldr	r2, [r4, #8]
 8014f32:	4638      	mov	r0, r7
 8014f34:	f7ff ff72 	bl	8014e1c <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8014f38:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014f3c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8014f3e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8014f40:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8014f42:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014f46:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014f48:	e7c2      	b.n	8014ed0 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 8014f4a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014f4c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014f4e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014f50:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014f52:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014f56:	435a      	muls	r2, r3
 8014f58:	f000 f96c 	bl	8015234 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8014f5c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8014f60:	e7e4      	b.n	8014f2c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014f62:	682b      	ldr	r3, [r5, #0]
 8014f64:	b9ab      	cbnz	r3, 8014f92 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8014f66:	6868      	ldr	r0, [r5, #4]
 8014f68:	68e9      	ldr	r1, [r5, #12]
 8014f6a:	1e43      	subs	r3, r0, #1
 8014f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f70:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014f72:	429e      	cmp	r6, r3
 8014f74:	db0f      	blt.n	8014f96 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8014f76:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014f78:	692b      	ldr	r3, [r5, #16]
 8014f7a:	2101      	movs	r1, #1
 8014f7c:	68aa      	ldr	r2, [r5, #8]
 8014f7e:	4638      	mov	r0, r7
 8014f80:	f7ff ff14 	bl	8014dac <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8014f84:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014f88:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8014f8a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8014f8c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8014f8e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014f92:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8014f94:	e7a1      	b.n	8014eda <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8014f96:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014f98:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8014f9a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014f9c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014f9e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014fa0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014fa4:	01d2      	lsls	r2, r2, #7
 8014fa6:	f000 f945 	bl	8015234 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8014faa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8014fae:	e7e3      	b.n	8014f78 <realize_virt_arrays+0xec>
 8014fb0:	3b9aca00 	.word	0x3b9aca00

08014fb4 <access_virt_sarray>:
{
 8014fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014fb8:	eb02 0803 	add.w	r8, r2, r3
{
 8014fbc:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014fbe:	684a      	ldr	r2, [r1, #4]
{
 8014fc0:	b087      	sub	sp, #28
 8014fc2:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014fc4:	4542      	cmp	r2, r8
{
 8014fc6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014fca:	d304      	bcc.n	8014fd6 <access_virt_sarray+0x22>
 8014fcc:	68ca      	ldr	r2, [r1, #12]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d301      	bcc.n	8014fd6 <access_virt_sarray+0x22>
 8014fd2:	680b      	ldr	r3, [r1, #0]
 8014fd4:	b933      	cbnz	r3, 8014fe4 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	2217      	movs	r2, #23
 8014fda:	9003      	str	r0, [sp, #12]
 8014fdc:	615a      	str	r2, [r3, #20]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4798      	blx	r3
 8014fe2:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8014fe4:	69a3      	ldr	r3, [r4, #24]
 8014fe6:	42ab      	cmp	r3, r5
 8014fe8:	d80c      	bhi.n	8015004 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014fea:	6922      	ldr	r2, [r4, #16]
 8014fec:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014fee:	4543      	cmp	r3, r8
 8014ff0:	d308      	bcc.n	8015004 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8014ff2:	69e6      	ldr	r6, [r4, #28]
 8014ff4:	4546      	cmp	r6, r8
 8014ff6:	f0c0 8081 	bcc.w	80150fc <access_virt_sarray+0x148>
  if (writable)
 8014ffa:	f1ba 0f00 	cmp.w	sl, #0
 8014ffe:	f040 80a8 	bne.w	8015152 <access_virt_sarray+0x19e>
 8015002:	e0a8      	b.n	8015156 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8015004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015006:	b933      	cbnz	r3, 8015016 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015008:	6803      	ldr	r3, [r0, #0]
 801500a:	2247      	movs	r2, #71	; 0x47
 801500c:	9003      	str	r0, [sp, #12]
 801500e:	615a      	str	r2, [r3, #20]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	4798      	blx	r3
 8015014:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8015016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015018:	b17b      	cbz	r3, 801503a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801501a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801501e:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015022:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015024:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015028:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801502c:	6922      	ldr	r2, [r4, #16]
 801502e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015030:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015034:	dc3c      	bgt.n	80150b0 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8015036:	2300      	movs	r3, #0
 8015038:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801503a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801503c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015040:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015042:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8015046:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015048:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801504c:	bf2a      	itet	cs
 801504e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015052:	462b      	movcc	r3, r5
 8015054:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015058:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 801505a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801505e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015060:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015062:	454a      	cmp	r2, r9
 8015064:	ddc5      	ble.n	8014ff2 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015066:	eba2 0209 	sub.w	r2, r2, r9
 801506a:	6967      	ldr	r7, [r4, #20]
 801506c:	42ba      	cmp	r2, r7
 801506e:	bfa8      	it	ge
 8015070:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8015072:	69a7      	ldr	r7, [r4, #24]
 8015074:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015076:	1bf6      	subs	r6, r6, r7
 8015078:	42b2      	cmp	r2, r6
 801507a:	bfa8      	it	ge
 801507c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801507e:	6866      	ldr	r6, [r4, #4]
 8015080:	1bf6      	subs	r6, r6, r7
 8015082:	42b2      	cmp	r2, r6
 8015084:	bfa8      	it	ge
 8015086:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015088:	2a00      	cmp	r2, #0
 801508a:	ddb2      	ble.n	8014ff2 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801508c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015090:	6822      	ldr	r2, [r4, #0]
 8015092:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8015094:	9600      	str	r6, [sp, #0]
 8015096:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801509a:	9305      	str	r3, [sp, #20]
 801509c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80150a0:	47b8      	blx	r7
    file_offset += byte_count;
 80150a2:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150a4:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80150a6:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150a8:	4491      	add	r9, r2
 80150aa:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80150ae:	e7d6      	b.n	801505e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150b0:	eba2 0209 	sub.w	r2, r2, r9
 80150b4:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80150b6:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150b8:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150ba:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150be:	bfa8      	it	ge
 80150c0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150c2:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150c4:	42ba      	cmp	r2, r7
 80150c6:	bfa8      	it	ge
 80150c8:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150ca:	eba6 070c 	sub.w	r7, r6, ip
 80150ce:	42ba      	cmp	r2, r7
 80150d0:	bfa8      	it	ge
 80150d2:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 80150d4:	2a00      	cmp	r2, #0
 80150d6:	ddae      	ble.n	8015036 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 80150d8:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150dc:	6822      	ldr	r2, [r4, #0]
 80150de:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80150e0:	9700      	str	r7, [sp, #0]
 80150e2:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80150e6:	9305      	str	r3, [sp, #20]
 80150e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80150ec:	47b0      	blx	r6
    file_offset += byte_count;
 80150ee:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150f0:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80150f2:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150f4:	4491      	add	r9, r2
 80150f6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80150fa:	e797      	b.n	801502c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 80150fc:	42ae      	cmp	r6, r5
 80150fe:	d20d      	bcs.n	801511c <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8015100:	f1ba 0f00 	cmp.w	sl, #0
 8015104:	d020      	beq.n	8015148 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015106:	6803      	ldr	r3, [r0, #0]
 8015108:	2217      	movs	r2, #23
 801510a:	9003      	str	r0, [sp, #12]
 801510c:	462e      	mov	r6, r5
 801510e:	615a      	str	r2, [r3, #20]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	4798      	blx	r3
    if (writable)
 8015114:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015116:	f8c4 801c 	str.w	r8, [r4, #28]
 801511a:	e002      	b.n	8015122 <access_virt_sarray+0x16e>
    if (writable)
 801511c:	f1ba 0f00 	cmp.w	sl, #0
 8015120:	d1f9      	bne.n	8015116 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8015122:	6a22      	ldr	r2, [r4, #32]
 8015124:	b192      	cbz	r2, 801514c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015126:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015128:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801512a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 801512c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8015130:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015132:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015134:	f4bf af61 	bcs.w	8014ffa <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015138:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801513c:	463a      	mov	r2, r7
 801513e:	2100      	movs	r1, #0
	undef_row++;
 8015140:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015142:	f014 f883 	bl	802924c <memset>
	undef_row++;
 8015146:	e7f3      	b.n	8015130 <access_virt_sarray+0x17c>
 8015148:	462e      	mov	r6, r5
 801514a:	e7ea      	b.n	8015122 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 801514c:	f1ba 0f00 	cmp.w	sl, #0
 8015150:	d009      	beq.n	8015166 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 8015152:	2301      	movs	r3, #1
 8015154:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015156:	69a0      	ldr	r0, [r4, #24]
 8015158:	1a2d      	subs	r5, r5, r0
 801515a:	6820      	ldr	r0, [r4, #0]
}
 801515c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015160:	b007      	add	sp, #28
 8015162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015166:	6803      	ldr	r3, [r0, #0]
 8015168:	2217      	movs	r2, #23
 801516a:	615a      	str	r2, [r3, #20]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4798      	blx	r3
  if (writable)
 8015170:	e7f1      	b.n	8015156 <access_virt_sarray+0x1a2>
	...

08015174 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8015174:	2300      	movs	r3, #0
{
 8015176:	b570      	push	{r4, r5, r6, lr}
 8015178:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801517a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801517c:	f000 f85f 	bl	801523e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015180:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8015182:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015184:	4628      	mov	r0, r5
 8015186:	f000 f847 	bl	8015218 <jpeg_get_small>

  if (mem == NULL) {
 801518a:	4604      	mov	r4, r0
 801518c:	b948      	cbnz	r0, 80151a2 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801518e:	4628      	mov	r0, r5
 8015190:	f000 f857 	bl	8015242 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8015194:	682b      	ldr	r3, [r5, #0]
 8015196:	2238      	movs	r2, #56	; 0x38
 8015198:	4628      	mov	r0, r5
 801519a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80151a2:	4b12      	ldr	r3, [pc, #72]	; (80151ec <jinit_memory_mgr+0x78>)
 80151a4:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80151a6:	4b12      	ldr	r3, [pc, #72]	; (80151f0 <jinit_memory_mgr+0x7c>)
 80151a8:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80151aa:	4b12      	ldr	r3, [pc, #72]	; (80151f4 <jinit_memory_mgr+0x80>)
 80151ac:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80151ae:	4b12      	ldr	r3, [pc, #72]	; (80151f8 <jinit_memory_mgr+0x84>)
 80151b0:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 80151b2:	4b12      	ldr	r3, [pc, #72]	; (80151fc <jinit_memory_mgr+0x88>)
 80151b4:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 80151b6:	4b12      	ldr	r3, [pc, #72]	; (8015200 <jinit_memory_mgr+0x8c>)
 80151b8:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 80151ba:	4b12      	ldr	r3, [pc, #72]	; (8015204 <jinit_memory_mgr+0x90>)
 80151bc:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 80151be:	4b12      	ldr	r3, [pc, #72]	; (8015208 <jinit_memory_mgr+0x94>)
 80151c0:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80151c2:	4b12      	ldr	r3, [pc, #72]	; (801520c <jinit_memory_mgr+0x98>)
 80151c4:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80151c6:	4b12      	ldr	r3, [pc, #72]	; (8015210 <jinit_memory_mgr+0x9c>)
 80151c8:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80151ca:	4b12      	ldr	r3, [pc, #72]	; (8015214 <jinit_memory_mgr+0xa0>)
 80151cc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80151ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80151d2:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80151d6:	2300      	movs	r3, #0
 80151d8:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 80151da:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 80151dc:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 80151de:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 80151e0:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80151e4:	2354      	movs	r3, #84	; 0x54
 80151e6:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80151e8:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 80151ea:	bd70      	pop	{r4, r5, r6, pc}
 80151ec:	08014a11 	.word	0x08014a11
 80151f0:	08014d3f 	.word	0x08014d3f
 80151f4:	08014e1d 	.word	0x08014e1d
 80151f8:	08014dad 	.word	0x08014dad
 80151fc:	08014b27 	.word	0x08014b27
 8015200:	08014add 	.word	0x08014add
 8015204:	08014e8d 	.word	0x08014e8d
 8015208:	08014fb5 	.word	0x08014fb5
 801520c:	08014c3f 	.word	0x08014c3f
 8015210:	08014b71 	.word	0x08014b71
 8015214:	08014c15 	.word	0x08014c15

08015218 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015218:	4608      	mov	r0, r1
 801521a:	f7f2 b889 	b.w	8007330 <pvPortMalloc>

0801521e <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 801521e:	4608      	mov	r0, r1
 8015220:	f7f2 b91c 	b.w	800745c <vPortFree>

08015224 <jpeg_get_large>:
 8015224:	4608      	mov	r0, r1
 8015226:	f7f2 b883 	b.w	8007330 <pvPortMalloc>

0801522a <jpeg_free_large>:
 801522a:	4608      	mov	r0, r1
 801522c:	f7f2 b916 	b.w	800745c <vPortFree>

08015230 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8015230:	4610      	mov	r0, r2
 8015232:	4770      	bx	lr

08015234 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015234:	6803      	ldr	r3, [r0, #0]
 8015236:	2233      	movs	r2, #51	; 0x33
 8015238:	615a      	str	r2, [r3, #20]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	4718      	bx	r3

0801523e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801523e:	2000      	movs	r0, #0
 8015240:	4770      	bx	lr

08015242 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8015242:	4770      	bx	lr

08015244 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015248:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801524c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801524e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015252:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015254:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015256:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 801525a:	bf16      	itet	ne
 801525c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801525e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015262:	461e      	movne	r6, r3
 8015264:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015266:	6843      	ldr	r3, [r0, #4]
 8015268:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801526c:	689f      	ldr	r7, [r3, #8]
 801526e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015270:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8015272:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015276:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801527a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801527c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801527e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8015280:	429a      	cmp	r2, r3
 8015282:	dc01      	bgt.n	8015288 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8015284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015288:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801528c:	009f      	lsls	r7, r3, #2
 801528e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8015290:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8015294:	b126      	cbz	r6, 80152a0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8015296:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801529a:	32ff      	adds	r2, #255	; 0xff
 801529c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80152a0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80152a4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80152a8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80152aa:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80152ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80152b0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80152b2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 80152b6:	428f      	cmp	r7, r1
 80152b8:	db0a      	blt.n	80152d0 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 80152ba:	fb10 fb0c 	smulbb	fp, r0, ip
 80152be:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80152c2:	3101      	adds	r1, #1
 80152c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80152c8:	d1f5      	bne.n	80152b6 <create_colorindex+0x72>
    if (pad)
 80152ca:	b93e      	cbnz	r6, 80152dc <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80152cc:	3301      	adds	r3, #1
 80152ce:	e7d6      	b.n	801527e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80152d0:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80152d2:	fb08 a700 	mla	r7, r8, r0, sl
 80152d6:	fb97 f7f9 	sdiv	r7, r7, r9
 80152da:	e7ec      	b.n	80152b6 <create_colorindex+0x72>
 80152dc:	4611      	mov	r1, r2
 80152de:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 80152e2:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 80152e6:	f892 9000 	ldrb.w	r9, [r2]
 80152ea:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80152ee:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 80152f0:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 80152f4:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80152f8:	d1f5      	bne.n	80152e6 <create_colorindex+0xa2>
 80152fa:	e7e7      	b.n	80152cc <create_colorindex+0x88>

080152fc <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 80152fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015300:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015304:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015306:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801530a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 801530e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015312:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015314:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015316:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015318:	4540      	cmp	r0, r8
 801531a:	db02      	blt.n	8015322 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 801531c:	b003      	add	sp, #12
 801531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015322:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015326:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015328:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801532c:	eb04 0a03 	add.w	sl, r4, r3
 8015330:	4554      	cmp	r4, sl
 8015332:	d10f      	bne.n	8015354 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015334:	3001      	adds	r0, #1
 8015336:	e7ef      	b.n	8015318 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015338:	f815 b003 	ldrb.w	fp, [r5, r3]
 801533c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015340:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015342:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015346:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015348:	4563      	cmp	r3, ip
 801534a:	dbf5      	blt.n	8015338 <color_quantize+0x3c>
 801534c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801534e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8015352:	e7ed      	b.n	8015330 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015354:	2300      	movs	r3, #0
      pixcode = 0;
 8015356:	461e      	mov	r6, r3
 8015358:	e7f6      	b.n	8015348 <color_quantize+0x4c>

0801535a <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801535a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801535e:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015362:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015366:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015368:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801536a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801536e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015372:	4298      	cmp	r0, r3
 8015374:	db01      	blt.n	801537a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801537a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801537e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015382:	eb05 0a09 	add.w	sl, r5, r9
 8015386:	4555      	cmp	r5, sl
 8015388:	f104 0403 	add.w	r4, r4, #3
 801538c:	d101      	bne.n	8015392 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801538e:	3001      	adds	r0, #1
 8015390:	e7ef      	b.n	8015372 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015392:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8015396:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801539a:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 801539e:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80153a2:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 80153a4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80153a8:	f818 6006 	ldrb.w	r6, [r8, r6]
 80153ac:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 80153ae:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 80153b2:	e7e8      	b.n	8015386 <color_quantize3+0x2c>

080153b4 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 80153b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b8:	469a      	mov	sl, r3
 80153ba:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80153bc:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80153c0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80153c4:	699a      	ldr	r2, [r3, #24]
 80153c6:	6811      	ldr	r1, [r2, #0]
 80153c8:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80153ca:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80153cc:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80153ce:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80153d0:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80153d2:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 80153d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80153d6:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80153d8:	4551      	cmp	r1, sl
 80153da:	db02      	blt.n	80153e2 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 80153dc:	b00b      	add	sp, #44	; 0x2c
 80153de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 80153e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 80153e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153e6:	9c07      	ldr	r4, [sp, #28]
 80153e8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 80153ec:	0190      	lsls	r0, r2, #6
 80153ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80153f2:	9002      	str	r0, [sp, #8]
 80153f4:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 80153f8:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 80153fa:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 80153fc:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015400:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015402:	9808      	ldr	r0, [sp, #32]
 8015404:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015408:	4575      	cmp	r5, lr
 801540a:	f100 0003 	add.w	r0, r0, #3
 801540e:	d106      	bne.n	801541e <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015410:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015412:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015414:	3201      	adds	r2, #1
 8015416:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 801541a:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801541c:	e7dc      	b.n	80153d8 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801541e:	9e02      	ldr	r6, [sp, #8]
 8015420:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8015424:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8015428:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 801542a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801542c:	f858 7006 	ldr.w	r7, [r8, r6]
 8015430:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015432:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015434:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015438:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801543c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8015440:	f859 7006 	ldr.w	r7, [r9, r6]
 8015444:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015446:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015448:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801544c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801544e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015450:	9a06      	ldr	r2, [sp, #24]
 8015452:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015456:	4417      	add	r7, r2
 8015458:	5dbe      	ldrb	r6, [r7, r6]
 801545a:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 801545c:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8015460:	e7d2      	b.n	8015408 <quantize3_ord_dither+0x54>

08015462 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015462:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015466:	3202      	adds	r2, #2
 8015468:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801546c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801546e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015470:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015472:	3644      	adds	r6, #68	; 0x44
 8015474:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015476:	42bb      	cmp	r3, r7
 8015478:	dc00      	bgt.n	801547c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801547c:	6863      	ldr	r3, [r4, #4]
 801547e:	462a      	mov	r2, r5
 8015480:	2101      	movs	r1, #1
 8015482:	4620      	mov	r0, r4
 8015484:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015486:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015488:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 801548a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 801548e:	e7f1      	b.n	8015474 <alloc_fs_workspace+0x12>

08015490 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015490:	4770      	bx	lr

08015492 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015492:	6803      	ldr	r3, [r0, #0]
 8015494:	222f      	movs	r2, #47	; 0x2f
 8015496:	615a      	str	r2, [r3, #20]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4718      	bx	r3

0801549c <start_pass_1_quant>:
{
 801549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80154a0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80154a4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 80154a6:	692b      	ldr	r3, [r5, #16]
 80154a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 80154ac:	696b      	ldr	r3, [r5, #20]
 80154ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 80154b2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	d00b      	beq.n	80154d2 <start_pass_1_quant+0x36>
 80154ba:	2b02      	cmp	r3, #2
 80154bc:	d05e      	beq.n	801557c <start_pass_1_quant+0xe0>
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d174      	bne.n	80155ac <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 80154c2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80154c4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 80154c6:	bf0c      	ite	eq
 80154c8:	4b3c      	ldreq	r3, [pc, #240]	; (80155bc <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 80154ca:	4b3d      	ldrne	r3, [pc, #244]	; (80155c0 <start_pass_1_quant+0x124>)
 80154cc:	606b      	str	r3, [r5, #4]
}
 80154ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 80154d2:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 80154d4:	4b3b      	ldr	r3, [pc, #236]	; (80155c4 <start_pass_1_quant+0x128>)
 80154d6:	4a3c      	ldr	r2, [pc, #240]	; (80155c8 <start_pass_1_quant+0x12c>)
 80154d8:	2903      	cmp	r1, #3
 80154da:	bf18      	it	ne
 80154dc:	4613      	movne	r3, r2
 80154de:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 80154e0:	2300      	movs	r3, #0
 80154e2:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 80154e4:	69eb      	ldr	r3, [r5, #28]
 80154e6:	b90b      	cbnz	r3, 80154ec <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 80154e8:	f7ff feac 	bl	8015244 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 80154ec:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80154ee:	2d00      	cmp	r5, #0
 80154f0:	d1ed      	bne.n	80154ce <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80154f2:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80154f6:	f107 0820 	add.w	r8, r7, #32
 80154fa:	4646      	mov	r6, r8
 80154fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80154fe:	429d      	cmp	r5, r3
 8015500:	dae5      	bge.n	80154ce <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015502:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015506:	4642      	mov	r2, r8
 8015508:	2300      	movs	r3, #0
 801550a:	429d      	cmp	r5, r3
 801550c:	d007      	beq.n	801551e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 801550e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015512:	4589      	cmp	r9, r1
 8015514:	d130      	bne.n	8015578 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015516:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801551a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 801551c:	bb48      	cbnz	r0, 8015572 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801551e:	6863      	ldr	r3, [r4, #4]
 8015520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015524:	2101      	movs	r1, #1
 8015526:	4620      	mov	r0, r4
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801552c:	f109 32ff 	add.w	r2, r9, #4294967295
 8015530:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015534:	f8df c098 	ldr.w	ip, [pc, #152]	; 80155d0 <start_pass_1_quant+0x134>
 8015538:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 801553a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 801553e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015542:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015544:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801554e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8015552:	bf45      	ittet	mi
 8015554:	425b      	negmi	r3, r3
 8015556:	fb93 f3f2 	sdivmi	r3, r3, r2
 801555a:	fb93 f3f2 	sdivpl	r3, r3, r2
 801555e:	425b      	negmi	r3, r3
 8015560:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015564:	458e      	cmp	lr, r1
 8015566:	d1ed      	bne.n	8015544 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015568:	3140      	adds	r1, #64	; 0x40
 801556a:	f10c 0c10 	add.w	ip, ip, #16
 801556e:	458a      	cmp	sl, r1
 8015570:	d1e5      	bne.n	801553e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015572:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015574:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015576:	e7c1      	b.n	80154fc <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015578:	3301      	adds	r3, #1
 801557a:	e7c6      	b.n	801550a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801557c:	4b13      	ldr	r3, [pc, #76]	; (80155cc <start_pass_1_quant+0x130>)
 801557e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015580:	2300      	movs	r3, #0
 8015582:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015584:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015586:	b90b      	cbnz	r3, 801558c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015588:	f7ff ff6b 	bl	8015462 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801558c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801558e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015590:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015592:	3202      	adds	r2, #2
 8015594:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015596:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015598:	42bb      	cmp	r3, r7
 801559a:	dd98      	ble.n	80154ce <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801559c:	4632      	mov	r2, r6
 801559e:	2100      	movs	r1, #0
 80155a0:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 80155a4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80155a6:	f013 fe51 	bl	802924c <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 80155aa:	e7f4      	b.n	8015596 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 80155ac:	6803      	ldr	r3, [r0, #0]
 80155ae:	2231      	movs	r2, #49	; 0x31
}
 80155b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 80155b4:	615a      	str	r2, [r3, #20]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	4718      	bx	r3
 80155ba:	bf00      	nop
 80155bc:	0801535b 	.word	0x0801535b
 80155c0:	080152fd 	.word	0x080152fd
 80155c4:	080153b5 	.word	0x080153b5
 80155c8:	0801570d 	.word	0x0801570d
 80155cc:	080155d5 	.word	0x080155d5
 80155d0:	0802e198 	.word	0x0802e198

080155d4 <quantize_fs_dither>:
{
 80155d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d8:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 80155da:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80155dc:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 80155e0:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80155e4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 80155e8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80155ec:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80155f0:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80155f2:	1e6b      	subs	r3, r5, #1
 80155f4:	9304      	str	r3, [sp, #16]
 80155f6:	fb03 f309 	mul.w	r3, r3, r9
 80155fa:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80155fc:	1c6b      	adds	r3, r5, #1
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015602:	2300      	movs	r3, #0
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	9a00      	ldr	r2, [sp, #0]
 8015608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801560a:	429a      	cmp	r2, r3
 801560c:	db02      	blt.n	8015614 <quantize_fs_dither+0x40>
}
 801560e:	b011      	add	sp, #68	; 0x44
 8015610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015614:	2100      	movs	r1, #0
 8015616:	462a      	mov	r2, r5
 8015618:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801561c:	f013 fe16 	bl	802924c <memset>
    for (ci = 0; ci < nc; ci++) {
 8015620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015624:	2100      	movs	r1, #0
 8015626:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8015628:	f1c9 0300 	rsb	r3, r9, #0
 801562c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 801562e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8015630:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8015632:	db06      	blt.n	8015642 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015634:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8015638:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801563a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 801563c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801563e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015640:	e7e0      	b.n	8015604 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8015642:	9800      	ldr	r0, [sp, #0]
 8015644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015646:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 801564a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 801564e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015652:	9b05      	ldr	r3, [sp, #20]
 8015654:	f853 cb04 	ldr.w	ip, [r3], #4
 8015658:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 801565a:	b312      	cbz	r2, 80156a2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801565c:	9b08      	ldr	r3, [sp, #32]
 801565e:	449e      	add	lr, r3
	output_ptr += width-1;
 8015660:	9b04      	ldr	r3, [sp, #16]
 8015662:	4418      	add	r0, r3
	dirnc = -nc;
 8015664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015666:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801566a:	449c      	add	ip, r3
	dir = -1;
 801566c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8015670:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015672:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015674:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8015676:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8015678:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801567c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 801567e:	6923      	ldr	r3, [r4, #16]
 8015680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015684:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015686:	9b02      	ldr	r3, [sp, #8]
 8015688:	005b      	lsls	r3, r3, #1
 801568a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 801568c:	2300      	movs	r3, #0
      cur = 0;
 801568e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015690:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015692:	9a03      	ldr	r2, [sp, #12]
 8015694:	b94a      	cbnz	r2, 80156aa <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015696:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8015698:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801569a:	436a      	muls	r2, r5
 801569c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 80156a0:	e7c5      	b.n	801562e <quantize_fs_dither+0x5a>
	dir = 1;
 80156a2:	2301      	movs	r3, #1
 80156a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80156a8:	e7e2      	b.n	8015670 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80156aa:	9a01      	ldr	r2, [sp, #4]
 80156ac:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 80156b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80156b2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 80156b4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80156b8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 80156bc:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80156c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 80156c2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80156c6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80156ca:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80156ce:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80156d0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80156d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 80156d4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80156d8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 80156dc:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80156de:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 80156e2:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 80156e4:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 80156e6:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 80156ea:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 80156ec:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80156ee:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 80156f0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80156f4:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80156f6:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 80156f8:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 80156fa:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 80156fc:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 80156fe:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015700:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015704:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015708:	4417      	add	r7, r2
 801570a:	e7c2      	b.n	8015692 <quantize_fs_dither+0xbe>

0801570c <quantize_ord_dither>:
{
 801570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015710:	b089      	sub	sp, #36	; 0x24
 8015712:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015714:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8015718:	1f14      	subs	r4, r2, #4
{
 801571a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 801571c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 801571e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8015720:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015724:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015726:	9b07      	ldr	r3, [sp, #28]
 8015728:	429f      	cmp	r7, r3
 801572a:	db02      	blt.n	8015732 <quantize_ord_dither+0x26>
}
 801572c:	b009      	add	sp, #36	; 0x24
 801572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015732:	4652      	mov	r2, sl
 8015734:	2100      	movs	r1, #0
 8015736:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801573a:	f013 fd87 	bl	802924c <memset>
    row_index = cquantize->row_index;
 801573e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8015742:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8015746:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8015748:	019a      	lsls	r2, r3, #6
 801574a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 801574c:	9a01      	ldr	r2, [sp, #4]
 801574e:	4290      	cmp	r0, r2
 8015750:	db06      	blt.n	8015760 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015752:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015754:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015756:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 801575a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801575e:	e7e2      	b.n	8015726 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015760:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8015764:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015766:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 801576a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801576e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015770:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015772:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015774:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015778:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801577a:	eb0a 0205 	add.w	r2, sl, r5
 801577e:	9206      	str	r2, [sp, #24]
 8015780:	9a06      	ldr	r2, [sp, #24]
 8015782:	4295      	cmp	r5, r2
 8015784:	d101      	bne.n	801578a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015786:	3001      	adds	r0, #1
 8015788:	e7e0      	b.n	801574c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801578a:	782a      	ldrb	r2, [r5, #0]
 801578c:	f891 e000 	ldrb.w	lr, [r1]
 8015790:	9204      	str	r2, [sp, #16]
 8015792:	9a02      	ldr	r2, [sp, #8]
 8015794:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015798:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801579a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801579c:	f85b b002 	ldr.w	fp, [fp, r2]
 80157a0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 80157a2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 80157a6:	4496      	add	lr, r2
 80157a8:	9a04      	ldr	r2, [sp, #16]
 80157aa:	f81e e00b 	ldrb.w	lr, [lr, fp]
 80157ae:	4472      	add	r2, lr
 80157b0:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 80157b4:	9a01      	ldr	r2, [sp, #4]
 80157b6:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 80157b8:	e7e2      	b.n	8015780 <quantize_ord_dither+0x74>
	...

080157bc <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80157bc:	6843      	ldr	r3, [r0, #4]
 80157be:	2258      	movs	r2, #88	; 0x58
 80157c0:	2101      	movs	r1, #1
 80157c2:	681b      	ldr	r3, [r3, #0]
{
 80157c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c8:	b085      	sub	sp, #20
 80157ca:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80157cc:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 80157ce:	4b67      	ldr	r3, [pc, #412]	; (801596c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80157d0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 80157d4:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 80157d6:	4b66      	ldr	r3, [pc, #408]	; (8015970 <jinit_1pass_quantizer+0x1b4>)
 80157d8:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 80157da:	4b66      	ldr	r3, [pc, #408]	; (8015974 <jinit_1pass_quantizer+0x1b8>)
 80157dc:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 80157de:	2300      	movs	r3, #0
 80157e0:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 80157e2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 80157e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80157e6:	2b04      	cmp	r3, #4
 80157e8:	dd07      	ble.n	80157fa <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 80157ea:	6823      	ldr	r3, [r4, #0]
 80157ec:	2039      	movs	r0, #57	; 0x39
 80157ee:	2204      	movs	r2, #4
 80157f0:	e9c3 0205 	strd	r0, r2, [r3, #20]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	4620      	mov	r0, r4
 80157f8:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 80157fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80157fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015800:	dd08      	ble.n	8015814 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015802:	6823      	ldr	r3, [r4, #0]
 8015804:	213b      	movs	r1, #59	; 0x3b
 8015806:	f44f 7280 	mov.w	r2, #256	; 0x100
 801580a:	4620      	mov	r0, r4
 801580c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015814:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015818:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 801581a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 801581e:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015822:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8015826:	469a      	mov	sl, r3
 8015828:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 801582a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 801582c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 801582e:	4588      	cmp	r8, r1
 8015830:	dc47      	bgt.n	80158c2 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015832:	4591      	cmp	r9, r2
 8015834:	daf7      	bge.n	8015826 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015836:	f1ba 0f01 	cmp.w	sl, #1
 801583a:	d106      	bne.n	801584a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	213a      	movs	r1, #58	; 0x3a
 8015840:	4620      	mov	r0, r4
 8015842:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 801584a:	463a      	mov	r2, r7
 801584c:	2300      	movs	r3, #0
 801584e:	2501      	movs	r5, #1
 8015850:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8015852:	4598      	cmp	r8, r3
 8015854:	dc38      	bgt.n	80158c8 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015856:	f8df c120 	ldr.w	ip, [pc, #288]	; 8015978 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 801585a:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 801585c:	460b      	mov	r3, r1
 801585e:	4598      	cmp	r8, r3
 8015860:	dc38      	bgt.n	80158d4 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8015862:	2900      	cmp	r1, #0
 8015864:	d1f9      	bne.n	801585a <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015866:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015868:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 801586a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801586c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 801586e:	d148      	bne.n	8015902 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015870:	619d      	str	r5, [r3, #24]
 8015872:	6a31      	ldr	r1, [r6, #32]
 8015874:	61d9      	str	r1, [r3, #28]
 8015876:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015878:	6219      	str	r1, [r3, #32]
 801587a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 801587c:	6259      	str	r1, [r3, #36]	; 0x24
 801587e:	2160      	movs	r1, #96	; 0x60
 8015880:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015882:	2101      	movs	r1, #1
 8015884:	4620      	mov	r0, r4
 8015886:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015888:	6863      	ldr	r3, [r4, #4]
 801588a:	462a      	mov	r2, r5
 801588c:	2101      	movs	r1, #1
 801588e:	689f      	ldr	r7, [r3, #8]
 8015890:	4620      	mov	r0, r4
 8015892:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015894:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015896:	46ae      	mov	lr, r5
 8015898:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 801589a:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801589c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801589e:	429a      	cmp	r2, r3
 80158a0:	db33      	blt.n	801590a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 80158a2:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 80158a4:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 80158a6:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 80158aa:	f7ff fccb 	bl	8015244 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 80158ae:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80158b2:	2b02      	cmp	r3, #2
 80158b4:	d156      	bne.n	8015964 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 80158b6:	4620      	mov	r0, r4
}
 80158b8:	b005      	add	sp, #20
 80158ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 80158be:	f7ff bdd0 	b.w	8015462 <alloc_fs_workspace>
      temp *= iroot;
 80158c2:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 80158c4:	3101      	adds	r1, #1
 80158c6:	e7b2      	b.n	801582e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 80158c8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 80158cc:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 80158ce:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 80158d2:	e7be      	b.n	8015852 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80158d4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80158d8:	2a02      	cmp	r2, #2
 80158da:	bf0c      	ite	eq
 80158dc:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 80158e0:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 80158e2:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 80158e6:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 80158ea:	fb0a 2202 	mla	r2, sl, r2, r2
 80158ee:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 80158f2:	4591      	cmp	r9, r2
 80158f4:	dbb5      	blt.n	8015862 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 80158f6:	3301      	adds	r3, #1
 80158f8:	4615      	mov	r5, r2
      changed = TRUE;
 80158fa:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 80158fc:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015900:	e7ad      	b.n	801585e <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015902:	2161      	movs	r1, #97	; 0x61
 8015904:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8015908:	e7bb      	b.n	8015882 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801590a:	9b01      	ldr	r3, [sp, #4]
 801590c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8015910:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015914:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015916:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 801591a:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801591e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8015920:	2300      	movs	r3, #0
 8015922:	469a      	mov	sl, r3
 8015924:	4599      	cmp	r9, r3
 8015926:	dc02      	bgt.n	801592e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015928:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801592a:	46c6      	mov	lr, r8
 801592c:	e7b6      	b.n	801589c <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801592e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8015932:	9f03      	ldr	r7, [sp, #12]
 8015934:	4439      	add	r1, r7
 8015936:	fb91 f1fb 	sdiv	r1, r1, fp
 801593a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801593c:	4651      	mov	r1, sl
 801593e:	42a9      	cmp	r1, r5
 8015940:	db0d      	blt.n	801595e <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8015942:	3301      	adds	r3, #1
 8015944:	44c2      	add	sl, r8
 8015946:	e7ed      	b.n	8015924 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015948:	9f02      	ldr	r7, [sp, #8]
 801594a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801594e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8015950:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015954:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8015956:	45e0      	cmp	r8, ip
 8015958:	dcf6      	bgt.n	8015948 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801595a:	4471      	add	r1, lr
 801595c:	e7ef      	b.n	801593e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 801595e:	f04f 0c00 	mov.w	ip, #0
 8015962:	e7f8      	b.n	8015956 <jinit_1pass_quantizer+0x19a>
}
 8015964:	b005      	add	sp, #20
 8015966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801596a:	bf00      	nop
 801596c:	0801549d 	.word	0x0801549d
 8015970:	08015491 	.word	0x08015491
 8015974:	08015493 	.word	0x08015493
 8015978:	0802e18c 	.word	0x0802e18c

0801597c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801597c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8015980:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8015982:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015986:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8015988:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 801598c:	429c      	cmp	r4, r3
 801598e:	db00      	blt.n	8015992 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8015990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8015992:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8015996:	4677      	mov	r7, lr
 8015998:	3203      	adds	r2, #3
 801599a:	b90f      	cbnz	r7, 80159a0 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 801599c:	3401      	adds	r4, #1
 801599e:	e7f5      	b.n	801598c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80159a0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80159a4:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80159a8:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80159aa:	08a8      	lsrs	r0, r5, #2
 80159ac:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80159b0:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80159b4:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80159b8:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 80159ba:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 80159be:	3001      	adds	r0, #1
 80159c0:	b280      	uxth	r0, r0
 80159c2:	b108      	cbz	r0, 80159c8 <prescan_quantize+0x4c>
 80159c4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 80159c8:	3f01      	subs	r7, #1
 80159ca:	3203      	adds	r2, #3
 80159cc:	e7e5      	b.n	801599a <prescan_quantize+0x1e>

080159ce <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 80159ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d2:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 80159d6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 80159da:	2500      	movs	r5, #0
{
 80159dc:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80159de:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80159e2:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 80159e4:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 80159e6:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80159e8:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 80159ea:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 80159ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80159ee:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 80159f2:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 80159f4:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 80159f6:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 80159f8:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 80159fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015a00:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8015a02:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8015a06:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015a08:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8015a0c:	341c      	adds	r4, #28
{
 8015a0e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8015a12:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8015a14:	0149      	lsls	r1, r1, #5
 8015a16:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8015a1a:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8015a1c:	eb09 0301 	add.w	r3, r9, r1
 8015a20:	105b      	asrs	r3, r3, #1
 8015a22:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8015a24:	eb08 0304 	add.w	r3, r8, r4
 8015a28:	105b      	asrs	r3, r3, #1
 8015a2a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 8015a2c:	9b01      	ldr	r3, [sp, #4]
 8015a2e:	42ab      	cmp	r3, r5
 8015a30:	dc43      	bgt.n	8015aba <fill_inverse_cmap+0xec>
  ncolors = 0;
 8015a32:	2200      	movs	r2, #0
 8015a34:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8015a36:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015a38:	4613      	mov	r3, r2
 8015a3a:	9c01      	ldr	r4, [sp, #4]
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	f300 809c 	bgt.w	8015b7a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015a42:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8015a44:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8015a46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015a4a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8015a4c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015a50:	d1fb      	bne.n	8015a4a <fill_inverse_cmap+0x7c>
 8015a52:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015a54:	469b      	mov	fp, r3
 8015a56:	9107      	str	r1, [sp, #28]
 8015a58:	4593      	cmp	fp, r2
 8015a5a:	f040 8096 	bne.w	8015b8a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8015a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8015a60:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8015a62:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8015a66:	9b08      	ldr	r3, [sp, #32]
 8015a68:	f023 0103 	bic.w	r1, r3, #3
 8015a6c:	9b05      	ldr	r3, [sp, #20]
 8015a6e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8015a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a74:	f023 0307 	bic.w	r3, r3, #7
 8015a78:	4629      	mov	r1, r5
 8015a7a:	019b      	lsls	r3, r3, #6
 8015a7c:	3110      	adds	r1, #16
 8015a7e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015a82:	f855 4b04 	ldr.w	r4, [r5], #4
 8015a86:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015a88:	f102 0720 	add.w	r7, r2, #32
 8015a8c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015a8e:	4626      	mov	r6, r4
 8015a90:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015a92:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015a96:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015a9a:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015a9c:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015a9e:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015aa2:	d1f8      	bne.n	8015a96 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015aa4:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015aa6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015aa8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8015aac:	d1ef      	bne.n	8015a8e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8015aae:	428d      	cmp	r5, r1
 8015ab0:	d1e7      	bne.n	8015a82 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8015ab2:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8015ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8015aba:	9b00      	ldr	r3, [sp, #0]
 8015abc:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8015ac4:	4591      	cmp	r9, r2
 8015ac6:	dd2a      	ble.n	8015b1e <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8015ac8:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015acc:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015ace:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8015ad2:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015ad8:	459a      	cmp	sl, r3
 8015ada:	dd33      	ble.n	8015b44 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8015adc:	eba3 0e0a 	sub.w	lr, r3, sl
 8015ae0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015ae4:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8015ae8:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8015aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8015aee:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8015af6:	4598      	cmp	r8, r3
 8015af8:	dd32      	ble.n	8015b60 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8015afa:	eba3 0708 	sub.w	r7, r3, r8
 8015afe:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015b00:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8015b04:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8015b06:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8015b08:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8015b0c:	aa70      	add	r2, sp, #448	; 0x1c0
 8015b0e:	429e      	cmp	r6, r3
 8015b10:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8015b14:	f105 0501 	add.w	r5, r5, #1
 8015b18:	bfa8      	it	ge
 8015b1a:	461e      	movge	r6, r3
 8015b1c:	e786      	b.n	8015a2c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8015b1e:	4291      	cmp	r1, r2
 8015b20:	da06      	bge.n	8015b30 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8015b22:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8015b26:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8015b2a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8015b2e:	e7d0      	b.n	8015ad2 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8015b30:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8015b32:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8015b36:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8015b38:	bfac      	ite	ge
 8015b3a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8015b3c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8015b40:	4352      	muls	r2, r2
 8015b42:	e7c7      	b.n	8015ad4 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8015b44:	4298      	cmp	r0, r3
 8015b46:	da08      	bge.n	8015b5a <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8015b48:	eba3 0e00 	sub.w	lr, r3, r0
 8015b4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015b50:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8015b54:	eba3 030a 	sub.w	r3, r3, sl
 8015b58:	e7c7      	b.n	8015aea <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 8015b5a:	459b      	cmp	fp, r3
 8015b5c:	dbfa      	blt.n	8015b54 <fill_inverse_cmap+0x186>
 8015b5e:	e7c3      	b.n	8015ae8 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8015b60:	429c      	cmp	r4, r3
 8015b62:	da06      	bge.n	8015b72 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8015b64:	1b1f      	subs	r7, r3, r4
 8015b66:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015b68:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8015b6c:	eba3 0308 	sub.w	r3, r3, r8
 8015b70:	e7c9      	b.n	8015b06 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8015b72:	9f03      	ldr	r7, [sp, #12]
 8015b74:	429f      	cmp	r7, r3
 8015b76:	dbf9      	blt.n	8015b6c <fill_inverse_cmap+0x19e>
 8015b78:	e7c4      	b.n	8015b04 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 8015b7a:	f851 4b04 	ldr.w	r4, [r1], #4
 8015b7e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8015b80:	bfa4      	itt	ge
 8015b82:	5483      	strbge	r3, [r0, r2]
 8015b84:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8015b86:	3301      	adds	r3, #1
 8015b88:	e757      	b.n	8015a3a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8015b8a:	9b07      	ldr	r3, [sp, #28]
 8015b8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015b90:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015b92:	9b00      	ldr	r3, [sp, #0]
 8015b94:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8015b98:	680b      	ldr	r3, [r1, #0]
 8015b9a:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015b9c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015b9e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015ba0:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ba4:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015ba6:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ba8:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015bac:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015bb0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015bb4:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8015bb6:	4364      	muls	r4, r4
 8015bb8:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015bbc:	3004      	adds	r0, #4
 8015bbe:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8015bc0:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015bc4:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015bc6:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015bc8:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015bca:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8015bcc:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015bce:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015bd0:	9106      	str	r1, [sp, #24]
 8015bd2:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015bd4:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8015bd8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8015bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8015bde:	9b06      	ldr	r3, [sp, #24]
 8015be0:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8015be2:	a810      	add	r0, sp, #64	; 0x40
 8015be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015be8:	9003      	str	r0, [sp, #12]
 8015bea:	930d      	str	r3, [sp, #52]	; 0x34
 8015bec:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8015bee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015bf0:	eb03 0c01 	add.w	ip, r3, r1
 8015bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bf6:	440b      	add	r3, r1
 8015bf8:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 8015bfa:	9b03      	ldr	r3, [sp, #12]
 8015bfc:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 8015bfe:	9b02      	ldr	r3, [sp, #8]
 8015c00:	9301      	str	r3, [sp, #4]
 8015c02:	e01c      	b.n	8015c3e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8015c04:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8015c08:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8015c0c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015c0e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8015c10:	bfc8      	it	gt
 8015c12:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8015c14:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8015c16:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8015c1a:	bfc8      	it	gt
 8015c1c:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015c20:	42af      	cmp	r7, r5
 8015c22:	d1ef      	bne.n	8015c04 <fill_inverse_cmap+0x236>
	  cptr++;
 8015c24:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8015c26:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 8015c2a:	3304      	adds	r3, #4
 8015c2c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 8015c2e:	9b01      	ldr	r3, [sp, #4]
 8015c30:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8015c32:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8015c36:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8015c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c3a:	4298      	cmp	r0, r3
 8015c3c:	d006      	beq.n	8015c4c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015c3e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8015c42:	9d06      	ldr	r5, [sp, #24]
 8015c44:	f8dd e010 	ldr.w	lr, [sp, #16]
 8015c48:	9c01      	ldr	r4, [sp, #4]
 8015c4a:	e7db      	b.n	8015c04 <fill_inverse_cmap+0x236>
	  cptr++;
 8015c4c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015c4e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8015c50:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8015c52:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015c54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8015c58:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 8015c5a:	9b02      	ldr	r3, [sp, #8]
 8015c5c:	4403      	add	r3, r0
 8015c5e:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015c60:	d1c4      	bne.n	8015bec <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8015c62:	f10b 0b01 	add.w	fp, fp, #1
 8015c66:	e6f7      	b.n	8015a58 <fill_inverse_cmap+0x8a>

08015c68 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8015c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c6c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015c6e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015c72:	b085      	sub	sp, #20
 8015c74:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8015c76:	699b      	ldr	r3, [r3, #24]
{
 8015c78:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015c7a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8015c7c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8015c7e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015c80:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015c82:	4555      	cmp	r5, sl
 8015c84:	db02      	blt.n	8015c8c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8015c86:	b005      	add	sp, #20
 8015c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8015c8c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8015c90:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8015c94:	9b01      	ldr	r3, [sp, #4]
 8015c96:	3403      	adds	r4, #3
 8015c98:	eb06 0b03 	add.w	fp, r6, r3
 8015c9c:	455e      	cmp	r6, fp
 8015c9e:	d101      	bne.n	8015ca4 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8015ca0:	3501      	adds	r5, #1
 8015ca2:	e7ee      	b.n	8015c82 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015ca4:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015ca8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015cac:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8015cb0:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015cb2:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015cb6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8015cba:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015cbe:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8015cc0:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8015cc4:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8015cc8:	f1bc 0f00 	cmp.w	ip, #0
 8015ccc:	d106      	bne.n	8015cdc <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8015cce:	4672      	mov	r2, lr
 8015cd0:	9303      	str	r3, [sp, #12]
 8015cd2:	9002      	str	r0, [sp, #8]
 8015cd4:	f7ff fe7b 	bl	80159ce <fill_inverse_cmap>
 8015cd8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8015cdc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8015ce0:	3403      	adds	r4, #3
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8015ce8:	e7d8      	b.n	8015c9c <pass2_no_dither+0x34>

08015cea <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8015cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015cee:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8015cf2:	b09f      	sub	sp, #124	; 0x7c
 8015cf4:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8015cf6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8015cfa:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015cfc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015cfe:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015d00:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015d04:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8015d06:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8015d0a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015d0c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8015d10:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015d18:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015d1a:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015d1c:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015d1e:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015d20:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d22:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d28:	3b03      	subs	r3, #3
 8015d2a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d2c:	2306      	movs	r3, #6
 8015d2e:	fb02 3303 	mla	r3, r2, r3, r3
 8015d32:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8015d34:	2300      	movs	r3, #0
 8015d36:	9304      	str	r3, [sp, #16]
 8015d38:	9b04      	ldr	r3, [sp, #16]
 8015d3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	db02      	blt.n	8015d46 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8015d40:	b01f      	add	sp, #124	; 0x7c
 8015d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8015d46:	9a04      	ldr	r2, [sp, #16]
 8015d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8015d50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d56:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d58:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8015d5c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8015d5e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d036      	beq.n	8015dd4 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d68:	9a01      	ldr	r2, [sp, #4]
 8015d6a:	441a      	add	r2, r3
      outptr += width-1;
 8015d6c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015d6e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8015d70:	3b01      	subs	r3, #1
 8015d72:	9a03      	ldr	r2, [sp, #12]
 8015d74:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d76:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8015d78:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d7c:	4413      	add	r3, r2
      dir3 = -3;
 8015d7e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015d82:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8015d84:	2300      	movs	r3, #0
      dir3 = -3;
 8015d86:	9208      	str	r2, [sp, #32]
      dir = -1;
 8015d88:	f04f 32ff 	mov.w	r2, #4294967295
 8015d8c:	920f      	str	r2, [sp, #60]	; 0x3c
 8015d8e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015d92:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015d94:	9b08      	ldr	r3, [sp, #32]
 8015d96:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8015d98:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015d9a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8015d9c:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015d9e:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015da0:	1cab      	adds	r3, r5, #2
 8015da2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015da4:	1d2b      	adds	r3, r5, #4
 8015da6:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 8015da8:	9b05      	ldr	r3, [sp, #20]
 8015daa:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 8015dac:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015dae:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015db2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8015db6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015db8:	b98f      	cbnz	r7, 8015dde <pass2_fs_dither+0xf4>
 8015dba:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8015dbc:	9a02      	ldr	r2, [sp, #8]
 8015dbe:	435d      	muls	r5, r3
 8015dc0:	9906      	ldr	r1, [sp, #24]
 8015dc2:	9b02      	ldr	r3, [sp, #8]
 8015dc4:	5351      	strh	r1, [r2, r5]
 8015dc6:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8015dc8:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 8015dca:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8015dcc:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8015dce:	9b04      	ldr	r3, [sp, #16]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	e7b0      	b.n	8015d36 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8015dd4:	2301      	movs	r3, #1
      dir3 = 3;
 8015dd6:	2203      	movs	r2, #3
      dir = 1;
 8015dd8:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8015dda:	9208      	str	r2, [sp, #32]
 8015ddc:	e7d7      	b.n	8015d8e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015dde:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8015de2:	1977      	adds	r7, r6, r5
 8015de4:	4463      	add	r3, ip
 8015de6:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8015de8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015dea:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015df0:	5ef3      	ldrsh	r3, [r6, r3]
 8015df2:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015df6:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015df8:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015dfa:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015dfc:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015dfe:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015e02:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8015e04:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8015e08:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015e0c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8015e0e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8015e12:	9f01      	ldr	r7, [sp, #4]
 8015e14:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015e18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015e1a:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015e1c:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015e1e:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015e20:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8015e24:	9901      	ldr	r1, [sp, #4]
 8015e26:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015e28:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015e2c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8015e30:	9a01      	ldr	r2, [sp, #4]
 8015e32:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015e34:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015e38:	ea4f 02aa 	mov.w	r2, sl, asr #2
 8015e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e42:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8015e46:	461f      	mov	r7, r3
 8015e48:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 8015e4c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8015e50:	f1bc 0f00 	cmp.w	ip, #0
 8015e54:	d105      	bne.n	8015e62 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8015e56:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8015e5a:	f7ff fdb8 	bl	80159ce <fill_inverse_cmap>
 8015e5e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8015e62:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8015e66:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8015e68:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015e6a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015e6c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 8015e6e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8015e70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e72:	5cd2      	ldrb	r2, [r2, r3]
 8015e74:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8015e78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e7a:	5cd2      	ldrb	r2, [r2, r3]
 8015e7c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015e80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e82:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015e84:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015e86:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 8015e8a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015e8e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8015e90:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015e94:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8015e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8015e98:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 8015e9c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8015e9e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8015ea2:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8015ea4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015ea8:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8015eaa:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015eae:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8015eb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015eb2:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8015eb4:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8015eb8:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 8015eba:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015ebe:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8015ec0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015ec4:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015ec6:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8015ec8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015eca:	4437      	add	r7, r6
      outptr += dir;
 8015ecc:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8015ece:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8015ed0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015ed4:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8015ed6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015ed8:	443e      	add	r6, r7
 8015eda:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8015edc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015ede:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8015ee0:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8015ee4:	9609      	str	r6, [sp, #36]	; 0x24
 8015ee6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015ee8:	e765      	b.n	8015db6 <pass2_fs_dither+0xcc>

08015eea <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8015eea:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8015eec:	6843      	ldr	r3, [r0, #4]
 8015eee:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8015ef2:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015ef4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8015efc:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8015f00:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8015f04:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8015f08:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015f0a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8015f0c:	425c      	negs	r4, r3
 8015f0e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015f12:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8015f14:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015f18:	2b10      	cmp	r3, #16
 8015f1a:	d1f7      	bne.n	8015f0c <init_error_limit+0x22>
 8015f1c:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8015f20:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8015f24:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8015f28:	425d      	negs	r5, r3
 8015f2a:	f844 3f04 	str.w	r3, [r4, #4]!
 8015f2e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8015f32:	f002 0501 	and.w	r5, r2, #1
 8015f36:	3a01      	subs	r2, #1
 8015f38:	442b      	add	r3, r5
 8015f3a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8015f3e:	d1f3      	bne.n	8015f28 <init_error_limit+0x3e>
 8015f40:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8015f44:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8015f48:	425c      	negs	r4, r3
 8015f4a:	f841 3f04 	str.w	r3, [r1, #4]!
 8015f4e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8015f52:	4282      	cmp	r2, r0
 8015f54:	d1f9      	bne.n	8015f4a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8015f56:	bd38      	pop	{r3, r4, r5, pc}

08015f58 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8015f58:	4770      	bx	lr

08015f5a <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8015f5a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015f5e:	2201      	movs	r2, #1
 8015f60:	61da      	str	r2, [r3, #28]
}
 8015f62:	4770      	bx	lr

08015f64 <start_pass_2_quant>:
{
 8015f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015f66:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015f6a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8015f6c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8015f70:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d050      	beq.n	8016018 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8015f76:	2302      	movs	r3, #2
 8015f78:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8015f7c:	b189      	cbz	r1, 8015fa2 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8015f7e:	4b28      	ldr	r3, [pc, #160]	; (8016020 <start_pass_2_quant+0xbc>)
 8015f80:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8015f82:	4b28      	ldr	r3, [pc, #160]	; (8016024 <start_pass_2_quant+0xc0>)
 8015f84:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8015f86:	1f34      	subs	r4, r6, #4
 8015f88:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8015f8a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015f92:	2100      	movs	r1, #0
 8015f94:	f013 f95a 	bl	802924c <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8015f98:	42a6      	cmp	r6, r4
 8015f9a:	d1f6      	bne.n	8015f8a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	61eb      	str	r3, [r5, #28]
}
 8015fa0:	e02f      	b.n	8016002 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8015fa2:	4b21      	ldr	r3, [pc, #132]	; (8016028 <start_pass_2_quant+0xc4>)
 8015fa4:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8015fa6:	4b21      	ldr	r3, [pc, #132]	; (801602c <start_pass_2_quant+0xc8>)
 8015fa8:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8015faa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	dc29      	bgt.n	8016006 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8015fb2:	223a      	movs	r2, #58	; 0x3a
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	615a      	str	r2, [r3, #20]
 8015fb8:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015fba:	619a      	str	r2, [r3, #24]
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8015fc2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015fc6:	2b02      	cmp	r3, #2
 8015fc8:	d118      	bne.n	8015ffc <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8015fca:	2306      	movs	r3, #6
 8015fcc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015fce:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8015fd0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8015fd2:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8015fd4:	b93b      	cbnz	r3, 8015fe6 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8015fd6:	6863      	ldr	r3, [r4, #4]
 8015fd8:	2101      	movs	r1, #1
 8015fda:	4620      	mov	r0, r4
 8015fdc:	9201      	str	r2, [sp, #4]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	4798      	blx	r3
 8015fe2:	9a01      	ldr	r2, [sp, #4]
 8015fe4:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	6a28      	ldr	r0, [r5, #32]
 8015fea:	f013 f92f 	bl	802924c <memset>
      if (cquantize->error_limiter == NULL)
 8015fee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015ff0:	b913      	cbnz	r3, 8015ff8 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f7ff ff79 	bl	8015eea <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8015ffc:	69eb      	ldr	r3, [r5, #28]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d1c1      	bne.n	8015f86 <start_pass_2_quant+0x22>
}
 8016002:	b002      	add	sp, #8
 8016004:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801600a:	ddda      	ble.n	8015fc2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801600c:	223b      	movs	r2, #59	; 0x3b
 801600e:	6823      	ldr	r3, [r4, #0]
 8016010:	615a      	str	r2, [r3, #20]
 8016012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016016:	e7d0      	b.n	8015fba <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016018:	2900      	cmp	r1, #0
 801601a:	d1b0      	bne.n	8015f7e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 801601c:	4b04      	ldr	r3, [pc, #16]	; (8016030 <start_pass_2_quant+0xcc>)
 801601e:	e7c1      	b.n	8015fa4 <start_pass_2_quant+0x40>
 8016020:	0801597d 	.word	0x0801597d
 8016024:	08016273 	.word	0x08016273
 8016028:	08015ceb 	.word	0x08015ceb
 801602c:	08015f59 	.word	0x08015f59
 8016030:	08015c69 	.word	0x08015c69

08016034 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016038:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 801603c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801603e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8016040:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8016042:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016044:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016046:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801604a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 801604e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8016052:	db24      	blt.n	801609e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8016054:	4584      	cmp	ip, r0
 8016056:	4662      	mov	r2, ip
 8016058:	db5d      	blt.n	8016116 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 801605a:	42a5      	cmp	r5, r4
 801605c:	f280 80eb 	bge.w	8016236 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8016060:	0196      	lsls	r6, r2, #6
 8016062:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8016066:	46ac      	mov	ip, r5
 8016068:	9602      	str	r6, [sp, #8]
 801606a:	fb07 f602 	mul.w	r6, r7, r2
 801606e:	9603      	str	r6, [sp, #12]
 8016070:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016072:	469e      	mov	lr, r3
 8016074:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8016078:	9e03      	ldr	r6, [sp, #12]
 801607a:	44b1      	add	r9, r6
 801607c:	e083      	b.n	8016186 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801607e:	9a01      	ldr	r2, [sp, #4]
 8016080:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016084:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016088:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801608a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801608c:	454c      	cmp	r4, r9
 801608e:	da08      	bge.n	80160a2 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016090:	f108 0801 	add.w	r8, r8, #1
 8016094:	4540      	cmp	r0, r8
 8016096:	daf2      	bge.n	801607e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8016098:	3301      	adds	r3, #1
 801609a:	459b      	cmp	fp, r3
 801609c:	db0f      	blt.n	80160be <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801609e:	46e0      	mov	r8, ip
 80160a0:	e7f8      	b.n	8016094 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 80160a2:	f832 ab02 	ldrh.w	sl, [r2], #2
 80160a6:	f1ba 0f00 	cmp.w	sl, #0
 80160aa:	d005      	beq.n	80160b8 <update_box.isra.0+0x84>
  if (c0max > c0min)
 80160ac:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 80160ae:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 80160b0:	ddd0      	ble.n	8016054 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80160b2:	465f      	mov	r7, fp
 80160b4:	46e0      	mov	r8, ip
 80160b6:	e00f      	b.n	80160d8 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 80160b8:	f109 0901 	add.w	r9, r9, #1
 80160bc:	e7e6      	b.n	801608c <update_box.isra.0+0x58>
 have_c0min:
 80160be:	463b      	mov	r3, r7
 80160c0:	e7f7      	b.n	80160b2 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 80160c2:	9a01      	ldr	r2, [sp, #4]
 80160c4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80160c8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80160cc:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80160ce:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80160d0:	454c      	cmp	r4, r9
 80160d2:	da07      	bge.n	80160e4 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80160d4:	f108 0801 	add.w	r8, r8, #1
 80160d8:	4540      	cmp	r0, r8
 80160da:	daf2      	bge.n	80160c2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 80160dc:	3f01      	subs	r7, #1
 80160de:	429f      	cmp	r7, r3
 80160e0:	dbb8      	blt.n	8016054 <update_box.isra.0+0x20>
 80160e2:	e7e7      	b.n	80160b4 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 80160e4:	f832 ab02 	ldrh.w	sl, [r2], #2
 80160e8:	f1ba 0f00 	cmp.w	sl, #0
 80160ec:	d002      	beq.n	80160f4 <update_box.isra.0+0xc0>
	    goto have_c0max;
 80160ee:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 80160f0:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 80160f2:	e7af      	b.n	8016054 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 80160f4:	f109 0901 	add.w	r9, r9, #1
 80160f8:	e7ea      	b.n	80160d0 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 80160fa:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80160fc:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 80160fe:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016102:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016104:	454c      	cmp	r4, r9
 8016106:	da0a      	bge.n	801611e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016108:	f108 0801 	add.w	r8, r8, #1
 801610c:	45d8      	cmp	r8, fp
 801610e:	ddf4      	ble.n	80160fa <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016110:	3201      	adds	r2, #1
 8016112:	4290      	cmp	r0, r2
 8016114:	db11      	blt.n	801613a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016116:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016118:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 801611c:	e7f6      	b.n	801610c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 801611e:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016122:	b13e      	cbz	r6, 8016134 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016124:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016126:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016128:	dd97      	ble.n	801605a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801612a:	4684      	mov	ip, r0
 801612c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801612e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8016132:	e00d      	b.n	8016150 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016134:	f109 0901 	add.w	r9, r9, #1
 8016138:	e7e4      	b.n	8016104 <update_box.isra.0+0xd0>
 have_c1min:
 801613a:	4662      	mov	r2, ip
 801613c:	e7f5      	b.n	801612a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 801613e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016140:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016142:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016146:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016148:	454c      	cmp	r4, r9
 801614a:	da09      	bge.n	8016160 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801614c:	f108 0801 	add.w	r8, r8, #1
 8016150:	45c3      	cmp	fp, r8
 8016152:	daf4      	bge.n	801613e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 8016154:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016158:	4594      	cmp	ip, r2
 801615a:	f6ff af7e 	blt.w	801605a <update_box.isra.0+0x26>
 801615e:	e7e5      	b.n	801612c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8016160:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016164:	b11e      	cbz	r6, 801616e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8016166:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8016168:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801616c:	e775      	b.n	801605a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801616e:	f109 0901 	add.w	r9, r9, #1
 8016172:	e7e9      	b.n	8016148 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016174:	9e01      	ldr	r6, [sp, #4]
 8016176:	4690      	mov	r8, r2
 8016178:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801617c:	444f      	add	r7, r9
 801617e:	4580      	cmp	r8, r0
 8016180:	dd11      	ble.n	80161a6 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016182:	f10e 0e01 	add.w	lr, lr, #1
 8016186:	45f3      	cmp	fp, lr
 8016188:	daf4      	bge.n	8016174 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801618a:	f10c 0c01 	add.w	ip, ip, #1
 801618e:	4564      	cmp	r4, ip
 8016190:	f6bf af6e 	bge.w	8016070 <update_box.isra.0+0x3c>
 have_c2min:
 8016194:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016196:	4627      	mov	r7, r4
 8016198:	9d02      	ldr	r5, [sp, #8]
 801619a:	469e      	mov	lr, r3
 801619c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 80161a0:	9d03      	ldr	r5, [sp, #12]
 80161a2:	44a9      	add	r9, r5
 80161a4:	e034      	b.n	8016210 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 80161a6:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80161aa:	f837 a00a 	ldrh.w	sl, [r7, sl]
 80161ae:	f1ba 0f00 	cmp.w	sl, #0
 80161b2:	d021      	beq.n	80161f8 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 80161b4:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 80161b6:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 80161ba:	dcec      	bgt.n	8016196 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80161bc:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80161be:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80161c2:	eba4 070c 	sub.w	r7, r4, ip
 80161c6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80161ca:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80161ce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80161d2:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80161d6:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80161d8:	fb08 f808 	mul.w	r8, r8, r8
 80161dc:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 80161e0:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80161e4:	fb05 8505 	mla	r5, r5, r5, r8
 80161e8:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 80161ea:	459b      	cmp	fp, r3
 80161ec:	da3f      	bge.n	801626e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 80161ee:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 80161f2:	b005      	add	sp, #20
 80161f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80161f8:	f108 0801 	add.w	r8, r8, #1
 80161fc:	e7bf      	b.n	801617e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80161fe:	9d01      	ldr	r5, [sp, #4]
 8016200:	4690      	mov	r8, r2
 8016202:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8016206:	444d      	add	r5, r9
 8016208:	4540      	cmp	r0, r8
 801620a:	da07      	bge.n	801621c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801620c:	f10e 0e01 	add.w	lr, lr, #1
 8016210:	45f3      	cmp	fp, lr
 8016212:	daf4      	bge.n	80161fe <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016214:	3f01      	subs	r7, #1
 8016216:	4567      	cmp	r7, ip
 8016218:	dbd0      	blt.n	80161bc <update_box.isra.0+0x188>
 801621a:	e7bd      	b.n	8016198 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 801621c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016220:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8016224:	f1ba 0f00 	cmp.w	sl, #0
 8016228:	d002      	beq.n	8016230 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 801622a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801622c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 801622e:	e7c5      	b.n	80161bc <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016230:	f108 0801 	add.w	r8, r8, #1
 8016234:	e7e8      	b.n	8016208 <update_box.isra.0+0x1d4>
 have_c2min:
 8016236:	46ac      	mov	ip, r5
 8016238:	e7c0      	b.n	80161bc <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801623a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801623e:	f1a5 0802 	sub.w	r8, r5, #2
 8016242:	9d01      	ldr	r5, [sp, #4]
 8016244:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016248:	4445      	add	r5, r8
 801624a:	46e0      	mov	r8, ip
 801624c:	4544      	cmp	r4, r8
 801624e:	da04      	bge.n	801625a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016250:	3701      	adds	r7, #1
 8016252:	42b8      	cmp	r0, r7
 8016254:	daf1      	bge.n	801623a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016256:	3301      	adds	r3, #1
 8016258:	e7c7      	b.n	80161ea <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 801625a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 801625e:	f1ba 0f00 	cmp.w	sl, #0
 8016262:	d001      	beq.n	8016268 <update_box.isra.0+0x234>
	  ccount++;
 8016264:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016268:	f108 0801 	add.w	r8, r8, #1
 801626c:	e7ee      	b.n	801624c <update_box.isra.0+0x218>
 801626e:	4617      	mov	r7, r2
 8016270:	e7ef      	b.n	8016252 <update_box.isra.0+0x21e>

08016272 <finish_pass1>:
{
 8016272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016276:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801627a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801627c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801627e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016282:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8016284:	691b      	ldr	r3, [r3, #16]
{
 8016286:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8016288:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801628c:	9b02      	ldr	r3, [sp, #8]
 801628e:	695b      	ldr	r3, [r3, #20]
 8016290:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016292:	9a01      	ldr	r2, [sp, #4]
 8016294:	6843      	ldr	r3, [r0, #4]
 8016296:	0152      	lsls	r2, r2, #5
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801629c:	2300      	movs	r3, #0
 801629e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80162a0:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80162a2:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 80162a4:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80162a6:	6142      	str	r2, [r0, #20]
 80162a8:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 80162aa:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80162ae:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 80162b2:	9b00      	ldr	r3, [sp, #0]
 80162b4:	4601      	mov	r1, r0
 80162b6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80162ba:	f7ff febb 	bl	8016034 <update_box.isra.0>
  while (numboxes < desired_colors) {
 80162be:	9b01      	ldr	r3, [sp, #4]
 80162c0:	455b      	cmp	r3, fp
 80162c2:	dc24      	bgt.n	801630e <finish_pass1+0x9c>
 80162c4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 80162c6:	9a00      	ldr	r2, [sp, #0]
 80162c8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80162cc:	6992      	ldr	r2, [r2, #24]
 80162ce:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80162d0:	e9d8 7200 	ldrd	r7, r2, [r8]
 80162d4:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80162d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80162da:	9205      	str	r2, [sp, #20]
 80162dc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80162e0:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80162e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80162e6:	9201      	str	r2, [sp, #4]
 80162e8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80162ec:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 80162ee:	9a01      	ldr	r2, [sp, #4]
 80162f0:	0052      	lsls	r2, r2, #1
 80162f2:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 80162f4:	2200      	movs	r2, #0
  long c1total = 0;
 80162f6:	4692      	mov	sl, r2
  long c0total = 0;
 80162f8:	4691      	mov	r9, r2
  long total = 0;
 80162fa:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 80162fc:	9804      	ldr	r0, [sp, #16]
 80162fe:	42b8      	cmp	r0, r7
 8016300:	f2c0 8098 	blt.w	8016434 <finish_pass1+0x1c2>
 8016304:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016306:	9e05      	ldr	r6, [sp, #20]
 8016308:	3004      	adds	r0, #4
 801630a:	9008      	str	r0, [sp, #32]
 801630c:	e07c      	b.n	8016408 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 801630e:	9b01      	ldr	r3, [sp, #4]
 8016310:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016314:	db4f      	blt.n	80163b6 <finish_pass1+0x144>
  boxptr which = NULL;
 8016316:	2300      	movs	r3, #0
 8016318:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801631a:	461e      	mov	r6, r3
  register long maxc = 0;
 801631c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 801631e:	69c2      	ldr	r2, [r0, #28]
 8016320:	42ba      	cmp	r2, r7
 8016322:	dd04      	ble.n	801632e <finish_pass1+0xbc>
 8016324:	6984      	ldr	r4, [r0, #24]
 8016326:	2c00      	cmp	r4, #0
 8016328:	bfc4      	itt	gt
 801632a:	4603      	movgt	r3, r0
 801632c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801632e:	3601      	adds	r6, #1
 8016330:	3020      	adds	r0, #32
 8016332:	45b3      	cmp	fp, r6
 8016334:	d1f3      	bne.n	801631e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016336:	2b00      	cmp	r3, #0
 8016338:	d0c5      	beq.n	80162c6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801633a:	685a      	ldr	r2, [r3, #4]
 801633c:	f101 0920 	add.w	r9, r1, #32
 8016340:	624a      	str	r2, [r1, #36]	; 0x24
 8016342:	68d8      	ldr	r0, [r3, #12]
 8016344:	62c8      	str	r0, [r1, #44]	; 0x2c
 8016346:	6958      	ldr	r0, [r3, #20]
 8016348:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801634a:	6818      	ldr	r0, [r3, #0]
 801634c:	6208      	str	r0, [r1, #32]
 801634e:	6898      	ldr	r0, [r3, #8]
 8016350:	6288      	str	r0, [r1, #40]	; 0x28
 8016352:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8016356:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801635a:	6818      	ldr	r0, [r3, #0]
 801635c:	9003      	str	r0, [sp, #12]
 801635e:	1a10      	subs	r0, r2, r0
 8016360:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016364:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8016368:	9004      	str	r0, [sp, #16]
 801636a:	1a30      	subs	r0, r6, r0
 801636c:	00c7      	lsls	r7, r0, #3
 801636e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016372:	6958      	ldr	r0, [r3, #20]
 8016374:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016378:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801637c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016380:	f2c0 808c 	blt.w	801649c <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8016384:	45be      	cmp	lr, r7
 8016386:	dd25      	ble.n	80163d4 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8016388:	9803      	ldr	r0, [sp, #12]
 801638a:	4402      	add	r2, r0
 801638c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016390:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8016392:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8016394:	3201      	adds	r2, #1
 8016396:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8016398:	4619      	mov	r1, r3
 801639a:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 801639c:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 80163a0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80163a4:	f7ff fe46 	bl	8016034 <update_box.isra.0>
    update_box(cinfo, b2);
 80163a8:	9b00      	ldr	r3, [sp, #0]
 80163aa:	4649      	mov	r1, r9
 80163ac:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80163b0:	f7ff fe40 	bl	8016034 <update_box.isra.0>
    numboxes++;
 80163b4:	e783      	b.n	80162be <finish_pass1+0x4c>
  boxptr which = NULL;
 80163b6:	2300      	movs	r3, #0
 80163b8:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80163ba:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 80163bc:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 80163be:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80163c0:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 80163c2:	42b7      	cmp	r7, r6
 80163c4:	bfc4      	itt	gt
 80163c6:	4613      	movgt	r3, r2
 80163c8:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80163ca:	4583      	cmp	fp, r0
 80163cc:	f102 0220 	add.w	r2, r2, #32
 80163d0:	d1f5      	bne.n	80163be <finish_pass1+0x14c>
 80163d2:	e7b0      	b.n	8016336 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 80163d4:	9a04      	ldr	r2, [sp, #16]
 80163d6:	4416      	add	r6, r2
 80163d8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80163dc:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 80163de:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 80163e0:	3601      	adds	r6, #1
 80163e2:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 80163e4:	e7d8      	b.n	8016398 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 80163e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163e8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80163ec:	9c03      	ldr	r4, [sp, #12]
 80163ee:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80163f2:	f10e 0e02 	add.w	lr, lr, #2
 80163f6:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 80163fa:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 80163fe:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016400:	9c07      	ldr	r4, [sp, #28]
 8016402:	4564      	cmp	r4, ip
 8016404:	da05      	bge.n	8016412 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016406:	3601      	adds	r6, #1
 8016408:	9806      	ldr	r0, [sp, #24]
 801640a:	42b0      	cmp	r0, r6
 801640c:	daeb      	bge.n	80163e6 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 801640e:	3701      	adds	r7, #1
 8016410:	e774      	b.n	80162fc <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8016412:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016416:	b155      	cbz	r5, 801642e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016418:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 801641a:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 801641c:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016420:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016424:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8016428:	3404      	adds	r4, #4
 801642a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 801642e:	f10c 0c01 	add.w	ip, ip, #1
 8016432:	e7e5      	b.n	8016400 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016434:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8016438:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801643a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 801643e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016442:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016446:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801644a:	fb99 f9f1 	sdiv	r9, r9, r1
 801644e:	6800      	ldr	r0, [r0, #0]
 8016450:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016454:	9800      	ldr	r0, [sp, #0]
 8016456:	fb9a faf1 	sdiv	sl, sl, r1
 801645a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801645e:	6840      	ldr	r0, [r0, #4]
 8016460:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016464:	9800      	ldr	r0, [sp, #0]
 8016466:	fb92 f1f1 	sdiv	r1, r2, r1
 801646a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801646e:	6880      	ldr	r0, [r0, #8]
 8016470:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8016472:	3301      	adds	r3, #1
 8016474:	455b      	cmp	r3, fp
 8016476:	f47f af26 	bne.w	80162c6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 801647a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801647c:	2162      	movs	r1, #98	; 0x62
 801647e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8016480:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016484:	6812      	ldr	r2, [r2, #0]
 8016486:	e9c2 1305 	strd	r1, r3, [r2, #20]
 801648a:	6853      	ldr	r3, [r2, #4]
 801648c:	2101      	movs	r1, #1
 801648e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8016490:	2301      	movs	r3, #1
 8016492:	9a02      	ldr	r2, [sp, #8]
 8016494:	61d3      	str	r3, [r2, #28]
}
 8016496:	b00b      	add	sp, #44	; 0x2c
 8016498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 801649c:	45a6      	cmp	lr, r4
 801649e:	f73f af73 	bgt.w	8016388 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 80164a2:	4460      	add	r0, ip
 80164a4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80164a8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 80164aa:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 80164ac:	3001      	adds	r0, #1
 80164ae:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 80164b0:	e772      	b.n	8016398 <finish_pass1+0x126>
	...

080164b4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 80164b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80164b6:	6843      	ldr	r3, [r0, #4]
 80164b8:	222c      	movs	r2, #44	; 0x2c
 80164ba:	2101      	movs	r1, #1
{
 80164bc:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 80164c2:	4b30      	ldr	r3, [pc, #192]	; (8016584 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80164c4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80164c8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 80164ca:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 80164cc:	4b2e      	ldr	r3, [pc, #184]	; (8016588 <jinit_2pass_quantizer+0xd4>)
 80164ce:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 80164d0:	2300      	movs	r3, #0
 80164d2:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 80164d4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 80164d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80164d8:	2b03      	cmp	r3, #3
 80164da:	d005      	beq.n	80164e8 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	2230      	movs	r2, #48	; 0x30
 80164e0:	4620      	mov	r0, r4
 80164e2:	615a      	str	r2, [r3, #20]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 80164e8:	6863      	ldr	r3, [r4, #4]
 80164ea:	2600      	movs	r6, #0
 80164ec:	2280      	movs	r2, #128	; 0x80
 80164ee:	2101      	movs	r1, #1
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	4620      	mov	r0, r4
 80164f4:	4798      	blx	r3
 80164f6:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80164f8:	6863      	ldr	r3, [r4, #4]
 80164fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80164fe:	69af      	ldr	r7, [r5, #24]
 8016500:	2101      	movs	r1, #1
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	4620      	mov	r0, r4
 8016506:	4798      	blx	r3
 8016508:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801650a:	3604      	adds	r6, #4
 801650c:	2e80      	cmp	r6, #128	; 0x80
 801650e:	d1f3      	bne.n	80164f8 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016510:	2301      	movs	r3, #1
 8016512:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016514:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016516:	2b00      	cmp	r3, #0
 8016518:	d031      	beq.n	801657e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 801651a:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 801651c:	2e07      	cmp	r6, #7
 801651e:	dc25      	bgt.n	801656c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016520:	223a      	movs	r2, #58	; 0x3a
 8016522:	6823      	ldr	r3, [r4, #0]
 8016524:	615a      	str	r2, [r3, #20]
 8016526:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016528:	619a      	str	r2, [r3, #24]
 801652a:	4620      	mov	r0, r4
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016530:	6863      	ldr	r3, [r4, #4]
 8016532:	4632      	mov	r2, r6
 8016534:	2101      	movs	r1, #1
 8016536:	4620      	mov	r0, r4
 8016538:	689f      	ldr	r7, [r3, #8]
 801653a:	2303      	movs	r3, #3
 801653c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 801653e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016542:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016546:	b1e3      	cbz	r3, 8016582 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016548:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801654a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801654c:	4620      	mov	r0, r4
 801654e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016550:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016554:	2306      	movs	r3, #6
 8016556:	435a      	muls	r2, r3
 8016558:	6863      	ldr	r3, [r4, #4]
 801655a:	320c      	adds	r2, #12
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	4798      	blx	r3
 8016560:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016562:	4620      	mov	r0, r4
  }
}
 8016564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016568:	f7ff bcbf 	b.w	8015eea <init_error_limit>
    if (desired > MAXNUMCOLORS)
 801656c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016570:	ddde      	ble.n	8016530 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016572:	223b      	movs	r2, #59	; 0x3b
 8016574:	6823      	ldr	r3, [r4, #0]
 8016576:	615a      	str	r2, [r3, #20]
 8016578:	f44f 7280 	mov.w	r2, #256	; 0x100
 801657c:	e7d4      	b.n	8016528 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 801657e:	612b      	str	r3, [r5, #16]
 8016580:	e7df      	b.n	8016542 <jinit_2pass_quantizer+0x8e>
}
 8016582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016584:	08015f65 	.word	0x08015f65
 8016588:	08015f5b 	.word	0x08015f5b

0801658c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 801658c:	4408      	add	r0, r1
 801658e:	3801      	subs	r0, #1
}
 8016590:	fb90 f0f1 	sdiv	r0, r0, r1
 8016594:	4770      	bx	lr

08016596 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016596:	1e4b      	subs	r3, r1, #1
 8016598:	4418      	add	r0, r3
  return a - (a % b);
 801659a:	fb90 f3f1 	sdiv	r3, r0, r1
 801659e:	fb01 0113 	mls	r1, r1, r3, r0
}
 80165a2:	1a40      	subs	r0, r0, r1
 80165a4:	4770      	bx	lr

080165a6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 80165a6:	b570      	push	{r4, r5, r6, lr}
 80165a8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 80165aa:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 80165ae:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 80165b2:	2e00      	cmp	r6, #0
 80165b4:	dc00      	bgt.n	80165b8 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 80165b6:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 80165b8:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 80165ba:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 80165bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80165c0:	f855 0b04 	ldr.w	r0, [r5], #4
 80165c4:	f012 fe34 	bl	8029230 <memcpy>
  for (row = num_rows; row > 0; row--) {
 80165c8:	e7f3      	b.n	80165b2 <jcopy_sample_rows+0xc>

080165ca <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 80165ca:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 80165cc:	01d2      	lsls	r2, r2, #7
 80165ce:	4601      	mov	r1, r0
 80165d0:	4618      	mov	r0, r3
 80165d2:	f012 be2d 	b.w	8029230 <memcpy>

080165d6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80165d6:	8880      	ldrh	r0, [r0, #4]
 80165d8:	4770      	bx	lr

080165da <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80165da:	b570      	push	{r4, r5, r6, lr}
 80165dc:	6803      	ldr	r3, [r0, #0]
 80165de:	460c      	mov	r4, r1
 80165e0:	2100      	movs	r1, #0
 80165e2:	4605      	mov	r5, r0
 80165e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165e6:	4798      	blx	r3
 80165e8:	4606      	mov	r6, r0
 80165ea:	682b      	ldr	r3, [r5, #0]
 80165ec:	4628      	mov	r0, r5
 80165ee:	1ba4      	subs	r4, r4, r6
 80165f0:	6a1b      	ldr	r3, [r3, #32]
 80165f2:	b2a4      	uxth	r4, r4
 80165f4:	4798      	blx	r3
 80165f6:	fbb4 f0f0 	udiv	r0, r4, r0
 80165fa:	bd70      	pop	{r4, r5, r6, pc}

080165fc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80165fc:	2300      	movs	r3, #0
 80165fe:	8083      	strh	r3, [r0, #4]
 8016600:	4770      	bx	lr

08016602 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016602:	b510      	push	{r4, lr}
 8016604:	6803      	ldr	r3, [r0, #0]
 8016606:	4604      	mov	r4, r0
 8016608:	8881      	ldrh	r1, [r0, #4]
 801660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660c:	4798      	blx	r3
 801660e:	88a3      	ldrh	r3, [r4, #4]
 8016610:	3301      	adds	r3, #1
 8016612:	80a3      	strh	r3, [r4, #4]
 8016614:	bd10      	pop	{r4, pc}

08016616 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016616:	6803      	ldr	r3, [r0, #0]
 8016618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661a:	4718      	bx	r3

0801661c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801661c:	4770      	bx	lr
	...

08016620 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016620:	4a02      	ldr	r2, [pc, #8]	; (801662c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016622:	6002      	str	r2, [r0, #0]
 8016624:	2200      	movs	r2, #0
 8016626:	8082      	strh	r2, [r0, #4]
 8016628:	4770      	bx	lr
 801662a:	bf00      	nop
 801662c:	0802e78c 	.word	0x0802e78c

08016630 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016630:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016632:	4770      	bx	lr

08016634 <_ZN8touchgfx8TextArea8setWidthEs>:
 8016634:	b530      	push	{r4, r5, lr}
 8016636:	b085      	sub	sp, #20
 8016638:	6803      	ldr	r3, [r0, #0]
 801663a:	4604      	mov	r4, r0
 801663c:	8101      	strh	r1, [r0, #8]
 801663e:	466d      	mov	r5, sp
 8016640:	4601      	mov	r1, r0
 8016642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016646:	343c      	adds	r4, #60	; 0x3c
 8016648:	4628      	mov	r0, r5
 801664a:	4798      	blx	r3
 801664c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016654:	b005      	add	sp, #20
 8016656:	bd30      	pop	{r4, r5, pc}

08016658 <_ZN8touchgfx8TextArea9setHeightEs>:
 8016658:	b530      	push	{r4, r5, lr}
 801665a:	b085      	sub	sp, #20
 801665c:	6803      	ldr	r3, [r0, #0]
 801665e:	4604      	mov	r4, r0
 8016660:	8141      	strh	r1, [r0, #10]
 8016662:	466d      	mov	r5, sp
 8016664:	4601      	mov	r1, r0
 8016666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801666a:	343c      	adds	r4, #60	; 0x3c
 801666c:	4628      	mov	r0, r5
 801666e:	4798      	blx	r3
 8016670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016678:	b005      	add	sp, #20
 801667a:	bd30      	pop	{r4, r5, pc}

0801667c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801667c:	2200      	movs	r2, #0
 801667e:	8002      	strh	r2, [r0, #0]
 8016680:	8042      	strh	r2, [r0, #2]
 8016682:	8082      	strh	r2, [r0, #4]
 8016684:	80c2      	strh	r2, [r0, #6]
 8016686:	4770      	bx	lr

08016688 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8016688:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801668c:	4770      	bx	lr
	...

08016690 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	6803      	ldr	r3, [r0, #0]
 8016694:	4604      	mov	r4, r0
 8016696:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016698:	460d      	mov	r5, r1
 801669a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801669c:	4b08      	ldr	r3, [pc, #32]	; (80166c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80166a4:	4b07      	ldr	r3, [pc, #28]	; (80166c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80166ac:	6803      	ldr	r3, [r0, #0]
 80166ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166b0:	4798      	blx	r3
 80166b2:	1a29      	subs	r1, r5, r0
 80166b4:	4633      	mov	r3, r6
 80166b6:	4620      	mov	r0, r4
 80166b8:	b209      	sxth	r1, r1
 80166ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166be:	4718      	bx	r3
 80166c0:	20015324 	.word	0x20015324
 80166c4:	2001532c 	.word	0x2001532c

080166c8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80166c8:	b570      	push	{r4, r5, r6, lr}
 80166ca:	6803      	ldr	r3, [r0, #0]
 80166cc:	4604      	mov	r4, r0
 80166ce:	4615      	mov	r5, r2
 80166d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166d2:	4798      	blx	r3
 80166d4:	6823      	ldr	r3, [r4, #0]
 80166d6:	4629      	mov	r1, r5
 80166d8:	4620      	mov	r0, r4
 80166da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80166dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166e0:	4718      	bx	r3

080166e2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 80166e2:	2000      	movs	r0, #0
 80166e4:	4770      	bx	lr

080166e6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
 80166e6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80166e8:	4770      	bx	lr

080166ea <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 80166ea:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 80166ee:	4770      	bx	lr

080166f0 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 80166f0:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 80166f4:	4770      	bx	lr

080166f6 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 80166f6:	b508      	push	{r3, lr}
 80166f8:	3034      	adds	r0, #52	; 0x34
 80166fa:	f820 1c2c 	strh.w	r1, [r0, #-44]
 80166fe:	f7ff ff99 	bl	8016634 <_ZN8touchgfx8TextArea8setWidthEs>
 8016702:	bd08      	pop	{r3, pc}

08016704 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8016704:	b508      	push	{r3, lr}
 8016706:	3034      	adds	r0, #52	; 0x34
 8016708:	f820 1c2a 	strh.w	r1, [r0, #-42]
 801670c:	f7ff ffa4 	bl	8016658 <_ZN8touchgfx8TextArea9setHeightEs>
 8016710:	bd08      	pop	{r3, pc}
	...

08016714 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8016714:	4a11      	ldr	r2, [pc, #68]	; (801675c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8016716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801671a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801671e:	4604      	mov	r4, r0
 8016720:	8812      	ldrh	r2, [r2, #0]
 8016722:	460d      	mov	r5, r1
 8016724:	429a      	cmp	r2, r3
 8016726:	d916      	bls.n	8016756 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8016728:	6802      	ldr	r2, [r0, #0]
 801672a:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801672e:	6d96      	ldr	r6, [r2, #88]	; 0x58
 8016730:	4a0b      	ldr	r2, [pc, #44]	; (8016760 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8016732:	6812      	ldr	r2, [r2, #0]
 8016734:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016738:	4b0a      	ldr	r3, [pc, #40]	; (8016764 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016740:	6803      	ldr	r3, [r0, #0]
 8016742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016744:	4798      	blx	r3
 8016746:	1a2a      	subs	r2, r5, r0
 8016748:	4639      	mov	r1, r7
 801674a:	4620      	mov	r0, r4
 801674c:	4633      	mov	r3, r6
 801674e:	b212      	sxth	r2, r2
 8016750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016754:	4718      	bx	r3
 8016756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801675a:	bf00      	nop
 801675c:	20015328 	.word	0x20015328
 8016760:	20015324 	.word	0x20015324
 8016764:	2001532c 	.word	0x2001532c

08016768 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8016768:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 801676c:	4770      	bx	lr

0801676e <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 801676e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016772:	4770      	bx	lr

08016774 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8016774:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016776:	4770      	bx	lr

08016778 <_ZN8touchgfx12DigitalClockD1Ev>:
 8016778:	4770      	bx	lr

0801677a <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 801677a:	4770      	bx	lr

0801677c <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 801677c:	6641      	str	r1, [r0, #100]	; 0x64
 801677e:	3034      	adds	r0, #52	; 0x34
 8016780:	f001 bf72 	b.w	8018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>

08016784 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8016784:	3034      	adds	r0, #52	; 0x34
 8016786:	f001 bb7b 	b.w	8017e80 <_ZNK8touchgfx8TextArea12getTextWidthEv>

0801678a <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801678a:	b510      	push	{r4, lr}
 801678c:	4604      	mov	r4, r0
 801678e:	214c      	movs	r1, #76	; 0x4c
 8016790:	f012 fba8 	bl	8028ee4 <_ZdlPvj>
 8016794:	4620      	mov	r0, r4
 8016796:	bd10      	pop	{r4, pc}

08016798 <_ZN8touchgfx12DigitalClockD0Ev>:
 8016798:	b510      	push	{r4, lr}
 801679a:	4604      	mov	r4, r0
 801679c:	2198      	movs	r1, #152	; 0x98
 801679e:	f012 fba1 	bl	8028ee4 <_ZdlPvj>
 80167a2:	4620      	mov	r0, r4
 80167a4:	bd10      	pop	{r4, pc}

080167a6 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 80167a6:	b538      	push	{r3, r4, r5, lr}
 80167a8:	f100 0434 	add.w	r4, r0, #52	; 0x34
 80167ac:	460d      	mov	r5, r1
 80167ae:	4620      	mov	r0, r4
 80167b0:	f001 ff5a 	bl	8018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80167b4:	4620      	mov	r0, r4
 80167b6:	4629      	mov	r1, r5
 80167b8:	f001 fdc0 	bl	801833c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80167bc:	4620      	mov	r0, r4
 80167be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167c2:	f001 bf51 	b.w	8018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
	...

080167c8 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 80167c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167cc:	f100 0634 	add.w	r6, r0, #52	; 0x34
 80167d0:	4604      	mov	r4, r0
 80167d2:	4630      	mov	r0, r6
 80167d4:	f001 ff48 	bl	8018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80167d8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80167dc:	bb0b      	cbnz	r3, 8016822 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 80167de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80167e2:	4620      	mov	r0, r4
 80167e4:	4a40      	ldr	r2, [pc, #256]	; (80168e8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 80167e6:	f104 0780 	add.w	r7, r4, #128	; 0x80
 80167ea:	4d40      	ldr	r5, [pc, #256]	; (80168ec <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	bf08      	it	eq
 80167f0:	4615      	moveq	r5, r2
 80167f2:	f000 f93c 	bl	8016a6e <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 80167f6:	4680      	mov	r8, r0
 80167f8:	4620      	mov	r0, r4
 80167fa:	f000 f94b 	bl	8016a94 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80167fe:	4681      	mov	r9, r0
 8016800:	4620      	mov	r0, r4
 8016802:	f000 f940 	bl	8016a86 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016806:	2800      	cmp	r0, #0
 8016808:	462a      	mov	r2, r5
 801680a:	f04f 010c 	mov.w	r1, #12
 801680e:	bf14      	ite	ne
 8016810:	2341      	movne	r3, #65	; 0x41
 8016812:	2350      	moveq	r3, #80	; 0x50
 8016814:	4638      	mov	r0, r7
 8016816:	e9cd 9300 	strd	r9, r3, [sp]
 801681a:	4643      	mov	r3, r8
 801681c:	f006 fca6 	bl	801d16c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016820:	e017      	b.n	8016852 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8016822:	2b01      	cmp	r3, #1
 8016824:	d11b      	bne.n	801685e <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8016826:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801682a:	4620      	mov	r0, r4
 801682c:	4a30      	ldr	r2, [pc, #192]	; (80168f0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 801682e:	4d31      	ldr	r5, [pc, #196]	; (80168f4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8016830:	2b00      	cmp	r3, #0
 8016832:	bf08      	it	eq
 8016834:	4615      	moveq	r5, r2
 8016836:	f000 f917 	bl	8016a68 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 801683a:	4607      	mov	r7, r0
 801683c:	4620      	mov	r0, r4
 801683e:	f000 f929 	bl	8016a94 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016842:	462a      	mov	r2, r5
 8016844:	9000      	str	r0, [sp, #0]
 8016846:	463b      	mov	r3, r7
 8016848:	210c      	movs	r1, #12
 801684a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801684e:	f006 fc8d 	bl	801d16c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016852:	4630      	mov	r0, r6
 8016854:	b004      	add	sp, #16
 8016856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801685a:	f001 bf05 	b.w	8018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 801685e:	2b02      	cmp	r3, #2
 8016860:	d126      	bne.n	80168b0 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8016862:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016866:	4620      	mov	r0, r4
 8016868:	4a23      	ldr	r2, [pc, #140]	; (80168f8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 801686a:	f104 0780 	add.w	r7, r4, #128	; 0x80
 801686e:	4d23      	ldr	r5, [pc, #140]	; (80168fc <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8016870:	2b00      	cmp	r3, #0
 8016872:	bf08      	it	eq
 8016874:	4615      	moveq	r5, r2
 8016876:	f000 f8fa 	bl	8016a6e <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801687a:	4680      	mov	r8, r0
 801687c:	4620      	mov	r0, r4
 801687e:	f000 f909 	bl	8016a94 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016882:	4681      	mov	r9, r0
 8016884:	4620      	mov	r0, r4
 8016886:	f000 f908 	bl	8016a9a <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 801688a:	4682      	mov	sl, r0
 801688c:	4620      	mov	r0, r4
 801688e:	f000 f8fa 	bl	8016a86 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016892:	2800      	cmp	r0, #0
 8016894:	f8cd 9000 	str.w	r9, [sp]
 8016898:	462a      	mov	r2, r5
 801689a:	bf14      	ite	ne
 801689c:	2341      	movne	r3, #65	; 0x41
 801689e:	2350      	moveq	r3, #80	; 0x50
 80168a0:	210c      	movs	r1, #12
 80168a2:	4638      	mov	r0, r7
 80168a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80168a8:	4643      	mov	r3, r8
 80168aa:	f006 fc5f 	bl	801d16c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80168ae:	e7d0      	b.n	8016852 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80168b0:	2b03      	cmp	r3, #3
 80168b2:	d1ce      	bne.n	8016852 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80168b4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80168b8:	4620      	mov	r0, r4
 80168ba:	4a11      	ldr	r2, [pc, #68]	; (8016900 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 80168bc:	4d11      	ldr	r5, [pc, #68]	; (8016904 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 80168be:	2b00      	cmp	r3, #0
 80168c0:	bf08      	it	eq
 80168c2:	4615      	moveq	r5, r2
 80168c4:	f000 f8d0 	bl	8016a68 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80168c8:	4607      	mov	r7, r0
 80168ca:	4620      	mov	r0, r4
 80168cc:	f000 f8e2 	bl	8016a94 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80168d0:	4680      	mov	r8, r0
 80168d2:	4620      	mov	r0, r4
 80168d4:	f000 f8e1 	bl	8016a9a <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80168d8:	463b      	mov	r3, r7
 80168da:	462a      	mov	r2, r5
 80168dc:	210c      	movs	r1, #12
 80168de:	e9cd 8000 	strd	r8, r0, [sp]
 80168e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80168e6:	e799      	b.n	801681c <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 80168e8:	0802e848 	.word	0x0802e848
 80168ec:	0802e872 	.word	0x0802e872
 80168f0:	0802e854 	.word	0x0802e854
 80168f4:	0802e892 	.word	0x0802e892
 80168f8:	0802e86f 	.word	0x0802e86f
 80168fc:	0802e85c 	.word	0x0802e85c
 8016900:	0802e88f 	.word	0x0802e88f
 8016904:	0802e880 	.word	0x0802e880

08016908 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8016908:	b510      	push	{r4, lr}
 801690a:	6803      	ldr	r3, [r0, #0]
 801690c:	4604      	mov	r4, r0
 801690e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016912:	4798      	blx	r3
 8016914:	b120      	cbz	r0, 8016920 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x18>
 8016916:	4620      	mov	r0, r4
 8016918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801691c:	f000 b903 	b.w	8016b26 <_ZNK8touchgfx9Container17invalidateContentEv>
 8016920:	bd10      	pop	{r4, pc}

08016922 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
 8016922:	2200      	movs	r2, #0
 8016924:	f04f 31ff 	mov.w	r1, #4294967295
 8016928:	6082      	str	r2, [r0, #8]
 801692a:	e9c0 2100 	strd	r2, r1, [r0]
 801692e:	4770      	bx	lr

08016930 <_ZN8touchgfx12DigitalClockC1Ev>:
 8016930:	b510      	push	{r4, lr}
 8016932:	4604      	mov	r4, r0
 8016934:	f000 f87c 	bl	8016a30 <_ZN8touchgfx13AbstractClockC1Ev>
 8016938:	2201      	movs	r2, #1
 801693a:	4b21      	ldr	r3, [pc, #132]	; (80169c0 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 801693c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8016940:	4620      	mov	r0, r4
 8016942:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8016946:	4a1f      	ldr	r2, [pc, #124]	; (80169c4 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8016948:	6023      	str	r3, [r4, #0]
 801694a:	2303      	movs	r3, #3
 801694c:	65e2      	str	r2, [r4, #92]	; 0x5c
 801694e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016952:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8016956:	2300      	movs	r3, #0
 8016958:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 801695c:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
 8016960:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 8016964:	4a18      	ldr	r2, [pc, #96]	; (80169c8 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8016966:	66a1      	str	r1, [r4, #104]	; 0x68
 8016968:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801696c:	6362      	str	r2, [r4, #52]	; 0x34
 801696e:	4622      	mov	r2, r4
 8016970:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8016974:	8723      	strh	r3, [r4, #56]	; 0x38
 8016976:	8763      	strh	r3, [r4, #58]	; 0x3a
 8016978:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801697a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801697c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8016980:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8016984:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8016988:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801698c:	6523      	str	r3, [r4, #80]	; 0x50
 801698e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8016992:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8016996:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801699a:	6663      	str	r3, [r4, #100]	; 0x64
 801699c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80169a0:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80169a4:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 80169a8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80169ac:	67a3      	str	r3, [r4, #120]	; 0x78
 80169ae:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169b2:	f822 3f80 	strh.w	r3, [r2, #128]!
 80169b6:	67e2      	str	r2, [r4, #124]	; 0x7c
 80169b8:	f000 f87c 	bl	8016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169bc:	4620      	mov	r0, r4
 80169be:	bd10      	pop	{r4, pc}
 80169c0:	0802e8a4 	.word	0x0802e8a4
 80169c4:	0802bf0c 	.word	0x0802bf0c
 80169c8:	0802e7c0 	.word	0x0802e7c0

080169cc <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 80169cc:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 80169d0:	4770      	bx	lr

080169d2 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 80169d2:	b470      	push	{r4, r5, r6}
 80169d4:	2518      	movs	r5, #24
 80169d6:	fbb1 f6f5 	udiv	r6, r1, r5
 80169da:	fb06 1115 	mls	r1, r6, r5, r1
 80169de:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80169e2:	213c      	movs	r1, #60	; 0x3c
 80169e4:	fbb2 f5f1 	udiv	r5, r2, r1
 80169e8:	fb05 2211 	mls	r2, r5, r1, r2
 80169ec:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 80169f0:	fbb3 f2f1 	udiv	r2, r3, r1
 80169f4:	fb02 3311 	mls	r3, r2, r1, r3
 80169f8:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 80169fc:	6803      	ldr	r3, [r0, #0]
 80169fe:	bc70      	pop	{r4, r5, r6}
 8016a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a04:	4718      	bx	r3

08016a06 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8016a06:	b4f0      	push	{r4, r5, r6, r7}
 8016a08:	6804      	ldr	r4, [r0, #0]
 8016a0a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8016a0e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8016a12:	240c      	movs	r4, #12
 8016a14:	2e00      	cmp	r6, #0
 8016a16:	46ac      	mov	ip, r5
 8016a18:	fbb1 f7f4 	udiv	r7, r1, r4
 8016a1c:	fb07 1114 	mls	r1, r7, r4, r1
 8016a20:	bf18      	it	ne
 8016a22:	2400      	movne	r4, #0
 8016a24:	fa54 f181 	uxtab	r1, r4, r1
 8016a28:	bcf0      	pop	{r4, r5, r6, r7}
 8016a2a:	b2c9      	uxtb	r1, r1
 8016a2c:	4760      	bx	ip
	...

08016a30 <_ZN8touchgfx13AbstractClockC1Ev>:
 8016a30:	2101      	movs	r1, #1
 8016a32:	2200      	movs	r2, #0
 8016a34:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016a38:	490a      	ldr	r1, [pc, #40]	; (8016a64 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8016a3a:	8082      	strh	r2, [r0, #4]
 8016a3c:	80c2      	strh	r2, [r0, #6]
 8016a3e:	8102      	strh	r2, [r0, #8]
 8016a40:	8142      	strh	r2, [r0, #10]
 8016a42:	8182      	strh	r2, [r0, #12]
 8016a44:	81c2      	strh	r2, [r0, #14]
 8016a46:	8202      	strh	r2, [r0, #16]
 8016a48:	8242      	strh	r2, [r0, #18]
 8016a4a:	61c2      	str	r2, [r0, #28]
 8016a4c:	8402      	strh	r2, [r0, #32]
 8016a4e:	8442      	strh	r2, [r0, #34]	; 0x22
 8016a50:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016a54:	6001      	str	r1, [r0, #0]
 8016a56:	6282      	str	r2, [r0, #40]	; 0x28
 8016a58:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016a5a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016a5e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016a62:	4770      	bx	lr
 8016a64:	0802e964 	.word	0x0802e964

08016a68 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8016a68:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016a6c:	4770      	bx	lr

08016a6e <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8016a6e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016a72:	220c      	movs	r2, #12
 8016a74:	f100 030b 	add.w	r3, r0, #11
 8016a78:	fb93 f0f2 	sdiv	r0, r3, r2
 8016a7c:	fb02 3010 	mls	r0, r2, r0, r3
 8016a80:	3001      	adds	r0, #1
 8016a82:	b2c0      	uxtb	r0, r0
 8016a84:	4770      	bx	lr

08016a86 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8016a86:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016a8a:	280b      	cmp	r0, #11
 8016a8c:	bf8c      	ite	hi
 8016a8e:	2000      	movhi	r0, #0
 8016a90:	2001      	movls	r0, #1
 8016a92:	4770      	bx	lr

08016a94 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8016a94:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8016a98:	4770      	bx	lr

08016a9a <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8016a9a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016a9e:	4770      	bx	lr

08016aa0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016aa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	b12b      	cbz	r3, 8016ab2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016aa6:	b920      	cbnz	r0, 8016ab2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016aa8:	1a5a      	subs	r2, r3, r1
 8016aaa:	699b      	ldr	r3, [r3, #24]
 8016aac:	4250      	negs	r0, r2
 8016aae:	4150      	adcs	r0, r2
 8016ab0:	e7f8      	b.n	8016aa4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016ab2:	4770      	bx	lr

08016ab4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	6148      	str	r0, [r1, #20]
 8016ab8:	618b      	str	r3, [r1, #24]
 8016aba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016abc:	b913      	cbnz	r3, 8016ac4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016abe:	6281      	str	r1, [r0, #40]	; 0x28
 8016ac0:	4770      	bx	lr
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	699a      	ldr	r2, [r3, #24]
 8016ac6:	2a00      	cmp	r2, #0
 8016ac8:	d1fb      	bne.n	8016ac2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016aca:	6199      	str	r1, [r3, #24]
 8016acc:	4770      	bx	lr

08016ace <_ZN8touchgfx9Container9removeAllEv>:
 8016ace:	2200      	movs	r2, #0
 8016ad0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ad2:	b123      	cbz	r3, 8016ade <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016ad4:	6999      	ldr	r1, [r3, #24]
 8016ad6:	6281      	str	r1, [r0, #40]	; 0x28
 8016ad8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016adc:	e7f8      	b.n	8016ad0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016ade:	4770      	bx	lr

08016ae0 <_ZN8touchgfx9Container6unlinkEv>:
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	6283      	str	r3, [r0, #40]	; 0x28
 8016ae4:	4770      	bx	lr

08016ae6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	8002      	strh	r2, [r0, #0]
 8016aea:	8042      	strh	r2, [r0, #2]
 8016aec:	8082      	strh	r2, [r0, #4]
 8016aee:	80c2      	strh	r2, [r0, #6]
 8016af0:	4770      	bx	lr

08016af2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016af2:	b570      	push	{r4, r5, r6, lr}
 8016af4:	460d      	mov	r5, r1
 8016af6:	4616      	mov	r6, r2
 8016af8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016afa:	b13c      	cbz	r4, 8016b0c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016afc:	6823      	ldr	r3, [r4, #0]
 8016afe:	4620      	mov	r0, r4
 8016b00:	4632      	mov	r2, r6
 8016b02:	4629      	mov	r1, r5
 8016b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b06:	4798      	blx	r3
 8016b08:	69a4      	ldr	r4, [r4, #24]
 8016b0a:	e7f6      	b.n	8016afa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016b0c:	bd70      	pop	{r4, r5, r6, pc}

08016b0e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016b0e:	b538      	push	{r3, r4, r5, lr}
 8016b10:	460d      	mov	r5, r1
 8016b12:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016b14:	b134      	cbz	r4, 8016b24 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016b16:	682b      	ldr	r3, [r5, #0]
 8016b18:	4621      	mov	r1, r4
 8016b1a:	4628      	mov	r0, r5
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	4798      	blx	r3
 8016b20:	69a4      	ldr	r4, [r4, #24]
 8016b22:	e7f7      	b.n	8016b14 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016b24:	bd38      	pop	{r3, r4, r5, pc}

08016b26 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8016b26:	b510      	push	{r4, lr}
 8016b28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016b2a:	b12c      	cbz	r4, 8016b38 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	4620      	mov	r0, r4
 8016b30:	699b      	ldr	r3, [r3, #24]
 8016b32:	4798      	blx	r3
 8016b34:	69a4      	ldr	r4, [r4, #24]
 8016b36:	e7f8      	b.n	8016b2a <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8016b38:	bd10      	pop	{r4, pc}

08016b3a <_ZN8touchgfx9ContainerD1Ev>:
 8016b3a:	4770      	bx	lr

08016b3c <_ZN8touchgfx9ContainerD0Ev>:
 8016b3c:	b510      	push	{r4, lr}
 8016b3e:	4604      	mov	r4, r0
 8016b40:	212c      	movs	r1, #44	; 0x2c
 8016b42:	f012 f9cf 	bl	8028ee4 <_ZdlPvj>
 8016b46:	4620      	mov	r0, r4
 8016b48:	bd10      	pop	{r4, pc}

08016b4a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016b4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b4c:	b19b      	cbz	r3, 8016b76 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016b4e:	428b      	cmp	r3, r1
 8016b50:	d109      	bne.n	8016b66 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016b52:	699a      	ldr	r2, [r3, #24]
 8016b54:	2100      	movs	r1, #0
 8016b56:	6159      	str	r1, [r3, #20]
 8016b58:	6282      	str	r2, [r0, #40]	; 0x28
 8016b5a:	b902      	cbnz	r2, 8016b5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016b5c:	4770      	bx	lr
 8016b5e:	6199      	str	r1, [r3, #24]
 8016b60:	4770      	bx	lr
 8016b62:	4613      	mov	r3, r2
 8016b64:	b13a      	cbz	r2, 8016b76 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016b66:	699a      	ldr	r2, [r3, #24]
 8016b68:	428a      	cmp	r2, r1
 8016b6a:	d1fa      	bne.n	8016b62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016b6c:	698a      	ldr	r2, [r1, #24]
 8016b6e:	619a      	str	r2, [r3, #24]
 8016b70:	2300      	movs	r3, #0
 8016b72:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016b76:	4770      	bx	lr

08016b78 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016b78:	b410      	push	{r4}
 8016b7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	b92b      	cbnz	r3, 8016b8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016b80:	6803      	ldr	r3, [r0, #0]
 8016b82:	4611      	mov	r1, r2
 8016b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b8a:	4718      	bx	r3
 8016b8c:	b941      	cbnz	r1, 8016ba0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016b8e:	6193      	str	r3, [r2, #24]
 8016b90:	6282      	str	r2, [r0, #40]	; 0x28
 8016b92:	6154      	str	r4, [r2, #20]
 8016b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b98:	4770      	bx	lr
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d0f9      	beq.n	8016b94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016ba0:	4299      	cmp	r1, r3
 8016ba2:	6998      	ldr	r0, [r3, #24]
 8016ba4:	d1f9      	bne.n	8016b9a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016ba6:	6190      	str	r0, [r2, #24]
 8016ba8:	618a      	str	r2, [r1, #24]
 8016baa:	e7f2      	b.n	8016b92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016bac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb0:	461f      	mov	r7, r3
 8016bb2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016bb6:	460d      	mov	r5, r1
 8016bb8:	4616      	mov	r6, r2
 8016bba:	b103      	cbz	r3, 8016bbe <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016bbc:	6038      	str	r0, [r7, #0]
 8016bbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016bc0:	b314      	cbz	r4, 8016c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016bc2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016bc6:	b1eb      	cbz	r3, 8016c04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016bc8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016bcc:	428d      	cmp	r5, r1
 8016bce:	db19      	blt.n	8016c04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016bd0:	b289      	uxth	r1, r1
 8016bd2:	8923      	ldrh	r3, [r4, #8]
 8016bd4:	440b      	add	r3, r1
 8016bd6:	b21b      	sxth	r3, r3
 8016bd8:	429d      	cmp	r5, r3
 8016bda:	da13      	bge.n	8016c04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016bdc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016be0:	4296      	cmp	r6, r2
 8016be2:	db0f      	blt.n	8016c04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016be4:	b292      	uxth	r2, r2
 8016be6:	8963      	ldrh	r3, [r4, #10]
 8016be8:	4413      	add	r3, r2
 8016bea:	b21b      	sxth	r3, r3
 8016bec:	429e      	cmp	r6, r3
 8016bee:	da09      	bge.n	8016c04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	1ab2      	subs	r2, r6, r2
 8016bf4:	1a69      	subs	r1, r5, r1
 8016bf6:	4620      	mov	r0, r4
 8016bf8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016bfc:	b212      	sxth	r2, r2
 8016bfe:	463b      	mov	r3, r7
 8016c00:	b209      	sxth	r1, r1
 8016c02:	47c0      	blx	r8
 8016c04:	69a4      	ldr	r4, [r4, #24]
 8016c06:	e7db      	b.n	8016bc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c10:	4c6d      	ldr	r4, [pc, #436]	; (8016dc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016c12:	b0a1      	sub	sp, #132	; 0x84
 8016c14:	4606      	mov	r6, r0
 8016c16:	6824      	ldr	r4, [r4, #0]
 8016c18:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016c1a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016c1e:	2400      	movs	r4, #0
 8016c20:	9303      	str	r3, [sp, #12]
 8016c22:	802c      	strh	r4, [r5, #0]
 8016c24:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016c26:	802c      	strh	r4, [r5, #0]
 8016c28:	601c      	str	r4, [r3, #0]
 8016c2a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016c2e:	f7ff ffbd 	bl	8016bac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016c32:	f1b9 0f03 	cmp.w	r9, #3
 8016c36:	f340 80c1 	ble.w	8016dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016c3a:	4631      	mov	r1, r6
 8016c3c:	a80c      	add	r0, sp, #48	; 0x30
 8016c3e:	f004 fc05 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c42:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016c46:	9306      	str	r3, [sp, #24]
 8016c48:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016c4c:	9307      	str	r3, [sp, #28]
 8016c4e:	9b03      	ldr	r3, [sp, #12]
 8016c50:	f8d3 a000 	ldr.w	sl, [r3]
 8016c54:	f1ba 0f00 	cmp.w	sl, #0
 8016c58:	f000 80b3 	beq.w	8016dc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016c5c:	4651      	mov	r1, sl
 8016c5e:	a810      	add	r0, sp, #64	; 0x40
 8016c60:	f004 fbf4 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c64:	2002      	movs	r0, #2
 8016c66:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016c6a:	9b01      	ldr	r3, [sp, #4]
 8016c6c:	9a06      	ldr	r2, [sp, #24]
 8016c6e:	fb91 f1f0 	sdiv	r1, r1, r0
 8016c72:	189d      	adds	r5, r3, r2
 8016c74:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016c78:	9a07      	ldr	r2, [sp, #28]
 8016c7a:	4419      	add	r1, r3
 8016c7c:	9b02      	ldr	r3, [sp, #8]
 8016c7e:	4413      	add	r3, r2
 8016c80:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016c84:	1a6d      	subs	r5, r5, r1
 8016c86:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016c8a:	fb92 f2f0 	sdiv	r2, r2, r0
 8016c8e:	440a      	add	r2, r1
 8016c90:	1a9b      	subs	r3, r3, r2
 8016c92:	435b      	muls	r3, r3
 8016c94:	fb05 3505 	mla	r5, r5, r5, r3
 8016c98:	4f4c      	ldr	r7, [pc, #304]	; (8016dcc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8016c9a:	ac10      	add	r4, sp, #64	; 0x40
 8016c9c:	f1b9 0f0c 	cmp.w	r9, #12
 8016ca0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ca4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ca8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016cb4:	f04f 0303 	mov.w	r3, #3
 8016cb8:	bfd8      	it	le
 8016cba:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016cbe:	f04f 0400 	mov.w	r4, #0
 8016cc2:	f8cd 9000 	str.w	r9, [sp]
 8016cc6:	bfcc      	ite	gt
 8016cc8:	4698      	movgt	r8, r3
 8016cca:	fb92 f8f3 	sdivle	r8, r2, r3
 8016cce:	1c63      	adds	r3, r4, #1
 8016cd0:	aa10      	add	r2, sp, #64	; 0x40
 8016cd2:	f004 0401 	and.w	r4, r4, #1
 8016cd6:	f04f 0b00 	mov.w	fp, #0
 8016cda:	9308      	str	r3, [sp, #32]
 8016cdc:	9b00      	ldr	r3, [sp, #0]
 8016cde:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016ce2:	fb93 f3f8 	sdiv	r3, r3, r8
 8016ce6:	3404      	adds	r4, #4
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	9304      	str	r3, [sp, #16]
 8016cec:	9a04      	ldr	r2, [sp, #16]
 8016cee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016cf2:	fb13 f302 	smulbb	r3, r3, r2
 8016cf6:	9a01      	ldr	r2, [sp, #4]
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	1899      	adds	r1, r3, r2
 8016cfc:	9305      	str	r3, [sp, #20]
 8016cfe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016d02:	b209      	sxth	r1, r1
 8016d04:	4299      	cmp	r1, r3
 8016d06:	db4d      	blt.n	8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d08:	8932      	ldrh	r2, [r6, #8]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	b21b      	sxth	r3, r3
 8016d0e:	4299      	cmp	r1, r3
 8016d10:	da48      	bge.n	8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d12:	9b04      	ldr	r3, [sp, #16]
 8016d14:	6827      	ldr	r7, [r4, #0]
 8016d16:	fb17 f703 	smulbb	r7, r7, r3
 8016d1a:	9b02      	ldr	r3, [sp, #8]
 8016d1c:	b2bf      	uxth	r7, r7
 8016d1e:	18fa      	adds	r2, r7, r3
 8016d20:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016d24:	b212      	sxth	r2, r2
 8016d26:	429a      	cmp	r2, r3
 8016d28:	db3c      	blt.n	8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d2a:	8970      	ldrh	r0, [r6, #10]
 8016d2c:	4403      	add	r3, r0
 8016d2e:	b21b      	sxth	r3, r3
 8016d30:	429a      	cmp	r2, r3
 8016d32:	da37      	bge.n	8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d34:	2300      	movs	r3, #0
 8016d36:	4630      	mov	r0, r6
 8016d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d3a:	ab0b      	add	r3, sp, #44	; 0x2c
 8016d3c:	f7ff ff36 	bl	8016bac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016d40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d42:	b37a      	cbz	r2, 8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d44:	4552      	cmp	r2, sl
 8016d46:	d02d      	beq.n	8016da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016d48:	4611      	mov	r1, r2
 8016d4a:	a80e      	add	r0, sp, #56	; 0x38
 8016d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8016d4e:	f004 fb7d 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016d52:	f04f 0e02 	mov.w	lr, #2
 8016d56:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016d5a:	9a06      	ldr	r2, [sp, #24]
 8016d5c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016d60:	9b01      	ldr	r3, [sp, #4]
 8016d62:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8016d66:	4413      	add	r3, r2
 8016d68:	9a07      	ldr	r2, [sp, #28]
 8016d6a:	fb91 f1fe 	sdiv	r1, r1, lr
 8016d6e:	fb9c fcfe 	sdiv	ip, ip, lr
 8016d72:	4401      	add	r1, r0
 8016d74:	1a58      	subs	r0, r3, r1
 8016d76:	9b02      	ldr	r3, [sp, #8]
 8016d78:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016d7c:	4413      	add	r3, r2
 8016d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d80:	448c      	add	ip, r1
 8016d82:	eba3 030c 	sub.w	r3, r3, ip
 8016d86:	435b      	muls	r3, r3
 8016d88:	fb00 3300 	mla	r3, r0, r0, r3
 8016d8c:	42ab      	cmp	r3, r5
 8016d8e:	d208      	bcs.n	8016da2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8016d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d92:	461d      	mov	r5, r3
 8016d94:	9803      	ldr	r0, [sp, #12]
 8016d96:	6001      	str	r1, [r0, #0]
 8016d98:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016d9a:	9805      	ldr	r0, [sp, #20]
 8016d9c:	8008      	strh	r0, [r1, #0]
 8016d9e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016da0:	800f      	strh	r7, [r1, #0]
 8016da2:	4692      	mov	sl, r2
 8016da4:	f10b 0b01 	add.w	fp, fp, #1
 8016da8:	3408      	adds	r4, #8
 8016daa:	f1bb 0f04 	cmp.w	fp, #4
 8016dae:	d19d      	bne.n	8016cec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8016db0:	9b00      	ldr	r3, [sp, #0]
 8016db2:	9c08      	ldr	r4, [sp, #32]
 8016db4:	444b      	add	r3, r9
 8016db6:	4544      	cmp	r4, r8
 8016db8:	9300      	str	r3, [sp, #0]
 8016dba:	d188      	bne.n	8016cce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8016dbc:	b021      	add	sp, #132	; 0x84
 8016dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dc2:	f04f 35ff 	mov.w	r5, #4294967295
 8016dc6:	e767      	b.n	8016c98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016dc8:	200152d4 	.word	0x200152d4
 8016dcc:	0802a550 	.word	0x0802a550

08016dd0 <_ZN8touchgfx4RectaNERKS0_>:
 8016dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dd4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016dd8:	888c      	ldrh	r4, [r1, #4]
 8016dda:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016dde:	443c      	add	r4, r7
 8016de0:	b2a4      	uxth	r4, r4
 8016de2:	fa0f f884 	sxth.w	r8, r4
 8016de6:	45c1      	cmp	r9, r8
 8016de8:	da2f      	bge.n	8016e4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016dea:	8882      	ldrh	r2, [r0, #4]
 8016dec:	444a      	add	r2, r9
 8016dee:	b292      	uxth	r2, r2
 8016df0:	fa0f fe82 	sxth.w	lr, r2
 8016df4:	4577      	cmp	r7, lr
 8016df6:	da28      	bge.n	8016e4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016df8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016dfc:	88cb      	ldrh	r3, [r1, #6]
 8016dfe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016e02:	442b      	add	r3, r5
 8016e04:	b21b      	sxth	r3, r3
 8016e06:	429e      	cmp	r6, r3
 8016e08:	da1f      	bge.n	8016e4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e0a:	88c3      	ldrh	r3, [r0, #6]
 8016e0c:	4433      	add	r3, r6
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	fa0f fc83 	sxth.w	ip, r3
 8016e14:	4565      	cmp	r5, ip
 8016e16:	da18      	bge.n	8016e4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e18:	454f      	cmp	r7, r9
 8016e1a:	bfb8      	it	lt
 8016e1c:	464f      	movlt	r7, r9
 8016e1e:	42b5      	cmp	r5, r6
 8016e20:	bfb8      	it	lt
 8016e22:	4635      	movlt	r5, r6
 8016e24:	45f0      	cmp	r8, lr
 8016e26:	bfd8      	it	le
 8016e28:	4622      	movle	r2, r4
 8016e2a:	1bd2      	subs	r2, r2, r7
 8016e2c:	8082      	strh	r2, [r0, #4]
 8016e2e:	884a      	ldrh	r2, [r1, #2]
 8016e30:	88c9      	ldrh	r1, [r1, #6]
 8016e32:	8007      	strh	r7, [r0, #0]
 8016e34:	440a      	add	r2, r1
 8016e36:	8045      	strh	r5, [r0, #2]
 8016e38:	b292      	uxth	r2, r2
 8016e3a:	b211      	sxth	r1, r2
 8016e3c:	458c      	cmp	ip, r1
 8016e3e:	bfa8      	it	ge
 8016e40:	4613      	movge	r3, r2
 8016e42:	1b5b      	subs	r3, r3, r5
 8016e44:	80c3      	strh	r3, [r0, #6]
 8016e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	8003      	strh	r3, [r0, #0]
 8016e4e:	8043      	strh	r3, [r0, #2]
 8016e50:	8083      	strh	r3, [r0, #4]
 8016e52:	80c3      	strh	r3, [r0, #6]
 8016e54:	e7f7      	b.n	8016e46 <_ZN8touchgfx4RectaNERKS0_+0x76>

08016e56 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016e56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	dd06      	ble.n	8016e6c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016e5e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016e62:	2800      	cmp	r0, #0
 8016e64:	bfcc      	ite	gt
 8016e66:	2000      	movgt	r0, #0
 8016e68:	2001      	movle	r0, #1
 8016e6a:	4770      	bx	lr
 8016e6c:	2001      	movs	r0, #1
 8016e6e:	4770      	bx	lr

08016e70 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e74:	2300      	movs	r3, #0
 8016e76:	4604      	mov	r4, r0
 8016e78:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016e7a:	8003      	strh	r3, [r0, #0]
 8016e7c:	8043      	strh	r3, [r0, #2]
 8016e7e:	8083      	strh	r3, [r0, #4]
 8016e80:	80c3      	strh	r3, [r0, #6]
 8016e82:	2d00      	cmp	r5, #0
 8016e84:	d040      	beq.n	8016f08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016e86:	1d28      	adds	r0, r5, #4
 8016e88:	f7ff ffe5 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e8c:	b988      	cbnz	r0, 8016eb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f7ff ffe1 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e94:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016e98:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016e9c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016ea0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016ea4:	b138      	cbz	r0, 8016eb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016ea6:	8022      	strh	r2, [r4, #0]
 8016ea8:	8063      	strh	r3, [r4, #2]
 8016eaa:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016eae:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016eb2:	69ad      	ldr	r5, [r5, #24]
 8016eb4:	e7e5      	b.n	8016e82 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016eb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016eba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016ebe:	4290      	cmp	r0, r2
 8016ec0:	4607      	mov	r7, r0
 8016ec2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016ec6:	460e      	mov	r6, r1
 8016ec8:	bfa8      	it	ge
 8016eca:	4617      	movge	r7, r2
 8016ecc:	4299      	cmp	r1, r3
 8016ece:	4472      	add	r2, lr
 8016ed0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016ed4:	bfa8      	it	ge
 8016ed6:	461e      	movge	r6, r3
 8016ed8:	4440      	add	r0, r8
 8016eda:	4471      	add	r1, lr
 8016edc:	4463      	add	r3, ip
 8016ede:	b200      	sxth	r0, r0
 8016ee0:	8027      	strh	r7, [r4, #0]
 8016ee2:	b212      	sxth	r2, r2
 8016ee4:	8066      	strh	r6, [r4, #2]
 8016ee6:	b209      	sxth	r1, r1
 8016ee8:	b21b      	sxth	r3, r3
 8016eea:	4290      	cmp	r0, r2
 8016eec:	bfac      	ite	ge
 8016eee:	ebc7 0200 	rsbge	r2, r7, r0
 8016ef2:	ebc7 0202 	rsblt	r2, r7, r2
 8016ef6:	4299      	cmp	r1, r3
 8016ef8:	bfac      	ite	ge
 8016efa:	ebc6 0301 	rsbge	r3, r6, r1
 8016efe:	ebc6 0303 	rsblt	r3, r6, r3
 8016f02:	80a2      	strh	r2, [r4, #4]
 8016f04:	80e3      	strh	r3, [r4, #6]
 8016f06:	e7d4      	b.n	8016eb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016f08:	4620      	mov	r0, r4
 8016f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016f0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f12:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016f16:	b383      	cbz	r3, 8016f7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016f18:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f1a:	b374      	cbz	r4, 8016f7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016f1c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016f20:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016f24:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016f28:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016f2c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016f30:	b303      	cbz	r3, 8016f74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016f32:	4668      	mov	r0, sp
 8016f34:	1d21      	adds	r1, r4, #4
 8016f36:	f8ad 5000 	strh.w	r5, [sp]
 8016f3a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016f3e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016f42:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016f46:	f7ff ff43 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 8016f4a:	4668      	mov	r0, sp
 8016f4c:	f7ff ff83 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f50:	b980      	cbnz	r0, 8016f74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016f52:	f8bd 3000 	ldrh.w	r3, [sp]
 8016f56:	4669      	mov	r1, sp
 8016f58:	88a2      	ldrh	r2, [r4, #4]
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	1a9b      	subs	r3, r3, r2
 8016f5e:	88e2      	ldrh	r2, [r4, #6]
 8016f60:	f8ad 3000 	strh.w	r3, [sp]
 8016f64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016f68:	1a9b      	subs	r3, r3, r2
 8016f6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016f6e:	6823      	ldr	r3, [r4, #0]
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	4798      	blx	r3
 8016f74:	69a4      	ldr	r4, [r4, #24]
 8016f76:	2c00      	cmp	r4, #0
 8016f78:	d1d8      	bne.n	8016f2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016f7a:	b002      	add	sp, #8
 8016f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f82:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016f86:	460d      	mov	r5, r1
 8016f88:	4616      	mov	r6, r2
 8016f8a:	b323      	cbz	r3, 8016fd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016f8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f8e:	b314      	cbz	r4, 8016fd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016f90:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016f94:	b1eb      	cbz	r3, 8016fd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016f96:	6828      	ldr	r0, [r5, #0]
 8016f98:	466b      	mov	r3, sp
 8016f9a:	6869      	ldr	r1, [r5, #4]
 8016f9c:	c303      	stmia	r3!, {r0, r1}
 8016f9e:	4668      	mov	r0, sp
 8016fa0:	1d21      	adds	r1, r4, #4
 8016fa2:	f7ff ff15 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 8016fa6:	4668      	mov	r0, sp
 8016fa8:	f7ff ff55 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fac:	b988      	cbnz	r0, 8016fd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016fae:	f8bd 3000 	ldrh.w	r3, [sp]
 8016fb2:	4669      	mov	r1, sp
 8016fb4:	88a2      	ldrh	r2, [r4, #4]
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	1a9b      	subs	r3, r3, r2
 8016fba:	88e2      	ldrh	r2, [r4, #6]
 8016fbc:	f8ad 3000 	strh.w	r3, [sp]
 8016fc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016fc4:	1a9b      	subs	r3, r3, r2
 8016fc6:	4632      	mov	r2, r6
 8016fc8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016fcc:	6823      	ldr	r3, [r4, #0]
 8016fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fd0:	4798      	blx	r3
 8016fd2:	69a4      	ldr	r4, [r4, #24]
 8016fd4:	e7db      	b.n	8016f8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016fd6:	b002      	add	sp, #8
 8016fd8:	bd70      	pop	{r4, r5, r6, pc}

08016fda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016fda:	6803      	ldr	r3, [r0, #0]
 8016fdc:	b513      	push	{r0, r1, r4, lr}
 8016fde:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	e9cd 3300 	strd	r3, r3, [sp]
 8016fe8:	466b      	mov	r3, sp
 8016fea:	47a0      	blx	r4
 8016fec:	b002      	add	sp, #8
 8016fee:	bd10      	pop	{r4, pc}

08016ff0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016ff6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016ffa:	4770      	bx	lr

08016ffc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017002:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017006:	4770      	bx	lr

08017008 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017008:	6843      	ldr	r3, [r0, #4]
 801700a:	2201      	movs	r2, #1
 801700c:	725a      	strb	r2, [r3, #9]
 801700e:	6840      	ldr	r0, [r0, #4]
 8017010:	6803      	ldr	r3, [r0, #0]
 8017012:	691b      	ldr	r3, [r3, #16]
 8017014:	4718      	bx	r3

08017016 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017016:	6840      	ldr	r0, [r0, #4]
 8017018:	6803      	ldr	r3, [r0, #0]
 801701a:	689b      	ldr	r3, [r3, #8]
 801701c:	4718      	bx	r3

0801701e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801701e:	b530      	push	{r4, r5, lr}
 8017020:	b08b      	sub	sp, #44	; 0x2c
 8017022:	6804      	ldr	r4, [r0, #0]
 8017024:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017028:	9509      	str	r5, [sp, #36]	; 0x24
 801702a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801702e:	9508      	str	r5, [sp, #32]
 8017030:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017034:	9507      	str	r5, [sp, #28]
 8017036:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801703a:	9506      	str	r5, [sp, #24]
 801703c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017040:	9505      	str	r5, [sp, #20]
 8017042:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017046:	9504      	str	r5, [sp, #16]
 8017048:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801704c:	9503      	str	r5, [sp, #12]
 801704e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017052:	9502      	str	r5, [sp, #8]
 8017054:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017058:	e9cd 3500 	strd	r3, r5, [sp]
 801705c:	4613      	mov	r3, r2
 801705e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017060:	2200      	movs	r2, #0
 8017062:	47a0      	blx	r4
 8017064:	b00b      	add	sp, #44	; 0x2c
 8017066:	bd30      	pop	{r4, r5, pc}

08017068 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017068:	4b04      	ldr	r3, [pc, #16]	; (801707c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	b123      	cbz	r3, 8017078 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801706e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017072:	f080 0001 	eor.w	r0, r0, #1
 8017076:	4770      	bx	lr
 8017078:	2001      	movs	r0, #1
 801707a:	4770      	bx	lr
 801707c:	200152d2 	.word	0x200152d2

08017080 <_ZN8touchgfx3HAL8endFrameEv>:
 8017080:	b510      	push	{r4, lr}
 8017082:	4604      	mov	r4, r0
 8017084:	6840      	ldr	r0, [r0, #4]
 8017086:	6803      	ldr	r3, [r0, #0]
 8017088:	689b      	ldr	r3, [r3, #8]
 801708a:	4798      	blx	r3
 801708c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017090:	b113      	cbz	r3, 8017098 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017092:	2301      	movs	r3, #1
 8017094:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017098:	bd10      	pop	{r4, pc}

0801709a <_ZN8touchgfx3HAL10initializeEv>:
 801709a:	b510      	push	{r4, lr}
 801709c:	4604      	mov	r4, r0
 801709e:	f7ea fedf 	bl	8001e60 <_ZN8touchgfx10OSWrappers10initializeEv>
 80170a2:	6860      	ldr	r0, [r4, #4]
 80170a4:	6803      	ldr	r3, [r0, #0]
 80170a6:	68db      	ldr	r3, [r3, #12]
 80170a8:	4798      	blx	r3
 80170aa:	68e0      	ldr	r0, [r4, #12]
 80170ac:	6803      	ldr	r3, [r0, #0]
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	4798      	blx	r3
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	4620      	mov	r0, r4
 80170b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170bc:	4718      	bx	r3

080170be <_ZN8touchgfx3HAL9taskEntryEv>:
 80170be:	b508      	push	{r3, lr}
 80170c0:	6803      	ldr	r3, [r0, #0]
 80170c2:	4604      	mov	r4, r0
 80170c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80170c8:	4798      	blx	r3
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80170ce:	4620      	mov	r0, r4
 80170d0:	4798      	blx	r3
 80170d2:	f7ea ff11 	bl	8001ef8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80170d6:	6823      	ldr	r3, [r4, #0]
 80170d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170da:	e7f8      	b.n	80170ce <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080170dc <_ZN8touchgfx3HAL4tickEv>:
 80170dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80170de:	6803      	ldr	r3, [r0, #0]
 80170e0:	4604      	mov	r4, r0
 80170e2:	4d5b      	ldr	r5, [pc, #364]	; (8017250 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80170e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80170e8:	4798      	blx	r3
 80170ea:	2800      	cmp	r0, #0
 80170ec:	f000 8095 	beq.w	801721a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80170f0:	2001      	movs	r0, #1
 80170f2:	2600      	movs	r6, #0
 80170f4:	f7ea fd2c 	bl	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80170f8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80170fc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017100:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017104:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017108:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801710c:	b133      	cbz	r3, 801711c <_ZN8touchgfx3HAL4tickEv+0x40>
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	4620      	mov	r0, r4
 8017112:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017116:	4798      	blx	r3
 8017118:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801711c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017120:	2601      	movs	r6, #1
 8017122:	6862      	ldr	r2, [r4, #4]
 8017124:	f083 0301 	eor.w	r3, r3, #1
 8017128:	702e      	strb	r6, [r5, #0]
 801712a:	7253      	strb	r3, [r2, #9]
 801712c:	f003 f95a 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 8017130:	6803      	ldr	r3, [r0, #0]
 8017132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017134:	4798      	blx	r3
 8017136:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801713a:	b90b      	cbnz	r3, 8017140 <_ZN8touchgfx3HAL4tickEv+0x64>
 801713c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017140:	f003 f950 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 8017144:	6803      	ldr	r3, [r0, #0]
 8017146:	695b      	ldr	r3, [r3, #20]
 8017148:	4798      	blx	r3
 801714a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801714c:	6803      	ldr	r3, [r0, #0]
 801714e:	691b      	ldr	r3, [r3, #16]
 8017150:	4798      	blx	r3
 8017152:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017156:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801715a:	3b01      	subs	r3, #1
 801715c:	b2db      	uxtb	r3, r3
 801715e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017162:	b10a      	cbz	r2, 8017168 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017164:	2b00      	cmp	r3, #0
 8017166:	d1eb      	bne.n	8017140 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017168:	4a3a      	ldr	r2, [pc, #232]	; (8017254 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801716a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801716e:	7813      	ldrb	r3, [r2, #0]
 8017170:	3301      	adds	r3, #1
 8017172:	b25b      	sxtb	r3, r3
 8017174:	4299      	cmp	r1, r3
 8017176:	7013      	strb	r3, [r2, #0]
 8017178:	dc10      	bgt.n	801719c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801717a:	2300      	movs	r3, #0
 801717c:	68e0      	ldr	r0, [r4, #12]
 801717e:	a902      	add	r1, sp, #8
 8017180:	7013      	strb	r3, [r2, #0]
 8017182:	aa03      	add	r2, sp, #12
 8017184:	6803      	ldr	r3, [r0, #0]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	4798      	blx	r3
 801718a:	6823      	ldr	r3, [r4, #0]
 801718c:	2800      	cmp	r0, #0
 801718e:	d050      	beq.n	8017232 <_ZN8touchgfx3HAL4tickEv+0x156>
 8017190:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017194:	4620      	mov	r0, r4
 8017196:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801719a:	4798      	blx	r3
 801719c:	2300      	movs	r3, #0
 801719e:	6960      	ldr	r0, [r4, #20]
 80171a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80171a4:	b158      	cbz	r0, 80171be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80171a6:	6803      	ldr	r3, [r0, #0]
 80171a8:	f10d 0107 	add.w	r1, sp, #7
 80171ac:	68db      	ldr	r3, [r3, #12]
 80171ae:	4798      	blx	r3
 80171b0:	b128      	cbz	r0, 80171be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80171b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80171b8:	6803      	ldr	r3, [r0, #0]
 80171ba:	68db      	ldr	r3, [r3, #12]
 80171bc:	4798      	blx	r3
 80171be:	f104 001c 	add.w	r0, r4, #28
 80171c2:	f011 fdbb 	bl	8028d3c <_ZN8touchgfx8Gestures4tickEv>
 80171c6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80171ca:	b30b      	cbz	r3, 8017210 <_ZN8touchgfx3HAL4tickEv+0x134>
 80171cc:	6920      	ldr	r0, [r4, #16]
 80171ce:	6803      	ldr	r3, [r0, #0]
 80171d0:	691b      	ldr	r3, [r3, #16]
 80171d2:	4798      	blx	r3
 80171d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80171d6:	4606      	mov	r6, r0
 80171d8:	b903      	cbnz	r3, 80171dc <_ZN8touchgfx3HAL4tickEv+0x100>
 80171da:	6720      	str	r0, [r4, #112]	; 0x70
 80171dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80171de:	4a1e      	ldr	r2, [pc, #120]	; (8017258 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80171e0:	1af3      	subs	r3, r6, r3
 80171e2:	4293      	cmp	r3, r2
 80171e4:	d914      	bls.n	8017210 <_ZN8touchgfx3HAL4tickEv+0x134>
 80171e6:	6920      	ldr	r0, [r4, #16]
 80171e8:	6803      	ldr	r3, [r0, #0]
 80171ea:	699b      	ldr	r3, [r3, #24]
 80171ec:	4798      	blx	r3
 80171ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80171f0:	2264      	movs	r2, #100	; 0x64
 80171f2:	1af3      	subs	r3, r6, r3
 80171f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80171f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80171fc:	2800      	cmp	r0, #0
 80171fe:	dc1d      	bgt.n	801723c <_ZN8touchgfx3HAL4tickEv+0x160>
 8017200:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017204:	6920      	ldr	r0, [r4, #16]
 8017206:	2100      	movs	r1, #0
 8017208:	6803      	ldr	r3, [r0, #0]
 801720a:	69db      	ldr	r3, [r3, #28]
 801720c:	4798      	blx	r3
 801720e:	6726      	str	r6, [r4, #112]	; 0x70
 8017210:	f003 f8e8 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 8017214:	6803      	ldr	r3, [r0, #0]
 8017216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017218:	4798      	blx	r3
 801721a:	6823      	ldr	r3, [r4, #0]
 801721c:	4620      	mov	r0, r4
 801721e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017222:	4798      	blx	r3
 8017224:	2001      	movs	r0, #1
 8017226:	f7ea fcc3 	bl	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801722a:	2300      	movs	r3, #0
 801722c:	702b      	strb	r3, [r5, #0]
 801722e:	b004      	add	sp, #16
 8017230:	bd70      	pop	{r4, r5, r6, pc}
 8017232:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017236:	4620      	mov	r0, r4
 8017238:	4798      	blx	r3
 801723a:	e7af      	b.n	801719c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801723c:	2863      	cmp	r0, #99	; 0x63
 801723e:	bfcb      	itete	gt
 8017240:	2300      	movgt	r3, #0
 8017242:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017246:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801724a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801724e:	e7d9      	b.n	8017204 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017250:	200152d8 	.word	0x200152d8
 8017254:	200152d9 	.word	0x200152d9
 8017258:	05f5e100 	.word	0x05f5e100

0801725c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801725c:	f7ea be30 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017260 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017260:	6581      	str	r1, [r0, #88]	; 0x58
 8017262:	301c      	adds	r0, #28
 8017264:	f011 bd68 	b.w	8028d38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017268 <_ZN8touchgfx3HAL5touchEll>:
 8017268:	b530      	push	{r4, r5, lr}
 801726a:	b087      	sub	sp, #28
 801726c:	4604      	mov	r4, r0
 801726e:	a804      	add	r0, sp, #16
 8017270:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017274:	f002 fe32 	bl	8019edc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	a906      	add	r1, sp, #24
 801727c:	a803      	add	r0, sp, #12
 801727e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017282:	9b05      	ldr	r3, [sp, #20]
 8017284:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017288:	f002 fe7a 	bl	8019f80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801728c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017290:	f104 001c 	add.w	r0, r4, #28
 8017294:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017298:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801729c:	b189      	cbz	r1, 80172c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801729e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	4613      	mov	r3, r2
 80172a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80172aa:	462a      	mov	r2, r5
 80172ac:	f011 fd54 	bl	8028d58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80172b0:	b128      	cbz	r0, 80172be <_ZN8touchgfx3HAL5touchEll+0x56>
 80172b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80172b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80172b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80172bc:	6623      	str	r3, [r4, #96]	; 0x60
 80172be:	b007      	add	sp, #28
 80172c0:	bd30      	pop	{r4, r5, pc}
 80172c2:	f011 fd89 	bl	8028dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80172c6:	2301      	movs	r3, #1
 80172c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80172cc:	e7f1      	b.n	80172b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080172ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80172ce:	b510      	push	{r4, lr}
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d046      	beq.n	8017362 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80172d4:	ea81 0002 	eor.w	r0, r1, r2
 80172d8:	07c4      	lsls	r4, r0, #31
 80172da:	d508      	bpl.n	80172ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80172dc:	440b      	add	r3, r1
 80172de:	3a01      	subs	r2, #1
 80172e0:	428b      	cmp	r3, r1
 80172e2:	d93e      	bls.n	8017362 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80172e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80172e8:	f801 0b01 	strb.w	r0, [r1], #1
 80172ec:	e7f8      	b.n	80172e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80172ee:	07d0      	lsls	r0, r2, #31
 80172f0:	bf42      	ittt	mi
 80172f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80172f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80172fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d911      	bls.n	8017326 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017302:	ea81 0402 	eor.w	r4, r1, r2
 8017306:	4610      	mov	r0, r2
 8017308:	07a4      	lsls	r4, r4, #30
 801730a:	d022      	beq.n	8017352 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801730c:	f023 0401 	bic.w	r4, r3, #1
 8017310:	440c      	add	r4, r1
 8017312:	428c      	cmp	r4, r1
 8017314:	4602      	mov	r2, r0
 8017316:	d904      	bls.n	8017322 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017318:	8812      	ldrh	r2, [r2, #0]
 801731a:	3002      	adds	r0, #2
 801731c:	f821 2b02 	strh.w	r2, [r1], #2
 8017320:	e7f7      	b.n	8017312 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017322:	f003 0301 	and.w	r3, r3, #1
 8017326:	f023 0003 	bic.w	r0, r3, #3
 801732a:	4408      	add	r0, r1
 801732c:	4288      	cmp	r0, r1
 801732e:	4614      	mov	r4, r2
 8017330:	d904      	bls.n	801733c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017332:	6824      	ldr	r4, [r4, #0]
 8017334:	3204      	adds	r2, #4
 8017336:	f841 4b04 	str.w	r4, [r1], #4
 801733a:	e7f7      	b.n	801732c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801733c:	f003 0303 	and.w	r3, r3, #3
 8017340:	3a01      	subs	r2, #1
 8017342:	440b      	add	r3, r1
 8017344:	428b      	cmp	r3, r1
 8017346:	d90c      	bls.n	8017362 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017348:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801734c:	f801 0b01 	strb.w	r0, [r1], #1
 8017350:	e7f8      	b.n	8017344 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017352:	0790      	lsls	r0, r2, #30
 8017354:	d0e7      	beq.n	8017326 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017356:	f832 0b02 	ldrh.w	r0, [r2], #2
 801735a:	3b02      	subs	r3, #2
 801735c:	f821 0b02 	strh.w	r0, [r1], #2
 8017360:	e7e1      	b.n	8017326 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017362:	2001      	movs	r0, #1
 8017364:	bd10      	pop	{r4, pc}

08017366 <_ZN8touchgfx3HAL7noTouchEv>:
 8017366:	b510      	push	{r4, lr}
 8017368:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801736c:	4604      	mov	r4, r0
 801736e:	b153      	cbz	r3, 8017386 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017370:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017374:	2101      	movs	r1, #1
 8017376:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801737a:	301c      	adds	r0, #28
 801737c:	f011 fd2c 	bl	8028dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017380:	2300      	movs	r3, #0
 8017382:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017386:	bd10      	pop	{r4, pc}

08017388 <_ZN8touchgfx3HAL3lcdEv>:
 8017388:	4b04      	ldr	r3, [pc, #16]	; (801739c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017390:	b10a      	cbz	r2, 8017396 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8017392:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017394:	b900      	cbnz	r0, 8017398 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8017396:	6898      	ldr	r0, [r3, #8]
 8017398:	4770      	bx	lr
 801739a:	bf00      	nop
 801739c:	200152d4 	.word	0x200152d4

080173a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80173a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173a4:	b085      	sub	sp, #20
 80173a6:	4604      	mov	r4, r0
 80173a8:	2000      	movs	r0, #0
 80173aa:	4699      	mov	r9, r3
 80173ac:	ad04      	add	r5, sp, #16
 80173ae:	460f      	mov	r7, r1
 80173b0:	4690      	mov	r8, r2
 80173b2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80173b6:	69a0      	ldr	r0, [r4, #24]
 80173b8:	6806      	ldr	r6, [r0, #0]
 80173ba:	9501      	str	r5, [sp, #4]
 80173bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80173c0:	9500      	str	r5, [sp, #0]
 80173c2:	6835      	ldr	r5, [r6, #0]
 80173c4:	47a8      	blx	r5
 80173c6:	4d10      	ldr	r5, [pc, #64]	; (8017408 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80173c8:	4606      	mov	r6, r0
 80173ca:	f8a5 9000 	strh.w	r9, [r5]
 80173ce:	f7ff ffdb 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 80173d2:	6803      	ldr	r3, [r0, #0]
 80173d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d6:	4798      	blx	r3
 80173d8:	b128      	cbz	r0, 80173e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80173da:	2801      	cmp	r0, #1
 80173dc:	d00b      	beq.n	80173f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80173de:	4630      	mov	r0, r6
 80173e0:	b005      	add	sp, #20
 80173e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173e6:	882b      	ldrh	r3, [r5, #0]
 80173e8:	fb08 7203 	mla	r2, r8, r3, r7
 80173ec:	9b03      	ldr	r3, [sp, #12]
 80173ee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80173f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80173f4:	e7f3      	b.n	80173de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80173f6:	882a      	ldrh	r2, [r5, #0]
 80173f8:	9b03      	ldr	r3, [sp, #12]
 80173fa:	fb08 7202 	mla	r2, r8, r2, r7
 80173fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017402:	1a9a      	subs	r2, r3, r2
 8017404:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017406:	e7ea      	b.n	80173de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017408:	200152ce 	.word	0x200152ce

0801740c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801740c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801740e:	b08b      	sub	sp, #44	; 0x2c
 8017410:	4617      	mov	r7, r2
 8017412:	4604      	mov	r4, r0
 8017414:	460e      	mov	r6, r1
 8017416:	461d      	mov	r5, r3
 8017418:	f7ff ffb6 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 801741c:	6803      	ldr	r3, [r0, #0]
 801741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017420:	4798      	blx	r3
 8017422:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017426:	9007      	str	r0, [sp, #28]
 8017428:	4631      	mov	r1, r6
 801742a:	6822      	ldr	r2, [r4, #0]
 801742c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017430:	4b0c      	ldr	r3, [pc, #48]	; (8017464 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017432:	4620      	mov	r0, r4
 8017434:	881b      	ldrh	r3, [r3, #0]
 8017436:	9306      	str	r3, [sp, #24]
 8017438:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801743c:	9305      	str	r3, [sp, #20]
 801743e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017442:	9304      	str	r3, [sp, #16]
 8017444:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017448:	9303      	str	r3, [sp, #12]
 801744a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801744e:	9302      	str	r3, [sp, #8]
 8017450:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017454:	e9cd 5300 	strd	r5, r3, [sp]
 8017458:	463b      	mov	r3, r7
 801745a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801745c:	2200      	movs	r2, #0
 801745e:	47a8      	blx	r5
 8017460:	b00b      	add	sp, #44	; 0x2c
 8017462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017464:	200152ce 	.word	0x200152ce

08017468 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801746c:	4698      	mov	r8, r3
 801746e:	6803      	ldr	r3, [r0, #0]
 8017470:	b08b      	sub	sp, #44	; 0x2c
 8017472:	4617      	mov	r7, r2
 8017474:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017476:	460e      	mov	r6, r1
 8017478:	4b13      	ldr	r3, [pc, #76]	; (80174c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801747a:	4604      	mov	r4, r0
 801747c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017480:	f7ff ff82 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 8017484:	6803      	ldr	r3, [r0, #0]
 8017486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017488:	4798      	blx	r3
 801748a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801748e:	2200      	movs	r2, #0
 8017490:	4631      	mov	r1, r6
 8017492:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017496:	2302      	movs	r3, #2
 8017498:	4620      	mov	r0, r4
 801749a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801749e:	2301      	movs	r3, #1
 80174a0:	9305      	str	r3, [sp, #20]
 80174a2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80174a6:	9304      	str	r3, [sp, #16]
 80174a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80174ac:	9303      	str	r3, [sp, #12]
 80174ae:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80174b2:	9302      	str	r3, [sp, #8]
 80174b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80174b8:	e9cd 8300 	strd	r8, r3, [sp]
 80174bc:	463b      	mov	r3, r7
 80174be:	47a8      	blx	r5
 80174c0:	b00b      	add	sp, #44	; 0x2c
 80174c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174c6:	bf00      	nop
 80174c8:	200152ce 	.word	0x200152ce

080174cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80174cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174d0:	4698      	mov	r8, r3
 80174d2:	6803      	ldr	r3, [r0, #0]
 80174d4:	b087      	sub	sp, #28
 80174d6:	460e      	mov	r6, r1
 80174d8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80174da:	4617      	mov	r7, r2
 80174dc:	4b0f      	ldr	r3, [pc, #60]	; (801751c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80174de:	4604      	mov	r4, r0
 80174e0:	f8b3 9000 	ldrh.w	r9, [r3]
 80174e4:	f7ff ff50 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 80174e8:	6803      	ldr	r3, [r0, #0]
 80174ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174ec:	4798      	blx	r3
 80174ee:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80174f2:	463a      	mov	r2, r7
 80174f4:	4631      	mov	r1, r6
 80174f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80174fa:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80174fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017502:	4620      	mov	r0, r4
 8017504:	9302      	str	r3, [sp, #8]
 8017506:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801750a:	9301      	str	r3, [sp, #4]
 801750c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017510:	9300      	str	r3, [sp, #0]
 8017512:	4643      	mov	r3, r8
 8017514:	47a8      	blx	r5
 8017516:	b007      	add	sp, #28
 8017518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801751c:	200152ce 	.word	0x200152ce

08017520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017524:	4604      	mov	r4, r0
 8017526:	b08f      	sub	sp, #60	; 0x3c
 8017528:	4610      	mov	r0, r2
 801752a:	460d      	mov	r5, r1
 801752c:	4691      	mov	r9, r2
 801752e:	461e      	mov	r6, r3
 8017530:	f005 fe42 	bl	801d1b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017534:	2800      	cmp	r0, #0
 8017536:	f000 809d 	beq.w	8017674 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801753a:	6823      	ldr	r3, [r4, #0]
 801753c:	4620      	mov	r0, r4
 801753e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80176d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017542:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017548:	4798      	blx	r3
 801754a:	6823      	ldr	r3, [r4, #0]
 801754c:	4620      	mov	r0, r4
 801754e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80176dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017554:	4798      	blx	r3
 8017556:	f8bb 3000 	ldrh.w	r3, [fp]
 801755a:	4f5c      	ldr	r7, [pc, #368]	; (80176cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017562:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017566:	4640      	mov	r0, r8
 8017568:	9302      	str	r3, [sp, #8]
 801756a:	883b      	ldrh	r3, [r7, #0]
 801756c:	9303      	str	r3, [sp, #12]
 801756e:	4b58      	ldr	r3, [pc, #352]	; (80176d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017570:	881a      	ldrh	r2, [r3, #0]
 8017572:	9305      	str	r3, [sp, #20]
 8017574:	9204      	str	r2, [sp, #16]
 8017576:	f005 feb3 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801757a:	8038      	strh	r0, [r7, #0]
 801757c:	4640      	mov	r0, r8
 801757e:	f005 fee3 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017582:	9b05      	ldr	r3, [sp, #20]
 8017584:	b280      	uxth	r0, r0
 8017586:	8018      	strh	r0, [r3, #0]
 8017588:	4b52      	ldr	r3, [pc, #328]	; (80176d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d174      	bne.n	801767a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017590:	883b      	ldrh	r3, [r7, #0]
 8017592:	f8aa 0000 	strh.w	r0, [sl]
 8017596:	f8ab 3000 	strh.w	r3, [fp]
 801759a:	4648      	mov	r0, r9
 801759c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80175a0:	f005 fe0a 	bl	801d1b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80175a4:	2200      	movs	r2, #0
 80175a6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80175aa:	4611      	mov	r1, r2
 80175ac:	4628      	mov	r0, r5
 80175ae:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80175b2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80175b6:	f7eb fec2 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 80175ba:	2301      	movs	r3, #1
 80175bc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80175c0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80175c4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	dd5c      	ble.n	8017686 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80175cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	dd58      	ble.n	8017686 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80175d4:	462a      	mov	r2, r5
 80175d6:	ab0a      	add	r3, sp, #40	; 0x28
 80175d8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80175dc:	6851      	ldr	r1, [r2, #4]
 80175de:	c303      	stmia	r3!, {r0, r1}
 80175e0:	4631      	mov	r1, r6
 80175e2:	a80a      	add	r0, sp, #40	; 0x28
 80175e4:	f7ff fbf4 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80175e8:	4b38      	ldr	r3, [pc, #224]	; (80176cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80175ea:	2100      	movs	r1, #0
 80175ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80175f0:	4b37      	ldr	r3, [pc, #220]	; (80176d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80175f2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80175f6:	aa0a      	add	r2, sp, #40	; 0x28
 80175f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175fc:	910c      	str	r1, [sp, #48]	; 0x30
 80175fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017602:	ab08      	add	r3, sp, #32
 8017604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017608:	e883 0003 	stmia.w	r3, {r0, r1}
 801760c:	4618      	mov	r0, r3
 801760e:	a90c      	add	r1, sp, #48	; 0x30
 8017610:	f7ff fbde 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 8017614:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017616:	2b00      	cmp	r3, #0
 8017618:	d13c      	bne.n	8017694 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801761a:	2000      	movs	r0, #0
 801761c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017620:	2600      	movs	r6, #0
 8017622:	696b      	ldr	r3, [r5, #20]
 8017624:	a908      	add	r1, sp, #32
 8017626:	682a      	ldr	r2, [r5, #0]
 8017628:	4628      	mov	r0, r5
 801762a:	9305      	str	r3, [sp, #20]
 801762c:	616e      	str	r6, [r5, #20]
 801762e:	6892      	ldr	r2, [r2, #8]
 8017630:	4790      	blx	r2
 8017632:	9b05      	ldr	r3, [sp, #20]
 8017634:	4652      	mov	r2, sl
 8017636:	4649      	mov	r1, r9
 8017638:	616b      	str	r3, [r5, #20]
 801763a:	4628      	mov	r0, r5
 801763c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017640:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017644:	f7eb fe7b 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 8017648:	9a01      	ldr	r2, [sp, #4]
 801764a:	4b23      	ldr	r3, [pc, #140]	; (80176d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801764c:	4620      	mov	r0, r4
 801764e:	801a      	strh	r2, [r3, #0]
 8017650:	9a02      	ldr	r2, [sp, #8]
 8017652:	4b22      	ldr	r3, [pc, #136]	; (80176dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017654:	801a      	strh	r2, [r3, #0]
 8017656:	9a03      	ldr	r2, [sp, #12]
 8017658:	4b1c      	ldr	r3, [pc, #112]	; (80176cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801765a:	801a      	strh	r2, [r3, #0]
 801765c:	4b1c      	ldr	r3, [pc, #112]	; (80176d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801765e:	9a04      	ldr	r2, [sp, #16]
 8017660:	801a      	strh	r2, [r3, #0]
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801766a:	4798      	blx	r3
 801766c:	6823      	ldr	r3, [r4, #0]
 801766e:	4620      	mov	r0, r4
 8017670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017672:	4798      	blx	r3
 8017674:	b00f      	add	sp, #60	; 0x3c
 8017676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767a:	883b      	ldrh	r3, [r7, #0]
 801767c:	f8ab 0000 	strh.w	r0, [fp]
 8017680:	f8aa 3000 	strh.w	r3, [sl]
 8017684:	e789      	b.n	801759a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017686:	462a      	mov	r2, r5
 8017688:	ab0a      	add	r3, sp, #40	; 0x28
 801768a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801768e:	6851      	ldr	r1, [r2, #4]
 8017690:	c303      	stmia	r3!, {r0, r1}
 8017692:	e7a9      	b.n	80175e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017694:	a807      	add	r0, sp, #28
 8017696:	f005 ff93 	bl	801d5c0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801769a:	4606      	mov	r6, r0
 801769c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801769e:	6803      	ldr	r3, [r0, #0]
 80176a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176a2:	4798      	blx	r3
 80176a4:	4286      	cmp	r6, r0
 80176a6:	d1b8      	bne.n	801761a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80176a8:	f7ff fe6e 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 80176ac:	6803      	ldr	r3, [r0, #0]
 80176ae:	4606      	mov	r6, r0
 80176b0:	a807      	add	r0, sp, #28
 80176b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176b4:	9305      	str	r3, [sp, #20]
 80176b6:	f005 ff83 	bl	801d5c0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80176ba:	9b05      	ldr	r3, [sp, #20]
 80176bc:	4601      	mov	r1, r0
 80176be:	4630      	mov	r0, r6
 80176c0:	4798      	blx	r3
 80176c2:	f080 0001 	eor.w	r0, r0, #1
 80176c6:	b2c0      	uxtb	r0, r0
 80176c8:	e7a8      	b.n	801761c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80176ca:	bf00      	nop
 80176cc:	200152c8 	.word	0x200152c8
 80176d0:	200152ca 	.word	0x200152ca
 80176d4:	200152cc 	.word	0x200152cc
 80176d8:	200152ce 	.word	0x200152ce
 80176dc:	200152d0 	.word	0x200152d0

080176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80176e0:	4b07      	ldr	r3, [pc, #28]	; (8017700 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80176e2:	b510      	push	{r4, lr}
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	4604      	mov	r4, r0
 80176e8:	b13b      	cbz	r3, 80176fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80176ea:	6803      	ldr	r3, [r0, #0]
 80176ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ee:	4798      	blx	r3
 80176f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80176f2:	4283      	cmp	r3, r0
 80176f4:	d101      	bne.n	80176fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80176f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80176f8:	bd10      	pop	{r4, pc}
 80176fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80176fc:	e7fc      	b.n	80176f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80176fe:	bf00      	nop
 8017700:	200152d2 	.word	0x200152d2

08017704 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	461d      	mov	r5, r3
 801770a:	b08a      	sub	sp, #40	; 0x28
 801770c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017710:	4690      	mov	r8, r2
 8017712:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017716:	2400      	movs	r4, #0
 8017718:	4607      	mov	r7, r0
 801771a:	fb06 8505 	mla	r5, r6, r5, r8
 801771e:	9404      	str	r4, [sp, #16]
 8017720:	f88d 4020 	strb.w	r4, [sp, #32]
 8017724:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017728:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801772c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017730:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017734:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017738:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801773c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017740:	f7ff ffce 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017744:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801774e:	a901      	add	r1, sp, #4
 8017750:	9505      	str	r5, [sp, #20]
 8017752:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017756:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801775a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801775e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017762:	6803      	ldr	r3, [r0, #0]
 8017764:	685b      	ldr	r3, [r3, #4]
 8017766:	4798      	blx	r3
 8017768:	b00a      	add	sp, #40	; 0x28
 801776a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801776e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801776e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017772:	b08b      	sub	sp, #44	; 0x2c
 8017774:	2400      	movs	r4, #0
 8017776:	4691      	mov	r9, r2
 8017778:	461d      	mov	r5, r3
 801777a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801777e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017782:	4688      	mov	r8, r1
 8017784:	4607      	mov	r7, r0
 8017786:	9404      	str	r4, [sp, #16]
 8017788:	fb06 9505 	mla	r5, r6, r5, r9
 801778c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017790:	f7ff ffa6 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017794:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017798:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80177a2:	a901      	add	r1, sp, #4
 80177a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80177a8:	9505      	str	r5, [sp, #20]
 80177aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80177ae:	f8ad 401c 	strh.w	r4, [sp, #28]
 80177b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80177b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80177ba:	f8ad 4020 	strh.w	r4, [sp, #32]
 80177be:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80177c2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80177c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80177ca:	6803      	ldr	r3, [r0, #0]
 80177cc:	685b      	ldr	r3, [r3, #4]
 80177ce:	4798      	blx	r3
 80177d0:	b00b      	add	sp, #44	; 0x2c
 80177d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080177d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80177d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177dc:	b08a      	sub	sp, #40	; 0x28
 80177de:	4698      	mov	r8, r3
 80177e0:	2300      	movs	r3, #0
 80177e2:	4606      	mov	r6, r0
 80177e4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80177e8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80177ec:	2d0b      	cmp	r5, #11
 80177ee:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80177f2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80177f6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80177fa:	9304      	str	r3, [sp, #16]
 80177fc:	d137      	bne.n	801786e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80177fe:	2380      	movs	r3, #128	; 0x80
 8017800:	f88d 0020 	strb.w	r0, [sp, #32]
 8017804:	4630      	mov	r0, r6
 8017806:	9203      	str	r2, [sp, #12]
 8017808:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801780c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017810:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017814:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017818:	f8ad 301a 	strh.w	r3, [sp, #26]
 801781c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017820:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017824:	f7ff ff5c 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017828:	2c0b      	cmp	r4, #11
 801782a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801782e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017832:	bf94      	ite	ls
 8017834:	4b19      	ldrls	r3, [pc, #100]	; (801789c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017836:	2100      	movhi	r1, #0
 8017838:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801783c:	bf98      	it	ls
 801783e:	5d19      	ldrbls	r1, [r3, r4]
 8017840:	fb02 8307 	mla	r3, r2, r7, r8
 8017844:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017848:	10c9      	asrs	r1, r1, #3
 801784a:	fb01 0003 	mla	r0, r1, r3, r0
 801784e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017852:	a901      	add	r1, sp, #4
 8017854:	9005      	str	r0, [sp, #20]
 8017856:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801785a:	2300      	movs	r3, #0
 801785c:	6870      	ldr	r0, [r6, #4]
 801785e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017862:	6803      	ldr	r3, [r0, #0]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	4798      	blx	r3
 8017868:	b00a      	add	sp, #40	; 0x28
 801786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786e:	2d02      	cmp	r5, #2
 8017870:	d109      	bne.n	8017886 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8017872:	28ff      	cmp	r0, #255	; 0xff
 8017874:	d105      	bne.n	8017882 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8017876:	f1bc 0f00 	cmp.w	ip, #0
 801787a:	bf14      	ite	ne
 801787c:	2340      	movne	r3, #64	; 0x40
 801787e:	2320      	moveq	r3, #32
 8017880:	e7be      	b.n	8017800 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017882:	2340      	movs	r3, #64	; 0x40
 8017884:	e7bc      	b.n	8017800 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017886:	28ff      	cmp	r0, #255	; 0xff
 8017888:	d105      	bne.n	8017896 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801788a:	f1bc 0f00 	cmp.w	ip, #0
 801788e:	bf14      	ite	ne
 8017890:	2304      	movne	r3, #4
 8017892:	2301      	moveq	r3, #1
 8017894:	e7b4      	b.n	8017800 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017896:	2304      	movs	r3, #4
 8017898:	e7b2      	b.n	8017800 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801789a:	bf00      	nop
 801789c:	0802ea88 	.word	0x0802ea88

080178a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80178a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a4:	b08b      	sub	sp, #44	; 0x2c
 80178a6:	461d      	mov	r5, r3
 80178a8:	2400      	movs	r4, #0
 80178aa:	4688      	mov	r8, r1
 80178ac:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80178b0:	4693      	mov	fp, r2
 80178b2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80178b6:	4607      	mov	r7, r0
 80178b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80178bc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80178c0:	9404      	str	r4, [sp, #16]
 80178c2:	bf14      	ite	ne
 80178c4:	2308      	movne	r3, #8
 80178c6:	2302      	moveq	r3, #2
 80178c8:	fb05 b50a 	mla	r5, r5, sl, fp
 80178cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178d0:	f7ff ff06 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80178d4:	2e0b      	cmp	r6, #11
 80178d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80178da:	a901      	add	r1, sp, #4
 80178dc:	bf98      	it	ls
 80178de:	4b13      	ldrls	r3, [pc, #76]	; (801792c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80178e0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80178e4:	bf98      	it	ls
 80178e6:	5d9c      	ldrbls	r4, [r3, r6]
 80178e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80178ec:	10e4      	asrs	r4, r4, #3
 80178ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80178f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80178f6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80178fa:	fb04 0405 	mla	r4, r4, r5, r0
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017904:	2300      	movs	r3, #0
 8017906:	9405      	str	r4, [sp, #20]
 8017908:	f8ad 301c 	strh.w	r3, [sp, #28]
 801790c:	f88d 9020 	strb.w	r9, [sp, #32]
 8017910:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017914:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017918:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801791c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	4798      	blx	r3
 8017926:	b00b      	add	sp, #44	; 0x2c
 8017928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792c:	0802ea88 	.word	0x0802ea88

08017930 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017934:	461e      	mov	r6, r3
 8017936:	4b0a      	ldr	r3, [pc, #40]	; (8017960 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017938:	460f      	mov	r7, r1
 801793a:	4690      	mov	r8, r2
 801793c:	881d      	ldrh	r5, [r3, #0]
 801793e:	f7ff fd23 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 8017942:	6803      	ldr	r3, [r0, #0]
 8017944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017946:	4798      	blx	r3
 8017948:	280b      	cmp	r0, #11
 801794a:	bf96      	itet	ls
 801794c:	4b05      	ldrls	r3, [pc, #20]	; (8017964 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801794e:	2400      	movhi	r4, #0
 8017950:	5c1c      	ldrbls	r4, [r3, r0]
 8017952:	fb08 7005 	mla	r0, r8, r5, r7
 8017956:	10e4      	asrs	r4, r4, #3
 8017958:	fb04 6000 	mla	r0, r4, r0, r6
 801795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017960:	200152ce 	.word	0x200152ce
 8017964:	0802ea88 	.word	0x0802ea88

08017968 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801796a:	b08b      	sub	sp, #44	; 0x2c
 801796c:	461f      	mov	r7, r3
 801796e:	4604      	mov	r4, r0
 8017970:	4616      	mov	r6, r2
 8017972:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017976:	2500      	movs	r5, #0
 8017978:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801797c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017980:	9504      	str	r5, [sp, #16]
 8017982:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017986:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801798a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801798e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017992:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017996:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801799a:	f88d 3020 	strb.w	r3, [sp, #32]
 801799e:	f7ff fe9f 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80179a2:	463a      	mov	r2, r7
 80179a4:	4631      	mov	r1, r6
 80179a6:	4603      	mov	r3, r0
 80179a8:	4620      	mov	r0, r4
 80179aa:	f7ff ffc1 	bl	8017930 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80179ae:	4b0e      	ldr	r3, [pc, #56]	; (80179e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80179b0:	9005      	str	r0, [sp, #20]
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80179b8:	f7ff fce6 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 80179bc:	6803      	ldr	r3, [r0, #0]
 80179be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c0:	4798      	blx	r3
 80179c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80179c4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80179c8:	a901      	add	r1, sp, #4
 80179ca:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80179ce:	9304      	str	r3, [sp, #16]
 80179d0:	6860      	ldr	r0, [r4, #4]
 80179d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80179d6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80179da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80179de:	6803      	ldr	r3, [r0, #0]
 80179e0:	685b      	ldr	r3, [r3, #4]
 80179e2:	4798      	blx	r3
 80179e4:	b00b      	add	sp, #44	; 0x2c
 80179e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179e8:	200152ce 	.word	0x200152ce

080179ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80179ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179ee:	b08d      	sub	sp, #52	; 0x34
 80179f0:	2501      	movs	r5, #1
 80179f2:	4604      	mov	r4, r0
 80179f4:	466b      	mov	r3, sp
 80179f6:	9503      	str	r5, [sp, #12]
 80179f8:	e883 0006 	stmia.w	r3, {r1, r2}
 80179fc:	2300      	movs	r3, #0
 80179fe:	f8bd 6000 	ldrh.w	r6, [sp]
 8017a02:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017a06:	9306      	str	r3, [sp, #24]
 8017a08:	6803      	ldr	r3, [r0, #0]
 8017a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a0c:	4798      	blx	r3
 8017a0e:	463a      	mov	r2, r7
 8017a10:	4631      	mov	r1, r6
 8017a12:	4603      	mov	r3, r0
 8017a14:	4620      	mov	r0, r4
 8017a16:	f7ff ff8b 	bl	8017930 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017a1c:	9004      	str	r0, [sp, #16]
 8017a1e:	9307      	str	r3, [sp, #28]
 8017a20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017a24:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017a28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017a2c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017a30:	4b0e      	ldr	r3, [pc, #56]	; (8017a6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017a32:	881b      	ldrh	r3, [r3, #0]
 8017a34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017a38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017a3c:	f7ff fca4 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 8017a40:	6803      	ldr	r3, [r0, #0]
 8017a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a44:	4798      	blx	r3
 8017a46:	23ff      	movs	r3, #255	; 0xff
 8017a48:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017a4c:	a903      	add	r1, sp, #12
 8017a4e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017a52:	6860      	ldr	r0, [r4, #4]
 8017a54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017a58:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017a5c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017a60:	6803      	ldr	r3, [r0, #0]
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	4798      	blx	r3
 8017a66:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017a68:	b00d      	add	sp, #52	; 0x34
 8017a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a6c:	200152ce 	.word	0x200152ce

08017a70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a74:	b08c      	sub	sp, #48	; 0x30
 8017a76:	461e      	mov	r6, r3
 8017a78:	2300      	movs	r3, #0
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	466d      	mov	r5, sp
 8017a7e:	9306      	str	r3, [sp, #24]
 8017a80:	6803      	ldr	r3, [r0, #0]
 8017a82:	e885 0006 	stmia.w	r5, {r1, r2}
 8017a86:	2501      	movs	r5, #1
 8017a88:	f8bd 7000 	ldrh.w	r7, [sp]
 8017a8c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017a90:	9503      	str	r5, [sp, #12]
 8017a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a94:	4798      	blx	r3
 8017a96:	4642      	mov	r2, r8
 8017a98:	4639      	mov	r1, r7
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	f7ff ff47 	bl	8017930 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017aa2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017aa6:	9004      	str	r0, [sp, #16]
 8017aa8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017aac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017ab0:	9607      	str	r6, [sp, #28]
 8017ab2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017ab6:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8017ab8:	881b      	ldrh	r3, [r3, #0]
 8017aba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017abe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ac0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017ac4:	f7ff fc60 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 8017ac8:	6803      	ldr	r3, [r0, #0]
 8017aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017acc:	4798      	blx	r3
 8017ace:	23ff      	movs	r3, #255	; 0xff
 8017ad0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017ad4:	a903      	add	r1, sp, #12
 8017ad6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017ada:	6860      	ldr	r0, [r4, #4]
 8017adc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017ae0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017ae4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017ae8:	6803      	ldr	r3, [r0, #0]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	4798      	blx	r3
 8017aee:	4630      	mov	r0, r6
 8017af0:	b00c      	add	sp, #48	; 0x30
 8017af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af6:	bf00      	nop
 8017af8:	200152ce 	.word	0x200152ce

08017afc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017afe:	b085      	sub	sp, #20
 8017b00:	4605      	mov	r5, r0
 8017b02:	ac02      	add	r4, sp, #8
 8017b04:	e884 0006 	stmia.w	r4, {r1, r2}
 8017b08:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017b0c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017b10:	f7ff fde6 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017b14:	4631      	mov	r1, r6
 8017b16:	4603      	mov	r3, r0
 8017b18:	463a      	mov	r2, r7
 8017b1a:	4628      	mov	r0, r5
 8017b1c:	f7ff ff08 	bl	8017930 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017b20:	4a05      	ldr	r2, [pc, #20]	; (8017b38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017b22:	682b      	ldr	r3, [r5, #0]
 8017b24:	8812      	ldrh	r2, [r2, #0]
 8017b26:	9200      	str	r2, [sp, #0]
 8017b28:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017b32:	47b0      	blx	r6
 8017b34:	b005      	add	sp, #20
 8017b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b38:	200152ce 	.word	0x200152ce

08017b3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017b3c:	b570      	push	{r4, r5, r6, lr}
 8017b3e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017b42:	4604      	mov	r4, r0
 8017b44:	b19b      	cbz	r3, 8017b6e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017b46:	2002      	movs	r0, #2
 8017b48:	f7ea f862 	bl	8001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017b54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017b5e:	f7ff fdbf 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017b62:	4601      	mov	r1, r0
 8017b64:	4620      	mov	r0, r4
 8017b66:	462b      	mov	r3, r5
 8017b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b6c:	4718      	bx	r3
 8017b6e:	bd70      	pop	{r4, r5, r6, pc}

08017b70 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017b70:	b570      	push	{r4, r5, r6, lr}
 8017b72:	4605      	mov	r5, r0
 8017b74:	460c      	mov	r4, r1
 8017b76:	2003      	movs	r0, #3
 8017b78:	b149      	cbz	r1, 8017b8e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017b7a:	f7e9 ffe9 	bl	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017b7e:	6928      	ldr	r0, [r5, #16]
 8017b80:	b168      	cbz	r0, 8017b9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017b82:	6803      	ldr	r3, [r0, #0]
 8017b84:	2101      	movs	r1, #1
 8017b86:	695b      	ldr	r3, [r3, #20]
 8017b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b8c:	4718      	bx	r3
 8017b8e:	f7ea f80f 	bl	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017b92:	6928      	ldr	r0, [r5, #16]
 8017b94:	b118      	cbz	r0, 8017b9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017b96:	6803      	ldr	r3, [r0, #0]
 8017b98:	4621      	mov	r1, r4
 8017b9a:	695b      	ldr	r3, [r3, #20]
 8017b9c:	e7f4      	b.n	8017b88 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8017b9e:	bd70      	pop	{r4, r5, r6, pc}

08017ba0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017ba0:	b538      	push	{r3, r4, r5, lr}
 8017ba2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	460d      	mov	r5, r1
 8017baa:	428b      	cmp	r3, r1
 8017bac:	d006      	beq.n	8017bbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017bae:	6803      	ldr	r3, [r0, #0]
 8017bb0:	b929      	cbnz	r1, 8017bbe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8017bb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017bb6:	4798      	blx	r3
 8017bb8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8017bbc:	bd38      	pop	{r3, r4, r5, pc}
 8017bbe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017bc2:	e7f8      	b.n	8017bb6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08017bc4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017bc4:	4b0d      	ldr	r3, [pc, #52]	; (8017bfc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017bc6:	b510      	push	{r4, lr}
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	4604      	mov	r4, r0
 8017bcc:	b95b      	cbnz	r3, 8017be6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017bce:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017bd2:	2b02      	cmp	r3, #2
 8017bd4:	d007      	beq.n	8017be6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017bd6:	6840      	ldr	r0, [r0, #4]
 8017bd8:	f000 f912 	bl	8017e00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017bdc:	b118      	cbz	r0, 8017be6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017bde:	6862      	ldr	r2, [r4, #4]
 8017be0:	7a53      	ldrb	r3, [r2, #9]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d0fc      	beq.n	8017be0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017be6:	f7ea f963 	bl	8001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017bea:	4620      	mov	r0, r4
 8017bec:	2100      	movs	r1, #0
 8017bee:	f7ff ffd7 	bl	8017ba0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	f7ff fd74 	bl	80176e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017bf8:	bd10      	pop	{r4, pc}
 8017bfa:	bf00      	nop
 8017bfc:	200152d2 	.word	0x200152d2

08017c00 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017c00:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017c04:	1a13      	subs	r3, r2, r0
 8017c06:	4258      	negs	r0, r3
 8017c08:	4158      	adcs	r0, r3
 8017c0a:	4770      	bx	lr

08017c0c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017c0c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017c10:	1a9b      	subs	r3, r3, r2
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	bfdc      	itt	le
 8017c16:	6882      	ldrle	r2, [r0, #8]
 8017c18:	189b      	addle	r3, r3, r2
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	bfcc      	ite	gt
 8017c1e:	2000      	movgt	r0, #0
 8017c20:	2001      	movle	r0, #1
 8017c22:	4770      	bx	lr

08017c24 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017c24:	6902      	ldr	r2, [r0, #16]
 8017c26:	6843      	ldr	r3, [r0, #4]
 8017c28:	2024      	movs	r0, #36	; 0x24
 8017c2a:	fb00 3002 	mla	r0, r0, r2, r3
 8017c2e:	4770      	bx	lr

08017c30 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017c30:	6803      	ldr	r3, [r0, #0]
 8017c32:	691b      	ldr	r3, [r3, #16]
 8017c34:	4718      	bx	r3

08017c36 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017c36:	2301      	movs	r3, #1
 8017c38:	b570      	push	{r4, r5, r6, lr}
 8017c3a:	7203      	strb	r3, [r0, #8]
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	6840      	ldr	r0, [r0, #4]
 8017c40:	6803      	ldr	r3, [r0, #0]
 8017c42:	699b      	ldr	r3, [r3, #24]
 8017c44:	4798      	blx	r3
 8017c46:	6803      	ldr	r3, [r0, #0]
 8017c48:	4605      	mov	r5, r0
 8017c4a:	2b40      	cmp	r3, #64	; 0x40
 8017c4c:	d00c      	beq.n	8017c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c4e:	d810      	bhi.n	8017c72 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017c50:	2b04      	cmp	r3, #4
 8017c52:	d01d      	beq.n	8017c90 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017c54:	d804      	bhi.n	8017c60 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017c56:	2b01      	cmp	r3, #1
 8017c58:	d006      	beq.n	8017c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c5a:	2b02      	cmp	r3, #2
 8017c5c:	d02c      	beq.n	8017cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}
 8017c60:	2b08      	cmp	r3, #8
 8017c62:	d01d      	beq.n	8017ca0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017c64:	2b20      	cmp	r3, #32
 8017c66:	d1fa      	bne.n	8017c5e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6e:	4798      	blx	r3
 8017c70:	e013      	b.n	8017c9a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c76:	d0f7      	beq.n	8017c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c78:	d804      	bhi.n	8017c84 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8017c7a:	2b80      	cmp	r3, #128	; 0x80
 8017c7c:	d0f4      	beq.n	8017c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c82:	e7f0      	b.n	8017c66 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8017c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c88:	d0ee      	beq.n	8017c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017c8e:	e7e5      	b.n	8017c5c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017c90:	6823      	ldr	r3, [r4, #0]
 8017c92:	7f01      	ldrb	r1, [r0, #28]
 8017c94:	4620      	mov	r0, r4
 8017c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c98:	4798      	blx	r3
 8017c9a:	6823      	ldr	r3, [r4, #0]
 8017c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c9e:	e006      	b.n	8017cae <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017ca0:	6823      	ldr	r3, [r4, #0]
 8017ca2:	7f01      	ldrb	r1, [r0, #28]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ca8:	4798      	blx	r3
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cae:	4629      	mov	r1, r5
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cb6:	4718      	bx	r3
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	4620      	mov	r0, r4
 8017cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cbe:	4798      	blx	r3
 8017cc0:	e7f3      	b.n	8017caa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08017cc2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017cc2:	4770      	bx	lr

08017cc4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017cc4:	4770      	bx	lr

08017cc6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8017cc6:	4770      	bx	lr

08017cc8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017cc8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017ccc:	b510      	push	{r4, lr}
 8017cce:	1ad2      	subs	r2, r2, r3
 8017cd0:	2a00      	cmp	r2, #0
 8017cd2:	bfdc      	itt	le
 8017cd4:	6884      	ldrle	r4, [r0, #8]
 8017cd6:	1912      	addle	r2, r2, r4
 8017cd8:	2a01      	cmp	r2, #1
 8017cda:	dd16      	ble.n	8017d0a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8017cdc:	6842      	ldr	r2, [r0, #4]
 8017cde:	2424      	movs	r4, #36	; 0x24
 8017ce0:	fb04 2303 	mla	r3, r4, r3, r2
 8017ce4:	f101 0220 	add.w	r2, r1, #32
 8017ce8:	f851 4b04 	ldr.w	r4, [r1], #4
 8017cec:	4291      	cmp	r1, r2
 8017cee:	f843 4b04 	str.w	r4, [r3], #4
 8017cf2:	d1f9      	bne.n	8017ce8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017cf4:	780a      	ldrb	r2, [r1, #0]
 8017cf6:	701a      	strb	r2, [r3, #0]
 8017cf8:	68c3      	ldr	r3, [r0, #12]
 8017cfa:	6882      	ldr	r2, [r0, #8]
 8017cfc:	f3bf 8f5b 	dmb	ish
 8017d00:	3301      	adds	r3, #1
 8017d02:	429a      	cmp	r2, r3
 8017d04:	bfd8      	it	le
 8017d06:	1a9b      	suble	r3, r3, r2
 8017d08:	60c3      	str	r3, [r0, #12]
 8017d0a:	bd10      	pop	{r4, pc}

08017d0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017d0c:	6903      	ldr	r3, [r0, #16]
 8017d0e:	6882      	ldr	r2, [r0, #8]
 8017d10:	f3bf 8f5b 	dmb	ish
 8017d14:	3301      	adds	r3, #1
 8017d16:	429a      	cmp	r2, r3
 8017d18:	bfd8      	it	le
 8017d1a:	1a9b      	suble	r3, r3, r2
 8017d1c:	6103      	str	r3, [r0, #16]
 8017d1e:	4770      	bx	lr

08017d20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017d20:	b570      	push	{r4, r5, r6, lr}
 8017d22:	4604      	mov	r4, r0
 8017d24:	460e      	mov	r6, r1
 8017d26:	6860      	ldr	r0, [r4, #4]
 8017d28:	6803      	ldr	r3, [r0, #0]
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	4798      	blx	r3
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	d1f9      	bne.n	8017d26 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017d32:	4d0d      	ldr	r5, [pc, #52]	; (8017d68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017d34:	6828      	ldr	r0, [r5, #0]
 8017d36:	6803      	ldr	r3, [r0, #0]
 8017d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d3a:	4798      	blx	r3
 8017d3c:	f7ea f8c6 	bl	8001ecc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017d40:	6828      	ldr	r0, [r5, #0]
 8017d42:	2101      	movs	r1, #1
 8017d44:	f7ff ff2c 	bl	8017ba0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017d48:	6860      	ldr	r0, [r4, #4]
 8017d4a:	4631      	mov	r1, r6
 8017d4c:	6803      	ldr	r3, [r0, #0]
 8017d4e:	689b      	ldr	r3, [r3, #8]
 8017d50:	4798      	blx	r3
 8017d52:	6823      	ldr	r3, [r4, #0]
 8017d54:	4620      	mov	r0, r4
 8017d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d58:	4798      	blx	r3
 8017d5a:	6828      	ldr	r0, [r5, #0]
 8017d5c:	6803      	ldr	r3, [r0, #0]
 8017d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d64:	4718      	bx	r3
 8017d66:	bf00      	nop
 8017d68:	200152d4 	.word	0x200152d4

08017d6c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017d6c:	b508      	push	{r3, lr}
 8017d6e:	f7ea f89f 	bl	8001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017d76:	f7ea b8a3 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017d7a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017d7a:	b510      	push	{r4, lr}
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	2114      	movs	r1, #20
 8017d80:	f011 f8b0 	bl	8028ee4 <_ZdlPvj>
 8017d84:	4620      	mov	r0, r4
 8017d86:	bd10      	pop	{r4, pc}

08017d88 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017d88:	b510      	push	{r4, lr}
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	6840      	ldr	r0, [r0, #4]
 8017d8e:	6803      	ldr	r3, [r0, #0]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	4798      	blx	r3
 8017d94:	b948      	cbnz	r0, 8017daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017d96:	7a63      	ldrb	r3, [r4, #9]
 8017d98:	b13b      	cbz	r3, 8017daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017d9a:	7a23      	ldrb	r3, [r4, #8]
 8017d9c:	b92b      	cbnz	r3, 8017daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	4620      	mov	r0, r4
 8017da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017da8:	4718      	bx	r3
 8017daa:	bd10      	pop	{r4, pc}

08017dac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017dac:	b570      	push	{r4, r5, r6, lr}
 8017dae:	4604      	mov	r4, r0
 8017db0:	6840      	ldr	r0, [r0, #4]
 8017db2:	6803      	ldr	r3, [r0, #0]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4798      	blx	r3
 8017db8:	4605      	mov	r5, r0
 8017dba:	b930      	cbnz	r0, 8017dca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017dbc:	7a23      	ldrb	r3, [r4, #8]
 8017dbe:	b123      	cbz	r3, 8017dca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017dc0:	6860      	ldr	r0, [r4, #4]
 8017dc2:	6803      	ldr	r3, [r0, #0]
 8017dc4:	695b      	ldr	r3, [r3, #20]
 8017dc6:	4798      	blx	r3
 8017dc8:	7225      	strb	r5, [r4, #8]
 8017dca:	6860      	ldr	r0, [r4, #4]
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	4798      	blx	r3
 8017dd2:	b928      	cbnz	r0, 8017de0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017dd4:	6823      	ldr	r3, [r4, #0]
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dde:	4718      	bx	r3
 8017de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017de4:	f7ea b87a 	b.w	8001edc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017de8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017de8:	b510      	push	{r4, lr}
 8017dea:	6082      	str	r2, [r0, #8]
 8017dec:	2200      	movs	r2, #0
 8017dee:	4c03      	ldr	r4, [pc, #12]	; (8017dfc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017df0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017df4:	e9c0 4100 	strd	r4, r1, [r0]
 8017df8:	bd10      	pop	{r4, pc}
 8017dfa:	bf00      	nop
 8017dfc:	0802ea9c 	.word	0x0802ea9c

08017e00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017e00:	6840      	ldr	r0, [r0, #4]
 8017e02:	6803      	ldr	r3, [r0, #0]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	4718      	bx	r3

08017e08 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017e08:	4b07      	ldr	r3, [pc, #28]	; (8017e28 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017e0a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017e0c:	881b      	ldrh	r3, [r3, #0]
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	bf81      	itttt	hi
 8017e12:	4b06      	ldrhi	r3, [pc, #24]	; (8017e2c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017e14:	681b      	ldrhi	r3, [r3, #0]
 8017e16:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017e1a:	7858      	ldrbhi	r0, [r3, #1]
 8017e1c:	bf8c      	ite	hi
 8017e1e:	f000 0003 	andhi.w	r0, r0, #3
 8017e22:	2000      	movls	r0, #0
 8017e24:	4770      	bx	lr
 8017e26:	bf00      	nop
 8017e28:	20015328 	.word	0x20015328
 8017e2c:	20015324 	.word	0x20015324

08017e30 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017e30:	4b11      	ldr	r3, [pc, #68]	; (8017e78 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e36:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017e38:	4604      	mov	r4, r0
 8017e3a:	881b      	ldrh	r3, [r3, #0]
 8017e3c:	428b      	cmp	r3, r1
 8017e3e:	d918      	bls.n	8017e72 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017e40:	6803      	ldr	r3, [r0, #0]
 8017e42:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8017e44:	4b0d      	ldr	r3, [pc, #52]	; (8017e7c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017e46:	6818      	ldr	r0, [r3, #0]
 8017e48:	f7eb ffee 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 8017e4c:	6823      	ldr	r3, [r4, #0]
 8017e4e:	4606      	mov	r6, r0
 8017e50:	4620      	mov	r0, r4
 8017e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e54:	4798      	blx	r3
 8017e56:	6823      	ldr	r3, [r4, #0]
 8017e58:	4607      	mov	r7, r0
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017e60:	4798      	blx	r3
 8017e62:	463a      	mov	r2, r7
 8017e64:	4603      	mov	r3, r0
 8017e66:	4631      	mov	r1, r6
 8017e68:	4620      	mov	r0, r4
 8017e6a:	46ac      	mov	ip, r5
 8017e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e70:	4760      	bx	ip
 8017e72:	2000      	movs	r0, #0
 8017e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e78:	20015328 	.word	0x20015328
 8017e7c:	20015330 	.word	0x20015330

08017e80 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017e80:	4b18      	ldr	r3, [pc, #96]	; (8017ee4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e86:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017e88:	4604      	mov	r4, r0
 8017e8a:	881b      	ldrh	r3, [r3, #0]
 8017e8c:	428b      	cmp	r3, r1
 8017e8e:	d926      	bls.n	8017ede <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017e90:	4b15      	ldr	r3, [pc, #84]	; (8017ee8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017e98:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017e9c:	4b13      	ldr	r3, [pc, #76]	; (8017eec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017e9e:	7855      	ldrb	r5, [r2, #1]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017ea6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017eaa:	6833      	ldr	r3, [r6, #0]
 8017eac:	69df      	ldr	r7, [r3, #28]
 8017eae:	4b10      	ldr	r3, [pc, #64]	; (8017ef0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017eb0:	6818      	ldr	r0, [r3, #0]
 8017eb2:	f7eb ffb9 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	4680      	mov	r8, r0
 8017eba:	4620      	mov	r0, r4
 8017ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ebe:	4798      	blx	r3
 8017ec0:	6823      	ldr	r3, [r4, #0]
 8017ec2:	4681      	mov	r9, r0
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017eca:	4798      	blx	r3
 8017ecc:	464b      	mov	r3, r9
 8017ece:	9000      	str	r0, [sp, #0]
 8017ed0:	4642      	mov	r2, r8
 8017ed2:	4629      	mov	r1, r5
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	47b8      	blx	r7
 8017ed8:	b003      	add	sp, #12
 8017eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ede:	2000      	movs	r0, #0
 8017ee0:	e7fa      	b.n	8017ed8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017ee2:	bf00      	nop
 8017ee4:	20015328 	.word	0x20015328
 8017ee8:	20015324 	.word	0x20015324
 8017eec:	2001532c 	.word	0x2001532c
 8017ef0:	20015330 	.word	0x20015330

08017ef4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017ef4:	b40e      	push	{r1, r2, r3}
 8017ef6:	4b30      	ldr	r3, [pc, #192]	; (8017fb8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017efc:	881a      	ldrh	r2, [r3, #0]
 8017efe:	b09d      	sub	sp, #116	; 0x74
 8017f00:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017f02:	4604      	mov	r4, r0
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d954      	bls.n	8017fb2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017f08:	aa26      	add	r2, sp, #152	; 0x98
 8017f0a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017fbc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017f0e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017fc0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017f12:	9202      	str	r2, [sp, #8]
 8017f14:	f8d9 2000 	ldr.w	r2, [r9]
 8017f18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f20:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	4628      	mov	r0, r5
 8017f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f2a:	4798      	blx	r3
 8017f2c:	4606      	mov	r6, r0
 8017f2e:	b207      	sxth	r7, r0
 8017f30:	a803      	add	r0, sp, #12
 8017f32:	f003 fe43 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 8017f36:	682b      	ldr	r3, [r5, #0]
 8017f38:	4628      	mov	r0, r5
 8017f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f3c:	4798      	blx	r3
 8017f3e:	682b      	ldr	r3, [r5, #0]
 8017f40:	4682      	mov	sl, r0
 8017f42:	4628      	mov	r0, r5
 8017f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f46:	4798      	blx	r3
 8017f48:	4653      	mov	r3, sl
 8017f4a:	9000      	str	r0, [sp, #0]
 8017f4c:	a803      	add	r0, sp, #12
 8017f4e:	9a02      	ldr	r2, [sp, #8]
 8017f50:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017f52:	f003 fe8e 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017f56:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017f58:	f8d9 3000 	ldr.w	r3, [r9]
 8017f5c:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8017f60:	8925      	ldrh	r5, [r4, #8]
 8017f62:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017f66:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017f6a:	eba5 050c 	sub.w	r5, r5, ip
 8017f6e:	784a      	ldrb	r2, [r1, #1]
 8017f70:	f8d8 3000 	ldr.w	r3, [r8]
 8017f74:	b22d      	sxth	r5, r5
 8017f76:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017f7a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017f7e:	9500      	str	r5, [sp, #0]
 8017f80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017f84:	a803      	add	r0, sp, #12
 8017f86:	f001 fd3e 	bl	8019a06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017f8a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017f8e:	b203      	sxth	r3, r0
 8017f90:	18b9      	adds	r1, r7, r2
 8017f92:	2900      	cmp	r1, #0
 8017f94:	dd0b      	ble.n	8017fae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017f96:	3b01      	subs	r3, #1
 8017f98:	fb13 f302 	smulbb	r3, r3, r2
 8017f9c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017fa0:	b21f      	sxth	r7, r3
 8017fa2:	4638      	mov	r0, r7
 8017fa4:	b01d      	add	sp, #116	; 0x74
 8017fa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017faa:	b003      	add	sp, #12
 8017fac:	4770      	bx	lr
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	dcf7      	bgt.n	8017fa2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017fb2:	2700      	movs	r7, #0
 8017fb4:	e7f5      	b.n	8017fa2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017fb6:	bf00      	nop
 8017fb8:	20015328 	.word	0x20015328
 8017fbc:	20015324 	.word	0x20015324
 8017fc0:	2001532c 	.word	0x2001532c

08017fc4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017fc4:	4bbc      	ldr	r3, [pc, #752]	; (80182b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8017fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fca:	460c      	mov	r4, r1
 8017fcc:	881b      	ldrh	r3, [r3, #0]
 8017fce:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8017fd0:	b0a9      	sub	sp, #164	; 0xa4
 8017fd2:	4681      	mov	r9, r0
 8017fd4:	428b      	cmp	r3, r1
 8017fd6:	d809      	bhi.n	8017fec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017fd8:	2300      	movs	r3, #0
 8017fda:	f04f 32ff 	mov.w	r2, #4294967295
 8017fde:	6083      	str	r3, [r0, #8]
 8017fe0:	e9c0 3200 	strd	r3, r2, [r0]
 8017fe4:	4648      	mov	r0, r9
 8017fe6:	b029      	add	sp, #164	; 0xa4
 8017fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fec:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80182c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017ff0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017ff4:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80182c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8017ff8:	f8db 3000 	ldr.w	r3, [fp]
 8017ffc:	f8d8 0000 	ldr.w	r0, [r8]
 8018000:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018004:	4bad      	ldr	r3, [pc, #692]	; (80182bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801800c:	f7eb ff0c 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 8018010:	4607      	mov	r7, r0
 8018012:	682b      	ldr	r3, [r5, #0]
 8018014:	4628      	mov	r0, r5
 8018016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018018:	4798      	blx	r3
 801801a:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801801c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018020:	4430      	add	r0, r6
 8018022:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8018026:	b283      	uxth	r3, r0
 8018028:	4650      	mov	r0, sl
 801802a:	9302      	str	r3, [sp, #8]
 801802c:	2e00      	cmp	r6, #0
 801802e:	f040 8090 	bne.w	8018152 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018032:	f003 fdc3 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 8018036:	682b      	ldr	r3, [r5, #0]
 8018038:	4628      	mov	r0, r5
 801803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801803c:	4798      	blx	r3
 801803e:	682b      	ldr	r3, [r5, #0]
 8018040:	9005      	str	r0, [sp, #20]
 8018042:	4628      	mov	r0, r5
 8018044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018046:	4798      	blx	r3
 8018048:	6823      	ldr	r3, [r4, #0]
 801804a:	4680      	mov	r8, r0
 801804c:	4620      	mov	r0, r4
 801804e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018050:	4798      	blx	r3
 8018052:	6822      	ldr	r2, [r4, #0]
 8018054:	9004      	str	r0, [sp, #16]
 8018056:	4620      	mov	r0, r4
 8018058:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801805c:	4790      	blx	r2
 801805e:	9905      	ldr	r1, [sp, #20]
 8018060:	9b04      	ldr	r3, [sp, #16]
 8018062:	460a      	mov	r2, r1
 8018064:	4639      	mov	r1, r7
 8018066:	4637      	mov	r7, r6
 8018068:	9001      	str	r0, [sp, #4]
 801806a:	9300      	str	r3, [sp, #0]
 801806c:	4650      	mov	r0, sl
 801806e:	4643      	mov	r3, r8
 8018070:	f003 fe14 	bl	801bc9c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018074:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018076:	4629      	mov	r1, r5
 8018078:	f8db 3000 	ldr.w	r3, [fp]
 801807c:	4650      	mov	r0, sl
 801807e:	3601      	adds	r6, #1
 8018080:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018088:	b2b6      	uxth	r6, r6
 801808a:	785b      	ldrb	r3, [r3, #1]
 801808c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018090:	f001 fa0a 	bl	80194a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018094:	4287      	cmp	r7, r0
 8018096:	bfb8      	it	lt
 8018098:	b207      	sxthlt	r7, r0
 801809a:	4650      	mov	r0, sl
 801809c:	f003 fdb5 	bl	801bc0a <_ZN8touchgfx12TextProvider11endOfStringEv>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d0e7      	beq.n	8018074 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80180a4:	9b02      	ldr	r3, [sp, #8]
 80180a6:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80180aa:	fb13 f606 	smulbb	r6, r3, r6
 80180ae:	eba6 0608 	sub.w	r6, r6, r8
 80180b2:	b2b6      	uxth	r6, r6
 80180b4:	fa0f f886 	sxth.w	r8, r6
 80180b8:	f1b8 0f00 	cmp.w	r8, #0
 80180bc:	dd06      	ble.n	80180cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 80180be:	682b      	ldr	r3, [r5, #0]
 80180c0:	4628      	mov	r0, r5
 80180c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180c4:	4798      	blx	r3
 80180c6:	4430      	add	r0, r6
 80180c8:	fa0f f880 	sxth.w	r8, r0
 80180cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80180d0:	4620      	mov	r0, r4
 80180d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80180d6:	6823      	ldr	r3, [r4, #0]
 80180d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180da:	bf0c      	ite	eq
 80180dc:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80180e0:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80180e4:	4798      	blx	r3
 80180e6:	2801      	cmp	r0, #1
 80180e8:	b2ba      	uxth	r2, r7
 80180ea:	f000 80d2 	beq.w	8018292 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 80180ee:	2802      	cmp	r0, #2
 80180f0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80180f4:	f000 80d3 	beq.w	801829e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 80180f8:	b21e      	sxth	r6, r3
 80180fa:	7a29      	ldrb	r1, [r5, #8]
 80180fc:	7a6d      	ldrb	r5, [r5, #9]
 80180fe:	1a76      	subs	r6, r6, r1
 8018100:	4429      	add	r1, r5
 8018102:	b2b3      	uxth	r3, r6
 8018104:	440a      	add	r2, r1
 8018106:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801810a:	b21f      	sxth	r7, r3
 801810c:	b292      	uxth	r2, r2
 801810e:	2902      	cmp	r1, #2
 8018110:	b216      	sxth	r6, r2
 8018112:	f000 80c7 	beq.w	80182a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8018116:	2903      	cmp	r1, #3
 8018118:	f000 80d6 	beq.w	80182c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801811c:	2901      	cmp	r1, #1
 801811e:	f040 80dc 	bne.w	80182da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8018122:	8923      	ldrh	r3, [r4, #8]
 8018124:	4632      	mov	r2, r6
 8018126:	463d      	mov	r5, r7
 8018128:	4646      	mov	r6, r8
 801812a:	eba3 0308 	sub.w	r3, r3, r8
 801812e:	4690      	mov	r8, r2
 8018130:	b21f      	sxth	r7, r3
 8018132:	9b03      	ldr	r3, [sp, #12]
 8018134:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018136:	6818      	ldr	r0, [r3, #0]
 8018138:	f7eb fe76 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 801813c:	f8a9 7000 	strh.w	r7, [r9]
 8018140:	f8a9 5002 	strh.w	r5, [r9, #2]
 8018144:	f8a9 6004 	strh.w	r6, [r9, #4]
 8018148:	f8a9 8006 	strh.w	r8, [r9, #6]
 801814c:	f8c9 0008 	str.w	r0, [r9, #8]
 8018150:	e748      	b.n	8017fe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8018152:	f003 fd33 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 8018156:	682b      	ldr	r3, [r5, #0]
 8018158:	4628      	mov	r0, r5
 801815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801815c:	4798      	blx	r3
 801815e:	682b      	ldr	r3, [r5, #0]
 8018160:	4606      	mov	r6, r0
 8018162:	4628      	mov	r0, r5
 8018164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018166:	4798      	blx	r3
 8018168:	6823      	ldr	r3, [r4, #0]
 801816a:	4680      	mov	r8, r0
 801816c:	4620      	mov	r0, r4
 801816e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018170:	4798      	blx	r3
 8018172:	6822      	ldr	r2, [r4, #0]
 8018174:	9004      	str	r0, [sp, #16]
 8018176:	4620      	mov	r0, r4
 8018178:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801817c:	4790      	blx	r2
 801817e:	9b04      	ldr	r3, [sp, #16]
 8018180:	4632      	mov	r2, r6
 8018182:	9001      	str	r0, [sp, #4]
 8018184:	9300      	str	r3, [sp, #0]
 8018186:	4639      	mov	r1, r7
 8018188:	4643      	mov	r3, r8
 801818a:	4650      	mov	r0, sl
 801818c:	f003 fd86 	bl	801bc9c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018190:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018194:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8018198:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801819c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80181a0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80181a2:	bf0a      	itet	eq
 80181a4:	4642      	moveq	r2, r8
 80181a6:	461a      	movne	r2, r3
 80181a8:	4698      	moveq	r8, r3
 80181aa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80181ae:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80181b2:	1ad2      	subs	r2, r2, r3
 80181b4:	f8db 3000 	ldr.w	r3, [fp]
 80181b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80181bc:	7859      	ldrb	r1, [r3, #1]
 80181be:	2300      	movs	r3, #0
 80181c0:	f8cd a020 	str.w	sl, [sp, #32]
 80181c4:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80181c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80181cc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80181d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80181d4:	950a      	str	r5, [sp, #40]	; 0x28
 80181d6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80181da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80181de:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80181e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80181e6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80181ea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80181ee:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80181f2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80181f6:	b350      	cbz	r0, 801824e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80181f8:	682b      	ldr	r3, [r5, #0]
 80181fa:	4628      	mov	r0, r5
 80181fc:	695b      	ldr	r3, [r3, #20]
 80181fe:	4798      	blx	r3
 8018200:	4607      	mov	r7, r0
 8018202:	b320      	cbz	r0, 801824e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8018204:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018206:	4639      	mov	r1, r7
 8018208:	6803      	ldr	r3, [r0, #0]
 801820a:	68db      	ldr	r3, [r3, #12]
 801820c:	4798      	blx	r3
 801820e:	4606      	mov	r6, r0
 8018210:	b1e8      	cbz	r0, 801824e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8018212:	7b43      	ldrb	r3, [r0, #13]
 8018214:	7a82      	ldrb	r2, [r0, #10]
 8018216:	005b      	lsls	r3, r3, #1
 8018218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801821c:	4313      	orrs	r3, r2
 801821e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018222:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018226:	2b04      	cmp	r3, #4
 8018228:	d111      	bne.n	801824e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801822a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801822c:	4632      	mov	r2, r6
 801822e:	4639      	mov	r1, r7
 8018230:	6803      	ldr	r3, [r0, #0]
 8018232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018234:	4798      	blx	r3
 8018236:	7b73      	ldrb	r3, [r6, #13]
 8018238:	005b      	lsls	r3, r3, #1
 801823a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801823e:	7ab3      	ldrb	r3, [r6, #10]
 8018240:	4313      	orrs	r3, r2
 8018242:	4418      	add	r0, r3
 8018244:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018248:	4418      	add	r0, r3
 801824a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801824e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8018252:	2600      	movs	r6, #0
 8018254:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8018258:	4637      	mov	r7, r6
 801825a:	45c3      	cmp	fp, r8
 801825c:	a807      	add	r0, sp, #28
 801825e:	f106 0601 	add.w	r6, r6, #1
 8018262:	bfd4      	ite	le
 8018264:	2100      	movle	r1, #0
 8018266:	2101      	movgt	r1, #1
 8018268:	f001 fafe 	bl	8019868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801826c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018270:	b2b6      	uxth	r6, r6
 8018272:	429f      	cmp	r7, r3
 8018274:	bfb8      	it	lt
 8018276:	b21f      	sxthlt	r7, r3
 8018278:	9b02      	ldr	r3, [sp, #8]
 801827a:	eba8 0803 	sub.w	r8, r8, r3
 801827e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018282:	fa0f f888 	sxth.w	r8, r8
 8018286:	2b00      	cmp	r3, #0
 8018288:	f43f af0c 	beq.w	80180a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801828c:	45c2      	cmp	sl, r8
 801828e:	dbe4      	blt.n	801825a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8018290:	e708      	b.n	80180a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8018292:	1bf6      	subs	r6, r6, r7
 8018294:	2702      	movs	r7, #2
 8018296:	fb96 f6f7 	sdiv	r6, r6, r7
 801829a:	b236      	sxth	r6, r6
 801829c:	e72d      	b.n	80180fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 801829e:	4413      	add	r3, r2
 80182a0:	1af6      	subs	r6, r6, r3
 80182a2:	e7fa      	b.n	801829a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80182a4:	8925      	ldrh	r5, [r4, #8]
 80182a6:	1aad      	subs	r5, r5, r2
 80182a8:	1aed      	subs	r5, r5, r3
 80182aa:	b22f      	sxth	r7, r5
 80182ac:	8965      	ldrh	r5, [r4, #10]
 80182ae:	eba5 0508 	sub.w	r5, r5, r8
 80182b2:	b22d      	sxth	r5, r5
 80182b4:	e73d      	b.n	8018132 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80182b6:	bf00      	nop
 80182b8:	20015328 	.word	0x20015328
 80182bc:	2001532c 	.word	0x2001532c
 80182c0:	20015324 	.word	0x20015324
 80182c4:	20015330 	.word	0x20015330
 80182c8:	8965      	ldrh	r5, [r4, #10]
 80182ca:	2700      	movs	r7, #0
 80182cc:	1aad      	subs	r5, r5, r2
 80182ce:	1aed      	subs	r5, r5, r3
 80182d0:	4633      	mov	r3, r6
 80182d2:	4646      	mov	r6, r8
 80182d4:	b22d      	sxth	r5, r5
 80182d6:	4698      	mov	r8, r3
 80182d8:	e72b      	b.n	8018132 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80182da:	2500      	movs	r5, #0
 80182dc:	e729      	b.n	8018132 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80182de:	bf00      	nop

080182e0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80182e0:	b570      	push	{r4, r5, r6, lr}
 80182e2:	6803      	ldr	r3, [r0, #0]
 80182e4:	4604      	mov	r4, r0
 80182e6:	4615      	mov	r5, r2
 80182e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ea:	4798      	blx	r3
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	4629      	mov	r1, r5
 80182f0:	4620      	mov	r0, r4
 80182f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182f8:	4718      	bx	r3
	...

080182fc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	4b0e      	ldr	r3, [pc, #56]	; (8018338 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018300:	4604      	mov	r4, r0
 8018302:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018304:	881b      	ldrh	r3, [r3, #0]
 8018306:	429a      	cmp	r2, r3
 8018308:	d214      	bcs.n	8018334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801830a:	6803      	ldr	r3, [r0, #0]
 801830c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801830e:	4798      	blx	r3
 8018310:	6823      	ldr	r3, [r4, #0]
 8018312:	4605      	mov	r5, r0
 8018314:	4620      	mov	r0, r4
 8018316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018318:	4798      	blx	r3
 801831a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801831e:	b22d      	sxth	r5, r5
 8018320:	4601      	mov	r1, r0
 8018322:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018326:	bf06      	itte	eq
 8018328:	4602      	moveq	r2, r0
 801832a:	4629      	moveq	r1, r5
 801832c:	462a      	movne	r2, r5
 801832e:	4620      	mov	r0, r4
 8018330:	f7ff ffd6 	bl	80182e0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018334:	bd38      	pop	{r3, r4, r5, pc}
 8018336:	bf00      	nop
 8018338:	20015328 	.word	0x20015328

0801833c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	888b      	ldrh	r3, [r1, #4]
 8018340:	b085      	sub	sp, #20
 8018342:	4604      	mov	r4, r0
 8018344:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018346:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801834a:	b923      	cbnz	r3, 8018356 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801834c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018350:	b90b      	cbnz	r3, 8018356 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018352:	f7ff ffd3 	bl	80182fc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	466d      	mov	r5, sp
 801835a:	4621      	mov	r1, r4
 801835c:	343c      	adds	r4, #60	; 0x3c
 801835e:	4628      	mov	r0, r5
 8018360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018364:	4798      	blx	r3
 8018366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801836a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801836e:	b005      	add	sp, #20
 8018370:	bd30      	pop	{r4, r5, pc}

08018372 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018372:	2300      	movs	r3, #0
 8018374:	8083      	strh	r3, [r0, #4]
 8018376:	80c3      	strh	r3, [r0, #6]
 8018378:	8003      	strh	r3, [r0, #0]
 801837a:	8043      	strh	r3, [r0, #2]
 801837c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018380:	2bff      	cmp	r3, #255	; 0xff
 8018382:	bf01      	itttt	eq
 8018384:	890b      	ldrheq	r3, [r1, #8]
 8018386:	8083      	strheq	r3, [r0, #4]
 8018388:	894b      	ldrheq	r3, [r1, #10]
 801838a:	80c3      	strheq	r3, [r0, #6]
 801838c:	4770      	bx	lr
	...

08018390 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018392:	4604      	mov	r4, r0
 8018394:	466b      	mov	r3, sp
 8018396:	6808      	ldr	r0, [r1, #0]
 8018398:	6849      	ldr	r1, [r1, #4]
 801839a:	c303      	stmia	r3!, {r0, r1}
 801839c:	6823      	ldr	r3, [r4, #0]
 801839e:	4669      	mov	r1, sp
 80183a0:	4620      	mov	r0, r4
 80183a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183a4:	4798      	blx	r3
 80183a6:	4b08      	ldr	r3, [pc, #32]	; (80183c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80183ae:	b10a      	cbz	r2, 80183b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80183b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80183b2:	b900      	cbnz	r0, 80183b6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80183b4:	6898      	ldr	r0, [r3, #8]
 80183b6:	6803      	ldr	r3, [r0, #0]
 80183b8:	4669      	mov	r1, sp
 80183ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80183bc:	6a1d      	ldr	r5, [r3, #32]
 80183be:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80183c2:	47a8      	blx	r5
 80183c4:	b003      	add	sp, #12
 80183c6:	bd30      	pop	{r4, r5, pc}
 80183c8:	200152d4 	.word	0x200152d4

080183cc <_ZN8touchgfx3BoxD1Ev>:
 80183cc:	4770      	bx	lr

080183ce <_ZN8touchgfx3BoxD0Ev>:
 80183ce:	b510      	push	{r4, lr}
 80183d0:	4604      	mov	r4, r0
 80183d2:	212c      	movs	r1, #44	; 0x2c
 80183d4:	f010 fd86 	bl	8028ee4 <_ZdlPvj>
 80183d8:	4620      	mov	r0, r4
 80183da:	bd10      	pop	{r4, pc}

080183dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80183dc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80183e0:	b12a      	cbz	r2, 80183ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80183e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80183e6:	b112      	cbz	r2, 80183ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80183e8:	6803      	ldr	r3, [r0, #0]
 80183ea:	695b      	ldr	r3, [r3, #20]
 80183ec:	4718      	bx	r3
 80183ee:	4770      	bx	lr

080183f0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80183f0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80183f4:	4770      	bx	lr

080183f6 <_ZN8touchgfx6ButtonD1Ev>:
 80183f6:	4770      	bx	lr

080183f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80183f8:	b570      	push	{r4, r5, r6, lr}
 80183fa:	880b      	ldrh	r3, [r1, #0]
 80183fc:	4605      	mov	r5, r0
 80183fe:	4604      	mov	r4, r0
 8018400:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018402:	8813      	ldrh	r3, [r2, #0]
 8018404:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018408:	4628      	mov	r0, r5
 801840a:	f004 ff69 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801840e:	4606      	mov	r6, r0
 8018410:	4628      	mov	r0, r5
 8018412:	f004 ff99 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018416:	6823      	ldr	r3, [r4, #0]
 8018418:	4605      	mov	r5, r0
 801841a:	4631      	mov	r1, r6
 801841c:	4620      	mov	r0, r4
 801841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018420:	4798      	blx	r3
 8018422:	6823      	ldr	r3, [r4, #0]
 8018424:	4629      	mov	r1, r5
 8018426:	4620      	mov	r0, r4
 8018428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801842e:	4718      	bx	r3

08018430 <_ZN8touchgfx6ButtonD0Ev>:
 8018430:	b510      	push	{r4, lr}
 8018432:	4604      	mov	r4, r0
 8018434:	2134      	movs	r1, #52	; 0x34
 8018436:	f010 fd55 	bl	8028ee4 <_ZdlPvj>
 801843a:	4620      	mov	r0, r4
 801843c:	bd10      	pop	{r4, pc}

0801843e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801843e:	b510      	push	{r4, lr}
 8018440:	4604      	mov	r4, r0
 8018442:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018444:	b150      	cbz	r0, 801845c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018446:	6803      	ldr	r3, [r0, #0]
 8018448:	68db      	ldr	r3, [r3, #12]
 801844a:	4798      	blx	r3
 801844c:	b130      	cbz	r0, 801845c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801844e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018450:	4621      	mov	r1, r4
 8018452:	6803      	ldr	r3, [r0, #0]
 8018454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	4718      	bx	r3
 801845c:	bd10      	pop	{r4, pc}

0801845e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801845e:	b510      	push	{r4, lr}
 8018460:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8018464:	4604      	mov	r4, r0
 8018466:	2bff      	cmp	r3, #255	; 0xff
 8018468:	d006      	beq.n	8018478 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801846a:	2300      	movs	r3, #0
 801846c:	8003      	strh	r3, [r0, #0]
 801846e:	8043      	strh	r3, [r0, #2]
 8018470:	8083      	strh	r3, [r0, #4]
 8018472:	80c3      	strh	r3, [r0, #6]
 8018474:	4620      	mov	r0, r4
 8018476:	bd10      	pop	{r4, pc}
 8018478:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801847c:	b11b      	cbz	r3, 8018486 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801847e:	3130      	adds	r1, #48	; 0x30
 8018480:	f004 ff96 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018484:	e7f6      	b.n	8018474 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018486:	312e      	adds	r1, #46	; 0x2e
 8018488:	e7fa      	b.n	8018480 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801848c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018490:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018494:	b08a      	sub	sp, #40	; 0x28
 8018496:	4604      	mov	r4, r0
 8018498:	4688      	mov	r8, r1
 801849a:	2b00      	cmp	r3, #0
 801849c:	d066      	beq.n	801856c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801849e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80184a0:	a805      	add	r0, sp, #20
 80184a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184a6:	f004 ff1b 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80184aa:	4607      	mov	r7, r0
 80184ac:	a805      	add	r0, sp, #20
 80184ae:	f004 ff4b 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80184b2:	f9b8 6000 	ldrsh.w	r6, [r8]
 80184b6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80184ba:	2300      	movs	r3, #0
 80184bc:	4432      	add	r2, r6
 80184be:	9306      	str	r3, [sp, #24]
 80184c0:	b292      	uxth	r2, r2
 80184c2:	fa0f fc82 	sxth.w	ip, r2
 80184c6:	459c      	cmp	ip, r3
 80184c8:	dd52      	ble.n	8018570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80184ca:	42b7      	cmp	r7, r6
 80184cc:	dd50      	ble.n	8018570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80184ce:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80184d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80184d6:	442b      	add	r3, r5
 80184d8:	b29b      	uxth	r3, r3
 80184da:	b219      	sxth	r1, r3
 80184dc:	2900      	cmp	r1, #0
 80184de:	dd47      	ble.n	8018570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80184e0:	42a8      	cmp	r0, r5
 80184e2:	dd45      	ble.n	8018570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80184e4:	4567      	cmp	r7, ip
 80184e6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80184ea:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80184ee:	bfb8      	it	lt
 80184f0:	b2ba      	uxthlt	r2, r7
 80184f2:	4288      	cmp	r0, r1
 80184f4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80184f8:	bfb8      	it	lt
 80184fa:	b283      	uxthlt	r3, r0
 80184fc:	1b92      	subs	r2, r2, r6
 80184fe:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018502:	1b5b      	subs	r3, r3, r5
 8018504:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018508:	f8ad 301e 	strh.w	r3, [sp, #30]
 801850c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018514:	429a      	cmp	r2, r3
 8018516:	d026      	beq.n	8018566 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018518:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801851c:	2b00      	cmp	r3, #0
 801851e:	dd22      	ble.n	8018566 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018520:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018524:	2b00      	cmp	r3, #0
 8018526:	dd1e      	ble.n	8018566 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018528:	2300      	movs	r3, #0
 801852a:	a908      	add	r1, sp, #32
 801852c:	4620      	mov	r0, r4
 801852e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018532:	6823      	ldr	r3, [r4, #0]
 8018534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018536:	4798      	blx	r3
 8018538:	4b0f      	ldr	r3, [pc, #60]	; (8018578 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018540:	b10a      	cbz	r2, 8018546 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8018542:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018544:	b900      	cbnz	r0, 8018548 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8018546:	6898      	ldr	r0, [r3, #8]
 8018548:	2501      	movs	r5, #1
 801854a:	6801      	ldr	r1, [r0, #0]
 801854c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018550:	9502      	str	r5, [sp, #8]
 8018552:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018556:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801855a:	9401      	str	r4, [sp, #4]
 801855c:	ac06      	add	r4, sp, #24
 801855e:	9400      	str	r4, [sp, #0]
 8018560:	688c      	ldr	r4, [r1, #8]
 8018562:	a905      	add	r1, sp, #20
 8018564:	47a0      	blx	r4
 8018566:	b00a      	add	sp, #40	; 0x28
 8018568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801856c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801856e:	e797      	b.n	80184a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018570:	2300      	movs	r3, #0
 8018572:	9307      	str	r3, [sp, #28]
 8018574:	e7ca      	b.n	801850c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8018576:	bf00      	nop
 8018578:	200152d4 	.word	0x200152d4

0801857c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801857c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8018580:	b12a      	cbz	r2, 801858e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018582:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018586:	b112      	cbz	r2, 801858e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018588:	6803      	ldr	r3, [r0, #0]
 801858a:	695b      	ldr	r3, [r3, #20]
 801858c:	4718      	bx	r3
 801858e:	4770      	bx	lr

08018590 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8018590:	4b30      	ldr	r3, [pc, #192]	; (8018654 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8018592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018596:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018598:	b08d      	sub	sp, #52	; 0x34
 801859a:	881b      	ldrh	r3, [r3, #0]
 801859c:	4604      	mov	r4, r0
 801859e:	460f      	mov	r7, r1
 80185a0:	4293      	cmp	r3, r2
 80185a2:	d954      	bls.n	801864e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80185a4:	4b2c      	ldr	r3, [pc, #176]	; (8018658 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80185a6:	6819      	ldr	r1, [r3, #0]
 80185a8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80185ac:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80185b0:	4a2a      	ldr	r2, [pc, #168]	; (801865c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80185b2:	6812      	ldr	r2, [r2, #0]
 80185b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80185b8:	2900      	cmp	r1, #0
 80185ba:	d048      	beq.n	801864e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80185bc:	785a      	ldrb	r2, [r3, #1]
 80185be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80185c2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80185c6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80185ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80185ce:	4b24      	ldr	r3, [pc, #144]	; (8018660 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80185d0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80185d4:	681a      	ldr	r2, [r3, #0]
 80185d6:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80185da:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80185de:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80185e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80185e4:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80185e8:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80185ec:	9107      	str	r1, [sp, #28]
 80185ee:	f88d 8020 	strb.w	r8, [sp, #32]
 80185f2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80185f6:	9609      	str	r6, [sp, #36]	; 0x24
 80185f8:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80185fc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8018600:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8018604:	b10b      	cbz	r3, 801860a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8018606:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8018608:	b905      	cbnz	r5, 801860c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801860a:	6895      	ldr	r5, [r2, #8]
 801860c:	ae05      	add	r6, sp, #20
 801860e:	4621      	mov	r1, r4
 8018610:	4630      	mov	r0, r6
 8018612:	f002 ff1b 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018616:	4b13      	ldr	r3, [pc, #76]	; (8018664 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8018618:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801861a:	6818      	ldr	r0, [r3, #0]
 801861c:	f7eb fc04 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 8018620:	6823      	ldr	r3, [r4, #0]
 8018622:	4680      	mov	r8, r0
 8018624:	4620      	mov	r0, r4
 8018626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018628:	4798      	blx	r3
 801862a:	6823      	ldr	r3, [r4, #0]
 801862c:	4681      	mov	r9, r0
 801862e:	4620      	mov	r0, r4
 8018630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018634:	4798      	blx	r3
 8018636:	ab07      	add	r3, sp, #28
 8018638:	f8cd 8004 	str.w	r8, [sp, #4]
 801863c:	9300      	str	r3, [sp, #0]
 801863e:	463b      	mov	r3, r7
 8018640:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8018644:	4628      	mov	r0, r5
 8018646:	e896 0006 	ldmia.w	r6, {r1, r2}
 801864a:	f7eb fb9f 	bl	8003d8c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801864e:	b00d      	add	sp, #52	; 0x34
 8018650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018654:	20015328 	.word	0x20015328
 8018658:	20015324 	.word	0x20015324
 801865c:	2001532c 	.word	0x2001532c
 8018660:	200152d4 	.word	0x200152d4
 8018664:	20015330 	.word	0x20015330

08018668 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8018668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8018670:	b0a0      	sub	sp, #128	; 0x80
 8018672:	4604      	mov	r4, r0
 8018674:	b193      	cbz	r3, 801869c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018676:	4b30      	ldr	r3, [pc, #192]	; (8018738 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8018678:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801867a:	881b      	ldrh	r3, [r3, #0]
 801867c:	428b      	cmp	r3, r1
 801867e:	d90d      	bls.n	801869c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018680:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018684:	2b00      	cmp	r3, #0
 8018686:	dd09      	ble.n	801869c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018688:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801868c:	2b00      	cmp	r3, #0
 801868e:	dd05      	ble.n	801869c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018690:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8018694:	b12b      	cbz	r3, 80186a2 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 8018696:	6803      	ldr	r3, [r0, #0]
 8018698:	695b      	ldr	r3, [r3, #20]
 801869a:	4798      	blx	r3
 801869c:	b020      	add	sp, #128	; 0x80
 801869e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a2:	4b26      	ldr	r3, [pc, #152]	; (801873c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80186aa:	4b25      	ldr	r3, [pc, #148]	; (8018740 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80186b2:	4b24      	ldr	r3, [pc, #144]	; (8018744 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80186b4:	6818      	ldr	r0, [r3, #0]
 80186b6:	f7eb fbb7 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 80186ba:	4606      	mov	r6, r0
 80186bc:	a807      	add	r0, sp, #28
 80186be:	f003 fa7d 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 80186c2:	682b      	ldr	r3, [r5, #0]
 80186c4:	4628      	mov	r0, r5
 80186c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186c8:	4798      	blx	r3
 80186ca:	682b      	ldr	r3, [r5, #0]
 80186cc:	4607      	mov	r7, r0
 80186ce:	4628      	mov	r0, r5
 80186d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186d2:	4798      	blx	r3
 80186d4:	6823      	ldr	r3, [r4, #0]
 80186d6:	4605      	mov	r5, r0
 80186d8:	4620      	mov	r0, r4
 80186da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80186dc:	4798      	blx	r3
 80186de:	6823      	ldr	r3, [r4, #0]
 80186e0:	4680      	mov	r8, r0
 80186e2:	4620      	mov	r0, r4
 80186e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186e8:	4798      	blx	r3
 80186ea:	462b      	mov	r3, r5
 80186ec:	463a      	mov	r2, r7
 80186ee:	4631      	mov	r1, r6
 80186f0:	e9cd 8000 	strd	r8, r0, [sp]
 80186f4:	a807      	add	r0, sp, #28
 80186f6:	f003 fad1 	bl	801bc9c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80186fa:	a807      	add	r0, sp, #28
 80186fc:	f003 fe8a 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018700:	280a      	cmp	r0, #10
 8018702:	d103      	bne.n	801870c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8018704:	6823      	ldr	r3, [r4, #0]
 8018706:	4620      	mov	r0, r4
 8018708:	695b      	ldr	r3, [r3, #20]
 801870a:	e7c6      	b.n	801869a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 801870c:	a807      	add	r0, sp, #28
 801870e:	f003 fe81 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018712:	2800      	cmp	r0, #0
 8018714:	d1f4      	bne.n	8018700 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8018716:	ad04      	add	r5, sp, #16
 8018718:	4621      	mov	r1, r4
 801871a:	4628      	mov	r0, r5
 801871c:	f7ff fc52 	bl	8017fc4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8018720:	ab02      	add	r3, sp, #8
 8018722:	6822      	ldr	r2, [r4, #0]
 8018724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018728:	6912      	ldr	r2, [r2, #16]
 801872a:	e883 0003 	stmia.w	r3, {r0, r1}
 801872e:	4619      	mov	r1, r3
 8018730:	4620      	mov	r0, r4
 8018732:	4790      	blx	r2
 8018734:	e7b2      	b.n	801869c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018736:	bf00      	nop
 8018738:	20015328 	.word	0x20015328
 801873c:	20015324 	.word	0x20015324
 8018740:	2001532c 	.word	0x2001532c
 8018744:	20015330 	.word	0x20015330

08018748 <_ZN8touchgfx5ImageD1Ev>:
 8018748:	4770      	bx	lr

0801874a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801874a:	b570      	push	{r4, r5, r6, lr}
 801874c:	880b      	ldrh	r3, [r1, #0]
 801874e:	460d      	mov	r5, r1
 8018750:	4604      	mov	r4, r0
 8018752:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018754:	4608      	mov	r0, r1
 8018756:	f004 fdc3 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801875a:	4606      	mov	r6, r0
 801875c:	4628      	mov	r0, r5
 801875e:	f004 fdf3 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	4605      	mov	r5, r0
 8018766:	4631      	mov	r1, r6
 8018768:	4620      	mov	r0, r4
 801876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801876c:	4798      	blx	r3
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	4629      	mov	r1, r5
 8018772:	4620      	mov	r0, r4
 8018774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801877a:	4718      	bx	r3

0801877c <_ZN8touchgfx5ImageD0Ev>:
 801877c:	b510      	push	{r4, lr}
 801877e:	4604      	mov	r4, r0
 8018780:	212c      	movs	r1, #44	; 0x2c
 8018782:	f010 fbaf 	bl	8028ee4 <_ZdlPvj>
 8018786:	4620      	mov	r0, r4
 8018788:	bd10      	pop	{r4, pc}

0801878a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801878a:	b510      	push	{r4, lr}
 801878c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018790:	4604      	mov	r4, r0
 8018792:	2bff      	cmp	r3, #255	; 0xff
 8018794:	d006      	beq.n	80187a4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018796:	2300      	movs	r3, #0
 8018798:	8003      	strh	r3, [r0, #0]
 801879a:	8043      	strh	r3, [r0, #2]
 801879c:	8083      	strh	r3, [r0, #4]
 801879e:	80c3      	strh	r3, [r0, #6]
 80187a0:	4620      	mov	r0, r4
 80187a2:	bd10      	pop	{r4, pc}
 80187a4:	3126      	adds	r1, #38	; 0x26
 80187a6:	f004 fe03 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80187aa:	e7f9      	b.n	80187a0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080187ac <_ZNK8touchgfx5Image17invalidateContentEv>:
 80187ac:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80187b0:	b12a      	cbz	r2, 80187be <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80187b2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80187b6:	b112      	cbz	r2, 80187be <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80187b8:	6803      	ldr	r3, [r0, #0]
 80187ba:	695b      	ldr	r3, [r3, #20]
 80187bc:	4718      	bx	r3
 80187be:	4770      	bx	lr

080187c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80187c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c4:	4604      	mov	r4, r0
 80187c6:	b088      	sub	sp, #32
 80187c8:	2500      	movs	r5, #0
 80187ca:	460f      	mov	r7, r1
 80187cc:	f854 3b26 	ldr.w	r3, [r4], #38
 80187d0:	a904      	add	r1, sp, #16
 80187d2:	4606      	mov	r6, r0
 80187d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80187da:	4798      	blx	r3
 80187dc:	4620      	mov	r0, r4
 80187de:	f004 fd7f 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187e2:	4680      	mov	r8, r0
 80187e4:	4620      	mov	r0, r4
 80187e6:	f004 fdaf 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187ea:	9506      	str	r5, [sp, #24]
 80187ec:	ad06      	add	r5, sp, #24
 80187ee:	f8ad 001e 	strh.w	r0, [sp, #30]
 80187f2:	4639      	mov	r1, r7
 80187f4:	f8ad 801c 	strh.w	r8, [sp, #28]
 80187f8:	4628      	mov	r0, r5
 80187fa:	f7fe fae9 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80187fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018802:	2b00      	cmp	r3, #0
 8018804:	dd19      	ble.n	801883a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018806:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801880a:	2b00      	cmp	r3, #0
 801880c:	dd15      	ble.n	801883a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801880e:	4b0c      	ldr	r3, [pc, #48]	; (8018840 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018816:	b10a      	cbz	r2, 801881c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018818:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801881a:	b900      	cbnz	r0, 801881e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801881c:	6898      	ldr	r0, [r3, #8]
 801881e:	2701      	movs	r7, #1
 8018820:	6801      	ldr	r1, [r0, #0]
 8018822:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018826:	9702      	str	r7, [sp, #8]
 8018828:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801882c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018830:	e9cd 5600 	strd	r5, r6, [sp]
 8018834:	688d      	ldr	r5, [r1, #8]
 8018836:	4621      	mov	r1, r4
 8018838:	47a8      	blx	r5
 801883a:	b008      	add	sp, #32
 801883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018840:	200152d4 	.word	0x200152d4

08018844 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8018844:	4770      	bx	lr

08018846 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8018846:	b510      	push	{r4, lr}
 8018848:	4604      	mov	r4, r0
 801884a:	2148      	movs	r1, #72	; 0x48
 801884c:	f010 fb4a 	bl	8028ee4 <_ZdlPvj>
 8018850:	4620      	mov	r0, r4
 8018852:	bd10      	pop	{r4, pc}

08018854 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018858:	b08d      	sub	sp, #52	; 0x34
 801885a:	4604      	mov	r4, r0
 801885c:	4688      	mov	r8, r1
 801885e:	f7ff fe15 	bl	801848c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018862:	4a4d      	ldr	r2, [pc, #308]	; (8018998 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x144>)
 8018864:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018866:	8812      	ldrh	r2, [r2, #0]
 8018868:	429a      	cmp	r2, r3
 801886a:	f240 8081 	bls.w	8018970 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801886e:	4e4b      	ldr	r6, [pc, #300]	; (801899c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x148>)
 8018870:	6832      	ldr	r2, [r6, #0]
 8018872:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018876:	4b4a      	ldr	r3, [pc, #296]	; (80189a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801887e:	2300      	movs	r3, #0
 8018880:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8018884:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8018888:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801888c:	2b03      	cmp	r3, #3
 801888e:	d811      	bhi.n	80188b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8018890:	e8df f003 	tbb	[pc, r3]
 8018894:	71027102 	.word	0x71027102
 8018898:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801889c:	2002      	movs	r0, #2
 801889e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80188a2:	1a9b      	subs	r3, r3, r2
 80188a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80188a8:	f8ad 1010 	strh.w	r1, [sp, #16]
 80188ac:	fb93 f3f0 	sdiv	r3, r3, r0
 80188b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80188b4:	ad03      	add	r5, sp, #12
 80188b6:	f10d 0914 	add.w	r9, sp, #20
 80188ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188be:	e889 0003 	stmia.w	r9, {r0, r1}
 80188c2:	4641      	mov	r1, r8
 80188c4:	4648      	mov	r0, r9
 80188c6:	f7fe fa83 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80188ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	dd4e      	ble.n	8018970 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 80188d2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	dd4a      	ble.n	8018970 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 80188da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80188de:	4629      	mov	r1, r5
 80188e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80188e4:	4620      	mov	r0, r4
 80188e6:	1a9b      	subs	r3, r3, r2
 80188e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80188ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80188f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80188f4:	1a9b      	subs	r3, r3, r2
 80188f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80188fa:	6823      	ldr	r3, [r4, #0]
 80188fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188fe:	4798      	blx	r3
 8018900:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018904:	2b00      	cmp	r3, #0
 8018906:	d045      	beq.n	8018994 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x140>
 8018908:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801890a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801890c:	6833      	ldr	r3, [r6, #0]
 801890e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8018912:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018916:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801891a:	785b      	ldrb	r3, [r3, #1]
 801891c:	9209      	str	r2, [sp, #36]	; 0x24
 801891e:	f3c3 0601 	ubfx	r6, r3, #0, #2
 8018922:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018926:	9707      	str	r7, [sp, #28]
 8018928:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801892c:	2300      	movs	r3, #0
 801892e:	f88d 6020 	strb.w	r6, [sp, #32]
 8018932:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018936:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801893a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801893e:	4b19      	ldr	r3, [pc, #100]	; (80189a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x150>)
 8018940:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801894a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801894e:	b10a      	cbz	r2, 8018954 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x100>
 8018950:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018952:	b904      	cbnz	r4, 8018956 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8018954:	689c      	ldr	r4, [r3, #8]
 8018956:	4b14      	ldr	r3, [pc, #80]	; (80189a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>)
 8018958:	6818      	ldr	r0, [r3, #0]
 801895a:	f7eb fa65 	bl	8003e28 <_ZNK8touchgfx5Texts7getTextEt>
 801895e:	ab07      	add	r3, sp, #28
 8018960:	9001      	str	r0, [sp, #4]
 8018962:	4620      	mov	r0, r4
 8018964:	9300      	str	r3, [sp, #0]
 8018966:	464b      	mov	r3, r9
 8018968:	e895 0006 	ldmia.w	r5, {r1, r2}
 801896c:	f7eb fa0e 	bl	8003d8c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018970:	b00d      	add	sp, #52	; 0x34
 8018972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018976:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801897a:	2002      	movs	r0, #2
 801897c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8018980:	1a9b      	subs	r3, r3, r2
 8018982:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018986:	f8ad 1012 	strh.w	r1, [sp, #18]
 801898a:	fb93 f3f0 	sdiv	r3, r3, r0
 801898e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018992:	e78f      	b.n	80188b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8018994:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018996:	e7b8      	b.n	801890a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb6>
 8018998:	20015328 	.word	0x20015328
 801899c:	20015324 	.word	0x20015324
 80189a0:	2001532c 	.word	0x2001532c
 80189a4:	200152d4 	.word	0x200152d4
 80189a8:	20015330 	.word	0x20015330

080189ac <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80189ac:	2101      	movs	r1, #1
 80189ae:	2200      	movs	r2, #0
 80189b0:	b510      	push	{r4, lr}
 80189b2:	4c13      	ldr	r4, [pc, #76]	; (8018a00 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80189b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80189b8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80189bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189c0:	6004      	str	r4, [r0, #0]
 80189c2:	4c10      	ldr	r4, [pc, #64]	; (8018a04 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80189c4:	8082      	strh	r2, [r0, #4]
 80189c6:	80c2      	strh	r2, [r0, #6]
 80189c8:	8102      	strh	r2, [r0, #8]
 80189ca:	8142      	strh	r2, [r0, #10]
 80189cc:	8182      	strh	r2, [r0, #12]
 80189ce:	81c2      	strh	r2, [r0, #14]
 80189d0:	8202      	strh	r2, [r0, #16]
 80189d2:	8242      	strh	r2, [r0, #18]
 80189d4:	61c2      	str	r2, [r0, #28]
 80189d6:	8402      	strh	r2, [r0, #32]
 80189d8:	8442      	strh	r2, [r0, #34]	; 0x22
 80189da:	6282      	str	r2, [r0, #40]	; 0x28
 80189dc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80189e0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80189e2:	8601      	strh	r1, [r0, #48]	; 0x30
 80189e4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80189e8:	6344      	str	r4, [r0, #52]	; 0x34
 80189ea:	8701      	strh	r1, [r0, #56]	; 0x38
 80189ec:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80189f0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80189f4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80189f8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80189fc:	bd10      	pop	{r4, pc}
 80189fe:	bf00      	nop
 8018a00:	0802ec08 	.word	0x0802ec08
 8018a04:	0802bf0c 	.word	0x0802bf0c

08018a08 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018a08:	b510      	push	{r4, lr}
 8018a0a:	6803      	ldr	r3, [r0, #0]
 8018a0c:	460c      	mov	r4, r1
 8018a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a10:	4798      	blx	r3
 8018a12:	1b03      	subs	r3, r0, r4
 8018a14:	4258      	negs	r0, r3
 8018a16:	4158      	adcs	r0, r3
 8018a18:	bd10      	pop	{r4, pc}
	...

08018a1c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018a1c:	4b01      	ldr	r3, [pc, #4]	; (8018a24 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018a1e:	6019      	str	r1, [r3, #0]
 8018a20:	4770      	bx	lr
 8018a22:	bf00      	nop
 8018a24:	200152dc 	.word	0x200152dc

08018a28 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a2c:	4696      	mov	lr, r2
 8018a2e:	b097      	sub	sp, #92	; 0x5c
 8018a30:	4605      	mov	r5, r0
 8018a32:	4614      	mov	r4, r2
 8018a34:	460e      	mov	r6, r1
 8018a36:	461f      	mov	r7, r3
 8018a38:	f10d 0c1c 	add.w	ip, sp, #28
 8018a3c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018a40:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018a44:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018a48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a50:	f8de 3000 	ldr.w	r3, [lr]
 8018a54:	f104 0e14 	add.w	lr, r4, #20
 8018a58:	f8cc 3000 	str.w	r3, [ip]
 8018a5c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a68:	f8de 3000 	ldr.w	r3, [lr]
 8018a6c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018a70:	f8cc 3000 	str.w	r3, [ip]
 8018a74:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018a78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a80:	f8de 3000 	ldr.w	r3, [lr]
 8018a84:	4631      	mov	r1, r6
 8018a86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018a88:	4628      	mov	r0, r5
 8018a8a:	f8cc 3000 	str.w	r3, [ip]
 8018a8e:	682b      	ldr	r3, [r5, #0]
 8018a90:	9201      	str	r2, [sp, #4]
 8018a92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018a94:	f8cd 8008 	str.w	r8, [sp, #8]
 8018a98:	9200      	str	r2, [sp, #0]
 8018a9a:	aa07      	add	r2, sp, #28
 8018a9c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018aa0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8018aa4:	463b      	mov	r3, r7
 8018aa6:	47d8      	blx	fp
 8018aa8:	46a6      	mov	lr, r4
 8018aaa:	f10d 0c1c 	add.w	ip, sp, #28
 8018aae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ab6:	f8de 3000 	ldr.w	r3, [lr]
 8018aba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018abe:	343c      	adds	r4, #60	; 0x3c
 8018ac0:	f8cc 3000 	str.w	r3, [ip]
 8018ac4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018ac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018acc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ad0:	f8de 3000 	ldr.w	r3, [lr]
 8018ad4:	f8cc 3000 	str.w	r3, [ip]
 8018ad8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ae2:	6823      	ldr	r3, [r4, #0]
 8018ae4:	4631      	mov	r1, r6
 8018ae6:	4628      	mov	r0, r5
 8018ae8:	f8cc 3000 	str.w	r3, [ip]
 8018aec:	682b      	ldr	r3, [r5, #0]
 8018aee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018af2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018af4:	f8cd 8008 	str.w	r8, [sp, #8]
 8018af8:	9201      	str	r2, [sp, #4]
 8018afa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018afc:	9200      	str	r2, [sp, #0]
 8018afe:	aa07      	add	r2, sp, #28
 8018b00:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8018b02:	463b      	mov	r3, r7
 8018b04:	47a0      	blx	r4
 8018b06:	b017      	add	sp, #92	; 0x5c
 8018b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b10:	b08d      	sub	sp, #52	; 0x34
 8018b12:	4688      	mov	r8, r1
 8018b14:	f8d3 c000 	ldr.w	ip, [r3]
 8018b18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b1a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018b1e:	680f      	ldr	r7, [r1, #0]
 8018b20:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018b24:	eba7 070c 	sub.w	r7, r7, ip
 8018b28:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018b2c:	edd3 6a07 	vldr	s13, [r3, #28]
 8018b30:	42bc      	cmp	r4, r7
 8018b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018b34:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018b38:	bfa8      	it	ge
 8018b3a:	463c      	movge	r4, r7
 8018b3c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018b40:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018b44:	ee07 4a90 	vmov	s15, r4
 8018b48:	eb09 0e0c 	add.w	lr, r9, ip
 8018b4c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018b50:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018b54:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018b58:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018b5c:	4571      	cmp	r1, lr
 8018b5e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018b62:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018b66:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018b6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018b6e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018b72:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018b76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018b7a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018b7e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018b82:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018b86:	f340 808c 	ble.w	8018ca2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018b8a:	eba1 060e 	sub.w	r6, r1, lr
 8018b8e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018b92:	ee07 5a10 	vmov	s14, r5
 8018b96:	2d00      	cmp	r5, #0
 8018b98:	fb04 6615 	mls	r6, r4, r5, r6
 8018b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ba0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018ba4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018ba8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018bac:	dd12      	ble.n	8018bd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018bae:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018bb2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018bb6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018bba:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc2:	bf14      	ite	ne
 8018bc4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018bc8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018bcc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018bd0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018bd4:	fb05 f204 	mul.w	r2, r5, r4
 8018bd8:	1abf      	subs	r7, r7, r2
 8018bda:	4494      	add	ip, r2
 8018bdc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018be0:	4411      	add	r1, r2
 8018be2:	eb09 020c 	add.w	r2, r9, ip
 8018be6:	b209      	sxth	r1, r1
 8018be8:	443a      	add	r2, r7
 8018bea:	428a      	cmp	r2, r1
 8018bec:	bfc4      	itt	gt
 8018bee:	eba1 0209 	subgt.w	r2, r1, r9
 8018bf2:	eba2 070c 	subgt.w	r7, r2, ip
 8018bf6:	2f00      	cmp	r7, #0
 8018bf8:	dd50      	ble.n	8018c9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018bfa:	fb97 f1f4 	sdiv	r1, r7, r4
 8018bfe:	fb04 7211 	mls	r2, r4, r1, r7
 8018c02:	b90a      	cbnz	r2, 8018c08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018c04:	3901      	subs	r1, #1
 8018c06:	4622      	mov	r2, r4
 8018c08:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018c0c:	6840      	ldr	r0, [r0, #4]
 8018c0e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018c12:	44b6      	add	lr, r6
 8018c14:	f8d0 a000 	ldr.w	sl, [r0]
 8018c18:	2900      	cmp	r1, #0
 8018c1a:	bfcc      	ite	gt
 8018c1c:	46a1      	movgt	r9, r4
 8018c1e:	4691      	movle	r9, r2
 8018c20:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c22:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018c24:	fb04 e505 	mla	r5, r4, r5, lr
 8018c28:	eef0 6a42 	vmov.f32	s13, s4
 8018c2c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018c30:	9008      	str	r0, [sp, #32]
 8018c32:	eeb0 7a61 	vmov.f32	s14, s3
 8018c36:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018c38:	695b      	ldr	r3, [r3, #20]
 8018c3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018c3e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018c42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018c46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018c48:	445b      	add	r3, fp
 8018c4a:	9307      	str	r3, [sp, #28]
 8018c4c:	ee16 3a90 	vmov	r3, s13
 8018c50:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018c54:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018c58:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018c5c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018c60:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018c64:	ee17 7a90 	vmov	r7, s15
 8018c68:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018c6c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018c70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018c74:	ee17 ca90 	vmov	ip, s15
 8018c78:	fb9c fcf4 	sdiv	ip, ip, r4
 8018c7c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018c80:	9302      	str	r3, [sp, #8]
 8018c82:	ee17 3a10 	vmov	r3, s14
 8018c86:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018c8a:	fb07 3706 	mla	r7, r7, r6, r3
 8018c8e:	eba9 0306 	sub.w	r3, r9, r6
 8018c92:	e9cd 4700 	strd	r4, r7, [sp]
 8018c96:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018c9a:	47a0      	blx	r4
 8018c9c:	b00d      	add	sp, #52	; 0x34
 8018c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ca2:	2500      	movs	r5, #0
 8018ca4:	462e      	mov	r6, r5
 8018ca6:	e799      	b.n	8018bdc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018ca8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cac:	b0db      	sub	sp, #364	; 0x16c
 8018cae:	461d      	mov	r5, r3
 8018cb0:	4614      	mov	r4, r2
 8018cb2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018cb6:	910f      	str	r1, [sp, #60]	; 0x3c
 8018cb8:	4629      	mov	r1, r5
 8018cba:	930a      	str	r3, [sp, #40]	; 0x28
 8018cbc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018cc0:	9009      	str	r0, [sp, #36]	; 0x24
 8018cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cc4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018cc8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018ccc:	9310      	str	r3, [sp, #64]	; 0x40
 8018cce:	6803      	ldr	r3, [r0, #0]
 8018cd0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8018cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018cd6:	47b8      	blx	r7
 8018cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cda:	6058      	str	r0, [r3, #4]
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	f000 83a1 	beq.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018ce2:	682b      	ldr	r3, [r5, #0]
 8018ce4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018ce8:	ed94 7a02 	vldr	s14, [r4, #8]
 8018cec:	9314      	str	r3, [sp, #80]	; 0x50
 8018cee:	686b      	ldr	r3, [r5, #4]
 8018cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018cf4:	9315      	str	r3, [sp, #84]	; 0x54
 8018cf6:	4bc1      	ldr	r3, [pc, #772]	; (8018ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018cf8:	7819      	ldrb	r1, [r3, #0]
 8018cfa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018cfe:	2900      	cmp	r1, #0
 8018d00:	bf16      	itet	ne
 8018d02:	4619      	movne	r1, r3
 8018d04:	4611      	moveq	r1, r2
 8018d06:	4613      	movne	r3, r2
 8018d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d0c:	9116      	str	r1, [sp, #88]	; 0x58
 8018d0e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018d12:	f240 8387 	bls.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d16:	ed94 7a07 	vldr	s14, [r4, #28]
 8018d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d22:	f240 837f 	bls.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d26:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8018d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d32:	f240 8377 	bls.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d36:	6822      	ldr	r2, [r4, #0]
 8018d38:	4bb1      	ldr	r3, [pc, #708]	; (8019000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	f2c0 8372 	blt.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d40:	49b0      	ldr	r1, [pc, #704]	; (8019004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018d42:	6963      	ldr	r3, [r4, #20]
 8018d44:	428a      	cmp	r2, r1
 8018d46:	f300 836d 	bgt.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d4a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018d4e:	48ae      	ldr	r0, [pc, #696]	; (8019008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018d50:	33ff      	adds	r3, #255	; 0xff
 8018d52:	4283      	cmp	r3, r0
 8018d54:	f200 8366 	bhi.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018d5a:	4dac      	ldr	r5, [pc, #688]	; (801900c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018d5c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018d60:	33ff      	adds	r3, #255	; 0xff
 8018d62:	42ab      	cmp	r3, r5
 8018d64:	f200 835e 	bhi.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d68:	6862      	ldr	r2, [r4, #4]
 8018d6a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018d6e:	33ff      	adds	r3, #255	; 0xff
 8018d70:	4283      	cmp	r3, r0
 8018d72:	f200 8357 	bhi.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d76:	69a1      	ldr	r1, [r4, #24]
 8018d78:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018d7c:	33ff      	adds	r3, #255	; 0xff
 8018d7e:	4283      	cmp	r3, r0
 8018d80:	f200 8350 	bhi.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018d86:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8018d8a:	30ff      	adds	r0, #255	; 0xff
 8018d8c:	42a8      	cmp	r0, r5
 8018d8e:	f200 8349 	bhi.w	8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d92:	428a      	cmp	r2, r1
 8018d94:	f280 8110 	bge.w	8018fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	f300 8119 	bgt.w	8018fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018d9e:	4299      	cmp	r1, r3
 8018da0:	f280 811d 	bge.w	8018fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018da4:	2502      	movs	r5, #2
 8018da6:	2701      	movs	r7, #1
 8018da8:	46a9      	mov	r9, r5
 8018daa:	46b8      	mov	r8, r7
 8018dac:	f04f 0a00 	mov.w	sl, #0
 8018db0:	4621      	mov	r1, r4
 8018db2:	a849      	add	r0, sp, #292	; 0x124
 8018db4:	f003 fc4c 	bl	801c650 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018db8:	4622      	mov	r2, r4
 8018dba:	4653      	mov	r3, sl
 8018dbc:	a949      	add	r1, sp, #292	; 0x124
 8018dbe:	f8cd 9000 	str.w	r9, [sp]
 8018dc2:	a819      	add	r0, sp, #100	; 0x64
 8018dc4:	f003 fd74 	bl	801c8b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018dc8:	4622      	mov	r2, r4
 8018dca:	4653      	mov	r3, sl
 8018dcc:	a949      	add	r1, sp, #292	; 0x124
 8018dce:	f8cd 8000 	str.w	r8, [sp]
 8018dd2:	a829      	add	r0, sp, #164	; 0xa4
 8018dd4:	f003 fd6c 	bl	801c8b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018dd8:	4643      	mov	r3, r8
 8018dda:	4622      	mov	r2, r4
 8018ddc:	a949      	add	r1, sp, #292	; 0x124
 8018dde:	f8cd 9000 	str.w	r9, [sp]
 8018de2:	a839      	add	r0, sp, #228	; 0xe4
 8018de4:	f003 fd64 	bl	801c8b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018de8:	42af      	cmp	r7, r5
 8018dea:	af12      	add	r7, sp, #72	; 0x48
 8018dec:	bfb7      	itett	lt
 8018dee:	2300      	movlt	r3, #0
 8018df0:	2301      	movge	r3, #1
 8018df2:	ad29      	addlt	r5, sp, #164	; 0xa4
 8018df4:	ac19      	addlt	r4, sp, #100	; 0x64
 8018df6:	bfb1      	iteee	lt
 8018df8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018dfa:	ad19      	addge	r5, sp, #100	; 0x64
 8018dfc:	930e      	strge	r3, [sp, #56]	; 0x38
 8018dfe:	ac29      	addge	r4, sp, #164	; 0xa4
 8018e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e06:	e887 0003 	stmia.w	r7, {r0, r1}
 8018e0a:	b928      	cbnz	r0, 8018e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018e0c:	4b80      	ldr	r3, [pc, #512]	; (8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018e0e:	6818      	ldr	r0, [r3, #0]
 8018e10:	6803      	ldr	r3, [r0, #0]
 8018e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e14:	4798      	blx	r3
 8018e16:	6038      	str	r0, [r7, #0]
 8018e18:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018e1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e22:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018e24:	930c      	str	r3, [sp, #48]	; 0x30
 8018e26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018e28:	6963      	ldr	r3, [r4, #20]
 8018e2a:	440b      	add	r3, r1
 8018e2c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018e30:	4408      	add	r0, r1
 8018e32:	b200      	sxth	r0, r0
 8018e34:	4283      	cmp	r3, r0
 8018e36:	900d      	str	r0, [sp, #52]	; 0x34
 8018e38:	f280 80dd 	bge.w	8018ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018e3c:	428b      	cmp	r3, r1
 8018e3e:	da08      	bge.n	8018e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018e40:	2a00      	cmp	r2, #0
 8018e42:	dd06      	ble.n	8018e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018e44:	1acb      	subs	r3, r1, r3
 8018e46:	429a      	cmp	r2, r3
 8018e48:	f2c0 80e4 	blt.w	8019014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	f300 80e2 	bgt.w	8019016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018e52:	6967      	ldr	r7, [r4, #20]
 8018e54:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e5a:	443b      	add	r3, r7
 8018e5c:	461f      	mov	r7, r3
 8018e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e60:	1bdf      	subs	r7, r3, r7
 8018e62:	4297      	cmp	r7, r2
 8018e64:	bfa8      	it	ge
 8018e66:	4617      	movge	r7, r2
 8018e68:	2f00      	cmp	r7, #0
 8018e6a:	f340 8166 	ble.w	801913a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018e6e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018e70:	6829      	ldr	r1, [r5, #0]
 8018e72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e76:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018e7a:	4411      	add	r1, r2
 8018e7c:	6820      	ldr	r0, [r4, #0]
 8018e7e:	4299      	cmp	r1, r3
 8018e80:	dd1a      	ble.n	8018eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018e82:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018e86:	4402      	add	r2, r0
 8018e88:	440b      	add	r3, r1
 8018e8a:	b21b      	sxth	r3, r3
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	dc13      	bgt.n	8018eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e92:	a912      	add	r1, sp, #72	; 0x48
 8018e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	9206      	str	r2, [sp, #24]
 8018e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e9e:	9500      	str	r5, [sp, #0]
 8018ea0:	9205      	str	r2, [sp, #20]
 8018ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ea4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018ea8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018eaa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018eae:	aa49      	add	r2, sp, #292	; 0x124
 8018eb0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018eb4:	4623      	mov	r3, r4
 8018eb6:	47c8      	blx	r9
 8018eb8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018ebc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018ec0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ec8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018ecc:	68a1      	ldr	r1, [r4, #8]
 8018ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ed2:	ed94 6a08 	vldr	s12, [r4, #32]
 8018ed6:	edd4 6a07 	vldr	s13, [r4, #28]
 8018eda:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018ede:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018ee2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018eea:	edc4 6a07 	vstr	s13, [r4, #28]
 8018eee:	441a      	add	r2, r3
 8018ef0:	6963      	ldr	r3, [r4, #20]
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	6022      	str	r2, [r4, #0]
 8018ef6:	6163      	str	r3, [r4, #20]
 8018ef8:	69a3      	ldr	r3, [r4, #24]
 8018efa:	3b01      	subs	r3, #1
 8018efc:	61a3      	str	r3, [r4, #24]
 8018efe:	6923      	ldr	r3, [r4, #16]
 8018f00:	440b      	add	r3, r1
 8018f02:	68e1      	ldr	r1, [r4, #12]
 8018f04:	428b      	cmp	r3, r1
 8018f06:	6123      	str	r3, [r4, #16]
 8018f08:	db15      	blt.n	8018f36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018f0a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018f0e:	3201      	adds	r2, #1
 8018f10:	1a5b      	subs	r3, r3, r1
 8018f12:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018f16:	6022      	str	r2, [r4, #0]
 8018f18:	6123      	str	r3, [r4, #16]
 8018f1a:	edc4 6a07 	vstr	s13, [r4, #28]
 8018f1e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018f22:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018f26:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018f2a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f32:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018f36:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018f3a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018f3e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f46:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018f4a:	68a9      	ldr	r1, [r5, #8]
 8018f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f50:	ed95 6a08 	vldr	s12, [r5, #32]
 8018f54:	edd5 6a07 	vldr	s13, [r5, #28]
 8018f58:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018f5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018f60:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018f64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f68:	edc5 6a07 	vstr	s13, [r5, #28]
 8018f6c:	441a      	add	r2, r3
 8018f6e:	696b      	ldr	r3, [r5, #20]
 8018f70:	3301      	adds	r3, #1
 8018f72:	602a      	str	r2, [r5, #0]
 8018f74:	616b      	str	r3, [r5, #20]
 8018f76:	69ab      	ldr	r3, [r5, #24]
 8018f78:	3b01      	subs	r3, #1
 8018f7a:	61ab      	str	r3, [r5, #24]
 8018f7c:	692b      	ldr	r3, [r5, #16]
 8018f7e:	440b      	add	r3, r1
 8018f80:	68e9      	ldr	r1, [r5, #12]
 8018f82:	428b      	cmp	r3, r1
 8018f84:	612b      	str	r3, [r5, #16]
 8018f86:	db15      	blt.n	8018fb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018f88:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018f8c:	3201      	adds	r2, #1
 8018f8e:	1a5b      	subs	r3, r3, r1
 8018f90:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018f94:	602a      	str	r2, [r5, #0]
 8018f96:	612b      	str	r3, [r5, #16]
 8018f98:	edc5 6a07 	vstr	s13, [r5, #28]
 8018f9c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018fa0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018fa4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018fa8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fb0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018fb4:	3f01      	subs	r7, #1
 8018fb6:	e757      	b.n	8018e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018fb8:	4299      	cmp	r1, r3
 8018fba:	dc13      	bgt.n	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	da14      	bge.n	8018fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018fc0:	2502      	movs	r5, #2
 8018fc2:	2703      	movs	r7, #3
 8018fc4:	f04f 0800 	mov.w	r8, #0
 8018fc8:	46a9      	mov	r9, r5
 8018fca:	f04f 0a01 	mov.w	sl, #1
 8018fce:	e6ef      	b.n	8018db0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018fd0:	2501      	movs	r5, #1
 8018fd2:	2700      	movs	r7, #0
 8018fd4:	46a9      	mov	r9, r5
 8018fd6:	46b8      	mov	r8, r7
 8018fd8:	f04f 0a02 	mov.w	sl, #2
 8018fdc:	e6e8      	b.n	8018db0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018fde:	2501      	movs	r5, #1
 8018fe0:	2702      	movs	r7, #2
 8018fe2:	e6e1      	b.n	8018da8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018fe4:	2500      	movs	r5, #0
 8018fe6:	2701      	movs	r7, #1
 8018fe8:	e7f4      	b.n	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018fea:	2702      	movs	r7, #2
 8018fec:	2503      	movs	r5, #3
 8018fee:	f04f 0900 	mov.w	r9, #0
 8018ff2:	46b8      	mov	r8, r7
 8018ff4:	e7e9      	b.n	8018fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	e728      	b.n	8018e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018ffa:	bf00      	nop
 8018ffc:	200152cc 	.word	0x200152cc
 8019000:	fffd8f01 	.word	0xfffd8f01
 8019004:	00027100 	.word	0x00027100
 8019008:	0004e1ff 	.word	0x0004e1ff
 801900c:	0004e1fe 	.word	0x0004e1fe
 8019010:	200152d4 	.word	0x200152d4
 8019014:	4613      	mov	r3, r2
 8019016:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019018:	469e      	mov	lr, r3
 801901a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801901c:	469c      	mov	ip, r3
 801901e:	9111      	str	r1, [sp, #68]	; 0x44
 8019020:	f04f 0900 	mov.w	r9, #0
 8019024:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019028:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801902c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019030:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019034:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019038:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801903c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019040:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019044:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019048:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801904c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019050:	f1bc 0f00 	cmp.w	ip, #0
 8019054:	d147      	bne.n	80190e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019056:	eb03 0c07 	add.w	ip, r3, r7
 801905a:	1ad7      	subs	r7, r2, r3
 801905c:	f1b9 0f00 	cmp.w	r9, #0
 8019060:	d009      	beq.n	8019076 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019062:	9029      	str	r0, [sp, #164]	; 0xa4
 8019064:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019068:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801906c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019070:	912d      	str	r1, [sp, #180]	; 0xb4
 8019072:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019076:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019078:	f04f 0800 	mov.w	r8, #0
 801907c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019080:	9111      	str	r1, [sp, #68]	; 0x44
 8019082:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019086:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801908a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801908e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019092:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019096:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801909a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801909e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80190a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80190a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80190aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80190ae:	f1be 0f00 	cmp.w	lr, #0
 80190b2:	d031      	beq.n	8019118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80190b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80190b6:	4450      	add	r0, sl
 80190b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80190bc:	4431      	add	r1, r6
 80190be:	ee37 7a04 	vadd.f32	s14, s14, s8
 80190c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80190c6:	4549      	cmp	r1, r9
 80190c8:	db08      	blt.n	80190dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80190ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80190ce:	3001      	adds	r0, #1
 80190d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80190d4:	eba1 0109 	sub.w	r1, r1, r9
 80190d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80190dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80190e0:	f04f 0801 	mov.w	r8, #1
 80190e4:	e7e3      	b.n	80190ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80190e6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80190e8:	4450      	add	r0, sl
 80190ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80190ee:	4431      	add	r1, r6
 80190f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80190f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80190f8:	4541      	cmp	r1, r8
 80190fa:	db08      	blt.n	801910e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80190fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019100:	3001      	adds	r0, #1
 8019102:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019106:	eba1 0108 	sub.w	r1, r1, r8
 801910a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801910e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019112:	f04f 0901 	mov.w	r9, #1
 8019116:	e79b      	b.n	8019050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019118:	449c      	add	ip, r3
 801911a:	1aff      	subs	r7, r7, r3
 801911c:	f1b8 0f00 	cmp.w	r8, #0
 8019120:	d009      	beq.n	8019136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019122:	9019      	str	r0, [sp, #100]	; 0x64
 8019124:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019128:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801912c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019130:	911d      	str	r1, [sp, #116]	; 0x74
 8019132:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019136:	1ad2      	subs	r2, r2, r3
 8019138:	e68b      	b.n	8018e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801913a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801913c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801913e:	2b00      	cmp	r3, #0
 8019140:	f000 80d1 	beq.w	80192e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019144:	ad19      	add	r5, sp, #100	; 0x64
 8019146:	ac39      	add	r4, sp, #228	; 0xe4
 8019148:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801914a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801914e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019152:	930c      	str	r3, [sp, #48]	; 0x30
 8019154:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019156:	6963      	ldr	r3, [r4, #20]
 8019158:	440b      	add	r3, r1
 801915a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801915e:	4408      	add	r0, r1
 8019160:	b200      	sxth	r0, r0
 8019162:	4283      	cmp	r3, r0
 8019164:	900d      	str	r0, [sp, #52]	; 0x34
 8019166:	f280 80c1 	bge.w	80192ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801916a:	428b      	cmp	r3, r1
 801916c:	da08      	bge.n	8019180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801916e:	2a00      	cmp	r2, #0
 8019170:	dd06      	ble.n	8019180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019172:	1acb      	subs	r3, r1, r3
 8019174:	429a      	cmp	r2, r3
 8019176:	f2c0 80bb 	blt.w	80192f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801917a:	2b00      	cmp	r3, #0
 801917c:	f300 80b9 	bgt.w	80192f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019180:	6967      	ldr	r7, [r4, #20]
 8019182:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019188:	443b      	add	r3, r7
 801918a:	461f      	mov	r7, r3
 801918c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801918e:	1bdf      	subs	r7, r3, r7
 8019190:	4297      	cmp	r7, r2
 8019192:	bfa8      	it	ge
 8019194:	4617      	movge	r7, r2
 8019196:	2f00      	cmp	r7, #0
 8019198:	f340 813c 	ble.w	8019414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801919c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801919e:	6829      	ldr	r1, [r5, #0]
 80191a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191a4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80191a8:	4411      	add	r1, r2
 80191aa:	6820      	ldr	r0, [r4, #0]
 80191ac:	4299      	cmp	r1, r3
 80191ae:	dd1a      	ble.n	80191e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80191b0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80191b4:	4402      	add	r2, r0
 80191b6:	440b      	add	r3, r1
 80191b8:	b21b      	sxth	r3, r3
 80191ba:	429a      	cmp	r2, r3
 80191bc:	dc13      	bgt.n	80191e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80191be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80191c0:	a912      	add	r1, sp, #72	; 0x48
 80191c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	9206      	str	r2, [sp, #24]
 80191ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80191cc:	9500      	str	r5, [sp, #0]
 80191ce:	9205      	str	r2, [sp, #20]
 80191d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191d2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80191d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80191d8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80191dc:	aa49      	add	r2, sp, #292	; 0x124
 80191de:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80191e2:	4623      	mov	r3, r4
 80191e4:	47c8      	blx	r9
 80191e6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80191ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80191ee:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80191f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80191f6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80191fa:	68a1      	ldr	r1, [r4, #8]
 80191fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019200:	ed94 6a08 	vldr	s12, [r4, #32]
 8019204:	edd4 6a07 	vldr	s13, [r4, #28]
 8019208:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801920c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019210:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019214:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019218:	edc4 6a07 	vstr	s13, [r4, #28]
 801921c:	441a      	add	r2, r3
 801921e:	6963      	ldr	r3, [r4, #20]
 8019220:	3301      	adds	r3, #1
 8019222:	6022      	str	r2, [r4, #0]
 8019224:	6163      	str	r3, [r4, #20]
 8019226:	69a3      	ldr	r3, [r4, #24]
 8019228:	3b01      	subs	r3, #1
 801922a:	61a3      	str	r3, [r4, #24]
 801922c:	6923      	ldr	r3, [r4, #16]
 801922e:	440b      	add	r3, r1
 8019230:	68e1      	ldr	r1, [r4, #12]
 8019232:	428b      	cmp	r3, r1
 8019234:	6123      	str	r3, [r4, #16]
 8019236:	db15      	blt.n	8019264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019238:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801923c:	3201      	adds	r2, #1
 801923e:	1a5b      	subs	r3, r3, r1
 8019240:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019244:	6022      	str	r2, [r4, #0]
 8019246:	6123      	str	r3, [r4, #16]
 8019248:	edc4 6a07 	vstr	s13, [r4, #28]
 801924c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019250:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019254:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019258:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801925c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019260:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019264:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019268:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801926c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019274:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019278:	68a9      	ldr	r1, [r5, #8]
 801927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801927e:	ed95 6a08 	vldr	s12, [r5, #32]
 8019282:	edd5 6a07 	vldr	s13, [r5, #28]
 8019286:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801928a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801928e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019296:	edc5 6a07 	vstr	s13, [r5, #28]
 801929a:	441a      	add	r2, r3
 801929c:	696b      	ldr	r3, [r5, #20]
 801929e:	3301      	adds	r3, #1
 80192a0:	602a      	str	r2, [r5, #0]
 80192a2:	616b      	str	r3, [r5, #20]
 80192a4:	69ab      	ldr	r3, [r5, #24]
 80192a6:	3b01      	subs	r3, #1
 80192a8:	61ab      	str	r3, [r5, #24]
 80192aa:	692b      	ldr	r3, [r5, #16]
 80192ac:	440b      	add	r3, r1
 80192ae:	68e9      	ldr	r1, [r5, #12]
 80192b0:	428b      	cmp	r3, r1
 80192b2:	612b      	str	r3, [r5, #16]
 80192b4:	db15      	blt.n	80192e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80192b6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80192ba:	3201      	adds	r2, #1
 80192bc:	1a5b      	subs	r3, r3, r1
 80192be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80192c2:	602a      	str	r2, [r5, #0]
 80192c4:	612b      	str	r3, [r5, #16]
 80192c6:	edc5 6a07 	vstr	s13, [r5, #28]
 80192ca:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80192ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80192d2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80192d6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80192da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80192e2:	3f01      	subs	r7, #1
 80192e4:	e757      	b.n	8019196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80192e6:	ad39      	add	r5, sp, #228	; 0xe4
 80192e8:	ac19      	add	r4, sp, #100	; 0x64
 80192ea:	e72d      	b.n	8019148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80192ec:	4613      	mov	r3, r2
 80192ee:	e744      	b.n	801917a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80192f0:	4613      	mov	r3, r2
 80192f2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80192f4:	469e      	mov	lr, r3
 80192f6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80192fa:	461f      	mov	r7, r3
 80192fc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019300:	f04f 0900 	mov.w	r9, #0
 8019304:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019308:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801930c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019310:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019314:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019318:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801931a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801931e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019322:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019326:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801932a:	960e      	str	r6, [sp, #56]	; 0x38
 801932c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019330:	2f00      	cmp	r7, #0
 8019332:	d146      	bne.n	80193c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019334:	449c      	add	ip, r3
 8019336:	1ad7      	subs	r7, r2, r3
 8019338:	f1b9 0f00 	cmp.w	r9, #0
 801933c:	d009      	beq.n	8019352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801933e:	9039      	str	r0, [sp, #228]	; 0xe4
 8019340:	913d      	str	r1, [sp, #244]	; 0xf4
 8019342:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019346:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801934a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801934e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019352:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019354:	f04f 0800 	mov.w	r8, #0
 8019358:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801935c:	910e      	str	r1, [sp, #56]	; 0x38
 801935e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019362:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019366:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801936a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801936e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019372:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019376:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801937a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801937e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019382:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019386:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801938a:	f1be 0f00 	cmp.w	lr, #0
 801938e:	d030      	beq.n	80193f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019390:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019392:	4450      	add	r0, sl
 8019394:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019398:	4431      	add	r1, r6
 801939a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801939e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80193a2:	4549      	cmp	r1, r9
 80193a4:	db08      	blt.n	80193b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80193a6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80193aa:	3001      	adds	r0, #1
 80193ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80193b0:	eba1 0109 	sub.w	r1, r1, r9
 80193b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80193b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80193bc:	f04f 0801 	mov.w	r8, #1
 80193c0:	e7e3      	b.n	801938a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80193c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80193c4:	4450      	add	r0, sl
 80193c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80193ca:	4431      	add	r1, r6
 80193cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80193d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80193d4:	4541      	cmp	r1, r8
 80193d6:	db08      	blt.n	80193ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80193d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80193dc:	3001      	adds	r0, #1
 80193de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80193e2:	eba1 0108 	sub.w	r1, r1, r8
 80193e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80193ea:	3f01      	subs	r7, #1
 80193ec:	f04f 0901 	mov.w	r9, #1
 80193f0:	e79e      	b.n	8019330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80193f2:	449c      	add	ip, r3
 80193f4:	1aff      	subs	r7, r7, r3
 80193f6:	f1b8 0f00 	cmp.w	r8, #0
 80193fa:	d009      	beq.n	8019410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80193fc:	9019      	str	r0, [sp, #100]	; 0x64
 80193fe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019402:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019406:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801940a:	911d      	str	r1, [sp, #116]	; 0x74
 801940c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019410:	1ad2      	subs	r2, r2, r3
 8019412:	e6b5      	b.n	8019180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	b923      	cbnz	r3, 8019424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801941a:	4b04      	ldr	r3, [pc, #16]	; (801942c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801941c:	6818      	ldr	r0, [r3, #0]
 801941e:	6803      	ldr	r3, [r0, #0]
 8019420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019422:	4798      	blx	r3
 8019424:	b05b      	add	sp, #364	; 0x16c
 8019426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801942a:	bf00      	nop
 801942c:	200152d4 	.word	0x200152d4

08019430 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019430:	b570      	push	{r4, r5, r6, lr}
 8019432:	4604      	mov	r4, r0
 8019434:	2500      	movs	r5, #0
 8019436:	9804      	ldr	r0, [sp, #16]
 8019438:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801943c:	8025      	strh	r5, [r4, #0]
 801943e:	6061      	str	r1, [r4, #4]
 8019440:	7223      	strb	r3, [r4, #8]
 8019442:	7266      	strb	r6, [r4, #9]
 8019444:	60e0      	str	r0, [r4, #12]
 8019446:	8222      	strh	r2, [r4, #16]
 8019448:	8265      	strh	r5, [r4, #18]
 801944a:	82a5      	strh	r5, [r4, #20]
 801944c:	82e5      	strh	r5, [r4, #22]
 801944e:	8325      	strh	r5, [r4, #24]
 8019450:	8365      	strh	r5, [r4, #26]
 8019452:	83a5      	strh	r5, [r4, #28]
 8019454:	77a5      	strb	r5, [r4, #30]
 8019456:	b32e      	cbz	r6, 80194a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019458:	6803      	ldr	r3, [r0, #0]
 801945a:	695b      	ldr	r3, [r3, #20]
 801945c:	4798      	blx	r3
 801945e:	4606      	mov	r6, r0
 8019460:	b300      	cbz	r0, 80194a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019462:	68e0      	ldr	r0, [r4, #12]
 8019464:	4631      	mov	r1, r6
 8019466:	6803      	ldr	r3, [r0, #0]
 8019468:	68db      	ldr	r3, [r3, #12]
 801946a:	4798      	blx	r3
 801946c:	4605      	mov	r5, r0
 801946e:	b1c8      	cbz	r0, 80194a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019470:	7b43      	ldrb	r3, [r0, #13]
 8019472:	7a82      	ldrb	r2, [r0, #10]
 8019474:	005b      	lsls	r3, r3, #1
 8019476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801947a:	4313      	orrs	r3, r2
 801947c:	83a3      	strh	r3, [r4, #28]
 801947e:	7a63      	ldrb	r3, [r4, #9]
 8019480:	2b04      	cmp	r3, #4
 8019482:	d10f      	bne.n	80194a4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019484:	68e0      	ldr	r0, [r4, #12]
 8019486:	462a      	mov	r2, r5
 8019488:	4631      	mov	r1, r6
 801948a:	6803      	ldr	r3, [r0, #0]
 801948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801948e:	4798      	blx	r3
 8019490:	7b6b      	ldrb	r3, [r5, #13]
 8019492:	005b      	lsls	r3, r3, #1
 8019494:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019498:	7aab      	ldrb	r3, [r5, #10]
 801949a:	4313      	orrs	r3, r2
 801949c:	4418      	add	r0, r3
 801949e:	8ba3      	ldrh	r3, [r4, #28]
 80194a0:	4418      	add	r0, r3
 80194a2:	83a0      	strh	r0, [r4, #28]
 80194a4:	4620      	mov	r0, r4
 80194a6:	bd70      	pop	{r4, r5, r6, pc}

080194a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	2400      	movs	r4, #0
 80194ae:	b085      	sub	sp, #20
 80194b0:	4681      	mov	r9, r0
 80194b2:	4688      	mov	r8, r1
 80194b4:	4692      	mov	sl, r2
 80194b6:	469b      	mov	fp, r3
 80194b8:	4627      	mov	r7, r4
 80194ba:	4625      	mov	r5, r4
 80194bc:	4626      	mov	r6, r4
 80194be:	4554      	cmp	r4, sl
 80194c0:	da2a      	bge.n	8019518 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80194c2:	2300      	movs	r3, #0
 80194c4:	9303      	str	r3, [sp, #12]
 80194c6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80194ca:	429d      	cmp	r5, r3
 80194cc:	d004      	beq.n	80194d8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80194ce:	f242 030b 	movw	r3, #8203	; 0x200b
 80194d2:	429d      	cmp	r5, r3
 80194d4:	bf18      	it	ne
 80194d6:	462f      	movne	r7, r5
 80194d8:	ab03      	add	r3, sp, #12
 80194da:	4642      	mov	r2, r8
 80194dc:	4659      	mov	r1, fp
 80194de:	4648      	mov	r0, r9
 80194e0:	f002 fecc 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194e4:	4605      	mov	r5, r0
 80194e6:	b1b8      	cbz	r0, 8019518 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80194e8:	280a      	cmp	r0, #10
 80194ea:	d015      	beq.n	8019518 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80194ec:	9a03      	ldr	r2, [sp, #12]
 80194ee:	b18a      	cbz	r2, 8019514 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80194f0:	7b50      	ldrb	r0, [r2, #13]
 80194f2:	4639      	mov	r1, r7
 80194f4:	7a93      	ldrb	r3, [r2, #10]
 80194f6:	0040      	lsls	r0, r0, #1
 80194f8:	8895      	ldrh	r5, [r2, #4]
 80194fa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80194fe:	4303      	orrs	r3, r0
 8019500:	4640      	mov	r0, r8
 8019502:	9301      	str	r3, [sp, #4]
 8019504:	f8d8 3000 	ldr.w	r3, [r8]
 8019508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801950a:	4798      	blx	r3
 801950c:	9b01      	ldr	r3, [sp, #4]
 801950e:	4418      	add	r0, r3
 8019510:	4406      	add	r6, r0
 8019512:	b2b6      	uxth	r6, r6
 8019514:	3401      	adds	r4, #1
 8019516:	e7d2      	b.n	80194be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019518:	4630      	mov	r0, r6
 801951a:	b005      	add	sp, #20
 801951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019520 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019520:	2a02      	cmp	r2, #2
 8019522:	b530      	push	{r4, r5, lr}
 8019524:	d011      	beq.n	801954a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019526:	2a03      	cmp	r2, #3
 8019528:	d01c      	beq.n	8019564 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801952a:	2a01      	cmp	r2, #1
 801952c:	d10c      	bne.n	8019548 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801952e:	888b      	ldrh	r3, [r1, #4]
 8019530:	8801      	ldrh	r1, [r0, #0]
 8019532:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019536:	1a5b      	subs	r3, r3, r1
 8019538:	8844      	ldrh	r4, [r0, #2]
 801953a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801953e:	1a9b      	subs	r3, r3, r2
 8019540:	8004      	strh	r4, [r0, #0]
 8019542:	8081      	strh	r1, [r0, #4]
 8019544:	8043      	strh	r3, [r0, #2]
 8019546:	80c2      	strh	r2, [r0, #6]
 8019548:	bd30      	pop	{r4, r5, pc}
 801954a:	88cb      	ldrh	r3, [r1, #6]
 801954c:	8842      	ldrh	r2, [r0, #2]
 801954e:	1a9b      	subs	r3, r3, r2
 8019550:	88c2      	ldrh	r2, [r0, #6]
 8019552:	1a9b      	subs	r3, r3, r2
 8019554:	888a      	ldrh	r2, [r1, #4]
 8019556:	8801      	ldrh	r1, [r0, #0]
 8019558:	8043      	strh	r3, [r0, #2]
 801955a:	1a52      	subs	r2, r2, r1
 801955c:	8881      	ldrh	r1, [r0, #4]
 801955e:	1a52      	subs	r2, r2, r1
 8019560:	8002      	strh	r2, [r0, #0]
 8019562:	e7f1      	b.n	8019548 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019564:	88cb      	ldrh	r3, [r1, #6]
 8019566:	8841      	ldrh	r1, [r0, #2]
 8019568:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801956c:	1a5b      	subs	r3, r3, r1
 801956e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019572:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019576:	1a9b      	subs	r3, r3, r2
 8019578:	8045      	strh	r5, [r0, #2]
 801957a:	8082      	strh	r2, [r0, #4]
 801957c:	8003      	strh	r3, [r0, #0]
 801957e:	80c4      	strh	r4, [r0, #6]
 8019580:	e7e2      	b.n	8019548 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019586:	b09f      	sub	sp, #124	; 0x7c
 8019588:	9116      	str	r1, [sp, #88]	; 0x58
 801958a:	9317      	str	r3, [sp, #92]	; 0x5c
 801958c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801958e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019590:	8809      	ldrh	r1, [r1, #0]
 8019592:	889b      	ldrh	r3, [r3, #4]
 8019594:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019598:	440b      	add	r3, r1
 801959a:	9212      	str	r2, [sp, #72]	; 0x48
 801959c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80195a0:	b21b      	sxth	r3, r3
 80195a2:	9011      	str	r0, [sp, #68]	; 0x44
 80195a4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80195a8:	9310      	str	r3, [sp, #64]	; 0x40
 80195aa:	f8d8 3000 	ldr.w	r3, [r8]
 80195ae:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 80195b2:	7a59      	ldrb	r1, [r3, #9]
 80195b4:	7a1b      	ldrb	r3, [r3, #8]
 80195b6:	9114      	str	r1, [sp, #80]	; 0x50
 80195b8:	9315      	str	r3, [sp, #84]	; 0x54
 80195ba:	2a00      	cmp	r2, #0
 80195bc:	d06a      	beq.n	8019694 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80195be:	f898 3010 	ldrb.w	r3, [r8, #16]
 80195c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80195c4:	2b04      	cmp	r3, #4
 80195c6:	bf14      	ite	ne
 80195c8:	2301      	movne	r3, #1
 80195ca:	2302      	moveq	r3, #2
 80195cc:	4413      	add	r3, r2
 80195ce:	f04f 0900 	mov.w	r9, #0
 80195d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80195d4:	464c      	mov	r4, r9
 80195d6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80195da:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80195de:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80195e2:	4293      	cmp	r3, r2
 80195e4:	f280 808f 	bge.w	8019706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80195e8:	2300      	movs	r3, #0
 80195ea:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80195ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80195f2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80195f6:	429c      	cmp	r4, r3
 80195f8:	d006      	beq.n	8019608 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80195fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195fc:	f242 020b 	movw	r2, #8203	; 0x200b
 8019600:	4294      	cmp	r4, r2
 8019602:	bf18      	it	ne
 8019604:	4623      	movne	r3, r4
 8019606:	930d      	str	r3, [sp, #52]	; 0x34
 8019608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801960a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801960c:	f8d8 2000 	ldr.w	r2, [r8]
 8019610:	428b      	cmp	r3, r1
 8019612:	db41      	blt.n	8019698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019614:	6813      	ldr	r3, [r2, #0]
 8019616:	4610      	mov	r0, r2
 8019618:	695b      	ldr	r3, [r3, #20]
 801961a:	4798      	blx	r3
 801961c:	4604      	mov	r4, r0
 801961e:	f8d8 0000 	ldr.w	r0, [r8]
 8019622:	aa1d      	add	r2, sp, #116	; 0x74
 8019624:	4621      	mov	r1, r4
 8019626:	6803      	ldr	r3, [r0, #0]
 8019628:	689e      	ldr	r6, [r3, #8]
 801962a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801962e:	47b0      	blx	r6
 8019630:	901c      	str	r0, [sp, #112]	; 0x70
 8019632:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019636:	429c      	cmp	r4, r3
 8019638:	f000 80ea 	beq.w	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801963c:	f242 030b 	movw	r3, #8203	; 0x200b
 8019640:	429c      	cmp	r4, r3
 8019642:	f000 80e5 	beq.w	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019646:	2c00      	cmp	r4, #0
 8019648:	f000 80f7 	beq.w	801983a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801964c:	2c0a      	cmp	r4, #10
 801964e:	d060      	beq.n	8019712 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019650:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019652:	b36a      	cbz	r2, 80196b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019654:	8894      	ldrh	r4, [r2, #4]
 8019656:	f1bb 0f00 	cmp.w	fp, #0
 801965a:	d03b      	beq.n	80196d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801965c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019660:	f1bb 0f01 	cmp.w	fp, #1
 8019664:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019668:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801966c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019670:	ea49 0903 	orr.w	r9, r9, r3
 8019674:	d134      	bne.n	80196e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8019676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019678:	eba5 0509 	sub.w	r5, r5, r9
 801967c:	2b00      	cmp	r3, #0
 801967e:	d14f      	bne.n	8019720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019680:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019682:	eb09 0305 	add.w	r3, r9, r5
 8019686:	4413      	add	r3, r2
 8019688:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801968a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801968e:	4293      	cmp	r3, r2
 8019690:	da51      	bge.n	8019736 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019692:	e038      	b.n	8019706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019694:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019696:	e79a      	b.n	80195ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8019698:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801969c:	4659      	mov	r1, fp
 801969e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80196a0:	9301      	str	r3, [sp, #4]
 80196a2:	ab1d      	add	r3, sp, #116	; 0x74
 80196a4:	9300      	str	r3, [sp, #0]
 80196a6:	ab1c      	add	r3, sp, #112	; 0x70
 80196a8:	f002 fe31 	bl	801c30e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80196ac:	4604      	mov	r4, r0
 80196ae:	e7c0      	b.n	8019632 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80196b0:	f8d8 0000 	ldr.w	r0, [r8]
 80196b4:	6803      	ldr	r3, [r0, #0]
 80196b6:	691b      	ldr	r3, [r3, #16]
 80196b8:	4798      	blx	r3
 80196ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80196be:	4298      	cmp	r0, r3
 80196c0:	f000 80a6 	beq.w	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80196c4:	f242 030b 	movw	r3, #8203	; 0x200b
 80196c8:	4298      	cmp	r0, r3
 80196ca:	f000 80a1 	beq.w	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80196ce:	f1bb 0f00 	cmp.w	fp, #0
 80196d2:	d100      	bne.n	80196d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80196d4:	444d      	add	r5, r9
 80196d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80196d8:	2a00      	cmp	r2, #0
 80196da:	d1bf      	bne.n	801965c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80196dc:	4691      	mov	r9, r2
 80196de:	e097      	b.n	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80196e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	f000 80ab 	beq.w	801983e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80196e8:	f1bb 0f00 	cmp.w	fp, #0
 80196ec:	d118      	bne.n	8019720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80196ee:	f8d8 0000 	ldr.w	r0, [r8]
 80196f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80196f4:	6803      	ldr	r3, [r0, #0]
 80196f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196f8:	4798      	blx	r3
 80196fa:	4405      	add	r5, r0
 80196fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80196fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019700:	1aeb      	subs	r3, r5, r3
 8019702:	4293      	cmp	r3, r2
 8019704:	dd17      	ble.n	8019736 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019706:	2c00      	cmp	r4, #0
 8019708:	f000 8097 	beq.w	801983a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801970c:	2c0a      	cmp	r4, #10
 801970e:	f040 8085 	bne.w	801981c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019712:	240a      	movs	r4, #10
 8019714:	fab4 f084 	clz	r0, r4
 8019718:	0940      	lsrs	r0, r0, #5
 801971a:	b01f      	add	sp, #124	; 0x7c
 801971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019720:	f8d8 0000 	ldr.w	r0, [r8]
 8019724:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019726:	6803      	ldr	r3, [r0, #0]
 8019728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801972a:	4798      	blx	r3
 801972c:	f1bb 0f01 	cmp.w	fp, #1
 8019730:	eba5 0500 	sub.w	r5, r5, r0
 8019734:	d0a4      	beq.n	8019680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019736:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019738:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801973a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801973e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019742:	7b43      	ldrb	r3, [r0, #13]
 8019744:	4429      	add	r1, r5
 8019746:	015b      	lsls	r3, r3, #5
 8019748:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801974c:	7983      	ldrb	r3, [r0, #6]
 801974e:	4313      	orrs	r3, r2
 8019750:	440b      	add	r3, r1
 8019752:	42b3      	cmp	r3, r6
 8019754:	db5c      	blt.n	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019758:	4299      	cmp	r1, r3
 801975a:	da59      	bge.n	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801975c:	f8d8 0000 	ldr.w	r0, [r8]
 8019760:	42ae      	cmp	r6, r5
 8019762:	6803      	ldr	r3, [r0, #0]
 8019764:	bfcc      	ite	gt
 8019766:	1b76      	subgt	r6, r6, r5
 8019768:	2600      	movle	r6, #0
 801976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801976c:	bfc8      	it	gt
 801976e:	b2b6      	uxthgt	r6, r6
 8019770:	4798      	blx	r3
 8019772:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019774:	7b5a      	ldrb	r2, [r3, #13]
 8019776:	00d1      	lsls	r1, r2, #3
 8019778:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801977c:	7a19      	ldrb	r1, [r3, #8]
 801977e:	4339      	orrs	r1, r7
 8019780:	0657      	lsls	r7, r2, #25
 8019782:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019784:	bf48      	it	mi
 8019786:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801978a:	4407      	add	r7, r0
 801978c:	bf48      	it	mi
 801978e:	b209      	sxthmi	r1, r1
 8019790:	1a7f      	subs	r7, r7, r1
 8019792:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019794:	b2bf      	uxth	r7, r7
 8019796:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801979a:	fa0f fa87 	sxth.w	sl, r7
 801979e:	4551      	cmp	r1, sl
 80197a0:	dd3a      	ble.n	8019818 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80197a2:	0112      	lsls	r2, r2, #4
 80197a4:	79d8      	ldrb	r0, [r3, #7]
 80197a6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80197aa:	4302      	orrs	r2, r0
 80197ac:	4492      	add	sl, r2
 80197ae:	4551      	cmp	r1, sl
 80197b0:	dc2e      	bgt.n	8019810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80197b2:	1bcf      	subs	r7, r1, r7
 80197b4:	468a      	mov	sl, r1
 80197b6:	b2bf      	uxth	r7, r7
 80197b8:	9319      	str	r3, [sp, #100]	; 0x64
 80197ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197bc:	f8d8 0000 	ldr.w	r0, [r8]
 80197c0:	681a      	ldr	r2, [r3, #0]
 80197c2:	6801      	ldr	r1, [r0, #0]
 80197c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80197c6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80197c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80197ca:	9218      	str	r2, [sp, #96]	; 0x60
 80197cc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80197ce:	4788      	blx	r1
 80197d0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80197d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80197d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80197d8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80197dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80197de:	910a      	str	r1, [sp, #40]	; 0x28
 80197e0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80197e4:	9109      	str	r1, [sp, #36]	; 0x24
 80197e6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80197ea:	9305      	str	r3, [sp, #20]
 80197ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80197ee:	9206      	str	r2, [sp, #24]
 80197f0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80197f4:	442e      	add	r6, r5
 80197f6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80197fa:	b236      	sxth	r6, r6
 80197fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197fe:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019802:	9600      	str	r6, [sp, #0]
 8019804:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	9811      	ldr	r0, [sp, #68]	; 0x44
 801980a:	685b      	ldr	r3, [r3, #4]
 801980c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801980e:	47b0      	blx	r6
 8019810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019812:	3301      	adds	r3, #1
 8019814:	930e      	str	r3, [sp, #56]	; 0x38
 8019816:	e6e2      	b.n	80195de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8019818:	2700      	movs	r7, #0
 801981a:	e7cd      	b.n	80197b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801981c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801981e:	3501      	adds	r5, #1
 8019820:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019822:	429d      	cmp	r5, r3
 8019824:	f6bf af76 	bge.w	8019714 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019828:	4659      	mov	r1, fp
 801982a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801982c:	f7ea fa6a 	bl	8003d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019830:	4604      	mov	r4, r0
 8019832:	b110      	cbz	r0, 801983a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019834:	280a      	cmp	r0, #10
 8019836:	d1f2      	bne.n	801981e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8019838:	e76b      	b.n	8019712 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801983a:	2400      	movs	r4, #0
 801983c:	e76a      	b.n	8019714 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801983e:	f1bb 0f00 	cmp.w	fp, #0
 8019842:	f43f af5b 	beq.w	80196fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8019846:	e776      	b.n	8019736 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08019848 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019848:	b530      	push	{r4, r5, lr}
 801984a:	8a44      	ldrh	r4, [r0, #18]
 801984c:	8ac5      	ldrh	r5, [r0, #22]
 801984e:	82c3      	strh	r3, [r0, #22]
 8019850:	442c      	add	r4, r5
 8019852:	1ae4      	subs	r4, r4, r3
 8019854:	8b03      	ldrh	r3, [r0, #24]
 8019856:	8244      	strh	r4, [r0, #18]
 8019858:	8a84      	ldrh	r4, [r0, #20]
 801985a:	4422      	add	r2, r4
 801985c:	440c      	add	r4, r1
 801985e:	1a59      	subs	r1, r3, r1
 8019860:	8342      	strh	r2, [r0, #26]
 8019862:	8284      	strh	r4, [r0, #20]
 8019864:	8301      	strh	r1, [r0, #24]
 8019866:	bd30      	pop	{r4, r5, pc}

08019868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801986c:	7a43      	ldrb	r3, [r0, #9]
 801986e:	b087      	sub	sp, #28
 8019870:	4604      	mov	r4, r0
 8019872:	460f      	mov	r7, r1
 8019874:	1eda      	subs	r2, r3, #3
 8019876:	b2d2      	uxtb	r2, r2
 8019878:	2900      	cmp	r1, #0
 801987a:	d036      	beq.n	80198ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801987c:	2a01      	cmp	r2, #1
 801987e:	d932      	bls.n	80198e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019880:	1e58      	subs	r0, r3, #1
 8019882:	f1d0 0b00 	rsbs	fp, r0, #0
 8019886:	eb4b 0b00 	adc.w	fp, fp, r0
 801988a:	1e99      	subs	r1, r3, #2
 801988c:	424b      	negs	r3, r1
 801988e:	414b      	adcs	r3, r1
 8019890:	9303      	str	r3, [sp, #12]
 8019892:	2300      	movs	r3, #0
 8019894:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019898:	2500      	movs	r5, #0
 801989a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801989e:	46a9      	mov	r9, r5
 80198a0:	8265      	strh	r5, [r4, #18]
 80198a2:	82a5      	strh	r5, [r4, #20]
 80198a4:	2300      	movs	r3, #0
 80198a6:	9305      	str	r3, [sp, #20]
 80198a8:	8823      	ldrh	r3, [r4, #0]
 80198aa:	2b20      	cmp	r3, #32
 80198ac:	d02b      	beq.n	8019906 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80198ae:	eba3 020a 	sub.w	r2, r3, sl
 80198b2:	4256      	negs	r6, r2
 80198b4:	4156      	adcs	r6, r2
 80198b6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80198ba:	4293      	cmp	r3, r2
 80198bc:	d004      	beq.n	80198c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80198be:	4553      	cmp	r3, sl
 80198c0:	bf16      	itet	ne
 80198c2:	4699      	movne	r9, r3
 80198c4:	2601      	moveq	r6, #1
 80198c6:	2600      	movne	r6, #0
 80198c8:	ab05      	add	r3, sp, #20
 80198ca:	68e2      	ldr	r2, [r4, #12]
 80198cc:	7a21      	ldrb	r1, [r4, #8]
 80198ce:	6860      	ldr	r0, [r4, #4]
 80198d0:	f002 fcd4 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80198d4:	8020      	strh	r0, [r4, #0]
 80198d6:	b9c8      	cbnz	r0, 801990c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80198d8:	8b22      	ldrh	r2, [r4, #24]
 80198da:	2300      	movs	r3, #0
 80198dc:	4611      	mov	r1, r2
 80198de:	4620      	mov	r0, r4
 80198e0:	f7ff ffb2 	bl	8019848 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80198e4:	e066      	b.n	80199b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80198e6:	468b      	mov	fp, r1
 80198e8:	e7cf      	b.n	801988a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80198ea:	3b01      	subs	r3, #1
 80198ec:	2a01      	cmp	r2, #1
 80198ee:	9103      	str	r1, [sp, #12]
 80198f0:	468b      	mov	fp, r1
 80198f2:	bf8c      	ite	hi
 80198f4:	2200      	movhi	r2, #0
 80198f6:	2201      	movls	r2, #1
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	9202      	str	r2, [sp, #8]
 80198fc:	bf8c      	ite	hi
 80198fe:	2300      	movhi	r3, #0
 8019900:	2301      	movls	r3, #1
 8019902:	9301      	str	r3, [sp, #4]
 8019904:	e7c8      	b.n	8019898 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019906:	4699      	mov	r9, r3
 8019908:	2601      	movs	r6, #1
 801990a:	e7dd      	b.n	80198c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801990c:	8ae3      	ldrh	r3, [r4, #22]
 801990e:	280a      	cmp	r0, #10
 8019910:	f103 0301 	add.w	r3, r3, #1
 8019914:	82e3      	strh	r3, [r4, #22]
 8019916:	d0df      	beq.n	80198d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019918:	9a05      	ldr	r2, [sp, #20]
 801991a:	bb42      	cbnz	r2, 801996e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801991c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019920:	4298      	cmp	r0, r3
 8019922:	d001      	beq.n	8019928 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019924:	4550      	cmp	r0, sl
 8019926:	d1bd      	bne.n	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019928:	8823      	ldrh	r3, [r4, #0]
 801992a:	8b21      	ldrh	r1, [r4, #24]
 801992c:	2b20      	cmp	r3, #32
 801992e:	d001      	beq.n	8019934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019930:	4553      	cmp	r3, sl
 8019932:	d131      	bne.n	8019998 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019934:	2e00      	cmp	r6, #0
 8019936:	bf0a      	itet	eq
 8019938:	460d      	moveq	r5, r1
 801993a:	4630      	movne	r0, r6
 801993c:	2001      	moveq	r0, #1
 801993e:	440a      	add	r2, r1
 8019940:	8aa3      	ldrh	r3, [r4, #20]
 8019942:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019946:	b292      	uxth	r2, r2
 8019948:	8322      	strh	r2, [r4, #24]
 801994a:	4413      	add	r3, r2
 801994c:	2f00      	cmp	r7, #0
 801994e:	d03a      	beq.n	80199c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019950:	f1bb 0f00 	cmp.w	fp, #0
 8019954:	d102      	bne.n	801995c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019956:	9903      	ldr	r1, [sp, #12]
 8019958:	b301      	cbz	r1, 801999c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801995a:	b1f8      	cbz	r0, 801999c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801995c:	8ba1      	ldrh	r1, [r4, #28]
 801995e:	4419      	add	r1, r3
 8019960:	458c      	cmp	ip, r1
 8019962:	da2a      	bge.n	80199ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019964:	8a61      	ldrh	r1, [r4, #18]
 8019966:	b341      	cbz	r1, 80199ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019968:	4563      	cmp	r3, ip
 801996a:	dd9b      	ble.n	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801996c:	e01c      	b.n	80199a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801996e:	8893      	ldrh	r3, [r2, #4]
 8019970:	4649      	mov	r1, r9
 8019972:	8023      	strh	r3, [r4, #0]
 8019974:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019978:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801997c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019980:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019984:	ea48 0800 	orr.w	r8, r8, r0
 8019988:	68e0      	ldr	r0, [r4, #12]
 801998a:	6803      	ldr	r3, [r0, #0]
 801998c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801998e:	4798      	blx	r3
 8019990:	eb08 0200 	add.w	r2, r8, r0
 8019994:	b292      	uxth	r2, r2
 8019996:	e7c7      	b.n	8019928 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019998:	2000      	movs	r0, #0
 801999a:	e7d0      	b.n	801993e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801999c:	4563      	cmp	r3, ip
 801999e:	dd81      	ble.n	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199a0:	8a63      	ldrh	r3, [r4, #18]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	f43f af7e 	beq.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199a8:	2301      	movs	r3, #1
 80199aa:	8ba2      	ldrh	r2, [r4, #28]
 80199ac:	77a3      	strb	r3, [r4, #30]
 80199ae:	8b63      	ldrh	r3, [r4, #26]
 80199b0:	4413      	add	r3, r2
 80199b2:	8363      	strh	r3, [r4, #26]
 80199b4:	b007      	add	sp, #28
 80199b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ba:	2300      	movs	r3, #0
 80199bc:	4611      	mov	r1, r2
 80199be:	4620      	mov	r0, r4
 80199c0:	f7ff ff42 	bl	8019848 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80199c4:	e76e      	b.n	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199c6:	4563      	cmp	r3, ip
 80199c8:	dd14      	ble.n	80199f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80199ca:	9b02      	ldr	r3, [sp, #8]
 80199cc:	b113      	cbz	r3, 80199d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80199ce:	2301      	movs	r3, #1
 80199d0:	460a      	mov	r2, r1
 80199d2:	e783      	b.n	80198dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80199d4:	9b01      	ldr	r3, [sp, #4]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f43f af64 	beq.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199dc:	2800      	cmp	r0, #0
 80199de:	f47f af61 	bne.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199e2:	b116      	cbz	r6, 80199ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80199e4:	2301      	movs	r3, #1
 80199e6:	462a      	mov	r2, r5
 80199e8:	e779      	b.n	80198de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80199ea:	8a63      	ldrh	r3, [r4, #18]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	f43f af59 	beq.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199f2:	e7df      	b.n	80199b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80199f4:	2800      	cmp	r0, #0
 80199f6:	f47f af55 	bne.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80199fa:	2e00      	cmp	r6, #0
 80199fc:	f43f af52 	beq.w	80198a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019a00:	2301      	movs	r3, #1
 8019a02:	462a      	mov	r2, r5
 8019a04:	e7db      	b.n	80199be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019a06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019a06:	b530      	push	{r4, r5, lr}
 8019a08:	4605      	mov	r5, r0
 8019a0a:	b08b      	sub	sp, #44	; 0x2c
 8019a0c:	b191      	cbz	r1, 8019a34 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8019a0e:	2401      	movs	r4, #1
 8019a10:	e9cd 3100 	strd	r3, r1, [sp]
 8019a14:	4613      	mov	r3, r2
 8019a16:	4601      	mov	r1, r0
 8019a18:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019a1c:	a802      	add	r0, sp, #8
 8019a1e:	f7ff fd07 	bl	8019430 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019a22:	2100      	movs	r1, #0
 8019a24:	a802      	add	r0, sp, #8
 8019a26:	f7ff ff1f 	bl	8019868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019a2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019a2e:	b163      	cbz	r3, 8019a4a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019a30:	3401      	adds	r4, #1
 8019a32:	e7f6      	b.n	8019a22 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019a34:	2401      	movs	r4, #1
 8019a36:	f002 fced 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a3a:	280a      	cmp	r0, #10
 8019a3c:	4628      	mov	r0, r5
 8019a3e:	bf08      	it	eq
 8019a40:	3401      	addeq	r4, #1
 8019a42:	f002 fce7 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a46:	2800      	cmp	r0, #0
 8019a48:	d1f7      	bne.n	8019a3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019a4a:	b2a0      	uxth	r0, r4
 8019a4c:	b00b      	add	sp, #44	; 0x2c
 8019a4e:	bd30      	pop	{r4, r5, pc}

08019a50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a54:	b0e5      	sub	sp, #404	; 0x194
 8019a56:	4689      	mov	r9, r1
 8019a58:	461c      	mov	r4, r3
 8019a5a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8019a5e:	900a      	str	r0, [sp, #40]	; 0x28
 8019a60:	f1ba 0f00 	cmp.w	sl, #0
 8019a64:	f000 80b4 	beq.w	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f000 80b0 	beq.w	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019a70:	7ba3      	ldrb	r3, [r4, #14]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	f000 80ac 	beq.w	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019a78:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8019a7c:	6810      	ldr	r0, [r2, #0]
 8019a7e:	6851      	ldr	r1, [r2, #4]
 8019a80:	2500      	movs	r5, #0
 8019a82:	4643      	mov	r3, r8
 8019a84:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019a88:	950f      	str	r5, [sp, #60]	; 0x3c
 8019a8a:	af19      	add	r7, sp, #100	; 0x64
 8019a8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019a90:	79a2      	ldrb	r2, [r4, #6]
 8019a92:	c303      	stmia	r3!, {r0, r1}
 8019a94:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019a98:	a90f      	add	r1, sp, #60	; 0x3c
 8019a9a:	4640      	mov	r0, r8
 8019a9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019aa0:	f7ff fd3e 	bl	8019520 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019aa4:	a90f      	add	r1, sp, #60	; 0x3c
 8019aa6:	79a2      	ldrb	r2, [r4, #6]
 8019aa8:	4608      	mov	r0, r1
 8019aaa:	f7ff fd39 	bl	8019520 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019aae:	4638      	mov	r0, r7
 8019ab0:	f002 f884 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 8019ab4:	6820      	ldr	r0, [r4, #0]
 8019ab6:	6803      	ldr	r3, [r0, #0]
 8019ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aba:	4798      	blx	r3
 8019abc:	4606      	mov	r6, r0
 8019abe:	6820      	ldr	r0, [r4, #0]
 8019ac0:	6803      	ldr	r3, [r0, #0]
 8019ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ac4:	4798      	blx	r3
 8019ac6:	4633      	mov	r3, r6
 8019ac8:	9000      	str	r0, [sp, #0]
 8019aca:	4651      	mov	r1, sl
 8019acc:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8019ace:	4638      	mov	r0, r7
 8019ad0:	f002 f8cf 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ad4:	7923      	ldrb	r3, [r4, #4]
 8019ad6:	6820      	ldr	r0, [r4, #0]
 8019ad8:	9308      	str	r3, [sp, #32]
 8019ada:	6803      	ldr	r3, [r0, #0]
 8019adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ade:	4798      	blx	r3
 8019ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ae4:	181e      	adds	r6, r3, r0
 8019ae6:	42ae      	cmp	r6, r5
 8019ae8:	dd06      	ble.n	8019af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8019aea:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019aee:	4282      	cmp	r2, r0
 8019af0:	bfa4      	itt	ge
 8019af2:	189d      	addge	r5, r3, r2
 8019af4:	fb95 f5f6 	sdivge	r5, r5, r6
 8019af8:	a832      	add	r0, sp, #200	; 0xc8
 8019afa:	f002 f85f 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 8019afe:	7c23      	ldrb	r3, [r4, #16]
 8019b00:	b17b      	cbz	r3, 8019b22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8019b02:	6820      	ldr	r0, [r4, #0]
 8019b04:	6803      	ldr	r3, [r0, #0]
 8019b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b08:	4798      	blx	r3
 8019b0a:	4683      	mov	fp, r0
 8019b0c:	6820      	ldr	r0, [r4, #0]
 8019b0e:	6803      	ldr	r3, [r0, #0]
 8019b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b12:	4798      	blx	r3
 8019b14:	465b      	mov	r3, fp
 8019b16:	9000      	str	r0, [sp, #0]
 8019b18:	4651      	mov	r1, sl
 8019b1a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8019b1c:	a832      	add	r0, sp, #200	; 0xc8
 8019b1e:	f002 f8a8 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b22:	7be1      	ldrb	r1, [r4, #15]
 8019b24:	a811      	add	r0, sp, #68	; 0x44
 8019b26:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019b2a:	7963      	ldrb	r3, [r4, #5]
 8019b2c:	1a52      	subs	r2, r2, r1
 8019b2e:	7c21      	ldrb	r1, [r4, #16]
 8019b30:	9101      	str	r1, [sp, #4]
 8019b32:	b292      	uxth	r2, r2
 8019b34:	6821      	ldr	r1, [r4, #0]
 8019b36:	9100      	str	r1, [sp, #0]
 8019b38:	a932      	add	r1, sp, #200	; 0xc8
 8019b3a:	f7ff fc79 	bl	8019430 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019b3e:	7c23      	ldrb	r3, [r4, #16]
 8019b40:	b9bb      	cbnz	r3, 8019b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8019b42:	fa1f fa86 	uxth.w	sl, r6
 8019b46:	2d00      	cmp	r5, #0
 8019b48:	dd45      	ble.n	8019bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019b4a:	4638      	mov	r0, r7
 8019b4c:	f002 fc62 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019b50:	2800      	cmp	r0, #0
 8019b52:	d03d      	beq.n	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019b54:	280a      	cmp	r0, #10
 8019b56:	d1f6      	bne.n	8019b46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019b58:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019b5c:	3d01      	subs	r5, #1
 8019b5e:	4453      	add	r3, sl
 8019b60:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019b64:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019b68:	eba3 030a 	sub.w	r3, r3, sl
 8019b6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019b70:	e7e9      	b.n	8019b46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019b72:	0073      	lsls	r3, r6, #1
 8019b74:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019b78:	fa1f fa86 	uxth.w	sl, r6
 8019b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b7e:	2d00      	cmp	r5, #0
 8019b80:	dd29      	ble.n	8019bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019b82:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019b86:	a811      	add	r0, sp, #68	; 0x44
 8019b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b8a:	428b      	cmp	r3, r1
 8019b8c:	bfd4      	ite	le
 8019b8e:	2100      	movle	r1, #0
 8019b90:	2101      	movgt	r1, #1
 8019b92:	f7ff fe69 	bl	8019868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019b96:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8019b9a:	3b01      	subs	r3, #1
 8019b9c:	b29b      	uxth	r3, r3
 8019b9e:	455b      	cmp	r3, fp
 8019ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ba2:	d005      	beq.n	8019bb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8019ba4:	7961      	ldrb	r1, [r4, #5]
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	f7ea f8ac 	bl	8003d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bae:	e7f4      	b.n	8019b9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8019bb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019bb4:	3d01      	subs	r5, #1
 8019bb6:	4453      	add	r3, sl
 8019bb8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019bbc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019bc0:	eba3 030a 	sub.w	r3, r3, sl
 8019bc4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019bc8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d1d6      	bne.n	8019b7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8019bd0:	b065      	add	sp, #404	; 0x194
 8019bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd6:	0075      	lsls	r5, r6, #1
 8019bd8:	f04f 0a00 	mov.w	sl, #0
 8019bdc:	7c23      	ldrb	r3, [r4, #16]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d066      	beq.n	8019cb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8019be2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019be6:	a811      	add	r0, sp, #68	; 0x44
 8019be8:	428d      	cmp	r5, r1
 8019bea:	bfd4      	ite	le
 8019bec:	2100      	movle	r1, #0
 8019bee:	2101      	movgt	r1, #1
 8019bf0:	f7ff fe3a 	bl	8019868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019bf4:	9b08      	ldr	r3, [sp, #32]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d055      	beq.n	8019ca6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019bfa:	f894 b010 	ldrb.w	fp, [r4, #16]
 8019bfe:	2264      	movs	r2, #100	; 0x64
 8019c00:	4639      	mov	r1, r7
 8019c02:	a84b      	add	r0, sp, #300	; 0x12c
 8019c04:	f00f fb14 	bl	8029230 <memcpy>
 8019c08:	f1bb 0f00 	cmp.w	fp, #0
 8019c0c:	d058      	beq.n	8019cc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8019c0e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8019c12:	7922      	ldrb	r2, [r4, #4]
 8019c14:	2a01      	cmp	r2, #1
 8019c16:	d13c      	bne.n	8019c92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019c18:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8019c1c:	1ac0      	subs	r0, r0, r3
 8019c1e:	2302      	movs	r3, #2
 8019c20:	fb90 f0f3 	sdiv	r0, r0, r3
 8019c24:	b200      	sxth	r0, r0
 8019c26:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019c2a:	4418      	add	r0, r3
 8019c2c:	7c23      	ldrb	r3, [r4, #16]
 8019c2e:	b200      	sxth	r0, r0
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d03a      	beq.n	8019caa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8019c34:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8019c38:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8019c3c:	9000      	str	r0, [sp, #0]
 8019c3e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8019c42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019c44:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019c48:	e9cd a703 	strd	sl, r7, [sp, #12]
 8019c4c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019c50:	464a      	mov	r2, r9
 8019c52:	2100      	movs	r1, #0
 8019c54:	f7ff fc95 	bl	8019582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	d1b9      	bne.n	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019c5c:	b2b2      	uxth	r2, r6
 8019c5e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019c62:	4611      	mov	r1, r2
 8019c64:	4413      	add	r3, r2
 8019c66:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8019c6a:	b21b      	sxth	r3, r3
 8019c6c:	1a52      	subs	r2, r2, r1
 8019c6e:	7c21      	ldrb	r1, [r4, #16]
 8019c70:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019c74:	b212      	sxth	r2, r2
 8019c76:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019c7a:	b109      	cbz	r1, 8019c80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8019c7c:	42b2      	cmp	r2, r6
 8019c7e:	dba7      	blt.n	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019c80:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019c84:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019c88:	440a      	add	r2, r1
 8019c8a:	b212      	sxth	r2, r2
 8019c8c:	4293      	cmp	r3, r2
 8019c8e:	dda5      	ble.n	8019bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8019c90:	e79e      	b.n	8019bd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019c92:	2a02      	cmp	r2, #2
 8019c94:	d105      	bne.n	8019ca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019c96:	7be2      	ldrb	r2, [r4, #15]
 8019c98:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8019c9c:	1a80      	subs	r0, r0, r2
 8019c9e:	1ac0      	subs	r0, r0, r3
 8019ca0:	e7c0      	b.n	8019c24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8019ca2:	2000      	movs	r0, #0
 8019ca4:	e7bf      	b.n	8019c26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8019ca6:	7be0      	ldrb	r0, [r4, #15]
 8019ca8:	e7bd      	b.n	8019c26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8019caa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019cae:	e7c3      	b.n	8019c38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8019cb0:	9b08      	ldr	r3, [sp, #32]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d0f7      	beq.n	8019ca6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019cb6:	2264      	movs	r2, #100	; 0x64
 8019cb8:	4639      	mov	r1, r7
 8019cba:	a84b      	add	r0, sp, #300	; 0x12c
 8019cbc:	f00f fab8 	bl	8029230 <memcpy>
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019cc6:	6821      	ldr	r1, [r4, #0]
 8019cc8:	a84b      	add	r0, sp, #300	; 0x12c
 8019cca:	f7ff fbed 	bl	80194a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019cce:	b203      	sxth	r3, r0
 8019cd0:	e79f      	b.n	8019c12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08019cd2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019cd2:	2b03      	cmp	r3, #3
 8019cd4:	d818      	bhi.n	8019d08 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019cd6:	e8df f003 	tbb	[pc, r3]
 8019cda:	0602      	.short	0x0602
 8019cdc:	130d      	.short	0x130d
 8019cde:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019ce2:	1850      	adds	r0, r2, r1
 8019ce4:	4770      	bx	lr
 8019ce6:	8803      	ldrh	r3, [r0, #0]
 8019ce8:	8880      	ldrh	r0, [r0, #4]
 8019cea:	4418      	add	r0, r3
 8019cec:	b200      	sxth	r0, r0
 8019cee:	1a80      	subs	r0, r0, r2
 8019cf0:	3801      	subs	r0, #1
 8019cf2:	4770      	bx	lr
 8019cf4:	8803      	ldrh	r3, [r0, #0]
 8019cf6:	8880      	ldrh	r0, [r0, #4]
 8019cf8:	4418      	add	r0, r3
 8019cfa:	b200      	sxth	r0, r0
 8019cfc:	1a40      	subs	r0, r0, r1
 8019cfe:	e7f7      	b.n	8019cf0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019d00:	f9b0 0000 	ldrsh.w	r0, [r0]
 8019d04:	4410      	add	r0, r2
 8019d06:	4770      	bx	lr
 8019d08:	2000      	movs	r0, #0
 8019d0a:	4770      	bx	lr

08019d0c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019d0c:	2b03      	cmp	r3, #3
 8019d0e:	d817      	bhi.n	8019d40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8019d10:	e8df f003 	tbb	[pc, r3]
 8019d14:	10090602 	.word	0x10090602
 8019d18:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019d1c:	1850      	adds	r0, r2, r1
 8019d1e:	4770      	bx	lr
 8019d20:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019d24:	e7fa      	b.n	8019d1c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8019d26:	8843      	ldrh	r3, [r0, #2]
 8019d28:	88c0      	ldrh	r0, [r0, #6]
 8019d2a:	4418      	add	r0, r3
 8019d2c:	b200      	sxth	r0, r0
 8019d2e:	1a80      	subs	r0, r0, r2
 8019d30:	3801      	subs	r0, #1
 8019d32:	4770      	bx	lr
 8019d34:	8843      	ldrh	r3, [r0, #2]
 8019d36:	88c0      	ldrh	r0, [r0, #6]
 8019d38:	4418      	add	r0, r3
 8019d3a:	b200      	sxth	r0, r0
 8019d3c:	1a40      	subs	r0, r0, r1
 8019d3e:	e7f7      	b.n	8019d30 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019d40:	2000      	movs	r0, #0
 8019d42:	4770      	bx	lr

08019d44 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019d44:	4b01      	ldr	r3, [pc, #4]	; (8019d4c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019d46:	2200      	movs	r2, #0
 8019d48:	601a      	str	r2, [r3, #0]
 8019d4a:	4770      	bx	lr
 8019d4c:	200152dc 	.word	0x200152dc

08019d50 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019d50:	4603      	mov	r3, r0
 8019d52:	b1c8      	cbz	r0, 8019d88 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019d54:	0c02      	lsrs	r2, r0, #16
 8019d56:	0412      	lsls	r2, r2, #16
 8019d58:	b9a2      	cbnz	r2, 8019d84 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019d5a:	0403      	lsls	r3, r0, #16
 8019d5c:	2010      	movs	r0, #16
 8019d5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019d62:	bf04      	itt	eq
 8019d64:	021b      	lsleq	r3, r3, #8
 8019d66:	3008      	addeq	r0, #8
 8019d68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019d6c:	bf04      	itt	eq
 8019d6e:	011b      	lsleq	r3, r3, #4
 8019d70:	3004      	addeq	r0, #4
 8019d72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019d76:	bf04      	itt	eq
 8019d78:	009b      	lsleq	r3, r3, #2
 8019d7a:	3002      	addeq	r0, #2
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	db04      	blt.n	8019d8a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019d80:	3001      	adds	r0, #1
 8019d82:	4770      	bx	lr
 8019d84:	2000      	movs	r0, #0
 8019d86:	e7ea      	b.n	8019d5e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019d88:	2020      	movs	r0, #32
 8019d8a:	4770      	bx	lr

08019d8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d90:	b087      	sub	sp, #28
 8019d92:	4681      	mov	r9, r0
 8019d94:	4698      	mov	r8, r3
 8019d96:	4610      	mov	r0, r2
 8019d98:	460d      	mov	r5, r1
 8019d9a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019d9e:	b981      	cbnz	r1, 8019dc2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019da0:	b14b      	cbz	r3, 8019db6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019da2:	460b      	mov	r3, r1
 8019da4:	464a      	mov	r2, r9
 8019da6:	4641      	mov	r1, r8
 8019da8:	e9cd 4700 	strd	r4, r7, [sp]
 8019dac:	f7ff ffee 	bl	8019d8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019db0:	b007      	add	sp, #28
 8019db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019db6:	f04f 33ff 	mov.w	r3, #4294967295
 8019dba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019dbe:	603b      	str	r3, [r7, #0]
 8019dc0:	e7f6      	b.n	8019db0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019dc2:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019dc6:	d107      	bne.n	8019dd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019dc8:	fb09 f602 	mul.w	r6, r9, r2
 8019dcc:	fbb6 f0f4 	udiv	r0, r6, r4
 8019dd0:	fb04 6610 	mls	r6, r4, r0, r6
 8019dd4:	603e      	str	r6, [r7, #0]
 8019dd6:	e7eb      	b.n	8019db0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019dd8:	2601      	movs	r6, #1
 8019dda:	fa09 fb01 	lsl.w	fp, r9, r1
 8019dde:	408e      	lsls	r6, r1
 8019de0:	fbbb f3f4 	udiv	r3, fp, r4
 8019de4:	3e01      	subs	r6, #1
 8019de6:	9302      	str	r3, [sp, #8]
 8019de8:	fb0a f303 	mul.w	r3, sl, r3
 8019dec:	4016      	ands	r6, r2
 8019dee:	9303      	str	r3, [sp, #12]
 8019df0:	4630      	mov	r0, r6
 8019df2:	f7ff ffad 	bl	8019d50 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019df6:	464a      	mov	r2, r9
 8019df8:	460b      	mov	r3, r1
 8019dfa:	4601      	mov	r1, r0
 8019dfc:	4630      	mov	r0, r6
 8019dfe:	e9cd 4700 	strd	r4, r7, [sp]
 8019e02:	f7ff ffc3 	bl	8019d8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019e06:	9b02      	ldr	r3, [sp, #8]
 8019e08:	4606      	mov	r6, r0
 8019e0a:	eb05 0108 	add.w	r1, r5, r8
 8019e0e:	fb04 bb13 	mls	fp, r4, r3, fp
 8019e12:	4658      	mov	r0, fp
 8019e14:	f7ff ff9c 	bl	8019d50 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019e18:	ab05      	add	r3, sp, #20
 8019e1a:	465a      	mov	r2, fp
 8019e1c:	e9cd 4300 	strd	r4, r3, [sp]
 8019e20:	4603      	mov	r3, r0
 8019e22:	4650      	mov	r0, sl
 8019e24:	f7ff ffb2 	bl	8019d8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019e28:	6839      	ldr	r1, [r7, #0]
 8019e2a:	9a05      	ldr	r2, [sp, #20]
 8019e2c:	9b03      	ldr	r3, [sp, #12]
 8019e2e:	4411      	add	r1, r2
 8019e30:	fbb1 f2f4 	udiv	r2, r1, r4
 8019e34:	18d3      	adds	r3, r2, r3
 8019e36:	fb04 1412 	mls	r4, r4, r2, r1
 8019e3a:	441e      	add	r6, r3
 8019e3c:	603c      	str	r4, [r7, #0]
 8019e3e:	4430      	add	r0, r6
 8019e40:	e7b6      	b.n	8019db0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e46:	b085      	sub	sp, #20
 8019e48:	f1b0 0900 	subs.w	r9, r0, #0
 8019e4c:	461d      	mov	r5, r3
 8019e4e:	4617      	mov	r7, r2
 8019e50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019e52:	bfbb      	ittet	lt
 8019e54:	f1c9 0900 	rsblt	r9, r9, #0
 8019e58:	f04f 36ff 	movlt.w	r6, #4294967295
 8019e5c:	2601      	movge	r6, #1
 8019e5e:	6823      	ldrlt	r3, [r4, #0]
 8019e60:	bfbc      	itt	lt
 8019e62:	425b      	neglt	r3, r3
 8019e64:	6023      	strlt	r3, [r4, #0]
 8019e66:	2a00      	cmp	r2, #0
 8019e68:	da04      	bge.n	8019e74 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019e6a:	6823      	ldr	r3, [r4, #0]
 8019e6c:	4257      	negs	r7, r2
 8019e6e:	4276      	negs	r6, r6
 8019e70:	425b      	negs	r3, r3
 8019e72:	6023      	str	r3, [r4, #0]
 8019e74:	2d00      	cmp	r5, #0
 8019e76:	4638      	mov	r0, r7
 8019e78:	bfba      	itte	lt
 8019e7a:	426d      	neglt	r5, r5
 8019e7c:	f04f 38ff 	movlt.w	r8, #4294967295
 8019e80:	f04f 0801 	movge.w	r8, #1
 8019e84:	f7ff ff64 	bl	8019d50 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019e88:	ab03      	add	r3, sp, #12
 8019e8a:	463a      	mov	r2, r7
 8019e8c:	e9cd 5300 	strd	r5, r3, [sp]
 8019e90:	4603      	mov	r3, r0
 8019e92:	4648      	mov	r0, r9
 8019e94:	f7ff ff7a 	bl	8019d8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019e98:	6823      	ldr	r3, [r4, #0]
 8019e9a:	9a03      	ldr	r2, [sp, #12]
 8019e9c:	4546      	cmp	r6, r8
 8019e9e:	441a      	add	r2, r3
 8019ea0:	fb92 f3f5 	sdiv	r3, r2, r5
 8019ea4:	4418      	add	r0, r3
 8019ea6:	fb05 2313 	mls	r3, r5, r3, r2
 8019eaa:	bf18      	it	ne
 8019eac:	4240      	negne	r0, r0
 8019eae:	1c72      	adds	r2, r6, #1
 8019eb0:	6023      	str	r3, [r4, #0]
 8019eb2:	d105      	bne.n	8019ec0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	f1c3 0200 	rsb	r2, r3, #0
 8019eba:	db0b      	blt.n	8019ed4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019ebc:	6022      	str	r2, [r4, #0]
 8019ebe:	e006      	b.n	8019ece <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019ec0:	2e01      	cmp	r6, #1
 8019ec2:	d104      	bne.n	8019ece <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	da02      	bge.n	8019ece <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019ec8:	442b      	add	r3, r5
 8019eca:	3801      	subs	r0, #1
 8019ecc:	6023      	str	r3, [r4, #0]
 8019ece:	b005      	add	sp, #20
 8019ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ed4:	3801      	subs	r0, #1
 8019ed6:	1b52      	subs	r2, r2, r5
 8019ed8:	e7f0      	b.n	8019ebc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019edc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019ee0:	4c1c      	ldr	r4, [pc, #112]	; (8019f54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019ee2:	4605      	mov	r5, r0
 8019ee4:	6807      	ldr	r7, [r0, #0]
 8019ee6:	69a3      	ldr	r3, [r4, #24]
 8019ee8:	b92b      	cbnz	r3, 8019ef6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019eea:	6840      	ldr	r0, [r0, #4]
 8019eec:	e9c5 7000 	strd	r7, r0, [r5]
 8019ef0:	b004      	add	sp, #16
 8019ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ef6:	f04f 0802 	mov.w	r8, #2
 8019efa:	68a2      	ldr	r2, [r4, #8]
 8019efc:	ae04      	add	r6, sp, #16
 8019efe:	6820      	ldr	r0, [r4, #0]
 8019f00:	fb93 f1f8 	sdiv	r1, r3, r8
 8019f04:	440a      	add	r2, r1
 8019f06:	69e1      	ldr	r1, [r4, #28]
 8019f08:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019f0c:	463a      	mov	r2, r7
 8019f0e:	9600      	str	r6, [sp, #0]
 8019f10:	f7ff ff97 	bl	8019e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019f14:	69a3      	ldr	r3, [r4, #24]
 8019f16:	4607      	mov	r7, r0
 8019f18:	686a      	ldr	r2, [r5, #4]
 8019f1a:	6a21      	ldr	r1, [r4, #32]
 8019f1c:	9600      	str	r6, [sp, #0]
 8019f1e:	6860      	ldr	r0, [r4, #4]
 8019f20:	f7ff ff8f 	bl	8019e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019f24:	69a3      	ldr	r3, [r4, #24]
 8019f26:	6962      	ldr	r2, [r4, #20]
 8019f28:	4407      	add	r7, r0
 8019f2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019f2c:	9600      	str	r6, [sp, #0]
 8019f2e:	68e0      	ldr	r0, [r4, #12]
 8019f30:	fb93 f8f8 	sdiv	r8, r3, r8
 8019f34:	4442      	add	r2, r8
 8019f36:	9203      	str	r2, [sp, #12]
 8019f38:	682a      	ldr	r2, [r5, #0]
 8019f3a:	f7ff ff82 	bl	8019e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019f3e:	4680      	mov	r8, r0
 8019f40:	9600      	str	r6, [sp, #0]
 8019f42:	69a3      	ldr	r3, [r4, #24]
 8019f44:	686a      	ldr	r2, [r5, #4]
 8019f46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019f48:	6920      	ldr	r0, [r4, #16]
 8019f4a:	f7ff ff7a 	bl	8019e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019f4e:	4440      	add	r0, r8
 8019f50:	e7cc      	b.n	8019eec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019f52:	bf00      	nop
 8019f54:	200152e0 	.word	0x200152e0

08019f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019f58:	4b07      	ldr	r3, [pc, #28]	; (8019f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019f5a:	781b      	ldrb	r3, [r3, #0]
 8019f5c:	2b01      	cmp	r3, #1
 8019f5e:	d109      	bne.n	8019f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019f60:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019f64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019f68:	8003      	strh	r3, [r0, #0]
 8019f6a:	4b04      	ldr	r3, [pc, #16]	; (8019f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019f6c:	881b      	ldrh	r3, [r3, #0]
 8019f6e:	3b01      	subs	r3, #1
 8019f70:	1a9b      	subs	r3, r3, r2
 8019f72:	800b      	strh	r3, [r1, #0]
 8019f74:	4770      	bx	lr
 8019f76:	bf00      	nop
 8019f78:	200152cc 	.word	0x200152cc
 8019f7c:	200152c8 	.word	0x200152c8

08019f80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019f80:	4b07      	ldr	r3, [pc, #28]	; (8019fa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019f82:	b510      	push	{r4, lr}
 8019f84:	781b      	ldrb	r3, [r3, #0]
 8019f86:	2b01      	cmp	r3, #1
 8019f88:	d108      	bne.n	8019f9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019f8a:	4b06      	ldr	r3, [pc, #24]	; (8019fa4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019f8c:	880c      	ldrh	r4, [r1, #0]
 8019f8e:	881b      	ldrh	r3, [r3, #0]
 8019f90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019f94:	3b01      	subs	r3, #1
 8019f96:	1b1b      	subs	r3, r3, r4
 8019f98:	8003      	strh	r3, [r0, #0]
 8019f9a:	800a      	strh	r2, [r1, #0]
 8019f9c:	bd10      	pop	{r4, pc}
 8019f9e:	bf00      	nop
 8019fa0:	200152cc 	.word	0x200152cc
 8019fa4:	200152c8 	.word	0x200152c8

08019fa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019fa8:	4b0a      	ldr	r3, [pc, #40]	; (8019fd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019faa:	b510      	push	{r4, lr}
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d10e      	bne.n	8019fd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019fb2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019fb6:	8843      	ldrh	r3, [r0, #2]
 8019fb8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019fbc:	18ca      	adds	r2, r1, r3
 8019fbe:	4b06      	ldr	r3, [pc, #24]	; (8019fd8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019fc0:	8044      	strh	r4, [r0, #2]
 8019fc2:	881b      	ldrh	r3, [r3, #0]
 8019fc4:	1a9b      	subs	r3, r3, r2
 8019fc6:	8003      	strh	r3, [r0, #0]
 8019fc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019fcc:	8081      	strh	r1, [r0, #4]
 8019fce:	80c3      	strh	r3, [r0, #6]
 8019fd0:	bd10      	pop	{r4, pc}
 8019fd2:	bf00      	nop
 8019fd4:	200152cc 	.word	0x200152cc
 8019fd8:	200152c8 	.word	0x200152c8

08019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019fdc:	4b08      	ldr	r3, [pc, #32]	; (801a000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019fde:	781b      	ldrb	r3, [r3, #0]
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d10c      	bne.n	8019ffe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019fe4:	8803      	ldrh	r3, [r0, #0]
 8019fe6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019fea:	8842      	ldrh	r2, [r0, #2]
 8019fec:	8002      	strh	r2, [r0, #0]
 8019fee:	185a      	adds	r2, r3, r1
 8019ff0:	4b04      	ldr	r3, [pc, #16]	; (801a004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019ff2:	881b      	ldrh	r3, [r3, #0]
 8019ff4:	1a9b      	subs	r3, r3, r2
 8019ff6:	8043      	strh	r3, [r0, #2]
 8019ff8:	88c3      	ldrh	r3, [r0, #6]
 8019ffa:	80c1      	strh	r1, [r0, #6]
 8019ffc:	8083      	strh	r3, [r0, #4]
 8019ffe:	4770      	bx	lr
 801a000:	200152cc 	.word	0x200152cc
 801a004:	200152c8 	.word	0x200152c8

0801a008 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a008:	4b07      	ldr	r3, [pc, #28]	; (801a028 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a00a:	b510      	push	{r4, lr}
 801a00c:	781b      	ldrb	r3, [r3, #0]
 801a00e:	2b01      	cmp	r3, #1
 801a010:	d108      	bne.n	801a024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a012:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a016:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a01a:	8003      	strh	r3, [r0, #0]
 801a01c:	8893      	ldrh	r3, [r2, #4]
 801a01e:	3b01      	subs	r3, #1
 801a020:	1b1b      	subs	r3, r3, r4
 801a022:	800b      	strh	r3, [r1, #0]
 801a024:	bd10      	pop	{r4, pc}
 801a026:	bf00      	nop
 801a028:	200152cc 	.word	0x200152cc

0801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a02c:	4b0a      	ldr	r3, [pc, #40]	; (801a058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a02e:	460a      	mov	r2, r1
 801a030:	b510      	push	{r4, lr}
 801a032:	781b      	ldrb	r3, [r3, #0]
 801a034:	2b01      	cmp	r3, #1
 801a036:	d10d      	bne.n	801a054 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a038:	8881      	ldrh	r1, [r0, #4]
 801a03a:	8803      	ldrh	r3, [r0, #0]
 801a03c:	440b      	add	r3, r1
 801a03e:	4601      	mov	r1, r0
 801a040:	3b01      	subs	r3, #1
 801a042:	f821 3b02 	strh.w	r3, [r1], #2
 801a046:	f7ff ffdf 	bl	801a008 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a04a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a04e:	88c2      	ldrh	r2, [r0, #6]
 801a050:	80c3      	strh	r3, [r0, #6]
 801a052:	8082      	strh	r2, [r0, #4]
 801a054:	bd10      	pop	{r4, pc}
 801a056:	bf00      	nop
 801a058:	200152cc 	.word	0x200152cc

0801a05c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a05c:	b570      	push	{r4, r5, r6, lr}
 801a05e:	2300      	movs	r3, #0
 801a060:	4c0a      	ldr	r4, [pc, #40]	; (801a08c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801a062:	4605      	mov	r5, r0
 801a064:	460e      	mov	r6, r1
 801a066:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a06a:	6820      	ldr	r0, [r4, #0]
 801a06c:	b110      	cbz	r0, 801a074 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801a06e:	6803      	ldr	r3, [r0, #0]
 801a070:	695b      	ldr	r3, [r3, #20]
 801a072:	4798      	blx	r3
 801a074:	6026      	str	r6, [r4, #0]
 801a076:	4630      	mov	r0, r6
 801a078:	6833      	ldr	r3, [r6, #0]
 801a07a:	68db      	ldr	r3, [r3, #12]
 801a07c:	4798      	blx	r3
 801a07e:	682b      	ldr	r3, [r5, #0]
 801a080:	4628      	mov	r0, r5
 801a082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a088:	4718      	bx	r3
 801a08a:	bf00      	nop
 801a08c:	20015310 	.word	0x20015310

0801a090 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a090:	4b06      	ldr	r3, [pc, #24]	; (801a0ac <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a092:	2100      	movs	r1, #0
 801a094:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a098:	4b05      	ldr	r3, [pc, #20]	; (801a0b0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a09a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a09e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0a2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a0a6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a0aa:	4770      	bx	lr
 801a0ac:	200152c8 	.word	0x200152c8
 801a0b0:	200152ca 	.word	0x200152ca

0801a0b4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a0b4:	4b03      	ldr	r3, [pc, #12]	; (801a0c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a0b6:	6818      	ldr	r0, [r3, #0]
 801a0b8:	b110      	cbz	r0, 801a0c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a0ba:	6803      	ldr	r3, [r0, #0]
 801a0bc:	699b      	ldr	r3, [r3, #24]
 801a0be:	4718      	bx	r3
 801a0c0:	4770      	bx	lr
 801a0c2:	bf00      	nop
 801a0c4:	20015310 	.word	0x20015310

0801a0c8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a0c8:	4770      	bx	lr
	...

0801a0cc <_ZN8touchgfx11Application4drawEv>:
 801a0cc:	4b09      	ldr	r3, [pc, #36]	; (801a0f4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a0ce:	b507      	push	{r0, r1, r2, lr}
 801a0d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a0d4:	2100      	movs	r1, #0
 801a0d6:	4b08      	ldr	r3, [pc, #32]	; (801a0f8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a0d8:	9100      	str	r1, [sp, #0]
 801a0da:	4669      	mov	r1, sp
 801a0dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0e0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a0e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a0e8:	6803      	ldr	r3, [r0, #0]
 801a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0ec:	4798      	blx	r3
 801a0ee:	b003      	add	sp, #12
 801a0f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a0f4:	200152c8 	.word	0x200152c8
 801a0f8:	200152ca 	.word	0x200152ca

0801a0fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a0fc:	4b03      	ldr	r3, [pc, #12]	; (801a10c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a0fe:	6818      	ldr	r0, [r3, #0]
 801a100:	b110      	cbz	r0, 801a108 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a102:	6803      	ldr	r3, [r0, #0]
 801a104:	69db      	ldr	r3, [r3, #28]
 801a106:	4718      	bx	r3
 801a108:	4770      	bx	lr
 801a10a:	bf00      	nop
 801a10c:	20015310 	.word	0x20015310

0801a110 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a110:	4b03      	ldr	r3, [pc, #12]	; (801a120 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a112:	6818      	ldr	r0, [r3, #0]
 801a114:	b110      	cbz	r0, 801a11c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a116:	6803      	ldr	r3, [r0, #0]
 801a118:	6a1b      	ldr	r3, [r3, #32]
 801a11a:	4718      	bx	r3
 801a11c:	4770      	bx	lr
 801a11e:	bf00      	nop
 801a120:	20015310 	.word	0x20015310

0801a124 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a124:	2300      	movs	r3, #0
 801a126:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a12a:	4770      	bx	lr

0801a12c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a12c:	4b03      	ldr	r3, [pc, #12]	; (801a13c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a12e:	6818      	ldr	r0, [r3, #0]
 801a130:	b110      	cbz	r0, 801a138 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a132:	6803      	ldr	r3, [r0, #0]
 801a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a136:	4718      	bx	r3
 801a138:	4770      	bx	lr
 801a13a:	bf00      	nop
 801a13c:	20015310 	.word	0x20015310

0801a140 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a140:	b570      	push	{r4, r5, r6, lr}
 801a142:	4d32      	ldr	r5, [pc, #200]	; (801a20c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801a144:	4604      	mov	r4, r0
 801a146:	6828      	ldr	r0, [r5, #0]
 801a148:	b140      	cbz	r0, 801a15c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a14a:	7a03      	ldrb	r3, [r0, #8]
 801a14c:	b933      	cbnz	r3, 801a15c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a14e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801a152:	6803      	ldr	r3, [r0, #0]
 801a154:	689b      	ldr	r3, [r3, #8]
 801a156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a15a:	4718      	bx	r3
 801a15c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801a160:	b97b      	cbnz	r3, 801a182 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a162:	b170      	cbz	r0, 801a182 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a164:	7a03      	ldrb	r3, [r0, #8]
 801a166:	b163      	cbz	r3, 801a182 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a168:	4b29      	ldr	r3, [pc, #164]	; (801a210 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801a16a:	6818      	ldr	r0, [r3, #0]
 801a16c:	b110      	cbz	r0, 801a174 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a16e:	6803      	ldr	r3, [r0, #0]
 801a170:	691b      	ldr	r3, [r3, #16]
 801a172:	4798      	blx	r3
 801a174:	6828      	ldr	r0, [r5, #0]
 801a176:	6803      	ldr	r3, [r0, #0]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	4798      	blx	r3
 801a17c:	2301      	movs	r3, #1
 801a17e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801a182:	2500      	movs	r5, #0
 801a184:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a188:	42a8      	cmp	r0, r5
 801a18a:	dd0c      	ble.n	801a1a6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a18c:	1963      	adds	r3, r4, r5
 801a18e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a192:	b132      	cbz	r2, 801a1a2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a194:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a198:	4413      	add	r3, r2
 801a19a:	6858      	ldr	r0, [r3, #4]
 801a19c:	6803      	ldr	r3, [r0, #0]
 801a19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1a0:	4798      	blx	r3
 801a1a2:	3501      	adds	r5, #1
 801a1a4:	e7ee      	b.n	801a184 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	461a      	mov	r2, r3
 801a1aa:	4298      	cmp	r0, r3
 801a1ac:	d015      	beq.n	801a1da <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801a1ae:	18e1      	adds	r1, r4, r3
 801a1b0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a1b4:	b16d      	cbz	r5, 801a1d2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d00a      	beq.n	801a1d0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801a1ba:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a1be:	4431      	add	r1, r6
 801a1c0:	684e      	ldr	r6, [r1, #4]
 801a1c2:	b291      	uxth	r1, r2
 801a1c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a1c8:	604e      	str	r6, [r1, #4]
 801a1ca:	18a1      	adds	r1, r4, r2
 801a1cc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a1d0:	3201      	adds	r2, #1
 801a1d2:	3301      	adds	r3, #1
 801a1d4:	e7e9      	b.n	801a1aa <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a1d6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801a1da:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801a1de:	4295      	cmp	r5, r2
 801a1e0:	dd0d      	ble.n	801a1fe <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801a1e2:	1e6b      	subs	r3, r5, #1
 801a1e4:	b29b      	uxth	r3, r3
 801a1e6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	3104      	adds	r1, #4
 801a1ee:	4285      	cmp	r5, r0
 801a1f0:	ddf1      	ble.n	801a1d6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801a1f2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801a1f6:	3001      	adds	r0, #1
 801a1f8:	f841 6c04 	str.w	r6, [r1, #-4]
 801a1fc:	e7f7      	b.n	801a1ee <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801a1fe:	4b04      	ldr	r3, [pc, #16]	; (801a210 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801a200:	6818      	ldr	r0, [r3, #0]
 801a202:	b110      	cbz	r0, 801a20a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801a204:	6803      	ldr	r3, [r0, #0]
 801a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a208:	e7a5      	b.n	801a156 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a20a:	bd70      	pop	{r4, r5, r6, pc}
 801a20c:	20015314 	.word	0x20015314
 801a210:	20015310 	.word	0x20015310

0801a214 <_ZN8touchgfx11ApplicationD1Ev>:
 801a214:	4770      	bx	lr

0801a216 <_ZN8touchgfx11ApplicationD0Ev>:
 801a216:	b510      	push	{r4, lr}
 801a218:	4604      	mov	r4, r0
 801a21a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801a21e:	f00e fe61 	bl	8028ee4 <_ZdlPvj>
 801a222:	4620      	mov	r0, r4
 801a224:	bd10      	pop	{r4, pc}

0801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a226:	b510      	push	{r4, lr}
 801a228:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a22c:	888a      	ldrh	r2, [r1, #4]
 801a22e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a232:	4422      	add	r2, r4
 801a234:	b212      	sxth	r2, r2
 801a236:	4293      	cmp	r3, r2
 801a238:	da15      	bge.n	801a266 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a23a:	8882      	ldrh	r2, [r0, #4]
 801a23c:	4413      	add	r3, r2
 801a23e:	b21b      	sxth	r3, r3
 801a240:	429c      	cmp	r4, r3
 801a242:	da10      	bge.n	801a266 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a244:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a248:	88c9      	ldrh	r1, [r1, #6]
 801a24a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a24e:	4419      	add	r1, r3
 801a250:	b209      	sxth	r1, r1
 801a252:	428a      	cmp	r2, r1
 801a254:	da07      	bge.n	801a266 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a256:	88c0      	ldrh	r0, [r0, #6]
 801a258:	4410      	add	r0, r2
 801a25a:	b200      	sxth	r0, r0
 801a25c:	4283      	cmp	r3, r0
 801a25e:	bfac      	ite	ge
 801a260:	2000      	movge	r0, #0
 801a262:	2001      	movlt	r0, #1
 801a264:	bd10      	pop	{r4, pc}
 801a266:	2000      	movs	r0, #0
 801a268:	e7fc      	b.n	801a264 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a26a <_ZN8touchgfx4Rect10restrictToEss>:
 801a26a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	b510      	push	{r4, lr}
 801a272:	da04      	bge.n	801a27e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a274:	8884      	ldrh	r4, [r0, #4]
 801a276:	4423      	add	r3, r4
 801a278:	8083      	strh	r3, [r0, #4]
 801a27a:	2300      	movs	r3, #0
 801a27c:	8003      	strh	r3, [r0, #0]
 801a27e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a282:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a286:	1b09      	subs	r1, r1, r4
 801a288:	428b      	cmp	r3, r1
 801a28a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a28e:	bfc8      	it	gt
 801a290:	8081      	strhgt	r1, [r0, #4]
 801a292:	2b00      	cmp	r3, #0
 801a294:	da04      	bge.n	801a2a0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a296:	88c1      	ldrh	r1, [r0, #6]
 801a298:	440b      	add	r3, r1
 801a29a:	80c3      	strh	r3, [r0, #6]
 801a29c:	2300      	movs	r3, #0
 801a29e:	8043      	strh	r3, [r0, #2]
 801a2a0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a2a4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a2a8:	1a52      	subs	r2, r2, r1
 801a2aa:	4293      	cmp	r3, r2
 801a2ac:	bfc8      	it	gt
 801a2ae:	80c2      	strhgt	r2, [r0, #6]
 801a2b0:	bd10      	pop	{r4, pc}
	...

0801a2b4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a2b4:	4b10      	ldr	r3, [pc, #64]	; (801a2f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a2b6:	b510      	push	{r4, lr}
 801a2b8:	460c      	mov	r4, r1
 801a2ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2be:	4b0f      	ldr	r3, [pc, #60]	; (801a2fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a2c6:	f7ff ffd0 	bl	801a26a <_ZN8touchgfx4Rect10restrictToEss>
 801a2ca:	4b0d      	ldr	r3, [pc, #52]	; (801a300 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a2cc:	6818      	ldr	r0, [r3, #0]
 801a2ce:	b190      	cbz	r0, 801a2f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a2d0:	6803      	ldr	r3, [r0, #0]
 801a2d2:	4621      	mov	r1, r4
 801a2d4:	689b      	ldr	r3, [r3, #8]
 801a2d6:	4798      	blx	r3
 801a2d8:	4b0a      	ldr	r3, [pc, #40]	; (801a304 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a2da:	6818      	ldr	r0, [r3, #0]
 801a2dc:	b118      	cbz	r0, 801a2e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a2de:	6803      	ldr	r3, [r0, #0]
 801a2e0:	4621      	mov	r1, r4
 801a2e2:	689b      	ldr	r3, [r3, #8]
 801a2e4:	4798      	blx	r3
 801a2e6:	4b08      	ldr	r3, [pc, #32]	; (801a308 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a2e8:	4621      	mov	r1, r4
 801a2ea:	6818      	ldr	r0, [r3, #0]
 801a2ec:	6803      	ldr	r3, [r0, #0]
 801a2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2f2:	69db      	ldr	r3, [r3, #28]
 801a2f4:	4718      	bx	r3
 801a2f6:	bd10      	pop	{r4, pc}
 801a2f8:	200152ca 	.word	0x200152ca
 801a2fc:	200152c8 	.word	0x200152c8
 801a300:	20015310 	.word	0x20015310
 801a304:	2001530c 	.word	0x2001530c
 801a308:	200152d4 	.word	0x200152d4

0801a30c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a30e:	4606      	mov	r6, r0
 801a310:	4608      	mov	r0, r1
 801a312:	460f      	mov	r7, r1
 801a314:	f7fc fd9f 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a318:	b9e8      	cbnz	r0, 801a356 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a31a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a31e:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a322:	42a5      	cmp	r5, r4
 801a324:	db17      	blt.n	801a356 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a326:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a32a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a32e:	429a      	cmp	r2, r3
 801a330:	db11      	blt.n	801a356 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a332:	88b9      	ldrh	r1, [r7, #4]
 801a334:	440d      	add	r5, r1
 801a336:	88b1      	ldrh	r1, [r6, #4]
 801a338:	440c      	add	r4, r1
 801a33a:	b22d      	sxth	r5, r5
 801a33c:	b224      	sxth	r4, r4
 801a33e:	42a5      	cmp	r5, r4
 801a340:	dc09      	bgt.n	801a356 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a342:	88f8      	ldrh	r0, [r7, #6]
 801a344:	4410      	add	r0, r2
 801a346:	88f2      	ldrh	r2, [r6, #6]
 801a348:	4413      	add	r3, r2
 801a34a:	b200      	sxth	r0, r0
 801a34c:	b21b      	sxth	r3, r3
 801a34e:	4298      	cmp	r0, r3
 801a350:	bfcc      	ite	gt
 801a352:	2000      	movgt	r0, #0
 801a354:	2001      	movle	r0, #1
 801a356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a358 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a35a:	4604      	mov	r4, r0
 801a35c:	4608      	mov	r0, r1
 801a35e:	460d      	mov	r5, r1
 801a360:	f7fc fd79 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a364:	b978      	cbnz	r0, 801a386 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a366:	4620      	mov	r0, r4
 801a368:	f7fc fd75 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a36c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a370:	b150      	cbz	r0, 801a388 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a372:	8026      	strh	r6, [r4, #0]
 801a374:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a378:	8063      	strh	r3, [r4, #2]
 801a37a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a37e:	80a3      	strh	r3, [r4, #4]
 801a380:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a384:	80e3      	strh	r3, [r4, #6]
 801a386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a388:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a38c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a390:	42b1      	cmp	r1, r6
 801a392:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a396:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a39a:	460f      	mov	r7, r1
 801a39c:	88ed      	ldrh	r5, [r5, #6]
 801a39e:	bfa8      	it	ge
 801a3a0:	4637      	movge	r7, r6
 801a3a2:	4293      	cmp	r3, r2
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	4466      	add	r6, ip
 801a3a8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a3ac:	bfa8      	it	ge
 801a3ae:	4610      	movge	r0, r2
 801a3b0:	442a      	add	r2, r5
 801a3b2:	88e5      	ldrh	r5, [r4, #6]
 801a3b4:	4461      	add	r1, ip
 801a3b6:	b236      	sxth	r6, r6
 801a3b8:	8027      	strh	r7, [r4, #0]
 801a3ba:	442b      	add	r3, r5
 801a3bc:	b209      	sxth	r1, r1
 801a3be:	b212      	sxth	r2, r2
 801a3c0:	8060      	strh	r0, [r4, #2]
 801a3c2:	b21b      	sxth	r3, r3
 801a3c4:	428e      	cmp	r6, r1
 801a3c6:	bfac      	ite	ge
 801a3c8:	ebc7 0106 	rsbge	r1, r7, r6
 801a3cc:	ebc7 0101 	rsblt	r1, r7, r1
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	bfac      	ite	ge
 801a3d4:	ebc0 0202 	rsbge	r2, r0, r2
 801a3d8:	ebc0 0203 	rsblt	r2, r0, r3
 801a3dc:	80a1      	strh	r1, [r4, #4]
 801a3de:	80e2      	strh	r2, [r4, #6]
 801a3e0:	e7d1      	b.n	801a386 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a3e4 <_ZN8touchgfx11Application11getInstanceEv>:
 801a3e4:	4b01      	ldr	r3, [pc, #4]	; (801a3ec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a3e6:	6818      	ldr	r0, [r3, #0]
 801a3e8:	4770      	bx	lr
 801a3ea:	bf00      	nop
 801a3ec:	20015320 	.word	0x20015320

0801a3f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a3f6:	30a8      	adds	r0, #168	; 0xa8
 801a3f8:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a3fc:	f802 3b01 	strb.w	r3, [r2], #1
 801a400:	4282      	cmp	r2, r0
 801a402:	d1fb      	bne.n	801a3fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a404:	4770      	bx	lr

0801a406 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a406:	4603      	mov	r3, r0
 801a408:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a40c:	2200      	movs	r2, #0
 801a40e:	801a      	strh	r2, [r3, #0]
 801a410:	3308      	adds	r3, #8
 801a412:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a416:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a41a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a41e:	428b      	cmp	r3, r1
 801a420:	d1f5      	bne.n	801a40e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a422:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a426:	4770      	bx	lr

0801a428 <_ZN8touchgfx11ApplicationC1Ev>:
 801a428:	b570      	push	{r4, r5, r6, lr}
 801a42a:	4b19      	ldr	r3, [pc, #100]	; (801a490 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a42c:	2500      	movs	r5, #0
 801a42e:	4604      	mov	r4, r0
 801a430:	30a8      	adds	r0, #168	; 0xa8
 801a432:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a436:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a43a:	f7ff ffe4 	bl	801a406 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a43e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a442:	f7ff ffe0 	bl	801a406 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a446:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a44a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a44e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a452:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a456:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a45a:	490e      	ldr	r1, [pc, #56]	; (801a494 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a45c:	480e      	ldr	r0, [pc, #56]	; (801a498 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a45e:	f00e fc19 	bl	8028c94 <CRC_Lock>
 801a462:	4e0e      	ldr	r6, [pc, #56]	; (801a49c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a464:	4b0e      	ldr	r3, [pc, #56]	; (801a4a0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a466:	b158      	cbz	r0, 801a480 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801a468:	801d      	strh	r5, [r3, #0]
 801a46a:	2300      	movs	r3, #0
 801a46c:	4a0d      	ldr	r2, [pc, #52]	; (801a4a4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a46e:	4620      	mov	r0, r4
 801a470:	6013      	str	r3, [r2, #0]
 801a472:	4a0d      	ldr	r2, [pc, #52]	; (801a4a8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a474:	6033      	str	r3, [r6, #0]
 801a476:	6013      	str	r3, [r2, #0]
 801a478:	f7ff ffba 	bl	801a3f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a47c:	4620      	mov	r0, r4
 801a47e:	bd70      	pop	{r4, r5, r6, pc}
 801a480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a484:	2002      	movs	r0, #2
 801a486:	801a      	strh	r2, [r3, #0]
 801a488:	6030      	str	r0, [r6, #0]
 801a48a:	f001 fa1d 	bl	801b8c8 <_ZN8touchgfx6Screen4drawEv>
 801a48e:	e7ec      	b.n	801a46a <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801a490:	0802ec7c 	.word	0x0802ec7c
 801a494:	b5e8b5cd 	.word	0xb5e8b5cd
 801a498:	f407a5c2 	.word	0xf407a5c2
 801a49c:	20015310 	.word	0x20015310
 801a4a0:	20000044 	.word	0x20000044
 801a4a4:	20015320 	.word	0x20015320
 801a4a8:	20015314 	.word	0x20015314

0801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a4ac:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a4b0:	3b01      	subs	r3, #1
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	428b      	cmp	r3, r1
 801a4b6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	d908      	bls.n	801a4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801a4be:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a4c2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a4c6:	681a      	ldr	r2, [r3, #0]
 801a4c8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a4cc:	685a      	ldr	r2, [r3, #4]
 801a4ce:	6062      	str	r2, [r4, #4]
 801a4d0:	bd10      	pop	{r4, pc}
	...

0801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4d8:	b08f      	sub	sp, #60	; 0x3c
 801a4da:	4b94      	ldr	r3, [pc, #592]	; (801a72c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801a4dc:	4683      	mov	fp, r0
 801a4de:	ac0a      	add	r4, sp, #40	; 0x28
 801a4e0:	e884 0006 	stmia.w	r4, {r1, r2}
 801a4e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	4b91      	ldr	r3, [pc, #580]	; (801a730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801a4ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a4f0:	f7ff febb 	bl	801a26a <_ZN8touchgfx4Rect10restrictToEss>
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	f7fc fcae 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	d16a      	bne.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a4fe:	9403      	str	r4, [sp, #12]
 801a500:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a504:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a508:	2400      	movs	r4, #0
 801a50a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a50e:	9301      	str	r3, [sp, #4]
 801a510:	36a0      	adds	r6, #160	; 0xa0
 801a512:	42a5      	cmp	r5, r4
 801a514:	d00d      	beq.n	801a532 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801a516:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a51a:	9803      	ldr	r0, [sp, #12]
 801a51c:	f7ff fef6 	bl	801a30c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a520:	b128      	cbz	r0, 801a52e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a522:	1e69      	subs	r1, r5, #1
 801a524:	9801      	ldr	r0, [sp, #4]
 801a526:	1b09      	subs	r1, r1, r4
 801a528:	b289      	uxth	r1, r1
 801a52a:	f7ff ffbf 	bl	801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a52e:	3401      	adds	r4, #1
 801a530:	e7ef      	b.n	801a512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801a532:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a536:	1e7b      	subs	r3, r7, #1
 801a538:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a53c:	9704      	str	r7, [sp, #16]
 801a53e:	9302      	str	r3, [sp, #8]
 801a540:	2400      	movs	r4, #0
 801a542:	4655      	mov	r5, sl
 801a544:	9705      	str	r7, [sp, #20]
 801a546:	4626      	mov	r6, r4
 801a548:	9b05      	ldr	r3, [sp, #20]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d078      	beq.n	801a640 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801a54e:	9903      	ldr	r1, [sp, #12]
 801a550:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a554:	f7ff fe67 	bl	801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a558:	b360      	cbz	r0, 801a5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a55a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801a55e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a562:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801a566:	45e6      	cmp	lr, ip
 801a568:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a56c:	db35      	blt.n	801a5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a56e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a572:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a576:	4472      	add	r2, lr
 801a578:	4463      	add	r3, ip
 801a57a:	b212      	sxth	r2, r2
 801a57c:	b21b      	sxth	r3, r3
 801a57e:	429a      	cmp	r2, r3
 801a580:	dc2b      	bgt.n	801a5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a582:	fa1f f288 	uxth.w	r2, r8
 801a586:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a58a:	45c1      	cmp	r9, r8
 801a58c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a590:	4413      	add	r3, r2
 801a592:	fa1f fc89 	uxth.w	ip, r9
 801a596:	b29b      	uxth	r3, r3
 801a598:	fa0f fe83 	sxth.w	lr, r3
 801a59c:	db0f      	blt.n	801a5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a59e:	eba3 030c 	sub.w	r3, r3, ip
 801a5a2:	1ac9      	subs	r1, r1, r3
 801a5a4:	b209      	sxth	r1, r1
 801a5a6:	2900      	cmp	r1, #0
 801a5a8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a5ac:	dd12      	ble.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a5ae:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	9b05      	ldr	r3, [sp, #20]
 801a5b6:	3d08      	subs	r5, #8
 801a5b8:	3b01      	subs	r3, #1
 801a5ba:	9305      	str	r3, [sp, #20]
 801a5bc:	e7c4      	b.n	801a548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801a5be:	4461      	add	r1, ip
 801a5c0:	b209      	sxth	r1, r1
 801a5c2:	4571      	cmp	r1, lr
 801a5c4:	dc3a      	bgt.n	801a63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a5c6:	eba2 020c 	sub.w	r2, r2, ip
 801a5ca:	b212      	sxth	r2, r2
 801a5cc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a5d0:	2a00      	cmp	r2, #0
 801a5d2:	dcee      	bgt.n	801a5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a5d4:	b00f      	add	sp, #60	; 0x3c
 801a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5da:	45c1      	cmp	r9, r8
 801a5dc:	db2e      	blt.n	801a63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a5de:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801a5e2:	4499      	add	r9, r3
 801a5e4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a5e8:	4498      	add	r8, r3
 801a5ea:	fa0f f989 	sxth.w	r9, r9
 801a5ee:	fa0f f888 	sxth.w	r8, r8
 801a5f2:	45c1      	cmp	r9, r8
 801a5f4:	dc22      	bgt.n	801a63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a5f6:	fa1f f28c 	uxth.w	r2, ip
 801a5fa:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a5fe:	45e6      	cmp	lr, ip
 801a600:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a604:	4413      	add	r3, r2
 801a606:	fa1f f88e 	uxth.w	r8, lr
 801a60a:	b29b      	uxth	r3, r3
 801a60c:	fa0f f983 	sxth.w	r9, r3
 801a610:	db0a      	blt.n	801a628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801a612:	eba3 0308 	sub.w	r3, r3, r8
 801a616:	1ac9      	subs	r1, r1, r3
 801a618:	b209      	sxth	r1, r1
 801a61a:	2900      	cmp	r1, #0
 801a61c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801a620:	ddd8      	ble.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a622:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801a626:	e7c4      	b.n	801a5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a628:	4441      	add	r1, r8
 801a62a:	b209      	sxth	r1, r1
 801a62c:	4549      	cmp	r1, r9
 801a62e:	dc05      	bgt.n	801a63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a630:	eba2 0208 	sub.w	r2, r2, r8
 801a634:	b212      	sxth	r2, r2
 801a636:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a63a:	e7c9      	b.n	801a5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801a63c:	4606      	mov	r6, r0
 801a63e:	e7b9      	b.n	801a5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a640:	2c00      	cmp	r4, #0
 801a642:	f47f af7d 	bne.w	801a540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801a646:	2e00      	cmp	r6, #0
 801a648:	f000 81e1 	beq.w	801aa0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a64c:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801a650:	4655      	mov	r5, sl
 801a652:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801a656:	b2b9      	uxth	r1, r7
 801a658:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a65c:	b2b3      	uxth	r3, r6
 801a65e:	9105      	str	r1, [sp, #20]
 801a660:	9805      	ldr	r0, [sp, #20]
 801a662:	441a      	add	r2, r3
 801a664:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a668:	b292      	uxth	r2, r2
 801a66a:	4401      	add	r1, r0
 801a66c:	fa0f f882 	sxth.w	r8, r2
 801a670:	b289      	uxth	r1, r1
 801a672:	9106      	str	r1, [sp, #24]
 801a674:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801a678:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801a67c:	9b04      	ldr	r3, [sp, #16]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d058      	beq.n	801a734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801a682:	9903      	ldr	r1, [sp, #12]
 801a684:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a688:	f7ff fdcd 	bl	801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a68c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a690:	b1d8      	cbz	r0, 801a6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a692:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a696:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a69a:	4576      	cmp	r6, lr
 801a69c:	dc26      	bgt.n	801a6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a69e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a6a2:	44f4      	add	ip, lr
 801a6a4:	fa0f fc8c 	sxth.w	ip, ip
 801a6a8:	45e0      	cmp	r8, ip
 801a6aa:	db1f      	blt.n	801a6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a6ac:	428f      	cmp	r7, r1
 801a6ae:	fa1f fc81 	uxth.w	ip, r1
 801a6b2:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a6b6:	dc0f      	bgt.n	801a6d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801a6b8:	9806      	ldr	r0, [sp, #24]
 801a6ba:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a6be:	eba0 0c0c 	sub.w	ip, r0, ip
 801a6c2:	eba1 010c 	sub.w	r1, r1, ip
 801a6c6:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	9904      	ldr	r1, [sp, #16]
 801a6ce:	3d08      	subs	r5, #8
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	3901      	subs	r1, #1
 801a6d4:	9104      	str	r1, [sp, #16]
 801a6d6:	e7cf      	b.n	801a678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801a6d8:	4461      	add	r1, ip
 801a6da:	b209      	sxth	r1, r1
 801a6dc:	4549      	cmp	r1, r9
 801a6de:	dcf5      	bgt.n	801a6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a6e0:	9905      	ldr	r1, [sp, #20]
 801a6e2:	eba1 0c0c 	sub.w	ip, r1, ip
 801a6e6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a6ea:	e7ee      	b.n	801a6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a6ec:	428f      	cmp	r7, r1
 801a6ee:	dced      	bgt.n	801a6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a6f0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a6f4:	4461      	add	r1, ip
 801a6f6:	b209      	sxth	r1, r1
 801a6f8:	4589      	cmp	r9, r1
 801a6fa:	dbe7      	blt.n	801a6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a6fc:	4576      	cmp	r6, lr
 801a6fe:	fa1f fc8e 	uxth.w	ip, lr
 801a702:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a706:	dc08      	bgt.n	801a71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a708:	eba2 0c0c 	sub.w	ip, r2, ip
 801a70c:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a710:	eba1 010c 	sub.w	r1, r1, ip
 801a714:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a718:	e7d7      	b.n	801a6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a71a:	4461      	add	r1, ip
 801a71c:	b209      	sxth	r1, r1
 801a71e:	4588      	cmp	r8, r1
 801a720:	dbd4      	blt.n	801a6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a722:	eba3 0c0c 	sub.w	ip, r3, ip
 801a726:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a72a:	e7ce      	b.n	801a6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a72c:	200152ca 	.word	0x200152ca
 801a730:	200152c8 	.word	0x200152c8
 801a734:	2c00      	cmp	r4, #0
 801a736:	f000 816a 	beq.w	801aa0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a73a:	9b02      	ldr	r3, [sp, #8]
 801a73c:	3301      	adds	r3, #1
 801a73e:	f000 8166 	beq.w	801aa0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a742:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a746:	9803      	ldr	r0, [sp, #12]
 801a748:	4621      	mov	r1, r4
 801a74a:	f7ff fddf 	bl	801a30c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a74e:	b120      	cbz	r0, 801a75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801a750:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a754:	9801      	ldr	r0, [sp, #4]
 801a756:	f7ff fea9 	bl	801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a75a:	9903      	ldr	r1, [sp, #12]
 801a75c:	4620      	mov	r0, r4
 801a75e:	f7ff fd62 	bl	801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a762:	2800      	cmp	r0, #0
 801a764:	f000 809b 	beq.w	801a89e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a768:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801a76c:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801a770:	b281      	uxth	r1, r0
 801a772:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a776:	9309      	str	r3, [sp, #36]	; 0x24
 801a778:	eb01 0c03 	add.w	ip, r1, r3
 801a77c:	b2ab      	uxth	r3, r5
 801a77e:	4285      	cmp	r5, r0
 801a780:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801a784:	fa1f f98c 	uxth.w	r9, ip
 801a788:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a78c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801a790:	eb03 040c 	add.w	r4, r3, ip
 801a794:	b2a4      	uxth	r4, r4
 801a796:	9405      	str	r4, [sp, #20]
 801a798:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801a79c:	9404      	str	r4, [sp, #16]
 801a79e:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801a7a2:	f340 809a 	ble.w	801a8da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801a7a6:	1a5b      	subs	r3, r3, r1
 801a7a8:	4596      	cmp	lr, r2
 801a7aa:	fa0f f589 	sxth.w	r5, r9
 801a7ae:	b29b      	uxth	r3, r3
 801a7b0:	b21e      	sxth	r6, r3
 801a7b2:	dd2e      	ble.n	801a812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801a7b4:	9f02      	ldr	r7, [sp, #8]
 801a7b6:	fa1f fe8e 	uxth.w	lr, lr
 801a7ba:	b292      	uxth	r2, r2
 801a7bc:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a7c0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801a7c4:	9f04      	ldr	r7, [sp, #16]
 801a7c6:	ebae 0102 	sub.w	r1, lr, r2
 801a7ca:	4486      	add	lr, r0
 801a7cc:	1b7f      	subs	r7, r7, r5
 801a7ce:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801a7d2:	b289      	uxth	r1, r1
 801a7d4:	442a      	add	r2, r5
 801a7d6:	fa0f fe8e 	sxth.w	lr, lr
 801a7da:	b20c      	sxth	r4, r1
 801a7dc:	b212      	sxth	r2, r2
 801a7de:	4367      	muls	r7, r4
 801a7e0:	ebae 0202 	sub.w	r2, lr, r2
 801a7e4:	4372      	muls	r2, r6
 801a7e6:	4297      	cmp	r7, r2
 801a7e8:	db09      	blt.n	801a7fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801a7ea:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801a7ee:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a7f2:	449c      	add	ip, r3
 801a7f4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a7f8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a7fc:	e680      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a7fe:	4401      	add	r1, r0
 801a800:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a804:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801a808:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a80c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a810:	e676      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a812:	9f04      	ldr	r7, [sp, #16]
 801a814:	42bd      	cmp	r5, r7
 801a816:	da27      	bge.n	801a868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801a818:	9902      	ldr	r1, [sp, #8]
 801a81a:	1b7f      	subs	r7, r7, r5
 801a81c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801a820:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801a824:	eb04 010e 	add.w	r1, r4, lr
 801a828:	fa1f f881 	uxth.w	r8, r1
 801a82c:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801a830:	4411      	add	r1, r2
 801a832:	fa0f f988 	sxth.w	r9, r8
 801a836:	eba2 020e 	sub.w	r2, r2, lr
 801a83a:	eba1 0108 	sub.w	r1, r1, r8
 801a83e:	4372      	muls	r2, r6
 801a840:	b289      	uxth	r1, r1
 801a842:	fa0f f881 	sxth.w	r8, r1
 801a846:	fb08 f707 	mul.w	r7, r8, r7
 801a84a:	42ba      	cmp	r2, r7
 801a84c:	dc06      	bgt.n	801a85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a84e:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801a852:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801a856:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801a85a:	e7ca      	b.n	801a7f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a85c:	4421      	add	r1, r4
 801a85e:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801a862:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a866:	e64b      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a868:	9d05      	ldr	r5, [sp, #20]
 801a86a:	2c06      	cmp	r4, #6
 801a86c:	eba9 0505 	sub.w	r5, r9, r5
 801a870:	b2ad      	uxth	r5, r5
 801a872:	fa0f fe85 	sxth.w	lr, r5
 801a876:	d818      	bhi.n	801a8aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801a878:	9b04      	ldr	r3, [sp, #16]
 801a87a:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801a87e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a882:	1c63      	adds	r3, r4, #1
 801a884:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801a888:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a88c:	9b01      	ldr	r3, [sp, #4]
 801a88e:	9d01      	ldr	r5, [sp, #4]
 801a890:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a894:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801a898:	805a      	strh	r2, [r3, #2]
 801a89a:	809e      	strh	r6, [r3, #4]
 801a89c:	80d9      	strh	r1, [r3, #6]
 801a89e:	9b02      	ldr	r3, [sp, #8]
 801a8a0:	f1aa 0a08 	sub.w	sl, sl, #8
 801a8a4:	3b01      	subs	r3, #1
 801a8a6:	9302      	str	r3, [sp, #8]
 801a8a8:	e747      	b.n	801a73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801a8aa:	9a02      	ldr	r2, [sp, #8]
 801a8ac:	45b6      	cmp	lr, r6
 801a8ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a8b2:	db0d      	blt.n	801a8d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801a8b4:	449c      	add	ip, r3
 801a8b6:	445a      	add	r2, fp
 801a8b8:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801a8bc:	fa1f fc8c 	uxth.w	ip, ip
 801a8c0:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801a8c4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a8c8:	448c      	add	ip, r1
 801a8ca:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801a8ce:	e617      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a8d0:	445a      	add	r2, fp
 801a8d2:	44ac      	add	ip, r5
 801a8d4:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801a8d8:	e78e      	b.n	801a7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a8da:	fa1f f18e 	uxth.w	r1, lr
 801a8de:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801a8e2:	b293      	uxth	r3, r2
 801a8e4:	4596      	cmp	lr, r2
 801a8e6:	eb01 0806 	add.w	r8, r1, r6
 801a8ea:	9306      	str	r3, [sp, #24]
 801a8ec:	fa1f f888 	uxth.w	r8, r8
 801a8f0:	9f06      	ldr	r7, [sp, #24]
 801a8f2:	fa0f f388 	sxth.w	r3, r8
 801a8f6:	9307      	str	r3, [sp, #28]
 801a8f8:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801a8fc:	443b      	add	r3, r7
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	9308      	str	r3, [sp, #32]
 801a902:	da25      	bge.n	801a950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801a904:	9905      	ldr	r1, [sp, #20]
 801a906:	eba3 0308 	sub.w	r3, r3, r8
 801a90a:	eba2 020e 	sub.w	r2, r2, lr
 801a90e:	1b40      	subs	r0, r0, r5
 801a910:	eba9 0401 	sub.w	r4, r9, r1
 801a914:	b29b      	uxth	r3, r3
 801a916:	b2a4      	uxth	r4, r4
 801a918:	b219      	sxth	r1, r3
 801a91a:	fa0f f984 	sxth.w	r9, r4
 801a91e:	4348      	muls	r0, r1
 801a920:	fb09 f202 	mul.w	r2, r9, r2
 801a924:	4282      	cmp	r2, r0
 801a926:	9a02      	ldr	r2, [sp, #8]
 801a928:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a92c:	445a      	add	r2, fp
 801a92e:	dc06      	bgt.n	801a93e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801a930:	9b07      	ldr	r3, [sp, #28]
 801a932:	44a4      	add	ip, r4
 801a934:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801a938:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801a93c:	e75c      	b.n	801a7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a93e:	9904      	ldr	r1, [sp, #16]
 801a940:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801a944:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801a948:	4433      	add	r3, r6
 801a94a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a94e:	e5d7      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a950:	9f06      	ldr	r7, [sp, #24]
 801a952:	9b04      	ldr	r3, [sp, #16]
 801a954:	1bc9      	subs	r1, r1, r7
 801a956:	fa0f f789 	sxth.w	r7, r9
 801a95a:	b289      	uxth	r1, r1
 801a95c:	429f      	cmp	r7, r3
 801a95e:	fa0f fe81 	sxth.w	lr, r1
 801a962:	dd22      	ble.n	801a9aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801a964:	9a05      	ldr	r2, [sp, #20]
 801a966:	1b40      	subs	r0, r0, r5
 801a968:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a96c:	eba9 0202 	sub.w	r2, r9, r2
 801a970:	9d07      	ldr	r5, [sp, #28]
 801a972:	fb0e f000 	mul.w	r0, lr, r0
 801a976:	b292      	uxth	r2, r2
 801a978:	eba5 0a03 	sub.w	sl, r5, r3
 801a97c:	9b02      	ldr	r3, [sp, #8]
 801a97e:	b214      	sxth	r4, r2
 801a980:	00db      	lsls	r3, r3, #3
 801a982:	fb04 fa0a 	mul.w	sl, r4, sl
 801a986:	445b      	add	r3, fp
 801a988:	4550      	cmp	r0, sl
 801a98a:	db03      	blt.n	801a994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801a98c:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801a990:	4494      	add	ip, r2
 801a992:	e731      	b.n	801a7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a994:	9a04      	ldr	r2, [sp, #16]
 801a996:	4431      	add	r1, r6
 801a998:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801a99c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a9a0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a9a4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a9a8:	e75b      	b.n	801a862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801a9aa:	9b08      	ldr	r3, [sp, #32]
 801a9ac:	2c06      	cmp	r4, #6
 801a9ae:	eba3 0308 	sub.w	r3, r3, r8
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	b21d      	sxth	r5, r3
 801a9b6:	d813      	bhi.n	801a9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801a9b8:	9b07      	ldr	r3, [sp, #28]
 801a9ba:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801a9be:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a9c2:	1c63      	adds	r3, r4, #1
 801a9c4:	9901      	ldr	r1, [sp, #4]
 801a9c6:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a9ca:	9b01      	ldr	r3, [sp, #4]
 801a9cc:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801a9d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a9d4:	805a      	strh	r2, [r3, #2]
 801a9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9d8:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a9dc:	809a      	strh	r2, [r3, #4]
 801a9de:	e75e      	b.n	801a89e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a9e0:	9802      	ldr	r0, [sp, #8]
 801a9e2:	4575      	cmp	r5, lr
 801a9e4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a9e8:	db0d      	blt.n	801aa06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801a9ea:	4431      	add	r1, r6
 801a9ec:	9b06      	ldr	r3, [sp, #24]
 801a9ee:	4458      	add	r0, fp
 801a9f0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a9f4:	b289      	uxth	r1, r1
 801a9f6:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801a9fa:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a9fe:	4419      	add	r1, r3
 801aa00:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801aa04:	e57c      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801aa06:	4458      	add	r0, fp
 801aa08:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801aa0c:	e79c      	b.n	801a948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801aa0e:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801aa12:	2e07      	cmp	r6, #7
 801aa14:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801aa18:	d812      	bhi.n	801aa40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801aa1a:	1c75      	adds	r5, r6, #1
 801aa1c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801aa20:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801aa24:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801aa28:	9d01      	ldr	r5, [sp, #4]
 801aa2a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801aa2e:	442c      	add	r4, r5
 801aa30:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801aa34:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801aa38:	8061      	strh	r1, [r4, #2]
 801aa3a:	80a2      	strh	r2, [r4, #4]
 801aa3c:	80e3      	strh	r3, [r4, #6]
 801aa3e:	e5c9      	b.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801aa40:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801aa44:	3e01      	subs	r6, #1
 801aa46:	445c      	add	r4, fp
 801aa48:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801aa4c:	f04f 37ff 	mov.w	r7, #4294967295
 801aa50:	2500      	movs	r5, #0
 801aa52:	9305      	str	r3, [sp, #20]
 801aa54:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801aa58:	1e72      	subs	r2, r6, #1
 801aa5a:	9302      	str	r3, [sp, #8]
 801aa5c:	4691      	mov	r9, r2
 801aa5e:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801aa62:	9304      	str	r3, [sp, #16]
 801aa64:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801aa68:	f1b9 3fff 	cmp.w	r9, #4294967295
 801aa6c:	6818      	ldr	r0, [r3, #0]
 801aa6e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801aa72:	9207      	str	r2, [sp, #28]
 801aa74:	bf16      	itet	ne
 801aa76:	9905      	ldrne	r1, [sp, #20]
 801aa78:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801aa7c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801aa80:	9306      	str	r3, [sp, #24]
 801aa82:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801aa86:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801aa8a:	fb18 f801 	smulbb	r8, r8, r1
 801aa8e:	6859      	ldr	r1, [r3, #4]
 801aa90:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801aa94:	4671      	mov	r1, lr
 801aa96:	a80c      	add	r0, sp, #48	; 0x30
 801aa98:	f7ff fc5e 	bl	801a358 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aa9c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801aaa0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801aaa4:	f04f 0c08 	mov.w	ip, #8
 801aaa8:	9b04      	ldr	r3, [sp, #16]
 801aaaa:	9a02      	ldr	r2, [sp, #8]
 801aaac:	fb10 f001 	smulbb	r0, r0, r1
 801aab0:	fb02 8803 	mla	r8, r2, r3, r8
 801aab4:	eba0 0108 	sub.w	r1, r0, r8
 801aab8:	fb90 f0fc 	sdiv	r0, r0, ip
 801aabc:	4288      	cmp	r0, r1
 801aabe:	dc20      	bgt.n	801ab02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801aac0:	4551      	cmp	r1, sl
 801aac2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801aac6:	da03      	bge.n	801aad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801aac8:	b1d9      	cbz	r1, 801ab02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801aaca:	468a      	mov	sl, r1
 801aacc:	464f      	mov	r7, r9
 801aace:	4635      	mov	r5, r6
 801aad0:	f109 39ff 	add.w	r9, r9, #4294967295
 801aad4:	f119 0f02 	cmn.w	r9, #2
 801aad8:	d1c6      	bne.n	801aa68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801aada:	4616      	mov	r6, r2
 801aadc:	3201      	adds	r2, #1
 801aade:	f1a4 0408 	sub.w	r4, r4, #8
 801aae2:	d1b7      	bne.n	801aa54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801aae4:	9b01      	ldr	r3, [sp, #4]
 801aae6:	b2ac      	uxth	r4, r5
 801aae8:	00ed      	lsls	r5, r5, #3
 801aaea:	1958      	adds	r0, r3, r5
 801aaec:	1c7b      	adds	r3, r7, #1
 801aaee:	d10b      	bne.n	801ab08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801aaf0:	4601      	mov	r1, r0
 801aaf2:	9803      	ldr	r0, [sp, #12]
 801aaf4:	f7ff fc30 	bl	801a358 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aaf8:	4621      	mov	r1, r4
 801aafa:	9801      	ldr	r0, [sp, #4]
 801aafc:	f7ff fcd6 	bl	801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ab00:	e4fe      	b.n	801a500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ab02:	464f      	mov	r7, r9
 801ab04:	4635      	mov	r5, r6
 801ab06:	e7ed      	b.n	801aae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801ab08:	9b01      	ldr	r3, [sp, #4]
 801ab0a:	00ff      	lsls	r7, r7, #3
 801ab0c:	445d      	add	r5, fp
 801ab0e:	19d9      	adds	r1, r3, r7
 801ab10:	445f      	add	r7, fp
 801ab12:	f7ff fc21 	bl	801a358 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ab16:	9b03      	ldr	r3, [sp, #12]
 801ab18:	cb03      	ldmia	r3!, {r0, r1}
 801ab1a:	9b03      	ldr	r3, [sp, #12]
 801ab1c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801ab20:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801ab24:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801ab28:	6869      	ldr	r1, [r5, #4]
 801ab2a:	c303      	stmia	r3!, {r0, r1}
 801ab2c:	e7e4      	b.n	801aaf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801ab2e:	bf00      	nop

0801ab30 <_ZN8touchgfx11Application10invalidateEv>:
 801ab30:	4b09      	ldr	r3, [pc, #36]	; (801ab58 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801ab32:	b082      	sub	sp, #8
 801ab34:	2100      	movs	r1, #0
 801ab36:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab3a:	4b08      	ldr	r3, [pc, #32]	; (801ab5c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801ab3c:	9100      	str	r1, [sp, #0]
 801ab3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab42:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab46:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab4a:	ab02      	add	r3, sp, #8
 801ab4c:	e913 0006 	ldmdb	r3, {r1, r2}
 801ab50:	b002      	add	sp, #8
 801ab52:	f7ff bcbf 	b.w	801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ab56:	bf00      	nop
 801ab58:	200152c8 	.word	0x200152c8
 801ab5c:	200152ca 	.word	0x200152ca

0801ab60 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab64:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801ab68:	b09b      	sub	sp, #108	; 0x6c
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	4630      	mov	r0, r6
 801ab6e:	f7fc f972 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab72:	4605      	mov	r5, r0
 801ab74:	b940      	cbnz	r0, 801ab88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801ab76:	4620      	mov	r0, r4
 801ab78:	e896 0006 	ldmia.w	r6, {r1, r2}
 801ab7c:	f7ff fcaa 	bl	801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ab80:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801ab84:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801ab88:	4bc8      	ldr	r3, [pc, #800]	; (801aeac <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d03e      	beq.n	801ac0e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ab90:	4dc7      	ldr	r5, [pc, #796]	; (801aeb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ab92:	4628      	mov	r0, r5
 801ab94:	f7fc f95f 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab98:	4606      	mov	r6, r0
 801ab9a:	2800      	cmp	r0, #0
 801ab9c:	d137      	bne.n	801ac0e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ab9e:	4628      	mov	r0, r5
 801aba0:	f7ff fa02 	bl	8019fa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801aba4:	6829      	ldr	r1, [r5, #0]
 801aba6:	686a      	ldr	r2, [r5, #4]
 801aba8:	4620      	mov	r0, r4
 801abaa:	f7ff fc93 	bl	801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801abae:	802e      	strh	r6, [r5, #0]
 801abb0:	806e      	strh	r6, [r5, #2]
 801abb2:	80ae      	strh	r6, [r5, #4]
 801abb4:	80ee      	strh	r6, [r5, #6]
 801abb6:	ae09      	add	r6, sp, #36	; 0x24
 801abb8:	4630      	mov	r0, r6
 801abba:	f7ff fc24 	bl	801a406 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801abbe:	4abd      	ldr	r2, [pc, #756]	; (801aeb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801abc0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801abc4:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801abc8:	8815      	ldrh	r5, [r2, #0]
 801abca:	9202      	str	r2, [sp, #8]
 801abcc:	462b      	mov	r3, r5
 801abce:	429f      	cmp	r7, r3
 801abd0:	d924      	bls.n	801ac1c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801abd2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801abd6:	2907      	cmp	r1, #7
 801abd8:	d816      	bhi.n	801ac08 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801abda:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801abde:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801abe2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801abe6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801abea:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801abee:	1c4a      	adds	r2, r1, #1
 801abf0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801abf4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801abf8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801abfc:	f8a2 9002 	strh.w	r9, [r2, #2]
 801ac00:	f8a2 e004 	strh.w	lr, [r2, #4]
 801ac04:	f8a2 c006 	strh.w	ip, [r2, #6]
 801ac08:	3301      	adds	r3, #1
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	e7df      	b.n	801abce <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801ac0e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d1cf      	bne.n	801abb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801ac16:	b01b      	add	sp, #108	; 0x6c
 801ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac1c:	462f      	mov	r7, r5
 801ac1e:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ac22:	42bb      	cmp	r3, r7
 801ac24:	d90b      	bls.n	801ac3e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801ac26:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801ac2a:	3701      	adds	r7, #1
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ac32:	b2bf      	uxth	r7, r7
 801ac34:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ac38:	f7ff fc4c 	bl	801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ac3c:	e7ef      	b.n	801ac1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801ac3e:	4a9e      	ldr	r2, [pc, #632]	; (801aeb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801ac40:	6813      	ldr	r3, [r2, #0]
 801ac42:	4690      	mov	r8, r2
 801ac44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ac48:	2b01      	cmp	r3, #1
 801ac4a:	f040 80e4 	bne.w	801ae16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801ac4e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ac52:	4629      	mov	r1, r5
 801ac54:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801ac58:	2500      	movs	r5, #0
 801ac5a:	33aa      	adds	r3, #170	; 0xaa
 801ac5c:	428f      	cmp	r7, r1
 801ac5e:	f103 0308 	add.w	r3, r3, #8
 801ac62:	dd0a      	ble.n	801ac7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801ac64:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ac68:	3101      	adds	r1, #1
 801ac6a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801ac6e:	4402      	add	r2, r0
 801ac70:	b212      	sxth	r2, r2
 801ac72:	4295      	cmp	r5, r2
 801ac74:	bfb8      	it	lt
 801ac76:	4615      	movlt	r5, r2
 801ac78:	e7f0      	b.n	801ac5c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801ac7a:	4b90      	ldr	r3, [pc, #576]	; (801aebc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801ac7c:	f8df b238 	ldr.w	fp, [pc, #568]	; 801aeb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801ac80:	881b      	ldrh	r3, [r3, #0]
 801ac82:	46d8      	mov	r8, fp
 801ac84:	2b0f      	cmp	r3, #15
 801ac86:	bf8c      	ite	hi
 801ac88:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801ac8c:	f04f 0a01 	movls.w	sl, #1
 801ac90:	2300      	movs	r3, #0
 801ac92:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ac96:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801ac9a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ac9e:	4438      	add	r0, r7
 801aca0:	b207      	sxth	r7, r0
 801aca2:	f8db 0000 	ldr.w	r0, [fp]
 801aca6:	42bd      	cmp	r5, r7
 801aca8:	6803      	ldr	r3, [r0, #0]
 801acaa:	f340 8084 	ble.w	801adb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801acae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801acb2:	4798      	blx	r3
 801acb4:	eb07 030a 	add.w	r3, r7, sl
 801acb8:	4298      	cmp	r0, r3
 801acba:	da07      	bge.n	801accc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801acbc:	4285      	cmp	r5, r0
 801acbe:	dd05      	ble.n	801accc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801acc0:	4287      	cmp	r7, r0
 801acc2:	dd6d      	ble.n	801ada0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801acc4:	2f00      	cmp	r7, #0
 801acc6:	dd6b      	ble.n	801ada0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801acc8:	4628      	mov	r0, r5
 801acca:	e004      	b.n	801acd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801accc:	4287      	cmp	r7, r0
 801acce:	dcfb      	bgt.n	801acc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801acd0:	42a8      	cmp	r0, r5
 801acd2:	bfa8      	it	ge
 801acd4:	4628      	movge	r0, r5
 801acd6:	4b7a      	ldr	r3, [pc, #488]	; (801aec0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801acd8:	1bc0      	subs	r0, r0, r7
 801acda:	2200      	movs	r2, #0
 801acdc:	f8ad 7016 	strh.w	r7, [sp, #22]
 801ace0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ace4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ace8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801acec:	9b02      	ldr	r3, [sp, #8]
 801acee:	f8ad 001a 	strh.w	r0, [sp, #26]
 801acf2:	881f      	ldrh	r7, [r3, #0]
 801acf4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801acf8:	42bb      	cmp	r3, r7
 801acfa:	d9cc      	bls.n	801ac96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801acfc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801ad00:	ab07      	add	r3, sp, #28
 801ad02:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ad06:	6851      	ldr	r1, [r2, #4]
 801ad08:	c303      	stmia	r3!, {r0, r1}
 801ad0a:	a905      	add	r1, sp, #20
 801ad0c:	a807      	add	r0, sp, #28
 801ad0e:	f7ff fa8a 	bl	801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad12:	2800      	cmp	r0, #0
 801ad14:	d04c      	beq.n	801adb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801ad16:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801ad1a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801ad1e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801ad22:	4686      	mov	lr, r0
 801ad24:	4290      	cmp	r0, r2
 801ad26:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801ad2a:	4448      	add	r0, r9
 801ad2c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801ad30:	bfb8      	it	lt
 801ad32:	4696      	movlt	lr, r2
 801ad34:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ad38:	444a      	add	r2, r9
 801ad3a:	b280      	uxth	r0, r0
 801ad3c:	4299      	cmp	r1, r3
 801ad3e:	468c      	mov	ip, r1
 801ad40:	b292      	uxth	r2, r2
 801ad42:	9303      	str	r3, [sp, #12]
 801ad44:	bfb8      	it	lt
 801ad46:	469c      	movlt	ip, r3
 801ad48:	b203      	sxth	r3, r0
 801ad4a:	fa0f f982 	sxth.w	r9, r2
 801ad4e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801ad52:	f8ad c01e 	strh.w	ip, [sp, #30]
 801ad56:	454b      	cmp	r3, r9
 801ad58:	bfb8      	it	lt
 801ad5a:	4602      	movlt	r2, r0
 801ad5c:	9b03      	ldr	r3, [sp, #12]
 801ad5e:	eba2 020e 	sub.w	r2, r2, lr
 801ad62:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ad66:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ad6a:	4411      	add	r1, r2
 801ad6c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ad70:	4413      	add	r3, r2
 801ad72:	b289      	uxth	r1, r1
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	b208      	sxth	r0, r1
 801ad78:	b21a      	sxth	r2, r3
 801ad7a:	4290      	cmp	r0, r2
 801ad7c:	bfb8      	it	lt
 801ad7e:	460b      	movlt	r3, r1
 801ad80:	eba3 030c 	sub.w	r3, r3, ip
 801ad84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ad88:	a807      	add	r0, sp, #28
 801ad8a:	f7fc f864 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad8e:	b920      	cbnz	r0, 801ad9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801ad90:	6823      	ldr	r3, [r4, #0]
 801ad92:	a907      	add	r1, sp, #28
 801ad94:	4620      	mov	r0, r4
 801ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad98:	4798      	blx	r3
 801ad9a:	3701      	adds	r7, #1
 801ad9c:	b2bf      	uxth	r7, r7
 801ad9e:	e7a9      	b.n	801acf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801ada0:	f8d8 0000 	ldr.w	r0, [r8]
 801ada4:	2101      	movs	r1, #1
 801ada6:	6803      	ldr	r3, [r0, #0]
 801ada8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801adac:	4798      	blx	r3
 801adae:	e772      	b.n	801ac96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801adb0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801adb4:	e7e8      	b.n	801ad88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adb8:	4798      	blx	r3
 801adba:	4b42      	ldr	r3, [pc, #264]	; (801aec4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	f43f af29 	beq.w	801ac16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801adc4:	2300      	movs	r3, #0
 801adc6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801adca:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801adce:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801add2:	9b02      	ldr	r3, [sp, #8]
 801add4:	881b      	ldrh	r3, [r3, #0]
 801add6:	429d      	cmp	r5, r3
 801add8:	f67f af1d 	bls.w	801ac16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801addc:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801ade0:	2907      	cmp	r1, #7
 801ade2:	d815      	bhi.n	801ae10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801ade4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801ade8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801adec:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801adf0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801adf4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801adf8:	1c4a      	adds	r2, r1, #1
 801adfa:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801adfe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801ae02:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801ae06:	f8a2 e002 	strh.w	lr, [r2, #2]
 801ae0a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801ae0e:	80d7      	strh	r7, [r2, #6]
 801ae10:	3301      	adds	r3, #1
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	e7df      	b.n	801add6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801ae16:	2b02      	cmp	r3, #2
 801ae18:	f040 8135 	bne.w	801b086 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801ae1c:	4b2a      	ldr	r3, [pc, #168]	; (801aec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801ae1e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801ae22:	781b      	ldrb	r3, [r3, #0]
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	f000 809c 	beq.w	801af62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ae2a:	9b02      	ldr	r3, [sp, #8]
 801ae2c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801ae30:	f8b3 b000 	ldrh.w	fp, [r3]
 801ae34:	f10b 0b01 	add.w	fp, fp, #1
 801ae38:	fa1f fb8b 	uxth.w	fp, fp
 801ae3c:	2a00      	cmp	r2, #0
 801ae3e:	d0bc      	beq.n	801adba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ae40:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801ae44:	4659      	mov	r1, fp
 801ae46:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801ae4a:	f04f 0800 	mov.w	r8, #0
 801ae4e:	441d      	add	r5, r3
 801ae50:	b22d      	sxth	r5, r5
 801ae52:	b28b      	uxth	r3, r1
 801ae54:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801ae58:	429a      	cmp	r2, r3
 801ae5a:	f240 80c0 	bls.w	801afde <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801ae5e:	4427      	add	r7, r4
 801ae60:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801ae64:	4608      	mov	r0, r1
 801ae66:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801ae6a:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801ae6e:	4563      	cmp	r3, ip
 801ae70:	f340 80a2 	ble.w	801afb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801ae74:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801ae78:	4465      	add	r5, ip
 801ae7a:	b22d      	sxth	r5, r5
 801ae7c:	429d      	cmp	r5, r3
 801ae7e:	bfa8      	it	ge
 801ae80:	461d      	movge	r5, r3
 801ae82:	3101      	adds	r1, #1
 801ae84:	4680      	mov	r8, r0
 801ae86:	e7e4      	b.n	801ae52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801ae88:	d10b      	bne.n	801aea2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801ae8a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801ae8e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801ae92:	458c      	cmp	ip, r1
 801ae94:	bfb4      	ite	lt
 801ae96:	469c      	movlt	ip, r3
 801ae98:	46bc      	movge	ip, r7
 801ae9a:	4572      	cmp	r2, lr
 801ae9c:	bfb8      	it	lt
 801ae9e:	4672      	movlt	r2, lr
 801aea0:	e087      	b.n	801afb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801aea2:	428a      	cmp	r2, r1
 801aea4:	46bc      	mov	ip, r7
 801aea6:	bfb8      	it	lt
 801aea8:	460a      	movlt	r2, r1
 801aeaa:	e082      	b.n	801afb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801aeac:	2001530c 	.word	0x2001530c
 801aeb0:	20015318 	.word	0x20015318
 801aeb4:	20000044 	.word	0x20000044
 801aeb8:	200152d4 	.word	0x200152d4
 801aebc:	200152ca 	.word	0x200152ca
 801aec0:	200152c8 	.word	0x200152c8
 801aec4:	200152d2 	.word	0x200152d2
 801aec8:	200152cc 	.word	0x200152cc
 801aecc:	1961      	adds	r1, r4, r5
 801aece:	ab07      	add	r3, sp, #28
 801aed0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801aed4:	6849      	ldr	r1, [r1, #4]
 801aed6:	c303      	stmia	r3!, {r0, r1}
 801aed8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801aedc:	a807      	add	r0, sp, #28
 801aede:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aee2:	2b13      	cmp	r3, #19
 801aee4:	440b      	add	r3, r1
 801aee6:	bfd8      	it	le
 801aee8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801aeec:	1a9b      	subs	r3, r3, r2
 801aeee:	f8ad 201c 	strh.w	r2, [sp, #28]
 801aef2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aef6:	f7ff f871 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aefa:	a807      	add	r0, sp, #28
 801aefc:	f7fb ffab 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af00:	bb78      	cbnz	r0, 801af62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801af02:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801af06:	4425      	add	r5, r4
 801af08:	f8d8 0000 	ldr.w	r0, [r8]
 801af0c:	f1bc 0f14 	cmp.w	ip, #20
 801af10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801af14:	f8d0 e000 	ldr.w	lr, [r0]
 801af18:	bfa8      	it	ge
 801af1a:	f04f 0c14 	movge.w	ip, #20
 801af1e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801af22:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801af26:	fa1f fc8c 	uxth.w	ip, ip
 801af2a:	f8cd c000 	str.w	ip, [sp]
 801af2e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801af32:	47d0      	blx	sl
 801af34:	4682      	mov	sl, r0
 801af36:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801af3a:	a807      	add	r0, sp, #28
 801af3c:	f7ff f834 	bl	8019fa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801af40:	6823      	ldr	r3, [r4, #0]
 801af42:	4620      	mov	r0, r4
 801af44:	a907      	add	r1, sp, #28
 801af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af48:	4798      	blx	r3
 801af4a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801af4e:	eba0 000a 	sub.w	r0, r0, sl
 801af52:	b200      	sxth	r0, r0
 801af54:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801af58:	b918      	cbnz	r0, 801af62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801af5a:	b2b9      	uxth	r1, r7
 801af5c:	4648      	mov	r0, r9
 801af5e:	f7ff faa5 	bl	801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801af62:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801af66:	f1bb 0f00 	cmp.w	fp, #0
 801af6a:	f43f af26 	beq.w	801adba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801af6e:	9b02      	ldr	r3, [sp, #8]
 801af70:	2700      	movs	r7, #0
 801af72:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801af76:	881b      	ldrh	r3, [r3, #0]
 801af78:	3301      	adds	r3, #1
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	b299      	uxth	r1, r3
 801af7e:	00fd      	lsls	r5, r7, #3
 801af80:	458b      	cmp	fp, r1
 801af82:	d9a3      	bls.n	801aecc <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801af84:	4425      	add	r5, r4
 801af86:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801af8a:	469c      	mov	ip, r3
 801af8c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801af90:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801af94:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801af98:	4408      	add	r0, r1
 801af9a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801af9e:	4471      	add	r1, lr
 801afa0:	b200      	sxth	r0, r0
 801afa2:	b209      	sxth	r1, r1
 801afa4:	4288      	cmp	r0, r1
 801afa6:	f6bf af6f 	bge.w	801ae88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801afaa:	4586      	cmp	lr, r0
 801afac:	4672      	mov	r2, lr
 801afae:	bfb8      	it	lt
 801afb0:	4602      	movlt	r2, r0
 801afb2:	3301      	adds	r3, #1
 801afb4:	4667      	mov	r7, ip
 801afb6:	e7e1      	b.n	801af7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801afb8:	d10c      	bne.n	801afd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801afba:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801afbe:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801afc2:	4287      	cmp	r7, r0
 801afc4:	bfb4      	ite	lt
 801afc6:	4608      	movlt	r0, r1
 801afc8:	4640      	movge	r0, r8
 801afca:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801afce:	443b      	add	r3, r7
 801afd0:	b21b      	sxth	r3, r3
 801afd2:	e753      	b.n	801ae7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801afd4:	4565      	cmp	r5, ip
 801afd6:	4640      	mov	r0, r8
 801afd8:	bfa8      	it	ge
 801afda:	4665      	movge	r5, ip
 801afdc:	e751      	b.n	801ae82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801afde:	eb09 0007 	add.w	r0, r9, r7
 801afe2:	4427      	add	r7, r4
 801afe4:	9203      	str	r2, [sp, #12]
 801afe6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801afea:	f1ba 0f13 	cmp.w	sl, #19
 801afee:	bfde      	ittt	le
 801aff0:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801aff4:	4455      	addle	r5, sl
 801aff6:	b22d      	sxthle	r5, r5
 801aff8:	f7fb ff2d 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801affc:	9a03      	ldr	r2, [sp, #12]
 801affe:	2800      	cmp	r0, #0
 801b000:	f47f af1c 	bne.w	801ae3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801b004:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801b008:	fa1f fa8a 	uxth.w	sl, sl
 801b00c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b010:	1aad      	subs	r5, r5, r2
 801b012:	4829      	ldr	r0, [pc, #164]	; (801b0b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801b014:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801b018:	2d14      	cmp	r5, #20
 801b01a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801b01e:	6800      	ldr	r0, [r0, #0]
 801b020:	bfa8      	it	ge
 801b022:	2514      	movge	r5, #20
 801b024:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b028:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b02c:	b289      	uxth	r1, r1
 801b02e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b032:	b2ad      	uxth	r5, r5
 801b034:	f8d0 c000 	ldr.w	ip, [r0]
 801b038:	b292      	uxth	r2, r2
 801b03a:	4555      	cmp	r5, sl
 801b03c:	bf94      	ite	ls
 801b03e:	9500      	strls	r5, [sp, #0]
 801b040:	f8cd a000 	strhi.w	sl, [sp]
 801b044:	b29b      	uxth	r3, r3
 801b046:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801b04a:	47a8      	blx	r5
 801b04c:	6823      	ldr	r3, [r4, #0]
 801b04e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b052:	a907      	add	r1, sp, #28
 801b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b056:	4620      	mov	r0, r4
 801b058:	4798      	blx	r3
 801b05a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b05e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801b062:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801b066:	1a5b      	subs	r3, r3, r1
 801b068:	440a      	add	r2, r1
 801b06a:	b21b      	sxth	r3, r3
 801b06c:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801b070:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801b074:	2b00      	cmp	r3, #0
 801b076:	f47f aed8 	bne.w	801ae2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b07a:	fa1f f188 	uxth.w	r1, r8
 801b07e:	4648      	mov	r0, r9
 801b080:	f7ff fa14 	bl	801a4ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b084:	e6d1      	b.n	801ae2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b086:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b08a:	42ab      	cmp	r3, r5
 801b08c:	f67f ae95 	bls.w	801adba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b090:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b094:	ab07      	add	r3, sp, #28
 801b096:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b09a:	6851      	ldr	r1, [r2, #4]
 801b09c:	c303      	stmia	r3!, {r0, r1}
 801b09e:	a807      	add	r0, sp, #28
 801b0a0:	f7fb fed9 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0a4:	b920      	cbnz	r0, 801b0b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801b0a6:	6823      	ldr	r3, [r4, #0]
 801b0a8:	a907      	add	r1, sp, #28
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0ae:	4798      	blx	r3
 801b0b0:	3501      	adds	r5, #1
 801b0b2:	b2ad      	uxth	r5, r5
 801b0b4:	e7e7      	b.n	801b086 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801b0b6:	bf00      	nop
 801b0b8:	200152d4 	.word	0x200152d4

0801b0bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b0bc:	4b03      	ldr	r3, [pc, #12]	; (801b0cc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	801a      	strh	r2, [r3, #0]
 801b0c2:	805a      	strh	r2, [r3, #2]
 801b0c4:	809a      	strh	r2, [r3, #4]
 801b0c6:	80da      	strh	r2, [r3, #6]
 801b0c8:	4770      	bx	lr
 801b0ca:	bf00      	nop
 801b0cc:	20015318 	.word	0x20015318

0801b0d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d4:	b09d      	sub	sp, #116	; 0x74
 801b0d6:	4606      	mov	r6, r0
 801b0d8:	4614      	mov	r4, r2
 801b0da:	468a      	mov	sl, r1
 801b0dc:	a803      	add	r0, sp, #12
 801b0de:	461d      	mov	r5, r3
 801b0e0:	f000 fd6c 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 801b0e4:	6833      	ldr	r3, [r6, #0]
 801b0e6:	4630      	mov	r0, r6
 801b0e8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0ee:	4798      	blx	r3
 801b0f0:	6833      	ldr	r3, [r6, #0]
 801b0f2:	4607      	mov	r7, r0
 801b0f4:	4630      	mov	r0, r6
 801b0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0f8:	4798      	blx	r3
 801b0fa:	462a      	mov	r2, r5
 801b0fc:	2500      	movs	r5, #0
 801b0fe:	4621      	mov	r1, r4
 801b100:	9000      	str	r0, [sp, #0]
 801b102:	463b      	mov	r3, r7
 801b104:	462c      	mov	r4, r5
 801b106:	46a9      	mov	r9, r5
 801b108:	46a8      	mov	r8, r5
 801b10a:	a803      	add	r0, sp, #12
 801b10c:	f000 fdb1 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b110:	2300      	movs	r3, #0
 801b112:	9302      	str	r3, [sp, #8]
 801b114:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b118:	429c      	cmp	r4, r3
 801b11a:	d002      	beq.n	801b122 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b11c:	455c      	cmp	r4, fp
 801b11e:	bf18      	it	ne
 801b120:	4625      	movne	r5, r4
 801b122:	ab02      	add	r3, sp, #8
 801b124:	4632      	mov	r2, r6
 801b126:	4651      	mov	r1, sl
 801b128:	a803      	add	r0, sp, #12
 801b12a:	f001 f8a7 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b12e:	4604      	mov	r4, r0
 801b130:	b108      	cbz	r0, 801b136 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b132:	280a      	cmp	r0, #10
 801b134:	d10a      	bne.n	801b14c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b136:	45c1      	cmp	r9, r8
 801b138:	bf38      	it	cc
 801b13a:	46c1      	movcc	r9, r8
 801b13c:	f04f 0800 	mov.w	r8, #0
 801b140:	2c00      	cmp	r4, #0
 801b142:	d1e5      	bne.n	801b110 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b144:	4648      	mov	r0, r9
 801b146:	b01d      	add	sp, #116	; 0x74
 801b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b14c:	9a02      	ldr	r2, [sp, #8]
 801b14e:	2a00      	cmp	r2, #0
 801b150:	d0de      	beq.n	801b110 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b152:	7b57      	ldrb	r7, [r2, #13]
 801b154:	4629      	mov	r1, r5
 801b156:	6833      	ldr	r3, [r6, #0]
 801b158:	007f      	lsls	r7, r7, #1
 801b15a:	8894      	ldrh	r4, [r2, #4]
 801b15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b15e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b162:	7a97      	ldrb	r7, [r2, #10]
 801b164:	4307      	orrs	r7, r0
 801b166:	4630      	mov	r0, r6
 801b168:	4798      	blx	r3
 801b16a:	4438      	add	r0, r7
 801b16c:	4480      	add	r8, r0
 801b16e:	fa1f f888 	uxth.w	r8, r8
 801b172:	e7e5      	b.n	801b140 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b174 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b174:	b508      	push	{r3, lr}
 801b176:	6803      	ldr	r3, [r0, #0]
 801b178:	68db      	ldr	r3, [r3, #12]
 801b17a:	4798      	blx	r3
 801b17c:	b128      	cbz	r0, 801b18a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b17e:	7b43      	ldrb	r3, [r0, #13]
 801b180:	7a80      	ldrb	r0, [r0, #10]
 801b182:	005b      	lsls	r3, r3, #1
 801b184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b188:	4318      	orrs	r0, r3
 801b18a:	bd08      	pop	{r3, pc}

0801b18c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b18c:	b40e      	push	{r1, r2, r3}
 801b18e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b190:	b09e      	sub	sp, #120	; 0x78
 801b192:	4605      	mov	r5, r0
 801b194:	ab23      	add	r3, sp, #140	; 0x8c
 801b196:	a805      	add	r0, sp, #20
 801b198:	f853 4b04 	ldr.w	r4, [r3], #4
 801b19c:	9303      	str	r3, [sp, #12]
 801b19e:	f000 fd0d 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 801b1a2:	682b      	ldr	r3, [r5, #0]
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1a8:	4798      	blx	r3
 801b1aa:	682b      	ldr	r3, [r5, #0]
 801b1ac:	4606      	mov	r6, r0
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1b2:	4798      	blx	r3
 801b1b4:	4633      	mov	r3, r6
 801b1b6:	4621      	mov	r1, r4
 801b1b8:	ae1e      	add	r6, sp, #120	; 0x78
 801b1ba:	2400      	movs	r4, #0
 801b1bc:	9000      	str	r0, [sp, #0]
 801b1be:	9a03      	ldr	r2, [sp, #12]
 801b1c0:	a805      	add	r0, sp, #20
 801b1c2:	f000 fd56 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b1c6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b1ca:	462a      	mov	r2, r5
 801b1cc:	4633      	mov	r3, r6
 801b1ce:	4621      	mov	r1, r4
 801b1d0:	a805      	add	r0, sp, #20
 801b1d2:	f001 f853 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1d6:	b300      	cbz	r0, 801b21a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b1d8:	280a      	cmp	r0, #10
 801b1da:	d01a      	beq.n	801b212 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b1dc:	9f04      	ldr	r7, [sp, #16]
 801b1de:	b1c7      	cbz	r7, 801b212 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b1e0:	7b78      	ldrb	r0, [r7, #13]
 801b1e2:	7a3b      	ldrb	r3, [r7, #8]
 801b1e4:	00c1      	lsls	r1, r0, #3
 801b1e6:	88aa      	ldrh	r2, [r5, #4]
 801b1e8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b1ec:	4319      	orrs	r1, r3
 801b1ee:	0643      	lsls	r3, r0, #25
 801b1f0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b1f4:	bf48      	it	mi
 801b1f6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b1fa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b1fe:	bf48      	it	mi
 801b200:	b219      	sxthmi	r1, r3
 801b202:	79fb      	ldrb	r3, [r7, #7]
 801b204:	4303      	orrs	r3, r0
 801b206:	4413      	add	r3, r2
 801b208:	1a5b      	subs	r3, r3, r1
 801b20a:	b29b      	uxth	r3, r3
 801b20c:	42a3      	cmp	r3, r4
 801b20e:	bfc8      	it	gt
 801b210:	b21c      	sxthgt	r4, r3
 801b212:	4633      	mov	r3, r6
 801b214:	462a      	mov	r2, r5
 801b216:	2100      	movs	r1, #0
 801b218:	e7da      	b.n	801b1d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b21a:	b2a0      	uxth	r0, r4
 801b21c:	b01e      	add	sp, #120	; 0x78
 801b21e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b222:	b003      	add	sp, #12
 801b224:	4770      	bx	lr

0801b226 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b226:	b40e      	push	{r1, r2, r3}
 801b228:	b570      	push	{r4, r5, r6, lr}
 801b22a:	b09d      	sub	sp, #116	; 0x74
 801b22c:	4604      	mov	r4, r0
 801b22e:	ab21      	add	r3, sp, #132	; 0x84
 801b230:	a803      	add	r0, sp, #12
 801b232:	f853 5b04 	ldr.w	r5, [r3], #4
 801b236:	9302      	str	r3, [sp, #8]
 801b238:	f000 fcc0 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 801b23c:	6823      	ldr	r3, [r4, #0]
 801b23e:	4620      	mov	r0, r4
 801b240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b242:	4798      	blx	r3
 801b244:	6823      	ldr	r3, [r4, #0]
 801b246:	4606      	mov	r6, r0
 801b248:	4620      	mov	r0, r4
 801b24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b24c:	2401      	movs	r4, #1
 801b24e:	4798      	blx	r3
 801b250:	4633      	mov	r3, r6
 801b252:	9000      	str	r0, [sp, #0]
 801b254:	4629      	mov	r1, r5
 801b256:	9a02      	ldr	r2, [sp, #8]
 801b258:	a803      	add	r0, sp, #12
 801b25a:	f000 fd0a 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b25e:	a803      	add	r0, sp, #12
 801b260:	f001 f8d8 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b264:	b2a3      	uxth	r3, r4
 801b266:	b138      	cbz	r0, 801b278 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801b268:	280a      	cmp	r0, #10
 801b26a:	a803      	add	r0, sp, #12
 801b26c:	bf04      	itt	eq
 801b26e:	3301      	addeq	r3, #1
 801b270:	b21c      	sxtheq	r4, r3
 801b272:	f001 f8cf 	bl	801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b276:	e7f5      	b.n	801b264 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b278:	4618      	mov	r0, r3
 801b27a:	b01d      	add	sp, #116	; 0x74
 801b27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b280:	b003      	add	sp, #12
 801b282:	4770      	bx	lr

0801b284 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b284:	b40e      	push	{r1, r2, r3}
 801b286:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b288:	b09e      	sub	sp, #120	; 0x78
 801b28a:	4604      	mov	r4, r0
 801b28c:	ab23      	add	r3, sp, #140	; 0x8c
 801b28e:	a805      	add	r0, sp, #20
 801b290:	f853 5b04 	ldr.w	r5, [r3], #4
 801b294:	9303      	str	r3, [sp, #12]
 801b296:	f000 fc91 	bl	801bbbc <_ZN8touchgfx12TextProviderC1Ev>
 801b29a:	6823      	ldr	r3, [r4, #0]
 801b29c:	4620      	mov	r0, r4
 801b29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2a0:	4798      	blx	r3
 801b2a2:	6823      	ldr	r3, [r4, #0]
 801b2a4:	4606      	mov	r6, r0
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2aa:	4798      	blx	r3
 801b2ac:	4633      	mov	r3, r6
 801b2ae:	4629      	mov	r1, r5
 801b2b0:	9000      	str	r0, [sp, #0]
 801b2b2:	9a03      	ldr	r2, [sp, #12]
 801b2b4:	a805      	add	r0, sp, #20
 801b2b6:	f000 fcdc 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b2ba:	ad1e      	add	r5, sp, #120	; 0x78
 801b2bc:	2100      	movs	r1, #0
 801b2be:	26ff      	movs	r6, #255	; 0xff
 801b2c0:	4622      	mov	r2, r4
 801b2c2:	a805      	add	r0, sp, #20
 801b2c4:	f845 1d68 	str.w	r1, [r5, #-104]!
 801b2c8:	462b      	mov	r3, r5
 801b2ca:	f000 ffd7 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b2ce:	b1d8      	cbz	r0, 801b308 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801b2d0:	280a      	cmp	r0, #10
 801b2d2:	d012      	beq.n	801b2fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b2d4:	9804      	ldr	r0, [sp, #16]
 801b2d6:	b180      	cbz	r0, 801b2fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b2d8:	7b47      	ldrb	r7, [r0, #13]
 801b2da:	7922      	ldrb	r2, [r4, #4]
 801b2dc:	00fb      	lsls	r3, r7, #3
 801b2de:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b2e2:	7a03      	ldrb	r3, [r0, #8]
 801b2e4:	430b      	orrs	r3, r1
 801b2e6:	0679      	lsls	r1, r7, #25
 801b2e8:	bf44      	itt	mi
 801b2ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b2ee:	b21b      	sxthmi	r3, r3
 801b2f0:	1ad3      	subs	r3, r2, r3
 801b2f2:	b2db      	uxtb	r3, r3
 801b2f4:	429e      	cmp	r6, r3
 801b2f6:	bf28      	it	cs
 801b2f8:	461e      	movcs	r6, r3
 801b2fa:	462b      	mov	r3, r5
 801b2fc:	4622      	mov	r2, r4
 801b2fe:	2100      	movs	r1, #0
 801b300:	a805      	add	r0, sp, #20
 801b302:	f000 ffbb 	bl	801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b306:	e7e2      	b.n	801b2ce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801b308:	4630      	mov	r0, r6
 801b30a:	b01e      	add	sp, #120	; 0x78
 801b30c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b310:	b003      	add	sp, #12
 801b312:	4770      	bx	lr

0801b314 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b314:	b513      	push	{r0, r1, r4, lr}
 801b316:	6803      	ldr	r3, [r0, #0]
 801b318:	2400      	movs	r4, #0
 801b31a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b31e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b322:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b326:	4669      	mov	r1, sp
 801b328:	691b      	ldr	r3, [r3, #16]
 801b32a:	9400      	str	r4, [sp, #0]
 801b32c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b330:	4798      	blx	r3
 801b332:	b002      	add	sp, #8
 801b334:	bd10      	pop	{r4, pc}

0801b336 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b336:	b538      	push	{r3, r4, r5, lr}
 801b338:	680b      	ldr	r3, [r1, #0]
 801b33a:	460c      	mov	r4, r1
 801b33c:	4605      	mov	r5, r0
 801b33e:	68db      	ldr	r3, [r3, #12]
 801b340:	4798      	blx	r3
 801b342:	6823      	ldr	r3, [r4, #0]
 801b344:	4620      	mov	r0, r4
 801b346:	4629      	mov	r1, r5
 801b348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b34a:	4798      	blx	r3
 801b34c:	4628      	mov	r0, r5
 801b34e:	bd38      	pop	{r3, r4, r5, pc}

0801b350 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b350:	b410      	push	{r4}
 801b352:	880a      	ldrh	r2, [r1, #0]
 801b354:	8884      	ldrh	r4, [r0, #4]
 801b356:	4422      	add	r2, r4
 801b358:	800a      	strh	r2, [r1, #0]
 801b35a:	884a      	ldrh	r2, [r1, #2]
 801b35c:	88c4      	ldrh	r4, [r0, #6]
 801b35e:	4422      	add	r2, r4
 801b360:	804a      	strh	r2, [r1, #2]
 801b362:	6940      	ldr	r0, [r0, #20]
 801b364:	b120      	cbz	r0, 801b370 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b366:	6803      	ldr	r3, [r0, #0]
 801b368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b36e:	4718      	bx	r3
 801b370:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b374:	4770      	bx	lr

0801b376 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b376:	b570      	push	{r4, r5, r6, lr}
 801b378:	8882      	ldrh	r2, [r0, #4]
 801b37a:	460c      	mov	r4, r1
 801b37c:	880b      	ldrh	r3, [r1, #0]
 801b37e:	4605      	mov	r5, r0
 801b380:	4413      	add	r3, r2
 801b382:	800b      	strh	r3, [r1, #0]
 801b384:	884b      	ldrh	r3, [r1, #2]
 801b386:	88c2      	ldrh	r2, [r0, #6]
 801b388:	4413      	add	r3, r2
 801b38a:	804b      	strh	r3, [r1, #2]
 801b38c:	1d01      	adds	r1, r0, #4
 801b38e:	4620      	mov	r0, r4
 801b390:	f7fb fd1e 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801b394:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	dd0b      	ble.n	801b3b4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b39c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	dd07      	ble.n	801b3b4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b3a4:	6968      	ldr	r0, [r5, #20]
 801b3a6:	b128      	cbz	r0, 801b3b4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b3a8:	6803      	ldr	r3, [r0, #0]
 801b3aa:	4621      	mov	r1, r4
 801b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3b2:	4718      	bx	r3
 801b3b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b3b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b3b8:	b570      	push	{r4, r5, r6, lr}
 801b3ba:	8882      	ldrh	r2, [r0, #4]
 801b3bc:	460c      	mov	r4, r1
 801b3be:	880b      	ldrh	r3, [r1, #0]
 801b3c0:	4605      	mov	r5, r0
 801b3c2:	4413      	add	r3, r2
 801b3c4:	800b      	strh	r3, [r1, #0]
 801b3c6:	884b      	ldrh	r3, [r1, #2]
 801b3c8:	88c2      	ldrh	r2, [r0, #6]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	804b      	strh	r3, [r1, #2]
 801b3ce:	1d01      	adds	r1, r0, #4
 801b3d0:	4620      	mov	r0, r4
 801b3d2:	f7fb fcfd 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801b3d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	dd18      	ble.n	801b410 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b3de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	dd14      	ble.n	801b410 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b3e6:	6968      	ldr	r0, [r5, #20]
 801b3e8:	b128      	cbz	r0, 801b3f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801b3ea:	6803      	ldr	r3, [r0, #0]
 801b3ec:	4621      	mov	r1, r4
 801b3ee:	691b      	ldr	r3, [r3, #16]
 801b3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3f4:	4718      	bx	r3
 801b3f6:	4b07      	ldr	r3, [pc, #28]	; (801b414 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	3304      	adds	r3, #4
 801b3fc:	429d      	cmp	r5, r3
 801b3fe:	d107      	bne.n	801b410 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b400:	f7fe fff0 	bl	801a3e4 <_ZN8touchgfx11Application11getInstanceEv>
 801b404:	6821      	ldr	r1, [r4, #0]
 801b406:	6862      	ldr	r2, [r4, #4]
 801b408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b40c:	f7ff b862 	b.w	801a4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b410:	bd70      	pop	{r4, r5, r6, pc}
 801b412:	bf00      	nop
 801b414:	20015310 	.word	0x20015310

0801b418 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b418:	b570      	push	{r4, r5, r6, lr}
 801b41a:	4604      	mov	r4, r0
 801b41c:	4616      	mov	r6, r2
 801b41e:	460d      	mov	r5, r1
 801b420:	b901      	cbnz	r1, 801b424 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b422:	b192      	cbz	r2, 801b44a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801b424:	6823      	ldr	r3, [r4, #0]
 801b426:	4620      	mov	r0, r4
 801b428:	699b      	ldr	r3, [r3, #24]
 801b42a:	4798      	blx	r3
 801b42c:	88e2      	ldrh	r2, [r4, #6]
 801b42e:	88a1      	ldrh	r1, [r4, #4]
 801b430:	4620      	mov	r0, r4
 801b432:	4432      	add	r2, r6
 801b434:	4429      	add	r1, r5
 801b436:	b212      	sxth	r2, r2
 801b438:	b209      	sxth	r1, r1
 801b43a:	f7e7 ff80 	bl	800333e <_ZN8touchgfx8Drawable5setXYEss>
 801b43e:	6823      	ldr	r3, [r4, #0]
 801b440:	4620      	mov	r0, r4
 801b442:	699b      	ldr	r3, [r3, #24]
 801b444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b448:	4718      	bx	r3
 801b44a:	bd70      	pop	{r4, r5, r6, pc}

0801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b44c:	b510      	push	{r4, lr}
 801b44e:	2300      	movs	r3, #0
 801b450:	4604      	mov	r4, r0
 801b452:	4608      	mov	r0, r1
 801b454:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b458:	8023      	strh	r3, [r4, #0]
 801b45a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b45e:	8063      	strh	r3, [r4, #2]
 801b460:	6803      	ldr	r3, [r0, #0]
 801b462:	80a1      	strh	r1, [r4, #4]
 801b464:	4621      	mov	r1, r4
 801b466:	80e2      	strh	r2, [r4, #6]
 801b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b46a:	4798      	blx	r3
 801b46c:	4620      	mov	r0, r4
 801b46e:	bd10      	pop	{r4, pc}

0801b470 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b470:	b530      	push	{r4, r5, lr}
 801b472:	8083      	strh	r3, [r0, #4]
 801b474:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b478:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b47c:	7183      	strb	r3, [r0, #6]
 801b47e:	79c3      	ldrb	r3, [r0, #7]
 801b480:	6101      	str	r1, [r0, #16]
 801b482:	f365 0306 	bfi	r3, r5, #0, #7
 801b486:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b48a:	8282      	strh	r2, [r0, #20]
 801b48c:	f365 13c7 	bfi	r3, r5, #7, #1
 801b490:	71c3      	strb	r3, [r0, #7]
 801b492:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b496:	7203      	strb	r3, [r0, #8]
 801b498:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b49c:	7243      	strb	r3, [r0, #9]
 801b49e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b4a2:	8143      	strh	r3, [r0, #10]
 801b4a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b4a8:	8183      	strh	r3, [r0, #12]
 801b4aa:	4b01      	ldr	r3, [pc, #4]	; (801b4b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b4ac:	6003      	str	r3, [r0, #0]
 801b4ae:	bd30      	pop	{r4, r5, pc}
 801b4b0:	0802ecc8 	.word	0x0802ecc8

0801b4b4 <_ZNK8touchgfx9ConstFont4findEt>:
 801b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4b6:	6904      	ldr	r4, [r0, #16]
 801b4b8:	b3bc      	cbz	r4, 801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4ba:	88a3      	ldrh	r3, [r4, #4]
 801b4bc:	8a82      	ldrh	r2, [r0, #20]
 801b4be:	1acb      	subs	r3, r1, r3
 801b4c0:	f102 32ff 	add.w	r2, r2, #4294967295
 801b4c4:	d431      	bmi.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4c6:	4293      	cmp	r3, r2
 801b4c8:	dd0c      	ble.n	801b4e4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b4ca:	230e      	movs	r3, #14
 801b4cc:	fb03 4302 	mla	r3, r3, r2, r4
 801b4d0:	889b      	ldrh	r3, [r3, #4]
 801b4d2:	1a5b      	subs	r3, r3, r1
 801b4d4:	1ad3      	subs	r3, r2, r3
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	db27      	blt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	bfbc      	itt	lt
 801b4de:	2302      	movlt	r3, #2
 801b4e0:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b4e4:	2500      	movs	r5, #0
 801b4e6:	260e      	movs	r6, #14
 801b4e8:	4295      	cmp	r5, r2
 801b4ea:	dc1e      	bgt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4ec:	fb06 4003 	mla	r0, r6, r3, r4
 801b4f0:	8887      	ldrh	r7, [r0, #4]
 801b4f2:	42b9      	cmp	r1, r7
 801b4f4:	d01a      	beq.n	801b52c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b4f6:	d20d      	bcs.n	801b514 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b4f8:	1e5a      	subs	r2, r3, #1
 801b4fa:	4295      	cmp	r5, r2
 801b4fc:	dc15      	bgt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b4fe:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b502:	1a5b      	subs	r3, r3, r1
 801b504:	1ad3      	subs	r3, r2, r3
 801b506:	429a      	cmp	r2, r3
 801b508:	db0f      	blt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b50a:	429d      	cmp	r5, r3
 801b50c:	ddec      	ble.n	801b4e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b50e:	1953      	adds	r3, r2, r5
 801b510:	105b      	asrs	r3, r3, #1
 801b512:	e7e9      	b.n	801b4e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b514:	1c5d      	adds	r5, r3, #1
 801b516:	42aa      	cmp	r2, r5
 801b518:	db07      	blt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b51a:	8a43      	ldrh	r3, [r0, #18]
 801b51c:	1acb      	subs	r3, r1, r3
 801b51e:	442b      	add	r3, r5
 801b520:	429d      	cmp	r5, r3
 801b522:	dc02      	bgt.n	801b52a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b524:	429a      	cmp	r2, r3
 801b526:	dadf      	bge.n	801b4e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b528:	e7f1      	b.n	801b50e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b52a:	2000      	movs	r0, #0
 801b52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b52e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b530:	4604      	mov	r4, r0
 801b532:	4617      	mov	r7, r2
 801b534:	461e      	mov	r6, r3
 801b536:	b911      	cbnz	r1, 801b53e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b538:	2500      	movs	r5, #0
 801b53a:	4628      	mov	r0, r5
 801b53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b53e:	290a      	cmp	r1, #10
 801b540:	d0fa      	beq.n	801b538 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b542:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b546:	4291      	cmp	r1, r2
 801b548:	d0f6      	beq.n	801b538 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b54a:	f242 020b 	movw	r2, #8203	; 0x200b
 801b54e:	4291      	cmp	r1, r2
 801b550:	d0f2      	beq.n	801b538 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b552:	f7ff ffaf 	bl	801b4b4 <_ZNK8touchgfx9ConstFont4findEt>
 801b556:	4605      	mov	r5, r0
 801b558:	b950      	cbnz	r0, 801b570 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	4620      	mov	r0, r4
 801b55e:	691b      	ldr	r3, [r3, #16]
 801b560:	4798      	blx	r3
 801b562:	4601      	mov	r1, r0
 801b564:	4620      	mov	r0, r4
 801b566:	f7ff ffa5 	bl	801b4b4 <_ZNK8touchgfx9ConstFont4findEt>
 801b56a:	4605      	mov	r5, r0
 801b56c:	2800      	cmp	r0, #0
 801b56e:	d0e3      	beq.n	801b538 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b570:	6823      	ldr	r3, [r4, #0]
 801b572:	4629      	mov	r1, r5
 801b574:	4620      	mov	r0, r4
 801b576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b578:	4798      	blx	r3
 801b57a:	6038      	str	r0, [r7, #0]
 801b57c:	6823      	ldr	r3, [r4, #0]
 801b57e:	4620      	mov	r0, r4
 801b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b582:	4798      	blx	r3
 801b584:	7030      	strb	r0, [r6, #0]
 801b586:	e7d8      	b.n	801b53a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b588 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b588:	2000      	movs	r0, #0
 801b58a:	4770      	bx	lr

0801b58c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b58c:	2001      	movs	r0, #1
 801b58e:	4770      	bx	lr

0801b590 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b590:	2002      	movs	r0, #2
 801b592:	4770      	bx	lr

0801b594 <_ZN8touchgfx6ScreenD1Ev>:
 801b594:	4770      	bx	lr

0801b596 <_ZN8touchgfx12GestureEventD1Ev>:
 801b596:	4770      	bx	lr

0801b598 <_ZN8touchgfx9DragEventD1Ev>:
 801b598:	4770      	bx	lr

0801b59a <_ZN8touchgfx10ClickEventD1Ev>:
 801b59a:	4770      	bx	lr

0801b59c <_ZN8touchgfx10ClickEventD0Ev>:
 801b59c:	b510      	push	{r4, lr}
 801b59e:	4604      	mov	r4, r0
 801b5a0:	210c      	movs	r1, #12
 801b5a2:	f00d fc9f 	bl	8028ee4 <_ZdlPvj>
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	bd10      	pop	{r4, pc}

0801b5aa <_ZN8touchgfx9DragEventD0Ev>:
 801b5aa:	b510      	push	{r4, lr}
 801b5ac:	4604      	mov	r4, r0
 801b5ae:	2110      	movs	r1, #16
 801b5b0:	f00d fc98 	bl	8028ee4 <_ZdlPvj>
 801b5b4:	4620      	mov	r0, r4
 801b5b6:	bd10      	pop	{r4, pc}

0801b5b8 <_ZN8touchgfx12GestureEventD0Ev>:
 801b5b8:	b510      	push	{r4, lr}
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	210c      	movs	r1, #12
 801b5be:	f00d fc91 	bl	8028ee4 <_ZdlPvj>
 801b5c2:	4620      	mov	r0, r4
 801b5c4:	bd10      	pop	{r4, pc}

0801b5c6 <_ZN8touchgfx6ScreenD0Ev>:
 801b5c6:	b510      	push	{r4, lr}
 801b5c8:	4604      	mov	r4, r0
 801b5ca:	213c      	movs	r1, #60	; 0x3c
 801b5cc:	f00d fc8a 	bl	8028ee4 <_ZdlPvj>
 801b5d0:	4620      	mov	r0, r4
 801b5d2:	bd10      	pop	{r4, pc}

0801b5d4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b5d4:	b530      	push	{r4, r5, lr}
 801b5d6:	460d      	mov	r5, r1
 801b5d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b5da:	b087      	sub	sp, #28
 801b5dc:	4604      	mov	r4, r0
 801b5de:	b301      	cbz	r1, 801b622 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b5e0:	a801      	add	r0, sp, #4
 801b5e2:	f7ff ff33 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5e6:	892a      	ldrh	r2, [r5, #8]
 801b5e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b5ec:	7928      	ldrb	r0, [r5, #4]
 801b5ee:	1ad2      	subs	r2, r2, r3
 801b5f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b5f2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b5f6:	441a      	add	r2, r3
 801b5f8:	896b      	ldrh	r3, [r5, #10]
 801b5fa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b5fe:	f88d 0010 	strb.w	r0, [sp, #16]
 801b602:	1b5b      	subs	r3, r3, r5
 801b604:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b606:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b608:	442b      	add	r3, r5
 801b60a:	4d07      	ldr	r5, [pc, #28]	; (801b628 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b60c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b610:	a903      	add	r1, sp, #12
 801b612:	9503      	str	r5, [sp, #12]
 801b614:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b618:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b61c:	6803      	ldr	r3, [r0, #0]
 801b61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b620:	4798      	blx	r3
 801b622:	b007      	add	sp, #28
 801b624:	bd30      	pop	{r4, r5, pc}
 801b626:	bf00      	nop
 801b628:	0802ed48 	.word	0x0802ed48

0801b62c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b630:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b632:	b08a      	sub	sp, #40	; 0x28
 801b634:	4604      	mov	r4, r0
 801b636:	460d      	mov	r5, r1
 801b638:	b113      	cbz	r3, 801b640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b63a:	790b      	ldrb	r3, [r1, #4]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d044      	beq.n	801b6ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b640:	f104 0804 	add.w	r8, r4, #4
 801b644:	a803      	add	r0, sp, #12
 801b646:	4641      	mov	r1, r8
 801b648:	f7ff ff00 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b64c:	792b      	ldrb	r3, [r5, #4]
 801b64e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b652:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b656:	b983      	cbnz	r3, 801b67a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b658:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801b65c:	892a      	ldrh	r2, [r5, #8]
 801b65e:	88e9      	ldrh	r1, [r5, #6]
 801b660:	4640      	mov	r0, r8
 801b662:	1b92      	subs	r2, r2, r6
 801b664:	9301      	str	r3, [sp, #4]
 801b666:	1bc9      	subs	r1, r1, r7
 801b668:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801b66c:	b212      	sxth	r2, r2
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	b209      	sxth	r1, r1
 801b672:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b676:	f7fb fac9 	bl	8016c0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b67a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b67c:	b329      	cbz	r1, 801b6ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b67e:	a805      	add	r0, sp, #20
 801b680:	f7ff fee4 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b684:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b688:	792b      	ldrb	r3, [r5, #4]
 801b68a:	a907      	add	r1, sp, #28
 801b68c:	1abf      	subs	r7, r7, r2
 801b68e:	88ea      	ldrh	r2, [r5, #6]
 801b690:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b692:	4417      	add	r7, r2
 801b694:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801b696:	f88d 3020 	strb.w	r3, [sp, #32]
 801b69a:	4417      	add	r7, r2
 801b69c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b6a0:	1ab6      	subs	r6, r6, r2
 801b6a2:	892a      	ldrh	r2, [r5, #8]
 801b6a4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801b6a8:	4416      	add	r6, r2
 801b6aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b6ac:	4416      	add	r6, r2
 801b6ae:	4a08      	ldr	r2, [pc, #32]	; (801b6d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b6b0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b6b4:	2600      	movs	r6, #0
 801b6b6:	9207      	str	r2, [sp, #28]
 801b6b8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801b6bc:	6803      	ldr	r3, [r0, #0]
 801b6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6c0:	4798      	blx	r3
 801b6c2:	792b      	ldrb	r3, [r5, #4]
 801b6c4:	b10b      	cbz	r3, 801b6ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b6c6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b6ca:	b00a      	add	sp, #40	; 0x28
 801b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6d0:	0802ed20 	.word	0x0802ed20

0801b6d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6d8:	460c      	mov	r4, r1
 801b6da:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b6dc:	b088      	sub	sp, #32
 801b6de:	4605      	mov	r5, r0
 801b6e0:	2900      	cmp	r1, #0
 801b6e2:	d06d      	beq.n	801b7c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b6e4:	4668      	mov	r0, sp
 801b6e6:	f7ff feb1 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b6ea:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801b6ec:	88e3      	ldrh	r3, [r4, #6]
 801b6ee:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b6f2:	440b      	add	r3, r1
 801b6f4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b6f8:	b21b      	sxth	r3, r3
 801b6fa:	4543      	cmp	r3, r8
 801b6fc:	db31      	blt.n	801b762 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6fe:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b702:	44c4      	add	ip, r8
 801b704:	fa0f fc8c 	sxth.w	ip, ip
 801b708:	4563      	cmp	r3, ip
 801b70a:	da2a      	bge.n	801b762 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b70c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801b70e:	8926      	ldrh	r6, [r4, #8]
 801b710:	4416      	add	r6, r2
 801b712:	b236      	sxth	r6, r6
 801b714:	42be      	cmp	r6, r7
 801b716:	db24      	blt.n	801b762 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b718:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b71c:	4438      	add	r0, r7
 801b71e:	b200      	sxth	r0, r0
 801b720:	4286      	cmp	r6, r0
 801b722:	da1e      	bge.n	801b762 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b724:	8963      	ldrh	r3, [r4, #10]
 801b726:	4419      	add	r1, r3
 801b728:	b209      	sxth	r1, r1
 801b72a:	4541      	cmp	r1, r8
 801b72c:	db08      	blt.n	801b740 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b72e:	4561      	cmp	r1, ip
 801b730:	da06      	bge.n	801b740 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b732:	89a3      	ldrh	r3, [r4, #12]
 801b734:	441a      	add	r2, r3
 801b736:	b212      	sxth	r2, r2
 801b738:	42ba      	cmp	r2, r7
 801b73a:	db01      	blt.n	801b740 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b73c:	4282      	cmp	r2, r0
 801b73e:	db10      	blt.n	801b762 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b740:	4b21      	ldr	r3, [pc, #132]	; (801b7c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b742:	a904      	add	r1, sp, #16
 801b744:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b746:	9304      	str	r3, [sp, #16]
 801b748:	2302      	movs	r3, #2
 801b74a:	f88d 3014 	strb.w	r3, [sp, #20]
 801b74e:	2300      	movs	r3, #0
 801b750:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b754:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b758:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b75c:	6803      	ldr	r3, [r0, #0]
 801b75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b760:	4798      	blx	r3
 801b762:	1d29      	adds	r1, r5, #4
 801b764:	a802      	add	r0, sp, #8
 801b766:	f7ff fe71 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b76a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b76e:	88e0      	ldrh	r0, [r4, #6]
 801b770:	eba3 0808 	sub.w	r8, r3, r8
 801b774:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b778:	7921      	ldrb	r1, [r4, #4]
 801b77a:	fa1f f888 	uxth.w	r8, r8
 801b77e:	1bdf      	subs	r7, r3, r7
 801b780:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b784:	b2bb      	uxth	r3, r7
 801b786:	4440      	add	r0, r8
 801b788:	8922      	ldrh	r2, [r4, #8]
 801b78a:	8967      	ldrh	r7, [r4, #10]
 801b78c:	4460      	add	r0, ip
 801b78e:	89a4      	ldrh	r4, [r4, #12]
 801b790:	441a      	add	r2, r3
 801b792:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b794:	44b8      	add	r8, r7
 801b796:	4423      	add	r3, r4
 801b798:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b79c:	4432      	add	r2, r6
 801b79e:	44e0      	add	r8, ip
 801b7a0:	4433      	add	r3, r6
 801b7a2:	4c0a      	ldr	r4, [pc, #40]	; (801b7cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b7a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b7a6:	f88d 1014 	strb.w	r1, [sp, #20]
 801b7aa:	a904      	add	r1, sp, #16
 801b7ac:	9404      	str	r4, [sp, #16]
 801b7ae:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b7b2:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b7b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b7ba:	6803      	ldr	r3, [r0, #0]
 801b7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b7be:	4798      	blx	r3
 801b7c0:	b008      	add	sp, #32
 801b7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7c6:	bf00      	nop
 801b7c8:	0802ed20 	.word	0x0802ed20
 801b7cc:	0802ed34 	.word	0x0802ed34

0801b7d0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b7d8:	3201      	adds	r2, #1
 801b7da:	d112      	bne.n	801b802 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b7dc:	2500      	movs	r5, #0
 801b7de:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b7e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b7e6:	6803      	ldr	r3, [r0, #0]
 801b7e8:	9500      	str	r5, [sp, #0]
 801b7ea:	466d      	mov	r5, sp
 801b7ec:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b7f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b7f4:	4629      	mov	r1, r5
 801b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7f8:	4798      	blx	r3
 801b7fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b7fe:	e884 0003 	stmia.w	r4, {r0, r1}
 801b802:	4620      	mov	r0, r4
 801b804:	b003      	add	sp, #12
 801b806:	bd30      	pop	{r4, r5, pc}

0801b808 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b808:	b513      	push	{r0, r1, r4, lr}
 801b80a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b80e:	4604      	mov	r4, r0
 801b810:	3301      	adds	r3, #1
 801b812:	d109      	bne.n	801b828 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b814:	4601      	mov	r1, r0
 801b816:	4668      	mov	r0, sp
 801b818:	f7ff fe18 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b81c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b820:	8423      	strh	r3, [r4, #32]
 801b822:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b826:	8463      	strh	r3, [r4, #34]	; 0x22
 801b828:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b82c:	b002      	add	sp, #8
 801b82e:	bd10      	pop	{r4, pc}

0801b830 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b830:	b513      	push	{r0, r1, r4, lr}
 801b832:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b836:	4604      	mov	r4, r0
 801b838:	3301      	adds	r3, #1
 801b83a:	d109      	bne.n	801b850 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b83c:	4601      	mov	r1, r0
 801b83e:	4668      	mov	r0, sp
 801b840:	f7ff fe04 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b844:	f8bd 3000 	ldrh.w	r3, [sp]
 801b848:	8423      	strh	r3, [r4, #32]
 801b84a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b84e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b850:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b854:	b002      	add	sp, #8
 801b856:	bd10      	pop	{r4, pc}

0801b858 <_ZN8touchgfx6ScreenC1Ev>:
 801b858:	b570      	push	{r4, r5, r6, lr}
 801b85a:	4b17      	ldr	r3, [pc, #92]	; (801b8b8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b85c:	4605      	mov	r5, r0
 801b85e:	4a17      	ldr	r2, [pc, #92]	; (801b8bc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b860:	2101      	movs	r1, #1
 801b862:	f845 3b04 	str.w	r3, [r5], #4
 801b866:	2300      	movs	r3, #0
 801b868:	6042      	str	r2, [r0, #4]
 801b86a:	4604      	mov	r4, r0
 801b86c:	8103      	strh	r3, [r0, #8]
 801b86e:	8143      	strh	r3, [r0, #10]
 801b870:	8183      	strh	r3, [r0, #12]
 801b872:	81c3      	strh	r3, [r0, #14]
 801b874:	8203      	strh	r3, [r0, #16]
 801b876:	8243      	strh	r3, [r0, #18]
 801b878:	8283      	strh	r3, [r0, #20]
 801b87a:	82c3      	strh	r3, [r0, #22]
 801b87c:	6203      	str	r3, [r0, #32]
 801b87e:	8483      	strh	r3, [r0, #36]	; 0x24
 801b880:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b882:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b886:	6343      	str	r3, [r0, #52]	; 0x34
 801b888:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b88c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b890:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b894:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b898:	4b09      	ldr	r3, [pc, #36]	; (801b8c0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b89a:	4628      	mov	r0, r5
 801b89c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b8a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801b8a2:	4a08      	ldr	r2, [pc, #32]	; (801b8c4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b8a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b8a8:	4798      	blx	r3
 801b8aa:	6863      	ldr	r3, [r4, #4]
 801b8ac:	4628      	mov	r0, r5
 801b8ae:	4631      	mov	r1, r6
 801b8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8b2:	4798      	blx	r3
 801b8b4:	4620      	mov	r0, r4
 801b8b6:	bd70      	pop	{r4, r5, r6, pc}
 801b8b8:	0802ed5c 	.word	0x0802ed5c
 801b8bc:	0802ea00 	.word	0x0802ea00
 801b8c0:	200152ca 	.word	0x200152ca
 801b8c4:	200152c8 	.word	0x200152c8

0801b8c8 <_ZN8touchgfx6Screen4drawEv>:
 801b8c8:	4b09      	ldr	r3, [pc, #36]	; (801b8f0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b8ca:	b507      	push	{r0, r1, r2, lr}
 801b8cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8d0:	2100      	movs	r1, #0
 801b8d2:	4b08      	ldr	r3, [pc, #32]	; (801b8f4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b8d4:	9100      	str	r1, [sp, #0]
 801b8d6:	4669      	mov	r1, sp
 801b8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b8e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b8e4:	6803      	ldr	r3, [r0, #0]
 801b8e6:	689b      	ldr	r3, [r3, #8]
 801b8e8:	4798      	blx	r3
 801b8ea:	b003      	add	sp, #12
 801b8ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801b8f0:	200152c8 	.word	0x200152c8
 801b8f4:	200152ca 	.word	0x200152ca

0801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8fc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b900:	b089      	sub	sp, #36	; 0x24
 801b902:	4680      	mov	r8, r0
 801b904:	460c      	mov	r4, r1
 801b906:	2b00      	cmp	r3, #0
 801b908:	4615      	mov	r5, r2
 801b90a:	dd0e      	ble.n	801b92a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b90c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b910:	2b00      	cmp	r3, #0
 801b912:	dd0a      	ble.n	801b92a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b914:	4628      	mov	r0, r5
 801b916:	f7ff ff5b 	bl	801b7d0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b91a:	4621      	mov	r1, r4
 801b91c:	f7fe fc83 	bl	801a226 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b920:	69eb      	ldr	r3, [r5, #28]
 801b922:	b928      	cbnz	r0, 801b930 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b924:	461d      	mov	r5, r3
 801b926:	2b00      	cmp	r3, #0
 801b928:	d1f4      	bne.n	801b914 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b92a:	b009      	add	sp, #36	; 0x24
 801b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b930:	ae04      	add	r6, sp, #16
 801b932:	2b00      	cmp	r3, #0
 801b934:	f000 80b5 	beq.w	801baa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b938:	682b      	ldr	r3, [r5, #0]
 801b93a:	4629      	mov	r1, r5
 801b93c:	a802      	add	r0, sp, #8
 801b93e:	68db      	ldr	r3, [r3, #12]
 801b940:	4798      	blx	r3
 801b942:	4628      	mov	r0, r5
 801b944:	f7ff ff60 	bl	801b808 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b948:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b94c:	4407      	add	r7, r0
 801b94e:	4628      	mov	r0, r5
 801b950:	f7ff ff6e 	bl	801b830 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b958:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b95c:	b23f      	sxth	r7, r7
 801b95e:	4418      	add	r0, r3
 801b960:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b964:	4621      	mov	r1, r4
 801b966:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b96a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b96e:	4630      	mov	r0, r6
 801b970:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b974:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b978:	f7fb fa2a 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801b97c:	4628      	mov	r0, r5
 801b97e:	f7ff ff27 	bl	801b7d0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b982:	ab06      	add	r3, sp, #24
 801b984:	4602      	mov	r2, r0
 801b986:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b98a:	e883 0003 	stmia.w	r3, {r0, r1}
 801b98e:	4611      	mov	r1, r2
 801b990:	4618      	mov	r0, r3
 801b992:	f7fb fa1d 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801b996:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b99a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b99e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b9a2:	4299      	cmp	r1, r3
 801b9a4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b9a8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b9ac:	d10b      	bne.n	801b9c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b9b2:	4552      	cmp	r2, sl
 801b9b4:	d107      	bne.n	801b9c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9b6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b9ba:	455a      	cmp	r2, fp
 801b9bc:	d103      	bne.n	801b9c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9be:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b9c2:	454a      	cmp	r2, r9
 801b9c4:	d06d      	beq.n	801baa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b9c6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ca:	dd65      	ble.n	801ba98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9cc:	f1b9 0f00 	cmp.w	r9, #0
 801b9d0:	dd62      	ble.n	801ba98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b9d6:	fa1f f08a 	uxth.w	r0, sl
 801b9da:	4552      	cmp	r2, sl
 801b9dc:	9000      	str	r0, [sp, #0]
 801b9de:	da12      	bge.n	801ba06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b9e0:	9301      	str	r3, [sp, #4]
 801b9e2:	9b00      	ldr	r3, [sp, #0]
 801b9e4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b9e8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b9ec:	1a9a      	subs	r2, r3, r2
 801b9ee:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b9f2:	4631      	mov	r1, r6
 801b9f4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b9fe:	69ea      	ldr	r2, [r5, #28]
 801ba00:	f7ff ff7a 	bl	801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba04:	9b01      	ldr	r3, [sp, #4]
 801ba06:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ba0a:	b29f      	uxth	r7, r3
 801ba0c:	429a      	cmp	r2, r3
 801ba0e:	da0d      	bge.n	801ba2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ba10:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba14:	1aba      	subs	r2, r7, r2
 801ba16:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba1a:	4631      	mov	r1, r6
 801ba1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ba20:	4640      	mov	r0, r8
 801ba22:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba26:	69ea      	ldr	r2, [r5, #28]
 801ba28:	f7ff ff66 	bl	801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba2c:	8822      	ldrh	r2, [r4, #0]
 801ba2e:	445f      	add	r7, fp
 801ba30:	88a3      	ldrh	r3, [r4, #4]
 801ba32:	b2bf      	uxth	r7, r7
 801ba34:	4413      	add	r3, r2
 801ba36:	b23a      	sxth	r2, r7
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	b219      	sxth	r1, r3
 801ba3c:	4291      	cmp	r1, r2
 801ba3e:	dd0d      	ble.n	801ba5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ba40:	1bdb      	subs	r3, r3, r7
 801ba42:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba46:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba4a:	4631      	mov	r1, r6
 801ba4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba50:	4640      	mov	r0, r8
 801ba52:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba56:	69ea      	ldr	r2, [r5, #28]
 801ba58:	f7ff ff4e 	bl	801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba5c:	88e2      	ldrh	r2, [r4, #6]
 801ba5e:	8863      	ldrh	r3, [r4, #2]
 801ba60:	4413      	add	r3, r2
 801ba62:	9a00      	ldr	r2, [sp, #0]
 801ba64:	444a      	add	r2, r9
 801ba66:	b29b      	uxth	r3, r3
 801ba68:	fa1f f982 	uxth.w	r9, r2
 801ba6c:	b219      	sxth	r1, r3
 801ba6e:	fa0f f289 	sxth.w	r2, r9
 801ba72:	428a      	cmp	r2, r1
 801ba74:	da15      	bge.n	801baa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ba76:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ba7a:	eba3 0309 	sub.w	r3, r3, r9
 801ba7e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ba82:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ba86:	4631      	mov	r1, r6
 801ba88:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ba8c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ba90:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba94:	69ea      	ldr	r2, [r5, #28]
 801ba96:	e001      	b.n	801ba9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ba98:	69ea      	ldr	r2, [r5, #28]
 801ba9a:	4621      	mov	r1, r4
 801ba9c:	4640      	mov	r0, r8
 801ba9e:	f7ff ff2b 	bl	801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801baa2:	4628      	mov	r0, r5
 801baa4:	f7ff fe94 	bl	801b7d0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801baa8:	6861      	ldr	r1, [r4, #4]
 801baaa:	4602      	mov	r2, r0
 801baac:	4633      	mov	r3, r6
 801baae:	6820      	ldr	r0, [r4, #0]
 801bab0:	c303      	stmia	r3!, {r0, r1}
 801bab2:	4611      	mov	r1, r2
 801bab4:	4630      	mov	r0, r6
 801bab6:	f7fb f98b 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801baba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	f77f af33 	ble.w	801b92a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bac4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f77f af2e 	ble.w	801b92a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bace:	4628      	mov	r0, r5
 801bad0:	f7ff fe9a 	bl	801b808 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bad4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bad8:	1a18      	subs	r0, r3, r0
 801bada:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bade:	4628      	mov	r0, r5
 801bae0:	f7ff fea6 	bl	801b830 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bae4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bae8:	4631      	mov	r1, r6
 801baea:	1a18      	subs	r0, r3, r0
 801baec:	f8ad 0012 	strh.w	r0, [sp, #18]
 801baf0:	4628      	mov	r0, r5
 801baf2:	682b      	ldr	r3, [r5, #0]
 801baf4:	689b      	ldr	r3, [r3, #8]
 801baf6:	4798      	blx	r3
 801baf8:	e717      	b.n	801b92a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801bafa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bafa:	b570      	push	{r4, r5, r6, lr}
 801bafc:	1d06      	adds	r6, r0, #4
 801bafe:	b086      	sub	sp, #24
 801bb00:	460c      	mov	r4, r1
 801bb02:	2300      	movs	r3, #0
 801bb04:	4631      	mov	r1, r6
 801bb06:	4605      	mov	r5, r0
 801bb08:	a802      	add	r0, sp, #8
 801bb0a:	9301      	str	r3, [sp, #4]
 801bb0c:	f7ff fc9e 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb10:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bb14:	8822      	ldrh	r2, [r4, #0]
 801bb16:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801bb1a:	1ad2      	subs	r2, r2, r3
 801bb1c:	8863      	ldrh	r3, [r4, #2]
 801bb1e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bb22:	1a5b      	subs	r3, r3, r1
 801bb24:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bb28:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bb2c:	aa01      	add	r2, sp, #4
 801bb2e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bb32:	4630      	mov	r0, r6
 801bb34:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bb38:	a904      	add	r1, sp, #16
 801bb3a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bb3e:	f7fb fa1f 	bl	8016f80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bb42:	9a01      	ldr	r2, [sp, #4]
 801bb44:	b11a      	cbz	r2, 801bb4e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801bb46:	4621      	mov	r1, r4
 801bb48:	4628      	mov	r0, r5
 801bb4a:	f7ff fed5 	bl	801b8f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bb4e:	b006      	add	sp, #24
 801bb50:	bd70      	pop	{r4, r5, r6, pc}

0801bb52 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bb52:	4602      	mov	r2, r0
 801bb54:	b530      	push	{r4, r5, lr}
 801bb56:	4604      	mov	r4, r0
 801bb58:	b085      	sub	sp, #20
 801bb5a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bb5e:	460d      	mov	r5, r1
 801bb60:	466b      	mov	r3, sp
 801bb62:	6851      	ldr	r1, [r2, #4]
 801bb64:	c303      	stmia	r3!, {r0, r1}
 801bb66:	4629      	mov	r1, r5
 801bb68:	4668      	mov	r0, sp
 801bb6a:	f7fb f931 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 801bb6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bb72:	b12b      	cbz	r3, 801bb80 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801bb74:	4669      	mov	r1, sp
 801bb76:	4620      	mov	r0, r4
 801bb78:	f7ff ffbf 	bl	801bafa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bb7c:	b005      	add	sp, #20
 801bb7e:	bd30      	pop	{r4, r5, pc}
 801bb80:	3404      	adds	r4, #4
 801bb82:	a802      	add	r0, sp, #8
 801bb84:	4621      	mov	r1, r4
 801bb86:	f7ff fc61 	bl	801b44c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb8a:	f8bd 3000 	ldrh.w	r3, [sp]
 801bb8e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb92:	4669      	mov	r1, sp
 801bb94:	4620      	mov	r0, r4
 801bb96:	1a9b      	subs	r3, r3, r2
 801bb98:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bb9c:	f8ad 3000 	strh.w	r3, [sp]
 801bba0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bba4:	1a9b      	subs	r3, r3, r2
 801bba6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bbaa:	f7fb f9b0 	bl	8016f0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bbae:	e7e5      	b.n	801bb7c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801bbb0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bbb0:	460b      	mov	r3, r1
 801bbb2:	680a      	ldr	r2, [r1, #0]
 801bbb4:	1d01      	adds	r1, r0, #4
 801bbb6:	6992      	ldr	r2, [r2, #24]
 801bbb8:	4618      	mov	r0, r3
 801bbba:	4710      	bx	r2

0801bbbc <_ZN8touchgfx12TextProviderC1Ev>:
 801bbbc:	b538      	push	{r3, r4, r5, lr}
 801bbbe:	2500      	movs	r5, #0
 801bbc0:	2302      	movs	r3, #2
 801bbc2:	4604      	mov	r4, r0
 801bbc4:	220e      	movs	r2, #14
 801bbc6:	7403      	strb	r3, [r0, #16]
 801bbc8:	4629      	mov	r1, r5
 801bbca:	6145      	str	r5, [r0, #20]
 801bbcc:	7605      	strb	r5, [r0, #24]
 801bbce:	83c5      	strh	r5, [r0, #30]
 801bbd0:	8405      	strh	r5, [r0, #32]
 801bbd2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801bbd4:	8705      	strh	r5, [r0, #56]	; 0x38
 801bbd6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801bbd8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801bbdc:	e9c0 5500 	strd	r5, r5, [r0]
 801bbe0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801bbe4:	304c      	adds	r0, #76	; 0x4c
 801bbe6:	f00d fb31 	bl	802924c <memset>
 801bbea:	2301      	movs	r3, #1
 801bbec:	4620      	mov	r0, r4
 801bbee:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801bbf2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bbf6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801bbfa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801bbfe:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801bc02:	f7e8 f8c1 	bl	8003d88 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bc06:	4620      	mov	r0, r4
 801bc08:	bd38      	pop	{r3, r4, r5, pc}

0801bc0a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801bc0a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bc0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bc10:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801bc12:	fab0 f080 	clz	r0, r0
 801bc16:	0940      	lsrs	r0, r0, #5
 801bc18:	4770      	bx	lr

0801bc1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bc1a:	b530      	push	{r4, r5, lr}
 801bc1c:	2500      	movs	r5, #0
 801bc1e:	2401      	movs	r4, #1
 801bc20:	6843      	ldr	r3, [r0, #4]
 801bc22:	b913      	cbnz	r3, 801bc2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bc24:	6803      	ldr	r3, [r0, #0]
 801bc26:	b313      	cbz	r3, 801bc6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bc28:	6043      	str	r3, [r0, #4]
 801bc2a:	7e03      	ldrb	r3, [r0, #24]
 801bc2c:	b143      	cbz	r3, 801bc40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bc2e:	6943      	ldr	r3, [r0, #20]
 801bc30:	b12b      	cbz	r3, 801bc3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bc32:	881a      	ldrh	r2, [r3, #0]
 801bc34:	b11a      	cbz	r2, 801bc3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bc36:	1c9a      	adds	r2, r3, #2
 801bc38:	6142      	str	r2, [r0, #20]
 801bc3a:	8818      	ldrh	r0, [r3, #0]
 801bc3c:	bd30      	pop	{r4, r5, pc}
 801bc3e:	7605      	strb	r5, [r0, #24]
 801bc40:	6843      	ldr	r3, [r0, #4]
 801bc42:	8819      	ldrh	r1, [r3, #0]
 801bc44:	b199      	cbz	r1, 801bc6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bc46:	1c9a      	adds	r2, r3, #2
 801bc48:	2902      	cmp	r1, #2
 801bc4a:	6042      	str	r2, [r0, #4]
 801bc4c:	d1f5      	bne.n	801bc3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bc4e:	7c03      	ldrb	r3, [r0, #16]
 801bc50:	2b01      	cmp	r3, #1
 801bc52:	d8e5      	bhi.n	801bc20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc54:	1c5a      	adds	r2, r3, #1
 801bc56:	3302      	adds	r3, #2
 801bc58:	7402      	strb	r2, [r0, #16]
 801bc5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bc5e:	6143      	str	r3, [r0, #20]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d0dd      	beq.n	801bc20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc64:	881b      	ldrh	r3, [r3, #0]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d0da      	beq.n	801bc20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc6a:	7604      	strb	r4, [r0, #24]
 801bc6c:	e7d8      	b.n	801bc20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc6e:	2000      	movs	r0, #0
 801bc70:	e7e4      	b.n	801bc3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801bc72:	6001      	str	r1, [r0, #0]
 801bc74:	2100      	movs	r1, #0
 801bc76:	b430      	push	{r4, r5}
 801bc78:	6041      	str	r1, [r0, #4]
 801bc7a:	6815      	ldr	r5, [r2, #0]
 801bc7c:	6085      	str	r5, [r0, #8]
 801bc7e:	6852      	ldr	r2, [r2, #4]
 801bc80:	6443      	str	r3, [r0, #68]	; 0x44
 801bc82:	9b02      	ldr	r3, [sp, #8]
 801bc84:	60c2      	str	r2, [r0, #12]
 801bc86:	7401      	strb	r1, [r0, #16]
 801bc88:	6141      	str	r1, [r0, #20]
 801bc8a:	7601      	strb	r1, [r0, #24]
 801bc8c:	8701      	strh	r1, [r0, #56]	; 0x38
 801bc8e:	8401      	strh	r1, [r0, #32]
 801bc90:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801bc94:	6483      	str	r3, [r0, #72]	; 0x48
 801bc96:	bc30      	pop	{r4, r5}
 801bc98:	f7e8 b876 	b.w	8003d88 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bc9c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801bc9c:	b408      	push	{r3}
 801bc9e:	b510      	push	{r4, lr}
 801bca0:	b085      	sub	sp, #20
 801bca2:	ac07      	add	r4, sp, #28
 801bca4:	f854 3b04 	ldr.w	r3, [r4], #4
 801bca8:	9300      	str	r3, [sp, #0]
 801bcaa:	4613      	mov	r3, r2
 801bcac:	4622      	mov	r2, r4
 801bcae:	9403      	str	r4, [sp, #12]
 801bcb0:	f7ff ffdf 	bl	801bc72 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bcb4:	b005      	add	sp, #20
 801bcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcba:	b001      	add	sp, #4
 801bcbc:	4770      	bx	lr

0801bcbe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bcbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcc0:	4605      	mov	r5, r0
 801bcc2:	4608      	mov	r0, r1
 801bcc4:	b1f1      	cbz	r1, 801bd04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bcc6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801bcca:	460b      	mov	r3, r1
 801bccc:	f101 0708 	add.w	r7, r1, #8
 801bcd0:	4622      	mov	r2, r4
 801bcd2:	6818      	ldr	r0, [r3, #0]
 801bcd4:	3308      	adds	r3, #8
 801bcd6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bcda:	4626      	mov	r6, r4
 801bcdc:	42bb      	cmp	r3, r7
 801bcde:	c603      	stmia	r6!, {r0, r1}
 801bce0:	4634      	mov	r4, r6
 801bce2:	d1f6      	bne.n	801bcd2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bce4:	6818      	ldr	r0, [r3, #0]
 801bce6:	6030      	str	r0, [r6, #0]
 801bce8:	4610      	mov	r0, r2
 801bcea:	889b      	ldrh	r3, [r3, #4]
 801bcec:	80b3      	strh	r3, [r6, #4]
 801bcee:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801bcf2:	015b      	lsls	r3, r3, #5
 801bcf4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bcf8:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801bcfc:	430b      	orrs	r3, r1
 801bcfe:	425b      	negs	r3, r3
 801bd00:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bd06:	b538      	push	{r3, r4, r5, lr}
 801bd08:	460c      	mov	r4, r1
 801bd0a:	6811      	ldr	r1, [r2, #0]
 801bd0c:	4610      	mov	r0, r2
 801bd0e:	68cd      	ldr	r5, [r1, #12]
 801bd10:	4619      	mov	r1, r3
 801bd12:	47a8      	blx	r5
 801bd14:	2800      	cmp	r0, #0
 801bd16:	bf08      	it	eq
 801bd18:	4620      	moveq	r0, r4
 801bd1a:	bd38      	pop	{r3, r4, r5, pc}

0801bd1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd1e:	4604      	mov	r4, r0
 801bd20:	4615      	mov	r5, r2
 801bd22:	4608      	mov	r0, r1
 801bd24:	b93a      	cbnz	r2, 801bd36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bd26:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bd2a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801bd2e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801bd32:	4628      	mov	r0, r5
 801bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd36:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801bd3a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801bd3e:	8893      	ldrh	r3, [r2, #4]
 801bd40:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801bd44:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bd48:	79ee      	ldrb	r6, [r5, #7]
 801bd4a:	4316      	orrs	r6, r2
 801bd4c:	19da      	adds	r2, r3, r7
 801bd4e:	b291      	uxth	r1, r2
 801bd50:	b2b7      	uxth	r7, r6
 801bd52:	291d      	cmp	r1, #29
 801bd54:	d87b      	bhi.n	801be4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801bd56:	2201      	movs	r2, #1
 801bd58:	10f6      	asrs	r6, r6, #3
 801bd5a:	408a      	lsls	r2, r1
 801bd5c:	4974      	ldr	r1, [pc, #464]	; (801bf30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801bd5e:	420a      	tst	r2, r1
 801bd60:	d12e      	bne.n	801bdc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801bd62:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bd66:	d072      	beq.n	801be4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801bd68:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801bd6c:	462b      	mov	r3, r5
 801bd6e:	f105 0e08 	add.w	lr, r5, #8
 801bd72:	4615      	mov	r5, r2
 801bd74:	6818      	ldr	r0, [r3, #0]
 801bd76:	3308      	adds	r3, #8
 801bd78:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bd7c:	4694      	mov	ip, r2
 801bd7e:	4573      	cmp	r3, lr
 801bd80:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bd84:	4662      	mov	r2, ip
 801bd86:	d1f5      	bne.n	801bd74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bd88:	6818      	ldr	r0, [r3, #0]
 801bd8a:	f8cc 0000 	str.w	r0, [ip]
 801bd8e:	889b      	ldrh	r3, [r3, #4]
 801bd90:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bd94:	b2b3      	uxth	r3, r6
 801bd96:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801bd9a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801bd9e:	1aca      	subs	r2, r1, r3
 801bda0:	1bcf      	subs	r7, r1, r7
 801bda2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801bda6:	b292      	uxth	r2, r2
 801bda8:	1afb      	subs	r3, r7, r3
 801bdaa:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801bdae:	10d2      	asrs	r2, r2, #3
 801bdb0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bdb4:	4302      	orrs	r2, r0
 801bdb6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801bdba:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801bdbe:	e7b8      	b.n	801bd32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bdc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801bdc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bdc6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801bdc8:	f640 6333 	movw	r3, #3635	; 0xe33
 801bdcc:	4299      	cmp	r1, r3
 801bdce:	d110      	bne.n	801bdf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801bdd0:	6803      	ldr	r3, [r0, #0]
 801bdd2:	68db      	ldr	r3, [r3, #12]
 801bdd4:	4798      	blx	r3
 801bdd6:	7b41      	ldrb	r1, [r0, #13]
 801bdd8:	00cb      	lsls	r3, r1, #3
 801bdda:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bdde:	7a03      	ldrb	r3, [r0, #8]
 801bde0:	0648      	lsls	r0, r1, #25
 801bde2:	ea43 0302 	orr.w	r3, r3, r2
 801bde6:	bf44      	itt	mi
 801bde8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bdec:	b21b      	sxthmi	r3, r3
 801bdee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bdf2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801bdf6:	462a      	mov	r2, r5
 801bdf8:	f105 0c08 	add.w	ip, r5, #8
 801bdfc:	443b      	add	r3, r7
 801bdfe:	4433      	add	r3, r6
 801be00:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801be04:	b29b      	uxth	r3, r3
 801be06:	4635      	mov	r5, r6
 801be08:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801be0c:	6810      	ldr	r0, [r2, #0]
 801be0e:	3208      	adds	r2, #8
 801be10:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801be14:	4637      	mov	r7, r6
 801be16:	4562      	cmp	r2, ip
 801be18:	c703      	stmia	r7!, {r0, r1}
 801be1a:	463e      	mov	r6, r7
 801be1c:	d1f6      	bne.n	801be0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801be1e:	6810      	ldr	r0, [r2, #0]
 801be20:	6038      	str	r0, [r7, #0]
 801be22:	8892      	ldrh	r2, [r2, #4]
 801be24:	80ba      	strh	r2, [r7, #4]
 801be26:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801be2a:	10db      	asrs	r3, r3, #3
 801be2c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801be30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801be34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801be38:	4313      	orrs	r3, r2
 801be3a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801be3e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801be42:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801be46:	1a9b      	subs	r3, r3, r2
 801be48:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801be4c:	e771      	b.n	801bd32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801be4e:	f023 0204 	bic.w	r2, r3, #4
 801be52:	f640 611b 	movw	r1, #3611	; 0xe1b
 801be56:	428a      	cmp	r2, r1
 801be58:	d003      	beq.n	801be62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801be5a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801be5e:	4293      	cmp	r3, r2
 801be60:	d120      	bne.n	801bea4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801be62:	3b01      	subs	r3, #1
 801be64:	4602      	mov	r2, r0
 801be66:	4629      	mov	r1, r5
 801be68:	4620      	mov	r0, r4
 801be6a:	b29b      	uxth	r3, r3
 801be6c:	f7ff ff4b 	bl	801bd06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801be70:	7b41      	ldrb	r1, [r0, #13]
 801be72:	00cb      	lsls	r3, r1, #3
 801be74:	0649      	lsls	r1, r1, #25
 801be76:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801be7a:	7a03      	ldrb	r3, [r0, #8]
 801be7c:	ea43 0302 	orr.w	r3, r3, r2
 801be80:	bf44      	itt	mi
 801be82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be86:	b21b      	sxthmi	r3, r3
 801be88:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801be8c:	7b6b      	ldrb	r3, [r5, #13]
 801be8e:	7aaa      	ldrb	r2, [r5, #10]
 801be90:	005b      	lsls	r3, r3, #1
 801be92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be96:	4313      	orrs	r3, r2
 801be98:	115a      	asrs	r2, r3, #5
 801be9a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801be9e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bea2:	e035      	b.n	801bf10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801bea4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bea8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801beac:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801beb0:	7a2a      	ldrb	r2, [r5, #8]
 801beb2:	ea42 0201 	orr.w	r2, r2, r1
 801beb6:	f640 6109 	movw	r1, #3593	; 0xe09
 801beba:	bf1c      	itt	ne
 801bebc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bec0:	b212      	sxthne	r2, r2
 801bec2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bec6:	f023 0210 	bic.w	r2, r3, #16
 801beca:	428a      	cmp	r2, r1
 801becc:	d003      	beq.n	801bed6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bece:	f640 6213 	movw	r2, #3603	; 0xe13
 801bed2:	4293      	cmp	r3, r2
 801bed4:	d129      	bne.n	801bf2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801bed6:	7b6e      	ldrb	r6, [r5, #13]
 801bed8:	4629      	mov	r1, r5
 801beda:	0076      	lsls	r6, r6, #1
 801bedc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bee0:	7aae      	ldrb	r6, [r5, #10]
 801bee2:	4316      	orrs	r6, r2
 801bee4:	f640 6213 	movw	r2, #3603	; 0xe13
 801bee8:	4293      	cmp	r3, r2
 801beea:	4602      	mov	r2, r0
 801beec:	4620      	mov	r0, r4
 801beee:	bf16      	itet	ne
 801bef0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bef4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bef8:	b29b      	uxthne	r3, r3
 801befa:	f7ff ff04 	bl	801bd06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801befe:	7b43      	ldrb	r3, [r0, #13]
 801bf00:	7a82      	ldrb	r2, [r0, #10]
 801bf02:	005b      	lsls	r3, r3, #1
 801bf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf08:	4313      	orrs	r3, r2
 801bf0a:	1af6      	subs	r6, r6, r3
 801bf0c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801bf10:	7b69      	ldrb	r1, [r5, #13]
 801bf12:	00cb      	lsls	r3, r1, #3
 801bf14:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf18:	7a2b      	ldrb	r3, [r5, #8]
 801bf1a:	4313      	orrs	r3, r2
 801bf1c:	064a      	lsls	r2, r1, #25
 801bf1e:	bf44      	itt	mi
 801bf20:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf24:	b21b      	sxthmi	r3, r3
 801bf26:	1bdb      	subs	r3, r3, r7
 801bf28:	e747      	b.n	801bdba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	e7b7      	b.n	801be9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801bf2e:	bf00      	nop
 801bf30:	3fc00079 	.word	0x3fc00079

0801bf34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bf34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf38:	4604      	mov	r4, r0
 801bf3a:	b942      	cbnz	r2, 801bf4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bf3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf40:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801bf44:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801bf48:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bf4c:	e047      	b.n	801bfde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bf4e:	7b51      	ldrb	r1, [r2, #13]
 801bf50:	8893      	ldrh	r3, [r2, #4]
 801bf52:	010d      	lsls	r5, r1, #4
 801bf54:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801bf58:	79d5      	ldrb	r5, [r2, #7]
 801bf5a:	4305      	orrs	r5, r0
 801bf5c:	2d04      	cmp	r5, #4
 801bf5e:	bfcc      	ite	gt
 801bf60:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bf64:	f04f 0e01 	movle.w	lr, #1
 801bf68:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bf6c:	f200 80ab 	bhi.w	801c0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bf70:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bf74:	4283      	cmp	r3, r0
 801bf76:	d216      	bcs.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf78:	f240 605b 	movw	r0, #1627	; 0x65b
 801bf7c:	4283      	cmp	r3, r0
 801bf7e:	d859      	bhi.n	801c034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bf80:	f240 6057 	movw	r0, #1623	; 0x657
 801bf84:	4283      	cmp	r3, r0
 801bf86:	d20e      	bcs.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf88:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bf8c:	d24a      	bcs.n	801c024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bf8e:	f240 604e 	movw	r0, #1614	; 0x64e
 801bf92:	4283      	cmp	r3, r0
 801bf94:	d207      	bcs.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf96:	f240 601a 	movw	r0, #1562	; 0x61a
 801bf9a:	4283      	cmp	r3, r0
 801bf9c:	d02a      	beq.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf9e:	d821      	bhi.n	801bfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bfa0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bfa4:	d35b      	bcc.n	801c05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bfa6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801bfaa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bfae:	f040 80d0 	bne.w	801c152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bfb2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801bfb6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bfba:	f040 80ca 	bne.w	801c152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bfbe:	00cb      	lsls	r3, r1, #3
 801bfc0:	0649      	lsls	r1, r1, #25
 801bfc2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bfc6:	7a13      	ldrb	r3, [r2, #8]
 801bfc8:	ea43 0300 	orr.w	r3, r3, r0
 801bfcc:	bf44      	itt	mi
 801bfce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfd2:	b21b      	sxthmi	r3, r3
 801bfd4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bfd8:	1b5d      	subs	r5, r3, r5
 801bfda:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bfde:	4610      	mov	r0, r2
 801bfe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfe4:	f240 604b 	movw	r0, #1611	; 0x64b
 801bfe8:	4283      	cmp	r3, r0
 801bfea:	d338      	bcc.n	801c05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bfec:	f240 604c 	movw	r0, #1612	; 0x64c
 801bff0:	4283      	cmp	r3, r0
 801bff2:	d9d8      	bls.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bff4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801bff8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801bffc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c000:	f040 80f3 	bne.w	801c1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c004:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c008:	f040 80ef 	bne.w	801c1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c00c:	00cb      	lsls	r3, r1, #3
 801c00e:	064e      	lsls	r6, r1, #25
 801c010:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c014:	7a13      	ldrb	r3, [r2, #8]
 801c016:	ea43 0300 	orr.w	r3, r3, r0
 801c01a:	bf44      	itt	mi
 801c01c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c020:	b21b      	sxthmi	r3, r3
 801c022:	e7d9      	b.n	801bfd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c024:	f240 6054 	movw	r0, #1620	; 0x654
 801c028:	4283      	cmp	r3, r0
 801c02a:	d8e3      	bhi.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c02c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c030:	d9e0      	bls.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c032:	e7b8      	b.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c034:	f240 6074 	movw	r0, #1652	; 0x674
 801c038:	4283      	cmp	r3, r0
 801c03a:	d0b4      	beq.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c03c:	d82d      	bhi.n	801c09a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c03e:	f240 605e 	movw	r0, #1630	; 0x65e
 801c042:	4283      	cmp	r3, r0
 801c044:	d804      	bhi.n	801c050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c046:	f240 605d 	movw	r0, #1629	; 0x65d
 801c04a:	4283      	cmp	r3, r0
 801c04c:	d3d2      	bcc.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c04e:	e7aa      	b.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c050:	f240 605f 	movw	r0, #1631	; 0x65f
 801c054:	4283      	cmp	r3, r0
 801c056:	d0cd      	beq.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c058:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c05c:	d0a3      	beq.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c05e:	00cb      	lsls	r3, r1, #3
 801c060:	0649      	lsls	r1, r1, #25
 801c062:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c066:	7a13      	ldrb	r3, [r2, #8]
 801c068:	ea43 0300 	orr.w	r3, r3, r0
 801c06c:	bf44      	itt	mi
 801c06e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c072:	b21b      	sxthmi	r3, r3
 801c074:	1b5d      	subs	r5, r3, r5
 801c076:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c07a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c07e:	7b53      	ldrb	r3, [r2, #13]
 801c080:	015b      	lsls	r3, r3, #5
 801c082:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c086:	7993      	ldrb	r3, [r2, #6]
 801c088:	430b      	orrs	r3, r1
 801c08a:	2105      	movs	r1, #5
 801c08c:	005b      	lsls	r3, r3, #1
 801c08e:	fb93 f3f1 	sdiv	r3, r3, r1
 801c092:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c096:	440b      	add	r3, r1
 801c098:	e756      	b.n	801bf48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c09a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c09e:	4283      	cmp	r3, r0
 801c0a0:	d809      	bhi.n	801c0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c0a2:	f240 60df 	movw	r0, #1759	; 0x6df
 801c0a6:	4283      	cmp	r3, r0
 801c0a8:	f4bf af7d 	bcs.w	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0ac:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c0b0:	2b05      	cmp	r3, #5
 801c0b2:	d8d4      	bhi.n	801c05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c0b4:	e777      	b.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0b6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c0ba:	4283      	cmp	r3, r0
 801c0bc:	d09a      	beq.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0be:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c0c2:	4283      	cmp	r3, r0
 801c0c4:	e7ca      	b.n	801c05c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c0c6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c0ca:	d22b      	bcs.n	801c124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c0cc:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c0d0:	4283      	cmp	r3, r0
 801c0d2:	d28f      	bcs.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0d4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c0d8:	4283      	cmp	r3, r0
 801c0da:	d816      	bhi.n	801c10a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c0dc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c0e0:	4283      	cmp	r3, r0
 801c0e2:	f4bf af60 	bcs.w	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0e6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c0ea:	4283      	cmp	r3, r0
 801c0ec:	d80a      	bhi.n	801c104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c0ee:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c0f2:	4283      	cmp	r3, r0
 801c0f4:	f4bf af57 	bcs.w	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0f8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c0fc:	4283      	cmp	r3, r0
 801c0fe:	f43f af79 	beq.w	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c102:	e7ac      	b.n	801c05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c104:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c108:	e7f8      	b.n	801c0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c10a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c10e:	4283      	cmp	r3, r0
 801c110:	d802      	bhi.n	801c118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c112:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c116:	e798      	b.n	801c04a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c118:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c11c:	4283      	cmp	r3, r0
 801c11e:	f47f af42 	bne.w	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c122:	e767      	b.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c124:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c128:	4283      	cmp	r3, r0
 801c12a:	f43f af63 	beq.w	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c12e:	d802      	bhi.n	801c136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c130:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c134:	e7f2      	b.n	801c11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c136:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c13a:	4283      	cmp	r3, r0
 801c13c:	d805      	bhi.n	801c14a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c13e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c142:	4283      	cmp	r3, r0
 801c144:	f4ff af2f 	bcc.w	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c148:	e754      	b.n	801bff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c14a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c14e:	4283      	cmp	r3, r0
 801c150:	e7af      	b.n	801c0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c152:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c156:	4617      	mov	r7, r2
 801c158:	f102 0808 	add.w	r8, r2, #8
 801c15c:	4666      	mov	r6, ip
 801c15e:	6838      	ldr	r0, [r7, #0]
 801c160:	3708      	adds	r7, #8
 801c162:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c166:	46e6      	mov	lr, ip
 801c168:	4547      	cmp	r7, r8
 801c16a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c16e:	46f4      	mov	ip, lr
 801c170:	d1f5      	bne.n	801c15e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c172:	6838      	ldr	r0, [r7, #0]
 801c174:	f8ce 0000 	str.w	r0, [lr]
 801c178:	88b9      	ldrh	r1, [r7, #4]
 801c17a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c17e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801c182:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c186:	d009      	beq.n	801c19c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801c188:	7b51      	ldrb	r1, [r2, #13]
 801c18a:	7992      	ldrb	r2, [r2, #6]
 801c18c:	0149      	lsls	r1, r1, #5
 801c18e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c192:	4311      	orrs	r1, r2
 801c194:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c198:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801c19c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c1a0:	b2ad      	uxth	r5, r5
 801c1a2:	d00d      	beq.n	801c1c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801c1a4:	442b      	add	r3, r5
 801c1a6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c1aa:	b29b      	uxth	r3, r3
 801c1ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c1b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c1b4:	10db      	asrs	r3, r3, #3
 801c1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c1ba:	4313      	orrs	r3, r2
 801c1bc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c1c0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801c1c4:	00cb      	lsls	r3, r1, #3
 801c1c6:	064f      	lsls	r7, r1, #25
 801c1c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c1cc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801c1d0:	ea43 0302 	orr.w	r3, r3, r2
 801c1d4:	bf44      	itt	mi
 801c1d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c1da:	b21b      	sxthmi	r3, r3
 801c1dc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c1e0:	1b5b      	subs	r3, r3, r5
 801c1e2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c1e6:	4632      	mov	r2, r6
 801c1e8:	e6f9      	b.n	801bfde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c1ea:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c1ee:	4617      	mov	r7, r2
 801c1f0:	f102 0908 	add.w	r9, r2, #8
 801c1f4:	4666      	mov	r6, ip
 801c1f6:	6838      	ldr	r0, [r7, #0]
 801c1f8:	3708      	adds	r7, #8
 801c1fa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c1fe:	46e0      	mov	r8, ip
 801c200:	454f      	cmp	r7, r9
 801c202:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c206:	46c4      	mov	ip, r8
 801c208:	d1f5      	bne.n	801c1f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801c20a:	6838      	ldr	r0, [r7, #0]
 801c20c:	f8c8 0000 	str.w	r0, [r8]
 801c210:	88b9      	ldrh	r1, [r7, #4]
 801c212:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c216:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801c21a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c21e:	d009      	beq.n	801c234 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801c220:	7b51      	ldrb	r1, [r2, #13]
 801c222:	7992      	ldrb	r2, [r2, #6]
 801c224:	0149      	lsls	r1, r1, #5
 801c226:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c22a:	4311      	orrs	r1, r2
 801c22c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c230:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801c234:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c238:	d00e      	beq.n	801c258 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801c23a:	eba3 030e 	sub.w	r3, r3, lr
 801c23e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c242:	b29b      	uxth	r3, r3
 801c244:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c248:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c24c:	10db      	asrs	r3, r3, #3
 801c24e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c252:	4313      	orrs	r3, r2
 801c254:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c258:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801c25c:	00cb      	lsls	r3, r1, #3
 801c25e:	0648      	lsls	r0, r1, #25
 801c260:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c264:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801c268:	ea43 0302 	orr.w	r3, r3, r2
 801c26c:	bf44      	itt	mi
 801c26e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c272:	b21b      	sxthmi	r3, r3
 801c274:	1b5d      	subs	r5, r3, r5
 801c276:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c27a:	e7b4      	b.n	801c1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801c27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c280:	461e      	mov	r6, r3
 801c282:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c284:	4604      	mov	r4, r0
 801c286:	4617      	mov	r7, r2
 801c288:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c28c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c290:	f7e7 fd38 	bl	8003d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c294:	4605      	mov	r5, r0
 801c296:	b918      	cbnz	r0, 801c2a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c298:	6030      	str	r0, [r6, #0]
 801c29a:	4628      	mov	r0, r5
 801c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	4601      	mov	r1, r0
 801c2a4:	4638      	mov	r0, r7
 801c2a6:	68db      	ldr	r3, [r3, #12]
 801c2a8:	4798      	blx	r3
 801c2aa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c2ae:	4602      	mov	r2, r0
 801c2b0:	6030      	str	r0, [r6, #0]
 801c2b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c2b6:	d213      	bcs.n	801c2e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c2b8:	4643      	mov	r3, r8
 801c2ba:	4639      	mov	r1, r7
 801c2bc:	4620      	mov	r0, r4
 801c2be:	f7ff fe39 	bl	801bf34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c2c2:	6030      	str	r0, [r6, #0]
 801c2c4:	6833      	ldr	r3, [r6, #0]
 801c2c6:	b143      	cbz	r3, 801c2da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c2c8:	7b5a      	ldrb	r2, [r3, #13]
 801c2ca:	7a9b      	ldrb	r3, [r3, #10]
 801c2cc:	0052      	lsls	r2, r2, #1
 801c2ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c2d2:	4313      	orrs	r3, r2
 801c2d4:	bf0c      	ite	eq
 801c2d6:	2301      	moveq	r3, #1
 801c2d8:	2300      	movne	r3, #0
 801c2da:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c2de:	e7dc      	b.n	801c29a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c2e0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c2e4:	b29b      	uxth	r3, r3
 801c2e6:	2b7f      	cmp	r3, #127	; 0x7f
 801c2e8:	d804      	bhi.n	801c2f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c2ea:	4639      	mov	r1, r7
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f7ff fd15 	bl	801bd1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c2f2:	e7e6      	b.n	801c2c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c2f4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d0e3      	beq.n	801c2c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c2fc:	f640 1302 	movw	r3, #2306	; 0x902
 801c300:	429d      	cmp	r5, r3
 801c302:	d1df      	bne.n	801c2c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c304:	4601      	mov	r1, r0
 801c306:	4620      	mov	r0, r4
 801c308:	f7ff fcd9 	bl	801bcbe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c30c:	e7d9      	b.n	801c2c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c30e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c312:	461e      	mov	r6, r3
 801c314:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c316:	4604      	mov	r4, r0
 801c318:	4617      	mov	r7, r2
 801c31a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c31e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c322:	f7e7 fcef 	bl	8003d04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c326:	4605      	mov	r5, r0
 801c328:	b918      	cbnz	r0, 801c332 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801c32a:	6030      	str	r0, [r6, #0]
 801c32c:	4628      	mov	r0, r5
 801c32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c332:	683b      	ldr	r3, [r7, #0]
 801c334:	4601      	mov	r1, r0
 801c336:	4638      	mov	r0, r7
 801c338:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c33c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c340:	47c8      	blx	r9
 801c342:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c346:	4602      	mov	r2, r0
 801c348:	6030      	str	r0, [r6, #0]
 801c34a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c34e:	d213      	bcs.n	801c378 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801c350:	4643      	mov	r3, r8
 801c352:	4639      	mov	r1, r7
 801c354:	4620      	mov	r0, r4
 801c356:	f7ff fded 	bl	801bf34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c35a:	6030      	str	r0, [r6, #0]
 801c35c:	6833      	ldr	r3, [r6, #0]
 801c35e:	b143      	cbz	r3, 801c372 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c360:	7b5a      	ldrb	r2, [r3, #13]
 801c362:	7a9b      	ldrb	r3, [r3, #10]
 801c364:	0052      	lsls	r2, r2, #1
 801c366:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c36a:	4313      	orrs	r3, r2
 801c36c:	bf0c      	ite	eq
 801c36e:	2301      	moveq	r3, #1
 801c370:	2300      	movne	r3, #0
 801c372:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c376:	e7d9      	b.n	801c32c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c378:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c37c:	b29b      	uxth	r3, r3
 801c37e:	2b7f      	cmp	r3, #127	; 0x7f
 801c380:	d804      	bhi.n	801c38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c382:	4639      	mov	r1, r7
 801c384:	4620      	mov	r0, r4
 801c386:	f7ff fcc9 	bl	801bd1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c38a:	e7e6      	b.n	801c35a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c38c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c390:	2b00      	cmp	r3, #0
 801c392:	d0e3      	beq.n	801c35c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c394:	f640 1302 	movw	r3, #2306	; 0x902
 801c398:	429d      	cmp	r5, r3
 801c39a:	d1df      	bne.n	801c35c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c39c:	4601      	mov	r1, r0
 801c39e:	4620      	mov	r0, r4
 801c3a0:	f7ff fc8d 	bl	801bcbe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c3a4:	e7d9      	b.n	801c35a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c3a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c3a6:	b510      	push	{r4, lr}
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801c3ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c3b0:	b1e1      	cbz	r1, 801c3ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c3b2:	2b0a      	cmp	r3, #10
 801c3b4:	d02d      	beq.n	801c412 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c3b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801c3b8:	3901      	subs	r1, #1
 801c3ba:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c3be:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801c3c0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801c3c4:	1c51      	adds	r1, r2, #1
 801c3c6:	b289      	uxth	r1, r1
 801c3c8:	2901      	cmp	r1, #1
 801c3ca:	bf8a      	itet	hi
 801c3cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c3d0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801c3d2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801c3d4:	1c5a      	adds	r2, r3, #1
 801c3d6:	8722      	strh	r2, [r4, #56]	; 0x38
 801c3d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c3da:	4413      	add	r3, r2
 801c3dc:	b29b      	uxth	r3, r3
 801c3de:	2b09      	cmp	r3, #9
 801c3e0:	bf88      	it	hi
 801c3e2:	3b0a      	subhi	r3, #10
 801c3e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c3e8:	8458      	strh	r0, [r3, #34]	; 0x22
 801c3ea:	e7de      	b.n	801c3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c3ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c3ee:	2b0a      	cmp	r3, #10
 801c3f0:	d00f      	beq.n	801c412 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c3f2:	4620      	mov	r0, r4
 801c3f4:	f7ff fc11 	bl	801bc1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c3f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c3fa:	1c5a      	adds	r2, r3, #1
 801c3fc:	8722      	strh	r2, [r4, #56]	; 0x38
 801c3fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c400:	4413      	add	r3, r2
 801c402:	b29b      	uxth	r3, r3
 801c404:	2b09      	cmp	r3, #9
 801c406:	bf88      	it	hi
 801c408:	3b0a      	subhi	r3, #10
 801c40a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c40e:	8458      	strh	r0, [r3, #34]	; 0x22
 801c410:	e7ec      	b.n	801c3ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c412:	bd10      	pop	{r4, pc}

0801c414 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c414:	b538      	push	{r3, r4, r5, lr}
 801c416:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c418:	4604      	mov	r4, r0
 801c41a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c41e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801c420:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801c422:	3a01      	subs	r2, #1
 801c424:	8702      	strh	r2, [r0, #56]	; 0x38
 801c426:	1c5a      	adds	r2, r3, #1
 801c428:	b292      	uxth	r2, r2
 801c42a:	2a09      	cmp	r2, #9
 801c42c:	bf8a      	itet	hi
 801c42e:	3b09      	subhi	r3, #9
 801c430:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801c432:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801c434:	f7ff ffb7 	bl	801c3a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c438:	8c23      	ldrh	r3, [r4, #32]
 801c43a:	2b01      	cmp	r3, #1
 801c43c:	bf9c      	itt	ls
 801c43e:	3301      	addls	r3, #1
 801c440:	8423      	strhls	r3, [r4, #32]
 801c442:	8be3      	ldrh	r3, [r4, #30]
 801c444:	b90b      	cbnz	r3, 801c44a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c446:	2302      	movs	r3, #2
 801c448:	83e3      	strh	r3, [r4, #30]
 801c44a:	8be3      	ldrh	r3, [r4, #30]
 801c44c:	4628      	mov	r0, r5
 801c44e:	3b01      	subs	r3, #1
 801c450:	b29b      	uxth	r3, r3
 801c452:	83e3      	strh	r3, [r4, #30]
 801c454:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c458:	8365      	strh	r5, [r4, #26]
 801c45a:	bd38      	pop	{r3, r4, r5, pc}

0801c45c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c45c:	428a      	cmp	r2, r1
 801c45e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c462:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801c464:	d932      	bls.n	801c4cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c466:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801c468:	1a54      	subs	r4, r2, r1
 801c46a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801c46e:	19ee      	adds	r6, r5, r7
 801c470:	fa1f fe84 	uxth.w	lr, r4
 801c474:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801c478:	3e01      	subs	r6, #1
 801c47a:	b2b4      	uxth	r4, r6
 801c47c:	eba4 090e 	sub.w	r9, r4, lr
 801c480:	fa1f f989 	uxth.w	r9, r9
 801c484:	2c09      	cmp	r4, #9
 801c486:	4626      	mov	r6, r4
 801c488:	bf88      	it	hi
 801c48a:	f1a4 060a 	subhi.w	r6, r4, #10
 801c48e:	f1bc 0f00 	cmp.w	ip, #0
 801c492:	f104 34ff 	add.w	r4, r4, #4294967295
 801c496:	bf08      	it	eq
 801c498:	f04f 0c02 	moveq.w	ip, #2
 801c49c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c4a0:	b2a4      	uxth	r4, r4
 801c4a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c4a6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801c4aa:	454c      	cmp	r4, r9
 801c4ac:	fa1f fc8c 	uxth.w	ip, ip
 801c4b0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c4b4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801c4b8:	d1e4      	bne.n	801c484 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c4ba:	eba5 050e 	sub.w	r5, r5, lr
 801c4be:	eb0e 0408 	add.w	r4, lr, r8
 801c4c2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801c4c6:	8705      	strh	r5, [r0, #56]	; 0x38
 801c4c8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801c4cc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801c4ce:	250a      	movs	r5, #10
 801c4d0:	1a64      	subs	r4, r4, r1
 801c4d2:	4439      	add	r1, r7
 801c4d4:	b289      	uxth	r1, r1
 801c4d6:	8704      	strh	r4, [r0, #56]	; 0x38
 801c4d8:	2909      	cmp	r1, #9
 801c4da:	bf88      	it	hi
 801c4dc:	390a      	subhi	r1, #10
 801c4de:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c4e0:	b18a      	cbz	r2, 801c506 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c4e2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801c4e4:	3a01      	subs	r2, #1
 801c4e6:	3101      	adds	r1, #1
 801c4e8:	b292      	uxth	r2, r2
 801c4ea:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c4ee:	8701      	strh	r1, [r0, #56]	; 0x38
 801c4f0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c4f2:	b901      	cbnz	r1, 801c4f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c4f4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c4f6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c4f8:	3901      	subs	r1, #1
 801c4fa:	b289      	uxth	r1, r1
 801c4fc:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c4fe:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c502:	844c      	strh	r4, [r1, #34]	; 0x22
 801c504:	e7ec      	b.n	801c4e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c506:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c50a:	f7ff bf4c 	b.w	801c3a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c50e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c50e:	b570      	push	{r4, r5, r6, lr}
 801c510:	2500      	movs	r5, #0
 801c512:	4295      	cmp	r5, r2
 801c514:	d011      	beq.n	801c53a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c516:	8bc4      	ldrh	r4, [r0, #30]
 801c518:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c51c:	4414      	add	r4, r2
 801c51e:	3c01      	subs	r4, #1
 801c520:	1b64      	subs	r4, r4, r5
 801c522:	b2a4      	uxth	r4, r4
 801c524:	2c01      	cmp	r4, #1
 801c526:	bf88      	it	hi
 801c528:	3c02      	subhi	r4, #2
 801c52a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c52e:	8b64      	ldrh	r4, [r4, #26]
 801c530:	42b4      	cmp	r4, r6
 801c532:	d117      	bne.n	801c564 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c534:	3501      	adds	r5, #1
 801c536:	b2ad      	uxth	r5, r5
 801c538:	e7eb      	b.n	801c512 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c53a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c53e:	2400      	movs	r4, #0
 801c540:	4413      	add	r3, r2
 801c542:	b2a2      	uxth	r2, r4
 801c544:	429a      	cmp	r2, r3
 801c546:	da0f      	bge.n	801c568 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c548:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801c54a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c54e:	3401      	adds	r4, #1
 801c550:	4432      	add	r2, r6
 801c552:	b292      	uxth	r2, r2
 801c554:	2a09      	cmp	r2, #9
 801c556:	bf88      	it	hi
 801c558:	3a0a      	subhi	r2, #10
 801c55a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c55e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801c560:	42aa      	cmp	r2, r5
 801c562:	d0ee      	beq.n	801c542 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c564:	2000      	movs	r0, #0
 801c566:	bd70      	pop	{r4, r5, r6, pc}
 801c568:	2001      	movs	r0, #1
 801c56a:	e7fc      	b.n	801c566 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c56c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c570:	4605      	mov	r5, r0
 801c572:	4616      	mov	r6, r2
 801c574:	1c8c      	adds	r4, r1, #2
 801c576:	8809      	ldrh	r1, [r1, #0]
 801c578:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c57c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c580:	42b3      	cmp	r3, r6
 801c582:	d124      	bne.n	801c5ce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c584:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c588:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c58c:	f001 070f 	and.w	r7, r1, #15
 801c590:	4652      	mov	r2, sl
 801c592:	f8cd 8000 	str.w	r8, [sp]
 801c596:	464b      	mov	r3, r9
 801c598:	4621      	mov	r1, r4
 801c59a:	4628      	mov	r0, r5
 801c59c:	f7ff ffb7 	bl	801c50e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c5a0:	4683      	mov	fp, r0
 801c5a2:	b168      	cbz	r0, 801c5c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c5a4:	eb0a 0109 	add.w	r1, sl, r9
 801c5a8:	463a      	mov	r2, r7
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	4441      	add	r1, r8
 801c5ae:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c5b2:	4649      	mov	r1, r9
 801c5b4:	f7ff ff52 	bl	801c45c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c5b8:	4658      	mov	r0, fp
 801c5ba:	b003      	add	sp, #12
 801c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5c0:	eb07 010a 	add.w	r1, r7, sl
 801c5c4:	4449      	add	r1, r9
 801c5c6:	4441      	add	r1, r8
 801c5c8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c5cc:	e7d2      	b.n	801c574 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c5ce:	f04f 0b00 	mov.w	fp, #0
 801c5d2:	e7f1      	b.n	801c5b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c5d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c5d4:	b570      	push	{r4, r5, r6, lr}
 801c5d6:	8810      	ldrh	r0, [r2, #0]
 801c5d8:	4298      	cmp	r0, r3
 801c5da:	d817      	bhi.n	801c60c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5dc:	1e48      	subs	r0, r1, #1
 801c5de:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c5e2:	4298      	cmp	r0, r3
 801c5e4:	d312      	bcc.n	801c60c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5e6:	2400      	movs	r4, #0
 801c5e8:	428c      	cmp	r4, r1
 801c5ea:	d20f      	bcs.n	801c60c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c5ec:	1860      	adds	r0, r4, r1
 801c5ee:	1040      	asrs	r0, r0, #1
 801c5f0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c5f4:	0085      	lsls	r5, r0, #2
 801c5f6:	42b3      	cmp	r3, r6
 801c5f8:	d902      	bls.n	801c600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c5fa:	3001      	adds	r0, #1
 801c5fc:	b284      	uxth	r4, r0
 801c5fe:	e7f3      	b.n	801c5e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c600:	d201      	bcs.n	801c606 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c602:	b281      	uxth	r1, r0
 801c604:	e7f0      	b.n	801c5e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c606:	442a      	add	r2, r5
 801c608:	8850      	ldrh	r0, [r2, #2]
 801c60a:	bd70      	pop	{r4, r5, r6, pc}
 801c60c:	2000      	movs	r0, #0
 801c60e:	e7fc      	b.n	801c60a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c610 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c614:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801c616:	4604      	mov	r4, r0
 801c618:	260b      	movs	r6, #11
 801c61a:	886f      	ldrh	r7, [r5, #2]
 801c61c:	087f      	lsrs	r7, r7, #1
 801c61e:	3e01      	subs	r6, #1
 801c620:	d013      	beq.n	801c64a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c622:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c624:	462a      	mov	r2, r5
 801c626:	4639      	mov	r1, r7
 801c628:	4620      	mov	r0, r4
 801c62a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c62e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c632:	4643      	mov	r3, r8
 801c634:	f7ff ffce 	bl	801c5d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c638:	b138      	cbz	r0, 801c64a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c63a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c63e:	4642      	mov	r2, r8
 801c640:	4620      	mov	r0, r4
 801c642:	f7ff ff93 	bl	801c56c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c646:	2800      	cmp	r0, #0
 801c648:	d1e9      	bne.n	801c61e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c650 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c650:	b570      	push	{r4, r5, r6, lr}
 801c652:	694a      	ldr	r2, [r1, #20]
 801c654:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c656:	684b      	ldr	r3, [r1, #4]
 801c658:	1b54      	subs	r4, r2, r5
 801c65a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c65c:	f000 8106 	beq.w	801c86c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c660:	1b9b      	subs	r3, r3, r6
 801c662:	d003      	beq.n	801c66c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c664:	4363      	muls	r3, r4
 801c666:	2210      	movs	r2, #16
 801c668:	fb93 f3f2 	sdiv	r3, r3, r2
 801c66c:	680c      	ldr	r4, [r1, #0]
 801c66e:	698a      	ldr	r2, [r1, #24]
 801c670:	1b65      	subs	r5, r4, r5
 801c672:	f000 80fd 	beq.w	801c870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c676:	1b92      	subs	r2, r2, r6
 801c678:	d003      	beq.n	801c682 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c67a:	436a      	muls	r2, r5
 801c67c:	2410      	movs	r4, #16
 801c67e:	fb92 f2f4 	sdiv	r2, r2, r4
 801c682:	1a9b      	subs	r3, r3, r2
 801c684:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c8ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c68c:	460a      	mov	r2, r1
 801c68e:	ee07 3a90 	vmov	s15, r3
 801c692:	f100 040c 	add.w	r4, r0, #12
 801c696:	4603      	mov	r3, r0
 801c698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c69c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c6a0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c6a4:	eeb1 6a43 	vneg.f32	s12, s6
 801c6a8:	edd2 7a02 	vldr	s15, [r2, #8]
 801c6ac:	3214      	adds	r2, #20
 801c6ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c6b2:	ece3 6a01 	vstmia	r3!, {s13}
 801c6b6:	429c      	cmp	r4, r3
 801c6b8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c6bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c6c0:	edc3 7a02 	vstr	s15, [r3, #8]
 801c6c4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c6c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c6cc:	edc3 7a05 	vstr	s15, [r3, #20]
 801c6d0:	d1ea      	bne.n	801c6a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c6d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c6d4:	698b      	ldr	r3, [r1, #24]
 801c6d6:	edd0 4a02 	vldr	s9, [r0, #8]
 801c6da:	1a9b      	subs	r3, r3, r2
 801c6dc:	edd0 3a00 	vldr	s7, [r0]
 801c6e0:	edd0 6a01 	vldr	s13, [r0, #4]
 801c6e4:	ee07 3a90 	vmov	s15, r3
 801c6e8:	684b      	ldr	r3, [r1, #4]
 801c6ea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c6ee:	ed90 5a05 	vldr	s10, [r0, #20]
 801c6f2:	1a9b      	subs	r3, r3, r2
 801c6f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6f8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c6fc:	ed90 2a03 	vldr	s4, [r0, #12]
 801c700:	ee07 3a10 	vmov	s14, r3
 801c704:	edd0 5a04 	vldr	s11, [r0, #16]
 801c708:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c70c:	ed90 1a07 	vldr	s2, [r0, #28]
 801c710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c714:	edd0 2a06 	vldr	s5, [r0, #24]
 801c718:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c71c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c720:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c724:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c728:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c72c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c730:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c734:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c736:	694a      	ldr	r2, [r1, #20]
 801c738:	1b13      	subs	r3, r2, r4
 801c73a:	ee07 3a10 	vmov	s14, r3
 801c73e:	680b      	ldr	r3, [r1, #0]
 801c740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c744:	1b1b      	subs	r3, r3, r4
 801c746:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c74a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c74e:	ee07 3a10 	vmov	s14, r3
 801c752:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c756:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c75a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c75e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c762:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c766:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c768:	698b      	ldr	r3, [r1, #24]
 801c76a:	1a9b      	subs	r3, r3, r2
 801c76c:	ee06 3a90 	vmov	s13, r3
 801c770:	684b      	ldr	r3, [r1, #4]
 801c772:	1a9b      	subs	r3, r3, r2
 801c774:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c778:	ee07 3a10 	vmov	s14, r3
 801c77c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c784:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c788:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c78c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c790:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c794:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c798:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c79a:	694a      	ldr	r2, [r1, #20]
 801c79c:	1b13      	subs	r3, r2, r4
 801c79e:	ee07 3a10 	vmov	s14, r3
 801c7a2:	680b      	ldr	r3, [r1, #0]
 801c7a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7a8:	1b1b      	subs	r3, r3, r4
 801c7aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7ae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c7b2:	ee07 3a10 	vmov	s14, r3
 801c7b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7be:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c7c2:	edd0 5a08 	vldr	s11, [r0, #32]
 801c7c6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c7ca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c7ce:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c7d2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c7d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c7d8:	698b      	ldr	r3, [r1, #24]
 801c7da:	1a9b      	subs	r3, r3, r2
 801c7dc:	ee07 3a10 	vmov	s14, r3
 801c7e0:	684b      	ldr	r3, [r1, #4]
 801c7e2:	1a9b      	subs	r3, r3, r2
 801c7e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7e8:	ee01 3a90 	vmov	s3, r3
 801c7ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7f0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c7f4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c7f8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c7fc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c800:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c804:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c808:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c80a:	694a      	ldr	r2, [r1, #20]
 801c80c:	1b13      	subs	r3, r2, r4
 801c80e:	ee03 3a10 	vmov	s6, r3
 801c812:	680b      	ldr	r3, [r1, #0]
 801c814:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c818:	1b1b      	subs	r3, r3, r4
 801c81a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c81e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c822:	ee03 3a10 	vmov	s6, r3
 801c826:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c82a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c82e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c832:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c836:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c83a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c83e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c842:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c84a:	dd13      	ble.n	801c874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c84c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c850:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c854:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c856:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c85a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c862:	dd15      	ble.n	801c890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c868:	6403      	str	r3, [r0, #64]	; 0x40
 801c86a:	bd70      	pop	{r4, r5, r6, pc}
 801c86c:	4623      	mov	r3, r4
 801c86e:	e6fd      	b.n	801c66c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c870:	462a      	mov	r2, r5
 801c872:	e706      	b.n	801c682 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c874:	d502      	bpl.n	801c87c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c876:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c87a:	e7e9      	b.n	801c850 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c87c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c880:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c884:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c88c:	dade      	bge.n	801c84c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c88e:	e7f2      	b.n	801c876 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c890:	d502      	bpl.n	801c898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c892:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c896:	e7e7      	b.n	801c868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c898:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c89c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c8a0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8a8:	dadc      	bge.n	801c864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c8aa:	e7f2      	b.n	801c892 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c8ac:	3d800000 	.word	0x3d800000

0801c8b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8b4:	2714      	movs	r7, #20
 801c8b6:	435f      	muls	r7, r3
 801c8b8:	eb02 0c07 	add.w	ip, r2, r7
 801c8bc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c8c0:	f115 0e0f 	adds.w	lr, r5, #15
 801c8c4:	f100 80a2 	bmi.w	801ca0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c8c8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c8cc:	9c08      	ldr	r4, [sp, #32]
 801c8ce:	2614      	movs	r6, #20
 801c8d0:	f8c0 e014 	str.w	lr, [r0, #20]
 801c8d4:	4366      	muls	r6, r4
 801c8d6:	eb02 0806 	add.w	r8, r2, r6
 801c8da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c8de:	f115 040f 	adds.w	r4, r5, #15
 801c8e2:	f100 809f 	bmi.w	801ca24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c8e6:	1124      	asrs	r4, r4, #4
 801c8e8:	eba4 040e 	sub.w	r4, r4, lr
 801c8ec:	6184      	str	r4, [r0, #24]
 801c8ee:	2c00      	cmp	r4, #0
 801c8f0:	f000 808a 	beq.w	801ca08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c8f4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c8f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c8fc:	5995      	ldr	r5, [r2, r6]
 801c8fe:	eba4 0809 	sub.w	r8, r4, r9
 801c902:	59d4      	ldr	r4, [r2, r7]
 801c904:	eba5 0a04 	sub.w	sl, r5, r4
 801c908:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c90c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c910:	fb0e fe05 	mul.w	lr, lr, r5
 801c914:	fb0a ee19 	mls	lr, sl, r9, lr
 801c918:	fb08 e404 	mla	r4, r8, r4, lr
 801c91c:	3c01      	subs	r4, #1
 801c91e:	19a4      	adds	r4, r4, r6
 801c920:	f100 808c 	bmi.w	801ca3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c924:	fb94 fef6 	sdiv	lr, r4, r6
 801c928:	fb06 441e 	mls	r4, r6, lr, r4
 801c92c:	f8c0 e000 	str.w	lr, [r0]
 801c930:	6104      	str	r4, [r0, #16]
 801c932:	2d00      	cmp	r5, #0
 801c934:	f2c0 8095 	blt.w	801ca62 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c938:	fb95 f4f6 	sdiv	r4, r5, r6
 801c93c:	fb06 5514 	mls	r5, r6, r4, r5
 801c940:	6044      	str	r4, [r0, #4]
 801c942:	6085      	str	r5, [r0, #8]
 801c944:	60c6      	str	r6, [r0, #12]
 801c946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c94a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c94e:	6945      	ldr	r5, [r0, #20]
 801c950:	59d2      	ldr	r2, [r2, r7]
 801c952:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c956:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801ca84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c95a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c95e:	ee07 4a10 	vmov	s14, r4
 801c962:	6804      	ldr	r4, [r0, #0]
 801c964:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c968:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c96c:	ee07 2a90 	vmov	s15, r2
 801c970:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c978:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c97c:	edd3 6a00 	vldr	s13, [r3]
 801c980:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c984:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c988:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c98c:	edc0 6a07 	vstr	s13, [r0, #28]
 801c990:	edd0 6a01 	vldr	s13, [r0, #4]
 801c994:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c998:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c99c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c9a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c9a4:	ed80 6a08 	vstr	s12, [r0, #32]
 801c9a8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c9aa:	6242      	str	r2, [r0, #36]	; 0x24
 801c9ac:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c9b0:	ed93 6a03 	vldr	s12, [r3, #12]
 801c9b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c9b8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c9bc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c9c0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c9c4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c9c8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c9cc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c9d0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c9d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c9d6:	6302      	str	r2, [r0, #48]	; 0x30
 801c9d8:	ed93 6a06 	vldr	s12, [r3, #24]
 801c9dc:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c9e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c9e4:	eeb0 7a46 	vmov.f32	s14, s12
 801c9e8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c9ec:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c9f0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c9f4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c9f8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c9fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca00:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801ca04:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801ca06:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca0c:	2410      	movs	r4, #16
 801ca0e:	f1c5 0501 	rsb	r5, r5, #1
 801ca12:	fb9e fef4 	sdiv	lr, lr, r4
 801ca16:	f015 050f 	ands.w	r5, r5, #15
 801ca1a:	bf18      	it	ne
 801ca1c:	2501      	movne	r5, #1
 801ca1e:	ebae 0e05 	sub.w	lr, lr, r5
 801ca22:	e753      	b.n	801c8cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ca24:	f04f 0910 	mov.w	r9, #16
 801ca28:	f1c5 0501 	rsb	r5, r5, #1
 801ca2c:	fb94 f4f9 	sdiv	r4, r4, r9
 801ca30:	f015 050f 	ands.w	r5, r5, #15
 801ca34:	bf18      	it	ne
 801ca36:	2501      	movne	r5, #1
 801ca38:	1b64      	subs	r4, r4, r5
 801ca3a:	e755      	b.n	801c8e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801ca3c:	4264      	negs	r4, r4
 801ca3e:	fb94 fef6 	sdiv	lr, r4, r6
 801ca42:	f1ce 0800 	rsb	r8, lr, #0
 801ca46:	fb06 441e 	mls	r4, r6, lr, r4
 801ca4a:	f8c0 8000 	str.w	r8, [r0]
 801ca4e:	6104      	str	r4, [r0, #16]
 801ca50:	2c00      	cmp	r4, #0
 801ca52:	f43f af6e 	beq.w	801c932 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801ca56:	ea6f 0e0e 	mvn.w	lr, lr
 801ca5a:	1b34      	subs	r4, r6, r4
 801ca5c:	f8c0 e000 	str.w	lr, [r0]
 801ca60:	e766      	b.n	801c930 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801ca62:	426d      	negs	r5, r5
 801ca64:	fb95 f4f6 	sdiv	r4, r5, r6
 801ca68:	f1c4 0e00 	rsb	lr, r4, #0
 801ca6c:	fb06 5514 	mls	r5, r6, r4, r5
 801ca70:	f8c0 e004 	str.w	lr, [r0, #4]
 801ca74:	6085      	str	r5, [r0, #8]
 801ca76:	2d00      	cmp	r5, #0
 801ca78:	f43f af64 	beq.w	801c944 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801ca7c:	43e4      	mvns	r4, r4
 801ca7e:	1b75      	subs	r5, r6, r5
 801ca80:	6044      	str	r4, [r0, #4]
 801ca82:	e75e      	b.n	801c942 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801ca84:	3d800000 	.word	0x3d800000

0801ca88 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ca88:	4602      	mov	r2, r0
 801ca8a:	b148      	cbz	r0, 801caa0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	b298      	uxth	r0, r3
 801ca90:	3301      	adds	r3, #1
 801ca92:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ca96:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ca9a:	2900      	cmp	r1, #0
 801ca9c:	d1f7      	bne.n	801ca8e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ca9e:	4770      	bx	lr
 801caa0:	4770      	bx	lr

0801caa2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801caa2:	b530      	push	{r4, r5, lr}
 801caa4:	4604      	mov	r4, r0
 801caa6:	b159      	cbz	r1, 801cac0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801caa8:	b148      	cbz	r0, 801cabe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801caaa:	2300      	movs	r3, #0
 801caac:	b298      	uxth	r0, r3
 801caae:	4282      	cmp	r2, r0
 801cab0:	d905      	bls.n	801cabe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cab2:	5ccd      	ldrb	r5, [r1, r3]
 801cab4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801cab8:	3301      	adds	r3, #1
 801caba:	2d00      	cmp	r5, #0
 801cabc:	d1f6      	bne.n	801caac <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801cabe:	bd30      	pop	{r4, r5, pc}
 801cac0:	4608      	mov	r0, r1
 801cac2:	e7fc      	b.n	801cabe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801cac4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801cac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cac6:	468c      	mov	ip, r1
 801cac8:	b08b      	sub	sp, #44	; 0x2c
 801caca:	2100      	movs	r1, #0
 801cacc:	ae01      	add	r6, sp, #4
 801cace:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cad2:	211f      	movs	r1, #31
 801cad4:	fbb0 f7f3 	udiv	r7, r0, r3
 801cad8:	fb03 0517 	mls	r5, r3, r7, r0
 801cadc:	4638      	mov	r0, r7
 801cade:	b2ec      	uxtb	r4, r5
 801cae0:	2d09      	cmp	r5, #9
 801cae2:	bfd4      	ite	le
 801cae4:	3430      	addle	r4, #48	; 0x30
 801cae6:	3457      	addgt	r4, #87	; 0x57
 801cae8:	b2e4      	uxtb	r4, r4
 801caea:	558c      	strb	r4, [r1, r6]
 801caec:	1e4c      	subs	r4, r1, #1
 801caee:	b92f      	cbnz	r7, 801cafc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801caf0:	4431      	add	r1, r6
 801caf2:	4660      	mov	r0, ip
 801caf4:	f7ff ffd5 	bl	801caa2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801caf8:	b00b      	add	sp, #44	; 0x2c
 801cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cafc:	4621      	mov	r1, r4
 801cafe:	e7e9      	b.n	801cad4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801cb00 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb02:	4607      	mov	r7, r0
 801cb04:	b08b      	sub	sp, #44	; 0x2c
 801cb06:	4608      	mov	r0, r1
 801cb08:	b341      	cbz	r1, 801cb5c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cb0a:	1e99      	subs	r1, r3, #2
 801cb0c:	2922      	cmp	r1, #34	; 0x22
 801cb0e:	d825      	bhi.n	801cb5c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801cb10:	2100      	movs	r1, #0
 801cb12:	463c      	mov	r4, r7
 801cb14:	261f      	movs	r6, #31
 801cb16:	f10d 0c04 	add.w	ip, sp, #4
 801cb1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801cb1e:	1e71      	subs	r1, r6, #1
 801cb20:	fb94 fef3 	sdiv	lr, r4, r3
 801cb24:	fb03 441e 	mls	r4, r3, lr, r4
 801cb28:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801cb2c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801cb30:	b2ec      	uxtb	r4, r5
 801cb32:	2d09      	cmp	r5, #9
 801cb34:	bfd4      	ite	le
 801cb36:	3430      	addle	r4, #48	; 0x30
 801cb38:	3457      	addgt	r4, #87	; 0x57
 801cb3a:	b2e4      	uxtb	r4, r4
 801cb3c:	f80c 4006 	strb.w	r4, [ip, r6]
 801cb40:	4674      	mov	r4, lr
 801cb42:	b96c      	cbnz	r4, 801cb60 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801cb44:	2f00      	cmp	r7, #0
 801cb46:	da05      	bge.n	801cb54 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801cb48:	ab0a      	add	r3, sp, #40	; 0x28
 801cb4a:	4419      	add	r1, r3
 801cb4c:	232d      	movs	r3, #45	; 0x2d
 801cb4e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801cb52:	1eb1      	subs	r1, r6, #2
 801cb54:	3101      	adds	r1, #1
 801cb56:	4461      	add	r1, ip
 801cb58:	f7ff ffa3 	bl	801caa2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cb5c:	b00b      	add	sp, #44	; 0x2c
 801cb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb60:	460e      	mov	r6, r1
 801cb62:	e7dc      	b.n	801cb1e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801cb64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb68:	b085      	sub	sp, #20
 801cb6a:	4691      	mov	r9, r2
 801cb6c:	6802      	ldr	r2, [r0, #0]
 801cb6e:	4688      	mov	r8, r1
 801cb70:	461c      	mov	r4, r3
 801cb72:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801cb76:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801cb7a:	4683      	mov	fp, r0
 801cb7c:	4610      	mov	r0, r2
 801cb7e:	9103      	str	r1, [sp, #12]
 801cb80:	9302      	str	r3, [sp, #8]
 801cb82:	9201      	str	r2, [sp, #4]
 801cb84:	f7ff ff80 	bl	801ca88 <_ZN8touchgfx7Unicode6strlenEPKt>
 801cb88:	f1b8 0f00 	cmp.w	r8, #0
 801cb8c:	bf0c      	ite	eq
 801cb8e:	4684      	moveq	ip, r0
 801cb90:	f100 0c01 	addne.w	ip, r0, #1
 801cb94:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801cb98:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801cb9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb9e:	fa1f fc8c 	uxth.w	ip, ip
 801cba2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cba4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801cba8:	9903      	ldr	r1, [sp, #12]
 801cbaa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cbae:	d041      	beq.n	801cc34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cbb0:	d834      	bhi.n	801cc1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801cbb2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801cbb6:	d059      	beq.n	801cc6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801cbb8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801cbbc:	d03a      	beq.n	801cc34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cbbe:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801cbc2:	d034      	beq.n	801cc2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cbc4:	2400      	movs	r4, #0
 801cbc6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801cbca:	3a01      	subs	r2, #1
 801cbcc:	b169      	cbz	r1, 801cbea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cbce:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cbd0:	458c      	cmp	ip, r1
 801cbd2:	da09      	bge.n	801cbe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cbd4:	eba1 010c 	sub.w	r1, r1, ip
 801cbd8:	b289      	uxth	r1, r1
 801cbda:	b933      	cbnz	r3, 801cbea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cbdc:	2e00      	cmp	r6, #0
 801cbde:	d051      	beq.n	801cc84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	d04f      	beq.n	801cc84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cbe4:	440c      	add	r4, r1
 801cbe6:	b2a4      	uxth	r4, r4
 801cbe8:	2100      	movs	r1, #0
 801cbea:	682b      	ldr	r3, [r5, #0]
 801cbec:	4293      	cmp	r3, r2
 801cbee:	da07      	bge.n	801cc00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cbf0:	f1b8 0f00 	cmp.w	r8, #0
 801cbf4:	d004      	beq.n	801cc00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cbf6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801cbfa:	682b      	ldr	r3, [r5, #0]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	602b      	str	r3, [r5, #0]
 801cc00:	2730      	movs	r7, #48	; 0x30
 801cc02:	2c00      	cmp	r4, #0
 801cc04:	d04e      	beq.n	801cca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc06:	682e      	ldr	r6, [r5, #0]
 801cc08:	3c01      	subs	r4, #1
 801cc0a:	42b2      	cmp	r2, r6
 801cc0c:	b2a4      	uxth	r4, r4
 801cc0e:	dd49      	ble.n	801cca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc10:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cc14:	682b      	ldr	r3, [r5, #0]
 801cc16:	3301      	adds	r3, #1
 801cc18:	602b      	str	r3, [r5, #0]
 801cc1a:	e7f2      	b.n	801cc02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801cc1c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801cc20:	d01d      	beq.n	801cc5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801cc22:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801cc26:	d002      	beq.n	801cc2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cc28:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801cc2c:	e7c9      	b.n	801cbc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801cc2e:	4684      	mov	ip, r0
 801cc30:	f04f 0800 	mov.w	r8, #0
 801cc34:	2c00      	cmp	r4, #0
 801cc36:	d0c6      	beq.n	801cbc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc38:	b947      	cbnz	r7, 801cc4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cc3a:	2801      	cmp	r0, #1
 801cc3c:	d106      	bne.n	801cc4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cc3e:	8814      	ldrh	r4, [r2, #0]
 801cc40:	2c30      	cmp	r4, #48	; 0x30
 801cc42:	bf02      	ittt	eq
 801cc44:	3202      	addeq	r2, #2
 801cc46:	4638      	moveq	r0, r7
 801cc48:	f8cb 2000 	streq.w	r2, [fp]
 801cc4c:	45bc      	cmp	ip, r7
 801cc4e:	da14      	bge.n	801cc7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801cc50:	b2bf      	uxth	r7, r7
 801cc52:	eba7 040c 	sub.w	r4, r7, ip
 801cc56:	46bc      	mov	ip, r7
 801cc58:	b2a4      	uxth	r4, r4
 801cc5a:	2600      	movs	r6, #0
 801cc5c:	e7b3      	b.n	801cbc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc5e:	4684      	mov	ip, r0
 801cc60:	b16c      	cbz	r4, 801cc7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801cc62:	42b8      	cmp	r0, r7
 801cc64:	dd00      	ble.n	801cc68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801cc66:	b2b8      	uxth	r0, r7
 801cc68:	2400      	movs	r4, #0
 801cc6a:	e003      	b.n	801cc74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801cc6c:	f04f 0c01 	mov.w	ip, #1
 801cc70:	2400      	movs	r4, #0
 801cc72:	4660      	mov	r0, ip
 801cc74:	4626      	mov	r6, r4
 801cc76:	46a0      	mov	r8, r4
 801cc78:	e7a5      	b.n	801cbc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc7a:	2400      	movs	r4, #0
 801cc7c:	e7ed      	b.n	801cc5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801cc7e:	4626      	mov	r6, r4
 801cc80:	46a0      	mov	r8, r4
 801cc82:	e7a0      	b.n	801cbc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cc84:	2900      	cmp	r1, #0
 801cc86:	d0b0      	beq.n	801cbea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cc88:	2720      	movs	r7, #32
 801cc8a:	682e      	ldr	r6, [r5, #0]
 801cc8c:	2900      	cmp	r1, #0
 801cc8e:	d0ac      	beq.n	801cbea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cc90:	3901      	subs	r1, #1
 801cc92:	4296      	cmp	r6, r2
 801cc94:	b289      	uxth	r1, r1
 801cc96:	daa7      	bge.n	801cbe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cc98:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cc9c:	682b      	ldr	r3, [r5, #0]
 801cc9e:	3301      	adds	r3, #1
 801cca0:	602b      	str	r3, [r5, #0]
 801cca2:	e7f2      	b.n	801cc8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801cca4:	b188      	cbz	r0, 801ccca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cca6:	682b      	ldr	r3, [r5, #0]
 801cca8:	3801      	subs	r0, #1
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	b280      	uxth	r0, r0
 801ccae:	dd0c      	ble.n	801ccca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ccb0:	f8db 3000 	ldr.w	r3, [fp]
 801ccb4:	1c9c      	adds	r4, r3, #2
 801ccb6:	f8cb 4000 	str.w	r4, [fp]
 801ccba:	881c      	ldrh	r4, [r3, #0]
 801ccbc:	682b      	ldr	r3, [r5, #0]
 801ccbe:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ccc2:	682b      	ldr	r3, [r5, #0]
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	602b      	str	r3, [r5, #0]
 801ccc8:	e7ec      	b.n	801cca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ccca:	2620      	movs	r6, #32
 801cccc:	b151      	cbz	r1, 801cce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ccce:	6828      	ldr	r0, [r5, #0]
 801ccd0:	3901      	subs	r1, #1
 801ccd2:	4282      	cmp	r2, r0
 801ccd4:	b289      	uxth	r1, r1
 801ccd6:	dd05      	ble.n	801cce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ccd8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ccdc:	682b      	ldr	r3, [r5, #0]
 801ccde:	3301      	adds	r3, #1
 801cce0:	602b      	str	r3, [r5, #0]
 801cce2:	e7f3      	b.n	801cccc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801cce4:	b005      	add	sp, #20
 801cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ccea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ccee:	2400      	movs	r4, #0
 801ccf0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ccf4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ccf8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ccfc:	8014      	strh	r4, [r2, #0]
 801ccfe:	701c      	strb	r4, [r3, #0]
 801cd00:	f888 4000 	strb.w	r4, [r8]
 801cd04:	f88c 4000 	strb.w	r4, [ip]
 801cd08:	f88e 4000 	strb.w	r4, [lr]
 801cd0c:	703c      	strb	r4, [r7, #0]
 801cd0e:	6804      	ldr	r4, [r0, #0]
 801cd10:	b1a4      	cbz	r4, 801cd3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cd12:	8824      	ldrh	r4, [r4, #0]
 801cd14:	f04f 0901 	mov.w	r9, #1
 801cd18:	b314      	cbz	r4, 801cd60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd1a:	2c2b      	cmp	r4, #43	; 0x2b
 801cd1c:	d001      	beq.n	801cd22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cd1e:	2c20      	cmp	r4, #32
 801cd20:	d110      	bne.n	801cd44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cd22:	8014      	strh	r4, [r2, #0]
 801cd24:	6804      	ldr	r4, [r0, #0]
 801cd26:	b10c      	cbz	r4, 801cd2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cd28:	3402      	adds	r4, #2
 801cd2a:	6004      	str	r4, [r0, #0]
 801cd2c:	680c      	ldr	r4, [r1, #0]
 801cd2e:	b10c      	cbz	r4, 801cd34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cd30:	3401      	adds	r4, #1
 801cd32:	600c      	str	r4, [r1, #0]
 801cd34:	6804      	ldr	r4, [r0, #0]
 801cd36:	b17c      	cbz	r4, 801cd58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cd38:	8824      	ldrh	r4, [r4, #0]
 801cd3a:	e7ed      	b.n	801cd18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cd3c:	680c      	ldr	r4, [r1, #0]
 801cd3e:	b17c      	cbz	r4, 801cd60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd40:	7824      	ldrb	r4, [r4, #0]
 801cd42:	e7e7      	b.n	801cd14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cd44:	2c2d      	cmp	r4, #45	; 0x2d
 801cd46:	d102      	bne.n	801cd4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cd48:	f883 9000 	strb.w	r9, [r3]
 801cd4c:	e7ea      	b.n	801cd24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cd4e:	2c23      	cmp	r4, #35	; 0x23
 801cd50:	d107      	bne.n	801cd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cd52:	f888 9000 	strb.w	r9, [r8]
 801cd56:	e7e5      	b.n	801cd24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cd58:	680c      	ldr	r4, [r1, #0]
 801cd5a:	b10c      	cbz	r4, 801cd60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd5c:	7824      	ldrb	r4, [r4, #0]
 801cd5e:	e7db      	b.n	801cd18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cd60:	2400      	movs	r4, #0
 801cd62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cd66:	2b09      	cmp	r3, #9
 801cd68:	d901      	bls.n	801cd6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cd6a:	2c2a      	cmp	r4, #42	; 0x2a
 801cd6c:	d122      	bne.n	801cdb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cd6e:	2301      	movs	r3, #1
 801cd70:	2c30      	cmp	r4, #48	; 0x30
 801cd72:	f88e 3000 	strb.w	r3, [lr]
 801cd76:	d10d      	bne.n	801cd94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cd78:	f88c 3000 	strb.w	r3, [ip]
 801cd7c:	6803      	ldr	r3, [r0, #0]
 801cd7e:	b10b      	cbz	r3, 801cd84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801cd80:	3302      	adds	r3, #2
 801cd82:	6003      	str	r3, [r0, #0]
 801cd84:	680b      	ldr	r3, [r1, #0]
 801cd86:	b10b      	cbz	r3, 801cd8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801cd88:	3301      	adds	r3, #1
 801cd8a:	600b      	str	r3, [r1, #0]
 801cd8c:	6803      	ldr	r3, [r0, #0]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d02f      	beq.n	801cdf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801cd92:	881c      	ldrh	r4, [r3, #0]
 801cd94:	2c2a      	cmp	r4, #42	; 0x2a
 801cd96:	d135      	bne.n	801ce04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cd98:	f04f 33ff 	mov.w	r3, #4294967295
 801cd9c:	6033      	str	r3, [r6, #0]
 801cd9e:	6803      	ldr	r3, [r0, #0]
 801cda0:	b10b      	cbz	r3, 801cda6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801cda2:	3302      	adds	r3, #2
 801cda4:	6003      	str	r3, [r0, #0]
 801cda6:	680b      	ldr	r3, [r1, #0]
 801cda8:	b10b      	cbz	r3, 801cdae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801cdaa:	3301      	adds	r3, #1
 801cdac:	600b      	str	r3, [r1, #0]
 801cdae:	6803      	ldr	r3, [r0, #0]
 801cdb0:	b31b      	cbz	r3, 801cdfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801cdb2:	881c      	ldrh	r4, [r3, #0]
 801cdb4:	2c2e      	cmp	r4, #46	; 0x2e
 801cdb6:	d11a      	bne.n	801cdee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cdb8:	2301      	movs	r3, #1
 801cdba:	703b      	strb	r3, [r7, #0]
 801cdbc:	6803      	ldr	r3, [r0, #0]
 801cdbe:	b10b      	cbz	r3, 801cdc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801cdc0:	3302      	adds	r3, #2
 801cdc2:	6003      	str	r3, [r0, #0]
 801cdc4:	680b      	ldr	r3, [r1, #0]
 801cdc6:	b10b      	cbz	r3, 801cdcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801cdc8:	3301      	adds	r3, #1
 801cdca:	600b      	str	r3, [r1, #0]
 801cdcc:	6803      	ldr	r3, [r0, #0]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d036      	beq.n	801ce40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801cdd2:	881b      	ldrh	r3, [r3, #0]
 801cdd4:	2b2a      	cmp	r3, #42	; 0x2a
 801cdd6:	d137      	bne.n	801ce48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 801cddc:	602b      	str	r3, [r5, #0]
 801cdde:	6803      	ldr	r3, [r0, #0]
 801cde0:	b10b      	cbz	r3, 801cde6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801cde2:	3302      	adds	r3, #2
 801cde4:	6003      	str	r3, [r0, #0]
 801cde6:	680b      	ldr	r3, [r1, #0]
 801cde8:	b10b      	cbz	r3, 801cdee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cdea:	3301      	adds	r3, #1
 801cdec:	600b      	str	r3, [r1, #0]
 801cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdf2:	680c      	ldr	r4, [r1, #0]
 801cdf4:	b134      	cbz	r4, 801ce04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cdf6:	7824      	ldrb	r4, [r4, #0]
 801cdf8:	e7cc      	b.n	801cd94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cdfa:	680b      	ldr	r3, [r1, #0]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d0f6      	beq.n	801cdee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce00:	781c      	ldrb	r4, [r3, #0]
 801ce02:	e7d7      	b.n	801cdb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce04:	2300      	movs	r3, #0
 801ce06:	220a      	movs	r2, #10
 801ce08:	6033      	str	r3, [r6, #0]
 801ce0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ce0e:	fa1f f38c 	uxth.w	r3, ip
 801ce12:	2b09      	cmp	r3, #9
 801ce14:	d8ce      	bhi.n	801cdb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce16:	6833      	ldr	r3, [r6, #0]
 801ce18:	fb02 c303 	mla	r3, r2, r3, ip
 801ce1c:	6033      	str	r3, [r6, #0]
 801ce1e:	6803      	ldr	r3, [r0, #0]
 801ce20:	b10b      	cbz	r3, 801ce26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ce22:	3302      	adds	r3, #2
 801ce24:	6003      	str	r3, [r0, #0]
 801ce26:	680b      	ldr	r3, [r1, #0]
 801ce28:	b10b      	cbz	r3, 801ce2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ce2a:	3301      	adds	r3, #1
 801ce2c:	600b      	str	r3, [r1, #0]
 801ce2e:	6803      	ldr	r3, [r0, #0]
 801ce30:	b10b      	cbz	r3, 801ce36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ce32:	881c      	ldrh	r4, [r3, #0]
 801ce34:	e7e9      	b.n	801ce0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce36:	680c      	ldr	r4, [r1, #0]
 801ce38:	2c00      	cmp	r4, #0
 801ce3a:	d0e6      	beq.n	801ce0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce3c:	7824      	ldrb	r4, [r4, #0]
 801ce3e:	e7e4      	b.n	801ce0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ce40:	680b      	ldr	r3, [r1, #0]
 801ce42:	b10b      	cbz	r3, 801ce48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ce44:	781b      	ldrb	r3, [r3, #0]
 801ce46:	e7c5      	b.n	801cdd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ce48:	2200      	movs	r2, #0
 801ce4a:	240a      	movs	r4, #10
 801ce4c:	602a      	str	r2, [r5, #0]
 801ce4e:	3b30      	subs	r3, #48	; 0x30
 801ce50:	682a      	ldr	r2, [r5, #0]
 801ce52:	b29e      	uxth	r6, r3
 801ce54:	2e09      	cmp	r6, #9
 801ce56:	d813      	bhi.n	801ce80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ce58:	fb04 3302 	mla	r3, r4, r2, r3
 801ce5c:	602b      	str	r3, [r5, #0]
 801ce5e:	6803      	ldr	r3, [r0, #0]
 801ce60:	b10b      	cbz	r3, 801ce66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ce62:	3302      	adds	r3, #2
 801ce64:	6003      	str	r3, [r0, #0]
 801ce66:	680b      	ldr	r3, [r1, #0]
 801ce68:	b10b      	cbz	r3, 801ce6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ce6a:	3301      	adds	r3, #1
 801ce6c:	600b      	str	r3, [r1, #0]
 801ce6e:	6803      	ldr	r3, [r0, #0]
 801ce70:	b10b      	cbz	r3, 801ce76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ce72:	881b      	ldrh	r3, [r3, #0]
 801ce74:	e7eb      	b.n	801ce4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ce76:	680b      	ldr	r3, [r1, #0]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d0e8      	beq.n	801ce4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	e7e6      	b.n	801ce4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ce80:	2a06      	cmp	r2, #6
 801ce82:	bfa8      	it	ge
 801ce84:	2206      	movge	r2, #6
 801ce86:	602a      	str	r2, [r5, #0]
 801ce88:	e7b1      	b.n	801cdee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ce8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ce8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce8e:	b0a3      	sub	sp, #140	; 0x8c
 801ce90:	2600      	movs	r6, #0
 801ce92:	4607      	mov	r7, r0
 801ce94:	4688      	mov	r8, r1
 801ce96:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801ce9a:	4631      	mov	r1, r6
 801ce9c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801ce9e:	4648      	mov	r0, r9
 801cea0:	960d      	str	r6, [sp, #52]	; 0x34
 801cea2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801cea6:	2242      	movs	r2, #66	; 0x42
 801cea8:	f00c f9d0 	bl	802924c <memset>
 801ceac:	b15f      	cbz	r7, 801cec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ceae:	f108 3aff 	add.w	sl, r8, #4294967295
 801ceb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ceb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ceb6:	b152      	cbz	r2, 801cece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ceb8:	8812      	ldrh	r2, [r2, #0]
 801ceba:	b10a      	cbz	r2, 801cec0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cebc:	459a      	cmp	sl, r3
 801cebe:	dc2e      	bgt.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801cec0:	2200      	movs	r2, #0
 801cec2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cec6:	4638      	mov	r0, r7
 801cec8:	b023      	add	sp, #140	; 0x8c
 801ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cece:	9a08      	ldr	r2, [sp, #32]
 801ced0:	2a00      	cmp	r2, #0
 801ced2:	d0f5      	beq.n	801cec0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ced4:	7812      	ldrb	r2, [r2, #0]
 801ced6:	e7f0      	b.n	801ceba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ced8:	2d00      	cmp	r5, #0
 801ceda:	d0ea      	beq.n	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cedc:	782a      	ldrb	r2, [r5, #0]
 801cede:	b142      	cbz	r2, 801cef2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801cee0:	2a25      	cmp	r2, #37	; 0x25
 801cee2:	d001      	beq.n	801cee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801cee4:	459a      	cmp	sl, r3
 801cee6:	dc08      	bgt.n	801cefa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801cee8:	f1bb 0f00 	cmp.w	fp, #0
 801ceec:	d121      	bne.n	801cf32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ceee:	2d00      	cmp	r5, #0
 801cef0:	d0df      	beq.n	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cef2:	782a      	ldrb	r2, [r5, #0]
 801cef4:	f04f 0b00 	mov.w	fp, #0
 801cef8:	e01d      	b.n	801cf36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cefa:	f1bb 0f00 	cmp.w	fp, #0
 801cefe:	d077      	beq.n	801cff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801cf00:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf04:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cf08:	f1bb 0f00 	cmp.w	fp, #0
 801cf0c:	d002      	beq.n	801cf14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cf0e:	f10b 0202 	add.w	r2, fp, #2
 801cf12:	9209      	str	r2, [sp, #36]	; 0x24
 801cf14:	b10d      	cbz	r5, 801cf1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cf16:	3501      	adds	r5, #1
 801cf18:	9508      	str	r5, [sp, #32]
 801cf1a:	3301      	adds	r3, #1
 801cf1c:	930d      	str	r3, [sp, #52]	; 0x34
 801cf1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf20:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cf24:	f1bb 0f00 	cmp.w	fp, #0
 801cf28:	d0d6      	beq.n	801ced8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cf2a:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf2e:	2a00      	cmp	r2, #0
 801cf30:	d1d6      	bne.n	801cee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cf32:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf36:	2a00      	cmp	r2, #0
 801cf38:	d0bb      	beq.n	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf3a:	459a      	cmp	sl, r3
 801cf3c:	ddb9      	ble.n	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf3e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801cf42:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801cf46:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801cf4a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801cf4e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801cf52:	960e      	str	r6, [sp, #56]	; 0x38
 801cf54:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801cf58:	960f      	str	r6, [sp, #60]	; 0x3c
 801cf5a:	f1bb 0f00 	cmp.w	fp, #0
 801cf5e:	d002      	beq.n	801cf66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cf60:	f10b 0302 	add.w	r3, fp, #2
 801cf64:	9309      	str	r3, [sp, #36]	; 0x24
 801cf66:	b10d      	cbz	r5, 801cf6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cf68:	1c6b      	adds	r3, r5, #1
 801cf6a:	9308      	str	r3, [sp, #32]
 801cf6c:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf6e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801cf72:	a908      	add	r1, sp, #32
 801cf74:	a809      	add	r0, sp, #36	; 0x24
 801cf76:	9305      	str	r3, [sp, #20]
 801cf78:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801cf7c:	9304      	str	r3, [sp, #16]
 801cf7e:	ab0e      	add	r3, sp, #56	; 0x38
 801cf80:	9303      	str	r3, [sp, #12]
 801cf82:	ab0c      	add	r3, sp, #48	; 0x30
 801cf84:	9302      	str	r3, [sp, #8]
 801cf86:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801cf8a:	9301      	str	r3, [sp, #4]
 801cf8c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801cf90:	9300      	str	r3, [sp, #0]
 801cf92:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801cf96:	f7ff fea8 	bl	801ccea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801cf9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	bfbf      	itttt	lt
 801cfa0:	6823      	ldrlt	r3, [r4, #0]
 801cfa2:	3404      	addlt	r4, #4
 801cfa4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cfa8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	bfbe      	ittt	lt
 801cfb0:	6823      	ldrlt	r3, [r4, #0]
 801cfb2:	3404      	addlt	r4, #4
 801cfb4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cfb8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cfbc:	bfb8      	it	lt
 801cfbe:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801cfc0:	b1d9      	cbz	r1, 801cffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801cfc2:	880b      	ldrh	r3, [r1, #0]
 801cfc4:	2b69      	cmp	r3, #105	; 0x69
 801cfc6:	d01f      	beq.n	801d008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cfc8:	d82f      	bhi.n	801d02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801cfca:	2b58      	cmp	r3, #88	; 0x58
 801cfcc:	d01c      	beq.n	801d008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cfce:	d818      	bhi.n	801d002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801cfd0:	2b25      	cmp	r3, #37	; 0x25
 801cfd2:	d034      	beq.n	801d03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801cfd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfd6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801cfda:	f1bb 0f00 	cmp.w	fp, #0
 801cfde:	f000 80b7 	beq.w	801d150 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801cfe2:	f8bb 5000 	ldrh.w	r5, [fp]
 801cfe6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801cfea:	3301      	adds	r3, #1
 801cfec:	930d      	str	r3, [sp, #52]	; 0x34
 801cfee:	e029      	b.n	801d044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801cff0:	b10d      	cbz	r5, 801cff6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801cff2:	782a      	ldrb	r2, [r5, #0]
 801cff4:	e786      	b.n	801cf04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801cff6:	462a      	mov	r2, r5
 801cff8:	e784      	b.n	801cf04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801cffa:	2a00      	cmp	r2, #0
 801cffc:	d0ea      	beq.n	801cfd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801cffe:	7813      	ldrb	r3, [r2, #0]
 801d000:	e7e0      	b.n	801cfc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d002:	3b63      	subs	r3, #99	; 0x63
 801d004:	2b01      	cmp	r3, #1
 801d006:	d8e5      	bhi.n	801cfd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d008:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d00c:	b329      	cbz	r1, 801d05a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d00e:	880b      	ldrh	r3, [r1, #0]
 801d010:	2b69      	cmp	r3, #105	; 0x69
 801d012:	d063      	beq.n	801d0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d014:	d825      	bhi.n	801d062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d016:	2b63      	cmp	r3, #99	; 0x63
 801d018:	d038      	beq.n	801d08c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d01a:	2b64      	cmp	r3, #100	; 0x64
 801d01c:	d05e      	beq.n	801d0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d01e:	2b58      	cmp	r3, #88	; 0x58
 801d020:	d07a      	beq.n	801d118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d022:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d026:	4625      	mov	r5, r4
 801d028:	e036      	b.n	801d098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d02a:	2b73      	cmp	r3, #115	; 0x73
 801d02c:	d0ec      	beq.n	801d008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d02e:	d802      	bhi.n	801d036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d030:	2b6f      	cmp	r3, #111	; 0x6f
 801d032:	d1cf      	bne.n	801cfd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d034:	e7e8      	b.n	801d008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d036:	2b75      	cmp	r3, #117	; 0x75
 801d038:	d0e6      	beq.n	801d008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d03a:	2b78      	cmp	r3, #120	; 0x78
 801d03c:	e7f9      	b.n	801d032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d03e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d040:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d046:	b10b      	cbz	r3, 801d04c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d048:	3302      	adds	r3, #2
 801d04a:	9309      	str	r3, [sp, #36]	; 0x24
 801d04c:	9b08      	ldr	r3, [sp, #32]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	f43f af2f 	beq.w	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d054:	3301      	adds	r3, #1
 801d056:	9308      	str	r3, [sp, #32]
 801d058:	e72b      	b.n	801ceb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d05a:	2a00      	cmp	r2, #0
 801d05c:	d0e1      	beq.n	801d022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d05e:	7813      	ldrb	r3, [r2, #0]
 801d060:	e7d6      	b.n	801d010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d062:	2b73      	cmp	r3, #115	; 0x73
 801d064:	d036      	beq.n	801d0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d066:	d807      	bhi.n	801d078 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d068:	2b6f      	cmp	r3, #111	; 0x6f
 801d06a:	d1da      	bne.n	801d022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d06c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d06e:	1d25      	adds	r5, r4, #4
 801d070:	2308      	movs	r3, #8
 801d072:	eba8 0202 	sub.w	r2, r8, r2
 801d076:	e049      	b.n	801d10c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d078:	2b75      	cmp	r3, #117	; 0x75
 801d07a:	d042      	beq.n	801d102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d07c:	2b78      	cmp	r3, #120	; 0x78
 801d07e:	d1d0      	bne.n	801d022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d082:	1d25      	adds	r5, r4, #4
 801d084:	2310      	movs	r3, #16
 801d086:	eba8 0202 	sub.w	r2, r8, r2
 801d08a:	e03f      	b.n	801d10c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d08c:	6823      	ldr	r3, [r4, #0]
 801d08e:	1d25      	adds	r5, r4, #4
 801d090:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d094:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d09a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d051      	beq.n	801d146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d0a2:	881a      	ldrh	r2, [r3, #0]
 801d0a4:	a80d      	add	r0, sp, #52	; 0x34
 801d0a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d0aa:	462c      	mov	r4, r5
 801d0ac:	9005      	str	r0, [sp, #20]
 801d0ae:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d0b2:	9004      	str	r0, [sp, #16]
 801d0b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d0b6:	9003      	str	r0, [sp, #12]
 801d0b8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d0bc:	9002      	str	r0, [sp, #8]
 801d0be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d0c0:	9001      	str	r0, [sp, #4]
 801d0c2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d0c6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d0ca:	9000      	str	r0, [sp, #0]
 801d0cc:	a810      	add	r0, sp, #64	; 0x40
 801d0ce:	f7ff fd49 	bl	801cb64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d0d2:	e7b7      	b.n	801d044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d0d4:	1d25      	adds	r5, r4, #4
 801d0d6:	6823      	ldr	r3, [r4, #0]
 801d0d8:	9310      	str	r3, [sp, #64]	; 0x40
 801d0da:	e7dd      	b.n	801d098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d0dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d0de:	230a      	movs	r3, #10
 801d0e0:	4649      	mov	r1, r9
 801d0e2:	6820      	ldr	r0, [r4, #0]
 801d0e4:	eba8 0202 	sub.w	r2, r8, r2
 801d0e8:	1d25      	adds	r5, r4, #4
 801d0ea:	b292      	uxth	r2, r2
 801d0ec:	f7ff fd08 	bl	801cb00 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d0f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d0f4:	2b2d      	cmp	r3, #45	; 0x2d
 801d0f6:	d1cf      	bne.n	801d098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d0f8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0fe:	3302      	adds	r3, #2
 801d100:	e7ea      	b.n	801d0d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d104:	1d25      	adds	r5, r4, #4
 801d106:	230a      	movs	r3, #10
 801d108:	eba8 0202 	sub.w	r2, r8, r2
 801d10c:	b292      	uxth	r2, r2
 801d10e:	4649      	mov	r1, r9
 801d110:	6820      	ldr	r0, [r4, #0]
 801d112:	f7ff fcd7 	bl	801cac4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d116:	e7bf      	b.n	801d098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d11a:	2310      	movs	r3, #16
 801d11c:	4649      	mov	r1, r9
 801d11e:	6820      	ldr	r0, [r4, #0]
 801d120:	eba8 0202 	sub.w	r2, r8, r2
 801d124:	1d25      	adds	r5, r4, #4
 801d126:	b292      	uxth	r2, r2
 801d128:	f7ff fccc 	bl	801cac4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d12c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d130:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d134:	2b00      	cmp	r3, #0
 801d136:	d0af      	beq.n	801d098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d138:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d13c:	2919      	cmp	r1, #25
 801d13e:	d8f7      	bhi.n	801d130 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d140:	3b20      	subs	r3, #32
 801d142:	8013      	strh	r3, [r2, #0]
 801d144:	e7f4      	b.n	801d130 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d146:	9a08      	ldr	r2, [sp, #32]
 801d148:	2a00      	cmp	r2, #0
 801d14a:	d0ab      	beq.n	801d0a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d14c:	7812      	ldrb	r2, [r2, #0]
 801d14e:	e7a9      	b.n	801d0a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d150:	2d00      	cmp	r5, #0
 801d152:	f43f af48 	beq.w	801cfe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d156:	782d      	ldrb	r5, [r5, #0]
 801d158:	e745      	b.n	801cfe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d15a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d15a:	b507      	push	{r0, r1, r2, lr}
 801d15c:	9300      	str	r3, [sp, #0]
 801d15e:	4613      	mov	r3, r2
 801d160:	2200      	movs	r2, #0
 801d162:	f7ff fe92 	bl	801ce8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d166:	b003      	add	sp, #12
 801d168:	f85d fb04 	ldr.w	pc, [sp], #4

0801d16c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d16c:	b40c      	push	{r2, r3}
 801d16e:	b507      	push	{r0, r1, r2, lr}
 801d170:	ab04      	add	r3, sp, #16
 801d172:	f853 2b04 	ldr.w	r2, [r3], #4
 801d176:	9301      	str	r3, [sp, #4]
 801d178:	f7ff ffef 	bl	801d15a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d17c:	b003      	add	sp, #12
 801d17e:	f85d eb04 	ldr.w	lr, [sp], #4
 801d182:	b002      	add	sp, #8
 801d184:	4770      	bx	lr
	...

0801d188 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d188:	4b01      	ldr	r3, [pc, #4]	; (801d190 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d18a:	6018      	str	r0, [r3, #0]
 801d18c:	4770      	bx	lr
 801d18e:	bf00      	nop
 801d190:	20015334 	.word	0x20015334

0801d194 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d194:	4b06      	ldr	r3, [pc, #24]	; (801d1b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d196:	881a      	ldrh	r2, [r3, #0]
 801d198:	4282      	cmp	r2, r0
 801d19a:	d807      	bhi.n	801d1ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d19c:	4b05      	ldr	r3, [pc, #20]	; (801d1b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d19e:	881b      	ldrh	r3, [r3, #0]
 801d1a0:	4413      	add	r3, r2
 801d1a2:	4298      	cmp	r0, r3
 801d1a4:	bfac      	ite	ge
 801d1a6:	2000      	movge	r0, #0
 801d1a8:	2001      	movlt	r0, #1
 801d1aa:	4770      	bx	lr
 801d1ac:	2000      	movs	r0, #0
 801d1ae:	4770      	bx	lr
 801d1b0:	20015354 	.word	0x20015354
 801d1b4:	20015358 	.word	0x20015358

0801d1b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d1b8:	b508      	push	{r3, lr}
 801d1ba:	4601      	mov	r1, r0
 801d1bc:	f7ff ffea 	bl	801d194 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d1c0:	b118      	cbz	r0, 801d1ca <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d1c2:	4b02      	ldr	r3, [pc, #8]	; (801d1cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d1ca:	bd08      	pop	{r3, pc}
 801d1cc:	20015338 	.word	0x20015338

0801d1d0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1d2:	4c24      	ldr	r4, [pc, #144]	; (801d264 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801d1d4:	6823      	ldr	r3, [r4, #0]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d042      	beq.n	801d260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d1da:	4a23      	ldr	r2, [pc, #140]	; (801d268 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801d1dc:	4d23      	ldr	r5, [pc, #140]	; (801d26c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801d1de:	8811      	ldrh	r1, [r2, #0]
 801d1e0:	f8b5 c000 	ldrh.w	ip, [r5]
 801d1e4:	4822      	ldr	r0, [pc, #136]	; (801d270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801d1e6:	4461      	add	r1, ip
 801d1e8:	1c4a      	adds	r2, r1, #1
 801d1ea:	008f      	lsls	r7, r1, #2
 801d1ec:	f022 0201 	bic.w	r2, r2, #1
 801d1f0:	19de      	adds	r6, r3, r7
 801d1f2:	0412      	lsls	r2, r2, #16
 801d1f4:	6006      	str	r6, [r0, #0]
 801d1f6:	4e1f      	ldr	r6, [pc, #124]	; (801d274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801d1f8:	0c12      	lsrs	r2, r2, #16
 801d1fa:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801d1fe:	19da      	adds	r2, r3, r7
 801d200:	6032      	str	r2, [r6, #0]
 801d202:	220e      	movs	r2, #14
 801d204:	fb02 f20c 	mul.w	r2, r2, ip
 801d208:	3203      	adds	r2, #3
 801d20a:	f022 0203 	bic.w	r2, r2, #3
 801d20e:	443a      	add	r2, r7
 801d210:	4f19      	ldr	r7, [pc, #100]	; (801d278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d212:	4413      	add	r3, r2
 801d214:	603b      	str	r3, [r7, #0]
 801d216:	2300      	movs	r3, #0
 801d218:	4f18      	ldr	r7, [pc, #96]	; (801d27c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d21a:	469c      	mov	ip, r3
 801d21c:	803b      	strh	r3, [r7, #0]
 801d21e:	4f18      	ldr	r7, [pc, #96]	; (801d280 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d220:	683f      	ldr	r7, [r7, #0]
 801d222:	1aba      	subs	r2, r7, r2
 801d224:	4f17      	ldr	r7, [pc, #92]	; (801d284 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d226:	603a      	str	r2, [r7, #0]
 801d228:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801d22c:	4a16      	ldr	r2, [pc, #88]	; (801d288 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d22e:	8013      	strh	r3, [r2, #0]
 801d230:	428b      	cmp	r3, r1
 801d232:	d10d      	bne.n	801d250 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801d234:	882d      	ldrh	r5, [r5, #0]
 801d236:	2300      	movs	r3, #0
 801d238:	6830      	ldr	r0, [r6, #0]
 801d23a:	240e      	movs	r4, #14
 801d23c:	429d      	cmp	r5, r3
 801d23e:	d90f      	bls.n	801d260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d240:	fb04 0203 	mla	r2, r4, r3, r0
 801d244:	3301      	adds	r3, #1
 801d246:	7b11      	ldrb	r1, [r2, #12]
 801d248:	f36f 1145 	bfc	r1, #5, #1
 801d24c:	7311      	strb	r1, [r2, #12]
 801d24e:	e7f5      	b.n	801d23c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801d250:	6822      	ldr	r2, [r4, #0]
 801d252:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d256:	6802      	ldr	r2, [r0, #0]
 801d258:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801d25c:	3301      	adds	r3, #1
 801d25e:	e7e7      	b.n	801d230 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d262:	bf00      	nop
 801d264:	20015338 	.word	0x20015338
 801d268:	20015354 	.word	0x20015354
 801d26c:	20015358 	.word	0x20015358
 801d270:	2001534c 	.word	0x2001534c
 801d274:	2001533c 	.word	0x2001533c
 801d278:	20015344 	.word	0x20015344
 801d27c:	20015356 	.word	0x20015356
 801d280:	20015340 	.word	0x20015340
 801d284:	20015350 	.word	0x20015350
 801d288:	20015348 	.word	0x20015348

0801d28c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d28c:	4b06      	ldr	r3, [pc, #24]	; (801d2a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	b943      	cbnz	r3, 801d2a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d292:	b139      	cbz	r1, 801d2a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d294:	4b05      	ldr	r3, [pc, #20]	; (801d2ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801d296:	801a      	strh	r2, [r3, #0]
 801d298:	4b05      	ldr	r3, [pc, #20]	; (801d2b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801d29a:	6019      	str	r1, [r3, #0]
 801d29c:	4b05      	ldr	r3, [pc, #20]	; (801d2b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801d29e:	6018      	str	r0, [r3, #0]
 801d2a0:	f7ff bf96 	b.w	801d1d0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d2a4:	4770      	bx	lr
 801d2a6:	bf00      	nop
 801d2a8:	20015344 	.word	0x20015344
 801d2ac:	20015358 	.word	0x20015358
 801d2b0:	20015340 	.word	0x20015340
 801d2b4:	20015338 	.word	0x20015338

0801d2b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d2b8:	b470      	push	{r4, r5, r6}
 801d2ba:	4c07      	ldr	r4, [pc, #28]	; (801d2d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d2bc:	4605      	mov	r5, r0
 801d2be:	4610      	mov	r0, r2
 801d2c0:	9a03      	ldr	r2, [sp, #12]
 801d2c2:	6826      	ldr	r6, [r4, #0]
 801d2c4:	b936      	cbnz	r6, 801d2d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d2c6:	6025      	str	r5, [r4, #0]
 801d2c8:	4c04      	ldr	r4, [pc, #16]	; (801d2dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d2ca:	8021      	strh	r1, [r4, #0]
 801d2cc:	4619      	mov	r1, r3
 801d2ce:	bc70      	pop	{r4, r5, r6}
 801d2d0:	f7ff bfdc 	b.w	801d28c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d2d4:	bc70      	pop	{r4, r5, r6}
 801d2d6:	4770      	bx	lr
 801d2d8:	2001535c 	.word	0x2001535c
 801d2dc:	20015354 	.word	0x20015354

0801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d2e0:	4a12      	ldr	r2, [pc, #72]	; (801d32c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801d2e2:	8803      	ldrh	r3, [r0, #0]
 801d2e4:	8812      	ldrh	r2, [r2, #0]
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	d207      	bcs.n	801d2fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801d2ea:	4a11      	ldr	r2, [pc, #68]	; (801d330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d2ec:	2114      	movs	r1, #20
 801d2ee:	6812      	ldr	r2, [r2, #0]
 801d2f0:	fb01 2303 	mla	r3, r1, r3, r2
 801d2f4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d2f8:	4770      	bx	lr
 801d2fa:	490e      	ldr	r1, [pc, #56]	; (801d334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d2fc:	8809      	ldrh	r1, [r1, #0]
 801d2fe:	4411      	add	r1, r2
 801d300:	428b      	cmp	r3, r1
 801d302:	da04      	bge.n	801d30e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801d304:	1a9b      	subs	r3, r3, r2
 801d306:	4a0c      	ldr	r2, [pc, #48]	; (801d338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d308:	210e      	movs	r1, #14
 801d30a:	6812      	ldr	r2, [r2, #0]
 801d30c:	e7f0      	b.n	801d2f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801d30e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d312:	4293      	cmp	r3, r2
 801d314:	d108      	bne.n	801d328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801d316:	4b09      	ldr	r3, [pc, #36]	; (801d33c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d318:	781b      	ldrb	r3, [r3, #0]
 801d31a:	b91b      	cbnz	r3, 801d324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801d31c:	4b08      	ldr	r3, [pc, #32]	; (801d340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d31e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d322:	4770      	bx	lr
 801d324:	4b07      	ldr	r3, [pc, #28]	; (801d344 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d326:	e7fa      	b.n	801d31e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801d328:	2000      	movs	r0, #0
 801d32a:	4770      	bx	lr
 801d32c:	20015354 	.word	0x20015354
 801d330:	2001535c 	.word	0x2001535c
 801d334:	20015358 	.word	0x20015358
 801d338:	2001533c 	.word	0x2001533c
 801d33c:	200152cc 	.word	0x200152cc
 801d340:	200152ce 	.word	0x200152ce
 801d344:	200152d0 	.word	0x200152d0

0801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d348:	4a12      	ldr	r2, [pc, #72]	; (801d394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801d34a:	8803      	ldrh	r3, [r0, #0]
 801d34c:	8812      	ldrh	r2, [r2, #0]
 801d34e:	4293      	cmp	r3, r2
 801d350:	d207      	bcs.n	801d362 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801d352:	4a11      	ldr	r2, [pc, #68]	; (801d398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d354:	2114      	movs	r1, #20
 801d356:	6812      	ldr	r2, [r2, #0]
 801d358:	fb01 2303 	mla	r3, r1, r3, r2
 801d35c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d360:	4770      	bx	lr
 801d362:	490e      	ldr	r1, [pc, #56]	; (801d39c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d364:	8809      	ldrh	r1, [r1, #0]
 801d366:	4411      	add	r1, r2
 801d368:	428b      	cmp	r3, r1
 801d36a:	da04      	bge.n	801d376 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801d36c:	1a9b      	subs	r3, r3, r2
 801d36e:	4a0c      	ldr	r2, [pc, #48]	; (801d3a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d370:	210e      	movs	r1, #14
 801d372:	6812      	ldr	r2, [r2, #0]
 801d374:	e7f0      	b.n	801d358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801d376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d37a:	4293      	cmp	r3, r2
 801d37c:	d108      	bne.n	801d390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801d37e:	4b09      	ldr	r3, [pc, #36]	; (801d3a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d380:	781b      	ldrb	r3, [r3, #0]
 801d382:	b91b      	cbnz	r3, 801d38c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801d384:	4b08      	ldr	r3, [pc, #32]	; (801d3a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d386:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d38a:	4770      	bx	lr
 801d38c:	4b07      	ldr	r3, [pc, #28]	; (801d3ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d38e:	e7fa      	b.n	801d386 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801d390:	2000      	movs	r0, #0
 801d392:	4770      	bx	lr
 801d394:	20015354 	.word	0x20015354
 801d398:	2001535c 	.word	0x2001535c
 801d39c:	20015358 	.word	0x20015358
 801d3a0:	2001533c 	.word	0x2001533c
 801d3a4:	200152cc 	.word	0x200152cc
 801d3a8:	200152d0 	.word	0x200152d0
 801d3ac:	200152ce 	.word	0x200152ce

0801d3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d3b0:	4a1f      	ldr	r2, [pc, #124]	; (801d430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801d3b2:	b510      	push	{r4, lr}
 801d3b4:	880b      	ldrh	r3, [r1, #0]
 801d3b6:	8812      	ldrh	r2, [r2, #0]
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	d213      	bcs.n	801d3e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801d3bc:	4a1d      	ldr	r2, [pc, #116]	; (801d434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801d3be:	2114      	movs	r1, #20
 801d3c0:	6812      	ldr	r2, [r2, #0]
 801d3c2:	fb01 2303 	mla	r3, r1, r3, r2
 801d3c6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d3ca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d3ce:	8a1a      	ldrh	r2, [r3, #16]
 801d3d0:	8a5b      	ldrh	r3, [r3, #18]
 801d3d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d3d6:	8004      	strh	r4, [r0, #0]
 801d3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3dc:	8041      	strh	r1, [r0, #2]
 801d3de:	8082      	strh	r2, [r0, #4]
 801d3e0:	80c3      	strh	r3, [r0, #6]
 801d3e2:	e00e      	b.n	801d402 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801d3e4:	4914      	ldr	r1, [pc, #80]	; (801d438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801d3e6:	8809      	ldrh	r1, [r1, #0]
 801d3e8:	4411      	add	r1, r2
 801d3ea:	428b      	cmp	r3, r1
 801d3ec:	da0a      	bge.n	801d404 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801d3ee:	1a9b      	subs	r3, r3, r2
 801d3f0:	4a12      	ldr	r2, [pc, #72]	; (801d43c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801d3f2:	210e      	movs	r1, #14
 801d3f4:	6812      	ldr	r2, [r2, #0]
 801d3f6:	fb01 2303 	mla	r3, r1, r3, r2
 801d3fa:	681a      	ldr	r2, [r3, #0]
 801d3fc:	6002      	str	r2, [r0, #0]
 801d3fe:	685a      	ldr	r2, [r3, #4]
 801d400:	6042      	str	r2, [r0, #4]
 801d402:	bd10      	pop	{r4, pc}
 801d404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d408:	4293      	cmp	r3, r2
 801d40a:	d10b      	bne.n	801d424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801d40c:	4b0c      	ldr	r3, [pc, #48]	; (801d440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d40e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d412:	4b0c      	ldr	r3, [pc, #48]	; (801d444 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d414:	8081      	strh	r1, [r0, #4]
 801d416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d41a:	2300      	movs	r3, #0
 801d41c:	80c2      	strh	r2, [r0, #6]
 801d41e:	8003      	strh	r3, [r0, #0]
 801d420:	8043      	strh	r3, [r0, #2]
 801d422:	e7ee      	b.n	801d402 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801d424:	2300      	movs	r3, #0
 801d426:	8003      	strh	r3, [r0, #0]
 801d428:	8043      	strh	r3, [r0, #2]
 801d42a:	8083      	strh	r3, [r0, #4]
 801d42c:	e7d8      	b.n	801d3e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d42e:	bf00      	nop
 801d430:	20015354 	.word	0x20015354
 801d434:	2001535c 	.word	0x2001535c
 801d438:	20015358 	.word	0x20015358
 801d43c:	2001533c 	.word	0x2001533c
 801d440:	200152c8 	.word	0x200152c8
 801d444:	200152ca 	.word	0x200152ca

0801d448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d448:	4a17      	ldr	r2, [pc, #92]	; (801d4a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d44a:	8803      	ldrh	r3, [r0, #0]
 801d44c:	8812      	ldrh	r2, [r2, #0]
 801d44e:	4293      	cmp	r3, r2
 801d450:	d213      	bcs.n	801d47a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801d452:	4a16      	ldr	r2, [pc, #88]	; (801d4ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d454:	2114      	movs	r1, #20
 801d456:	6812      	ldr	r2, [r2, #0]
 801d458:	fb01 2303 	mla	r3, r1, r3, r2
 801d45c:	8a1a      	ldrh	r2, [r3, #16]
 801d45e:	8919      	ldrh	r1, [r3, #8]
 801d460:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d464:	428a      	cmp	r2, r1
 801d466:	db1d      	blt.n	801d4a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d468:	8a58      	ldrh	r0, [r3, #18]
 801d46a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d46e:	895b      	ldrh	r3, [r3, #10]
 801d470:	4298      	cmp	r0, r3
 801d472:	bfac      	ite	ge
 801d474:	2000      	movge	r0, #0
 801d476:	2001      	movlt	r0, #1
 801d478:	4770      	bx	lr
 801d47a:	490d      	ldr	r1, [pc, #52]	; (801d4b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d47c:	8809      	ldrh	r1, [r1, #0]
 801d47e:	4411      	add	r1, r2
 801d480:	428b      	cmp	r3, r1
 801d482:	da0d      	bge.n	801d4a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d484:	1a9b      	subs	r3, r3, r2
 801d486:	4a0b      	ldr	r2, [pc, #44]	; (801d4b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d488:	210e      	movs	r1, #14
 801d48a:	6812      	ldr	r2, [r2, #0]
 801d48c:	fb01 2303 	mla	r3, r1, r3, r2
 801d490:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d494:	891a      	ldrh	r2, [r3, #8]
 801d496:	4291      	cmp	r1, r2
 801d498:	db04      	blt.n	801d4a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d49a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d49e:	e7e6      	b.n	801d46e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801d4a0:	2000      	movs	r0, #0
 801d4a2:	4770      	bx	lr
 801d4a4:	2001      	movs	r0, #1
 801d4a6:	4770      	bx	lr
 801d4a8:	20015354 	.word	0x20015354
 801d4ac:	2001535c 	.word	0x2001535c
 801d4b0:	20015358 	.word	0x20015358
 801d4b4:	2001533c 	.word	0x2001533c

0801d4b8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d4b8:	4a12      	ldr	r2, [pc, #72]	; (801d504 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d4ba:	8803      	ldrh	r3, [r0, #0]
 801d4bc:	8811      	ldrh	r1, [r2, #0]
 801d4be:	428b      	cmp	r3, r1
 801d4c0:	d20b      	bcs.n	801d4da <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d4c2:	4a11      	ldr	r2, [pc, #68]	; (801d508 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d4c4:	6812      	ldr	r2, [r2, #0]
 801d4c6:	b112      	cbz	r2, 801d4ce <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d4c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d4cc:	b9c0      	cbnz	r0, 801d500 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d4ce:	4a0f      	ldr	r2, [pc, #60]	; (801d50c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d4d0:	6811      	ldr	r1, [r2, #0]
 801d4d2:	2214      	movs	r2, #20
 801d4d4:	4353      	muls	r3, r2
 801d4d6:	58c8      	ldr	r0, [r1, r3]
 801d4d8:	4770      	bx	lr
 801d4da:	4a0d      	ldr	r2, [pc, #52]	; (801d510 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d4dc:	8812      	ldrh	r2, [r2, #0]
 801d4de:	440a      	add	r2, r1
 801d4e0:	4293      	cmp	r3, r2
 801d4e2:	da04      	bge.n	801d4ee <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d4e4:	4a08      	ldr	r2, [pc, #32]	; (801d508 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d4e6:	6812      	ldr	r2, [r2, #0]
 801d4e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d4ec:	4770      	bx	lr
 801d4ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d4f2:	4293      	cmp	r3, r2
 801d4f4:	d103      	bne.n	801d4fe <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d4f6:	4b07      	ldr	r3, [pc, #28]	; (801d514 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d4fc:	4770      	bx	lr
 801d4fe:	2000      	movs	r0, #0
 801d500:	4770      	bx	lr
 801d502:	bf00      	nop
 801d504:	20015354 	.word	0x20015354
 801d508:	20015338 	.word	0x20015338
 801d50c:	2001535c 	.word	0x2001535c
 801d510:	20015358 	.word	0x20015358
 801d514:	200152d4 	.word	0x200152d4

0801d518 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d518:	4b24      	ldr	r3, [pc, #144]	; (801d5ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d51a:	8802      	ldrh	r2, [r0, #0]
 801d51c:	8818      	ldrh	r0, [r3, #0]
 801d51e:	4282      	cmp	r2, r0
 801d520:	d221      	bcs.n	801d566 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d522:	4b23      	ldr	r3, [pc, #140]	; (801d5b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d524:	6819      	ldr	r1, [r3, #0]
 801d526:	2314      	movs	r3, #20
 801d528:	fb03 1302 	mla	r3, r3, r2, r1
 801d52c:	6858      	ldr	r0, [r3, #4]
 801d52e:	2800      	cmp	r0, #0
 801d530:	d03a      	beq.n	801d5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d532:	4920      	ldr	r1, [pc, #128]	; (801d5b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d534:	6809      	ldr	r1, [r1, #0]
 801d536:	2900      	cmp	r1, #0
 801d538:	d036      	beq.n	801d5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d53a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d53e:	2900      	cmp	r1, #0
 801d540:	d032      	beq.n	801d5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d542:	891a      	ldrh	r2, [r3, #8]
 801d544:	8958      	ldrh	r0, [r3, #10]
 801d546:	4350      	muls	r0, r2
 801d548:	7c5a      	ldrb	r2, [r3, #17]
 801d54a:	7cdb      	ldrb	r3, [r3, #19]
 801d54c:	0952      	lsrs	r2, r2, #5
 801d54e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d556:	2b0b      	cmp	r3, #11
 801d558:	bf18      	it	ne
 801d55a:	0040      	lslne	r0, r0, #1
 801d55c:	3003      	adds	r0, #3
 801d55e:	f020 0003 	bic.w	r0, r0, #3
 801d562:	4408      	add	r0, r1
 801d564:	4770      	bx	lr
 801d566:	4b14      	ldr	r3, [pc, #80]	; (801d5b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d568:	881b      	ldrh	r3, [r3, #0]
 801d56a:	4403      	add	r3, r0
 801d56c:	429a      	cmp	r2, r3
 801d56e:	da1a      	bge.n	801d5a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d570:	4b12      	ldr	r3, [pc, #72]	; (801d5bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d572:	1a10      	subs	r0, r2, r0
 801d574:	210e      	movs	r1, #14
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	fb01 3000 	mla	r0, r1, r0, r3
 801d57c:	7b03      	ldrb	r3, [r0, #12]
 801d57e:	f003 031f 	and.w	r3, r3, #31
 801d582:	2b0b      	cmp	r3, #11
 801d584:	d10b      	bne.n	801d59e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d586:	8903      	ldrh	r3, [r0, #8]
 801d588:	8940      	ldrh	r0, [r0, #10]
 801d58a:	4358      	muls	r0, r3
 801d58c:	4b09      	ldr	r3, [pc, #36]	; (801d5b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d58e:	3003      	adds	r0, #3
 801d590:	6819      	ldr	r1, [r3, #0]
 801d592:	f020 0303 	bic.w	r3, r0, #3
 801d596:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d59a:	4418      	add	r0, r3
 801d59c:	4770      	bx	lr
 801d59e:	2b0d      	cmp	r3, #13
 801d5a0:	d101      	bne.n	801d5a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d5a2:	300d      	adds	r0, #13
 801d5a4:	4770      	bx	lr
 801d5a6:	2000      	movs	r0, #0
 801d5a8:	4770      	bx	lr
 801d5aa:	bf00      	nop
 801d5ac:	20015354 	.word	0x20015354
 801d5b0:	2001535c 	.word	0x2001535c
 801d5b4:	20015338 	.word	0x20015338
 801d5b8:	20015358 	.word	0x20015358
 801d5bc:	2001533c 	.word	0x2001533c

0801d5c0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d5c0:	4a17      	ldr	r2, [pc, #92]	; (801d620 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801d5c2:	b510      	push	{r4, lr}
 801d5c4:	8803      	ldrh	r3, [r0, #0]
 801d5c6:	8812      	ldrh	r2, [r2, #0]
 801d5c8:	4293      	cmp	r3, r2
 801d5ca:	d20c      	bcs.n	801d5e6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d5cc:	4a15      	ldr	r2, [pc, #84]	; (801d624 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801d5ce:	2114      	movs	r1, #20
 801d5d0:	6812      	ldr	r2, [r2, #0]
 801d5d2:	fb01 2303 	mla	r3, r1, r3, r2
 801d5d6:	7c58      	ldrb	r0, [r3, #17]
 801d5d8:	0942      	lsrs	r2, r0, #5
 801d5da:	7cd8      	ldrb	r0, [r3, #19]
 801d5dc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d5e0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d5e4:	bd10      	pop	{r4, pc}
 801d5e6:	4910      	ldr	r1, [pc, #64]	; (801d628 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d5e8:	8809      	ldrh	r1, [r1, #0]
 801d5ea:	4411      	add	r1, r2
 801d5ec:	428b      	cmp	r3, r1
 801d5ee:	da09      	bge.n	801d604 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d5f0:	1a9b      	subs	r3, r3, r2
 801d5f2:	4a0e      	ldr	r2, [pc, #56]	; (801d62c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d5f4:	210e      	movs	r1, #14
 801d5f6:	6812      	ldr	r2, [r2, #0]
 801d5f8:	fb01 2303 	mla	r3, r1, r3, r2
 801d5fc:	7b18      	ldrb	r0, [r3, #12]
 801d5fe:	f000 001f 	and.w	r0, r0, #31
 801d602:	e7ef      	b.n	801d5e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d604:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d608:	4293      	cmp	r3, r2
 801d60a:	d106      	bne.n	801d61a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d60c:	f7f9 febc 	bl	8017388 <_ZN8touchgfx3HAL3lcdEv>
 801d610:	6803      	ldr	r3, [r0, #0]
 801d612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d618:	4718      	bx	r3
 801d61a:	2000      	movs	r0, #0
 801d61c:	e7e2      	b.n	801d5e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d61e:	bf00      	nop
 801d620:	20015354 	.word	0x20015354
 801d624:	2001535c 	.word	0x2001535c
 801d628:	20015358 	.word	0x20015358
 801d62c:	2001533c 	.word	0x2001533c

0801d630 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d630:	2010      	movs	r0, #16
 801d632:	4770      	bx	lr

0801d634 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801d634:	2000      	movs	r0, #0
 801d636:	4770      	bx	lr

0801d638 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801d638:	4b02      	ldr	r3, [pc, #8]	; (801d644 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801d63a:	8818      	ldrh	r0, [r3, #0]
 801d63c:	0040      	lsls	r0, r0, #1
 801d63e:	b280      	uxth	r0, r0
 801d640:	4770      	bx	lr
 801d642:	bf00      	nop
 801d644:	200152ce 	.word	0x200152ce

0801d648 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d648:	2bff      	cmp	r3, #255	; 0xff
 801d64a:	d050      	beq.n	801d6ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d64c:	2a0b      	cmp	r2, #11
 801d64e:	d04a      	beq.n	801d6e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d650:	d80e      	bhi.n	801d670 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d652:	2a03      	cmp	r2, #3
 801d654:	d03f      	beq.n	801d6d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801d656:	d804      	bhi.n	801d662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d658:	2a01      	cmp	r2, #1
 801d65a:	d03e      	beq.n	801d6da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d65c:	d93f      	bls.n	801d6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d65e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d660:	4770      	bx	lr
 801d662:	2a09      	cmp	r2, #9
 801d664:	d03f      	beq.n	801d6e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d666:	d83c      	bhi.n	801d6e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d668:	2a08      	cmp	r2, #8
 801d66a:	d03a      	beq.n	801d6e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d66c:	2000      	movs	r0, #0
 801d66e:	4770      	bx	lr
 801d670:	2a2f      	cmp	r2, #47	; 0x2f
 801d672:	d024      	beq.n	801d6be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801d674:	d80d      	bhi.n	801d692 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801d676:	2a2d      	cmp	r2, #45	; 0x2d
 801d678:	d014      	beq.n	801d6a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801d67a:	d826      	bhi.n	801d6ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d67c:	2a2c      	cmp	r2, #44	; 0x2c
 801d67e:	d1f5      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d680:	684b      	ldr	r3, [r1, #4]
 801d682:	781b      	ldrb	r3, [r3, #0]
 801d684:	2b01      	cmp	r3, #1
 801d686:	d018      	beq.n	801d6ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801d688:	d323      	bcc.n	801d6d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801d68a:	2b02      	cmp	r3, #2
 801d68c:	d1ee      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d68e:	6880      	ldr	r0, [r0, #8]
 801d690:	4770      	bx	lr
 801d692:	2a31      	cmp	r2, #49	; 0x31
 801d694:	d004      	beq.n	801d6a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801d696:	d328      	bcc.n	801d6ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d698:	2a32      	cmp	r2, #50	; 0x32
 801d69a:	d026      	beq.n	801d6ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d69c:	2a33      	cmp	r2, #51	; 0x33
 801d69e:	d1e5      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d6a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801d6a2:	4770      	bx	lr
 801d6a4:	684b      	ldr	r3, [r1, #4]
 801d6a6:	781b      	ldrb	r3, [r3, #0]
 801d6a8:	2b01      	cmp	r3, #1
 801d6aa:	d004      	beq.n	801d6b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6ac:	d30b      	bcc.n	801d6c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d6ae:	2b02      	cmp	r3, #2
 801d6b0:	d1dc      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d6b2:	6900      	ldr	r0, [r0, #16]
 801d6b4:	4770      	bx	lr
 801d6b6:	6a00      	ldr	r0, [r0, #32]
 801d6b8:	4770      	bx	lr
 801d6ba:	6980      	ldr	r0, [r0, #24]
 801d6bc:	4770      	bx	lr
 801d6be:	684b      	ldr	r3, [r1, #4]
 801d6c0:	781b      	ldrb	r3, [r3, #0]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d1d2      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d6c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d6c8:	4770      	bx	lr
 801d6ca:	684b      	ldr	r3, [r1, #4]
 801d6cc:	781b      	ldrb	r3, [r3, #0]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d1cc      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d6d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d6d4:	4770      	bx	lr
 801d6d6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d6d8:	4770      	bx	lr
 801d6da:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d6dc:	4770      	bx	lr
 801d6de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d6e0:	4770      	bx	lr
 801d6e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801d6e4:	4770      	bx	lr
 801d6e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801d6e8:	4770      	bx	lr
 801d6ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801d6ec:	4770      	bx	lr
 801d6ee:	2a0b      	cmp	r2, #11
 801d6f0:	d049      	beq.n	801d786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d6f2:	d80e      	bhi.n	801d712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801d6f4:	2a03      	cmp	r2, #3
 801d6f6:	d040      	beq.n	801d77a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d6f8:	d804      	bhi.n	801d704 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801d6fa:	2a01      	cmp	r2, #1
 801d6fc:	d03f      	beq.n	801d77e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d6fe:	d940      	bls.n	801d782 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d700:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d702:	4770      	bx	lr
 801d704:	2a09      	cmp	r2, #9
 801d706:	d03e      	beq.n	801d786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d708:	d801      	bhi.n	801d70e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801d70a:	2a08      	cmp	r2, #8
 801d70c:	d1ae      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d70e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801d710:	4770      	bx	lr
 801d712:	2a2f      	cmp	r2, #47	; 0x2f
 801d714:	d024      	beq.n	801d760 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801d716:	d80d      	bhi.n	801d734 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801d718:	2a2d      	cmp	r2, #45	; 0x2d
 801d71a:	d014      	beq.n	801d746 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801d71c:	d826      	bhi.n	801d76c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801d71e:	2a2c      	cmp	r2, #44	; 0x2c
 801d720:	d1a4      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d722:	684b      	ldr	r3, [r1, #4]
 801d724:	781b      	ldrb	r3, [r3, #0]
 801d726:	2b01      	cmp	r3, #1
 801d728:	d018      	beq.n	801d75c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801d72a:	d324      	bcc.n	801d776 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d72c:	2b02      	cmp	r3, #2
 801d72e:	d19d      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d730:	68c0      	ldr	r0, [r0, #12]
 801d732:	4770      	bx	lr
 801d734:	2a31      	cmp	r2, #49	; 0x31
 801d736:	d004      	beq.n	801d742 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801d738:	d327      	bcc.n	801d78a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d73a:	2a32      	cmp	r2, #50	; 0x32
 801d73c:	d025      	beq.n	801d78a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d73e:	2a33      	cmp	r2, #51	; 0x33
 801d740:	d194      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d742:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801d744:	4770      	bx	lr
 801d746:	684b      	ldr	r3, [r1, #4]
 801d748:	781b      	ldrb	r3, [r3, #0]
 801d74a:	2b01      	cmp	r3, #1
 801d74c:	d004      	beq.n	801d758 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801d74e:	d30b      	bcc.n	801d768 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801d750:	2b02      	cmp	r3, #2
 801d752:	d18b      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d754:	6940      	ldr	r0, [r0, #20]
 801d756:	4770      	bx	lr
 801d758:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d75a:	4770      	bx	lr
 801d75c:	69c0      	ldr	r0, [r0, #28]
 801d75e:	4770      	bx	lr
 801d760:	684b      	ldr	r3, [r1, #4]
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d181      	bne.n	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d768:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d76a:	4770      	bx	lr
 801d76c:	684b      	ldr	r3, [r1, #4]
 801d76e:	781b      	ldrb	r3, [r3, #0]
 801d770:	2b00      	cmp	r3, #0
 801d772:	f47f af7b 	bne.w	801d66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d776:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d778:	4770      	bx	lr
 801d77a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d77c:	4770      	bx	lr
 801d77e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d780:	4770      	bx	lr
 801d782:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d784:	4770      	bx	lr
 801d786:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801d788:	4770      	bx	lr
 801d78a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d78c:	4770      	bx	lr

0801d78e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d78e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d792:	b087      	sub	sp, #28
 801d794:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d796:	9205      	str	r2, [sp, #20]
 801d798:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d79c:	9101      	str	r1, [sp, #4]
 801d79e:	9202      	str	r2, [sp, #8]
 801d7a0:	6841      	ldr	r1, [r0, #4]
 801d7a2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801d7a6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d7aa:	fb01 2404 	mla	r4, r1, r4, r2
 801d7ae:	6802      	ldr	r2, [r0, #0]
 801d7b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d7b4:	f8de 2000 	ldr.w	r2, [lr]
 801d7b8:	9203      	str	r2, [sp, #12]
 801d7ba:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d7be:	3204      	adds	r2, #4
 801d7c0:	9204      	str	r2, [sp, #16]
 801d7c2:	9a02      	ldr	r2, [sp, #8]
 801d7c4:	43d6      	mvns	r6, r2
 801d7c6:	b2f6      	uxtb	r6, r6
 801d7c8:	9a01      	ldr	r2, [sp, #4]
 801d7ca:	2a00      	cmp	r2, #0
 801d7cc:	dc03      	bgt.n	801d7d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d7ce:	9a05      	ldr	r2, [sp, #20]
 801d7d0:	2a00      	cmp	r2, #0
 801d7d2:	f340 8129 	ble.w	801da28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d7d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7d8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d7dc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d7e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d7e2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d7e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	dd0e      	ble.n	801d80c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d7ee:	1408      	asrs	r0, r1, #16
 801d7f0:	d405      	bmi.n	801d7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7f2:	4560      	cmp	r0, ip
 801d7f4:	da03      	bge.n	801d7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7f6:	1410      	asrs	r0, r2, #16
 801d7f8:	d401      	bmi.n	801d7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7fa:	42b8      	cmp	r0, r7
 801d7fc:	db07      	blt.n	801d80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d7fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d800:	3b01      	subs	r3, #1
 801d802:	3402      	adds	r4, #2
 801d804:	4401      	add	r1, r0
 801d806:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d808:	4402      	add	r2, r0
 801d80a:	e7ee      	b.n	801d7ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d80c:	d071      	beq.n	801d8f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d80e:	1e58      	subs	r0, r3, #1
 801d810:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d812:	fb05 1500 	mla	r5, r5, r0, r1
 801d816:	142d      	asrs	r5, r5, #16
 801d818:	d45f      	bmi.n	801d8da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d81a:	4565      	cmp	r5, ip
 801d81c:	da5d      	bge.n	801d8da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d81e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d820:	fb05 2000 	mla	r0, r5, r0, r2
 801d824:	1400      	asrs	r0, r0, #16
 801d826:	d458      	bmi.n	801d8da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d828:	42b8      	cmp	r0, r7
 801d82a:	da56      	bge.n	801d8da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d82c:	4699      	mov	r9, r3
 801d82e:	46a2      	mov	sl, r4
 801d830:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d834:	f1b9 0f00 	cmp.w	r9, #0
 801d838:	dd57      	ble.n	801d8ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d83a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d83e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d842:	9803      	ldr	r0, [sp, #12]
 801d844:	140d      	asrs	r5, r1, #16
 801d846:	f109 39ff 	add.w	r9, r9, #4294967295
 801d84a:	fb07 000c 	mla	r0, r7, ip, r0
 801d84e:	5d40      	ldrb	r0, [r0, r5]
 801d850:	9d04      	ldr	r5, [sp, #16]
 801d852:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d856:	f8ba 5000 	ldrh.w	r5, [sl]
 801d85a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d85e:	122f      	asrs	r7, r5, #8
 801d860:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d864:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d868:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d86c:	00ed      	lsls	r5, r5, #3
 801d86e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d872:	fb17 f706 	smulbb	r7, r7, r6
 801d876:	b2ed      	uxtb	r5, r5
 801d878:	fb18 f806 	smulbb	r8, r8, r6
 801d87c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d880:	10c7      	asrs	r7, r0, #3
 801d882:	fb15 f506 	smulbb	r5, r5, r6
 801d886:	00c0      	lsls	r0, r0, #3
 801d888:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d88c:	fa1f fc8c 	uxth.w	ip, ip
 801d890:	b2c0      	uxtb	r0, r0
 801d892:	fb07 870b 	mla	r7, r7, fp, r8
 801d896:	fb00 500b 	mla	r0, r0, fp, r5
 801d89a:	f10c 0501 	add.w	r5, ip, #1
 801d89e:	b2bf      	uxth	r7, r7
 801d8a0:	b280      	uxth	r0, r0
 801d8a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d8a6:	f107 0801 	add.w	r8, r7, #1
 801d8aa:	1c45      	adds	r5, r0, #1
 801d8ac:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d8b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d8b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d8b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d8ba:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d8be:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d8c2:	4401      	add	r1, r0
 801d8c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d8c8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d8ca:	ea45 0c0c 	orr.w	ip, r5, ip
 801d8ce:	4402      	add	r2, r0
 801d8d0:	ea4c 0c08 	orr.w	ip, ip, r8
 801d8d4:	f82a cb02 	strh.w	ip, [sl], #2
 801d8d8:	e7ac      	b.n	801d834 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d8da:	f04f 0800 	mov.w	r8, #0
 801d8de:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d8e2:	eb03 0008 	add.w	r0, r3, r8
 801d8e6:	2800      	cmp	r0, #0
 801d8e8:	dc41      	bgt.n	801d96e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8f2:	9b01      	ldr	r3, [sp, #4]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	f340 8097 	ble.w	801da28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d8fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d900:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d904:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d908:	eef0 6a62 	vmov.f32	s13, s5
 801d90c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d910:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d914:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d918:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d91c:	eef0 6a43 	vmov.f32	s13, s6
 801d920:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d924:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d928:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d92c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d930:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d934:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d938:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d93c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d940:	ee12 2a90 	vmov	r2, s5
 801d944:	eef0 2a47 	vmov.f32	s5, s14
 801d948:	fb92 f3f3 	sdiv	r3, r2, r3
 801d94c:	ee13 2a10 	vmov	r2, s6
 801d950:	9313      	str	r3, [sp, #76]	; 0x4c
 801d952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d954:	eeb0 3a67 	vmov.f32	s6, s15
 801d958:	fb92 f3f3 	sdiv	r3, r2, r3
 801d95c:	9314      	str	r3, [sp, #80]	; 0x50
 801d95e:	9b01      	ldr	r3, [sp, #4]
 801d960:	9a05      	ldr	r2, [sp, #20]
 801d962:	3b01      	subs	r3, #1
 801d964:	9301      	str	r3, [sp, #4]
 801d966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d968:	bf08      	it	eq
 801d96a:	4613      	moveq	r3, r2
 801d96c:	e72c      	b.n	801d7c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d96e:	140f      	asrs	r7, r1, #16
 801d970:	d453      	bmi.n	801da1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d972:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d976:	42bd      	cmp	r5, r7
 801d978:	dd4f      	ble.n	801da1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d97a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d97e:	d44c      	bmi.n	801da1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d980:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d984:	4560      	cmp	r0, ip
 801d986:	dd48      	ble.n	801da1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d988:	9803      	ldr	r0, [sp, #12]
 801d98a:	b22d      	sxth	r5, r5
 801d98c:	fb0c 0505 	mla	r5, ip, r5, r0
 801d990:	5de8      	ldrb	r0, [r5, r7]
 801d992:	9d04      	ldr	r5, [sp, #16]
 801d994:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d998:	f06f 0501 	mvn.w	r5, #1
 801d99c:	fb05 fb08 	mul.w	fp, r5, r8
 801d9a0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d9a4:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d9a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d9ac:	122f      	asrs	r7, r5, #8
 801d9ae:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d9b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d9b6:	00ed      	lsls	r5, r5, #3
 801d9b8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d9bc:	fb17 f706 	smulbb	r7, r7, r6
 801d9c0:	b2ed      	uxtb	r5, r5
 801d9c2:	fb19 f906 	smulbb	r9, r9, r6
 801d9c6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d9ca:	10c7      	asrs	r7, r0, #3
 801d9cc:	fb15 f506 	smulbb	r5, r5, r6
 801d9d0:	00c0      	lsls	r0, r0, #3
 801d9d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d9d6:	fa1f fc8c 	uxth.w	ip, ip
 801d9da:	b2c0      	uxtb	r0, r0
 801d9dc:	fb07 970a 	mla	r7, r7, sl, r9
 801d9e0:	fb00 500a 	mla	r0, r0, sl, r5
 801d9e4:	f10c 0501 	add.w	r5, ip, #1
 801d9e8:	b2bf      	uxth	r7, r7
 801d9ea:	b280      	uxth	r0, r0
 801d9ec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d9f0:	f107 0901 	add.w	r9, r7, #1
 801d9f4:	1c45      	adds	r5, r0, #1
 801d9f6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d9fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d9fe:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801da02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801da06:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801da0a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801da0e:	ea45 0c0c 	orr.w	ip, r5, ip
 801da12:	ea4c 0c09 	orr.w	ip, ip, r9
 801da16:	f824 c00b 	strh.w	ip, [r4, fp]
 801da1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801da1c:	f108 38ff 	add.w	r8, r8, #4294967295
 801da20:	4401      	add	r1, r0
 801da22:	9814      	ldr	r0, [sp, #80]	; 0x50
 801da24:	4402      	add	r2, r0
 801da26:	e75c      	b.n	801d8e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801da28:	b007      	add	sp, #28
 801da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da32:	b085      	sub	sp, #20
 801da34:	4693      	mov	fp, r2
 801da36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da3a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801da3c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801da3e:	6870      	ldr	r0, [r6, #4]
 801da40:	9100      	str	r1, [sp, #0]
 801da42:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801da46:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801da4a:	fb00 2404 	mla	r4, r0, r4, r2
 801da4e:	6832      	ldr	r2, [r6, #0]
 801da50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da54:	682a      	ldr	r2, [r5, #0]
 801da56:	9201      	str	r2, [sp, #4]
 801da58:	686a      	ldr	r2, [r5, #4]
 801da5a:	3204      	adds	r2, #4
 801da5c:	9202      	str	r2, [sp, #8]
 801da5e:	9a00      	ldr	r2, [sp, #0]
 801da60:	2a00      	cmp	r2, #0
 801da62:	dc03      	bgt.n	801da6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801da64:	f1bb 0f00 	cmp.w	fp, #0
 801da68:	f340 80a0 	ble.w	801dbac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801da6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da6e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801da72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801da76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da78:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801da7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801da80:	2b00      	cmp	r3, #0
 801da82:	dd0c      	ble.n	801da9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801da84:	1406      	asrs	r6, r0, #16
 801da86:	d405      	bmi.n	801da94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801da88:	454e      	cmp	r6, r9
 801da8a:	da03      	bge.n	801da94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801da8c:	1416      	asrs	r6, r2, #16
 801da8e:	d401      	bmi.n	801da94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801da90:	4546      	cmp	r6, r8
 801da92:	db05      	blt.n	801daa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da94:	4470      	add	r0, lr
 801da96:	4462      	add	r2, ip
 801da98:	3b01      	subs	r3, #1
 801da9a:	3402      	adds	r4, #2
 801da9c:	e7f0      	b.n	801da80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801da9e:	d00f      	beq.n	801dac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801daa0:	1e5e      	subs	r6, r3, #1
 801daa2:	fb0e 0706 	mla	r7, lr, r6, r0
 801daa6:	143f      	asrs	r7, r7, #16
 801daa8:	d541      	bpl.n	801db2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801daaa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801daae:	4698      	mov	r8, r3
 801dab0:	9603      	str	r6, [sp, #12]
 801dab2:	f1b8 0f00 	cmp.w	r8, #0
 801dab6:	dc59      	bgt.n	801db6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801dab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dabc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dac0:	9b00      	ldr	r3, [sp, #0]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	dd72      	ble.n	801dbac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801dac6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801daca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dacc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dad0:	eeb0 6a62 	vmov.f32	s12, s5
 801dad4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dadc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dae0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dae4:	eeb0 6a43 	vmov.f32	s12, s6
 801dae8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801daec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801daf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801daf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801daf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dafc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db08:	ee12 2a90 	vmov	r2, s5
 801db0c:	eef0 2a47 	vmov.f32	s5, s14
 801db10:	fb92 fef3 	sdiv	lr, r2, r3
 801db14:	ee13 2a10 	vmov	r2, s6
 801db18:	eeb0 3a67 	vmov.f32	s6, s15
 801db1c:	fb92 fcf3 	sdiv	ip, r2, r3
 801db20:	9b00      	ldr	r3, [sp, #0]
 801db22:	3b01      	subs	r3, #1
 801db24:	9300      	str	r3, [sp, #0]
 801db26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db28:	bf08      	it	eq
 801db2a:	465b      	moveq	r3, fp
 801db2c:	e797      	b.n	801da5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801db2e:	454f      	cmp	r7, r9
 801db30:	dabb      	bge.n	801daaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801db32:	fb0c 2606 	mla	r6, ip, r6, r2
 801db36:	1436      	asrs	r6, r6, #16
 801db38:	d4b7      	bmi.n	801daaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801db3a:	4546      	cmp	r6, r8
 801db3c:	dab5      	bge.n	801daaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801db3e:	461e      	mov	r6, r3
 801db40:	46a0      	mov	r8, r4
 801db42:	2e00      	cmp	r6, #0
 801db44:	ddb8      	ble.n	801dab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801db46:	1417      	asrs	r7, r2, #16
 801db48:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801db4c:	9901      	ldr	r1, [sp, #4]
 801db4e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801db52:	4462      	add	r2, ip
 801db54:	4470      	add	r0, lr
 801db56:	fb0a 1707 	mla	r7, sl, r7, r1
 801db5a:	9902      	ldr	r1, [sp, #8]
 801db5c:	3e01      	subs	r6, #1
 801db5e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801db62:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801db66:	f828 7b02 	strh.w	r7, [r8], #2
 801db6a:	e7ea      	b.n	801db42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801db6c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801db70:	d417      	bmi.n	801dba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801db72:	68ae      	ldr	r6, [r5, #8]
 801db74:	454e      	cmp	r6, r9
 801db76:	dd14      	ble.n	801dba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801db78:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801db7c:	d411      	bmi.n	801dba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801db7e:	68ef      	ldr	r7, [r5, #12]
 801db80:	4557      	cmp	r7, sl
 801db82:	dd0e      	ble.n	801dba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801db84:	9f01      	ldr	r7, [sp, #4]
 801db86:	b236      	sxth	r6, r6
 801db88:	f06f 0101 	mvn.w	r1, #1
 801db8c:	fb0a 7606 	mla	r6, sl, r6, r7
 801db90:	9f02      	ldr	r7, [sp, #8]
 801db92:	f816 6009 	ldrb.w	r6, [r6, r9]
 801db96:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801db9a:	fb01 f608 	mul.w	r6, r1, r8
 801db9e:	9903      	ldr	r1, [sp, #12]
 801dba0:	538f      	strh	r7, [r1, r6]
 801dba2:	4470      	add	r0, lr
 801dba4:	4462      	add	r2, ip
 801dba6:	f108 38ff 	add.w	r8, r8, #4294967295
 801dbaa:	e782      	b.n	801dab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dbac:	b005      	add	sp, #20
 801dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb6:	b087      	sub	sp, #28
 801dbb8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dbba:	9205      	str	r2, [sp, #20]
 801dbbc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dbc0:	9102      	str	r1, [sp, #8]
 801dbc2:	9203      	str	r2, [sp, #12]
 801dbc4:	6861      	ldr	r1, [r4, #4]
 801dbc6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801dbca:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801dbce:	fb01 2000 	mla	r0, r1, r0, r2
 801dbd2:	6822      	ldr	r2, [r4, #0]
 801dbd4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801dbd8:	9200      	str	r2, [sp, #0]
 801dbda:	f8dc 2000 	ldr.w	r2, [ip]
 801dbde:	9204      	str	r2, [sp, #16]
 801dbe0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801dbe4:	3204      	adds	r2, #4
 801dbe6:	9201      	str	r2, [sp, #4]
 801dbe8:	9a03      	ldr	r2, [sp, #12]
 801dbea:	43d5      	mvns	r5, r2
 801dbec:	b2ed      	uxtb	r5, r5
 801dbee:	9a02      	ldr	r2, [sp, #8]
 801dbf0:	2a00      	cmp	r2, #0
 801dbf2:	dc03      	bgt.n	801dbfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dbf4:	9a05      	ldr	r2, [sp, #20]
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	f340 812c 	ble.w	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801dbfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dbfe:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dc02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dc06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc08:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dc0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	dd10      	ble.n	801dc36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dc14:	140c      	asrs	r4, r1, #16
 801dc16:	d405      	bmi.n	801dc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc18:	4574      	cmp	r4, lr
 801dc1a:	da03      	bge.n	801dc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc1c:	1414      	asrs	r4, r2, #16
 801dc1e:	d401      	bmi.n	801dc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc20:	42bc      	cmp	r4, r7
 801dc22:	db09      	blt.n	801dc38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc26:	3b01      	subs	r3, #1
 801dc28:	9800      	ldr	r0, [sp, #0]
 801dc2a:	4421      	add	r1, r4
 801dc2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dc2e:	3002      	adds	r0, #2
 801dc30:	4422      	add	r2, r4
 801dc32:	9000      	str	r0, [sp, #0]
 801dc34:	e7ec      	b.n	801dc10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801dc36:	d071      	beq.n	801dd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801dc38:	1e5c      	subs	r4, r3, #1
 801dc3a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dc3c:	fb06 1604 	mla	r6, r6, r4, r1
 801dc40:	1436      	asrs	r6, r6, #16
 801dc42:	d45d      	bmi.n	801dd00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dc44:	4576      	cmp	r6, lr
 801dc46:	da5b      	bge.n	801dd00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dc48:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801dc4a:	fb06 2404 	mla	r4, r6, r4, r2
 801dc4e:	1424      	asrs	r4, r4, #16
 801dc50:	d456      	bmi.n	801dd00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dc52:	42bc      	cmp	r4, r7
 801dc54:	da54      	bge.n	801dd00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801dc56:	4698      	mov	r8, r3
 801dc58:	f8dd 9000 	ldr.w	r9, [sp]
 801dc5c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801dc60:	f1b8 0f00 	cmp.w	r8, #0
 801dc64:	dd54      	ble.n	801dd10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dc66:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801dc6a:	1414      	asrs	r4, r2, #16
 801dc6c:	9804      	ldr	r0, [sp, #16]
 801dc6e:	140e      	asrs	r6, r1, #16
 801dc70:	f108 38ff 	add.w	r8, r8, #4294967295
 801dc74:	fb07 0404 	mla	r4, r7, r4, r0
 801dc78:	9801      	ldr	r0, [sp, #4]
 801dc7a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801dc7e:	f8b9 4000 	ldrh.w	r4, [r9]
 801dc82:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dc86:	1227      	asrs	r7, r4, #8
 801dc88:	eb00 0b0e 	add.w	fp, r0, lr
 801dc8c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801dc90:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dc94:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dc96:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801dc9a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dc9e:	4401      	add	r1, r0
 801dca0:	fb16 f60a 	smulbb	r6, r6, sl
 801dca4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801dca6:	fb1b fb0a 	smulbb	fp, fp, sl
 801dcaa:	fb07 6705 	mla	r7, r7, r5, r6
 801dcae:	10e6      	asrs	r6, r4, #3
 801dcb0:	00e4      	lsls	r4, r4, #3
 801dcb2:	4402      	add	r2, r0
 801dcb4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dcb8:	b2bf      	uxth	r7, r7
 801dcba:	b2e4      	uxtb	r4, r4
 801dcbc:	fb06 b605 	mla	r6, r6, r5, fp
 801dcc0:	fb14 f405 	smulbb	r4, r4, r5
 801dcc4:	b2b6      	uxth	r6, r6
 801dcc6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801dcca:	1c7c      	adds	r4, r7, #1
 801dccc:	f106 0b01 	add.w	fp, r6, #1
 801dcd0:	fa1f fe8e 	uxth.w	lr, lr
 801dcd4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801dcd8:	f10e 0401 	add.w	r4, lr, #1
 801dcdc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801dce0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801dce4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801dce8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801dcec:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801dcf0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801dcf4:	4327      	orrs	r7, r4
 801dcf6:	ea47 070b 	orr.w	r7, r7, fp
 801dcfa:	f829 7b02 	strh.w	r7, [r9], #2
 801dcfe:	e7af      	b.n	801dc60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801dd00:	f04f 0e00 	mov.w	lr, #0
 801dd04:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801dd08:	eb03 040e 	add.w	r4, r3, lr
 801dd0c:	2c00      	cmp	r4, #0
 801dd0e:	dc43      	bgt.n	801dd98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801dd10:	9a00      	ldr	r2, [sp, #0]
 801dd12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dd1a:	9300      	str	r3, [sp, #0]
 801dd1c:	9b02      	ldr	r3, [sp, #8]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	f340 8098 	ble.w	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801dd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd32:	eef0 6a62 	vmov.f32	s13, s5
 801dd36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dd3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd42:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801dd46:	eef0 6a43 	vmov.f32	s13, s6
 801dd4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd4e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801dd52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd6a:	ee12 2a90 	vmov	r2, s5
 801dd6e:	eef0 2a47 	vmov.f32	s5, s14
 801dd72:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd76:	ee13 2a10 	vmov	r2, s6
 801dd7a:	9313      	str	r3, [sp, #76]	; 0x4c
 801dd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd7e:	eeb0 3a67 	vmov.f32	s6, s15
 801dd82:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd86:	9314      	str	r3, [sp, #80]	; 0x50
 801dd88:	9b02      	ldr	r3, [sp, #8]
 801dd8a:	9a05      	ldr	r2, [sp, #20]
 801dd8c:	3b01      	subs	r3, #1
 801dd8e:	9302      	str	r3, [sp, #8]
 801dd90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd92:	bf08      	it	eq
 801dd94:	4613      	moveq	r3, r2
 801dd96:	e72a      	b.n	801dbee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dd98:	140f      	asrs	r7, r1, #16
 801dd9a:	d454      	bmi.n	801de46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801dd9c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dda0:	42be      	cmp	r6, r7
 801dda2:	dd50      	ble.n	801de46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801dda4:	ea5f 4822 	movs.w	r8, r2, asr #16
 801dda8:	d44d      	bmi.n	801de46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ddaa:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801ddae:	4544      	cmp	r4, r8
 801ddb0:	dd49      	ble.n	801de46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ddb2:	9c04      	ldr	r4, [sp, #16]
 801ddb4:	b236      	sxth	r6, r6
 801ddb6:	f06f 0001 	mvn.w	r0, #1
 801ddba:	fb08 4606 	mla	r6, r8, r6, r4
 801ddbe:	9c01      	ldr	r4, [sp, #4]
 801ddc0:	fb00 fa0e 	mul.w	sl, r0, lr
 801ddc4:	9800      	ldr	r0, [sp, #0]
 801ddc6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ddca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ddce:	eb04 0b08 	add.w	fp, r4, r8
 801ddd2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ddd6:	9801      	ldr	r0, [sp, #4]
 801ddd8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801dddc:	1227      	asrs	r7, r4, #8
 801ddde:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dde2:	fb16 f609 	smulbb	r6, r6, r9
 801dde6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ddea:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ddee:	fb1b fb09 	smulbb	fp, fp, r9
 801ddf2:	fb07 6705 	mla	r7, r7, r5, r6
 801ddf6:	10e6      	asrs	r6, r4, #3
 801ddf8:	00e4      	lsls	r4, r4, #3
 801ddfa:	9800      	ldr	r0, [sp, #0]
 801ddfc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de00:	b2bf      	uxth	r7, r7
 801de02:	b2e4      	uxtb	r4, r4
 801de04:	fb06 b605 	mla	r6, r6, r5, fp
 801de08:	fb14 f405 	smulbb	r4, r4, r5
 801de0c:	b2b6      	uxth	r6, r6
 801de0e:	fb08 4809 	mla	r8, r8, r9, r4
 801de12:	1c7c      	adds	r4, r7, #1
 801de14:	f106 0b01 	add.w	fp, r6, #1
 801de18:	fa1f f888 	uxth.w	r8, r8
 801de1c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801de20:	f108 0401 	add.w	r4, r8, #1
 801de24:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801de28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801de2c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801de30:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801de34:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801de38:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801de3c:	4327      	orrs	r7, r4
 801de3e:	ea47 070b 	orr.w	r7, r7, fp
 801de42:	f820 700a 	strh.w	r7, [r0, sl]
 801de46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801de48:	f10e 3eff 	add.w	lr, lr, #4294967295
 801de4c:	4401      	add	r1, r0
 801de4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801de50:	4402      	add	r2, r0
 801de52:	e759      	b.n	801dd08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801de54:	b007      	add	sp, #28
 801de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801de5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de60:	b085      	sub	sp, #20
 801de62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801de68:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801de6a:	9203      	str	r2, [sp, #12]
 801de6c:	6870      	ldr	r0, [r6, #4]
 801de6e:	686f      	ldr	r7, [r5, #4]
 801de70:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801de74:	3704      	adds	r7, #4
 801de76:	9101      	str	r1, [sp, #4]
 801de78:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801de7c:	fb00 2404 	mla	r4, r0, r4, r2
 801de80:	6832      	ldr	r2, [r6, #0]
 801de82:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801de86:	682a      	ldr	r2, [r5, #0]
 801de88:	9202      	str	r2, [sp, #8]
 801de8a:	9a01      	ldr	r2, [sp, #4]
 801de8c:	2a00      	cmp	r2, #0
 801de8e:	dc03      	bgt.n	801de98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801de90:	9a03      	ldr	r2, [sp, #12]
 801de92:	2a00      	cmp	r2, #0
 801de94:	f340 80cc 	ble.w	801e030 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801de98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801de9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dea4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801dea8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801deac:	2b00      	cmp	r3, #0
 801deae:	dd0d      	ble.n	801decc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801deb0:	1406      	asrs	r6, r0, #16
 801deb2:	d405      	bmi.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801deb4:	454e      	cmp	r6, r9
 801deb6:	da03      	bge.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801deb8:	1416      	asrs	r6, r2, #16
 801deba:	d401      	bmi.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801debc:	4546      	cmp	r6, r8
 801debe:	db06      	blt.n	801dece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dec0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dec2:	4460      	add	r0, ip
 801dec4:	3b01      	subs	r3, #1
 801dec6:	3402      	adds	r4, #2
 801dec8:	4432      	add	r2, r6
 801deca:	e7ef      	b.n	801deac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801decc:	d00f      	beq.n	801deee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dece:	1e5e      	subs	r6, r3, #1
 801ded0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ded4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ded8:	d543      	bpl.n	801df62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801deda:	4698      	mov	r8, r3
 801dedc:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801dee0:	f1b8 0f00 	cmp.w	r8, #0
 801dee4:	dc71      	bgt.n	801dfca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801dee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801deea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801deee:	9b01      	ldr	r3, [sp, #4]
 801def0:	2b00      	cmp	r3, #0
 801def2:	f340 809d 	ble.w	801e030 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801def6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801defa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801defc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df00:	eeb0 6a62 	vmov.f32	s12, s5
 801df04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df10:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801df14:	eeb0 6a43 	vmov.f32	s12, s6
 801df18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df1c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801df20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df38:	ee12 2a90 	vmov	r2, s5
 801df3c:	eef0 2a47 	vmov.f32	s5, s14
 801df40:	fb92 fcf3 	sdiv	ip, r2, r3
 801df44:	ee13 2a10 	vmov	r2, s6
 801df48:	eeb0 3a67 	vmov.f32	s6, s15
 801df4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801df50:	9312      	str	r3, [sp, #72]	; 0x48
 801df52:	9b01      	ldr	r3, [sp, #4]
 801df54:	9a03      	ldr	r2, [sp, #12]
 801df56:	3b01      	subs	r3, #1
 801df58:	9301      	str	r3, [sp, #4]
 801df5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df5c:	bf08      	it	eq
 801df5e:	4613      	moveq	r3, r2
 801df60:	e793      	b.n	801de8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801df62:	45ce      	cmp	lr, r9
 801df64:	dab9      	bge.n	801deda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801df66:	9912      	ldr	r1, [sp, #72]	; 0x48
 801df68:	fb01 2606 	mla	r6, r1, r6, r2
 801df6c:	1436      	asrs	r6, r6, #16
 801df6e:	d4b4      	bmi.n	801deda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801df70:	4546      	cmp	r6, r8
 801df72:	dab2      	bge.n	801deda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801df74:	4698      	mov	r8, r3
 801df76:	46a2      	mov	sl, r4
 801df78:	f1b8 0f00 	cmp.w	r8, #0
 801df7c:	ddb3      	ble.n	801dee6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801df7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801df82:	1416      	asrs	r6, r2, #16
 801df84:	9902      	ldr	r1, [sp, #8]
 801df86:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801df8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801df8e:	4460      	add	r0, ip
 801df90:	fb09 1606 	mla	r6, r9, r6, r1
 801df94:	4928      	ldr	r1, [pc, #160]	; (801e038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801df96:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801df9a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801df9e:	eb07 0b0e 	add.w	fp, r7, lr
 801dfa2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801dfa6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801dfaa:	00f6      	lsls	r6, r6, #3
 801dfac:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801dfb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dfb2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dfb6:	440a      	add	r2, r1
 801dfb8:	ea49 0606 	orr.w	r6, r9, r6
 801dfbc:	f817 900e 	ldrb.w	r9, [r7, lr]
 801dfc0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801dfc4:	f82a 6b02 	strh.w	r6, [sl], #2
 801dfc8:	e7d6      	b.n	801df78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801dfca:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dfce:	d429      	bmi.n	801e024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dfd0:	68ae      	ldr	r6, [r5, #8]
 801dfd2:	454e      	cmp	r6, r9
 801dfd4:	dd26      	ble.n	801e024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dfd6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801dfda:	d423      	bmi.n	801e024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dfdc:	68e9      	ldr	r1, [r5, #12]
 801dfde:	4559      	cmp	r1, fp
 801dfe0:	dd20      	ble.n	801e024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dfe2:	fa0f fe86 	sxth.w	lr, r6
 801dfe6:	9902      	ldr	r1, [sp, #8]
 801dfe8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801dfec:	f06f 0101 	mvn.w	r1, #1
 801dff0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801dff4:	fb01 f908 	mul.w	r9, r1, r8
 801dff8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801dffc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e000:	eb07 060e 	add.w	r6, r7, lr
 801e004:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e008:	7876      	ldrb	r6, [r6, #1]
 801e00a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e00e:	00f6      	lsls	r6, r6, #3
 801e010:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e014:	ea4b 0606 	orr.w	r6, fp, r6
 801e018:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e01c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e020:	f82a 6009 	strh.w	r6, [sl, r9]
 801e024:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e026:	4460      	add	r0, ip
 801e028:	f108 38ff 	add.w	r8, r8, #4294967295
 801e02c:	440a      	add	r2, r1
 801e02e:	e757      	b.n	801dee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e030:	b005      	add	sp, #20
 801e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e036:	bf00      	nop
 801e038:	fffff800 	.word	0xfffff800

0801e03c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e040:	b087      	sub	sp, #28
 801e042:	468b      	mov	fp, r1
 801e044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e048:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e04a:	9204      	str	r2, [sp, #16]
 801e04c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e050:	6841      	ldr	r1, [r0, #4]
 801e052:	9205      	str	r2, [sp, #20]
 801e054:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e058:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e05c:	fb01 2404 	mla	r4, r1, r4, r2
 801e060:	6802      	ldr	r2, [r0, #0]
 801e062:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e066:	f8dc 2000 	ldr.w	r2, [ip]
 801e06a:	9201      	str	r2, [sp, #4]
 801e06c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e070:	3204      	adds	r2, #4
 801e072:	9202      	str	r2, [sp, #8]
 801e074:	f1bb 0f00 	cmp.w	fp, #0
 801e078:	dc03      	bgt.n	801e082 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e07a:	9a04      	ldr	r2, [sp, #16]
 801e07c:	2a00      	cmp	r2, #0
 801e07e:	f340 8138 	ble.w	801e2f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e082:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e084:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e088:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e08c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e08e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e092:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e096:	2b00      	cmp	r3, #0
 801e098:	dd0e      	ble.n	801e0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e09a:	1402      	asrs	r2, r0, #16
 801e09c:	d405      	bmi.n	801e0aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e09e:	42ba      	cmp	r2, r7
 801e0a0:	da03      	bge.n	801e0aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e0a2:	140a      	asrs	r2, r1, #16
 801e0a4:	d401      	bmi.n	801e0aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e0a6:	42b2      	cmp	r2, r6
 801e0a8:	db07      	blt.n	801e0ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e0aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e0ac:	3b01      	subs	r3, #1
 801e0ae:	3402      	adds	r4, #2
 801e0b0:	4410      	add	r0, r2
 801e0b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0b4:	4411      	add	r1, r2
 801e0b6:	e7ee      	b.n	801e096 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e0b8:	d019      	beq.n	801e0ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e0ba:	1e5a      	subs	r2, r3, #1
 801e0bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e0be:	fb05 0502 	mla	r5, r5, r2, r0
 801e0c2:	142d      	asrs	r5, r5, #16
 801e0c4:	d409      	bmi.n	801e0da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e0c6:	42bd      	cmp	r5, r7
 801e0c8:	da07      	bge.n	801e0da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e0ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e0cc:	fb05 1202 	mla	r2, r5, r2, r1
 801e0d0:	1412      	asrs	r2, r2, #16
 801e0d2:	d402      	bmi.n	801e0da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e0d4:	42b2      	cmp	r2, r6
 801e0d6:	f2c0 80ac 	blt.w	801e232 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e0da:	f04f 0e00 	mov.w	lr, #0
 801e0de:	eb03 020e 	add.w	r2, r3, lr
 801e0e2:	2a00      	cmp	r2, #0
 801e0e4:	dc3e      	bgt.n	801e164 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e0e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e0ee:	f1bb 0f00 	cmp.w	fp, #0
 801e0f2:	f340 80fe 	ble.w	801e2f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e0f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e100:	f1bb 0b01 	subs.w	fp, fp, #1
 801e104:	eeb0 6a62 	vmov.f32	s12, s5
 801e108:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e10c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e114:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e118:	eeb0 6a43 	vmov.f32	s12, s6
 801e11c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e120:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e124:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e128:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e12c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e130:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e134:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e138:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e13c:	ee12 2a90 	vmov	r2, s5
 801e140:	eef0 2a47 	vmov.f32	s5, s14
 801e144:	fb92 f3f3 	sdiv	r3, r2, r3
 801e148:	ee13 2a10 	vmov	r2, s6
 801e14c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e14e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e150:	eeb0 3a67 	vmov.f32	s6, s15
 801e154:	fb92 f3f3 	sdiv	r3, r2, r3
 801e158:	9a04      	ldr	r2, [sp, #16]
 801e15a:	9314      	str	r3, [sp, #80]	; 0x50
 801e15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e15e:	bf08      	it	eq
 801e160:	4613      	moveq	r3, r2
 801e162:	e787      	b.n	801e074 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e164:	1406      	asrs	r6, r0, #16
 801e166:	d45d      	bmi.n	801e224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e168:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801e16c:	42b5      	cmp	r5, r6
 801e16e:	dd59      	ble.n	801e224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e170:	140f      	asrs	r7, r1, #16
 801e172:	d457      	bmi.n	801e224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e174:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e178:	42ba      	cmp	r2, r7
 801e17a:	dd53      	ble.n	801e224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e17c:	9a01      	ldr	r2, [sp, #4]
 801e17e:	b22d      	sxth	r5, r5
 801e180:	fb07 2505 	mla	r5, r7, r5, r2
 801e184:	5daa      	ldrb	r2, [r5, r6]
 801e186:	9d02      	ldr	r5, [sp, #8]
 801e188:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e18c:	0e2e      	lsrs	r6, r5, #24
 801e18e:	d049      	beq.n	801e224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e190:	f06f 0201 	mvn.w	r2, #1
 801e194:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e198:	fb02 f20e 	mul.w	r2, r2, lr
 801e19c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801e1a0:	9203      	str	r2, [sp, #12]
 801e1a2:	9a05      	ldr	r2, [sp, #20]
 801e1a4:	ea4f 2728 	mov.w	r7, r8, asr #8
 801e1a8:	4356      	muls	r6, r2
 801e1aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1ae:	1c72      	adds	r2, r6, #1
 801e1b0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e1b4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e1b8:	b2ed      	uxtb	r5, r5
 801e1ba:	1212      	asrs	r2, r2, #8
 801e1bc:	fa1f f982 	uxth.w	r9, r2
 801e1c0:	43d2      	mvns	r2, r2
 801e1c2:	fb16 f609 	smulbb	r6, r6, r9
 801e1c6:	b2d2      	uxtb	r2, r2
 801e1c8:	fb15 f509 	smulbb	r5, r5, r9
 801e1cc:	fb07 6702 	mla	r7, r7, r2, r6
 801e1d0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e1d4:	fb1a fa09 	smulbb	sl, sl, r9
 801e1d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e1dc:	b2bf      	uxth	r7, r7
 801e1de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e1e2:	fa5f f888 	uxtb.w	r8, r8
 801e1e6:	fb06 a602 	mla	r6, r6, r2, sl
 801e1ea:	fb08 5502 	mla	r5, r8, r2, r5
 801e1ee:	1c7a      	adds	r2, r7, #1
 801e1f0:	b2b6      	uxth	r6, r6
 801e1f2:	b2ad      	uxth	r5, r5
 801e1f4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e1f8:	9a03      	ldr	r2, [sp, #12]
 801e1fa:	f105 0a01 	add.w	sl, r5, #1
 801e1fe:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e202:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e206:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e20a:	ea4a 0707 	orr.w	r7, sl, r7
 801e20e:	f106 0a01 	add.w	sl, r6, #1
 801e212:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e216:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e21a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e21e:	ea47 070a 	orr.w	r7, r7, sl
 801e222:	52a7      	strh	r7, [r4, r2]
 801e224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e226:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e22a:	4410      	add	r0, r2
 801e22c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e22e:	4411      	add	r1, r2
 801e230:	e755      	b.n	801e0de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e232:	f04f 0800 	mov.w	r8, #0
 801e236:	eba3 0208 	sub.w	r2, r3, r8
 801e23a:	2a00      	cmp	r2, #0
 801e23c:	f77f af53 	ble.w	801e0e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e240:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801e244:	140a      	asrs	r2, r1, #16
 801e246:	9f01      	ldr	r7, [sp, #4]
 801e248:	1405      	asrs	r5, r0, #16
 801e24a:	fb06 7202 	mla	r2, r6, r2, r7
 801e24e:	5d52      	ldrb	r2, [r2, r5]
 801e250:	9d02      	ldr	r5, [sp, #8]
 801e252:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e256:	0e2e      	lsrs	r6, r5, #24
 801e258:	d044      	beq.n	801e2e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e25a:	9a05      	ldr	r2, [sp, #20]
 801e25c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e260:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e264:	4356      	muls	r6, r2
 801e266:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e26a:	1c72      	adds	r2, r6, #1
 801e26c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e270:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e274:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e278:	b2ed      	uxtb	r5, r5
 801e27a:	1212      	asrs	r2, r2, #8
 801e27c:	fa1f f982 	uxth.w	r9, r2
 801e280:	43d2      	mvns	r2, r2
 801e282:	fb16 f609 	smulbb	r6, r6, r9
 801e286:	b2d2      	uxtb	r2, r2
 801e288:	fb15 f509 	smulbb	r5, r5, r9
 801e28c:	fb07 6702 	mla	r7, r7, r2, r6
 801e290:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e294:	fb1a fa09 	smulbb	sl, sl, r9
 801e298:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e29c:	b2bf      	uxth	r7, r7
 801e29e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e2a2:	fa5f fe8e 	uxtb.w	lr, lr
 801e2a6:	fb06 a602 	mla	r6, r6, r2, sl
 801e2aa:	fb0e 5502 	mla	r5, lr, r2, r5
 801e2ae:	1c7a      	adds	r2, r7, #1
 801e2b0:	b2b6      	uxth	r6, r6
 801e2b2:	b2ad      	uxth	r5, r5
 801e2b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e2b8:	f105 0a01 	add.w	sl, r5, #1
 801e2bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e2c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e2c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e2c8:	ea4a 0707 	orr.w	r7, sl, r7
 801e2cc:	f106 0a01 	add.w	sl, r6, #1
 801e2d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e2d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e2d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e2dc:	ea47 070a 	orr.w	r7, r7, sl
 801e2e0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e2e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e2e6:	f108 0801 	add.w	r8, r8, #1
 801e2ea:	4410      	add	r0, r2
 801e2ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e2ee:	4411      	add	r1, r2
 801e2f0:	e7a1      	b.n	801e236 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e2f2:	b007      	add	sp, #28
 801e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2fc:	b085      	sub	sp, #20
 801e2fe:	468b      	mov	fp, r1
 801e300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e304:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e306:	9203      	str	r2, [sp, #12]
 801e308:	6841      	ldr	r1, [r0, #4]
 801e30a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e30e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e312:	fb01 2404 	mla	r4, r1, r4, r2
 801e316:	6802      	ldr	r2, [r0, #0]
 801e318:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e31c:	f8de 2000 	ldr.w	r2, [lr]
 801e320:	9200      	str	r2, [sp, #0]
 801e322:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e326:	3204      	adds	r2, #4
 801e328:	9201      	str	r2, [sp, #4]
 801e32a:	f1bb 0f00 	cmp.w	fp, #0
 801e32e:	dc03      	bgt.n	801e338 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e330:	9a03      	ldr	r2, [sp, #12]
 801e332:	2a00      	cmp	r2, #0
 801e334:	f340 8153 	ble.w	801e5de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e33a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e33e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e344:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e348:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	dd0e      	ble.n	801e36e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e350:	1408      	asrs	r0, r1, #16
 801e352:	d405      	bmi.n	801e360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e354:	42b8      	cmp	r0, r7
 801e356:	da03      	bge.n	801e360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e358:	1410      	asrs	r0, r2, #16
 801e35a:	d401      	bmi.n	801e360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e35c:	42b0      	cmp	r0, r6
 801e35e:	db07      	blt.n	801e370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e360:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e362:	3b01      	subs	r3, #1
 801e364:	3402      	adds	r4, #2
 801e366:	4401      	add	r1, r0
 801e368:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e36a:	4402      	add	r2, r0
 801e36c:	e7ee      	b.n	801e34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e36e:	d017      	beq.n	801e3a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e370:	1e58      	subs	r0, r3, #1
 801e372:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e374:	fb05 1500 	mla	r5, r5, r0, r1
 801e378:	142d      	asrs	r5, r5, #16
 801e37a:	d409      	bmi.n	801e390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e37c:	42bd      	cmp	r5, r7
 801e37e:	da07      	bge.n	801e390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e380:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e382:	fb05 2000 	mla	r0, r5, r0, r2
 801e386:	1400      	asrs	r0, r0, #16
 801e388:	d402      	bmi.n	801e390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e38a:	42b0      	cmp	r0, r6
 801e38c:	f2c0 80bc 	blt.w	801e508 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e390:	2600      	movs	r6, #0
 801e392:	1998      	adds	r0, r3, r6
 801e394:	2800      	cmp	r0, #0
 801e396:	dc3e      	bgt.n	801e416 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e39c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e3a0:	f1bb 0f00 	cmp.w	fp, #0
 801e3a4:	f340 811b 	ble.w	801e5de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e3a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3b2:	f1bb 0b01 	subs.w	fp, fp, #1
 801e3b6:	eeb0 6a62 	vmov.f32	s12, s5
 801e3ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e3ca:	eeb0 6a43 	vmov.f32	s12, s6
 801e3ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e3d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e3da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3ee:	ee12 2a90 	vmov	r2, s5
 801e3f2:	eef0 2a47 	vmov.f32	s5, s14
 801e3f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3fa:	ee13 2a10 	vmov	r2, s6
 801e3fe:	9311      	str	r3, [sp, #68]	; 0x44
 801e400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e402:	eeb0 3a67 	vmov.f32	s6, s15
 801e406:	fb92 f3f3 	sdiv	r3, r2, r3
 801e40a:	9a03      	ldr	r2, [sp, #12]
 801e40c:	9312      	str	r3, [sp, #72]	; 0x48
 801e40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e410:	bf08      	it	eq
 801e412:	4613      	moveq	r3, r2
 801e414:	e789      	b.n	801e32a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e416:	140f      	asrs	r7, r1, #16
 801e418:	d426      	bmi.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e41a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e41e:	42bd      	cmp	r5, r7
 801e420:	dd22      	ble.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e422:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e426:	d41f      	bmi.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e428:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e42c:	4560      	cmp	r0, ip
 801e42e:	dd1b      	ble.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e430:	9800      	ldr	r0, [sp, #0]
 801e432:	b22d      	sxth	r5, r5
 801e434:	fb0c 0505 	mla	r5, ip, r5, r0
 801e438:	5de8      	ldrb	r0, [r5, r7]
 801e43a:	9d01      	ldr	r5, [sp, #4]
 801e43c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e440:	0e07      	lsrs	r7, r0, #24
 801e442:	2fff      	cmp	r7, #255	; 0xff
 801e444:	d116      	bne.n	801e474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e446:	f06f 0501 	mvn.w	r5, #1
 801e44a:	fb05 f706 	mul.w	r7, r5, r6
 801e44e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801e452:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e456:	0945      	lsrs	r5, r0, #5
 801e458:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e45c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e460:	ea4c 0505 	orr.w	r5, ip, r5
 801e464:	4305      	orrs	r5, r0
 801e466:	53e5      	strh	r5, [r4, r7]
 801e468:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e46a:	3e01      	subs	r6, #1
 801e46c:	4401      	add	r1, r0
 801e46e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e470:	4402      	add	r2, r0
 801e472:	e78e      	b.n	801e392 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e474:	b2fd      	uxtb	r5, r7
 801e476:	2f00      	cmp	r7, #0
 801e478:	d0f6      	beq.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e47a:	f06f 0701 	mvn.w	r7, #1
 801e47e:	fa1f f985 	uxth.w	r9, r5
 801e482:	43ed      	mvns	r5, r5
 801e484:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e488:	4377      	muls	r7, r6
 801e48a:	fb1a fa09 	smulbb	sl, sl, r9
 801e48e:	b2ed      	uxtb	r5, r5
 801e490:	f834 8007 	ldrh.w	r8, [r4, r7]
 801e494:	9702      	str	r7, [sp, #8]
 801e496:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e49a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e49e:	fb17 f709 	smulbb	r7, r7, r9
 801e4a2:	b2c0      	uxtb	r0, r0
 801e4a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e4a8:	fb10 f009 	smulbb	r0, r0, r9
 801e4ac:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e4b0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801e4b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e4b8:	fa1f fc8c 	uxth.w	ip, ip
 801e4bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e4c0:	fa5f f888 	uxtb.w	r8, r8
 801e4c4:	fb07 a705 	mla	r7, r7, r5, sl
 801e4c8:	fb08 0005 	mla	r0, r8, r5, r0
 801e4cc:	f10c 0501 	add.w	r5, ip, #1
 801e4d0:	b2bf      	uxth	r7, r7
 801e4d2:	b280      	uxth	r0, r0
 801e4d4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e4d8:	f100 0a01 	add.w	sl, r0, #1
 801e4dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e4e0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e4e4:	9802      	ldr	r0, [sp, #8]
 801e4e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e4ea:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e4ee:	f107 0a01 	add.w	sl, r7, #1
 801e4f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e4f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e4fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e4fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e502:	f824 c000 	strh.w	ip, [r4, r0]
 801e506:	e7af      	b.n	801e468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e508:	f04f 0800 	mov.w	r8, #0
 801e50c:	eba3 0008 	sub.w	r0, r3, r8
 801e510:	2800      	cmp	r0, #0
 801e512:	f77f af41 	ble.w	801e398 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e516:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e51a:	1410      	asrs	r0, r2, #16
 801e51c:	9f00      	ldr	r7, [sp, #0]
 801e51e:	140d      	asrs	r5, r1, #16
 801e520:	fb06 7000 	mla	r0, r6, r0, r7
 801e524:	5d40      	ldrb	r0, [r0, r5]
 801e526:	9d01      	ldr	r5, [sp, #4]
 801e528:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801e52c:	0e2e      	lsrs	r6, r5, #24
 801e52e:	2eff      	cmp	r6, #255	; 0xff
 801e530:	d112      	bne.n	801e558 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801e532:	482c      	ldr	r0, [pc, #176]	; (801e5e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801e534:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801e538:	0968      	lsrs	r0, r5, #5
 801e53a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e53e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e542:	4330      	orrs	r0, r6
 801e544:	4328      	orrs	r0, r5
 801e546:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801e54a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e54c:	f108 0801 	add.w	r8, r8, #1
 801e550:	4401      	add	r1, r0
 801e552:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e554:	4402      	add	r2, r0
 801e556:	e7d9      	b.n	801e50c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e558:	b2f0      	uxtb	r0, r6
 801e55a:	2e00      	cmp	r6, #0
 801e55c:	d0f5      	beq.n	801e54a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e55e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801e562:	fa1f f980 	uxth.w	r9, r0
 801e566:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e56a:	43c0      	mvns	r0, r0
 801e56c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e570:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e574:	fb16 f609 	smulbb	r6, r6, r9
 801e578:	b2c0      	uxtb	r0, r0
 801e57a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e57e:	b2ed      	uxtb	r5, r5
 801e580:	fb1a fa09 	smulbb	sl, sl, r9
 801e584:	fb07 6700 	mla	r7, r7, r0, r6
 801e588:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e58c:	fb15 f509 	smulbb	r5, r5, r9
 801e590:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e594:	b2bf      	uxth	r7, r7
 801e596:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e59a:	fa5f fc8c 	uxtb.w	ip, ip
 801e59e:	fb06 a600 	mla	r6, r6, r0, sl
 801e5a2:	fb0c 5500 	mla	r5, ip, r0, r5
 801e5a6:	1c78      	adds	r0, r7, #1
 801e5a8:	b2b6      	uxth	r6, r6
 801e5aa:	b2ad      	uxth	r5, r5
 801e5ac:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801e5b0:	f105 0a01 	add.w	sl, r5, #1
 801e5b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e5b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e5bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e5c0:	ea4a 0707 	orr.w	r7, sl, r7
 801e5c4:	f106 0a01 	add.w	sl, r6, #1
 801e5c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e5cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e5d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e5d4:	ea47 070a 	orr.w	r7, r7, sl
 801e5d8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e5dc:	e7b5      	b.n	801e54a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e5de:	b005      	add	sp, #20
 801e5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5e4:	fffff800 	.word	0xfffff800

0801e5e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	b087      	sub	sp, #28
 801e5ee:	468b      	mov	fp, r1
 801e5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e5f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e5f6:	9204      	str	r2, [sp, #16]
 801e5f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e5fc:	6861      	ldr	r1, [r4, #4]
 801e5fe:	9205      	str	r2, [sp, #20]
 801e600:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e604:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e608:	fb01 2000 	mla	r0, r1, r0, r2
 801e60c:	6822      	ldr	r2, [r4, #0]
 801e60e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e612:	f8de 2000 	ldr.w	r2, [lr]
 801e616:	9201      	str	r2, [sp, #4]
 801e618:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e61c:	9202      	str	r2, [sp, #8]
 801e61e:	f1bb 0f00 	cmp.w	fp, #0
 801e622:	dc03      	bgt.n	801e62c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e624:	9a04      	ldr	r2, [sp, #16]
 801e626:	2a00      	cmp	r2, #0
 801e628:	f340 8142 	ble.w	801e8b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e62c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e62e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e632:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e638:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e63c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e640:	2b00      	cmp	r3, #0
 801e642:	dd0e      	ble.n	801e662 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e644:	140c      	asrs	r4, r1, #16
 801e646:	d405      	bmi.n	801e654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e648:	42bc      	cmp	r4, r7
 801e64a:	da03      	bge.n	801e654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e64c:	1414      	asrs	r4, r2, #16
 801e64e:	d401      	bmi.n	801e654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e650:	42b4      	cmp	r4, r6
 801e652:	db07      	blt.n	801e664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e654:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e656:	3b01      	subs	r3, #1
 801e658:	3002      	adds	r0, #2
 801e65a:	4421      	add	r1, r4
 801e65c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e65e:	4422      	add	r2, r4
 801e660:	e7ee      	b.n	801e640 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e662:	d019      	beq.n	801e698 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e664:	1e5c      	subs	r4, r3, #1
 801e666:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e668:	fb05 1504 	mla	r5, r5, r4, r1
 801e66c:	142d      	asrs	r5, r5, #16
 801e66e:	d409      	bmi.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e670:	42bd      	cmp	r5, r7
 801e672:	da07      	bge.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e674:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e676:	fb05 2404 	mla	r4, r5, r4, r2
 801e67a:	1424      	asrs	r4, r4, #16
 801e67c:	d402      	bmi.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e67e:	42b4      	cmp	r4, r6
 801e680:	f2c0 80b1 	blt.w	801e7e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801e684:	f04f 0800 	mov.w	r8, #0
 801e688:	eb03 0408 	add.w	r4, r3, r8
 801e68c:	2c00      	cmp	r4, #0
 801e68e:	dc3e      	bgt.n	801e70e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e694:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e698:	f1bb 0f00 	cmp.w	fp, #0
 801e69c:	f340 8108 	ble.w	801e8b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e6a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6aa:	f1bb 0b01 	subs.w	fp, fp, #1
 801e6ae:	eeb0 6a62 	vmov.f32	s12, s5
 801e6b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e6b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6be:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e6c2:	eeb0 6a43 	vmov.f32	s12, s6
 801e6c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6ca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e6ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6e6:	ee12 2a90 	vmov	r2, s5
 801e6ea:	eef0 2a47 	vmov.f32	s5, s14
 801e6ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6f2:	ee13 2a10 	vmov	r2, s6
 801e6f6:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6fa:	eeb0 3a67 	vmov.f32	s6, s15
 801e6fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801e702:	9a04      	ldr	r2, [sp, #16]
 801e704:	9314      	str	r3, [sp, #80]	; 0x50
 801e706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e708:	bf08      	it	eq
 801e70a:	4613      	moveq	r3, r2
 801e70c:	e787      	b.n	801e61e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e70e:	140e      	asrs	r6, r1, #16
 801e710:	d462      	bmi.n	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e712:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e716:	42b5      	cmp	r5, r6
 801e718:	dd5e      	ble.n	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e71a:	1417      	asrs	r7, r2, #16
 801e71c:	d45c      	bmi.n	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e71e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801e722:	42bc      	cmp	r4, r7
 801e724:	dd58      	ble.n	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e726:	b22d      	sxth	r5, r5
 801e728:	9c02      	ldr	r4, [sp, #8]
 801e72a:	fb07 6505 	mla	r5, r7, r5, r6
 801e72e:	5d66      	ldrb	r6, [r4, r5]
 801e730:	2e00      	cmp	r6, #0
 801e732:	d051      	beq.n	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e734:	9c01      	ldr	r4, [sp, #4]
 801e736:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801e73a:	f06f 0401 	mvn.w	r4, #1
 801e73e:	fb04 f408 	mul.w	r4, r4, r8
 801e742:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801e746:	5b05      	ldrh	r5, [r0, r4]
 801e748:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e74c:	9403      	str	r4, [sp, #12]
 801e74e:	9c05      	ldr	r4, [sp, #20]
 801e750:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e754:	4366      	muls	r6, r4
 801e756:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e75a:	1c74      	adds	r4, r6, #1
 801e75c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e760:	122e      	asrs	r6, r5, #8
 801e762:	1224      	asrs	r4, r4, #8
 801e764:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e768:	00ed      	lsls	r5, r5, #3
 801e76a:	b2a7      	uxth	r7, r4
 801e76c:	43e4      	mvns	r4, r4
 801e76e:	b2ed      	uxtb	r5, r5
 801e770:	b2e4      	uxtb	r4, r4
 801e772:	fb16 f604 	smulbb	r6, r6, r4
 801e776:	fb15 f504 	smulbb	r5, r5, r4
 801e77a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e77e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801e782:	fb1a fa04 	smulbb	sl, sl, r4
 801e786:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e78a:	fa1f fc8c 	uxth.w	ip, ip
 801e78e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e792:	fa5f f989 	uxtb.w	r9, r9
 801e796:	fb06 a607 	mla	r6, r6, r7, sl
 801e79a:	f10c 0401 	add.w	r4, ip, #1
 801e79e:	fb09 5507 	mla	r5, r9, r7, r5
 801e7a2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e7a6:	9c03      	ldr	r4, [sp, #12]
 801e7a8:	b2ad      	uxth	r5, r5
 801e7aa:	b2b6      	uxth	r6, r6
 801e7ac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7b0:	f105 0a01 	add.w	sl, r5, #1
 801e7b4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e7b8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e7bc:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e7c0:	f106 0a01 	add.w	sl, r6, #1
 801e7c4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e7c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e7cc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e7d0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e7d4:	f820 c004 	strh.w	ip, [r0, r4]
 801e7d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e7da:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7de:	4421      	add	r1, r4
 801e7e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e7e2:	4422      	add	r2, r4
 801e7e4:	e750      	b.n	801e688 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e7e6:	f04f 0900 	mov.w	r9, #0
 801e7ea:	eba3 0409 	sub.w	r4, r3, r9
 801e7ee:	2c00      	cmp	r4, #0
 801e7f0:	f77f af4e 	ble.w	801e690 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e7f4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e7f8:	140d      	asrs	r5, r1, #16
 801e7fa:	1414      	asrs	r4, r2, #16
 801e7fc:	fb06 5404 	mla	r4, r6, r4, r5
 801e800:	9d02      	ldr	r5, [sp, #8]
 801e802:	5d2e      	ldrb	r6, [r5, r4]
 801e804:	2e00      	cmp	r6, #0
 801e806:	d04c      	beq.n	801e8a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e808:	9d01      	ldr	r5, [sp, #4]
 801e80a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e80e:	9c05      	ldr	r4, [sp, #20]
 801e810:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e814:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e818:	4366      	muls	r6, r4
 801e81a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e81e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e822:	1c74      	adds	r4, r6, #1
 801e824:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e828:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e82c:	122e      	asrs	r6, r5, #8
 801e82e:	1224      	asrs	r4, r4, #8
 801e830:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e834:	00ed      	lsls	r5, r5, #3
 801e836:	b2a7      	uxth	r7, r4
 801e838:	43e4      	mvns	r4, r4
 801e83a:	b2ed      	uxtb	r5, r5
 801e83c:	b2e4      	uxtb	r4, r4
 801e83e:	fb16 f604 	smulbb	r6, r6, r4
 801e842:	fb15 f504 	smulbb	r5, r5, r4
 801e846:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e84a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e84e:	fb1a fa04 	smulbb	sl, sl, r4
 801e852:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e856:	fa1f fc8c 	uxth.w	ip, ip
 801e85a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e85e:	fa5f f888 	uxtb.w	r8, r8
 801e862:	fb06 a607 	mla	r6, r6, r7, sl
 801e866:	f10c 0401 	add.w	r4, ip, #1
 801e86a:	fb08 5507 	mla	r5, r8, r7, r5
 801e86e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e872:	b2ad      	uxth	r5, r5
 801e874:	b2b6      	uxth	r6, r6
 801e876:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e87a:	f105 0a01 	add.w	sl, r5, #1
 801e87e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e882:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e886:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e88a:	f106 0a01 	add.w	sl, r6, #1
 801e88e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e892:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e896:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e89a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e89e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e8a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e8a4:	f109 0901 	add.w	r9, r9, #1
 801e8a8:	4421      	add	r1, r4
 801e8aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e8ac:	4422      	add	r2, r4
 801e8ae:	e79c      	b.n	801e7ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e8b0:	b007      	add	sp, #28
 801e8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8ba:	b085      	sub	sp, #20
 801e8bc:	468b      	mov	fp, r1
 801e8be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e8c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e8c4:	9203      	str	r2, [sp, #12]
 801e8c6:	6861      	ldr	r1, [r4, #4]
 801e8c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e8cc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801e8d0:	fb01 2000 	mla	r0, r1, r0, r2
 801e8d4:	6822      	ldr	r2, [r4, #0]
 801e8d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e8da:	f8d8 2000 	ldr.w	r2, [r8]
 801e8de:	9200      	str	r2, [sp, #0]
 801e8e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e8e4:	9201      	str	r2, [sp, #4]
 801e8e6:	f1bb 0f00 	cmp.w	fp, #0
 801e8ea:	dc03      	bgt.n	801e8f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e8ec:	9a03      	ldr	r2, [sp, #12]
 801e8ee:	2a00      	cmp	r2, #0
 801e8f0:	f340 8146 	ble.w	801eb80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e8f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8f6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e8fa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e8fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e900:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e904:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e908:	2b00      	cmp	r3, #0
 801e90a:	dd0e      	ble.n	801e92a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e90c:	140c      	asrs	r4, r1, #16
 801e90e:	d405      	bmi.n	801e91c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e910:	42bc      	cmp	r4, r7
 801e912:	da03      	bge.n	801e91c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e914:	1414      	asrs	r4, r2, #16
 801e916:	d401      	bmi.n	801e91c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e918:	42b4      	cmp	r4, r6
 801e91a:	db07      	blt.n	801e92c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e91c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e91e:	3b01      	subs	r3, #1
 801e920:	3002      	adds	r0, #2
 801e922:	4421      	add	r1, r4
 801e924:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e926:	4422      	add	r2, r4
 801e928:	e7ee      	b.n	801e908 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e92a:	d017      	beq.n	801e95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e92c:	1e5c      	subs	r4, r3, #1
 801e92e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e930:	fb05 1504 	mla	r5, r5, r4, r1
 801e934:	142d      	asrs	r5, r5, #16
 801e936:	d409      	bmi.n	801e94c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e938:	42bd      	cmp	r5, r7
 801e93a:	da07      	bge.n	801e94c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e93c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e93e:	fb05 2404 	mla	r4, r5, r4, r2
 801e942:	1424      	asrs	r4, r4, #16
 801e944:	d402      	bmi.n	801e94c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e946:	42b4      	cmp	r4, r6
 801e948:	f2c0 80b3 	blt.w	801eab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e94c:	2600      	movs	r6, #0
 801e94e:	199c      	adds	r4, r3, r6
 801e950:	2c00      	cmp	r4, #0
 801e952:	dc3e      	bgt.n	801e9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e958:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e95c:	f1bb 0f00 	cmp.w	fp, #0
 801e960:	f340 810e 	ble.w	801eb80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e964:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e96a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e96e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e972:	eeb0 6a62 	vmov.f32	s12, s5
 801e976:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e97a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e97e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e982:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e986:	eeb0 6a43 	vmov.f32	s12, s6
 801e98a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e98e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e992:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e996:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e99a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e99e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9aa:	ee12 2a90 	vmov	r2, s5
 801e9ae:	eef0 2a47 	vmov.f32	s5, s14
 801e9b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9b6:	ee13 2a10 	vmov	r2, s6
 801e9ba:	9311      	str	r3, [sp, #68]	; 0x44
 801e9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9be:	eeb0 3a67 	vmov.f32	s6, s15
 801e9c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9c6:	9a03      	ldr	r2, [sp, #12]
 801e9c8:	9312      	str	r3, [sp, #72]	; 0x48
 801e9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9cc:	bf08      	it	eq
 801e9ce:	4613      	moveq	r3, r2
 801e9d0:	e789      	b.n	801e8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e9d2:	140f      	asrs	r7, r1, #16
 801e9d4:	d418      	bmi.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e9d6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e9da:	42bd      	cmp	r5, r7
 801e9dc:	dd14      	ble.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e9de:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e9e2:	d411      	bmi.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e9e4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e9e8:	4564      	cmp	r4, ip
 801e9ea:	dd0d      	ble.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e9ec:	b22d      	sxth	r5, r5
 801e9ee:	9c01      	ldr	r4, [sp, #4]
 801e9f0:	fb0c 7505 	mla	r5, ip, r5, r7
 801e9f4:	5d64      	ldrb	r4, [r4, r5]
 801e9f6:	2cff      	cmp	r4, #255	; 0xff
 801e9f8:	d10c      	bne.n	801ea14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e9fa:	9c00      	ldr	r4, [sp, #0]
 801e9fc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ea00:	f06f 0401 	mvn.w	r4, #1
 801ea04:	4374      	muls	r4, r6
 801ea06:	5305      	strh	r5, [r0, r4]
 801ea08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea0a:	3e01      	subs	r6, #1
 801ea0c:	4421      	add	r1, r4
 801ea0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea10:	4422      	add	r2, r4
 801ea12:	e79c      	b.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ea14:	2c00      	cmp	r4, #0
 801ea16:	d0f7      	beq.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ea18:	9f00      	ldr	r7, [sp, #0]
 801ea1a:	fa1f fc84 	uxth.w	ip, r4
 801ea1e:	43e4      	mvns	r4, r4
 801ea20:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ea24:	f06f 0501 	mvn.w	r5, #1
 801ea28:	b2e4      	uxtb	r4, r4
 801ea2a:	4375      	muls	r5, r6
 801ea2c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ea30:	9502      	str	r5, [sp, #8]
 801ea32:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ea36:	5b45      	ldrh	r5, [r0, r5]
 801ea38:	122f      	asrs	r7, r5, #8
 801ea3a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ea3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea42:	00ed      	lsls	r5, r5, #3
 801ea44:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ea48:	fb17 f704 	smulbb	r7, r7, r4
 801ea4c:	b2ed      	uxtb	r5, r5
 801ea4e:	fb1a fa04 	smulbb	sl, sl, r4
 801ea52:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ea56:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ea5a:	fb15 f504 	smulbb	r5, r5, r4
 801ea5e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ea62:	fa1f fe8e 	uxth.w	lr, lr
 801ea66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ea6a:	fa5f f989 	uxtb.w	r9, r9
 801ea6e:	fb07 a70c 	mla	r7, r7, ip, sl
 801ea72:	f10e 0401 	add.w	r4, lr, #1
 801ea76:	fb09 550c 	mla	r5, r9, ip, r5
 801ea7a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ea7e:	9c02      	ldr	r4, [sp, #8]
 801ea80:	b2ad      	uxth	r5, r5
 801ea82:	b2bf      	uxth	r7, r7
 801ea84:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ea88:	f105 0a01 	add.w	sl, r5, #1
 801ea8c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ea90:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea94:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ea98:	f107 0a01 	add.w	sl, r7, #1
 801ea9c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801eaa0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eaa4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eaa8:	ea4e 0e0a 	orr.w	lr, lr, sl
 801eaac:	f820 e004 	strh.w	lr, [r0, r4]
 801eab0:	e7aa      	b.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801eab2:	f04f 0900 	mov.w	r9, #0
 801eab6:	eba3 0409 	sub.w	r4, r3, r9
 801eaba:	2c00      	cmp	r4, #0
 801eabc:	f77f af4a 	ble.w	801e954 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eac0:	1414      	asrs	r4, r2, #16
 801eac2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801eac6:	140d      	asrs	r5, r1, #16
 801eac8:	fb06 5504 	mla	r5, r6, r4, r5
 801eacc:	9c01      	ldr	r4, [sp, #4]
 801eace:	5d64      	ldrb	r4, [r4, r5]
 801ead0:	2cff      	cmp	r4, #255	; 0xff
 801ead2:	d10b      	bne.n	801eaec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ead4:	9c00      	ldr	r4, [sp, #0]
 801ead6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801eada:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801eade:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eae0:	f109 0901 	add.w	r9, r9, #1
 801eae4:	4421      	add	r1, r4
 801eae6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eae8:	4422      	add	r2, r4
 801eaea:	e7e4      	b.n	801eab6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eaec:	2c00      	cmp	r4, #0
 801eaee:	d0f6      	beq.n	801eade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eaf0:	9e00      	ldr	r6, [sp, #0]
 801eaf2:	b2a7      	uxth	r7, r4
 801eaf4:	43e4      	mvns	r4, r4
 801eaf6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801eafa:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801eafe:	b2e4      	uxtb	r4, r4
 801eb00:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801eb04:	122e      	asrs	r6, r5, #8
 801eb06:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801eb0a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb0e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801eb12:	00ed      	lsls	r5, r5, #3
 801eb14:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801eb18:	fb16 f604 	smulbb	r6, r6, r4
 801eb1c:	b2ed      	uxtb	r5, r5
 801eb1e:	fb1a fa04 	smulbb	sl, sl, r4
 801eb22:	fb0c 6c07 	mla	ip, ip, r7, r6
 801eb26:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801eb2a:	fb15 f504 	smulbb	r5, r5, r4
 801eb2e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eb32:	fa1f fc8c 	uxth.w	ip, ip
 801eb36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eb3a:	fa5f fe8e 	uxtb.w	lr, lr
 801eb3e:	fb06 a607 	mla	r6, r6, r7, sl
 801eb42:	f10c 0401 	add.w	r4, ip, #1
 801eb46:	fb0e 5507 	mla	r5, lr, r7, r5
 801eb4a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801eb4e:	b2ad      	uxth	r5, r5
 801eb50:	b2b6      	uxth	r6, r6
 801eb52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eb56:	f105 0a01 	add.w	sl, r5, #1
 801eb5a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb62:	ea4a 0c0c 	orr.w	ip, sl, ip
 801eb66:	f106 0a01 	add.w	sl, r6, #1
 801eb6a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb6e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb72:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb76:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eb7a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801eb7e:	e7ae      	b.n	801eade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eb80:	b005      	add	sp, #20
 801eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb8a:	b085      	sub	sp, #20
 801eb8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb8e:	9203      	str	r2, [sp, #12]
 801eb90:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801eb94:	9100      	str	r1, [sp, #0]
 801eb96:	9201      	str	r2, [sp, #4]
 801eb98:	6841      	ldr	r1, [r0, #4]
 801eb9a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801eb9e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eba2:	fb01 2404 	mla	r4, r1, r4, r2
 801eba6:	6802      	ldr	r2, [r0, #0]
 801eba8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ebac:	f8de 2000 	ldr.w	r2, [lr]
 801ebb0:	9202      	str	r2, [sp, #8]
 801ebb2:	9a01      	ldr	r2, [sp, #4]
 801ebb4:	43d6      	mvns	r6, r2
 801ebb6:	b2f6      	uxtb	r6, r6
 801ebb8:	9a00      	ldr	r2, [sp, #0]
 801ebba:	2a00      	cmp	r2, #0
 801ebbc:	dc03      	bgt.n	801ebc6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ebbe:	9a03      	ldr	r2, [sp, #12]
 801ebc0:	2a00      	cmp	r2, #0
 801ebc2:	f340 8124 	ble.w	801ee0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ebc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ebc8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ebcc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ebd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ebd2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ebd6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	dd0e      	ble.n	801ebfc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebde:	1408      	asrs	r0, r1, #16
 801ebe0:	d405      	bmi.n	801ebee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebe2:	4560      	cmp	r0, ip
 801ebe4:	da03      	bge.n	801ebee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebe6:	1410      	asrs	r0, r2, #16
 801ebe8:	d401      	bmi.n	801ebee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebea:	42b8      	cmp	r0, r7
 801ebec:	db07      	blt.n	801ebfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ebee:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ebf0:	3b01      	subs	r3, #1
 801ebf2:	3402      	adds	r4, #2
 801ebf4:	4401      	add	r1, r0
 801ebf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ebf8:	4402      	add	r2, r0
 801ebfa:	e7ee      	b.n	801ebda <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ebfc:	d06e      	beq.n	801ecdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ebfe:	1e58      	subs	r0, r3, #1
 801ec00:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ec02:	fb05 1500 	mla	r5, r5, r0, r1
 801ec06:	142d      	asrs	r5, r5, #16
 801ec08:	d45c      	bmi.n	801ecc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec0a:	4565      	cmp	r5, ip
 801ec0c:	da5a      	bge.n	801ecc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec0e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ec10:	fb05 2000 	mla	r0, r5, r0, r2
 801ec14:	1400      	asrs	r0, r0, #16
 801ec16:	d455      	bmi.n	801ecc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec18:	42b8      	cmp	r0, r7
 801ec1a:	da53      	bge.n	801ecc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec1c:	4699      	mov	r9, r3
 801ec1e:	46a2      	mov	sl, r4
 801ec20:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ec24:	f1b9 0f00 	cmp.w	r9, #0
 801ec28:	dd54      	ble.n	801ecd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ec2a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ec2e:	140d      	asrs	r5, r1, #16
 801ec30:	1410      	asrs	r0, r2, #16
 801ec32:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec36:	fb07 5000 	mla	r0, r7, r0, r5
 801ec3a:	9d02      	ldr	r5, [sp, #8]
 801ec3c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ec40:	f8ba 5000 	ldrh.w	r5, [sl]
 801ec44:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ec48:	122f      	asrs	r7, r5, #8
 801ec4a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ec4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ec56:	00ed      	lsls	r5, r5, #3
 801ec58:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ec5c:	fb17 f706 	smulbb	r7, r7, r6
 801ec60:	b2ed      	uxtb	r5, r5
 801ec62:	fb18 f806 	smulbb	r8, r8, r6
 801ec66:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ec6a:	10c7      	asrs	r7, r0, #3
 801ec6c:	fb15 f506 	smulbb	r5, r5, r6
 801ec70:	00c0      	lsls	r0, r0, #3
 801ec72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ec76:	fa1f fc8c 	uxth.w	ip, ip
 801ec7a:	b2c0      	uxtb	r0, r0
 801ec7c:	fb07 870b 	mla	r7, r7, fp, r8
 801ec80:	fb00 500b 	mla	r0, r0, fp, r5
 801ec84:	f10c 0501 	add.w	r5, ip, #1
 801ec88:	b2bf      	uxth	r7, r7
 801ec8a:	b280      	uxth	r0, r0
 801ec8c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ec90:	f107 0801 	add.w	r8, r7, #1
 801ec94:	1c45      	adds	r5, r0, #1
 801ec96:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ec9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ec9e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801eca2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eca4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801eca8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ecac:	4401      	add	r1, r0
 801ecae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ecb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecb4:	ea45 0c0c 	orr.w	ip, r5, ip
 801ecb8:	4402      	add	r2, r0
 801ecba:	ea4c 0c08 	orr.w	ip, ip, r8
 801ecbe:	f82a cb02 	strh.w	ip, [sl], #2
 801ecc2:	e7af      	b.n	801ec24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ecc4:	f04f 0800 	mov.w	r8, #0
 801ecc8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801eccc:	eb03 0008 	add.w	r0, r3, r8
 801ecd0:	2800      	cmp	r0, #0
 801ecd2:	dc41      	bgt.n	801ed58 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ecd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ecd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ecdc:	9b00      	ldr	r3, [sp, #0]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	f340 8095 	ble.w	801ee0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ece4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ece8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecf2:	eef0 6a62 	vmov.f32	s13, s5
 801ecf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ecfa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed02:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ed06:	eef0 6a43 	vmov.f32	s13, s6
 801ed0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed0e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ed12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed2a:	ee12 2a90 	vmov	r2, s5
 801ed2e:	eef0 2a47 	vmov.f32	s5, s14
 801ed32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed36:	ee13 2a10 	vmov	r2, s6
 801ed3a:	9311      	str	r3, [sp, #68]	; 0x44
 801ed3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed3e:	eeb0 3a67 	vmov.f32	s6, s15
 801ed42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed46:	9312      	str	r3, [sp, #72]	; 0x48
 801ed48:	9b00      	ldr	r3, [sp, #0]
 801ed4a:	9a03      	ldr	r2, [sp, #12]
 801ed4c:	3b01      	subs	r3, #1
 801ed4e:	9300      	str	r3, [sp, #0]
 801ed50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed52:	bf08      	it	eq
 801ed54:	4613      	moveq	r3, r2
 801ed56:	e72f      	b.n	801ebb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ed58:	140f      	asrs	r7, r1, #16
 801ed5a:	d451      	bmi.n	801ee00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ed5c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ed60:	42bd      	cmp	r5, r7
 801ed62:	dd4d      	ble.n	801ee00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ed64:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed68:	d44a      	bmi.n	801ee00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ed6a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ed6e:	4560      	cmp	r0, ip
 801ed70:	dd46      	ble.n	801ee00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ed72:	b22d      	sxth	r5, r5
 801ed74:	9802      	ldr	r0, [sp, #8]
 801ed76:	fb0c 7505 	mla	r5, ip, r5, r7
 801ed7a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801ed7e:	f06f 0501 	mvn.w	r5, #1
 801ed82:	fb05 fb08 	mul.w	fp, r5, r8
 801ed86:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ed8a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ed8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ed92:	122f      	asrs	r7, r5, #8
 801ed94:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ed98:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed9c:	00ed      	lsls	r5, r5, #3
 801ed9e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801eda2:	fb17 f706 	smulbb	r7, r7, r6
 801eda6:	b2ed      	uxtb	r5, r5
 801eda8:	fb19 f906 	smulbb	r9, r9, r6
 801edac:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801edb0:	10c7      	asrs	r7, r0, #3
 801edb2:	fb15 f506 	smulbb	r5, r5, r6
 801edb6:	00c0      	lsls	r0, r0, #3
 801edb8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801edbc:	fa1f fc8c 	uxth.w	ip, ip
 801edc0:	b2c0      	uxtb	r0, r0
 801edc2:	fb07 970a 	mla	r7, r7, sl, r9
 801edc6:	fb00 500a 	mla	r0, r0, sl, r5
 801edca:	f10c 0501 	add.w	r5, ip, #1
 801edce:	b2bf      	uxth	r7, r7
 801edd0:	b280      	uxth	r0, r0
 801edd2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801edd6:	f107 0901 	add.w	r9, r7, #1
 801edda:	1c45      	adds	r5, r0, #1
 801eddc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ede0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ede4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ede8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801edec:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801edf0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801edf4:	ea45 0c0c 	orr.w	ip, r5, ip
 801edf8:	ea4c 0c09 	orr.w	ip, ip, r9
 801edfc:	f824 c00b 	strh.w	ip, [r4, fp]
 801ee00:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee02:	f108 38ff 	add.w	r8, r8, #4294967295
 801ee06:	4401      	add	r1, r0
 801ee08:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee0a:	4402      	add	r2, r0
 801ee0c:	e75e      	b.n	801eccc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ee0e:	b005      	add	sp, #20
 801ee10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee18:	b085      	sub	sp, #20
 801ee1a:	4693      	mov	fp, r2
 801ee1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee20:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ee22:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ee24:	6870      	ldr	r0, [r6, #4]
 801ee26:	9101      	str	r1, [sp, #4]
 801ee28:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ee2c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ee30:	fb00 2404 	mla	r4, r0, r4, r2
 801ee34:	6832      	ldr	r2, [r6, #0]
 801ee36:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ee3a:	682a      	ldr	r2, [r5, #0]
 801ee3c:	9202      	str	r2, [sp, #8]
 801ee3e:	9a01      	ldr	r2, [sp, #4]
 801ee40:	2a00      	cmp	r2, #0
 801ee42:	dc03      	bgt.n	801ee4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ee44:	f1bb 0f00 	cmp.w	fp, #0
 801ee48:	f340 809a 	ble.w	801ef80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ee4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee4e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ee52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ee56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ee58:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ee5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	dd0c      	ble.n	801ee7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ee64:	1406      	asrs	r6, r0, #16
 801ee66:	d405      	bmi.n	801ee74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ee68:	454e      	cmp	r6, r9
 801ee6a:	da03      	bge.n	801ee74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ee6c:	1416      	asrs	r6, r2, #16
 801ee6e:	d401      	bmi.n	801ee74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ee70:	4546      	cmp	r6, r8
 801ee72:	db05      	blt.n	801ee80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ee74:	4470      	add	r0, lr
 801ee76:	4462      	add	r2, ip
 801ee78:	3b01      	subs	r3, #1
 801ee7a:	3402      	adds	r4, #2
 801ee7c:	e7f0      	b.n	801ee60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ee7e:	d00f      	beq.n	801eea0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee80:	1e5e      	subs	r6, r3, #1
 801ee82:	fb0e 0706 	mla	r7, lr, r6, r0
 801ee86:	143f      	asrs	r7, r7, #16
 801ee88:	d541      	bpl.n	801ef0e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ee8a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ee8e:	4698      	mov	r8, r3
 801ee90:	9603      	str	r6, [sp, #12]
 801ee92:	f1b8 0f00 	cmp.w	r8, #0
 801ee96:	dc56      	bgt.n	801ef46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ee98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eea0:	9b01      	ldr	r3, [sp, #4]
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	dd6c      	ble.n	801ef80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801eea6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eeac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeb0:	eeb0 6a62 	vmov.f32	s12, s5
 801eeb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eeb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eec0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eec4:	eeb0 6a43 	vmov.f32	s12, s6
 801eec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eecc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eed0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eed4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eed8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eedc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eee0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eee4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eee8:	ee12 2a90 	vmov	r2, s5
 801eeec:	eef0 2a47 	vmov.f32	s5, s14
 801eef0:	fb92 fef3 	sdiv	lr, r2, r3
 801eef4:	ee13 2a10 	vmov	r2, s6
 801eef8:	eeb0 3a67 	vmov.f32	s6, s15
 801eefc:	fb92 fcf3 	sdiv	ip, r2, r3
 801ef00:	9b01      	ldr	r3, [sp, #4]
 801ef02:	3b01      	subs	r3, #1
 801ef04:	9301      	str	r3, [sp, #4]
 801ef06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef08:	bf08      	it	eq
 801ef0a:	465b      	moveq	r3, fp
 801ef0c:	e797      	b.n	801ee3e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ef0e:	454f      	cmp	r7, r9
 801ef10:	dabb      	bge.n	801ee8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef12:	fb0c 2606 	mla	r6, ip, r6, r2
 801ef16:	1436      	asrs	r6, r6, #16
 801ef18:	d4b7      	bmi.n	801ee8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef1a:	4546      	cmp	r6, r8
 801ef1c:	dab5      	bge.n	801ee8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef1e:	461e      	mov	r6, r3
 801ef20:	46a0      	mov	r8, r4
 801ef22:	2e00      	cmp	r6, #0
 801ef24:	ddb8      	ble.n	801ee98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ef26:	1417      	asrs	r7, r2, #16
 801ef28:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ef2c:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ef30:	9902      	ldr	r1, [sp, #8]
 801ef32:	4470      	add	r0, lr
 801ef34:	4462      	add	r2, ip
 801ef36:	fb0a 9707 	mla	r7, sl, r7, r9
 801ef3a:	3e01      	subs	r6, #1
 801ef3c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801ef40:	f828 7b02 	strh.w	r7, [r8], #2
 801ef44:	e7ed      	b.n	801ef22 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801ef46:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ef4a:	d414      	bmi.n	801ef76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ef4c:	68ae      	ldr	r6, [r5, #8]
 801ef4e:	454e      	cmp	r6, r9
 801ef50:	dd11      	ble.n	801ef76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ef52:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ef56:	d40e      	bmi.n	801ef76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ef58:	68ef      	ldr	r7, [r5, #12]
 801ef5a:	4557      	cmp	r7, sl
 801ef5c:	dd0b      	ble.n	801ef76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ef5e:	b236      	sxth	r6, r6
 801ef60:	f06f 0101 	mvn.w	r1, #1
 801ef64:	9f02      	ldr	r7, [sp, #8]
 801ef66:	fb0a 9606 	mla	r6, sl, r6, r9
 801ef6a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801ef6e:	fb01 f608 	mul.w	r6, r1, r8
 801ef72:	9903      	ldr	r1, [sp, #12]
 801ef74:	538f      	strh	r7, [r1, r6]
 801ef76:	4470      	add	r0, lr
 801ef78:	4462      	add	r2, ip
 801ef7a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ef7e:	e788      	b.n	801ee92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ef80:	b005      	add	sp, #20
 801ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef8a:	b087      	sub	sp, #28
 801ef8c:	468b      	mov	fp, r1
 801ef8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef92:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ef94:	9203      	str	r2, [sp, #12]
 801ef96:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ef9a:	6841      	ldr	r1, [r0, #4]
 801ef9c:	9204      	str	r2, [sp, #16]
 801ef9e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801efa2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801efa6:	fb01 2505 	mla	r5, r1, r5, r2
 801efaa:	6802      	ldr	r2, [r0, #0]
 801efac:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801efb0:	f8d9 2000 	ldr.w	r2, [r9]
 801efb4:	9201      	str	r2, [sp, #4]
 801efb6:	f1bb 0f00 	cmp.w	fp, #0
 801efba:	dc03      	bgt.n	801efc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801efbc:	9a03      	ldr	r2, [sp, #12]
 801efbe:	2a00      	cmp	r2, #0
 801efc0:	f340 8158 	ble.w	801f274 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801efc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efc6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801efca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801efce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efd0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801efd4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801efd8:	2b00      	cmp	r3, #0
 801efda:	dd0e      	ble.n	801effa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801efdc:	1402      	asrs	r2, r0, #16
 801efde:	d405      	bmi.n	801efec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efe0:	42ba      	cmp	r2, r7
 801efe2:	da03      	bge.n	801efec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efe4:	140a      	asrs	r2, r1, #16
 801efe6:	d401      	bmi.n	801efec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efe8:	42b2      	cmp	r2, r6
 801efea:	db07      	blt.n	801effc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801efec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efee:	3b01      	subs	r3, #1
 801eff0:	3502      	adds	r5, #2
 801eff2:	4410      	add	r0, r2
 801eff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eff6:	4411      	add	r1, r2
 801eff8:	e7ee      	b.n	801efd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801effa:	d017      	beq.n	801f02c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801effc:	1e5a      	subs	r2, r3, #1
 801effe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f000:	fb04 0402 	mla	r4, r4, r2, r0
 801f004:	1424      	asrs	r4, r4, #16
 801f006:	d409      	bmi.n	801f01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f008:	42bc      	cmp	r4, r7
 801f00a:	da07      	bge.n	801f01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f00c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f00e:	fb04 1202 	mla	r2, r4, r2, r1
 801f012:	1412      	asrs	r2, r2, #16
 801f014:	d402      	bmi.n	801f01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f016:	42b2      	cmp	r2, r6
 801f018:	f2c0 80bf 	blt.w	801f19a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f01c:	2700      	movs	r7, #0
 801f01e:	19da      	adds	r2, r3, r7
 801f020:	2a00      	cmp	r2, #0
 801f022:	dc3e      	bgt.n	801f0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f028:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f02c:	f1bb 0f00 	cmp.w	fp, #0
 801f030:	f340 8120 	ble.w	801f274 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f034:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f03a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f03e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f042:	eeb0 6a62 	vmov.f32	s12, s5
 801f046:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f04a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f04e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f052:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f056:	eeb0 6a43 	vmov.f32	s12, s6
 801f05a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f05e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f062:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f066:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f06a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f06e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f072:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f076:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f07a:	ee12 2a90 	vmov	r2, s5
 801f07e:	eef0 2a47 	vmov.f32	s5, s14
 801f082:	fb92 f3f3 	sdiv	r3, r2, r3
 801f086:	ee13 2a10 	vmov	r2, s6
 801f08a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f08e:	eeb0 3a67 	vmov.f32	s6, s15
 801f092:	fb92 f3f3 	sdiv	r3, r2, r3
 801f096:	9a03      	ldr	r2, [sp, #12]
 801f098:	9314      	str	r3, [sp, #80]	; 0x50
 801f09a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f09c:	bf08      	it	eq
 801f09e:	4613      	moveq	r3, r2
 801f0a0:	e789      	b.n	801efb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f0a2:	1406      	asrs	r6, r0, #16
 801f0a4:	d42d      	bmi.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f0a6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801f0aa:	42b4      	cmp	r4, r6
 801f0ac:	dd29      	ble.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f0ae:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801f0b2:	d426      	bmi.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f0b4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f0b8:	4562      	cmp	r2, ip
 801f0ba:	dd22      	ble.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f0bc:	b224      	sxth	r4, r4
 801f0be:	9a01      	ldr	r2, [sp, #4]
 801f0c0:	fb0c 6404 	mla	r4, ip, r4, r6
 801f0c4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801f0c8:	0e22      	lsrs	r2, r4, #24
 801f0ca:	d01a      	beq.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f0cc:	9e04      	ldr	r6, [sp, #16]
 801f0ce:	4372      	muls	r2, r6
 801f0d0:	1c56      	adds	r6, r2, #1
 801f0d2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f0d6:	0a26      	lsrs	r6, r4, #8
 801f0d8:	1212      	asrs	r2, r2, #8
 801f0da:	9605      	str	r6, [sp, #20]
 801f0dc:	2aff      	cmp	r2, #255	; 0xff
 801f0de:	d116      	bne.n	801f10e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f0e0:	f06f 0201 	mvn.w	r2, #1
 801f0e4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801f0e8:	fb02 fc07 	mul.w	ip, r2, r7
 801f0ec:	0962      	lsrs	r2, r4, #5
 801f0ee:	f026 0607 	bic.w	r6, r6, #7
 801f0f2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f0f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f0fa:	4316      	orrs	r6, r2
 801f0fc:	4326      	orrs	r6, r4
 801f0fe:	f825 600c 	strh.w	r6, [r5, ip]
 801f102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f104:	3f01      	subs	r7, #1
 801f106:	4410      	add	r0, r2
 801f108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f10a:	4411      	add	r1, r2
 801f10c:	e787      	b.n	801f01e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f10e:	f06f 0601 	mvn.w	r6, #1
 801f112:	fa1f fa82 	uxth.w	sl, r2
 801f116:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801f11a:	43d2      	mvns	r2, r2
 801f11c:	437e      	muls	r6, r7
 801f11e:	b2e4      	uxtb	r4, r4
 801f120:	fb1c fc0a 	smulbb	ip, ip, sl
 801f124:	b2d2      	uxtb	r2, r2
 801f126:	f835 8006 	ldrh.w	r8, [r5, r6]
 801f12a:	fb14 f40a 	smulbb	r4, r4, sl
 801f12e:	9602      	str	r6, [sp, #8]
 801f130:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f134:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f138:	fb16 f60a 	smulbb	r6, r6, sl
 801f13c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f140:	fb0e ce02 	mla	lr, lr, r2, ip
 801f144:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801f148:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f14c:	fa1f fe8e 	uxth.w	lr, lr
 801f150:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f154:	fa5f f888 	uxtb.w	r8, r8
 801f158:	fb0c 6c02 	mla	ip, ip, r2, r6
 801f15c:	fb08 4402 	mla	r4, r8, r2, r4
 801f160:	f10e 0201 	add.w	r2, lr, #1
 801f164:	fa1f fc8c 	uxth.w	ip, ip
 801f168:	b2a4      	uxth	r4, r4
 801f16a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f16e:	9a02      	ldr	r2, [sp, #8]
 801f170:	1c66      	adds	r6, r4, #1
 801f172:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f176:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f17a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f17e:	ea46 0e0e 	orr.w	lr, r6, lr
 801f182:	f10c 0601 	add.w	r6, ip, #1
 801f186:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f18a:	0976      	lsrs	r6, r6, #5
 801f18c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f190:	ea4e 0e06 	orr.w	lr, lr, r6
 801f194:	f825 e002 	strh.w	lr, [r5, r2]
 801f198:	e7b3      	b.n	801f102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f19a:	f04f 0800 	mov.w	r8, #0
 801f19e:	eba3 0208 	sub.w	r2, r3, r8
 801f1a2:	2a00      	cmp	r2, #0
 801f1a4:	f77f af3e 	ble.w	801f024 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f1a8:	1404      	asrs	r4, r0, #16
 801f1aa:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801f1ae:	140a      	asrs	r2, r1, #16
 801f1b0:	fb06 4202 	mla	r2, r6, r2, r4
 801f1b4:	9c01      	ldr	r4, [sp, #4]
 801f1b6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801f1ba:	0e22      	lsrs	r2, r4, #24
 801f1bc:	d015      	beq.n	801f1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801f1be:	9e04      	ldr	r6, [sp, #16]
 801f1c0:	4372      	muls	r2, r6
 801f1c2:	1c56      	adds	r6, r2, #1
 801f1c4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f1c8:	0a26      	lsrs	r6, r4, #8
 801f1ca:	1212      	asrs	r2, r2, #8
 801f1cc:	2aff      	cmp	r2, #255	; 0xff
 801f1ce:	d113      	bne.n	801f1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f1d0:	0962      	lsrs	r2, r4, #5
 801f1d2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801f1d6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f1da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f1de:	f026 0607 	bic.w	r6, r6, #7
 801f1e2:	4316      	orrs	r6, r2
 801f1e4:	4326      	orrs	r6, r4
 801f1e6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801f1ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1ec:	f108 0801 	add.w	r8, r8, #1
 801f1f0:	4410      	add	r0, r2
 801f1f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1f4:	4411      	add	r1, r2
 801f1f6:	e7d2      	b.n	801f19e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f1f8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801f1fc:	fa1f fa82 	uxth.w	sl, r2
 801f200:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801f204:	43d2      	mvns	r2, r2
 801f206:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f20a:	fb17 f70a 	smulbb	r7, r7, sl
 801f20e:	b2d2      	uxtb	r2, r2
 801f210:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f214:	b2e4      	uxtb	r4, r4
 801f216:	b2f6      	uxtb	r6, r6
 801f218:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f21c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f220:	fb14 f40a 	smulbb	r4, r4, sl
 801f224:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f228:	fa1f fc8c 	uxth.w	ip, ip
 801f22c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f230:	fb16 f60a 	smulbb	r6, r6, sl
 801f234:	fa5f fe8e 	uxtb.w	lr, lr
 801f238:	fb0e 4402 	mla	r4, lr, r2, r4
 801f23c:	fb07 6702 	mla	r7, r7, r2, r6
 801f240:	f10c 0201 	add.w	r2, ip, #1
 801f244:	b2a4      	uxth	r4, r4
 801f246:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f24a:	1c66      	adds	r6, r4, #1
 801f24c:	b2bf      	uxth	r7, r7
 801f24e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f252:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801f256:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f25a:	ea46 0c0c 	orr.w	ip, r6, ip
 801f25e:	1c7e      	adds	r6, r7, #1
 801f260:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801f264:	0976      	lsrs	r6, r6, #5
 801f266:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f26a:	ea4c 0c06 	orr.w	ip, ip, r6
 801f26e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801f272:	e7ba      	b.n	801f1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801f274:	b007      	add	sp, #28
 801f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f27c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f280:	b085      	sub	sp, #20
 801f282:	468b      	mov	fp, r1
 801f284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f288:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f28a:	9203      	str	r2, [sp, #12]
 801f28c:	6841      	ldr	r1, [r0, #4]
 801f28e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f292:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f296:	fb01 2404 	mla	r4, r1, r4, r2
 801f29a:	6802      	ldr	r2, [r0, #0]
 801f29c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f2a0:	f8d8 2000 	ldr.w	r2, [r8]
 801f2a4:	9201      	str	r2, [sp, #4]
 801f2a6:	f1bb 0f00 	cmp.w	fp, #0
 801f2aa:	dc03      	bgt.n	801f2b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f2ac:	9a03      	ldr	r2, [sp, #12]
 801f2ae:	2a00      	cmp	r2, #0
 801f2b0:	f340 814f 	ble.w	801f552 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801f2b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f2b6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f2ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f2be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2c0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f2c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	dd0e      	ble.n	801f2ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f2cc:	1408      	asrs	r0, r1, #16
 801f2ce:	d405      	bmi.n	801f2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f2d0:	42b8      	cmp	r0, r7
 801f2d2:	da03      	bge.n	801f2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f2d4:	1410      	asrs	r0, r2, #16
 801f2d6:	d401      	bmi.n	801f2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f2d8:	42b0      	cmp	r0, r6
 801f2da:	db07      	blt.n	801f2ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f2dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f2de:	3b01      	subs	r3, #1
 801f2e0:	3402      	adds	r4, #2
 801f2e2:	4401      	add	r1, r0
 801f2e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f2e6:	4402      	add	r2, r0
 801f2e8:	e7ee      	b.n	801f2c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f2ea:	d017      	beq.n	801f31c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f2ec:	1e58      	subs	r0, r3, #1
 801f2ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f2f0:	fb05 1500 	mla	r5, r5, r0, r1
 801f2f4:	142d      	asrs	r5, r5, #16
 801f2f6:	d409      	bmi.n	801f30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2f8:	42bd      	cmp	r5, r7
 801f2fa:	da07      	bge.n	801f30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f2fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f2fe:	fb05 2000 	mla	r0, r5, r0, r2
 801f302:	1400      	asrs	r0, r0, #16
 801f304:	d402      	bmi.n	801f30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f306:	42b0      	cmp	r0, r6
 801f308:	f2c0 80ba 	blt.w	801f480 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f30c:	2600      	movs	r6, #0
 801f30e:	1998      	adds	r0, r3, r6
 801f310:	2800      	cmp	r0, #0
 801f312:	dc3e      	bgt.n	801f392 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f314:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f318:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f31c:	f1bb 0f00 	cmp.w	fp, #0
 801f320:	f340 8117 	ble.w	801f552 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801f324:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f32a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f32e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f332:	eeb0 6a62 	vmov.f32	s12, s5
 801f336:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f33a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f33e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f342:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f346:	eeb0 6a43 	vmov.f32	s12, s6
 801f34a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f34e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f352:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f356:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f35a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f35e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f362:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f36a:	ee12 2a90 	vmov	r2, s5
 801f36e:	eef0 2a47 	vmov.f32	s5, s14
 801f372:	fb92 f3f3 	sdiv	r3, r2, r3
 801f376:	ee13 2a10 	vmov	r2, s6
 801f37a:	9311      	str	r3, [sp, #68]	; 0x44
 801f37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f37e:	eeb0 3a67 	vmov.f32	s6, s15
 801f382:	fb92 f3f3 	sdiv	r3, r2, r3
 801f386:	9a03      	ldr	r2, [sp, #12]
 801f388:	9312      	str	r3, [sp, #72]	; 0x48
 801f38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f38c:	bf08      	it	eq
 801f38e:	4613      	moveq	r3, r2
 801f390:	e789      	b.n	801f2a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f392:	140f      	asrs	r7, r1, #16
 801f394:	d424      	bmi.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f396:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f39a:	42bd      	cmp	r5, r7
 801f39c:	dd20      	ble.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f39e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f3a2:	d41d      	bmi.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f3a4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801f3a8:	4560      	cmp	r0, ip
 801f3aa:	dd19      	ble.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f3ac:	b22d      	sxth	r5, r5
 801f3ae:	9801      	ldr	r0, [sp, #4]
 801f3b0:	fb0c 7505 	mla	r5, ip, r5, r7
 801f3b4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801f3b8:	0e07      	lsrs	r7, r0, #24
 801f3ba:	2fff      	cmp	r7, #255	; 0xff
 801f3bc:	d116      	bne.n	801f3ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f3be:	f06f 0501 	mvn.w	r5, #1
 801f3c2:	fb05 f706 	mul.w	r7, r5, r6
 801f3c6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f3ca:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f3ce:	0945      	lsrs	r5, r0, #5
 801f3d0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f3d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f3d8:	ea4c 0505 	orr.w	r5, ip, r5
 801f3dc:	4305      	orrs	r5, r0
 801f3de:	53e5      	strh	r5, [r4, r7]
 801f3e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3e2:	3e01      	subs	r6, #1
 801f3e4:	4401      	add	r1, r0
 801f3e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f3e8:	4402      	add	r2, r0
 801f3ea:	e790      	b.n	801f30e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f3ec:	b2fd      	uxtb	r5, r7
 801f3ee:	2f00      	cmp	r7, #0
 801f3f0:	d0f6      	beq.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f3f2:	f06f 0701 	mvn.w	r7, #1
 801f3f6:	fa1f f985 	uxth.w	r9, r5
 801f3fa:	43ed      	mvns	r5, r5
 801f3fc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f400:	4377      	muls	r7, r6
 801f402:	fb1a fa09 	smulbb	sl, sl, r9
 801f406:	b2ed      	uxtb	r5, r5
 801f408:	f834 e007 	ldrh.w	lr, [r4, r7]
 801f40c:	9702      	str	r7, [sp, #8]
 801f40e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f412:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f416:	fb17 f709 	smulbb	r7, r7, r9
 801f41a:	b2c0      	uxtb	r0, r0
 801f41c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f420:	fb10 f009 	smulbb	r0, r0, r9
 801f424:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f428:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f42c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f430:	fa1f fc8c 	uxth.w	ip, ip
 801f434:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f438:	fa5f fe8e 	uxtb.w	lr, lr
 801f43c:	fb07 a705 	mla	r7, r7, r5, sl
 801f440:	fb0e 0005 	mla	r0, lr, r5, r0
 801f444:	f10c 0501 	add.w	r5, ip, #1
 801f448:	b2bf      	uxth	r7, r7
 801f44a:	b280      	uxth	r0, r0
 801f44c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f450:	f100 0a01 	add.w	sl, r0, #1
 801f454:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f458:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f45c:	9802      	ldr	r0, [sp, #8]
 801f45e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f462:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f466:	f107 0a01 	add.w	sl, r7, #1
 801f46a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f46e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f472:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f476:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f47a:	f824 c000 	strh.w	ip, [r4, r0]
 801f47e:	e7af      	b.n	801f3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f480:	f04f 0e00 	mov.w	lr, #0
 801f484:	eba3 000e 	sub.w	r0, r3, lr
 801f488:	2800      	cmp	r0, #0
 801f48a:	f77f af43 	ble.w	801f314 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f48e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f492:	140d      	asrs	r5, r1, #16
 801f494:	1410      	asrs	r0, r2, #16
 801f496:	fb06 5000 	mla	r0, r6, r0, r5
 801f49a:	9d01      	ldr	r5, [sp, #4]
 801f49c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801f4a0:	0e2e      	lsrs	r6, r5, #24
 801f4a2:	2eff      	cmp	r6, #255	; 0xff
 801f4a4:	d112      	bne.n	801f4cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801f4a6:	482c      	ldr	r0, [pc, #176]	; (801f558 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801f4a8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801f4ac:	0968      	lsrs	r0, r5, #5
 801f4ae:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f4b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4b6:	4330      	orrs	r0, r6
 801f4b8:	4328      	orrs	r0, r5
 801f4ba:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801f4be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f4c0:	f10e 0e01 	add.w	lr, lr, #1
 801f4c4:	4401      	add	r1, r0
 801f4c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f4c8:	4402      	add	r2, r0
 801f4ca:	e7db      	b.n	801f484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f4cc:	b2f0      	uxtb	r0, r6
 801f4ce:	2e00      	cmp	r6, #0
 801f4d0:	d0f5      	beq.n	801f4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801f4d2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f4d6:	fa1f f980 	uxth.w	r9, r0
 801f4da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f4de:	43c0      	mvns	r0, r0
 801f4e0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f4e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f4e8:	fb16 f609 	smulbb	r6, r6, r9
 801f4ec:	b2c0      	uxtb	r0, r0
 801f4ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f4f2:	b2ed      	uxtb	r5, r5
 801f4f4:	fb1a fa09 	smulbb	sl, sl, r9
 801f4f8:	fb07 6700 	mla	r7, r7, r0, r6
 801f4fc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f500:	fb15 f509 	smulbb	r5, r5, r9
 801f504:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f508:	b2bf      	uxth	r7, r7
 801f50a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f50e:	fa5f fc8c 	uxtb.w	ip, ip
 801f512:	fb06 a600 	mla	r6, r6, r0, sl
 801f516:	fb0c 5500 	mla	r5, ip, r0, r5
 801f51a:	1c78      	adds	r0, r7, #1
 801f51c:	b2b6      	uxth	r6, r6
 801f51e:	b2ad      	uxth	r5, r5
 801f520:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f524:	f105 0a01 	add.w	sl, r5, #1
 801f528:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f52c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f530:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f534:	ea4a 0707 	orr.w	r7, sl, r7
 801f538:	f106 0a01 	add.w	sl, r6, #1
 801f53c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f540:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f544:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f548:	ea47 070a 	orr.w	r7, r7, sl
 801f54c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801f550:	e7b5      	b.n	801f4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801f552:	b005      	add	sp, #20
 801f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f558:	fffff800 	.word	0xfffff800

0801f55c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f560:	b087      	sub	sp, #28
 801f562:	468b      	mov	fp, r1
 801f564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f568:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f56a:	9203      	str	r2, [sp, #12]
 801f56c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f570:	6841      	ldr	r1, [r0, #4]
 801f572:	9204      	str	r2, [sp, #16]
 801f574:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f578:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f57c:	fb01 2404 	mla	r4, r1, r4, r2
 801f580:	6802      	ldr	r2, [r0, #0]
 801f582:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f586:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801f58a:	3201      	adds	r2, #1
 801f58c:	f022 0201 	bic.w	r2, r2, #1
 801f590:	9200      	str	r2, [sp, #0]
 801f592:	f8d9 2000 	ldr.w	r2, [r9]
 801f596:	9201      	str	r2, [sp, #4]
 801f598:	f1bb 0f00 	cmp.w	fp, #0
 801f59c:	dc03      	bgt.n	801f5a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f59e:	9a03      	ldr	r2, [sp, #12]
 801f5a0:	2a00      	cmp	r2, #0
 801f5a2:	f340 816a 	ble.w	801f87a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f5a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f5a8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f5ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5b2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f5b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	dd0e      	ble.n	801f5dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f5be:	1402      	asrs	r2, r0, #16
 801f5c0:	d405      	bmi.n	801f5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5c2:	42ba      	cmp	r2, r7
 801f5c4:	da03      	bge.n	801f5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5c6:	140a      	asrs	r2, r1, #16
 801f5c8:	d401      	bmi.n	801f5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5ca:	42b2      	cmp	r2, r6
 801f5cc:	db07      	blt.n	801f5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f5ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f5d0:	3b01      	subs	r3, #1
 801f5d2:	3402      	adds	r4, #2
 801f5d4:	4410      	add	r0, r2
 801f5d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f5d8:	4411      	add	r1, r2
 801f5da:	e7ee      	b.n	801f5ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f5dc:	d017      	beq.n	801f60e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f5de:	1e5a      	subs	r2, r3, #1
 801f5e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f5e2:	fb05 0502 	mla	r5, r5, r2, r0
 801f5e6:	142d      	asrs	r5, r5, #16
 801f5e8:	d409      	bmi.n	801f5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f5ea:	42bd      	cmp	r5, r7
 801f5ec:	da07      	bge.n	801f5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f5ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f5f0:	fb05 1202 	mla	r2, r5, r2, r1
 801f5f4:	1412      	asrs	r2, r2, #16
 801f5f6:	d402      	bmi.n	801f5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f5f8:	42b2      	cmp	r2, r6
 801f5fa:	f2c0 80c8 	blt.w	801f78e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f5fe:	2700      	movs	r7, #0
 801f600:	19da      	adds	r2, r3, r7
 801f602:	2a00      	cmp	r2, #0
 801f604:	dc3e      	bgt.n	801f684 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f60a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f60e:	f1bb 0f00 	cmp.w	fp, #0
 801f612:	f340 8132 	ble.w	801f87a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f616:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f61a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f61c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f620:	f1bb 0b01 	subs.w	fp, fp, #1
 801f624:	eeb0 6a62 	vmov.f32	s12, s5
 801f628:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f62c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f630:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f634:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f638:	eeb0 6a43 	vmov.f32	s12, s6
 801f63c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f640:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f644:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f648:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f64c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f650:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f654:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f658:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f65c:	ee12 2a90 	vmov	r2, s5
 801f660:	eef0 2a47 	vmov.f32	s5, s14
 801f664:	fb92 f3f3 	sdiv	r3, r2, r3
 801f668:	ee13 2a10 	vmov	r2, s6
 801f66c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f670:	eeb0 3a67 	vmov.f32	s6, s15
 801f674:	fb92 f3f3 	sdiv	r3, r2, r3
 801f678:	9a03      	ldr	r2, [sp, #12]
 801f67a:	9314      	str	r3, [sp, #80]	; 0x50
 801f67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f67e:	bf08      	it	eq
 801f680:	4613      	moveq	r3, r2
 801f682:	e789      	b.n	801f598 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f684:	1405      	asrs	r5, r0, #16
 801f686:	d436      	bmi.n	801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f688:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801f68c:	42aa      	cmp	r2, r5
 801f68e:	dd32      	ble.n	801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f690:	140e      	asrs	r6, r1, #16
 801f692:	d430      	bmi.n	801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f694:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f698:	42b2      	cmp	r2, r6
 801f69a:	dd2c      	ble.n	801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f69c:	9a00      	ldr	r2, [sp, #0]
 801f69e:	fb06 5502 	mla	r5, r6, r2, r5
 801f6a2:	9e01      	ldr	r6, [sp, #4]
 801f6a4:	086a      	lsrs	r2, r5, #1
 801f6a6:	5cb2      	ldrb	r2, [r6, r2]
 801f6a8:	07ee      	lsls	r6, r5, #31
 801f6aa:	bf54      	ite	pl
 801f6ac:	f002 020f 	andpl.w	r2, r2, #15
 801f6b0:	1112      	asrmi	r2, r2, #4
 801f6b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f6b6:	b2d2      	uxtb	r2, r2
 801f6b8:	b1ea      	cbz	r2, 801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f6ba:	9d04      	ldr	r5, [sp, #16]
 801f6bc:	436a      	muls	r2, r5
 801f6be:	1c55      	adds	r5, r2, #1
 801f6c0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f6c4:	4d6e      	ldr	r5, [pc, #440]	; (801f880 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f6c6:	1212      	asrs	r2, r2, #8
 801f6c8:	682d      	ldr	r5, [r5, #0]
 801f6ca:	2aff      	cmp	r2, #255	; 0xff
 801f6cc:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801f6d0:	9605      	str	r6, [sp, #20]
 801f6d2:	d116      	bne.n	801f702 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f6d4:	f06f 0201 	mvn.w	r2, #1
 801f6d8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801f6dc:	fb02 fc07 	mul.w	ip, r2, r7
 801f6e0:	096a      	lsrs	r2, r5, #5
 801f6e2:	f026 0607 	bic.w	r6, r6, #7
 801f6e6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f6ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f6ee:	4316      	orrs	r6, r2
 801f6f0:	432e      	orrs	r6, r5
 801f6f2:	f824 600c 	strh.w	r6, [r4, ip]
 801f6f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f6f8:	3f01      	subs	r7, #1
 801f6fa:	4410      	add	r0, r2
 801f6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f6fe:	4411      	add	r1, r2
 801f700:	e77e      	b.n	801f600 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f702:	f06f 0601 	mvn.w	r6, #1
 801f706:	fa1f fa82 	uxth.w	sl, r2
 801f70a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801f70e:	43d2      	mvns	r2, r2
 801f710:	437e      	muls	r6, r7
 801f712:	b2ed      	uxtb	r5, r5
 801f714:	fb1c fc0a 	smulbb	ip, ip, sl
 801f718:	b2d2      	uxtb	r2, r2
 801f71a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801f71e:	fb15 f50a 	smulbb	r5, r5, sl
 801f722:	9602      	str	r6, [sp, #8]
 801f724:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f728:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f72c:	fb16 f60a 	smulbb	r6, r6, sl
 801f730:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f734:	fb0e ce02 	mla	lr, lr, r2, ip
 801f738:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801f73c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f740:	fa1f fe8e 	uxth.w	lr, lr
 801f744:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f748:	fa5f f888 	uxtb.w	r8, r8
 801f74c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801f750:	fb08 5502 	mla	r5, r8, r2, r5
 801f754:	f10e 0201 	add.w	r2, lr, #1
 801f758:	fa1f fc8c 	uxth.w	ip, ip
 801f75c:	b2ad      	uxth	r5, r5
 801f75e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f762:	9a02      	ldr	r2, [sp, #8]
 801f764:	1c6e      	adds	r6, r5, #1
 801f766:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f76a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801f76e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f772:	ea46 0e0e 	orr.w	lr, r6, lr
 801f776:	f10c 0601 	add.w	r6, ip, #1
 801f77a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f77e:	0976      	lsrs	r6, r6, #5
 801f780:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f784:	ea4e 0e06 	orr.w	lr, lr, r6
 801f788:	f824 e002 	strh.w	lr, [r4, r2]
 801f78c:	e7b3      	b.n	801f6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f78e:	f04f 0800 	mov.w	r8, #0
 801f792:	eba3 0208 	sub.w	r2, r3, r8
 801f796:	2a00      	cmp	r2, #0
 801f798:	f77f af35 	ble.w	801f606 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f79c:	1402      	asrs	r2, r0, #16
 801f79e:	9e00      	ldr	r6, [sp, #0]
 801f7a0:	140d      	asrs	r5, r1, #16
 801f7a2:	fb06 2505 	mla	r5, r6, r5, r2
 801f7a6:	9e01      	ldr	r6, [sp, #4]
 801f7a8:	086a      	lsrs	r2, r5, #1
 801f7aa:	07ed      	lsls	r5, r5, #31
 801f7ac:	5cb2      	ldrb	r2, [r6, r2]
 801f7ae:	bf54      	ite	pl
 801f7b0:	f002 020f 	andpl.w	r2, r2, #15
 801f7b4:	1112      	asrmi	r2, r2, #4
 801f7b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f7ba:	b2d2      	uxtb	r2, r2
 801f7bc:	b1c2      	cbz	r2, 801f7f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f7be:	9d04      	ldr	r5, [sp, #16]
 801f7c0:	436a      	muls	r2, r5
 801f7c2:	1c55      	adds	r5, r2, #1
 801f7c4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f7c8:	4d2d      	ldr	r5, [pc, #180]	; (801f880 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f7ca:	1212      	asrs	r2, r2, #8
 801f7cc:	682e      	ldr	r6, [r5, #0]
 801f7ce:	2aff      	cmp	r2, #255	; 0xff
 801f7d0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801f7d4:	d113      	bne.n	801f7fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f7d6:	0972      	lsrs	r2, r6, #5
 801f7d8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801f7dc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f7e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f7e4:	f025 0507 	bic.w	r5, r5, #7
 801f7e8:	4315      	orrs	r5, r2
 801f7ea:	4335      	orrs	r5, r6
 801f7ec:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f7f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f7f2:	f108 0801 	add.w	r8, r8, #1
 801f7f6:	4410      	add	r0, r2
 801f7f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f7fa:	4411      	add	r1, r2
 801f7fc:	e7c9      	b.n	801f792 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f7fe:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f802:	fa1f fa82 	uxth.w	sl, r2
 801f806:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801f80a:	43d2      	mvns	r2, r2
 801f80c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f810:	fb17 f70a 	smulbb	r7, r7, sl
 801f814:	b2d2      	uxtb	r2, r2
 801f816:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f81a:	b2f6      	uxtb	r6, r6
 801f81c:	b2ed      	uxtb	r5, r5
 801f81e:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f822:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f826:	fb16 f60a 	smulbb	r6, r6, sl
 801f82a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f82e:	fa1f fc8c 	uxth.w	ip, ip
 801f832:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f836:	fb15 f50a 	smulbb	r5, r5, sl
 801f83a:	fa5f fe8e 	uxtb.w	lr, lr
 801f83e:	fb0e 6602 	mla	r6, lr, r2, r6
 801f842:	fb07 5702 	mla	r7, r7, r2, r5
 801f846:	f10c 0201 	add.w	r2, ip, #1
 801f84a:	b2b6      	uxth	r6, r6
 801f84c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f850:	1c75      	adds	r5, r6, #1
 801f852:	b2bf      	uxth	r7, r7
 801f854:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f858:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f85c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f860:	ea45 0c0c 	orr.w	ip, r5, ip
 801f864:	1c7d      	adds	r5, r7, #1
 801f866:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801f86a:	096d      	lsrs	r5, r5, #5
 801f86c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f870:	ea4c 0c05 	orr.w	ip, ip, r5
 801f874:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801f878:	e7ba      	b.n	801f7f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f87a:	b007      	add	sp, #28
 801f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f880:	200152dc 	.word	0x200152dc

0801f884 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f888:	b087      	sub	sp, #28
 801f88a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f88e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801fb98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f892:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f894:	9101      	str	r1, [sp, #4]
 801f896:	9205      	str	r2, [sp, #20]
 801f898:	6841      	ldr	r1, [r0, #4]
 801f89a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801f89e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f8a2:	fb01 2404 	mla	r4, r1, r4, r2
 801f8a6:	6802      	ldr	r2, [r0, #0]
 801f8a8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f8ac:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f8b0:	3201      	adds	r2, #1
 801f8b2:	f022 0201 	bic.w	r2, r2, #1
 801f8b6:	9202      	str	r2, [sp, #8]
 801f8b8:	f8db 2000 	ldr.w	r2, [fp]
 801f8bc:	9203      	str	r2, [sp, #12]
 801f8be:	9a01      	ldr	r2, [sp, #4]
 801f8c0:	2a00      	cmp	r2, #0
 801f8c2:	dc03      	bgt.n	801f8cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f8c4:	9a05      	ldr	r2, [sp, #20]
 801f8c6:	2a00      	cmp	r2, #0
 801f8c8:	f340 8162 	ble.w	801fb90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f8cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f8ce:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f8d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f8d8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f8dc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	dd0e      	ble.n	801f902 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f8e4:	1402      	asrs	r2, r0, #16
 801f8e6:	d405      	bmi.n	801f8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f8e8:	42ba      	cmp	r2, r7
 801f8ea:	da03      	bge.n	801f8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f8ec:	140a      	asrs	r2, r1, #16
 801f8ee:	d401      	bmi.n	801f8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f8f0:	42b2      	cmp	r2, r6
 801f8f2:	db07      	blt.n	801f904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f8f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f8f6:	3b01      	subs	r3, #1
 801f8f8:	3402      	adds	r4, #2
 801f8fa:	4410      	add	r0, r2
 801f8fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f8fe:	4411      	add	r1, r2
 801f900:	e7ee      	b.n	801f8e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f902:	d017      	beq.n	801f934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f904:	1e5a      	subs	r2, r3, #1
 801f906:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f908:	fb05 0502 	mla	r5, r5, r2, r0
 801f90c:	142d      	asrs	r5, r5, #16
 801f90e:	d409      	bmi.n	801f924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f910:	42bd      	cmp	r5, r7
 801f912:	da07      	bge.n	801f924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f914:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f916:	fb05 1202 	mla	r2, r5, r2, r1
 801f91a:	1412      	asrs	r2, r2, #16
 801f91c:	d402      	bmi.n	801f924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f91e:	42b2      	cmp	r2, r6
 801f920:	f2c0 80c3 	blt.w	801faaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801f924:	2500      	movs	r5, #0
 801f926:	195a      	adds	r2, r3, r5
 801f928:	2a00      	cmp	r2, #0
 801f92a:	dc3f      	bgt.n	801f9ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f92c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f930:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f934:	9b01      	ldr	r3, [sp, #4]
 801f936:	2b00      	cmp	r3, #0
 801f938:	f340 812a 	ble.w	801fb90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f93c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f942:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f946:	eeb0 6a62 	vmov.f32	s12, s5
 801f94a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f94e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f952:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f956:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f95a:	eeb0 6a43 	vmov.f32	s12, s6
 801f95e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f962:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f966:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f96a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f96e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f972:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f976:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f97a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f97e:	ee12 2a90 	vmov	r2, s5
 801f982:	eef0 2a47 	vmov.f32	s5, s14
 801f986:	fb92 f3f3 	sdiv	r3, r2, r3
 801f98a:	ee13 2a10 	vmov	r2, s6
 801f98e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f992:	eeb0 3a67 	vmov.f32	s6, s15
 801f996:	fb92 f3f3 	sdiv	r3, r2, r3
 801f99a:	9314      	str	r3, [sp, #80]	; 0x50
 801f99c:	9b01      	ldr	r3, [sp, #4]
 801f99e:	9a05      	ldr	r2, [sp, #20]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	9301      	str	r3, [sp, #4]
 801f9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9a6:	bf08      	it	eq
 801f9a8:	4613      	moveq	r3, r2
 801f9aa:	e788      	b.n	801f8be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f9ac:	1406      	asrs	r6, r0, #16
 801f9ae:	d42c      	bmi.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9b0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f9b4:	42b2      	cmp	r2, r6
 801f9b6:	dd28      	ble.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9b8:	140f      	asrs	r7, r1, #16
 801f9ba:	d426      	bmi.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9bc:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f9c0:	42ba      	cmp	r2, r7
 801f9c2:	dd22      	ble.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9c4:	9a02      	ldr	r2, [sp, #8]
 801f9c6:	fb07 6602 	mla	r6, r7, r2, r6
 801f9ca:	9f03      	ldr	r7, [sp, #12]
 801f9cc:	0872      	lsrs	r2, r6, #1
 801f9ce:	07f6      	lsls	r6, r6, #31
 801f9d0:	5cba      	ldrb	r2, [r7, r2]
 801f9d2:	bf54      	ite	pl
 801f9d4:	f002 020f 	andpl.w	r2, r2, #15
 801f9d8:	1112      	asrmi	r2, r2, #4
 801f9da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f9de:	b2d2      	uxtb	r2, r2
 801f9e0:	2aff      	cmp	r2, #255	; 0xff
 801f9e2:	d118      	bne.n	801fa16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f9e4:	f06f 0601 	mvn.w	r6, #1
 801f9e8:	f8d8 2000 	ldr.w	r2, [r8]
 801f9ec:	fb06 f705 	mul.w	r7, r6, r5
 801f9f0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801f9f4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801f9f8:	0956      	lsrs	r6, r2, #5
 801f9fa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f9fe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fa02:	ea4c 0606 	orr.w	r6, ip, r6
 801fa06:	4316      	orrs	r6, r2
 801fa08:	53e6      	strh	r6, [r4, r7]
 801fa0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa0c:	3d01      	subs	r5, #1
 801fa0e:	4410      	add	r0, r2
 801fa10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa12:	4411      	add	r1, r2
 801fa14:	e787      	b.n	801f926 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fa16:	2a00      	cmp	r2, #0
 801fa18:	d0f7      	beq.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa1a:	f06f 0601 	mvn.w	r6, #1
 801fa1e:	f8d8 c000 	ldr.w	ip, [r8]
 801fa22:	fa1f f982 	uxth.w	r9, r2
 801fa26:	43d2      	mvns	r2, r2
 801fa28:	436e      	muls	r6, r5
 801fa2a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801fa2e:	b2d2      	uxtb	r2, r2
 801fa30:	f834 e006 	ldrh.w	lr, [r4, r6]
 801fa34:	fb1a fa09 	smulbb	sl, sl, r9
 801fa38:	9604      	str	r6, [sp, #16]
 801fa3a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801fa3e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fa42:	fb16 f609 	smulbb	r6, r6, r9
 801fa46:	fa5f fc8c 	uxtb.w	ip, ip
 801fa4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fa4e:	fb1c fc09 	smulbb	ip, ip, r9
 801fa52:	fb07 6702 	mla	r7, r7, r2, r6
 801fa56:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fa5a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fa5e:	b2bf      	uxth	r7, r7
 801fa60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fa64:	fa5f fe8e 	uxtb.w	lr, lr
 801fa68:	fb06 a602 	mla	r6, r6, r2, sl
 801fa6c:	fb0e cc02 	mla	ip, lr, r2, ip
 801fa70:	1c7a      	adds	r2, r7, #1
 801fa72:	b2b6      	uxth	r6, r6
 801fa74:	fa1f fc8c 	uxth.w	ip, ip
 801fa78:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fa7c:	9a04      	ldr	r2, [sp, #16]
 801fa7e:	f10c 0a01 	add.w	sl, ip, #1
 801fa82:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fa86:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801fa8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fa8e:	ea4a 0707 	orr.w	r7, sl, r7
 801fa92:	f106 0a01 	add.w	sl, r6, #1
 801fa96:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fa9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fa9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801faa2:	ea47 070a 	orr.w	r7, r7, sl
 801faa6:	52a7      	strh	r7, [r4, r2]
 801faa8:	e7af      	b.n	801fa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801faaa:	f04f 0e00 	mov.w	lr, #0
 801faae:	eba3 020e 	sub.w	r2, r3, lr
 801fab2:	2a00      	cmp	r2, #0
 801fab4:	f77f af3a 	ble.w	801f92c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fab8:	1402      	asrs	r2, r0, #16
 801faba:	9e02      	ldr	r6, [sp, #8]
 801fabc:	140d      	asrs	r5, r1, #16
 801fabe:	fb06 2505 	mla	r5, r6, r5, r2
 801fac2:	9e03      	ldr	r6, [sp, #12]
 801fac4:	086a      	lsrs	r2, r5, #1
 801fac6:	07ed      	lsls	r5, r5, #31
 801fac8:	5cb2      	ldrb	r2, [r6, r2]
 801faca:	bf54      	ite	pl
 801facc:	f002 020f 	andpl.w	r2, r2, #15
 801fad0:	1112      	asrmi	r2, r2, #4
 801fad2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fad6:	b2d2      	uxtb	r2, r2
 801fad8:	2aff      	cmp	r2, #255	; 0xff
 801fada:	d115      	bne.n	801fb08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801fadc:	f8d8 5000 	ldr.w	r5, [r8]
 801fae0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801fae4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801fae8:	096a      	lsrs	r2, r5, #5
 801faea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801faee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801faf2:	4332      	orrs	r2, r6
 801faf4:	432a      	orrs	r2, r5
 801faf6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801fafa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fafc:	f10e 0e01 	add.w	lr, lr, #1
 801fb00:	4410      	add	r0, r2
 801fb02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb04:	4411      	add	r1, r2
 801fb06:	e7d2      	b.n	801faae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fb08:	2a00      	cmp	r2, #0
 801fb0a:	d0f6      	beq.n	801fafa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fb0c:	f8d8 7000 	ldr.w	r7, [r8]
 801fb10:	fa1f f982 	uxth.w	r9, r2
 801fb14:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fb18:	43d2      	mvns	r2, r2
 801fb1a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801fb1e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801fb22:	ea4f 262c 	mov.w	r6, ip, asr #8
 801fb26:	fb15 f509 	smulbb	r5, r5, r9
 801fb2a:	b2d2      	uxtb	r2, r2
 801fb2c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fb30:	b2ff      	uxtb	r7, r7
 801fb32:	fb1a fa09 	smulbb	sl, sl, r9
 801fb36:	fb06 5602 	mla	r6, r6, r2, r5
 801fb3a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fb3e:	fb17 f709 	smulbb	r7, r7, r9
 801fb42:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fb46:	b2b6      	uxth	r6, r6
 801fb48:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fb4c:	fa5f fc8c 	uxtb.w	ip, ip
 801fb50:	fb05 a502 	mla	r5, r5, r2, sl
 801fb54:	fb0c 7702 	mla	r7, ip, r2, r7
 801fb58:	1c72      	adds	r2, r6, #1
 801fb5a:	b2ad      	uxth	r5, r5
 801fb5c:	b2bf      	uxth	r7, r7
 801fb5e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801fb62:	f107 0a01 	add.w	sl, r7, #1
 801fb66:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fb6a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fb6e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fb72:	ea4a 0606 	orr.w	r6, sl, r6
 801fb76:	f105 0a01 	add.w	sl, r5, #1
 801fb7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb82:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fb86:	ea46 060a 	orr.w	r6, r6, sl
 801fb8a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801fb8e:	e7b4      	b.n	801fafa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fb90:	b007      	add	sp, #28
 801fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb96:	bf00      	nop
 801fb98:	200152dc 	.word	0x200152dc

0801fb9c <_ZN8touchgfx8LCD16bppD1Ev>:
 801fb9c:	4770      	bx	lr

0801fb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801fb9e:	4770      	bx	lr

0801fba0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801fba0:	4770      	bx	lr

0801fba2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801fba2:	4770      	bx	lr

0801fba4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801fba4:	4770      	bx	lr

0801fba6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fba6:	4770      	bx	lr

0801fba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fba8:	4770      	bx	lr

0801fbaa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fbaa:	4770      	bx	lr

0801fbac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbac:	4770      	bx	lr

0801fbae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fbae:	4770      	bx	lr

0801fbb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fbb0:	4770      	bx	lr

0801fbb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fbb2:	4770      	bx	lr

0801fbb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbb4:	4770      	bx	lr

0801fbb6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fbb6:	4770      	bx	lr

0801fbb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fbb8:	4770      	bx	lr

0801fbba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fbba:	4770      	bx	lr

0801fbbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbbc:	4770      	bx	lr

0801fbbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fbbe:	4770      	bx	lr

0801fbc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbc0:	4770      	bx	lr

0801fbc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fbc2:	4770      	bx	lr

0801fbc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbc4:	4770      	bx	lr

0801fbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fbc6:	4770      	bx	lr

0801fbc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fbc8:	4770      	bx	lr

0801fbca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fbca:	4770      	bx	lr

0801fbcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fbcc:	4770      	bx	lr

0801fbce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fbce:	4770      	bx	lr

0801fbd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fbd0:	4770      	bx	lr

0801fbd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fbd2:	4770      	bx	lr

0801fbd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fbd4:	4770      	bx	lr

0801fbd6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fbd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbda:	b088      	sub	sp, #32
 801fbdc:	4606      	mov	r6, r0
 801fbde:	4688      	mov	r8, r1
 801fbe0:	4691      	mov	r9, r2
 801fbe2:	ac08      	add	r4, sp, #32
 801fbe4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801fbe8:	4620      	mov	r0, r4
 801fbea:	f7fd fc65 	bl	801d4b8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fbee:	6833      	ldr	r3, [r6, #0]
 801fbf0:	4605      	mov	r5, r0
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	699f      	ldr	r7, [r3, #24]
 801fbf6:	f7fd fb73 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fbfa:	4682      	mov	sl, r0
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	f7fd fba3 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fc02:	9500      	str	r5, [sp, #0]
 801fc04:	464b      	mov	r3, r9
 801fc06:	4642      	mov	r2, r8
 801fc08:	4631      	mov	r1, r6
 801fc0a:	e9cd a001 	strd	sl, r0, [sp, #4]
 801fc0e:	a806      	add	r0, sp, #24
 801fc10:	47b8      	blx	r7
 801fc12:	4628      	mov	r0, r5
 801fc14:	b008      	add	sp, #32
 801fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801fc1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801fc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc20:	2300      	movs	r3, #0
 801fc22:	9300      	str	r3, [sp, #0]
 801fc24:	4b3d      	ldr	r3, [pc, #244]	; (801fd1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801fc26:	781b      	ldrb	r3, [r3, #0]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d137      	bne.n	801fc9c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801fc2c:	4a3c      	ldr	r2, [pc, #240]	; (801fd20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801fc2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801fc32:	f8ad 2004 	strh.w	r2, [sp, #4]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d132      	bne.n	801fca0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801fc3a:	4b3a      	ldr	r3, [pc, #232]	; (801fd24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fc3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc40:	ac02      	add	r4, sp, #8
 801fc42:	6808      	ldr	r0, [r1, #0]
 801fc44:	f8ad 3006 	strh.w	r3, [sp, #6]
 801fc48:	ab02      	add	r3, sp, #8
 801fc4a:	6849      	ldr	r1, [r1, #4]
 801fc4c:	4d36      	ldr	r5, [pc, #216]	; (801fd28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801fc4e:	c303      	stmia	r3!, {r0, r1}
 801fc50:	4669      	mov	r1, sp
 801fc52:	4620      	mov	r0, r4
 801fc54:	f7fa f9ea 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc58:	4668      	mov	r0, sp
 801fc5a:	f7fa f9bf 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc5e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fc62:	f8bd 2000 	ldrh.w	r2, [sp]
 801fc66:	462f      	mov	r7, r5
 801fc68:	6828      	ldr	r0, [r5, #0]
 801fc6a:	4413      	add	r3, r2
 801fc6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fc70:	f8ad 3008 	strh.w	r3, [sp, #8]
 801fc74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fc78:	4413      	add	r3, r2
 801fc7a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fc7e:	6803      	ldr	r3, [r0, #0]
 801fc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc82:	4798      	blx	r3
 801fc84:	f010 0f01 	tst.w	r0, #1
 801fc88:	d00c      	beq.n	801fca4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801fc8a:	6828      	ldr	r0, [r5, #0]
 801fc8c:	6803      	ldr	r3, [r0, #0]
 801fc8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801fc92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801fc94:	4798      	blx	r3
 801fc96:	b004      	add	sp, #16
 801fc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc9c:	4a21      	ldr	r2, [pc, #132]	; (801fd24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fc9e:	e7c6      	b.n	801fc2e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801fca0:	4b1f      	ldr	r3, [pc, #124]	; (801fd20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801fca2:	e7cb      	b.n	801fc3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801fca4:	6838      	ldr	r0, [r7, #0]
 801fca6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801fcaa:	6803      	ldr	r3, [r0, #0]
 801fcac:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801fcb0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801fcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcb6:	4798      	blx	r3
 801fcb8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801fcbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801fcc0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801fcc4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801fcc8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fccc:	6838      	ldr	r0, [r7, #0]
 801fcce:	6803      	ldr	r3, [r0, #0]
 801fcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcd2:	4798      	blx	r3
 801fcd4:	4a12      	ldr	r2, [pc, #72]	; (801fd20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801fcd6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801fcda:	8813      	ldrh	r3, [r2, #0]
 801fcdc:	4691      	mov	r9, r2
 801fcde:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fce2:	435d      	muls	r5, r3
 801fce4:	fb03 1404 	mla	r4, r3, r4, r1
 801fce8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801fcec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fcf0:	6838      	ldr	r0, [r7, #0]
 801fcf2:	42ac      	cmp	r4, r5
 801fcf4:	6803      	ldr	r3, [r0, #0]
 801fcf6:	d20e      	bcs.n	801fd16 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801fcf8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801fcfc:	4632      	mov	r2, r6
 801fcfe:	4643      	mov	r3, r8
 801fd00:	4621      	mov	r1, r4
 801fd02:	47d0      	blx	sl
 801fd04:	f8b9 3000 	ldrh.w	r3, [r9]
 801fd08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd0c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801fd10:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fd14:	e7ec      	b.n	801fcf0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801fd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fd18:	4798      	blx	r3
 801fd1a:	e7bc      	b.n	801fc96 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801fd1c:	200152cc 	.word	0x200152cc
 801fd20:	200152ce 	.word	0x200152ce
 801fd24:	200152d0 	.word	0x200152d0
 801fd28:	200152d4 	.word	0x200152d4

0801fd2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd30:	b08b      	sub	sp, #44	; 0x2c
 801fd32:	460f      	mov	r7, r1
 801fd34:	4616      	mov	r6, r2
 801fd36:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801fd3a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801fd3e:	f1bb 0f00 	cmp.w	fp, #0
 801fd42:	d049      	beq.n	801fdd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801fd44:	6810      	ldr	r0, [r2, #0]
 801fd46:	ad06      	add	r5, sp, #24
 801fd48:	6851      	ldr	r1, [r2, #4]
 801fd4a:	c503      	stmia	r5!, {r0, r1}
 801fd4c:	6818      	ldr	r0, [r3, #0]
 801fd4e:	ad08      	add	r5, sp, #32
 801fd50:	6859      	ldr	r1, [r3, #4]
 801fd52:	c503      	stmia	r5!, {r0, r1}
 801fd54:	a806      	add	r0, sp, #24
 801fd56:	f7fa f941 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fd5a:	4631      	mov	r1, r6
 801fd5c:	a808      	add	r0, sp, #32
 801fd5e:	f7fa f965 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fd62:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fd66:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fd6a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801fd6e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801fd72:	fb16 2103 	smlabb	r1, r6, r3, r2
 801fd76:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801fd7a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801fd7e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fd82:	4f5f      	ldr	r7, [pc, #380]	; (801ff00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801fd84:	440a      	add	r2, r1
 801fd86:	6838      	ldr	r0, [r7, #0]
 801fd88:	46b9      	mov	r9, r7
 801fd8a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fd8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fd92:	4413      	add	r3, r2
 801fd94:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fd98:	6803      	ldr	r3, [r0, #0]
 801fd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd9c:	4798      	blx	r3
 801fd9e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fda2:	d01c      	beq.n	801fdde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801fda4:	f010 0f04 	tst.w	r0, #4
 801fda8:	d01d      	beq.n	801fde6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801fdaa:	f8d9 0000 	ldr.w	r0, [r9]
 801fdae:	2700      	movs	r7, #0
 801fdb0:	b2ad      	uxth	r5, r5
 801fdb2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fdb6:	6801      	ldr	r1, [r0, #0]
 801fdb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fdbc:	f8cd b00c 	str.w	fp, [sp, #12]
 801fdc0:	9501      	str	r5, [sp, #4]
 801fdc2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801fdc6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801fdca:	9402      	str	r4, [sp, #8]
 801fdcc:	fa1f f488 	uxth.w	r4, r8
 801fdd0:	9400      	str	r4, [sp, #0]
 801fdd2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801fdd4:	4631      	mov	r1, r6
 801fdd6:	47a0      	blx	r4
 801fdd8:	b00b      	add	sp, #44	; 0x2c
 801fdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdde:	b914      	cbnz	r4, 801fde6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801fde0:	f010 0f01 	tst.w	r0, #1
 801fde4:	e7e0      	b.n	801fda8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801fde6:	f8d9 0000 	ldr.w	r0, [r9]
 801fdea:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801fdee:	6803      	ldr	r3, [r0, #0]
 801fdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdf2:	4798      	blx	r3
 801fdf4:	4b43      	ldr	r3, [pc, #268]	; (801ff04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801fdf6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801fdfa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fdfe:	881a      	ldrh	r2, [r3, #0]
 801fe00:	469a      	mov	sl, r3
 801fe02:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fe06:	fb05 f502 	mul.w	r5, r5, r2
 801fe0a:	fb02 1404 	mla	r4, r2, r4, r1
 801fe0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801fe12:	d059      	beq.n	801fec8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801fe14:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801fe18:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fe1c:	fa1f f28b 	uxth.w	r2, fp
 801fe20:	469e      	mov	lr, r3
 801fe22:	fa1f f989 	uxth.w	r9, r9
 801fe26:	42ac      	cmp	r4, r5
 801fe28:	d264      	bcs.n	801fef4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801fe2a:	eb04 0a07 	add.w	sl, r4, r7
 801fe2e:	4554      	cmp	r4, sl
 801fe30:	d23d      	bcs.n	801feae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801fe32:	8821      	ldrh	r1, [r4, #0]
 801fe34:	f836 3b02 	ldrh.w	r3, [r6], #2
 801fe38:	1208      	asrs	r0, r1, #8
 801fe3a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fe3e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fe42:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801fe46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe4a:	00c9      	lsls	r1, r1, #3
 801fe4c:	fb10 f009 	smulbb	r0, r0, r9
 801fe50:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fe54:	b2c9      	uxtb	r1, r1
 801fe56:	fb0c 0c02 	mla	ip, ip, r2, r0
 801fe5a:	10d8      	asrs	r0, r3, #3
 801fe5c:	fb1b fb09 	smulbb	fp, fp, r9
 801fe60:	00db      	lsls	r3, r3, #3
 801fe62:	fa1f fc8c 	uxth.w	ip, ip
 801fe66:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fe6a:	fb11 f109 	smulbb	r1, r1, r9
 801fe6e:	b2db      	uxtb	r3, r3
 801fe70:	fb00 b002 	mla	r0, r0, r2, fp
 801fe74:	f10c 0b01 	add.w	fp, ip, #1
 801fe78:	fb03 1302 	mla	r3, r3, r2, r1
 801fe7c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fe80:	b29b      	uxth	r3, r3
 801fe82:	b280      	uxth	r0, r0
 801fe84:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801fe88:	f103 0c01 	add.w	ip, r3, #1
 801fe8c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fe90:	1c43      	adds	r3, r0, #1
 801fe92:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fe96:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fe9a:	0940      	lsrs	r0, r0, #5
 801fe9c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801fea0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fea4:	ea4c 0c00 	orr.w	ip, ip, r0
 801fea8:	f824 cb02 	strh.w	ip, [r4], #2
 801feac:	e7bf      	b.n	801fe2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801feae:	f8be 3000 	ldrh.w	r3, [lr]
 801feb2:	eba3 0308 	sub.w	r3, r3, r8
 801feb6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801feba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801febe:	eba3 0308 	sub.w	r3, r3, r8
 801fec2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fec6:	e7ae      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801fec8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fecc:	f8d9 0000 	ldr.w	r0, [r9]
 801fed0:	42ac      	cmp	r4, r5
 801fed2:	6803      	ldr	r3, [r0, #0]
 801fed4:	d20e      	bcs.n	801fef4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801fed6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801feda:	4632      	mov	r2, r6
 801fedc:	463b      	mov	r3, r7
 801fede:	4621      	mov	r1, r4
 801fee0:	47c0      	blx	r8
 801fee2:	f8ba 3000 	ldrh.w	r3, [sl]
 801fee6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801feea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801feee:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fef2:	e7eb      	b.n	801fecc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801fef4:	4b02      	ldr	r3, [pc, #8]	; (801ff00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801fef6:	6818      	ldr	r0, [r3, #0]
 801fef8:	6803      	ldr	r3, [r0, #0]
 801fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fefc:	4798      	blx	r3
 801fefe:	e76b      	b.n	801fdd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ff00:	200152d4 	.word	0x200152d4
 801ff04:	200152ce 	.word	0x200152ce

0801ff08 <_ZN8touchgfx8LCD16bppD0Ev>:
 801ff08:	b510      	push	{r4, lr}
 801ff0a:	4604      	mov	r4, r0
 801ff0c:	2178      	movs	r1, #120	; 0x78
 801ff0e:	f008 ffe9 	bl	8028ee4 <_ZdlPvj>
 801ff12:	4620      	mov	r0, r4
 801ff14:	bd10      	pop	{r4, pc}

0801ff16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ff16:	b510      	push	{r4, lr}
 801ff18:	4604      	mov	r4, r0
 801ff1a:	2104      	movs	r1, #4
 801ff1c:	f008 ffe2 	bl	8028ee4 <_ZdlPvj>
 801ff20:	4620      	mov	r0, r4
 801ff22:	bd10      	pop	{r4, pc}

0801ff24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ff24:	b510      	push	{r4, lr}
 801ff26:	4604      	mov	r4, r0
 801ff28:	2104      	movs	r1, #4
 801ff2a:	f008 ffdb 	bl	8028ee4 <_ZdlPvj>
 801ff2e:	4620      	mov	r0, r4
 801ff30:	bd10      	pop	{r4, pc}

0801ff32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ff32:	b510      	push	{r4, lr}
 801ff34:	4604      	mov	r4, r0
 801ff36:	2104      	movs	r1, #4
 801ff38:	f008 ffd4 	bl	8028ee4 <_ZdlPvj>
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	bd10      	pop	{r4, pc}

0801ff40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ff40:	b510      	push	{r4, lr}
 801ff42:	4604      	mov	r4, r0
 801ff44:	2104      	movs	r1, #4
 801ff46:	f008 ffcd 	bl	8028ee4 <_ZdlPvj>
 801ff4a:	4620      	mov	r0, r4
 801ff4c:	bd10      	pop	{r4, pc}

0801ff4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ff4e:	b510      	push	{r4, lr}
 801ff50:	4604      	mov	r4, r0
 801ff52:	2104      	movs	r1, #4
 801ff54:	f008 ffc6 	bl	8028ee4 <_ZdlPvj>
 801ff58:	4620      	mov	r0, r4
 801ff5a:	bd10      	pop	{r4, pc}

0801ff5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ff5c:	b510      	push	{r4, lr}
 801ff5e:	4604      	mov	r4, r0
 801ff60:	2104      	movs	r1, #4
 801ff62:	f008 ffbf 	bl	8028ee4 <_ZdlPvj>
 801ff66:	4620      	mov	r0, r4
 801ff68:	bd10      	pop	{r4, pc}

0801ff6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ff6a:	b510      	push	{r4, lr}
 801ff6c:	4604      	mov	r4, r0
 801ff6e:	2104      	movs	r1, #4
 801ff70:	f008 ffb8 	bl	8028ee4 <_ZdlPvj>
 801ff74:	4620      	mov	r0, r4
 801ff76:	bd10      	pop	{r4, pc}

0801ff78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ff78:	b510      	push	{r4, lr}
 801ff7a:	4604      	mov	r4, r0
 801ff7c:	2104      	movs	r1, #4
 801ff7e:	f008 ffb1 	bl	8028ee4 <_ZdlPvj>
 801ff82:	4620      	mov	r0, r4
 801ff84:	bd10      	pop	{r4, pc}

0801ff86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ff86:	b510      	push	{r4, lr}
 801ff88:	4604      	mov	r4, r0
 801ff8a:	2104      	movs	r1, #4
 801ff8c:	f008 ffaa 	bl	8028ee4 <_ZdlPvj>
 801ff90:	4620      	mov	r0, r4
 801ff92:	bd10      	pop	{r4, pc}

0801ff94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ff94:	b510      	push	{r4, lr}
 801ff96:	4604      	mov	r4, r0
 801ff98:	2104      	movs	r1, #4
 801ff9a:	f008 ffa3 	bl	8028ee4 <_ZdlPvj>
 801ff9e:	4620      	mov	r0, r4
 801ffa0:	bd10      	pop	{r4, pc}

0801ffa2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ffa2:	b510      	push	{r4, lr}
 801ffa4:	4604      	mov	r4, r0
 801ffa6:	2104      	movs	r1, #4
 801ffa8:	f008 ff9c 	bl	8028ee4 <_ZdlPvj>
 801ffac:	4620      	mov	r0, r4
 801ffae:	bd10      	pop	{r4, pc}

0801ffb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ffb0:	b510      	push	{r4, lr}
 801ffb2:	4604      	mov	r4, r0
 801ffb4:	2104      	movs	r1, #4
 801ffb6:	f008 ff95 	bl	8028ee4 <_ZdlPvj>
 801ffba:	4620      	mov	r0, r4
 801ffbc:	bd10      	pop	{r4, pc}

0801ffbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ffbe:	b510      	push	{r4, lr}
 801ffc0:	4604      	mov	r4, r0
 801ffc2:	2104      	movs	r1, #4
 801ffc4:	f008 ff8e 	bl	8028ee4 <_ZdlPvj>
 801ffc8:	4620      	mov	r0, r4
 801ffca:	bd10      	pop	{r4, pc}

0801ffcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ffcc:	b510      	push	{r4, lr}
 801ffce:	4604      	mov	r4, r0
 801ffd0:	2104      	movs	r1, #4
 801ffd2:	f008 ff87 	bl	8028ee4 <_ZdlPvj>
 801ffd6:	4620      	mov	r0, r4
 801ffd8:	bd10      	pop	{r4, pc}

0801ffda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ffda:	b510      	push	{r4, lr}
 801ffdc:	4604      	mov	r4, r0
 801ffde:	2104      	movs	r1, #4
 801ffe0:	f008 ff80 	bl	8028ee4 <_ZdlPvj>
 801ffe4:	4620      	mov	r0, r4
 801ffe6:	bd10      	pop	{r4, pc}

0801ffe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ffe8:	b510      	push	{r4, lr}
 801ffea:	4604      	mov	r4, r0
 801ffec:	2104      	movs	r1, #4
 801ffee:	f008 ff79 	bl	8028ee4 <_ZdlPvj>
 801fff2:	4620      	mov	r0, r4
 801fff4:	bd10      	pop	{r4, pc}

0801fff6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fff6:	b510      	push	{r4, lr}
 801fff8:	4604      	mov	r4, r0
 801fffa:	2104      	movs	r1, #4
 801fffc:	f008 ff72 	bl	8028ee4 <_ZdlPvj>
 8020000:	4620      	mov	r0, r4
 8020002:	bd10      	pop	{r4, pc}

08020004 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020004:	b510      	push	{r4, lr}
 8020006:	4604      	mov	r4, r0
 8020008:	2104      	movs	r1, #4
 802000a:	f008 ff6b 	bl	8028ee4 <_ZdlPvj>
 802000e:	4620      	mov	r0, r4
 8020010:	bd10      	pop	{r4, pc}

08020012 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020012:	b510      	push	{r4, lr}
 8020014:	4604      	mov	r4, r0
 8020016:	2104      	movs	r1, #4
 8020018:	f008 ff64 	bl	8028ee4 <_ZdlPvj>
 802001c:	4620      	mov	r0, r4
 802001e:	bd10      	pop	{r4, pc}

08020020 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020020:	b510      	push	{r4, lr}
 8020022:	4604      	mov	r4, r0
 8020024:	2104      	movs	r1, #4
 8020026:	f008 ff5d 	bl	8028ee4 <_ZdlPvj>
 802002a:	4620      	mov	r0, r4
 802002c:	bd10      	pop	{r4, pc}

0802002e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802002e:	b510      	push	{r4, lr}
 8020030:	4604      	mov	r4, r0
 8020032:	2104      	movs	r1, #4
 8020034:	f008 ff56 	bl	8028ee4 <_ZdlPvj>
 8020038:	4620      	mov	r0, r4
 802003a:	bd10      	pop	{r4, pc}

0802003c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802003c:	b510      	push	{r4, lr}
 802003e:	4604      	mov	r4, r0
 8020040:	2104      	movs	r1, #4
 8020042:	f008 ff4f 	bl	8028ee4 <_ZdlPvj>
 8020046:	4620      	mov	r0, r4
 8020048:	bd10      	pop	{r4, pc}

0802004a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802004a:	b510      	push	{r4, lr}
 802004c:	4604      	mov	r4, r0
 802004e:	2104      	movs	r1, #4
 8020050:	f008 ff48 	bl	8028ee4 <_ZdlPvj>
 8020054:	4620      	mov	r0, r4
 8020056:	bd10      	pop	{r4, pc}

08020058 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020058:	b510      	push	{r4, lr}
 802005a:	4604      	mov	r4, r0
 802005c:	2104      	movs	r1, #4
 802005e:	f008 ff41 	bl	8028ee4 <_ZdlPvj>
 8020062:	4620      	mov	r0, r4
 8020064:	bd10      	pop	{r4, pc}

08020066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020066:	b510      	push	{r4, lr}
 8020068:	4604      	mov	r4, r0
 802006a:	2104      	movs	r1, #4
 802006c:	f008 ff3a 	bl	8028ee4 <_ZdlPvj>
 8020070:	4620      	mov	r0, r4
 8020072:	bd10      	pop	{r4, pc}

08020074 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020074:	b510      	push	{r4, lr}
 8020076:	4604      	mov	r4, r0
 8020078:	2104      	movs	r1, #4
 802007a:	f008 ff33 	bl	8028ee4 <_ZdlPvj>
 802007e:	4620      	mov	r0, r4
 8020080:	bd10      	pop	{r4, pc}

08020082 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020082:	b510      	push	{r4, lr}
 8020084:	4604      	mov	r4, r0
 8020086:	2104      	movs	r1, #4
 8020088:	f008 ff2c 	bl	8028ee4 <_ZdlPvj>
 802008c:	4620      	mov	r0, r4
 802008e:	bd10      	pop	{r4, pc}

08020090 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020090:	b510      	push	{r4, lr}
 8020092:	4604      	mov	r4, r0
 8020094:	2104      	movs	r1, #4
 8020096:	f008 ff25 	bl	8028ee4 <_ZdlPvj>
 802009a:	4620      	mov	r0, r4
 802009c:	bd10      	pop	{r4, pc}
	...

080200a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80200a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200a4:	b091      	sub	sp, #68	; 0x44
 80200a6:	469b      	mov	fp, r3
 80200a8:	4616      	mov	r6, r2
 80200aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80200ae:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80200b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80200b6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80200ba:	4604      	mov	r4, r0
 80200bc:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80200c0:	4640      	mov	r0, r8
 80200c2:	460d      	mov	r5, r1
 80200c4:	4659      	mov	r1, fp
 80200c6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80200ca:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80200ce:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80200d2:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 80200d6:	f7f6 fe7b 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80200da:	4631      	mov	r1, r6
 80200dc:	4640      	mov	r0, r8
 80200de:	f7f6 fe77 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80200e2:	4b74      	ldr	r3, [pc, #464]	; (80202b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80200e4:	8818      	ldrh	r0, [r3, #0]
 80200e6:	4b74      	ldr	r3, [pc, #464]	; (80202b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80200e8:	b202      	sxth	r2, r0
 80200ea:	8819      	ldrh	r1, [r3, #0]
 80200ec:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80200f0:	b20e      	sxth	r6, r1
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	da07      	bge.n	8020106 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80200f6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80200fa:	4463      	add	r3, ip
 80200fc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020100:	2300      	movs	r3, #0
 8020102:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8020106:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802010a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 802010e:	1ad2      	subs	r2, r2, r3
 8020110:	4594      	cmp	ip, r2
 8020112:	bfc4      	itt	gt
 8020114:	1ac2      	subgt	r2, r0, r3
 8020116:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 802011a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802011e:	2a00      	cmp	r2, #0
 8020120:	da07      	bge.n	8020132 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8020122:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8020126:	4462      	add	r2, ip
 8020128:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 802012c:	2200      	movs	r2, #0
 802012e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8020132:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8020136:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802013a:	eba6 060a 	sub.w	r6, r6, sl
 802013e:	42b2      	cmp	r2, r6
 8020140:	bfc4      	itt	gt
 8020142:	eba1 020a 	subgt.w	r2, r1, sl
 8020146:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 802014a:	4a5c      	ldr	r2, [pc, #368]	; (80202bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 802014c:	7812      	ldrb	r2, [r2, #0]
 802014e:	b9a2      	cbnz	r2, 802017a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8020150:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020154:	4286      	cmp	r6, r0
 8020156:	4640      	mov	r0, r8
 8020158:	9303      	str	r3, [sp, #12]
 802015a:	bf14      	ite	ne
 802015c:	2600      	movne	r6, #0
 802015e:	2601      	moveq	r6, #1
 8020160:	f7f6 fe79 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020164:	9b03      	ldr	r3, [sp, #12]
 8020166:	b160      	cbz	r0, 8020182 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8020168:	2300      	movs	r3, #0
 802016a:	8023      	strh	r3, [r4, #0]
 802016c:	8063      	strh	r3, [r4, #2]
 802016e:	80a3      	strh	r3, [r4, #4]
 8020170:	4620      	mov	r0, r4
 8020172:	80e3      	strh	r3, [r4, #6]
 8020174:	b011      	add	sp, #68	; 0x44
 8020176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802017a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802017e:	428e      	cmp	r6, r1
 8020180:	e7e9      	b.n	8020156 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8020182:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020186:	a90e      	add	r1, sp, #56	; 0x38
 8020188:	900e      	str	r0, [sp, #56]	; 0x38
 802018a:	a80c      	add	r0, sp, #48	; 0x30
 802018c:	9205      	str	r2, [sp, #20]
 802018e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020192:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8020196:	9206      	str	r2, [sp, #24]
 8020198:	f8bb 2000 	ldrh.w	r2, [fp]
 802019c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 80201a0:	1a9b      	subs	r3, r3, r2
 80201a2:	b21b      	sxth	r3, r3
 80201a4:	9303      	str	r3, [sp, #12]
 80201a6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80201aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80202c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80201ae:	ebaa 0a03 	sub.w	sl, sl, r3
 80201b2:	fa0f f38a 	sxth.w	r3, sl
 80201b6:	9304      	str	r3, [sp, #16]
 80201b8:	9b03      	ldr	r3, [sp, #12]
 80201ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80201be:	9b04      	ldr	r3, [sp, #16]
 80201c0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80201c4:	9b05      	ldr	r3, [sp, #20]
 80201c6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80201ca:	9b06      	ldr	r3, [sp, #24]
 80201cc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80201d0:	f7f9 ff2c 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201d4:	4640      	mov	r0, r8
 80201d6:	f7f9 ff01 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201da:	a80e      	add	r0, sp, #56	; 0x38
 80201dc:	f7f9 fefe 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201e0:	4b37      	ldr	r3, [pc, #220]	; (80202c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80201e2:	4628      	mov	r0, r5
 80201e4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80201e8:	881b      	ldrh	r3, [r3, #0]
 80201ea:	9307      	str	r3, [sp, #28]
 80201ec:	682b      	ldr	r3, [r5, #0]
 80201ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80201f0:	4798      	blx	r3
 80201f2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 80201f6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80201fa:	4681      	mov	r9, r0
 80201fc:	f8db 0000 	ldr.w	r0, [fp]
 8020200:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020204:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020206:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 802020a:	6803      	ldr	r3, [r0, #0]
 802020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802020e:	4798      	blx	r3
 8020210:	4607      	mov	r7, r0
 8020212:	f8db 0000 	ldr.w	r0, [fp]
 8020216:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802021a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802021e:	6803      	ldr	r3, [r0, #0]
 8020220:	9109      	str	r1, [sp, #36]	; 0x24
 8020222:	9208      	str	r2, [sp, #32]
 8020224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020226:	4798      	blx	r3
 8020228:	f010 0f01 	tst.w	r0, #1
 802022c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020230:	d012      	beq.n	8020258 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020232:	f8db 0000 	ldr.w	r0, [fp]
 8020236:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 802023a:	6803      	ldr	r3, [r0, #0]
 802023c:	9200      	str	r2, [sp, #0]
 802023e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020240:	462b      	mov	r3, r5
 8020242:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020246:	47b0      	blx	r6
 8020248:	9b03      	ldr	r3, [sp, #12]
 802024a:	8023      	strh	r3, [r4, #0]
 802024c:	9b04      	ldr	r3, [sp, #16]
 802024e:	8063      	strh	r3, [r4, #2]
 8020250:	9b05      	ldr	r3, [sp, #20]
 8020252:	80a3      	strh	r3, [r4, #4]
 8020254:	9b06      	ldr	r3, [sp, #24]
 8020256:	e78b      	b.n	8020170 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020258:	fb09 f202 	mul.w	r2, r9, r2
 802025c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020260:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020264:	440f      	add	r7, r1
 8020266:	b166      	cbz	r6, 8020282 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020268:	9a07      	ldr	r2, [sp, #28]
 802026a:	4592      	cmp	sl, r2
 802026c:	d109      	bne.n	8020282 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 802026e:	f8db 0000 	ldr.w	r0, [fp]
 8020272:	fb09 f303 	mul.w	r3, r9, r3
 8020276:	4629      	mov	r1, r5
 8020278:	6802      	ldr	r2, [r0, #0]
 802027a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 802027c:	463a      	mov	r2, r7
 802027e:	47b0      	blx	r6
 8020280:	e7e2      	b.n	8020248 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020282:	fb0a f303 	mul.w	r3, sl, r3
 8020286:	ea4f 064a 	mov.w	r6, sl, lsl #1
 802028a:	f8df b038 	ldr.w	fp, [pc, #56]	; 80202c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 802028e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020292:	4545      	cmp	r5, r8
 8020294:	d2d8      	bcs.n	8020248 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020296:	f8db 0000 	ldr.w	r0, [fp]
 802029a:	4629      	mov	r1, r5
 802029c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80202a0:	4435      	add	r5, r6
 80202a2:	6802      	ldr	r2, [r0, #0]
 80202a4:	005b      	lsls	r3, r3, #1
 80202a6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80202aa:	463a      	mov	r2, r7
 80202ac:	47d0      	blx	sl
 80202ae:	444f      	add	r7, r9
 80202b0:	e7ef      	b.n	8020292 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80202b2:	bf00      	nop
 80202b4:	200152c8 	.word	0x200152c8
 80202b8:	200152ca 	.word	0x200152ca
 80202bc:	200152cc 	.word	0x200152cc
 80202c0:	200152ce 	.word	0x200152ce
 80202c4:	200152d4 	.word	0x200152d4

080202c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80202c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202ca:	4606      	mov	r6, r0
 80202cc:	b087      	sub	sp, #28
 80202ce:	460c      	mov	r4, r1
 80202d0:	4617      	mov	r7, r2
 80202d2:	461d      	mov	r5, r3
 80202d4:	b333      	cbz	r3, 8020324 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80202d6:	4608      	mov	r0, r1
 80202d8:	f7f6 fdbd 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 80202dc:	bb10      	cbnz	r0, 8020324 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80202de:	6820      	ldr	r0, [r4, #0]
 80202e0:	ab04      	add	r3, sp, #16
 80202e2:	6861      	ldr	r1, [r4, #4]
 80202e4:	4c1b      	ldr	r4, [pc, #108]	; (8020354 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80202e6:	c303      	stmia	r3!, {r0, r1}
 80202e8:	a804      	add	r0, sp, #16
 80202ea:	f7f9 fe77 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202ee:	6820      	ldr	r0, [r4, #0]
 80202f0:	6803      	ldr	r3, [r0, #0]
 80202f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202f4:	4798      	blx	r3
 80202f6:	2dff      	cmp	r5, #255	; 0xff
 80202f8:	d016      	beq.n	8020328 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80202fa:	f010 0f08 	tst.w	r0, #8
 80202fe:	6820      	ldr	r0, [r4, #0]
 8020300:	d015      	beq.n	802032e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020302:	2400      	movs	r4, #0
 8020304:	6801      	ldr	r1, [r0, #0]
 8020306:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802030a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802030e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020312:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020316:	9401      	str	r4, [sp, #4]
 8020318:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802031c:	9400      	str	r4, [sp, #0]
 802031e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020320:	4639      	mov	r1, r7
 8020322:	47a0      	blx	r4
 8020324:	b007      	add	sp, #28
 8020326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020328:	f010 0f02 	tst.w	r0, #2
 802032c:	e7e7      	b.n	80202fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802032e:	6803      	ldr	r3, [r0, #0]
 8020330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020332:	4798      	blx	r3
 8020334:	4b08      	ldr	r3, [pc, #32]	; (8020358 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020336:	4601      	mov	r1, r0
 8020338:	4630      	mov	r0, r6
 802033a:	881a      	ldrh	r2, [r3, #0]
 802033c:	6833      	ldr	r3, [r6, #0]
 802033e:	e9cd 7500 	strd	r7, r5, [sp]
 8020342:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020344:	ab04      	add	r3, sp, #16
 8020346:	47a8      	blx	r5
 8020348:	6820      	ldr	r0, [r4, #0]
 802034a:	6803      	ldr	r3, [r0, #0]
 802034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802034e:	4798      	blx	r3
 8020350:	e7e8      	b.n	8020324 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020352:	bf00      	nop
 8020354:	200152d4 	.word	0x200152d4
 8020358:	200152ce 	.word	0x200152ce

0802035c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802035c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020360:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020364:	4688      	mov	r8, r1
 8020366:	4614      	mov	r4, r2
 8020368:	461d      	mov	r5, r3
 802036a:	9e08      	ldr	r6, [sp, #32]
 802036c:	2f00      	cmp	r7, #0
 802036e:	f000 80ab 	beq.w	80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020372:	4618      	mov	r0, r3
 8020374:	f7f6 fd6f 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020378:	2800      	cmp	r0, #0
 802037a:	f040 80a5 	bne.w	80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802037e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020382:	2fff      	cmp	r7, #255	; 0xff
 8020384:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020388:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 802038c:	fb04 1303 	mla	r3, r4, r3, r1
 8020390:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020394:	eba4 0200 	sub.w	r2, r4, r0
 8020398:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 802039c:	fb04 f505 	mul.w	r5, r4, r5
 80203a0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80203a4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80203a8:	d04a      	beq.n	8020440 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 80203aa:	b2bc      	uxth	r4, r7
 80203ac:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80203b0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80203b4:	fa5f f788 	uxtb.w	r7, r8
 80203b8:	b2f3      	uxtb	r3, r6
 80203ba:	0040      	lsls	r0, r0, #1
 80203bc:	fb0e fe04 	mul.w	lr, lr, r4
 80203c0:	4367      	muls	r7, r4
 80203c2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80203c6:	4363      	muls	r3, r4
 80203c8:	fa1f fc8c 	uxth.w	ip, ip
 80203cc:	42a9      	cmp	r1, r5
 80203ce:	d27b      	bcs.n	80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80203d0:	eb01 0900 	add.w	r9, r1, r0
 80203d4:	4549      	cmp	r1, r9
 80203d6:	d231      	bcs.n	802043c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 80203d8:	880a      	ldrh	r2, [r1, #0]
 80203da:	1214      	asrs	r4, r2, #8
 80203dc:	10d6      	asrs	r6, r2, #3
 80203de:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80203e2:	00d2      	lsls	r2, r2, #3
 80203e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203e8:	b2d2      	uxtb	r2, r2
 80203ea:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80203ee:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80203f2:	fb14 f40c 	smulbb	r4, r4, ip
 80203f6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80203fa:	fb12 f20c 	smulbb	r2, r2, ip
 80203fe:	fb16 f60c 	smulbb	r6, r6, ip
 8020402:	4474      	add	r4, lr
 8020404:	441a      	add	r2, r3
 8020406:	b2a4      	uxth	r4, r4
 8020408:	443e      	add	r6, r7
 802040a:	b292      	uxth	r2, r2
 802040c:	f104 0a01 	add.w	sl, r4, #1
 8020410:	b2b6      	uxth	r6, r6
 8020412:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020416:	f102 0a01 	add.w	sl, r2, #1
 802041a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802041e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020422:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020426:	4322      	orrs	r2, r4
 8020428:	1c74      	adds	r4, r6, #1
 802042a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 802042e:	0976      	lsrs	r6, r6, #5
 8020430:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020434:	4332      	orrs	r2, r6
 8020436:	f821 2b02 	strh.w	r2, [r1], #2
 802043a:	e7cb      	b.n	80203d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 802043c:	4441      	add	r1, r8
 802043e:	e7c5      	b.n	80203cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020440:	0973      	lsrs	r3, r6, #5
 8020442:	4f22      	ldr	r7, [pc, #136]	; (80204cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8020444:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020448:	ea08 0707 	and.w	r7, r8, r7
 802044c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020450:	433b      	orrs	r3, r7
 8020452:	07e7      	lsls	r7, r4, #31
 8020454:	ea43 0306 	orr.w	r3, r3, r6
 8020458:	b29b      	uxth	r3, r3
 802045a:	d50b      	bpl.n	8020474 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 802045c:	0040      	lsls	r0, r0, #1
 802045e:	0052      	lsls	r2, r2, #1
 8020460:	42a9      	cmp	r1, r5
 8020462:	d231      	bcs.n	80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020464:	180c      	adds	r4, r1, r0
 8020466:	42a1      	cmp	r1, r4
 8020468:	d202      	bcs.n	8020470 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 802046a:	f821 3b02 	strh.w	r3, [r1], #2
 802046e:	e7fa      	b.n	8020466 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020470:	4411      	add	r1, r2
 8020472:	e7f5      	b.n	8020460 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020474:	078e      	lsls	r6, r1, #30
 8020476:	d008      	beq.n	802048a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020478:	0066      	lsls	r6, r4, #1
 802047a:	460a      	mov	r2, r1
 802047c:	42aa      	cmp	r2, r5
 802047e:	d202      	bcs.n	8020486 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020480:	8013      	strh	r3, [r2, #0]
 8020482:	4432      	add	r2, r6
 8020484:	e7fa      	b.n	802047c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020486:	3102      	adds	r1, #2
 8020488:	3801      	subs	r0, #1
 802048a:	07c2      	lsls	r2, r0, #31
 802048c:	d50b      	bpl.n	80204a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 802048e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020492:	0066      	lsls	r6, r4, #1
 8020494:	3a01      	subs	r2, #1
 8020496:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802049a:	42aa      	cmp	r2, r5
 802049c:	d202      	bcs.n	80204a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 802049e:	8013      	strh	r3, [r2, #0]
 80204a0:	4432      	add	r2, r6
 80204a2:	e7fa      	b.n	802049a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 80204a4:	3801      	subs	r0, #1
 80204a6:	b178      	cbz	r0, 80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80204a8:	1040      	asrs	r0, r0, #1
 80204aa:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80204ae:	0080      	lsls	r0, r0, #2
 80204b0:	0064      	lsls	r4, r4, #1
 80204b2:	42a9      	cmp	r1, r5
 80204b4:	d208      	bcs.n	80204c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80204b6:	180e      	adds	r6, r1, r0
 80204b8:	460a      	mov	r2, r1
 80204ba:	42b2      	cmp	r2, r6
 80204bc:	d202      	bcs.n	80204c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80204be:	f842 3b04 	str.w	r3, [r2], #4
 80204c2:	e7fa      	b.n	80204ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 80204c4:	4421      	add	r1, r4
 80204c6:	e7f4      	b.n	80204b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80204c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204cc:	00fff800 	.word	0x00fff800

080204d0 <_ZN8touchgfx8LCD16bppC1Ev>:
 80204d0:	2200      	movs	r2, #0
 80204d2:	4910      	ldr	r1, [pc, #64]	; (8020514 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80204d4:	6042      	str	r2, [r0, #4]
 80204d6:	6001      	str	r1, [r0, #0]
 80204d8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80204dc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80204e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80204e4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80204e8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80204ec:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80204f0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80204f4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80204f8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80204fc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020500:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020504:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020508:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 802050c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020510:	4770      	bx	lr
 8020512:	bf00      	nop
 8020514:	0802efc0 	.word	0x0802efc0

08020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802051c:	b08d      	sub	sp, #52	; 0x34
 802051e:	460d      	mov	r5, r1
 8020520:	4604      	mov	r4, r0
 8020522:	4699      	mov	r9, r3
 8020524:	6808      	ldr	r0, [r1, #0]
 8020526:	ab08      	add	r3, sp, #32
 8020528:	6849      	ldr	r1, [r1, #4]
 802052a:	c303      	stmia	r3!, {r0, r1}
 802052c:	6810      	ldr	r0, [r2, #0]
 802052e:	ab0a      	add	r3, sp, #40	; 0x28
 8020530:	6851      	ldr	r1, [r2, #4]
 8020532:	c303      	stmia	r3!, {r0, r1}
 8020534:	a808      	add	r0, sp, #32
 8020536:	f7f9 fd51 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802053a:	4629      	mov	r1, r5
 802053c:	a80a      	add	r0, sp, #40	; 0x28
 802053e:	4d67      	ldr	r5, [pc, #412]	; (80206dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020540:	f7f9 fd74 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020544:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020548:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802054c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020550:	6828      	ldr	r0, [r5, #0]
 8020552:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020556:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802055a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802055e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020562:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020566:	440a      	add	r2, r1
 8020568:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802056c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020570:	4413      	add	r3, r2
 8020572:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020576:	6803      	ldr	r3, [r0, #0]
 8020578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802057a:	4798      	blx	r3
 802057c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020580:	d119      	bne.n	80205b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020582:	f010 0f20 	tst.w	r0, #32
 8020586:	6828      	ldr	r0, [r5, #0]
 8020588:	d018      	beq.n	80205bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802058a:	2500      	movs	r5, #0
 802058c:	6801      	ldr	r1, [r0, #0]
 802058e:	b2b6      	uxth	r6, r6
 8020590:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020594:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020598:	9601      	str	r6, [sp, #4]
 802059a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802059e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80205a2:	9502      	str	r5, [sp, #8]
 80205a4:	fa1f f588 	uxth.w	r5, r8
 80205a8:	9500      	str	r5, [sp, #0]
 80205aa:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80205ac:	4621      	mov	r1, r4
 80205ae:	47a8      	blx	r5
 80205b0:	b00d      	add	sp, #52	; 0x34
 80205b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80205ba:	e7e4      	b.n	8020586 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80205bc:	6803      	ldr	r3, [r0, #0]
 80205be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80205c0:	4798      	blx	r3
 80205c2:	4947      	ldr	r1, [pc, #284]	; (80206e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80205c4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80205c8:	880b      	ldrh	r3, [r1, #0]
 80205ca:	468a      	mov	sl, r1
 80205cc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80205d0:	fb03 5202 	mla	r2, r3, r2, r5
 80205d4:	4373      	muls	r3, r6
 80205d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80205da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80205de:	9307      	str	r3, [sp, #28]
 80205e0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80205e4:	9306      	str	r3, [sp, #24]
 80205e6:	9b07      	ldr	r3, [sp, #28]
 80205e8:	4298      	cmp	r0, r3
 80205ea:	d270      	bcs.n	80206ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80205ec:	9b06      	ldr	r3, [sp, #24]
 80205ee:	4621      	mov	r1, r4
 80205f0:	eb00 0b03 	add.w	fp, r0, r3
 80205f4:	4558      	cmp	r0, fp
 80205f6:	d25d      	bcs.n	80206b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80205f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80205fc:	0e23      	lsrs	r3, r4, #24
 80205fe:	d014      	beq.n	802062a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020600:	2bff      	cmp	r3, #255	; 0xff
 8020602:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020606:	d112      	bne.n	802062e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020608:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802060c:	d10f      	bne.n	802062e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802060e:	0963      	lsrs	r3, r4, #5
 8020610:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020614:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020618:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802061c:	f02c 0c07 	bic.w	ip, ip, #7
 8020620:	ea43 0c0c 	orr.w	ip, r3, ip
 8020624:	ea4c 0404 	orr.w	r4, ip, r4
 8020628:	8004      	strh	r4, [r0, #0]
 802062a:	3002      	adds	r0, #2
 802062c:	e7e2      	b.n	80205f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802062e:	fb09 f303 	mul.w	r3, r9, r3
 8020632:	8807      	ldrh	r7, [r0, #0]
 8020634:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020638:	fa5f fc8c 	uxtb.w	ip, ip
 802063c:	1c5a      	adds	r2, r3, #1
 802063e:	123e      	asrs	r6, r7, #8
 8020640:	10fd      	asrs	r5, r7, #3
 8020642:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020646:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802064a:	00ff      	lsls	r7, r7, #3
 802064c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020650:	1212      	asrs	r2, r2, #8
 8020652:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020656:	b293      	uxth	r3, r2
 8020658:	43d2      	mvns	r2, r2
 802065a:	b2ff      	uxtb	r7, r7
 802065c:	fb1e fe03 	smulbb	lr, lr, r3
 8020660:	b2d2      	uxtb	r2, r2
 8020662:	fb1c fc03 	smulbb	ip, ip, r3
 8020666:	b2e4      	uxtb	r4, r4
 8020668:	fb06 e602 	mla	r6, r6, r2, lr
 802066c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020670:	fb14 f403 	smulbb	r4, r4, r3
 8020674:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020678:	b2b6      	uxth	r6, r6
 802067a:	fb05 c502 	mla	r5, r5, r2, ip
 802067e:	fb07 4702 	mla	r7, r7, r2, r4
 8020682:	f106 0e01 	add.w	lr, r6, #1
 8020686:	b2ad      	uxth	r5, r5
 8020688:	b2bf      	uxth	r7, r7
 802068a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802068e:	f105 0c01 	add.w	ip, r5, #1
 8020692:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020696:	1c7e      	adds	r6, r7, #1
 8020698:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802069c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80206a0:	096d      	lsrs	r5, r5, #5
 80206a2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80206a6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80206aa:	ea46 060e 	orr.w	r6, r6, lr
 80206ae:	432e      	orrs	r6, r5
 80206b0:	8006      	strh	r6, [r0, #0]
 80206b2:	e7ba      	b.n	802062a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80206b4:	f8ba 3000 	ldrh.w	r3, [sl]
 80206b8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80206bc:	eba3 0308 	sub.w	r3, r3, r8
 80206c0:	eba4 0408 	sub.w	r4, r4, r8
 80206c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80206c8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80206cc:	e78b      	b.n	80205e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80206ce:	4b03      	ldr	r3, [pc, #12]	; (80206dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80206d0:	6818      	ldr	r0, [r3, #0]
 80206d2:	6803      	ldr	r3, [r0, #0]
 80206d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206d6:	4798      	blx	r3
 80206d8:	e76a      	b.n	80205b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80206da:	bf00      	nop
 80206dc:	200152d4 	.word	0x200152d4
 80206e0:	200152ce 	.word	0x200152ce

080206e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80206e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80206e8:	b085      	sub	sp, #20
 80206ea:	6810      	ldr	r0, [r2, #0]
 80206ec:	460c      	mov	r4, r1
 80206ee:	6851      	ldr	r1, [r2, #4]
 80206f0:	466d      	mov	r5, sp
 80206f2:	4616      	mov	r6, r2
 80206f4:	c503      	stmia	r5!, {r0, r1}
 80206f6:	6818      	ldr	r0, [r3, #0]
 80206f8:	6859      	ldr	r1, [r3, #4]
 80206fa:	c503      	stmia	r5!, {r0, r1}
 80206fc:	4668      	mov	r0, sp
 80206fe:	4d2e      	ldr	r5, [pc, #184]	; (80207b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8020700:	f7f9 fc6c 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020704:	4631      	mov	r1, r6
 8020706:	a802      	add	r0, sp, #8
 8020708:	4e2c      	ldr	r6, [pc, #176]	; (80207bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802070a:	f7f9 fc8f 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802070e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8020712:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020716:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802071a:	6828      	ldr	r0, [r5, #0]
 802071c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020720:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020724:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020728:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802072c:	f8bd 1000 	ldrh.w	r1, [sp]
 8020730:	440a      	add	r2, r1
 8020732:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020736:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802073a:	4413      	add	r3, r2
 802073c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020740:	6803      	ldr	r3, [r0, #0]
 8020742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020744:	4798      	blx	r3
 8020746:	8833      	ldrh	r3, [r6, #0]
 8020748:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802074c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8020750:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020754:	f8df e068 	ldr.w	lr, [pc, #104]	; 80207c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020758:	fb03 1202 	mla	r2, r3, r2, r1
 802075c:	fb08 f303 	mul.w	r3, r8, r3
 8020760:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020764:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020768:	4298      	cmp	r0, r3
 802076a:	d21d      	bcs.n	80207a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802076c:	eb00 080c 	add.w	r8, r0, ip
 8020770:	4540      	cmp	r0, r8
 8020772:	d20f      	bcs.n	8020794 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8020774:	f854 1b04 	ldr.w	r1, [r4], #4
 8020778:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802077c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8020780:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020784:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020788:	ea42 0209 	orr.w	r2, r2, r9
 802078c:	430a      	orrs	r2, r1
 802078e:	f820 2b02 	strh.w	r2, [r0], #2
 8020792:	e7ed      	b.n	8020770 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8020794:	8832      	ldrh	r2, [r6, #0]
 8020796:	1bd2      	subs	r2, r2, r7
 8020798:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802079c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80207a0:	1bd2      	subs	r2, r2, r7
 80207a2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80207a6:	e7df      	b.n	8020768 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80207a8:	6828      	ldr	r0, [r5, #0]
 80207aa:	6803      	ldr	r3, [r0, #0]
 80207ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80207ae:	4798      	blx	r3
 80207b0:	b005      	add	sp, #20
 80207b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207b6:	bf00      	nop
 80207b8:	200152d4 	.word	0x200152d4
 80207bc:	200152ce 	.word	0x200152ce
 80207c0:	fffff800 	.word	0xfffff800

080207c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80207c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207c8:	b08e      	sub	sp, #56	; 0x38
 80207ca:	460e      	mov	r6, r1
 80207cc:	4604      	mov	r4, r0
 80207ce:	461d      	mov	r5, r3
 80207d0:	6808      	ldr	r0, [r1, #0]
 80207d2:	ab0a      	add	r3, sp, #40	; 0x28
 80207d4:	6849      	ldr	r1, [r1, #4]
 80207d6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80209ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80207da:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80209b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80207de:	c303      	stmia	r3!, {r0, r1}
 80207e0:	6810      	ldr	r0, [r2, #0]
 80207e2:	ab0c      	add	r3, sp, #48	; 0x30
 80207e4:	6851      	ldr	r1, [r2, #4]
 80207e6:	c303      	stmia	r3!, {r0, r1}
 80207e8:	a80a      	add	r0, sp, #40	; 0x28
 80207ea:	f7f9 fbf7 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80207ee:	4631      	mov	r1, r6
 80207f0:	a80c      	add	r0, sp, #48	; 0x30
 80207f2:	f7f9 fc1b 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80207f6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80207fa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80207fe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020802:	f8d8 0000 	ldr.w	r0, [r8]
 8020806:	fb11 2103 	smlabb	r1, r1, r3, r2
 802080a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 802080e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8020812:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020816:	440c      	add	r4, r1
 8020818:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 802081c:	440a      	add	r2, r1
 802081e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020822:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8020826:	4413      	add	r3, r2
 8020828:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802082c:	6803      	ldr	r3, [r0, #0]
 802082e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020830:	4798      	blx	r3
 8020832:	2dff      	cmp	r5, #255	; 0xff
 8020834:	d124      	bne.n	8020880 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8020836:	f010 0f01 	tst.w	r0, #1
 802083a:	f8d8 0000 	ldr.w	r0, [r8]
 802083e:	d022      	beq.n	8020886 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8020840:	2100      	movs	r1, #0
 8020842:	f04f 0e01 	mov.w	lr, #1
 8020846:	f8d0 c000 	ldr.w	ip, [r0]
 802084a:	b2b6      	uxth	r6, r6
 802084c:	f8cd e018 	str.w	lr, [sp, #24]
 8020850:	b2bf      	uxth	r7, r7
 8020852:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020856:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802085a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802085e:	f8b9 e000 	ldrh.w	lr, [r9]
 8020862:	9503      	str	r5, [sp, #12]
 8020864:	9601      	str	r6, [sp, #4]
 8020866:	9700      	str	r7, [sp, #0]
 8020868:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802086c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020870:	9102      	str	r1, [sp, #8]
 8020872:	4621      	mov	r1, r4
 8020874:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8020878:	47a8      	blx	r5
 802087a:	b00e      	add	sp, #56	; 0x38
 802087c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020880:	f010 0f04 	tst.w	r0, #4
 8020884:	e7d9      	b.n	802083a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8020886:	6803      	ldr	r3, [r0, #0]
 8020888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802088a:	4798      	blx	r3
 802088c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020890:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020894:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8020898:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802089c:	435e      	muls	r6, r3
 802089e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80208a2:	2dff      	cmp	r5, #255	; 0xff
 80208a4:	fb03 1202 	mla	r2, r3, r2, r1
 80208a8:	ebac 0c07 	sub.w	ip, ip, r7
 80208ac:	eba3 0707 	sub.w	r7, r3, r7
 80208b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80208b4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80208b8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80208bc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80208c0:	d049      	beq.n	8020956 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80208c2:	43eb      	mvns	r3, r5
 80208c4:	fa1f f985 	uxth.w	r9, r5
 80208c8:	b2db      	uxtb	r3, r3
 80208ca:	42b0      	cmp	r0, r6
 80208cc:	d266      	bcs.n	802099c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80208ce:	eb00 0a0e 	add.w	sl, r0, lr
 80208d2:	4550      	cmp	r0, sl
 80208d4:	4621      	mov	r1, r4
 80208d6:	f104 0403 	add.w	r4, r4, #3
 80208da:	d25b      	bcs.n	8020994 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80208dc:	8802      	ldrh	r2, [r0, #0]
 80208de:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80208e2:	ea4f 2822 	mov.w	r8, r2, asr #8
 80208e6:	fb11 f109 	smulbb	r1, r1, r9
 80208ea:	10d5      	asrs	r5, r2, #3
 80208ec:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80208f0:	00d2      	lsls	r2, r2, #3
 80208f2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80208f6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80208fa:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80208fe:	fb08 1803 	mla	r8, r8, r3, r1
 8020902:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8020906:	b2d2      	uxtb	r2, r2
 8020908:	fb11 f109 	smulbb	r1, r1, r9
 802090c:	fa1f f888 	uxth.w	r8, r8
 8020910:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020914:	fb05 1503 	mla	r5, r5, r3, r1
 8020918:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802091c:	fb11 f109 	smulbb	r1, r1, r9
 8020920:	b2ad      	uxth	r5, r5
 8020922:	fb02 1203 	mla	r2, r2, r3, r1
 8020926:	f108 0101 	add.w	r1, r8, #1
 802092a:	b292      	uxth	r2, r2
 802092c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020930:	1c51      	adds	r1, r2, #1
 8020932:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8020936:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802093a:	1c69      	adds	r1, r5, #1
 802093c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020940:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020944:	096d      	lsrs	r5, r5, #5
 8020946:	ea42 0208 	orr.w	r2, r2, r8
 802094a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802094e:	432a      	orrs	r2, r5
 8020950:	f820 2b02 	strh.w	r2, [r0], #2
 8020954:	e7bd      	b.n	80208d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8020956:	4a14      	ldr	r2, [pc, #80]	; (80209a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8020958:	42b0      	cmp	r0, r6
 802095a:	d21f      	bcs.n	802099c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802095c:	eb00 050e 	add.w	r5, r0, lr
 8020960:	42a8      	cmp	r0, r5
 8020962:	4621      	mov	r1, r4
 8020964:	f104 0403 	add.w	r4, r4, #3
 8020968:	d210      	bcs.n	802098c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802096a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802096e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020972:	00db      	lsls	r3, r3, #3
 8020974:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020978:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802097c:	430b      	orrs	r3, r1
 802097e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020982:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8020986:	f820 3b02 	strh.w	r3, [r0], #2
 802098a:	e7e9      	b.n	8020960 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802098c:	4438      	add	r0, r7
 802098e:	eb01 040c 	add.w	r4, r1, ip
 8020992:	e7e1      	b.n	8020958 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8020994:	4438      	add	r0, r7
 8020996:	eb01 040c 	add.w	r4, r1, ip
 802099a:	e796      	b.n	80208ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802099c:	4b03      	ldr	r3, [pc, #12]	; (80209ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802099e:	6818      	ldr	r0, [r3, #0]
 80209a0:	6803      	ldr	r3, [r0, #0]
 80209a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209a4:	4798      	blx	r3
 80209a6:	e768      	b.n	802087a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80209a8:	fffff800 	.word	0xfffff800
 80209ac:	200152d4 	.word	0x200152d4
 80209b0:	200152ce 	.word	0x200152ce

080209b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80209b4:	b4f0      	push	{r4, r5, r6, r7}
 80209b6:	4616      	mov	r6, r2
 80209b8:	461c      	mov	r4, r3
 80209ba:	460d      	mov	r5, r1
 80209bc:	9a04      	ldr	r2, [sp, #16]
 80209be:	2e01      	cmp	r6, #1
 80209c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80209c4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80209c8:	d012      	beq.n	80209f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80209ca:	d303      	bcc.n	80209d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80209cc:	2e02      	cmp	r6, #2
 80209ce:	d00a      	beq.n	80209e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80209d0:	bcf0      	pop	{r4, r5, r6, r7}
 80209d2:	4770      	bx	lr
 80209d4:	6805      	ldr	r5, [r0, #0]
 80209d6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80209da:	68ed      	ldr	r5, [r5, #12]
 80209dc:	4613      	mov	r3, r2
 80209de:	4622      	mov	r2, r4
 80209e0:	46ac      	mov	ip, r5
 80209e2:	bcf0      	pop	{r4, r5, r6, r7}
 80209e4:	4760      	bx	ip
 80209e6:	4621      	mov	r1, r4
 80209e8:	4628      	mov	r0, r5
 80209ea:	bcf0      	pop	{r4, r5, r6, r7}
 80209ec:	f7ff bd94 	b.w	8020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80209f0:	4621      	mov	r1, r4
 80209f2:	4628      	mov	r0, r5
 80209f4:	bcf0      	pop	{r4, r5, r6, r7}
 80209f6:	f7ff bee5 	b.w	80207c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080209fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80209fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a00:	b093      	sub	sp, #76	; 0x4c
 8020a02:	4681      	mov	r9, r0
 8020a04:	4688      	mov	r8, r1
 8020a06:	6810      	ldr	r0, [r2, #0]
 8020a08:	6851      	ldr	r1, [r2, #4]
 8020a0a:	ac0e      	add	r4, sp, #56	; 0x38
 8020a0c:	4616      	mov	r6, r2
 8020a0e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8020a12:	4f6b      	ldr	r7, [pc, #428]	; (8020bc0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8020a14:	c403      	stmia	r4!, {r0, r1}
 8020a16:	6818      	ldr	r0, [r3, #0]
 8020a18:	ac10      	add	r4, sp, #64	; 0x40
 8020a1a:	6859      	ldr	r1, [r3, #4]
 8020a1c:	c403      	stmia	r4!, {r0, r1}
 8020a1e:	a80e      	add	r0, sp, #56	; 0x38
 8020a20:	f7f9 fadc 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a24:	4631      	mov	r1, r6
 8020a26:	a810      	add	r0, sp, #64	; 0x40
 8020a28:	4e66      	ldr	r6, [pc, #408]	; (8020bc4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020a2a:	f7f9 faff 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a2e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020a32:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020a36:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020a3a:	6830      	ldr	r0, [r6, #0]
 8020a3c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020a40:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8020a44:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8020a48:	4489      	add	r9, r1
 8020a4a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020a4e:	440a      	add	r2, r1
 8020a50:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020a54:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020a58:	4413      	add	r3, r2
 8020a5a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020a5e:	6803      	ldr	r3, [r0, #0]
 8020a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a62:	4798      	blx	r3
 8020a64:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020a68:	6830      	ldr	r0, [r6, #0]
 8020a6a:	d01d      	beq.n	8020aa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020a6c:	2200      	movs	r2, #0
 8020a6e:	6801      	ldr	r1, [r0, #0]
 8020a70:	b2a4      	uxth	r4, r4
 8020a72:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020a76:	b2ad      	uxth	r5, r5
 8020a78:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020a7c:	220b      	movs	r2, #11
 8020a7e:	9207      	str	r2, [sp, #28]
 8020a80:	883a      	ldrh	r2, [r7, #0]
 8020a82:	9502      	str	r5, [sp, #8]
 8020a84:	9206      	str	r2, [sp, #24]
 8020a86:	2201      	movs	r2, #1
 8020a88:	9401      	str	r4, [sp, #4]
 8020a8a:	e9cd a204 	strd	sl, r2, [sp, #16]
 8020a8e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020a92:	9203      	str	r2, [sp, #12]
 8020a94:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020a98:	9200      	str	r2, [sp, #0]
 8020a9a:	4642      	mov	r2, r8
 8020a9c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020a9e:	4649      	mov	r1, r9
 8020aa0:	47a0      	blx	r4
 8020aa2:	b013      	add	sp, #76	; 0x4c
 8020aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aa8:	6803      	ldr	r3, [r0, #0]
 8020aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020aac:	4798      	blx	r3
 8020aae:	883b      	ldrh	r3, [r7, #0]
 8020ab0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8020ab4:	f04f 0e04 	mov.w	lr, #4
 8020ab8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020abc:	435d      	muls	r5, r3
 8020abe:	fb03 1202 	mla	r2, r3, r2, r1
 8020ac2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ac6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8020aca:	920c      	str	r2, [sp, #48]	; 0x30
 8020acc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020ad0:	1b12      	subs	r2, r2, r4
 8020ad2:	920d      	str	r2, [sp, #52]	; 0x34
 8020ad4:	0062      	lsls	r2, r4, #1
 8020ad6:	1b1c      	subs	r4, r3, r4
 8020ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8020ada:	0063      	lsls	r3, r4, #1
 8020adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ae0:	4298      	cmp	r0, r3
 8020ae2:	d266      	bcs.n	8020bb2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ae6:	eb00 0b03 	add.w	fp, r0, r3
 8020aea:	4558      	cmp	r0, fp
 8020aec:	d25c      	bcs.n	8020ba8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8020aee:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020af2:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020af6:	f858 2003 	ldr.w	r2, [r8, r3]
 8020afa:	0e11      	lsrs	r1, r2, #24
 8020afc:	d012      	beq.n	8020b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020afe:	29ff      	cmp	r1, #255	; 0xff
 8020b00:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8020b04:	d110      	bne.n	8020b28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020b06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020b0a:	d10d      	bne.n	8020b28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020b0c:	0953      	lsrs	r3, r2, #5
 8020b0e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8020b12:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020b16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b1a:	f027 0707 	bic.w	r7, r7, #7
 8020b1e:	431f      	orrs	r7, r3
 8020b20:	433a      	orrs	r2, r7
 8020b22:	8002      	strh	r2, [r0, #0]
 8020b24:	3002      	adds	r0, #2
 8020b26:	e7e0      	b.n	8020aea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020b28:	fb0a f101 	mul.w	r1, sl, r1
 8020b2c:	8806      	ldrh	r6, [r0, #0]
 8020b2e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8020b32:	b2d2      	uxtb	r2, r2
 8020b34:	1c4b      	adds	r3, r1, #1
 8020b36:	1235      	asrs	r5, r6, #8
 8020b38:	10f4      	asrs	r4, r6, #3
 8020b3a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8020b3e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020b42:	00f6      	lsls	r6, r6, #3
 8020b44:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8020b48:	121b      	asrs	r3, r3, #8
 8020b4a:	b2f6      	uxtb	r6, r6
 8020b4c:	b299      	uxth	r1, r3
 8020b4e:	43db      	mvns	r3, r3
 8020b50:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020b54:	fb1c fc01 	smulbb	ip, ip, r1
 8020b58:	b2db      	uxtb	r3, r3
 8020b5a:	fb12 f201 	smulbb	r2, r2, r1
 8020b5e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020b62:	fb05 c503 	mla	r5, r5, r3, ip
 8020b66:	b2ff      	uxtb	r7, r7
 8020b68:	fb06 2203 	mla	r2, r6, r3, r2
 8020b6c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020b70:	fb17 f701 	smulbb	r7, r7, r1
 8020b74:	b2ad      	uxth	r5, r5
 8020b76:	b292      	uxth	r2, r2
 8020b78:	fb04 7403 	mla	r4, r4, r3, r7
 8020b7c:	f105 0c01 	add.w	ip, r5, #1
 8020b80:	1c57      	adds	r7, r2, #1
 8020b82:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020b86:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020b8a:	b2a4      	uxth	r4, r4
 8020b8c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020b90:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020b94:	433d      	orrs	r5, r7
 8020b96:	1c67      	adds	r7, r4, #1
 8020b98:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8020b9c:	0964      	lsrs	r4, r4, #5
 8020b9e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020ba2:	4325      	orrs	r5, r4
 8020ba4:	8005      	strh	r5, [r0, #0]
 8020ba6:	e7bd      	b.n	8020b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020baa:	4418      	add	r0, r3
 8020bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bae:	4499      	add	r9, r3
 8020bb0:	e795      	b.n	8020ade <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8020bb2:	4b04      	ldr	r3, [pc, #16]	; (8020bc4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020bb4:	6818      	ldr	r0, [r3, #0]
 8020bb6:	6803      	ldr	r3, [r0, #0]
 8020bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bba:	4798      	blx	r3
 8020bbc:	e771      	b.n	8020aa2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8020bbe:	bf00      	nop
 8020bc0:	200152ce 	.word	0x200152ce
 8020bc4:	200152d4 	.word	0x200152d4

08020bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bcc:	b087      	sub	sp, #28
 8020bce:	4680      	mov	r8, r0
 8020bd0:	460d      	mov	r5, r1
 8020bd2:	4614      	mov	r4, r2
 8020bd4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8020bd8:	2e00      	cmp	r6, #0
 8020bda:	f000 80b9 	beq.w	8020d50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8020bde:	6810      	ldr	r0, [r2, #0]
 8020be0:	af02      	add	r7, sp, #8
 8020be2:	6851      	ldr	r1, [r2, #4]
 8020be4:	c703      	stmia	r7!, {r0, r1}
 8020be6:	6818      	ldr	r0, [r3, #0]
 8020be8:	af04      	add	r7, sp, #16
 8020bea:	6859      	ldr	r1, [r3, #4]
 8020bec:	c703      	stmia	r7!, {r0, r1}
 8020bee:	a802      	add	r0, sp, #8
 8020bf0:	f7f9 f9f4 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bf4:	4621      	mov	r1, r4
 8020bf6:	a804      	add	r0, sp, #16
 8020bf8:	f7f9 fa18 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020bfc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020c00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020c04:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020c08:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020c0c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020c10:	eb08 0401 	add.w	r4, r8, r1
 8020c14:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020c18:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020c1c:	440a      	add	r2, r1
 8020c1e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8020c22:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020c26:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020c2a:	4413      	add	r3, r2
 8020c2c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020c30:	4b49      	ldr	r3, [pc, #292]	; (8020d58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020c32:	6818      	ldr	r0, [r3, #0]
 8020c34:	6803      	ldr	r3, [r0, #0]
 8020c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c38:	4798      	blx	r3
 8020c3a:	4b48      	ldr	r3, [pc, #288]	; (8020d5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8020c3c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020c40:	2eff      	cmp	r6, #255	; 0xff
 8020c42:	881a      	ldrh	r2, [r3, #0]
 8020c44:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020c48:	fb02 c101 	mla	r1, r2, r1, ip
 8020c4c:	fb02 f207 	mul.w	r2, r2, r7
 8020c50:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020c54:	f105 0104 	add.w	r1, r5, #4
 8020c58:	461d      	mov	r5, r3
 8020c5a:	d05a      	beq.n	8020d12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020c5c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8020c60:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020c64:	b2b6      	uxth	r6, r6
 8020c66:	9301      	str	r3, [sp, #4]
 8020c68:	fa1f fe8e 	uxth.w	lr, lr
 8020c6c:	4282      	cmp	r2, r0
 8020c6e:	d96a      	bls.n	8020d46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020c70:	eb00 0b0a 	add.w	fp, r0, sl
 8020c74:	4583      	cmp	fp, r0
 8020c76:	d940      	bls.n	8020cfa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020c78:	8805      	ldrh	r5, [r0, #0]
 8020c7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020c7e:	122f      	asrs	r7, r5, #8
 8020c80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020c84:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020c88:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020c8c:	00ed      	lsls	r5, r5, #3
 8020c8e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020c92:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020c96:	fb17 f70e 	smulbb	r7, r7, lr
 8020c9a:	b2ed      	uxtb	r5, r5
 8020c9c:	fb19 f90e 	smulbb	r9, r9, lr
 8020ca0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ca4:	fb15 f50e 	smulbb	r5, r5, lr
 8020ca8:	fb0c 7c06 	mla	ip, ip, r6, r7
 8020cac:	10df      	asrs	r7, r3, #3
 8020cae:	00db      	lsls	r3, r3, #3
 8020cb0:	fa1f fc8c 	uxth.w	ip, ip
 8020cb4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020cb8:	b2db      	uxtb	r3, r3
 8020cba:	fb07 9706 	mla	r7, r7, r6, r9
 8020cbe:	f10c 0901 	add.w	r9, ip, #1
 8020cc2:	fb03 5306 	mla	r3, r3, r6, r5
 8020cc6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8020cca:	b29b      	uxth	r3, r3
 8020ccc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8020cd0:	b2bf      	uxth	r7, r7
 8020cd2:	f103 0c01 	add.w	ip, r3, #1
 8020cd6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020cda:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020cde:	ea4c 0c09 	orr.w	ip, ip, r9
 8020ce2:	f107 0901 	add.w	r9, r7, #1
 8020ce6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020cea:	097f      	lsrs	r7, r7, #5
 8020cec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020cf0:	ea4c 0c07 	orr.w	ip, ip, r7
 8020cf4:	f820 cb02 	strh.w	ip, [r0], #2
 8020cf8:	e7bc      	b.n	8020c74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8020cfa:	9b01      	ldr	r3, [sp, #4]
 8020cfc:	881b      	ldrh	r3, [r3, #0]
 8020cfe:	eba3 0308 	sub.w	r3, r3, r8
 8020d02:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d06:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020d0a:	eba3 0308 	sub.w	r3, r3, r8
 8020d0e:	441c      	add	r4, r3
 8020d10:	e7ac      	b.n	8020c6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8020d12:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020d16:	4282      	cmp	r2, r0
 8020d18:	d915      	bls.n	8020d46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020d1a:	eb00 060a 	add.w	r6, r0, sl
 8020d1e:	4286      	cmp	r6, r0
 8020d20:	d906      	bls.n	8020d30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8020d22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020d26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020d2a:	f820 3b02 	strh.w	r3, [r0], #2
 8020d2e:	e7f6      	b.n	8020d1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8020d30:	882b      	ldrh	r3, [r5, #0]
 8020d32:	eba3 0308 	sub.w	r3, r3, r8
 8020d36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d3a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020d3e:	eba3 0308 	sub.w	r3, r3, r8
 8020d42:	441c      	add	r4, r3
 8020d44:	e7e7      	b.n	8020d16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020d46:	4b04      	ldr	r3, [pc, #16]	; (8020d58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020d48:	6818      	ldr	r0, [r3, #0]
 8020d4a:	6803      	ldr	r3, [r0, #0]
 8020d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d4e:	4798      	blx	r3
 8020d50:	b007      	add	sp, #28
 8020d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d56:	bf00      	nop
 8020d58:	200152d4 	.word	0x200152d4
 8020d5c:	200152ce 	.word	0x200152ce

08020d60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d64:	b091      	sub	sp, #68	; 0x44
 8020d66:	4680      	mov	r8, r0
 8020d68:	460f      	mov	r7, r1
 8020d6a:	4614      	mov	r4, r2
 8020d6c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8020d70:	2d00      	cmp	r5, #0
 8020d72:	d051      	beq.n	8020e18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020d74:	6810      	ldr	r0, [r2, #0]
 8020d76:	ae0c      	add	r6, sp, #48	; 0x30
 8020d78:	6851      	ldr	r1, [r2, #4]
 8020d7a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8020f7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8020d7e:	c603      	stmia	r6!, {r0, r1}
 8020d80:	6818      	ldr	r0, [r3, #0]
 8020d82:	ae0e      	add	r6, sp, #56	; 0x38
 8020d84:	6859      	ldr	r1, [r3, #4]
 8020d86:	c603      	stmia	r6!, {r0, r1}
 8020d88:	a80c      	add	r0, sp, #48	; 0x30
 8020d8a:	f7f9 f927 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d8e:	4621      	mov	r1, r4
 8020d90:	a80e      	add	r0, sp, #56	; 0x38
 8020d92:	f7f9 f94b 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d96:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020d9a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020d9e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020da2:	f8d9 0000 	ldr.w	r0, [r9]
 8020da6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020daa:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8020dae:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8020db2:	eb08 0401 	add.w	r4, r8, r1
 8020db6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020dba:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8020f80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8020dbe:	440a      	add	r2, r1
 8020dc0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020dc4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020dc8:	4413      	add	r3, r2
 8020dca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020dce:	6803      	ldr	r3, [r0, #0]
 8020dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020dd2:	4798      	blx	r3
 8020dd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020dd8:	f8d9 0000 	ldr.w	r0, [r9]
 8020ddc:	d01f      	beq.n	8020e1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020dde:	2200      	movs	r2, #0
 8020de0:	6801      	ldr	r1, [r0, #0]
 8020de2:	b2b6      	uxth	r6, r6
 8020de4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020de8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020dec:	220b      	movs	r2, #11
 8020dee:	9207      	str	r2, [sp, #28]
 8020df0:	f8b8 2000 	ldrh.w	r2, [r8]
 8020df4:	9601      	str	r6, [sp, #4]
 8020df6:	9206      	str	r2, [sp, #24]
 8020df8:	2201      	movs	r2, #1
 8020dfa:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8020dfe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020e02:	9203      	str	r2, [sp, #12]
 8020e04:	fa1f f28a 	uxth.w	r2, sl
 8020e08:	9202      	str	r2, [sp, #8]
 8020e0a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020e0e:	9200      	str	r2, [sp, #0]
 8020e10:	463a      	mov	r2, r7
 8020e12:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8020e14:	4621      	mov	r1, r4
 8020e16:	47a8      	blx	r5
 8020e18:	b011      	add	sp, #68	; 0x44
 8020e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e1e:	6803      	ldr	r3, [r0, #0]
 8020e20:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8020e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e26:	4798      	blx	r3
 8020e28:	f8b8 2000 	ldrh.w	r2, [r8]
 8020e2c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020e30:	2dff      	cmp	r5, #255	; 0xff
 8020e32:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020e36:	fb0a fa02 	mul.w	sl, sl, r2
 8020e3a:	fb02 1303 	mla	r3, r2, r3, r1
 8020e3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020e42:	d062      	beq.n	8020f0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020e44:	ea6f 0c05 	mvn.w	ip, r5
 8020e48:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8020e4c:	b2ad      	uxth	r5, r5
 8020e4e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8020e52:	fa5f fc8c 	uxtb.w	ip, ip
 8020e56:	930a      	str	r3, [sp, #40]	; 0x28
 8020e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e5a:	4298      	cmp	r0, r3
 8020e5c:	f080 8085 	bcs.w	8020f6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020e60:	eb00 0b09 	add.w	fp, r0, r9
 8020e64:	4558      	cmp	r0, fp
 8020e66:	d246      	bcs.n	8020ef6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020e68:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020e6c:	2303      	movs	r3, #3
 8020e6e:	2204      	movs	r2, #4
 8020e70:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020e74:	8803      	ldrh	r3, [r0, #0]
 8020e76:	eb07 0a0e 	add.w	sl, r7, lr
 8020e7a:	1219      	asrs	r1, r3, #8
 8020e7c:	10da      	asrs	r2, r3, #3
 8020e7e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020e82:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020e86:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020e8a:	00db      	lsls	r3, r3, #3
 8020e8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020e90:	fb18 f805 	smulbb	r8, r8, r5
 8020e94:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020e98:	fb1e fe05 	smulbb	lr, lr, r5
 8020e9c:	b2db      	uxtb	r3, r3
 8020e9e:	fb01 810c 	mla	r1, r1, ip, r8
 8020ea2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020ea6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020eaa:	fb18 f805 	smulbb	r8, r8, r5
 8020eae:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020eb2:	b289      	uxth	r1, r1
 8020eb4:	fb02 820c 	mla	r2, r2, ip, r8
 8020eb8:	fb03 e30c 	mla	r3, r3, ip, lr
 8020ebc:	f101 0801 	add.w	r8, r1, #1
 8020ec0:	b292      	uxth	r2, r2
 8020ec2:	b29b      	uxth	r3, r3
 8020ec4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020ec8:	f102 0801 	add.w	r8, r2, #1
 8020ecc:	f103 0e01 	add.w	lr, r3, #1
 8020ed0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8020ed4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020ed8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020edc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020ee0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020ee4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020ee8:	ea4e 0101 	orr.w	r1, lr, r1
 8020eec:	ea41 0108 	orr.w	r1, r1, r8
 8020ef0:	f820 1b02 	strh.w	r1, [r0], #2
 8020ef4:	e7b6      	b.n	8020e64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8020ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ef8:	881b      	ldrh	r3, [r3, #0]
 8020efa:	1b9b      	subs	r3, r3, r6
 8020efc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f00:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020f04:	1b9b      	subs	r3, r3, r6
 8020f06:	441c      	add	r4, r3
 8020f08:	e7a6      	b.n	8020e58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8020f0a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8020f0e:	2203      	movs	r2, #3
 8020f10:	2504      	movs	r5, #4
 8020f12:	4919      	ldr	r1, [pc, #100]	; (8020f78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020f14:	4550      	cmp	r0, sl
 8020f16:	d228      	bcs.n	8020f6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020f18:	eb00 0c09 	add.w	ip, r0, r9
 8020f1c:	4560      	cmp	r0, ip
 8020f1e:	4623      	mov	r3, r4
 8020f20:	d219      	bcs.n	8020f56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8020f22:	f893 e000 	ldrb.w	lr, [r3]
 8020f26:	3401      	adds	r4, #1
 8020f28:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8020f2c:	eb07 0b0e 	add.w	fp, r7, lr
 8020f30:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020f34:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020f38:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020f3c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020f40:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020f44:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020f48:	ea43 030b 	orr.w	r3, r3, fp
 8020f4c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8020f50:	f820 3b02 	strh.w	r3, [r0], #2
 8020f54:	e7e2      	b.n	8020f1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020f56:	f8b8 3000 	ldrh.w	r3, [r8]
 8020f5a:	1b9b      	subs	r3, r3, r6
 8020f5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f60:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020f64:	1b9b      	subs	r3, r3, r6
 8020f66:	441c      	add	r4, r3
 8020f68:	e7d4      	b.n	8020f14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020f6a:	4b04      	ldr	r3, [pc, #16]	; (8020f7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020f6c:	6818      	ldr	r0, [r3, #0]
 8020f6e:	6803      	ldr	r3, [r0, #0]
 8020f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f72:	4798      	blx	r3
 8020f74:	e750      	b.n	8020e18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020f76:	bf00      	nop
 8020f78:	fffff800 	.word	0xfffff800
 8020f7c:	200152d4 	.word	0x200152d4
 8020f80:	200152ce 	.word	0x200152ce

08020f84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020f84:	b430      	push	{r4, r5}
 8020f86:	780d      	ldrb	r5, [r1, #0]
 8020f88:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020f8c:	2d01      	cmp	r5, #1
 8020f8e:	d00a      	beq.n	8020fa6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020f90:	d305      	bcc.n	8020f9e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8020f92:	2d02      	cmp	r5, #2
 8020f94:	d10b      	bne.n	8020fae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8020f96:	9402      	str	r4, [sp, #8]
 8020f98:	bc30      	pop	{r4, r5}
 8020f9a:	f7ff be15 	b.w	8020bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020f9e:	9402      	str	r4, [sp, #8]
 8020fa0:	bc30      	pop	{r4, r5}
 8020fa2:	f7ff bd2b 	b.w	80209fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020fa6:	9402      	str	r4, [sp, #8]
 8020fa8:	bc30      	pop	{r4, r5}
 8020faa:	f7ff bed9 	b.w	8020d60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020fae:	bc30      	pop	{r4, r5}
 8020fb0:	4770      	bx	lr
	...

08020fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb8:	b087      	sub	sp, #28
 8020fba:	4604      	mov	r4, r0
 8020fbc:	460e      	mov	r6, r1
 8020fbe:	6810      	ldr	r0, [r2, #0]
 8020fc0:	6851      	ldr	r1, [r2, #4]
 8020fc2:	ad02      	add	r5, sp, #8
 8020fc4:	4617      	mov	r7, r2
 8020fc6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020fca:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80211fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020fce:	c503      	stmia	r5!, {r0, r1}
 8020fd0:	6818      	ldr	r0, [r3, #0]
 8020fd2:	ad04      	add	r5, sp, #16
 8020fd4:	6859      	ldr	r1, [r3, #4]
 8020fd6:	c503      	stmia	r5!, {r0, r1}
 8020fd8:	a802      	add	r0, sp, #8
 8020fda:	f7f8 ffff 	bl	8019fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020fde:	4639      	mov	r1, r7
 8020fe0:	a804      	add	r0, sp, #16
 8020fe2:	f7f9 f823 	bl	801a02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020fe6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020fea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020fee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020ff2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020ff6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020ffa:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020ffe:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021002:	440e      	add	r6, r1
 8021004:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021008:	440a      	add	r2, r1
 802100a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802100e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021012:	4413      	add	r3, r2
 8021014:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021018:	4b77      	ldr	r3, [pc, #476]	; (80211f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802101a:	6818      	ldr	r0, [r3, #0]
 802101c:	6803      	ldr	r3, [r0, #0]
 802101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021020:	4798      	blx	r3
 8021022:	f8b9 b000 	ldrh.w	fp, [r9]
 8021026:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802102a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802102e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021032:	fb05 f50b 	mul.w	r5, r5, fp
 8021036:	fb0b 2303 	mla	r3, fp, r3, r2
 802103a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802103e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021042:	9300      	str	r3, [sp, #0]
 8021044:	d069      	beq.n	802111a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021046:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802104a:	4558      	cmp	r0, fp
 802104c:	f080 80cc 	bcs.w	80211e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021050:	9b00      	ldr	r3, [sp, #0]
 8021052:	4631      	mov	r1, r6
 8021054:	18c3      	adds	r3, r0, r3
 8021056:	9301      	str	r3, [sp, #4]
 8021058:	9b01      	ldr	r3, [sp, #4]
 802105a:	4298      	cmp	r0, r3
 802105c:	d24f      	bcs.n	80210fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802105e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021062:	2a00      	cmp	r2, #0
 8021064:	d048      	beq.n	80210f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021066:	fb0a f202 	mul.w	r2, sl, r2
 802106a:	1c53      	adds	r3, r2, #1
 802106c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021070:	121b      	asrs	r3, r3, #8
 8021072:	d041      	beq.n	80210f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021074:	8802      	ldrh	r2, [r0, #0]
 8021076:	b29e      	uxth	r6, r3
 8021078:	f8b4 c000 	ldrh.w	ip, [r4]
 802107c:	43db      	mvns	r3, r3
 802107e:	1215      	asrs	r5, r2, #8
 8021080:	b2db      	uxtb	r3, r3
 8021082:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021086:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802108a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802108e:	fb15 f503 	smulbb	r5, r5, r3
 8021092:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021096:	00d2      	lsls	r2, r2, #3
 8021098:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802109c:	fb07 5706 	mla	r7, r7, r6, r5
 80210a0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80210a4:	b2d2      	uxtb	r2, r2
 80210a6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80210aa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80210ae:	fb1e fe03 	smulbb	lr, lr, r3
 80210b2:	b2bf      	uxth	r7, r7
 80210b4:	fb12 f203 	smulbb	r2, r2, r3
 80210b8:	fa5f fc8c 	uxtb.w	ip, ip
 80210bc:	fb05 e506 	mla	r5, r5, r6, lr
 80210c0:	f107 0e01 	add.w	lr, r7, #1
 80210c4:	fb0c 2c06 	mla	ip, ip, r6, r2
 80210c8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80210cc:	fa1f fc8c 	uxth.w	ip, ip
 80210d0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80210d4:	b2ad      	uxth	r5, r5
 80210d6:	f10c 0701 	add.w	r7, ip, #1
 80210da:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80210de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80210e2:	ea47 070e 	orr.w	r7, r7, lr
 80210e6:	f105 0e01 	add.w	lr, r5, #1
 80210ea:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80210ee:	096d      	lsrs	r5, r5, #5
 80210f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210f4:	432f      	orrs	r7, r5
 80210f6:	8007      	strh	r7, [r0, #0]
 80210f8:	3002      	adds	r0, #2
 80210fa:	3402      	adds	r4, #2
 80210fc:	e7ac      	b.n	8021058 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80210fe:	f8b9 3000 	ldrh.w	r3, [r9]
 8021102:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021106:	eba3 0308 	sub.w	r3, r3, r8
 802110a:	eba6 0608 	sub.w	r6, r6, r8
 802110e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021112:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021116:	440e      	add	r6, r1
 8021118:	e797      	b.n	802104a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802111a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802111e:	42a8      	cmp	r0, r5
 8021120:	d262      	bcs.n	80211e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021122:	9b00      	ldr	r3, [sp, #0]
 8021124:	4631      	mov	r1, r6
 8021126:	eb00 0b03 	add.w	fp, r0, r3
 802112a:	4558      	cmp	r0, fp
 802112c:	d24e      	bcs.n	80211cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802112e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021132:	b12b      	cbz	r3, 8021140 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021134:	2bff      	cmp	r3, #255	; 0xff
 8021136:	f8b4 e000 	ldrh.w	lr, [r4]
 802113a:	d104      	bne.n	8021146 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 802113c:	f8a0 e000 	strh.w	lr, [r0]
 8021140:	3002      	adds	r0, #2
 8021142:	3402      	adds	r4, #2
 8021144:	e7f1      	b.n	802112a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021146:	8802      	ldrh	r2, [r0, #0]
 8021148:	b29f      	uxth	r7, r3
 802114a:	43db      	mvns	r3, r3
 802114c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021150:	1216      	asrs	r6, r2, #8
 8021152:	b2db      	uxtb	r3, r3
 8021154:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021158:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802115c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021160:	00d2      	lsls	r2, r2, #3
 8021162:	fb16 f603 	smulbb	r6, r6, r3
 8021166:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802116a:	b2d2      	uxtb	r2, r2
 802116c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021170:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021174:	fb1a fa03 	smulbb	sl, sl, r3
 8021178:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802117c:	fa1f fc8c 	uxth.w	ip, ip
 8021180:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021184:	fb12 f303 	smulbb	r3, r2, r3
 8021188:	fa5f fe8e 	uxtb.w	lr, lr
 802118c:	fb06 a607 	mla	r6, r6, r7, sl
 8021190:	f10c 0201 	add.w	r2, ip, #1
 8021194:	fb0e 3307 	mla	r3, lr, r7, r3
 8021198:	b2b6      	uxth	r6, r6
 802119a:	b29b      	uxth	r3, r3
 802119c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80211a0:	f106 0a01 	add.w	sl, r6, #1
 80211a4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 80211a8:	f103 0c01 	add.w	ip, r3, #1
 80211ac:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80211b0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80211b4:	0976      	lsrs	r6, r6, #5
 80211b6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80211ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80211be:	ea4c 0c02 	orr.w	ip, ip, r2
 80211c2:	ea4c 0c06 	orr.w	ip, ip, r6
 80211c6:	f8a0 c000 	strh.w	ip, [r0]
 80211ca:	e7b9      	b.n	8021140 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80211cc:	f8b9 3000 	ldrh.w	r3, [r9]
 80211d0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80211d4:	eba3 0308 	sub.w	r3, r3, r8
 80211d8:	eba6 0608 	sub.w	r6, r6, r8
 80211dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80211e0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80211e4:	440e      	add	r6, r1
 80211e6:	e79a      	b.n	802111e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80211e8:	4b03      	ldr	r3, [pc, #12]	; (80211f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80211ea:	6818      	ldr	r0, [r3, #0]
 80211ec:	6803      	ldr	r3, [r0, #0]
 80211ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211f0:	4798      	blx	r3
 80211f2:	b007      	add	sp, #28
 80211f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211f8:	200152d4 	.word	0x200152d4
 80211fc:	200152ce 	.word	0x200152ce

08021200 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021204:	b089      	sub	sp, #36	; 0x24
 8021206:	4682      	mov	sl, r0
 8021208:	460f      	mov	r7, r1
 802120a:	4691      	mov	r9, r2
 802120c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021210:	4698      	mov	r8, r3
 8021212:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021214:	2e00      	cmp	r6, #0
 8021216:	d036      	beq.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021218:	4608      	mov	r0, r1
 802121a:	f7fc f861 	bl	801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802121e:	4605      	mov	r5, r0
 8021220:	4638      	mov	r0, r7
 8021222:	f7fc f891 	bl	801d348 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021226:	f8ad 000e 	strh.w	r0, [sp, #14]
 802122a:	4638      	mov	r0, r7
 802122c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021230:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021234:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021238:	f7fc f93e 	bl	801d4b8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802123c:	4605      	mov	r5, r0
 802123e:	4638      	mov	r0, r7
 8021240:	f7fc f96a 	bl	801d518 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021244:	4681      	mov	r9, r0
 8021246:	4638      	mov	r0, r7
 8021248:	f7fc f9ba 	bl	801d5c0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802124c:	280b      	cmp	r0, #11
 802124e:	d81a      	bhi.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021250:	e8df f000 	tbb	[pc, r0]
 8021254:	1906aebd 	.word	0x1906aebd
 8021258:	19191919 	.word	0x19191919
 802125c:	b5191919 	.word	0xb5191919
 8021260:	4bb0      	ldr	r3, [pc, #704]	; (8021524 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8021262:	6818      	ldr	r0, [r3, #0]
 8021264:	6803      	ldr	r3, [r0, #0]
 8021266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021268:	4798      	blx	r3
 802126a:	2eff      	cmp	r6, #255	; 0xff
 802126c:	d121      	bne.n	80212b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 802126e:	0683      	lsls	r3, r0, #26
 8021270:	d41f      	bmi.n	80212b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021272:	4638      	mov	r0, r7
 8021274:	f7fc f8e8 	bl	801d448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021278:	b940      	cbnz	r0, 802128c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 802127a:	4623      	mov	r3, r4
 802127c:	aa02      	add	r2, sp, #8
 802127e:	4629      	mov	r1, r5
 8021280:	4650      	mov	r0, sl
 8021282:	f7ff fa2f 	bl	80206e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021286:	b009      	add	sp, #36	; 0x24
 8021288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802128c:	f10d 0818 	add.w	r8, sp, #24
 8021290:	4639      	mov	r1, r7
 8021292:	af04      	add	r7, sp, #16
 8021294:	4640      	mov	r0, r8
 8021296:	f7fc f88b 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802129a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802129e:	e887 0003 	stmia.w	r7, {r0, r1}
 80212a2:	4638      	mov	r0, r7
 80212a4:	4621      	mov	r1, r4
 80212a6:	f7f5 fd93 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 80212aa:	4638      	mov	r0, r7
 80212ac:	f7f5 fdd3 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 80212b0:	b130      	cbz	r0, 80212c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80212b2:	4633      	mov	r3, r6
 80212b4:	4622      	mov	r2, r4
 80212b6:	a902      	add	r1, sp, #8
 80212b8:	4628      	mov	r0, r5
 80212ba:	f7ff f92d 	bl	8020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80212be:	e7e2      	b.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80212c0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80212c4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80212c8:	4293      	cmp	r3, r2
 80212ca:	dd12      	ble.n	80212f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 80212cc:	1a9b      	subs	r3, r3, r2
 80212ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80212d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80212d6:	f8ad 0018 	strh.w	r0, [sp, #24]
 80212da:	4628      	mov	r0, r5
 80212dc:	f8ad 201a 	strh.w	r2, [sp, #26]
 80212e0:	4642      	mov	r2, r8
 80212e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80212e6:	a902      	add	r1, sp, #8
 80212e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80212ec:	4633      	mov	r3, r6
 80212ee:	f7ff f913 	bl	8020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80212f2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80212f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80212fa:	4293      	cmp	r3, r2
 80212fc:	dd12      	ble.n	8021324 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 80212fe:	1a9b      	subs	r3, r3, r2
 8021300:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021304:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021308:	f8ad 2018 	strh.w	r2, [sp, #24]
 802130c:	4642      	mov	r2, r8
 802130e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021312:	4628      	mov	r0, r5
 8021314:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021318:	23ff      	movs	r3, #255	; 0xff
 802131a:	f8ad 101e 	strh.w	r1, [sp, #30]
 802131e:	a902      	add	r1, sp, #8
 8021320:	f7ff f8fa 	bl	8020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021324:	463b      	mov	r3, r7
 8021326:	aa02      	add	r2, sp, #8
 8021328:	4629      	mov	r1, r5
 802132a:	4650      	mov	r0, sl
 802132c:	f7ff f9da 	bl	80206e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021330:	88a2      	ldrh	r2, [r4, #4]
 8021332:	8823      	ldrh	r3, [r4, #0]
 8021334:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021338:	4413      	add	r3, r2
 802133a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802133e:	440a      	add	r2, r1
 8021340:	b29b      	uxth	r3, r3
 8021342:	b292      	uxth	r2, r2
 8021344:	b218      	sxth	r0, r3
 8021346:	b211      	sxth	r1, r2
 8021348:	4288      	cmp	r0, r1
 802134a:	dd12      	ble.n	8021372 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 802134c:	1a9b      	subs	r3, r3, r2
 802134e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021352:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021356:	4642      	mov	r2, r8
 8021358:	f8ad 1018 	strh.w	r1, [sp, #24]
 802135c:	a902      	add	r1, sp, #8
 802135e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021362:	23ff      	movs	r3, #255	; 0xff
 8021364:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021368:	4628      	mov	r0, r5
 802136a:	f8ad 601a 	strh.w	r6, [sp, #26]
 802136e:	f7ff f8d3 	bl	8020518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021372:	88e2      	ldrh	r2, [r4, #6]
 8021374:	8863      	ldrh	r3, [r4, #2]
 8021376:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802137a:	4413      	add	r3, r2
 802137c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021380:	440a      	add	r2, r1
 8021382:	b29b      	uxth	r3, r3
 8021384:	b292      	uxth	r2, r2
 8021386:	b218      	sxth	r0, r3
 8021388:	b211      	sxth	r1, r2
 802138a:	4288      	cmp	r0, r1
 802138c:	f77f af7b 	ble.w	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021390:	1a9b      	subs	r3, r3, r2
 8021392:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021396:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802139a:	4642      	mov	r2, r8
 802139c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80213a0:	23ff      	movs	r3, #255	; 0xff
 80213a2:	f8ad 6018 	strh.w	r6, [sp, #24]
 80213a6:	f8ad 101a 	strh.w	r1, [sp, #26]
 80213aa:	f8ad 001c 	strh.w	r0, [sp, #28]
 80213ae:	e782      	b.n	80212b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 80213b0:	4633      	mov	r3, r6
 80213b2:	4622      	mov	r2, r4
 80213b4:	a902      	add	r1, sp, #8
 80213b6:	4628      	mov	r0, r5
 80213b8:	f7ff fa04 	bl	80207c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80213bc:	e763      	b.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80213be:	9600      	str	r6, [sp, #0]
 80213c0:	4623      	mov	r3, r4
 80213c2:	aa02      	add	r2, sp, #8
 80213c4:	4649      	mov	r1, r9
 80213c6:	4628      	mov	r0, r5
 80213c8:	f7ff fddc 	bl	8020f84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80213cc:	e75b      	b.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80213ce:	4638      	mov	r0, r7
 80213d0:	f7fc f83a 	bl	801d448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80213d4:	b950      	cbnz	r0, 80213ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 80213d6:	f8da 3000 	ldr.w	r3, [sl]
 80213da:	aa02      	add	r2, sp, #8
 80213dc:	4629      	mov	r1, r5
 80213de:	e9cd 6000 	strd	r6, r0, [sp]
 80213e2:	4650      	mov	r0, sl
 80213e4:	68de      	ldr	r6, [r3, #12]
 80213e6:	4623      	mov	r3, r4
 80213e8:	47b0      	blx	r6
 80213ea:	e74c      	b.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80213ec:	f10d 0818 	add.w	r8, sp, #24
 80213f0:	4639      	mov	r1, r7
 80213f2:	af04      	add	r7, sp, #16
 80213f4:	4640      	mov	r0, r8
 80213f6:	f7fb ffdb 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80213fa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80213fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8021402:	4638      	mov	r0, r7
 8021404:	4621      	mov	r1, r4
 8021406:	f7f5 fce3 	bl	8016dd0 <_ZN8touchgfx4RectaNERKS0_>
 802140a:	4638      	mov	r0, r7
 802140c:	f7f5 fd23 	bl	8016e56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021410:	b138      	cbz	r0, 8021422 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8021412:	4623      	mov	r3, r4
 8021414:	9600      	str	r6, [sp, #0]
 8021416:	aa02      	add	r2, sp, #8
 8021418:	4649      	mov	r1, r9
 802141a:	4628      	mov	r0, r5
 802141c:	f7ff fdca 	bl	8020fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021420:	e731      	b.n	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021422:	f8da 3000 	ldr.w	r3, [sl]
 8021426:	aa02      	add	r2, sp, #8
 8021428:	4629      	mov	r1, r5
 802142a:	e9cd 6000 	strd	r6, r0, [sp]
 802142e:	4650      	mov	r0, sl
 8021430:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021434:	463b      	mov	r3, r7
 8021436:	47d8      	blx	fp
 8021438:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802143c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021440:	4293      	cmp	r3, r2
 8021442:	dd13      	ble.n	802146c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8021444:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021448:	1a9b      	subs	r3, r3, r2
 802144a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802144e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021452:	4628      	mov	r0, r5
 8021454:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021458:	aa02      	add	r2, sp, #8
 802145a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802145e:	4649      	mov	r1, r9
 8021460:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021464:	4643      	mov	r3, r8
 8021466:	9600      	str	r6, [sp, #0]
 8021468:	f7ff fda4 	bl	8020fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802146c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021470:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021474:	4293      	cmp	r3, r2
 8021476:	dd13      	ble.n	80214a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8021478:	1a9b      	subs	r3, r3, r2
 802147a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802147e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021482:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021486:	aa02      	add	r2, sp, #8
 8021488:	f8ad 001a 	strh.w	r0, [sp, #26]
 802148c:	4628      	mov	r0, r5
 802148e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021492:	4643      	mov	r3, r8
 8021494:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021498:	4649      	mov	r1, r9
 802149a:	9600      	str	r6, [sp, #0]
 802149c:	f7ff fd8a 	bl	8020fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80214a0:	88a2      	ldrh	r2, [r4, #4]
 80214a2:	8823      	ldrh	r3, [r4, #0]
 80214a4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80214a8:	4413      	add	r3, r2
 80214aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80214ae:	440a      	add	r2, r1
 80214b0:	b29b      	uxth	r3, r3
 80214b2:	b292      	uxth	r2, r2
 80214b4:	b218      	sxth	r0, r3
 80214b6:	b211      	sxth	r1, r2
 80214b8:	4288      	cmp	r0, r1
 80214ba:	dd13      	ble.n	80214e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 80214bc:	1a9b      	subs	r3, r3, r2
 80214be:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80214c2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80214c6:	aa02      	add	r2, sp, #8
 80214c8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80214cc:	4649      	mov	r1, r9
 80214ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 80214d2:	4643      	mov	r3, r8
 80214d4:	f8ad 001e 	strh.w	r0, [sp, #30]
 80214d8:	4628      	mov	r0, r5
 80214da:	9600      	str	r6, [sp, #0]
 80214dc:	f8ad 701a 	strh.w	r7, [sp, #26]
 80214e0:	f7ff fd68 	bl	8020fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80214e4:	88e2      	ldrh	r2, [r4, #6]
 80214e6:	8863      	ldrh	r3, [r4, #2]
 80214e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80214ec:	4413      	add	r3, r2
 80214ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80214f2:	440a      	add	r2, r1
 80214f4:	b29b      	uxth	r3, r3
 80214f6:	b292      	uxth	r2, r2
 80214f8:	b218      	sxth	r0, r3
 80214fa:	b211      	sxth	r1, r2
 80214fc:	4288      	cmp	r0, r1
 80214fe:	f77f aec2 	ble.w	8021286 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021502:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021506:	1a9b      	subs	r3, r3, r2
 8021508:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802150c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021510:	4643      	mov	r3, r8
 8021512:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021516:	f8ad 101a 	strh.w	r1, [sp, #26]
 802151a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802151e:	9600      	str	r6, [sp, #0]
 8021520:	e779      	b.n	8021416 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8021522:	bf00      	nop
 8021524:	200152d4 	.word	0x200152d4

08021528 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021528:	b180      	cbz	r0, 802154c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802152a:	2903      	cmp	r1, #3
 802152c:	d81c      	bhi.n	8021568 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802152e:	e8df f001 	tbb	[pc, r1]
 8021532:	1d02      	.short	0x1d02
 8021534:	1f08      	.short	0x1f08
 8021536:	4b10      	ldr	r3, [pc, #64]	; (8021578 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021538:	8818      	ldrh	r0, [r3, #0]
 802153a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802153e:	4240      	negs	r0, r0
 8021540:	4770      	bx	lr
 8021542:	4b0d      	ldr	r3, [pc, #52]	; (8021578 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021544:	8818      	ldrh	r0, [r3, #0]
 8021546:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802154a:	4770      	bx	lr
 802154c:	2903      	cmp	r1, #3
 802154e:	d80b      	bhi.n	8021568 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021550:	a301      	add	r3, pc, #4	; (adr r3, 8021558 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021552:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021556:	bf00      	nop
 8021558:	0802156d 	.word	0x0802156d
 802155c:	08021543 	.word	0x08021543
 8021560:	08021571 	.word	0x08021571
 8021564:	08021537 	.word	0x08021537
 8021568:	2000      	movs	r0, #0
 802156a:	4770      	bx	lr
 802156c:	2001      	movs	r0, #1
 802156e:	4770      	bx	lr
 8021570:	f04f 30ff 	mov.w	r0, #4294967295
 8021574:	4770      	bx	lr
 8021576:	bf00      	nop
 8021578:	200152ce 	.word	0x200152ce

0802157c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802157c:	b180      	cbz	r0, 80215a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802157e:	2903      	cmp	r1, #3
 8021580:	d81c      	bhi.n	80215bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021582:	e8df f001 	tbb	[pc, r1]
 8021586:	021d      	.short	0x021d
 8021588:	071f      	.short	0x071f
 802158a:	4b10      	ldr	r3, [pc, #64]	; (80215cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802158c:	8818      	ldrh	r0, [r3, #0]
 802158e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021592:	4770      	bx	lr
 8021594:	4b0d      	ldr	r3, [pc, #52]	; (80215cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021596:	8818      	ldrh	r0, [r3, #0]
 8021598:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802159c:	4240      	negs	r0, r0
 802159e:	4770      	bx	lr
 80215a0:	2903      	cmp	r1, #3
 80215a2:	d80b      	bhi.n	80215bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80215a4:	a301      	add	r3, pc, #4	; (adr r3, 80215ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80215a6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80215aa:	bf00      	nop
 80215ac:	0802158b 	.word	0x0802158b
 80215b0:	080215c5 	.word	0x080215c5
 80215b4:	08021595 	.word	0x08021595
 80215b8:	080215c1 	.word	0x080215c1
 80215bc:	2000      	movs	r0, #0
 80215be:	4770      	bx	lr
 80215c0:	2001      	movs	r0, #1
 80215c2:	4770      	bx	lr
 80215c4:	f04f 30ff 	mov.w	r0, #4294967295
 80215c8:	4770      	bx	lr
 80215ca:	bf00      	nop
 80215cc:	200152ce 	.word	0x200152ce

080215d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80215d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215d4:	b099      	sub	sp, #100	; 0x64
 80215d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80215d8:	a914      	add	r1, sp, #80	; 0x50
 80215da:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 80215de:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80215e2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80215e6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80215ea:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80215ee:	e881 000c 	stmia.w	r1, {r2, r3}
 80215f2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80215f6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80215fa:	9309      	str	r3, [sp, #36]	; 0x24
 80215fc:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021600:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021604:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8021608:	9310      	str	r3, [sp, #64]	; 0x40
 802160a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 802160e:	930c      	str	r3, [sp, #48]	; 0x30
 8021610:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8021614:	798f      	ldrb	r7, [r1, #6]
 8021616:	431f      	orrs	r7, r3
 8021618:	f000 8195 	beq.w	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802161c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021620:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8021624:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021628:	ea59 0903 	orrs.w	r9, r9, r3
 802162c:	f000 818b 	beq.w	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021630:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021634:	b29b      	uxth	r3, r3
 8021636:	2d00      	cmp	r5, #0
 8021638:	f000 812e 	beq.w	8021898 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802163c:	1aed      	subs	r5, r5, r3
 802163e:	b2ad      	uxth	r5, r5
 8021640:	042b      	lsls	r3, r5, #16
 8021642:	d502      	bpl.n	802164a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021644:	1b64      	subs	r4, r4, r5
 8021646:	2500      	movs	r5, #0
 8021648:	b224      	sxth	r4, r4
 802164a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802164e:	a814      	add	r0, sp, #80	; 0x50
 8021650:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8021654:	428c      	cmp	r4, r1
 8021656:	b28b      	uxth	r3, r1
 8021658:	bfbf      	itttt	lt
 802165a:	18ed      	addlt	r5, r5, r3
 802165c:	1b2c      	sublt	r4, r5, r4
 802165e:	b2a5      	uxthlt	r5, r4
 8021660:	460c      	movlt	r4, r1
 8021662:	8891      	ldrh	r1, [r2, #4]
 8021664:	440b      	add	r3, r1
 8021666:	4621      	mov	r1, r4
 8021668:	b21b      	sxth	r3, r3
 802166a:	930f      	str	r3, [sp, #60]	; 0x3c
 802166c:	88d3      	ldrh	r3, [r2, #6]
 802166e:	8852      	ldrh	r2, [r2, #2]
 8021670:	4413      	add	r3, r2
 8021672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021674:	b21b      	sxth	r3, r3
 8021676:	930d      	str	r3, [sp, #52]	; 0x34
 8021678:	4bbd      	ldr	r3, [pc, #756]	; (8021970 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802167a:	f893 b000 	ldrb.w	fp, [r3]
 802167e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021682:	f1dc 0300 	rsbs	r3, ip, #0
 8021686:	eb43 030c 	adc.w	r3, r3, ip
 802168a:	930e      	str	r3, [sp, #56]	; 0x38
 802168c:	4653      	mov	r3, sl
 802168e:	f7f8 fb20 	bl	8019cd2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021692:	4621      	mov	r1, r4
 8021694:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021698:	4653      	mov	r3, sl
 802169a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802169c:	a814      	add	r0, sp, #80	; 0x50
 802169e:	f7f8 fb35 	bl	8019d0c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80216a2:	a918      	add	r1, sp, #96	; 0x60
 80216a4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80216a8:	a817      	add	r0, sp, #92	; 0x5c
 80216aa:	f7f8 fc55 	bl	8019f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80216ae:	f1ba 0f00 	cmp.w	sl, #0
 80216b2:	f040 80f4 	bne.w	802189e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80216b6:	f1bb 0f01 	cmp.w	fp, #1
 80216ba:	f040 80f8 	bne.w	80218ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80216be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	f040 8145 	bne.w	8021950 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80216c6:	b2ba      	uxth	r2, r7
 80216c8:	b905      	cbnz	r5, 80216cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80216ca:	b16e      	cbz	r6, 80216e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80216cc:	fb06 5302 	mla	r3, r6, r2, r5
 80216d0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80216d2:	4631      	mov	r1, r6
 80216d4:	fb08 f303 	mul.w	r3, r8, r3
 80216d8:	f003 0607 	and.w	r6, r3, #7
 80216dc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80216e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80216e2:	eba9 0301 	sub.w	r3, r9, r1
 80216e6:	930a      	str	r3, [sp, #40]	; 0x28
 80216e8:	4651      	mov	r1, sl
 80216ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80216ec:	f7ff ff1c 	bl	8021528 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80216f0:	4681      	mov	r9, r0
 80216f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80216f4:	f7ff ff42 	bl	802157c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80216f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80216fc:	4683      	mov	fp, r0
 80216fe:	eba3 0a01 	sub.w	sl, r3, r1
 8021702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021704:	459a      	cmp	sl, r3
 8021706:	bfa8      	it	ge
 8021708:	469a      	movge	sl, r3
 802170a:	f1ba 0f00 	cmp.w	sl, #0
 802170e:	f340 811a 	ble.w	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021712:	1b64      	subs	r4, r4, r5
 8021714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021716:	1b1c      	subs	r4, r3, r4
 8021718:	42bc      	cmp	r4, r7
 802171a:	bfd4      	ite	le
 802171c:	ebc5 0504 	rsble	r5, r5, r4
 8021720:	ebc5 0507 	rsbgt	r5, r5, r7
 8021724:	2d00      	cmp	r5, #0
 8021726:	f340 810e 	ble.w	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802172a:	1b52      	subs	r2, r2, r5
 802172c:	fb08 f302 	mul.w	r3, r8, r2
 8021730:	930f      	str	r3, [sp, #60]	; 0x3c
 8021732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021734:	2b00      	cmp	r3, #0
 8021736:	f040 8116 	bne.w	8021966 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802173a:	4b8e      	ldr	r3, [pc, #568]	; (8021974 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802173c:	6818      	ldr	r0, [r3, #0]
 802173e:	6803      	ldr	r3, [r0, #0]
 8021740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021742:	4798      	blx	r3
 8021744:	2301      	movs	r3, #1
 8021746:	4a8c      	ldr	r2, [pc, #560]	; (8021978 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8021748:	fa03 f308 	lsl.w	r3, r3, r8
 802174c:	8811      	ldrh	r1, [r2, #0]
 802174e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8021752:	3b01      	subs	r3, #1
 8021754:	b2db      	uxtb	r3, r3
 8021756:	930e      	str	r3, [sp, #56]	; 0x38
 8021758:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802175c:	fb01 2303 	mla	r3, r1, r3, r2
 8021760:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021764:	930a      	str	r3, [sp, #40]	; 0x28
 8021766:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021768:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802176c:	9313      	str	r3, [sp, #76]	; 0x4c
 802176e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021770:	0a19      	lsrs	r1, r3, #8
 8021772:	b2cb      	uxtb	r3, r1
 8021774:	9312      	str	r3, [sp, #72]	; 0x48
 8021776:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021778:	b2db      	uxtb	r3, r3
 802177a:	9311      	str	r3, [sp, #68]	; 0x44
 802177c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802177e:	095a      	lsrs	r2, r3, #5
 8021780:	4b7e      	ldr	r3, [pc, #504]	; (802197c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8021782:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021786:	400b      	ands	r3, r1
 8021788:	4313      	orrs	r3, r2
 802178a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802178c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021790:	4313      	orrs	r3, r2
 8021792:	b29b      	uxth	r3, r3
 8021794:	9310      	str	r3, [sp, #64]	; 0x40
 8021796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021798:	781a      	ldrb	r2, [r3, #0]
 802179a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802179e:	fb05 b919 	mls	r9, r5, r9, fp
 80217a2:	4132      	asrs	r2, r6
 80217a4:	fb03 fb05 	mul.w	fp, r3, r5
 80217a8:	930d      	str	r3, [sp, #52]	; 0x34
 80217aa:	b2d2      	uxtb	r2, r2
 80217ac:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80217b0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80217b4:	f0c0 80f5 	bcc.w	80219a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80217b8:	46ae      	mov	lr, r5
 80217ba:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80217be:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80217c2:	f0c0 80dd 	bcc.w	8021980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80217c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217c8:	4013      	ands	r3, r2
 80217ca:	d055      	beq.n	8021878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80217cc:	20ff      	movs	r0, #255	; 0xff
 80217ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80217d0:	fb90 f1f1 	sdiv	r1, r0, r1
 80217d4:	434b      	muls	r3, r1
 80217d6:	2bfe      	cmp	r3, #254	; 0xfe
 80217d8:	dd03      	ble.n	80217e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80217da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80217dc:	4281      	cmp	r1, r0
 80217de:	f000 80c4 	beq.w	802196a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80217e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80217e4:	f8bc 4000 	ldrh.w	r4, [ip]
 80217e8:	fb11 f303 	smulbb	r3, r1, r3
 80217ec:	1220      	asrs	r0, r4, #8
 80217ee:	b29b      	uxth	r3, r3
 80217f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80217f4:	1c59      	adds	r1, r3, #1
 80217f6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80217fa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80217fe:	10e1      	asrs	r1, r4, #3
 8021800:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021804:	00e4      	lsls	r4, r4, #3
 8021806:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802180a:	b29f      	uxth	r7, r3
 802180c:	43db      	mvns	r3, r3
 802180e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021812:	b2db      	uxtb	r3, r3
 8021814:	b2e4      	uxtb	r4, r4
 8021816:	9309      	str	r3, [sp, #36]	; 0x24
 8021818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802181a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802181e:	fb13 f907 	smulbb	r9, r3, r7
 8021822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021824:	fb00 9003 	mla	r0, r0, r3, r9
 8021828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802182a:	fb13 f907 	smulbb	r9, r3, r7
 802182e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021830:	b280      	uxth	r0, r0
 8021832:	fb01 9103 	mla	r1, r1, r3, r9
 8021836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021838:	fb13 f707 	smulbb	r7, r3, r7
 802183c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802183e:	b289      	uxth	r1, r1
 8021840:	fb04 7403 	mla	r4, r4, r3, r7
 8021844:	1c43      	adds	r3, r0, #1
 8021846:	b2a4      	uxth	r4, r4
 8021848:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802184c:	f104 0901 	add.w	r9, r4, #1
 8021850:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021854:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8021858:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802185c:	ea49 0000 	orr.w	r0, r9, r0
 8021860:	f101 0901 	add.w	r9, r1, #1
 8021864:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8021868:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802186c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021870:	ea40 0009 	orr.w	r0, r0, r9
 8021874:	f8ac 0000 	strh.w	r0, [ip]
 8021878:	4446      	add	r6, r8
 802187a:	b2b6      	uxth	r6, r6
 802187c:	2e07      	cmp	r6, #7
 802187e:	bf89      	itett	hi
 8021880:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8021882:	fa42 f208 	asrls.w	r2, r2, r8
 8021886:	2600      	movhi	r6, #0
 8021888:	785a      	ldrbhi	r2, [r3, #1]
 802188a:	bf8a      	itet	hi
 802188c:	3301      	addhi	r3, #1
 802188e:	b2d2      	uxtbls	r2, r2
 8021890:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8021892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021894:	449c      	add	ip, r3
 8021896:	e792      	b.n	80217be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8021898:	441c      	add	r4, r3
 802189a:	b224      	sxth	r4, r4
 802189c:	e6d5      	b.n	802164a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802189e:	f1ba 0f01 	cmp.w	sl, #1
 80218a2:	f47f af0c 	bne.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80218a6:	f1bb 0f01 	cmp.w	fp, #1
 80218aa:	f47f af08 	bne.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80218ae:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8021974 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80218b2:	f8db 0000 	ldr.w	r0, [fp]
 80218b6:	6803      	ldr	r3, [r0, #0]
 80218b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218ba:	4798      	blx	r3
 80218bc:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80218c0:	465a      	mov	r2, fp
 80218c2:	d006      	beq.n	80218d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80218c4:	f1b8 0f04 	cmp.w	r8, #4
 80218c8:	d140      	bne.n	802194c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80218ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80218cc:	3300      	adds	r3, #0
 80218ce:	bf18      	it	ne
 80218d0:	2301      	movne	r3, #1
 80218d2:	0580      	lsls	r0, r0, #22
 80218d4:	d56e      	bpl.n	80219b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80218d6:	f1b8 0f08 	cmp.w	r8, #8
 80218da:	d16b      	bne.n	80219b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80218dc:	2b00      	cmp	r3, #0
 80218de:	bf0c      	ite	eq
 80218e0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80218e4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80218e8:	2d00      	cmp	r5, #0
 80218ea:	f47f aee8 	bne.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80218ee:	2e00      	cmp	r6, #0
 80218f0:	f47f aee5 	bne.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80218f4:	19e3      	adds	r3, r4, r7
 80218f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80218f8:	4283      	cmp	r3, r0
 80218fa:	f73f aee0 	bgt.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80218fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021900:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021902:	444b      	add	r3, r9
 8021904:	4283      	cmp	r3, r0
 8021906:	f73f aeda 	bgt.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802190a:	b2bf      	uxth	r7, r7
 802190c:	f1b8 0f08 	cmp.w	r8, #8
 8021910:	6810      	ldr	r0, [r2, #0]
 8021912:	f04f 0500 	mov.w	r5, #0
 8021916:	bf18      	it	ne
 8021918:	3701      	addne	r7, #1
 802191a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802191e:	6804      	ldr	r4, [r0, #0]
 8021920:	bf18      	it	ne
 8021922:	f027 0701 	bicne.w	r7, r7, #1
 8021926:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802192a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802192e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021930:	bf18      	it	ne
 8021932:	b2bf      	uxthne	r7, r7
 8021934:	9104      	str	r1, [sp, #16]
 8021936:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021938:	e9cd 7900 	strd	r7, r9, [sp]
 802193c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021940:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021942:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8021944:	47a0      	blx	r4
 8021946:	b019      	add	sp, #100	; 0x64
 8021948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802194c:	2300      	movs	r3, #0
 802194e:	e7c0      	b.n	80218d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8021950:	2208      	movs	r2, #8
 8021952:	fb92 f3f8 	sdiv	r3, r2, r8
 8021956:	1e5a      	subs	r2, r3, #1
 8021958:	443a      	add	r2, r7
 802195a:	fb92 f2f3 	sdiv	r2, r2, r3
 802195e:	fb12 f203 	smulbb	r2, r2, r3
 8021962:	b292      	uxth	r2, r2
 8021964:	e6b0      	b.n	80216c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8021966:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021968:	e6ec      	b.n	8021744 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802196a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802196c:	e782      	b.n	8021874 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802196e:	bf00      	nop
 8021970:	200152cc 	.word	0x200152cc
 8021974:	200152d4 	.word	0x200152d4
 8021978:	200152ce 	.word	0x200152ce
 802197c:	00fff800 	.word	0x00fff800
 8021980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021982:	b153      	cbz	r3, 802199a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8021984:	441e      	add	r6, r3
 8021986:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021988:	b2b6      	uxth	r6, r6
 802198a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802198e:	f006 0607 	and.w	r6, r6, #7
 8021992:	781a      	ldrb	r2, [r3, #0]
 8021994:	9328      	str	r3, [sp, #160]	; 0xa0
 8021996:	4132      	asrs	r2, r6
 8021998:	b2d2      	uxtb	r2, r2
 802199a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802199c:	445b      	add	r3, fp
 802199e:	930a      	str	r3, [sp, #40]	; 0x28
 80219a0:	e706      	b.n	80217b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80219a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d1ce      	bne.n	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80219a8:	4b05      	ldr	r3, [pc, #20]	; (80219c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80219aa:	6818      	ldr	r0, [r3, #0]
 80219ac:	6803      	ldr	r3, [r0, #0]
 80219ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219b0:	4798      	blx	r3
 80219b2:	e7c8      	b.n	8021946 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	f43f ae82 	beq.w	80216be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80219ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80219be:	e793      	b.n	80218e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80219c0:	200152d4 	.word	0x200152d4

080219c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80219c4:	b538      	push	{r3, r4, r5, lr}
 80219c6:	4c15      	ldr	r4, [pc, #84]	; (8021a1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80219c8:	4605      	mov	r5, r0
 80219ca:	7823      	ldrb	r3, [r4, #0]
 80219cc:	f3bf 8f5b 	dmb	ish
 80219d0:	07da      	lsls	r2, r3, #31
 80219d2:	d40b      	bmi.n	80219ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80219d4:	4620      	mov	r0, r4
 80219d6:	f007 fa87 	bl	8028ee8 <__cxa_guard_acquire>
 80219da:	b138      	cbz	r0, 80219ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80219dc:	4620      	mov	r0, r4
 80219de:	f007 fa8f 	bl	8028f00 <__cxa_guard_release>
 80219e2:	4a0f      	ldr	r2, [pc, #60]	; (8021a20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80219e4:	490f      	ldr	r1, [pc, #60]	; (8021a24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80219e6:	4810      	ldr	r0, [pc, #64]	; (8021a28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80219e8:	f007 fa77 	bl	8028eda <__aeabi_atexit>
 80219ec:	4c0f      	ldr	r4, [pc, #60]	; (8021a2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80219ee:	7823      	ldrb	r3, [r4, #0]
 80219f0:	f3bf 8f5b 	dmb	ish
 80219f4:	07db      	lsls	r3, r3, #31
 80219f6:	d40b      	bmi.n	8021a10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80219f8:	4620      	mov	r0, r4
 80219fa:	f007 fa75 	bl	8028ee8 <__cxa_guard_acquire>
 80219fe:	b138      	cbz	r0, 8021a10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021a00:	4620      	mov	r0, r4
 8021a02:	f007 fa7d 	bl	8028f00 <__cxa_guard_release>
 8021a06:	4a06      	ldr	r2, [pc, #24]	; (8021a20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021a08:	4909      	ldr	r1, [pc, #36]	; (8021a30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021a0a:	480a      	ldr	r0, [pc, #40]	; (8021a34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021a0c:	f007 fa65 	bl	8028eda <__aeabi_atexit>
 8021a10:	4b05      	ldr	r3, [pc, #20]	; (8021a28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021a12:	612b      	str	r3, [r5, #16]
 8021a14:	4b07      	ldr	r3, [pc, #28]	; (8021a34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021a16:	616b      	str	r3, [r5, #20]
 8021a18:	bd38      	pop	{r3, r4, r5, pc}
 8021a1a:	bf00      	nop
 8021a1c:	200153a0 	.word	0x200153a0
 8021a20:	20000000 	.word	0x20000000
 8021a24:	0801fbd1 	.word	0x0801fbd1
 8021a28:	20000088 	.word	0x20000088
 8021a2c:	200153a4 	.word	0x200153a4
 8021a30:	0801fbcf 	.word	0x0801fbcf
 8021a34:	2000008c 	.word	0x2000008c

08021a38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021a38:	b538      	push	{r3, r4, r5, lr}
 8021a3a:	4c15      	ldr	r4, [pc, #84]	; (8021a90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021a3c:	4605      	mov	r5, r0
 8021a3e:	7823      	ldrb	r3, [r4, #0]
 8021a40:	f3bf 8f5b 	dmb	ish
 8021a44:	07da      	lsls	r2, r3, #31
 8021a46:	d40b      	bmi.n	8021a60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021a48:	4620      	mov	r0, r4
 8021a4a:	f007 fa4d 	bl	8028ee8 <__cxa_guard_acquire>
 8021a4e:	b138      	cbz	r0, 8021a60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021a50:	4620      	mov	r0, r4
 8021a52:	f007 fa55 	bl	8028f00 <__cxa_guard_release>
 8021a56:	4a0f      	ldr	r2, [pc, #60]	; (8021a94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021a58:	490f      	ldr	r1, [pc, #60]	; (8021a98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021a5a:	4810      	ldr	r0, [pc, #64]	; (8021a9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021a5c:	f007 fa3d 	bl	8028eda <__aeabi_atexit>
 8021a60:	4c0f      	ldr	r4, [pc, #60]	; (8021aa0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8021a62:	7823      	ldrb	r3, [r4, #0]
 8021a64:	f3bf 8f5b 	dmb	ish
 8021a68:	07db      	lsls	r3, r3, #31
 8021a6a:	d40b      	bmi.n	8021a84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021a6c:	4620      	mov	r0, r4
 8021a6e:	f007 fa3b 	bl	8028ee8 <__cxa_guard_acquire>
 8021a72:	b138      	cbz	r0, 8021a84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021a74:	4620      	mov	r0, r4
 8021a76:	f007 fa43 	bl	8028f00 <__cxa_guard_release>
 8021a7a:	4a06      	ldr	r2, [pc, #24]	; (8021a94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021a7c:	4909      	ldr	r1, [pc, #36]	; (8021aa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021a7e:	480a      	ldr	r0, [pc, #40]	; (8021aa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021a80:	f007 fa2b 	bl	8028eda <__aeabi_atexit>
 8021a84:	4b05      	ldr	r3, [pc, #20]	; (8021a9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021a86:	60ab      	str	r3, [r5, #8]
 8021a88:	4b07      	ldr	r3, [pc, #28]	; (8021aa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021a8a:	60eb      	str	r3, [r5, #12]
 8021a8c:	bd38      	pop	{r3, r4, r5, pc}
 8021a8e:	bf00      	nop
 8021a90:	20015378 	.word	0x20015378
 8021a94:	20000000 	.word	0x20000000
 8021a98:	0801fbd5 	.word	0x0801fbd5
 8021a9c:	20000060 	.word	0x20000060
 8021aa0:	2001537c 	.word	0x2001537c
 8021aa4:	0801fbd3 	.word	0x0801fbd3
 8021aa8:	20000064 	.word	0x20000064

08021aac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021aac:	b510      	push	{r4, lr}
 8021aae:	4604      	mov	r4, r0
 8021ab0:	f7ff ff88 	bl	80219c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021ab4:	4620      	mov	r0, r4
 8021ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021aba:	f7ff bfbd 	b.w	8021a38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021ac0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021ac0:	b538      	push	{r3, r4, r5, lr}
 8021ac2:	4c15      	ldr	r4, [pc, #84]	; (8021b18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021ac4:	4605      	mov	r5, r0
 8021ac6:	7823      	ldrb	r3, [r4, #0]
 8021ac8:	f3bf 8f5b 	dmb	ish
 8021acc:	07da      	lsls	r2, r3, #31
 8021ace:	d40b      	bmi.n	8021ae8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021ad0:	4620      	mov	r0, r4
 8021ad2:	f007 fa09 	bl	8028ee8 <__cxa_guard_acquire>
 8021ad6:	b138      	cbz	r0, 8021ae8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021ad8:	4620      	mov	r0, r4
 8021ada:	f007 fa11 	bl	8028f00 <__cxa_guard_release>
 8021ade:	4a0f      	ldr	r2, [pc, #60]	; (8021b1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021ae0:	490f      	ldr	r1, [pc, #60]	; (8021b20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021ae2:	4810      	ldr	r0, [pc, #64]	; (8021b24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021ae4:	f007 f9f9 	bl	8028eda <__aeabi_atexit>
 8021ae8:	4c0f      	ldr	r4, [pc, #60]	; (8021b28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021aea:	7823      	ldrb	r3, [r4, #0]
 8021aec:	f3bf 8f5b 	dmb	ish
 8021af0:	07db      	lsls	r3, r3, #31
 8021af2:	d40b      	bmi.n	8021b0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021af4:	4620      	mov	r0, r4
 8021af6:	f007 f9f7 	bl	8028ee8 <__cxa_guard_acquire>
 8021afa:	b138      	cbz	r0, 8021b0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021afc:	4620      	mov	r0, r4
 8021afe:	f007 f9ff 	bl	8028f00 <__cxa_guard_release>
 8021b02:	4a06      	ldr	r2, [pc, #24]	; (8021b1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021b04:	4909      	ldr	r1, [pc, #36]	; (8021b2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021b06:	480a      	ldr	r0, [pc, #40]	; (8021b30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021b08:	f007 f9e7 	bl	8028eda <__aeabi_atexit>
 8021b0c:	4b05      	ldr	r3, [pc, #20]	; (8021b24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021b0e:	622b      	str	r3, [r5, #32]
 8021b10:	4b07      	ldr	r3, [pc, #28]	; (8021b30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021b12:	626b      	str	r3, [r5, #36]	; 0x24
 8021b14:	bd38      	pop	{r3, r4, r5, pc}
 8021b16:	bf00      	nop
 8021b18:	200153a8 	.word	0x200153a8
 8021b1c:	20000000 	.word	0x20000000
 8021b20:	0801fbc9 	.word	0x0801fbc9
 8021b24:	20000090 	.word	0x20000090
 8021b28:	200153ac 	.word	0x200153ac
 8021b2c:	0801fbc7 	.word	0x0801fbc7
 8021b30:	20000094 	.word	0x20000094

08021b34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021b34:	b538      	push	{r3, r4, r5, lr}
 8021b36:	4c15      	ldr	r4, [pc, #84]	; (8021b8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021b38:	4605      	mov	r5, r0
 8021b3a:	7823      	ldrb	r3, [r4, #0]
 8021b3c:	f3bf 8f5b 	dmb	ish
 8021b40:	07da      	lsls	r2, r3, #31
 8021b42:	d40b      	bmi.n	8021b5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b44:	4620      	mov	r0, r4
 8021b46:	f007 f9cf 	bl	8028ee8 <__cxa_guard_acquire>
 8021b4a:	b138      	cbz	r0, 8021b5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b4c:	4620      	mov	r0, r4
 8021b4e:	f007 f9d7 	bl	8028f00 <__cxa_guard_release>
 8021b52:	4a0f      	ldr	r2, [pc, #60]	; (8021b90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b54:	490f      	ldr	r1, [pc, #60]	; (8021b94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021b56:	4810      	ldr	r0, [pc, #64]	; (8021b98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021b58:	f007 f9bf 	bl	8028eda <__aeabi_atexit>
 8021b5c:	4c0f      	ldr	r4, [pc, #60]	; (8021b9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021b5e:	7823      	ldrb	r3, [r4, #0]
 8021b60:	f3bf 8f5b 	dmb	ish
 8021b64:	07db      	lsls	r3, r3, #31
 8021b66:	d40b      	bmi.n	8021b80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b68:	4620      	mov	r0, r4
 8021b6a:	f007 f9bd 	bl	8028ee8 <__cxa_guard_acquire>
 8021b6e:	b138      	cbz	r0, 8021b80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b70:	4620      	mov	r0, r4
 8021b72:	f007 f9c5 	bl	8028f00 <__cxa_guard_release>
 8021b76:	4a06      	ldr	r2, [pc, #24]	; (8021b90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b78:	4909      	ldr	r1, [pc, #36]	; (8021ba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021b7a:	480a      	ldr	r0, [pc, #40]	; (8021ba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021b7c:	f007 f9ad 	bl	8028eda <__aeabi_atexit>
 8021b80:	4b05      	ldr	r3, [pc, #20]	; (8021b98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021b82:	61ab      	str	r3, [r5, #24]
 8021b84:	4b07      	ldr	r3, [pc, #28]	; (8021ba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021b86:	61eb      	str	r3, [r5, #28]
 8021b88:	bd38      	pop	{r3, r4, r5, pc}
 8021b8a:	bf00      	nop
 8021b8c:	20015380 	.word	0x20015380
 8021b90:	20000000 	.word	0x20000000
 8021b94:	0801fbcd 	.word	0x0801fbcd
 8021b98:	20000068 	.word	0x20000068
 8021b9c:	20015384 	.word	0x20015384
 8021ba0:	0801fbcb 	.word	0x0801fbcb
 8021ba4:	2000006c 	.word	0x2000006c

08021ba8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021ba8:	b510      	push	{r4, lr}
 8021baa:	4604      	mov	r4, r0
 8021bac:	f7ff ff88 	bl	8021ac0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bb6:	f7ff bfbd 	b.w	8021b34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021bbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021bbc:	b538      	push	{r3, r4, r5, lr}
 8021bbe:	4c15      	ldr	r4, [pc, #84]	; (8021c14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021bc0:	4605      	mov	r5, r0
 8021bc2:	7823      	ldrb	r3, [r4, #0]
 8021bc4:	f3bf 8f5b 	dmb	ish
 8021bc8:	07da      	lsls	r2, r3, #31
 8021bca:	d40b      	bmi.n	8021be4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021bcc:	4620      	mov	r0, r4
 8021bce:	f007 f98b 	bl	8028ee8 <__cxa_guard_acquire>
 8021bd2:	b138      	cbz	r0, 8021be4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021bd4:	4620      	mov	r0, r4
 8021bd6:	f007 f993 	bl	8028f00 <__cxa_guard_release>
 8021bda:	4a0f      	ldr	r2, [pc, #60]	; (8021c18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021bdc:	490f      	ldr	r1, [pc, #60]	; (8021c1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021bde:	4810      	ldr	r0, [pc, #64]	; (8021c20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021be0:	f007 f97b 	bl	8028eda <__aeabi_atexit>
 8021be4:	4c0f      	ldr	r4, [pc, #60]	; (8021c24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021be6:	7823      	ldrb	r3, [r4, #0]
 8021be8:	f3bf 8f5b 	dmb	ish
 8021bec:	07db      	lsls	r3, r3, #31
 8021bee:	d40b      	bmi.n	8021c08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	f007 f979 	bl	8028ee8 <__cxa_guard_acquire>
 8021bf6:	b138      	cbz	r0, 8021c08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021bf8:	4620      	mov	r0, r4
 8021bfa:	f007 f981 	bl	8028f00 <__cxa_guard_release>
 8021bfe:	4a06      	ldr	r2, [pc, #24]	; (8021c18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021c00:	4909      	ldr	r1, [pc, #36]	; (8021c28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021c02:	480a      	ldr	r0, [pc, #40]	; (8021c2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021c04:	f007 f969 	bl	8028eda <__aeabi_atexit>
 8021c08:	4b05      	ldr	r3, [pc, #20]	; (8021c20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021c0a:	632b      	str	r3, [r5, #48]	; 0x30
 8021c0c:	4b07      	ldr	r3, [pc, #28]	; (8021c2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021c0e:	636b      	str	r3, [r5, #52]	; 0x34
 8021c10:	bd38      	pop	{r3, r4, r5, pc}
 8021c12:	bf00      	nop
 8021c14:	200153b8 	.word	0x200153b8
 8021c18:	20000000 	.word	0x20000000
 8021c1c:	0801fbc1 	.word	0x0801fbc1
 8021c20:	200000a0 	.word	0x200000a0
 8021c24:	200153bc 	.word	0x200153bc
 8021c28:	0801fbbf 	.word	0x0801fbbf
 8021c2c:	200000a4 	.word	0x200000a4

08021c30 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021c30:	b538      	push	{r3, r4, r5, lr}
 8021c32:	4c15      	ldr	r4, [pc, #84]	; (8021c88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021c34:	4605      	mov	r5, r0
 8021c36:	7823      	ldrb	r3, [r4, #0]
 8021c38:	f3bf 8f5b 	dmb	ish
 8021c3c:	07da      	lsls	r2, r3, #31
 8021c3e:	d40b      	bmi.n	8021c58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c40:	4620      	mov	r0, r4
 8021c42:	f007 f951 	bl	8028ee8 <__cxa_guard_acquire>
 8021c46:	b138      	cbz	r0, 8021c58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c48:	4620      	mov	r0, r4
 8021c4a:	f007 f959 	bl	8028f00 <__cxa_guard_release>
 8021c4e:	4a0f      	ldr	r2, [pc, #60]	; (8021c8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c50:	490f      	ldr	r1, [pc, #60]	; (8021c90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021c52:	4810      	ldr	r0, [pc, #64]	; (8021c94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c54:	f007 f941 	bl	8028eda <__aeabi_atexit>
 8021c58:	4c0f      	ldr	r4, [pc, #60]	; (8021c98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021c5a:	7823      	ldrb	r3, [r4, #0]
 8021c5c:	f3bf 8f5b 	dmb	ish
 8021c60:	07db      	lsls	r3, r3, #31
 8021c62:	d40b      	bmi.n	8021c7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c64:	4620      	mov	r0, r4
 8021c66:	f007 f93f 	bl	8028ee8 <__cxa_guard_acquire>
 8021c6a:	b138      	cbz	r0, 8021c7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c6c:	4620      	mov	r0, r4
 8021c6e:	f007 f947 	bl	8028f00 <__cxa_guard_release>
 8021c72:	4a06      	ldr	r2, [pc, #24]	; (8021c8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c74:	4909      	ldr	r1, [pc, #36]	; (8021c9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021c76:	480a      	ldr	r0, [pc, #40]	; (8021ca0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021c78:	f007 f92f 	bl	8028eda <__aeabi_atexit>
 8021c7c:	4b05      	ldr	r3, [pc, #20]	; (8021c94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c7e:	62ab      	str	r3, [r5, #40]	; 0x28
 8021c80:	4b07      	ldr	r3, [pc, #28]	; (8021ca0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021c82:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021c84:	bd38      	pop	{r3, r4, r5, pc}
 8021c86:	bf00      	nop
 8021c88:	20015388 	.word	0x20015388
 8021c8c:	20000000 	.word	0x20000000
 8021c90:	0801fbc5 	.word	0x0801fbc5
 8021c94:	20000070 	.word	0x20000070
 8021c98:	2001538c 	.word	0x2001538c
 8021c9c:	0801fbc3 	.word	0x0801fbc3
 8021ca0:	20000074 	.word	0x20000074

08021ca4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021ca4:	b510      	push	{r4, lr}
 8021ca6:	4604      	mov	r4, r0
 8021ca8:	f7ff ff88 	bl	8021bbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021cac:	4620      	mov	r0, r4
 8021cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cb2:	f7ff bfbd 	b.w	8021c30 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021cb8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021cb8:	b538      	push	{r3, r4, r5, lr}
 8021cba:	4c15      	ldr	r4, [pc, #84]	; (8021d10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021cbc:	4605      	mov	r5, r0
 8021cbe:	7823      	ldrb	r3, [r4, #0]
 8021cc0:	f3bf 8f5b 	dmb	ish
 8021cc4:	07da      	lsls	r2, r3, #31
 8021cc6:	d40b      	bmi.n	8021ce0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021cc8:	4620      	mov	r0, r4
 8021cca:	f007 f90d 	bl	8028ee8 <__cxa_guard_acquire>
 8021cce:	b138      	cbz	r0, 8021ce0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021cd0:	4620      	mov	r0, r4
 8021cd2:	f007 f915 	bl	8028f00 <__cxa_guard_release>
 8021cd6:	4a0f      	ldr	r2, [pc, #60]	; (8021d14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021cd8:	490f      	ldr	r1, [pc, #60]	; (8021d18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021cda:	4810      	ldr	r0, [pc, #64]	; (8021d1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021cdc:	f007 f8fd 	bl	8028eda <__aeabi_atexit>
 8021ce0:	4c0f      	ldr	r4, [pc, #60]	; (8021d20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021ce2:	7823      	ldrb	r3, [r4, #0]
 8021ce4:	f3bf 8f5b 	dmb	ish
 8021ce8:	07db      	lsls	r3, r3, #31
 8021cea:	d40b      	bmi.n	8021d04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021cec:	4620      	mov	r0, r4
 8021cee:	f007 f8fb 	bl	8028ee8 <__cxa_guard_acquire>
 8021cf2:	b138      	cbz	r0, 8021d04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	f007 f903 	bl	8028f00 <__cxa_guard_release>
 8021cfa:	4a06      	ldr	r2, [pc, #24]	; (8021d14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021cfc:	4909      	ldr	r1, [pc, #36]	; (8021d24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021cfe:	480a      	ldr	r0, [pc, #40]	; (8021d28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021d00:	f007 f8eb 	bl	8028eda <__aeabi_atexit>
 8021d04:	4b05      	ldr	r3, [pc, #20]	; (8021d1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021d06:	652b      	str	r3, [r5, #80]	; 0x50
 8021d08:	4b07      	ldr	r3, [pc, #28]	; (8021d28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021d0a:	656b      	str	r3, [r5, #84]	; 0x54
 8021d0c:	bd38      	pop	{r3, r4, r5, pc}
 8021d0e:	bf00      	nop
 8021d10:	200153c0 	.word	0x200153c0
 8021d14:	20000000 	.word	0x20000000
 8021d18:	0801fbb1 	.word	0x0801fbb1
 8021d1c:	200000a8 	.word	0x200000a8
 8021d20:	200153c4 	.word	0x200153c4
 8021d24:	0801fbaf 	.word	0x0801fbaf
 8021d28:	200000ac 	.word	0x200000ac

08021d2c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021d2c:	b538      	push	{r3, r4, r5, lr}
 8021d2e:	4c15      	ldr	r4, [pc, #84]	; (8021d84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021d30:	4605      	mov	r5, r0
 8021d32:	7823      	ldrb	r3, [r4, #0]
 8021d34:	f3bf 8f5b 	dmb	ish
 8021d38:	07da      	lsls	r2, r3, #31
 8021d3a:	d40b      	bmi.n	8021d54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021d3c:	4620      	mov	r0, r4
 8021d3e:	f007 f8d3 	bl	8028ee8 <__cxa_guard_acquire>
 8021d42:	b138      	cbz	r0, 8021d54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021d44:	4620      	mov	r0, r4
 8021d46:	f007 f8db 	bl	8028f00 <__cxa_guard_release>
 8021d4a:	4a0f      	ldr	r2, [pc, #60]	; (8021d88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021d4c:	490f      	ldr	r1, [pc, #60]	; (8021d8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021d4e:	4810      	ldr	r0, [pc, #64]	; (8021d90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021d50:	f007 f8c3 	bl	8028eda <__aeabi_atexit>
 8021d54:	4c0f      	ldr	r4, [pc, #60]	; (8021d94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8021d56:	7823      	ldrb	r3, [r4, #0]
 8021d58:	f3bf 8f5b 	dmb	ish
 8021d5c:	07db      	lsls	r3, r3, #31
 8021d5e:	d40b      	bmi.n	8021d78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021d60:	4620      	mov	r0, r4
 8021d62:	f007 f8c1 	bl	8028ee8 <__cxa_guard_acquire>
 8021d66:	b138      	cbz	r0, 8021d78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021d68:	4620      	mov	r0, r4
 8021d6a:	f007 f8c9 	bl	8028f00 <__cxa_guard_release>
 8021d6e:	4a06      	ldr	r2, [pc, #24]	; (8021d88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021d70:	4909      	ldr	r1, [pc, #36]	; (8021d98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8021d72:	480a      	ldr	r0, [pc, #40]	; (8021d9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021d74:	f007 f8b1 	bl	8028eda <__aeabi_atexit>
 8021d78:	4b05      	ldr	r3, [pc, #20]	; (8021d90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021d7a:	64ab      	str	r3, [r5, #72]	; 0x48
 8021d7c:	4b07      	ldr	r3, [pc, #28]	; (8021d9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021d7e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021d80:	bd38      	pop	{r3, r4, r5, pc}
 8021d82:	bf00      	nop
 8021d84:	200153c8 	.word	0x200153c8
 8021d88:	20000000 	.word	0x20000000
 8021d8c:	0801fbb5 	.word	0x0801fbb5
 8021d90:	200000b0 	.word	0x200000b0
 8021d94:	200153cc 	.word	0x200153cc
 8021d98:	0801fbb3 	.word	0x0801fbb3
 8021d9c:	200000b4 	.word	0x200000b4

08021da0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021da0:	b538      	push	{r3, r4, r5, lr}
 8021da2:	4c15      	ldr	r4, [pc, #84]	; (8021df8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021da4:	4605      	mov	r5, r0
 8021da6:	7823      	ldrb	r3, [r4, #0]
 8021da8:	f3bf 8f5b 	dmb	ish
 8021dac:	07da      	lsls	r2, r3, #31
 8021dae:	d40b      	bmi.n	8021dc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021db0:	4620      	mov	r0, r4
 8021db2:	f007 f899 	bl	8028ee8 <__cxa_guard_acquire>
 8021db6:	b138      	cbz	r0, 8021dc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021db8:	4620      	mov	r0, r4
 8021dba:	f007 f8a1 	bl	8028f00 <__cxa_guard_release>
 8021dbe:	4a0f      	ldr	r2, [pc, #60]	; (8021dfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021dc0:	490f      	ldr	r1, [pc, #60]	; (8021e00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021dc2:	4810      	ldr	r0, [pc, #64]	; (8021e04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021dc4:	f007 f889 	bl	8028eda <__aeabi_atexit>
 8021dc8:	4c0f      	ldr	r4, [pc, #60]	; (8021e08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021dca:	7823      	ldrb	r3, [r4, #0]
 8021dcc:	f3bf 8f5b 	dmb	ish
 8021dd0:	07db      	lsls	r3, r3, #31
 8021dd2:	d40b      	bmi.n	8021dec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021dd4:	4620      	mov	r0, r4
 8021dd6:	f007 f887 	bl	8028ee8 <__cxa_guard_acquire>
 8021dda:	b138      	cbz	r0, 8021dec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021ddc:	4620      	mov	r0, r4
 8021dde:	f007 f88f 	bl	8028f00 <__cxa_guard_release>
 8021de2:	4a06      	ldr	r2, [pc, #24]	; (8021dfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021de4:	4909      	ldr	r1, [pc, #36]	; (8021e0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021de6:	480a      	ldr	r0, [pc, #40]	; (8021e10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021de8:	f007 f877 	bl	8028eda <__aeabi_atexit>
 8021dec:	4b05      	ldr	r3, [pc, #20]	; (8021e04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021dee:	642b      	str	r3, [r5, #64]	; 0x40
 8021df0:	4b07      	ldr	r3, [pc, #28]	; (8021e10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021df2:	646b      	str	r3, [r5, #68]	; 0x44
 8021df4:	bd38      	pop	{r3, r4, r5, pc}
 8021df6:	bf00      	nop
 8021df8:	20015390 	.word	0x20015390
 8021dfc:	20000000 	.word	0x20000000
 8021e00:	0801fbb9 	.word	0x0801fbb9
 8021e04:	20000078 	.word	0x20000078
 8021e08:	20015394 	.word	0x20015394
 8021e0c:	0801fbb7 	.word	0x0801fbb7
 8021e10:	2000007c 	.word	0x2000007c

08021e14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021e14:	b538      	push	{r3, r4, r5, lr}
 8021e16:	4c15      	ldr	r4, [pc, #84]	; (8021e6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021e18:	4605      	mov	r5, r0
 8021e1a:	7823      	ldrb	r3, [r4, #0]
 8021e1c:	f3bf 8f5b 	dmb	ish
 8021e20:	07da      	lsls	r2, r3, #31
 8021e22:	d40b      	bmi.n	8021e3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021e24:	4620      	mov	r0, r4
 8021e26:	f007 f85f 	bl	8028ee8 <__cxa_guard_acquire>
 8021e2a:	b138      	cbz	r0, 8021e3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021e2c:	4620      	mov	r0, r4
 8021e2e:	f007 f867 	bl	8028f00 <__cxa_guard_release>
 8021e32:	4a0f      	ldr	r2, [pc, #60]	; (8021e70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021e34:	490f      	ldr	r1, [pc, #60]	; (8021e74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021e36:	4810      	ldr	r0, [pc, #64]	; (8021e78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021e38:	f007 f84f 	bl	8028eda <__aeabi_atexit>
 8021e3c:	4c0f      	ldr	r4, [pc, #60]	; (8021e7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021e3e:	7823      	ldrb	r3, [r4, #0]
 8021e40:	f3bf 8f5b 	dmb	ish
 8021e44:	07db      	lsls	r3, r3, #31
 8021e46:	d40b      	bmi.n	8021e60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021e48:	4620      	mov	r0, r4
 8021e4a:	f007 f84d 	bl	8028ee8 <__cxa_guard_acquire>
 8021e4e:	b138      	cbz	r0, 8021e60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021e50:	4620      	mov	r0, r4
 8021e52:	f007 f855 	bl	8028f00 <__cxa_guard_release>
 8021e56:	4a06      	ldr	r2, [pc, #24]	; (8021e70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021e58:	4909      	ldr	r1, [pc, #36]	; (8021e80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021e5a:	480a      	ldr	r0, [pc, #40]	; (8021e84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021e5c:	f007 f83d 	bl	8028eda <__aeabi_atexit>
 8021e60:	4b05      	ldr	r3, [pc, #20]	; (8021e78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021e62:	63ab      	str	r3, [r5, #56]	; 0x38
 8021e64:	4b07      	ldr	r3, [pc, #28]	; (8021e84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021e66:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021e68:	bd38      	pop	{r3, r4, r5, pc}
 8021e6a:	bf00      	nop
 8021e6c:	200153b0 	.word	0x200153b0
 8021e70:	20000000 	.word	0x20000000
 8021e74:	0801fbbd 	.word	0x0801fbbd
 8021e78:	20000098 	.word	0x20000098
 8021e7c:	200153b4 	.word	0x200153b4
 8021e80:	0801fbbb 	.word	0x0801fbbb
 8021e84:	2000009c 	.word	0x2000009c

08021e88 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021e88:	b510      	push	{r4, lr}
 8021e8a:	4604      	mov	r4, r0
 8021e8c:	f7ff ff14 	bl	8021cb8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021e90:	4620      	mov	r0, r4
 8021e92:	f7ff ff85 	bl	8021da0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021e96:	4620      	mov	r0, r4
 8021e98:	f7ff ff48 	bl	8021d2c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021e9c:	4620      	mov	r0, r4
 8021e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ea2:	f7ff bfb7 	b.w	8021e14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021ea8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021ea8:	b538      	push	{r3, r4, r5, lr}
 8021eaa:	4c15      	ldr	r4, [pc, #84]	; (8021f00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021eac:	4605      	mov	r5, r0
 8021eae:	7823      	ldrb	r3, [r4, #0]
 8021eb0:	f3bf 8f5b 	dmb	ish
 8021eb4:	07da      	lsls	r2, r3, #31
 8021eb6:	d40b      	bmi.n	8021ed0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021eb8:	4620      	mov	r0, r4
 8021eba:	f007 f815 	bl	8028ee8 <__cxa_guard_acquire>
 8021ebe:	b138      	cbz	r0, 8021ed0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021ec0:	4620      	mov	r0, r4
 8021ec2:	f007 f81d 	bl	8028f00 <__cxa_guard_release>
 8021ec6:	4a0f      	ldr	r2, [pc, #60]	; (8021f04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021ec8:	490f      	ldr	r1, [pc, #60]	; (8021f08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021eca:	4810      	ldr	r0, [pc, #64]	; (8021f0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021ecc:	f007 f805 	bl	8028eda <__aeabi_atexit>
 8021ed0:	4c0f      	ldr	r4, [pc, #60]	; (8021f10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021ed2:	7823      	ldrb	r3, [r4, #0]
 8021ed4:	f3bf 8f5b 	dmb	ish
 8021ed8:	07db      	lsls	r3, r3, #31
 8021eda:	d40b      	bmi.n	8021ef4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021edc:	4620      	mov	r0, r4
 8021ede:	f007 f803 	bl	8028ee8 <__cxa_guard_acquire>
 8021ee2:	b138      	cbz	r0, 8021ef4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	f007 f80b 	bl	8028f00 <__cxa_guard_release>
 8021eea:	4a06      	ldr	r2, [pc, #24]	; (8021f04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021eec:	4909      	ldr	r1, [pc, #36]	; (8021f14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021eee:	480a      	ldr	r0, [pc, #40]	; (8021f18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021ef0:	f006 fff3 	bl	8028eda <__aeabi_atexit>
 8021ef4:	4b05      	ldr	r3, [pc, #20]	; (8021f0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021ef6:	662b      	str	r3, [r5, #96]	; 0x60
 8021ef8:	4b07      	ldr	r3, [pc, #28]	; (8021f18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021efa:	666b      	str	r3, [r5, #100]	; 0x64
 8021efc:	bd38      	pop	{r3, r4, r5, pc}
 8021efe:	bf00      	nop
 8021f00:	20015398 	.word	0x20015398
 8021f04:	20000000 	.word	0x20000000
 8021f08:	0801fba9 	.word	0x0801fba9
 8021f0c:	20000080 	.word	0x20000080
 8021f10:	2001539c 	.word	0x2001539c
 8021f14:	0801fba7 	.word	0x0801fba7
 8021f18:	20000084 	.word	0x20000084

08021f1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021f1c:	b538      	push	{r3, r4, r5, lr}
 8021f1e:	4c15      	ldr	r4, [pc, #84]	; (8021f74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021f20:	4605      	mov	r5, r0
 8021f22:	7823      	ldrb	r3, [r4, #0]
 8021f24:	f3bf 8f5b 	dmb	ish
 8021f28:	07da      	lsls	r2, r3, #31
 8021f2a:	d40b      	bmi.n	8021f44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021f2c:	4620      	mov	r0, r4
 8021f2e:	f006 ffdb 	bl	8028ee8 <__cxa_guard_acquire>
 8021f32:	b138      	cbz	r0, 8021f44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021f34:	4620      	mov	r0, r4
 8021f36:	f006 ffe3 	bl	8028f00 <__cxa_guard_release>
 8021f3a:	4a0f      	ldr	r2, [pc, #60]	; (8021f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021f3c:	490f      	ldr	r1, [pc, #60]	; (8021f7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021f3e:	4810      	ldr	r0, [pc, #64]	; (8021f80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021f40:	f006 ffcb 	bl	8028eda <__aeabi_atexit>
 8021f44:	4c0f      	ldr	r4, [pc, #60]	; (8021f84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021f46:	7823      	ldrb	r3, [r4, #0]
 8021f48:	f3bf 8f5b 	dmb	ish
 8021f4c:	07db      	lsls	r3, r3, #31
 8021f4e:	d40b      	bmi.n	8021f68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021f50:	4620      	mov	r0, r4
 8021f52:	f006 ffc9 	bl	8028ee8 <__cxa_guard_acquire>
 8021f56:	b138      	cbz	r0, 8021f68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021f58:	4620      	mov	r0, r4
 8021f5a:	f006 ffd1 	bl	8028f00 <__cxa_guard_release>
 8021f5e:	4a06      	ldr	r2, [pc, #24]	; (8021f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021f60:	4909      	ldr	r1, [pc, #36]	; (8021f88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021f62:	480a      	ldr	r0, [pc, #40]	; (8021f8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021f64:	f006 ffb9 	bl	8028eda <__aeabi_atexit>
 8021f68:	4b05      	ldr	r3, [pc, #20]	; (8021f80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021f6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8021f6c:	4b07      	ldr	r3, [pc, #28]	; (8021f8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021f6e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021f70:	bd38      	pop	{r3, r4, r5, pc}
 8021f72:	bf00      	nop
 8021f74:	20015370 	.word	0x20015370
 8021f78:	20000000 	.word	0x20000000
 8021f7c:	0801fbad 	.word	0x0801fbad
 8021f80:	20000058 	.word	0x20000058
 8021f84:	20015374 	.word	0x20015374
 8021f88:	0801fbab 	.word	0x0801fbab
 8021f8c:	2000005c 	.word	0x2000005c

08021f90 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8021f90:	b510      	push	{r4, lr}
 8021f92:	4604      	mov	r4, r0
 8021f94:	f7ff ff88 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021f98:	4620      	mov	r0, r4
 8021f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f9e:	f7ff bfbd 	b.w	8021f1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021fa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021fa4:	b538      	push	{r3, r4, r5, lr}
 8021fa6:	4c15      	ldr	r4, [pc, #84]	; (8021ffc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021fa8:	4605      	mov	r5, r0
 8021faa:	7823      	ldrb	r3, [r4, #0]
 8021fac:	f3bf 8f5b 	dmb	ish
 8021fb0:	07da      	lsls	r2, r3, #31
 8021fb2:	d40b      	bmi.n	8021fcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021fb4:	4620      	mov	r0, r4
 8021fb6:	f006 ff97 	bl	8028ee8 <__cxa_guard_acquire>
 8021fba:	b138      	cbz	r0, 8021fcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021fbc:	4620      	mov	r0, r4
 8021fbe:	f006 ff9f 	bl	8028f00 <__cxa_guard_release>
 8021fc2:	4a0f      	ldr	r2, [pc, #60]	; (8022000 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021fc4:	490f      	ldr	r1, [pc, #60]	; (8022004 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021fc6:	4810      	ldr	r0, [pc, #64]	; (8022008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021fc8:	f006 ff87 	bl	8028eda <__aeabi_atexit>
 8021fcc:	4c0f      	ldr	r4, [pc, #60]	; (802200c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021fce:	7823      	ldrb	r3, [r4, #0]
 8021fd0:	f3bf 8f5b 	dmb	ish
 8021fd4:	07db      	lsls	r3, r3, #31
 8021fd6:	d40b      	bmi.n	8021ff0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021fd8:	4620      	mov	r0, r4
 8021fda:	f006 ff85 	bl	8028ee8 <__cxa_guard_acquire>
 8021fde:	b138      	cbz	r0, 8021ff0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021fe0:	4620      	mov	r0, r4
 8021fe2:	f006 ff8d 	bl	8028f00 <__cxa_guard_release>
 8021fe6:	4a06      	ldr	r2, [pc, #24]	; (8022000 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021fe8:	4909      	ldr	r1, [pc, #36]	; (8022010 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021fea:	480a      	ldr	r0, [pc, #40]	; (8022014 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021fec:	f006 ff75 	bl	8028eda <__aeabi_atexit>
 8021ff0:	4b05      	ldr	r3, [pc, #20]	; (8022008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021ff2:	672b      	str	r3, [r5, #112]	; 0x70
 8021ff4:	4b07      	ldr	r3, [pc, #28]	; (8022014 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021ff6:	676b      	str	r3, [r5, #116]	; 0x74
 8021ff8:	bd38      	pop	{r3, r4, r5, pc}
 8021ffa:	bf00      	nop
 8021ffc:	20015368 	.word	0x20015368
 8022000:	20000000 	.word	0x20000000
 8022004:	0801fba1 	.word	0x0801fba1
 8022008:	20000050 	.word	0x20000050
 802200c:	2001536c 	.word	0x2001536c
 8022010:	0801fb9f 	.word	0x0801fb9f
 8022014:	20000054 	.word	0x20000054

08022018 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022018:	b538      	push	{r3, r4, r5, lr}
 802201a:	4c15      	ldr	r4, [pc, #84]	; (8022070 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802201c:	4605      	mov	r5, r0
 802201e:	7823      	ldrb	r3, [r4, #0]
 8022020:	f3bf 8f5b 	dmb	ish
 8022024:	07da      	lsls	r2, r3, #31
 8022026:	d40b      	bmi.n	8022040 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022028:	4620      	mov	r0, r4
 802202a:	f006 ff5d 	bl	8028ee8 <__cxa_guard_acquire>
 802202e:	b138      	cbz	r0, 8022040 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022030:	4620      	mov	r0, r4
 8022032:	f006 ff65 	bl	8028f00 <__cxa_guard_release>
 8022036:	4a0f      	ldr	r2, [pc, #60]	; (8022074 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022038:	490f      	ldr	r1, [pc, #60]	; (8022078 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802203a:	4810      	ldr	r0, [pc, #64]	; (802207c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802203c:	f006 ff4d 	bl	8028eda <__aeabi_atexit>
 8022040:	4c0f      	ldr	r4, [pc, #60]	; (8022080 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022042:	7823      	ldrb	r3, [r4, #0]
 8022044:	f3bf 8f5b 	dmb	ish
 8022048:	07db      	lsls	r3, r3, #31
 802204a:	d40b      	bmi.n	8022064 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802204c:	4620      	mov	r0, r4
 802204e:	f006 ff4b 	bl	8028ee8 <__cxa_guard_acquire>
 8022052:	b138      	cbz	r0, 8022064 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022054:	4620      	mov	r0, r4
 8022056:	f006 ff53 	bl	8028f00 <__cxa_guard_release>
 802205a:	4a06      	ldr	r2, [pc, #24]	; (8022074 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802205c:	4909      	ldr	r1, [pc, #36]	; (8022084 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802205e:	480a      	ldr	r0, [pc, #40]	; (8022088 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022060:	f006 ff3b 	bl	8028eda <__aeabi_atexit>
 8022064:	4b05      	ldr	r3, [pc, #20]	; (802207c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022066:	66ab      	str	r3, [r5, #104]	; 0x68
 8022068:	4b07      	ldr	r3, [pc, #28]	; (8022088 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802206a:	66eb      	str	r3, [r5, #108]	; 0x6c
 802206c:	bd38      	pop	{r3, r4, r5, pc}
 802206e:	bf00      	nop
 8022070:	20015360 	.word	0x20015360
 8022074:	20000000 	.word	0x20000000
 8022078:	0801fba5 	.word	0x0801fba5
 802207c:	20000048 	.word	0x20000048
 8022080:	20015364 	.word	0x20015364
 8022084:	0801fba3 	.word	0x0801fba3
 8022088:	2000004c 	.word	0x2000004c

0802208c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802208c:	b510      	push	{r4, lr}
 802208e:	4604      	mov	r4, r0
 8022090:	f7ff ff88 	bl	8021fa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022094:	4620      	mov	r0, r4
 8022096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802209a:	f7ff bfbd 	b.w	8022018 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802209e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802209e:	b510      	push	{r4, lr}
 80220a0:	4604      	mov	r4, r0
 80220a2:	f7ff fff3 	bl	802208c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80220a6:	4620      	mov	r0, r4
 80220a8:	f7ff ff72 	bl	8021f90 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80220ac:	4620      	mov	r0, r4
 80220ae:	f7ff fdf9 	bl	8021ca4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80220b2:	4620      	mov	r0, r4
 80220b4:	f7ff fcfa 	bl	8021aac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80220b8:	4620      	mov	r0, r4
 80220ba:	f7ff fd75 	bl	8021ba8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80220be:	4620      	mov	r0, r4
 80220c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220c4:	f7ff bee0 	b.w	8021e88 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080220c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80220c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220cc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 80220d0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 80220d4:	2d00      	cmp	r5, #0
 80220d6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 80220da:	fb05 4c0e 	mla	ip, r5, lr, r4
 80220de:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80220e2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80220e6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80220ea:	eb02 0a0c 	add.w	sl, r2, ip
 80220ee:	8808      	ldrh	r0, [r1, #0]
 80220f0:	f2c0 80b0 	blt.w	8022254 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80220f4:	45ab      	cmp	fp, r5
 80220f6:	f340 80ad 	ble.w	8022254 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80220fa:	2c00      	cmp	r4, #0
 80220fc:	f2c0 80a8 	blt.w	8022250 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022100:	45a6      	cmp	lr, r4
 8022102:	f340 80a5 	ble.w	8022250 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022106:	f812 200c 	ldrb.w	r2, [r2, ip]
 802210a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 802210e:	1c62      	adds	r2, r4, #1
 8022110:	f100 80a3 	bmi.w	802225a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022114:	4596      	cmp	lr, r2
 8022116:	f340 80a0 	ble.w	802225a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 802211a:	f1b9 0f00 	cmp.w	r9, #0
 802211e:	f000 809c 	beq.w	802225a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022122:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022126:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802212a:	3501      	adds	r5, #1
 802212c:	f100 8099 	bmi.w	8022262 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022130:	45ab      	cmp	fp, r5
 8022132:	f340 8096 	ble.w	8022262 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022136:	2f00      	cmp	r7, #0
 8022138:	f000 8093 	beq.w	8022262 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802213c:	2c00      	cmp	r4, #0
 802213e:	f2c0 808e 	blt.w	802225e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022142:	45a6      	cmp	lr, r4
 8022144:	f340 808b 	ble.w	802225e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022148:	f81a 200e 	ldrb.w	r2, [sl, lr]
 802214c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022150:	3401      	adds	r4, #1
 8022152:	f100 8089 	bmi.w	8022268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022156:	45a6      	cmp	lr, r4
 8022158:	f340 8086 	ble.w	8022268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 802215c:	f1b9 0f00 	cmp.w	r9, #0
 8022160:	f000 8082 	beq.w	8022268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022164:	44d6      	add	lr, sl
 8022166:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802216a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802216e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022172:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022176:	fb19 fe07 	smulbb	lr, r9, r7
 802217a:	f1c7 0210 	rsb	r2, r7, #16
 802217e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022182:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022186:	eba2 0209 	sub.w	r2, r2, r9
 802218a:	ea44 0808 	orr.w	r8, r4, r8
 802218e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022192:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022196:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802219a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802219e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80221a2:	ea44 0c0c 	orr.w	ip, r4, ip
 80221a6:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80221aa:	fb04 f40c 	mul.w	r4, r4, ip
 80221ae:	fb02 4808 	mla	r8, r2, r8, r4
 80221b2:	041a      	lsls	r2, r3, #16
 80221b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80221b8:	b2b4      	uxth	r4, r6
 80221ba:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80221be:	43f6      	mvns	r6, r6
 80221c0:	4313      	orrs	r3, r2
 80221c2:	042a      	lsls	r2, r5, #16
 80221c4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80221c8:	b2f6      	uxtb	r6, r6
 80221ca:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80221ce:	fb0e 8303 	mla	r3, lr, r3, r8
 80221d2:	432a      	orrs	r2, r5
 80221d4:	fb07 3202 	mla	r2, r7, r2, r3
 80221d8:	10c7      	asrs	r7, r0, #3
 80221da:	0d53      	lsrs	r3, r2, #21
 80221dc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80221e0:	0952      	lsrs	r2, r2, #5
 80221e2:	fb17 f706 	smulbb	r7, r7, r6
 80221e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80221ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80221ee:	431a      	orrs	r2, r3
 80221f0:	b293      	uxth	r3, r2
 80221f2:	1202      	asrs	r2, r0, #8
 80221f4:	121d      	asrs	r5, r3, #8
 80221f6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80221fa:	00c0      	lsls	r0, r0, #3
 80221fc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022200:	fb12 f206 	smulbb	r2, r2, r6
 8022204:	b2c0      	uxtb	r0, r0
 8022206:	fb05 2504 	mla	r5, r5, r4, r2
 802220a:	10da      	asrs	r2, r3, #3
 802220c:	fb10 f006 	smulbb	r0, r0, r6
 8022210:	00db      	lsls	r3, r3, #3
 8022212:	b2ad      	uxth	r5, r5
 8022214:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022218:	b2db      	uxtb	r3, r3
 802221a:	fb02 7204 	mla	r2, r2, r4, r7
 802221e:	fb03 0004 	mla	r0, r3, r4, r0
 8022222:	1c6b      	adds	r3, r5, #1
 8022224:	b292      	uxth	r2, r2
 8022226:	b280      	uxth	r0, r0
 8022228:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802222c:	1c43      	adds	r3, r0, #1
 802222e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022232:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022236:	1c50      	adds	r0, r2, #1
 8022238:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802223c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022240:	0952      	lsrs	r2, r2, #5
 8022242:	432b      	orrs	r3, r5
 8022244:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022248:	4313      	orrs	r3, r2
 802224a:	800b      	strh	r3, [r1, #0]
 802224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022250:	4680      	mov	r8, r0
 8022252:	e75c      	b.n	802210e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022254:	4684      	mov	ip, r0
 8022256:	4680      	mov	r8, r0
 8022258:	e767      	b.n	802212a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802225a:	4684      	mov	ip, r0
 802225c:	e765      	b.n	802212a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802225e:	4605      	mov	r5, r0
 8022260:	e776      	b.n	8022150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022262:	4603      	mov	r3, r0
 8022264:	4605      	mov	r5, r0
 8022266:	e782      	b.n	802216e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022268:	4603      	mov	r3, r0
 802226a:	e780      	b.n	802216e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0802226c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022270:	b099      	sub	sp, #100	; 0x64
 8022272:	9215      	str	r2, [sp, #84]	; 0x54
 8022274:	9309      	str	r3, [sp, #36]	; 0x24
 8022276:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022278:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 802227c:	9016      	str	r0, [sp, #88]	; 0x58
 802227e:	930d      	str	r3, [sp, #52]	; 0x34
 8022280:	6850      	ldr	r0, [r2, #4]
 8022282:	910c      	str	r1, [sp, #48]	; 0x30
 8022284:	6812      	ldr	r2, [r2, #0]
 8022286:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802228a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802228e:	fb00 1303 	mla	r3, r0, r3, r1
 8022292:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022296:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	930b      	str	r3, [sp, #44]	; 0x2c
 802229c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802229e:	685e      	ldr	r6, [r3, #4]
 80222a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222a2:	3604      	adds	r6, #4
 80222a4:	43db      	mvns	r3, r3
 80222a6:	b2db      	uxtb	r3, r3
 80222a8:	930a      	str	r3, [sp, #40]	; 0x28
 80222aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	dc03      	bgt.n	80222b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80222b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80222b2:	2b00      	cmp	r3, #0
 80222b4:	f340 8225 	ble.w	8022702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80222b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222c2:	1e48      	subs	r0, r1, #1
 80222c4:	1e57      	subs	r7, r2, #1
 80222c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222c8:	2b00      	cmp	r3, #0
 80222ca:	f340 80e3 	ble.w	8022494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80222ce:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80222d2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80222d6:	d406      	bmi.n	80222e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80222d8:	4584      	cmp	ip, r0
 80222da:	da04      	bge.n	80222e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80222dc:	2b00      	cmp	r3, #0
 80222de:	db02      	blt.n	80222e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80222e0:	42bb      	cmp	r3, r7
 80222e2:	f2c0 80d8 	blt.w	8022496 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80222e6:	f11c 0c01 	adds.w	ip, ip, #1
 80222ea:	f100 80c9 	bmi.w	8022480 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80222ee:	4561      	cmp	r1, ip
 80222f0:	f2c0 80c6 	blt.w	8022480 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80222f4:	3301      	adds	r3, #1
 80222f6:	f100 80c3 	bmi.w	8022480 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80222fa:	429a      	cmp	r2, r3
 80222fc:	f2c0 80c0 	blt.w	8022480 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022300:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022304:	4647      	mov	r7, r8
 8022306:	f1bb 0f00 	cmp.w	fp, #0
 802230a:	f340 80e3 	ble.w	80224d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802230e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022310:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022314:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022316:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802231a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802231e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022322:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022326:	689b      	ldr	r3, [r3, #8]
 8022328:	f100 8121 	bmi.w	802256e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802232c:	f103 39ff 	add.w	r9, r3, #4294967295
 8022330:	454a      	cmp	r2, r9
 8022332:	f280 811c 	bge.w	802256e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022336:	f1bc 0f00 	cmp.w	ip, #0
 802233a:	f2c0 8118 	blt.w	802256e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802233e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022342:	45cc      	cmp	ip, r9
 8022344:	f280 8113 	bge.w	802256e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022348:	b21b      	sxth	r3, r3
 802234a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802234c:	fb0c 2203 	mla	r2, ip, r3, r2
 8022350:	eb04 0902 	add.w	r9, r4, r2
 8022354:	5ca2      	ldrb	r2, [r4, r2]
 8022356:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802235a:	2800      	cmp	r0, #0
 802235c:	f000 80fe 	beq.w	802255c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022360:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022364:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022368:	9211      	str	r2, [sp, #68]	; 0x44
 802236a:	b151      	cbz	r1, 8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802236c:	eb09 0203 	add.w	r2, r9, r3
 8022370:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022374:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022378:	930f      	str	r3, [sp, #60]	; 0x3c
 802237a:	7853      	ldrb	r3, [r2, #1]
 802237c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022380:	9312      	str	r3, [sp, #72]	; 0x48
 8022382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022384:	fb10 f201 	smulbb	r2, r0, r1
 8022388:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802238a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802238e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022392:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022396:	10d2      	asrs	r2, r2, #3
 8022398:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802239c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80223a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80223a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80223a6:	041b      	lsls	r3, r3, #16
 80223a8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80223ac:	4323      	orrs	r3, r4
 80223ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80223b0:	4353      	muls	r3, r2
 80223b2:	fb09 330c 	mla	r3, r9, ip, r3
 80223b6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80223ba:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80223be:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80223c2:	ea4c 0e0e 	orr.w	lr, ip, lr
 80223c6:	f1c1 0c10 	rsb	ip, r1, #16
 80223ca:	ebac 0c00 	sub.w	ip, ip, r0
 80223ce:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80223d2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80223d6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80223da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80223dc:	0418      	lsls	r0, r3, #16
 80223de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80223e2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80223e6:	4318      	orrs	r0, r3
 80223e8:	fb02 c200 	mla	r2, r2, r0, ip
 80223ec:	8838      	ldrh	r0, [r7, #0]
 80223ee:	0d53      	lsrs	r3, r2, #21
 80223f0:	0952      	lsrs	r2, r2, #5
 80223f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80223f6:	1201      	asrs	r1, r0, #8
 80223f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223fc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022400:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022404:	00c0      	lsls	r0, r0, #3
 8022406:	431a      	orrs	r2, r3
 8022408:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802240c:	fb11 f104 	smulbb	r1, r1, r4
 8022410:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022414:	b292      	uxth	r2, r2
 8022416:	fb1e fe04 	smulbb	lr, lr, r4
 802241a:	b2c0      	uxtb	r0, r0
 802241c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022420:	fb10 f004 	smulbb	r0, r0, r4
 8022424:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022428:	fb0c 1c03 	mla	ip, ip, r3, r1
 802242c:	10d1      	asrs	r1, r2, #3
 802242e:	00d2      	lsls	r2, r2, #3
 8022430:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022434:	fa1f fc8c 	uxth.w	ip, ip
 8022438:	b2d2      	uxtb	r2, r2
 802243a:	fb01 e103 	mla	r1, r1, r3, lr
 802243e:	fb02 0303 	mla	r3, r2, r3, r0
 8022442:	b289      	uxth	r1, r1
 8022444:	b29a      	uxth	r2, r3
 8022446:	f10c 0301 	add.w	r3, ip, #1
 802244a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802244e:	1c53      	adds	r3, r2, #1
 8022450:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022454:	1c4a      	adds	r2, r1, #1
 8022456:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802245a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802245e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022462:	0949      	lsrs	r1, r1, #5
 8022464:	ea43 030c 	orr.w	r3, r3, ip
 8022468:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802246c:	430b      	orrs	r3, r1
 802246e:	803b      	strh	r3, [r7, #0]
 8022470:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022472:	3702      	adds	r7, #2
 8022474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022478:	449a      	add	sl, r3
 802247a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802247c:	441d      	add	r5, r3
 802247e:	e742      	b.n	8022306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022480:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022482:	f108 0802 	add.w	r8, r8, #2
 8022486:	449a      	add	sl, r3
 8022488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802248a:	441d      	add	r5, r3
 802248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802248e:	3b01      	subs	r3, #1
 8022490:	9309      	str	r3, [sp, #36]	; 0x24
 8022492:	e718      	b.n	80222c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022494:	d023      	beq.n	80224de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022498:	9825      	ldr	r0, [sp, #148]	; 0x94
 802249a:	3b01      	subs	r3, #1
 802249c:	fb00 a003 	mla	r0, r0, r3, sl
 80224a0:	1400      	asrs	r0, r0, #16
 80224a2:	f53f af2d 	bmi.w	8022300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80224a6:	3901      	subs	r1, #1
 80224a8:	4288      	cmp	r0, r1
 80224aa:	f6bf af29 	bge.w	8022300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80224ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 80224b0:	fb01 5303 	mla	r3, r1, r3, r5
 80224b4:	141b      	asrs	r3, r3, #16
 80224b6:	f53f af23 	bmi.w	8022300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80224ba:	3a01      	subs	r2, #1
 80224bc:	4293      	cmp	r3, r2
 80224be:	f6bf af1f 	bge.w	8022300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80224c2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80224c6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80224ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80224ce:	f1be 0f00 	cmp.w	lr, #0
 80224d2:	dc6c      	bgt.n	80225ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80224d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80224da:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80224de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	f340 810e 	ble.w	8022702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80224e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80224ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80224f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80224f4:	eef0 6a62 	vmov.f32	s13, s5
 80224f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80224fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022500:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022504:	ee16 aa90 	vmov	sl, s13
 8022508:	eef0 6a43 	vmov.f32	s13, s6
 802250c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022510:	ee16 5a90 	vmov	r5, s13
 8022514:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022518:	ee61 7a27 	vmul.f32	s15, s2, s15
 802251c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022520:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022524:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022528:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802252c:	ee12 2a90 	vmov	r2, s5
 8022530:	eef0 2a47 	vmov.f32	s5, s14
 8022534:	fb92 f3f3 	sdiv	r3, r2, r3
 8022538:	ee13 2a10 	vmov	r2, s6
 802253c:	9325      	str	r3, [sp, #148]	; 0x94
 802253e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022540:	eeb0 3a67 	vmov.f32	s6, s15
 8022544:	fb92 f3f3 	sdiv	r3, r2, r3
 8022548:	9326      	str	r3, [sp, #152]	; 0x98
 802254a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802254c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802254e:	3b01      	subs	r3, #1
 8022550:	930c      	str	r3, [sp, #48]	; 0x30
 8022552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022554:	bf08      	it	eq
 8022556:	4613      	moveq	r3, r2
 8022558:	9309      	str	r3, [sp, #36]	; 0x24
 802255a:	e6a6      	b.n	80222aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802255c:	2900      	cmp	r1, #0
 802255e:	f43f af10 	beq.w	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022562:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022566:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802256a:	930f      	str	r3, [sp, #60]	; 0x3c
 802256c:	e709      	b.n	8022382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802256e:	f112 0901 	adds.w	r9, r2, #1
 8022572:	f53f af7d 	bmi.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022576:	454b      	cmp	r3, r9
 8022578:	f6ff af7a 	blt.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802257c:	f11c 0901 	adds.w	r9, ip, #1
 8022580:	f53f af76 	bmi.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022584:	45ce      	cmp	lr, r9
 8022586:	f6ff af73 	blt.w	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802258a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802258c:	b21b      	sxth	r3, r3
 802258e:	9202      	str	r2, [sp, #8]
 8022590:	fa0f f28e 	sxth.w	r2, lr
 8022594:	9300      	str	r3, [sp, #0]
 8022596:	4633      	mov	r3, r6
 8022598:	9201      	str	r2, [sp, #4]
 802259a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802259c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80225a0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80225a4:	4639      	mov	r1, r7
 80225a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80225a8:	f7ff fd8e 	bl	80220c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80225ac:	e760      	b.n	8022470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80225ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80225b0:	ea4f 422a 	mov.w	r2, sl, asr #16
 80225b4:	1429      	asrs	r1, r5, #16
 80225b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80225b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80225bc:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80225c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80225c4:	fb03 2101 	mla	r1, r3, r1, r2
 80225c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225ca:	440a      	add	r2, r1
 80225cc:	5c61      	ldrb	r1, [r4, r1]
 80225ce:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80225d2:	f1bc 0f00 	cmp.w	ip, #0
 80225d6:	f000 808c 	beq.w	80226f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80225da:	7857      	ldrb	r7, [r2, #1]
 80225dc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80225e0:	9413      	str	r4, [sp, #76]	; 0x4c
 80225e2:	b140      	cbz	r0, 80225f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80225e4:	18d7      	adds	r7, r2, r3
 80225e6:	5cd3      	ldrb	r3, [r2, r3]
 80225e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80225ec:	9310      	str	r3, [sp, #64]	; 0x40
 80225ee:	787b      	ldrb	r3, [r7, #1]
 80225f0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80225f4:	9314      	str	r3, [sp, #80]	; 0x50
 80225f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80225f8:	fb1c f200 	smulbb	r2, ip, r0
 80225fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80225fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022602:	041f      	lsls	r7, r3, #16
 8022604:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022608:	10d2      	asrs	r2, r2, #3
 802260a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802260e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8022612:	431f      	orrs	r7, r3
 8022614:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022618:	9317      	str	r3, [sp, #92]	; 0x5c
 802261a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802261c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802261e:	041b      	lsls	r3, r3, #16
 8022620:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022624:	ea43 030b 	orr.w	r3, r3, fp
 8022628:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802262c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022630:	4353      	muls	r3, r2
 8022632:	fb04 3707 	mla	r7, r4, r7, r3
 8022636:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802263a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802263c:	ea43 0b01 	orr.w	fp, r3, r1
 8022640:	f1c0 0110 	rsb	r1, r0, #16
 8022644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022646:	eba1 0c0c 	sub.w	ip, r1, ip
 802264a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802264e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022652:	fb0c 770b 	mla	r7, ip, fp, r7
 8022656:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802265a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802265e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022662:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022666:	fb02 770c 	mla	r7, r2, ip, r7
 802266a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802266c:	0d79      	lsrs	r1, r7, #21
 802266e:	8812      	ldrh	r2, [r2, #0]
 8022670:	097f      	lsrs	r7, r7, #5
 8022672:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022676:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802267a:	430f      	orrs	r7, r1
 802267c:	1211      	asrs	r1, r2, #8
 802267e:	b2bb      	uxth	r3, r7
 8022680:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022684:	10d7      	asrs	r7, r2, #3
 8022686:	fb11 f104 	smulbb	r1, r1, r4
 802268a:	1218      	asrs	r0, r3, #8
 802268c:	00d2      	lsls	r2, r2, #3
 802268e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022692:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022696:	fb17 f704 	smulbb	r7, r7, r4
 802269a:	b2d2      	uxtb	r2, r2
 802269c:	fb00 1009 	mla	r0, r0, r9, r1
 80226a0:	10d9      	asrs	r1, r3, #3
 80226a2:	fb12 f204 	smulbb	r2, r2, r4
 80226a6:	00db      	lsls	r3, r3, #3
 80226a8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80226ac:	b280      	uxth	r0, r0
 80226ae:	b2db      	uxtb	r3, r3
 80226b0:	fb01 7109 	mla	r1, r1, r9, r7
 80226b4:	fb03 2309 	mla	r3, r3, r9, r2
 80226b8:	1c42      	adds	r2, r0, #1
 80226ba:	b289      	uxth	r1, r1
 80226bc:	b29b      	uxth	r3, r3
 80226be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80226c2:	1c4f      	adds	r7, r1, #1
 80226c4:	1c5a      	adds	r2, r3, #1
 80226c6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80226ca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80226ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80226d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226d4:	0949      	lsrs	r1, r1, #5
 80226d6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80226da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80226de:	4310      	orrs	r0, r2
 80226e0:	4308      	orrs	r0, r1
 80226e2:	f823 0b02 	strh.w	r0, [r3], #2
 80226e6:	930e      	str	r3, [sp, #56]	; 0x38
 80226e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80226ea:	449a      	add	sl, r3
 80226ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80226ee:	441d      	add	r5, r3
 80226f0:	e6ed      	b.n	80224ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80226f2:	2800      	cmp	r0, #0
 80226f4:	f43f af7f 	beq.w	80225f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80226f8:	5cd3      	ldrb	r3, [r2, r3]
 80226fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80226fe:	9310      	str	r3, [sp, #64]	; 0x40
 8022700:	e779      	b.n	80225f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022702:	b019      	add	sp, #100	; 0x64
 8022704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022708 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802270c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8022710:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022714:	f1b8 0f00 	cmp.w	r8, #0
 8022718:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802271c:	fb08 470e 	mla	r7, r8, lr, r4
 8022720:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022724:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022728:	eb02 0907 	add.w	r9, r2, r7
 802272c:	8808      	ldrh	r0, [r1, #0]
 802272e:	db67      	blt.n	8022800 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022730:	45c2      	cmp	sl, r8
 8022732:	dd65      	ble.n	8022800 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022734:	2c00      	cmp	r4, #0
 8022736:	db61      	blt.n	80227fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022738:	45a6      	cmp	lr, r4
 802273a:	dd5f      	ble.n	80227fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802273c:	5dd2      	ldrb	r2, [r2, r7]
 802273e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022742:	1c62      	adds	r2, r4, #1
 8022744:	d45f      	bmi.n	8022806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022746:	4596      	cmp	lr, r2
 8022748:	dd5d      	ble.n	8022806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802274a:	2d00      	cmp	r5, #0
 802274c:	d05b      	beq.n	8022806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802274e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022752:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022756:	f118 0801 	adds.w	r8, r8, #1
 802275a:	d458      	bmi.n	802280e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802275c:	45c2      	cmp	sl, r8
 802275e:	dd56      	ble.n	802280e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022760:	2e00      	cmp	r6, #0
 8022762:	d054      	beq.n	802280e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022764:	2c00      	cmp	r4, #0
 8022766:	db50      	blt.n	802280a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022768:	45a6      	cmp	lr, r4
 802276a:	dd4e      	ble.n	802280a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802276c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8022770:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022774:	3401      	adds	r4, #1
 8022776:	d407      	bmi.n	8022788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022778:	45a6      	cmp	lr, r4
 802277a:	dd05      	ble.n	8022788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802277c:	b125      	cbz	r5, 8022788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802277e:	44ce      	add	lr, r9
 8022780:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022784:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022788:	fb15 f406 	smulbb	r4, r5, r6
 802278c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022790:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022794:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022798:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802279c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80227a0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80227a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80227a8:	ea43 0c0c 	orr.w	ip, r3, ip
 80227ac:	f1c6 0310 	rsb	r3, r6, #16
 80227b0:	ea4e 0707 	orr.w	r7, lr, r7
 80227b4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80227b8:	1b5b      	subs	r3, r3, r5
 80227ba:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80227be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80227c2:	437d      	muls	r5, r7
 80227c4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80227c8:	0403      	lsls	r3, r0, #16
 80227ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227d2:	4318      	orrs	r0, r3
 80227d4:	0413      	lsls	r3, r2, #16
 80227d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227de:	fb04 c000 	mla	r0, r4, r0, ip
 80227e2:	4313      	orrs	r3, r2
 80227e4:	fb06 0003 	mla	r0, r6, r3, r0
 80227e8:	0d43      	lsrs	r3, r0, #21
 80227ea:	0940      	lsrs	r0, r0, #5
 80227ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227f4:	4318      	orrs	r0, r3
 80227f6:	8008      	strh	r0, [r1, #0]
 80227f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227fc:	4684      	mov	ip, r0
 80227fe:	e7a0      	b.n	8022742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8022800:	4607      	mov	r7, r0
 8022802:	4684      	mov	ip, r0
 8022804:	e7a7      	b.n	8022756 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022806:	4607      	mov	r7, r0
 8022808:	e7a5      	b.n	8022756 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802280a:	4602      	mov	r2, r0
 802280c:	e7b2      	b.n	8022774 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802280e:	4602      	mov	r2, r0
 8022810:	e7ba      	b.n	8022788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08022812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022812:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022816:	b093      	sub	sp, #76	; 0x4c
 8022818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802281c:	920f      	str	r2, [sp, #60]	; 0x3c
 802281e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022820:	9010      	str	r0, [sp, #64]	; 0x40
 8022822:	9108      	str	r1, [sp, #32]
 8022824:	6850      	ldr	r0, [r2, #4]
 8022826:	9306      	str	r3, [sp, #24]
 8022828:	6812      	ldr	r2, [r2, #0]
 802282a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802282e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022832:	fb00 1303 	mla	r3, r0, r3, r1
 8022836:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802283a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	9307      	str	r3, [sp, #28]
 8022840:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022842:	685f      	ldr	r7, [r3, #4]
 8022844:	3704      	adds	r7, #4
 8022846:	9b08      	ldr	r3, [sp, #32]
 8022848:	2b00      	cmp	r3, #0
 802284a:	dc03      	bgt.n	8022854 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802284c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802284e:	2b00      	cmp	r3, #0
 8022850:	f340 81b2 	ble.w	8022bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022854:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022856:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802285a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802285e:	1e48      	subs	r0, r1, #1
 8022860:	f102 3cff 	add.w	ip, r2, #4294967295
 8022864:	9b06      	ldr	r3, [sp, #24]
 8022866:	2b00      	cmp	r3, #0
 8022868:	f340 80a9 	ble.w	80229be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802286c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022870:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022874:	d406      	bmi.n	8022884 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022876:	4586      	cmp	lr, r0
 8022878:	da04      	bge.n	8022884 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802287a:	2b00      	cmp	r3, #0
 802287c:	db02      	blt.n	8022884 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802287e:	4563      	cmp	r3, ip
 8022880:	f2c0 809e 	blt.w	80229c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022884:	f11e 0e01 	adds.w	lr, lr, #1
 8022888:	f100 808f 	bmi.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802288c:	4571      	cmp	r1, lr
 802288e:	f2c0 808c 	blt.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022892:	3301      	adds	r3, #1
 8022894:	f100 8089 	bmi.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022898:	429a      	cmp	r2, r3
 802289a:	f2c0 8086 	blt.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802289e:	f8dd b018 	ldr.w	fp, [sp, #24]
 80228a2:	46c8      	mov	r8, r9
 80228a4:	f1bb 0f00 	cmp.w	fp, #0
 80228a8:	f340 80a6 	ble.w	80229f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80228ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80228ae:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80228b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228b4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80228b8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80228bc:	1422      	asrs	r2, r4, #16
 80228be:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80228c2:	689b      	ldr	r3, [r3, #8]
 80228c4:	f100 80e3 	bmi.w	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80228c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80228cc:	4552      	cmp	r2, sl
 80228ce:	f280 80de 	bge.w	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80228d2:	f1bc 0f00 	cmp.w	ip, #0
 80228d6:	f2c0 80da 	blt.w	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80228da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80228de:	45d4      	cmp	ip, sl
 80228e0:	f280 80d5 	bge.w	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80228e4:	b21b      	sxth	r3, r3
 80228e6:	9d07      	ldr	r5, [sp, #28]
 80228e8:	fb0c 2203 	mla	r2, ip, r3, r2
 80228ec:	eb05 0a02 	add.w	sl, r5, r2
 80228f0:	5caa      	ldrb	r2, [r5, r2]
 80228f2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80228f6:	2800      	cmp	r0, #0
 80228f8:	f000 80c0 	beq.w	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80228fc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022900:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022904:	920b      	str	r2, [sp, #44]	; 0x2c
 8022906:	b151      	cbz	r1, 802291e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022908:	eb0a 0203 	add.w	r2, sl, r3
 802290c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022910:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022914:	9309      	str	r3, [sp, #36]	; 0x24
 8022916:	7853      	ldrb	r3, [r2, #1]
 8022918:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802291c:	930c      	str	r3, [sp, #48]	; 0x30
 802291e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022920:	fb10 f201 	smulbb	r2, r0, r1
 8022924:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022926:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802292a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802292e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022932:	10d2      	asrs	r2, r2, #3
 8022934:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022938:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802293c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022942:	041b      	lsls	r3, r3, #16
 8022944:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022948:	432b      	orrs	r3, r5
 802294a:	4353      	muls	r3, r2
 802294c:	fb0a 330c 	mla	r3, sl, ip, r3
 8022950:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022954:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022958:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802295c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022960:	f1c1 0c10 	rsb	ip, r1, #16
 8022964:	ebac 0c00 	sub.w	ip, ip, r0
 8022968:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802296c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022970:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022976:	0418      	lsls	r0, r3, #16
 8022978:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802297c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022980:	4318      	orrs	r0, r3
 8022982:	fb02 c200 	mla	r2, r2, r0, ip
 8022986:	0d53      	lsrs	r3, r2, #21
 8022988:	0952      	lsrs	r2, r2, #5
 802298a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802298e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022992:	431a      	orrs	r2, r3
 8022994:	f8a8 2000 	strh.w	r2, [r8]
 8022998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802299a:	f108 0802 	add.w	r8, r8, #2
 802299e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80229a2:	441c      	add	r4, r3
 80229a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229a6:	441e      	add	r6, r3
 80229a8:	e77c      	b.n	80228a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80229aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229ac:	f109 0902 	add.w	r9, r9, #2
 80229b0:	441c      	add	r4, r3
 80229b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229b4:	441e      	add	r6, r3
 80229b6:	9b06      	ldr	r3, [sp, #24]
 80229b8:	3b01      	subs	r3, #1
 80229ba:	9306      	str	r3, [sp, #24]
 80229bc:	e752      	b.n	8022864 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80229be:	d020      	beq.n	8022a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80229c0:	9b06      	ldr	r3, [sp, #24]
 80229c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80229c4:	3b01      	subs	r3, #1
 80229c6:	fb00 4003 	mla	r0, r0, r3, r4
 80229ca:	1400      	asrs	r0, r0, #16
 80229cc:	f53f af67 	bmi.w	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80229d0:	3901      	subs	r1, #1
 80229d2:	4288      	cmp	r0, r1
 80229d4:	f6bf af63 	bge.w	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80229d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80229da:	fb01 6303 	mla	r3, r1, r3, r6
 80229de:	141b      	asrs	r3, r3, #16
 80229e0:	f53f af5d 	bmi.w	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80229e4:	3a01      	subs	r2, #1
 80229e6:	4293      	cmp	r3, r2
 80229e8:	f6bf af59 	bge.w	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80229ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80229f0:	46ca      	mov	sl, r9
 80229f2:	f1b8 0f00 	cmp.w	r8, #0
 80229f6:	dc67      	bgt.n	8022ac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80229f8:	9b06      	ldr	r3, [sp, #24]
 80229fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80229fe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022a02:	9b08      	ldr	r3, [sp, #32]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	f340 80d7 	ble.w	8022bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022a0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a14:	eeb0 6a62 	vmov.f32	s12, s5
 8022a18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a24:	ee16 4a10 	vmov	r4, s12
 8022a28:	eeb0 6a43 	vmov.f32	s12, s6
 8022a2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a30:	ee16 6a10 	vmov	r6, s12
 8022a34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a4c:	ee12 2a90 	vmov	r2, s5
 8022a50:	eef0 2a47 	vmov.f32	s5, s14
 8022a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a58:	ee13 2a10 	vmov	r2, s6
 8022a5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8022a5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a60:	eeb0 3a67 	vmov.f32	s6, s15
 8022a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a68:	9320      	str	r3, [sp, #128]	; 0x80
 8022a6a:	9b08      	ldr	r3, [sp, #32]
 8022a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022a6e:	3b01      	subs	r3, #1
 8022a70:	9308      	str	r3, [sp, #32]
 8022a72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a74:	bf08      	it	eq
 8022a76:	4613      	moveq	r3, r2
 8022a78:	9306      	str	r3, [sp, #24]
 8022a7a:	e6e4      	b.n	8022846 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022a7c:	2900      	cmp	r1, #0
 8022a7e:	f43f af4e 	beq.w	802291e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022a82:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022a86:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8022a8c:	e747      	b.n	802291e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022a8e:	f112 0a01 	adds.w	sl, r2, #1
 8022a92:	d481      	bmi.n	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022a94:	4553      	cmp	r3, sl
 8022a96:	f6ff af7f 	blt.w	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022a9a:	f11c 0a01 	adds.w	sl, ip, #1
 8022a9e:	f53f af7b 	bmi.w	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022aa2:	45d6      	cmp	lr, sl
 8022aa4:	f6ff af78 	blt.w	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022aa8:	b21b      	sxth	r3, r3
 8022aaa:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022aae:	fa0f f28e 	sxth.w	r2, lr
 8022ab2:	9300      	str	r3, [sp, #0]
 8022ab4:	463b      	mov	r3, r7
 8022ab6:	9201      	str	r2, [sp, #4]
 8022ab8:	9a07      	ldr	r2, [sp, #28]
 8022aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022abe:	4641      	mov	r1, r8
 8022ac0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022ac2:	f7ff fe21 	bl	8022708 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022ac6:	e767      	b.n	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022ac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022aca:	1422      	asrs	r2, r4, #16
 8022acc:	1431      	asrs	r1, r6, #16
 8022ace:	9d07      	ldr	r5, [sp, #28]
 8022ad0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022ad4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022ad8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022adc:	fb03 2101 	mla	r1, r3, r1, r2
 8022ae0:	9a07      	ldr	r2, [sp, #28]
 8022ae2:	440a      	add	r2, r1
 8022ae4:	5c69      	ldrb	r1, [r5, r1]
 8022ae6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022aea:	f1be 0f00 	cmp.w	lr, #0
 8022aee:	d05c      	beq.n	8022baa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8022af0:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022af4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022af8:	950d      	str	r5, [sp, #52]	; 0x34
 8022afa:	b150      	cbz	r0, 8022b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022afc:	eb02 0c03 	add.w	ip, r2, r3
 8022b00:	5cd3      	ldrb	r3, [r2, r3]
 8022b02:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022b06:	930a      	str	r3, [sp, #40]	; 0x28
 8022b08:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022b0c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022b10:	930e      	str	r3, [sp, #56]	; 0x38
 8022b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b14:	fb1e f200 	smulbb	r2, lr, r0
 8022b18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022b1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8022b1e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022b22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022b26:	10d2      	asrs	r2, r2, #3
 8022b28:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022b2c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022b30:	ea4c 0c03 	orr.w	ip, ip, r3
 8022b34:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022b38:	9311      	str	r3, [sp, #68]	; 0x44
 8022b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022b3c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022b3e:	041b      	lsls	r3, r3, #16
 8022b40:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022b44:	ea43 030b 	orr.w	r3, r3, fp
 8022b48:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022b4c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022b50:	4353      	muls	r3, r2
 8022b52:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022b56:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022b5a:	ea43 0b01 	orr.w	fp, r3, r1
 8022b5e:	f1c0 0110 	rsb	r1, r0, #16
 8022b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b64:	eba1 0e0e 	sub.w	lr, r1, lr
 8022b68:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022b6c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022b70:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022b74:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022b78:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022b7c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b80:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022b84:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022b88:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022b8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022b90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b94:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022b98:	ea43 0c0c 	orr.w	ip, r3, ip
 8022b9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b9e:	441c      	add	r4, r3
 8022ba0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ba2:	f82a cb02 	strh.w	ip, [sl], #2
 8022ba6:	441e      	add	r6, r3
 8022ba8:	e723      	b.n	80229f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022baa:	2800      	cmp	r0, #0
 8022bac:	d0b1      	beq.n	8022b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022bae:	5cd3      	ldrb	r3, [r2, r3]
 8022bb0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8022bb6:	e7ac      	b.n	8022b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022bb8:	b013      	add	sp, #76	; 0x4c
 8022bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022bbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bc2:	880d      	ldrh	r5, [r1, #0]
 8022bc4:	b087      	sub	sp, #28
 8022bc6:	10ef      	asrs	r7, r5, #3
 8022bc8:	9103      	str	r1, [sp, #12]
 8022bca:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8022bce:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8022bd2:	00ed      	lsls	r5, r5, #3
 8022bd4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022bd8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8022bdc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8022be0:	b2ed      	uxtb	r5, r5
 8022be2:	9701      	str	r7, [sp, #4]
 8022be4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022be8:	9502      	str	r5, [sp, #8]
 8022bea:	9d01      	ldr	r5, [sp, #4]
 8022bec:	9902      	ldr	r1, [sp, #8]
 8022bee:	022d      	lsls	r5, r5, #8
 8022bf0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022bf4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8022bf8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8022bfc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8022c00:	430d      	orrs	r5, r1
 8022c02:	fb06 0709 	mla	r7, r6, r9, r0
 8022c06:	2e00      	cmp	r6, #0
 8022c08:	9505      	str	r5, [sp, #20]
 8022c0a:	eb02 0c07 	add.w	ip, r2, r7
 8022c0e:	f2c0 80b6 	blt.w	8022d7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022c12:	45b3      	cmp	fp, r6
 8022c14:	f340 80b3 	ble.w	8022d7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022c18:	2800      	cmp	r0, #0
 8022c1a:	f2c0 80ae 	blt.w	8022d7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022c1e:	4581      	cmp	r9, r0
 8022c20:	f340 80ab 	ble.w	8022d7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022c24:	5dd7      	ldrb	r7, [r2, r7]
 8022c26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022c2a:	441f      	add	r7, r3
 8022c2c:	1c42      	adds	r2, r0, #1
 8022c2e:	f100 80a9 	bmi.w	8022d84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022c32:	4591      	cmp	r9, r2
 8022c34:	f340 80a6 	ble.w	8022d84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022c38:	2c00      	cmp	r4, #0
 8022c3a:	f000 80a3 	beq.w	8022d84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022c3e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022c42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c46:	441d      	add	r5, r3
 8022c48:	3601      	adds	r6, #1
 8022c4a:	f100 809f 	bmi.w	8022d8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022c4e:	45b3      	cmp	fp, r6
 8022c50:	f340 809c 	ble.w	8022d8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022c54:	f1be 0f00 	cmp.w	lr, #0
 8022c58:	f000 8098 	beq.w	8022d8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022c5c:	2800      	cmp	r0, #0
 8022c5e:	f2c0 8093 	blt.w	8022d88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022c62:	4581      	cmp	r9, r0
 8022c64:	f340 8090 	ble.w	8022d88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022c68:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8022c6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022c70:	441e      	add	r6, r3
 8022c72:	3001      	adds	r0, #1
 8022c74:	f100 808d 	bmi.w	8022d92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022c78:	4581      	cmp	r9, r0
 8022c7a:	f340 808a 	ble.w	8022d92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022c7e:	2c00      	cmp	r4, #0
 8022c80:	f000 8087 	beq.w	8022d92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022c84:	44e1      	add	r9, ip
 8022c86:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022c8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c8e:	4413      	add	r3, r2
 8022c90:	b2a4      	uxth	r4, r4
 8022c92:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022c96:	fa1f fe8e 	uxth.w	lr, lr
 8022c9a:	9901      	ldr	r1, [sp, #4]
 8022c9c:	fb04 fb0e 	mul.w	fp, r4, lr
 8022ca0:	0124      	lsls	r4, r4, #4
 8022ca2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022ca6:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8022caa:	eba4 040b 	sub.w	r4, r4, fp
 8022cae:	fa1f f08e 	uxth.w	r0, lr
 8022cb2:	b2a2      	uxth	r2, r4
 8022cb4:	78ac      	ldrb	r4, [r5, #2]
 8022cb6:	eba9 0900 	sub.w	r9, r9, r0
 8022cba:	fa1f fe88 	uxth.w	lr, r8
 8022cbe:	4354      	muls	r4, r2
 8022cc0:	ea6f 0808 	mvn.w	r8, r8
 8022cc4:	fa1f f989 	uxth.w	r9, r9
 8022cc8:	fa5f f888 	uxtb.w	r8, r8
 8022ccc:	fb09 440c 	mla	r4, r9, ip, r4
 8022cd0:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022cd4:	fb1a fa08 	smulbb	sl, sl, r8
 8022cd8:	fb00 440c 	mla	r4, r0, ip, r4
 8022cdc:	f893 c002 	ldrb.w	ip, [r3, #2]
 8022ce0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022ce4:	787c      	ldrb	r4, [r7, #1]
 8022ce6:	783f      	ldrb	r7, [r7, #0]
 8022ce8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022cec:	fb0c ac0e 	mla	ip, ip, lr, sl
 8022cf0:	f895 a001 	ldrb.w	sl, [r5, #1]
 8022cf4:	782d      	ldrb	r5, [r5, #0]
 8022cf6:	fb02 fa0a 	mul.w	sl, r2, sl
 8022cfa:	fa1f fc8c 	uxth.w	ip, ip
 8022cfe:	436a      	muls	r2, r5
 8022d00:	7835      	ldrb	r5, [r6, #0]
 8022d02:	fb09 aa04 	mla	sl, r9, r4, sl
 8022d06:	7874      	ldrb	r4, [r6, #1]
 8022d08:	fb09 2207 	mla	r2, r9, r7, r2
 8022d0c:	fb00 aa04 	mla	sl, r0, r4, sl
 8022d10:	785c      	ldrb	r4, [r3, #1]
 8022d12:	fb00 2005 	mla	r0, r0, r5, r2
 8022d16:	781b      	ldrb	r3, [r3, #0]
 8022d18:	fb0b a404 	mla	r4, fp, r4, sl
 8022d1c:	fb11 fa08 	smulbb	sl, r1, r8
 8022d20:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022d24:	9b02      	ldr	r3, [sp, #8]
 8022d26:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022d2a:	fb13 f808 	smulbb	r8, r3, r8
 8022d2e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022d32:	fb04 a40e 	mla	r4, r4, lr, sl
 8022d36:	f10c 0301 	add.w	r3, ip, #1
 8022d3a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8022d3e:	b2a4      	uxth	r4, r4
 8022d40:	fa1f fe8e 	uxth.w	lr, lr
 8022d44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022d48:	f104 0a01 	add.w	sl, r4, #1
 8022d4c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8022d50:	f10e 0c01 	add.w	ip, lr, #1
 8022d54:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022d58:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022d5c:	0964      	lsrs	r4, r4, #5
 8022d5e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022d62:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d6a:	9b03      	ldr	r3, [sp, #12]
 8022d6c:	ea4c 0c04 	orr.w	ip, ip, r4
 8022d70:	f8a3 c000 	strh.w	ip, [r3]
 8022d74:	b007      	add	sp, #28
 8022d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d7a:	af05      	add	r7, sp, #20
 8022d7c:	e756      	b.n	8022c2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8022d7e:	ad05      	add	r5, sp, #20
 8022d80:	462f      	mov	r7, r5
 8022d82:	e761      	b.n	8022c48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022d84:	ad05      	add	r5, sp, #20
 8022d86:	e75f      	b.n	8022c48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022d88:	ae05      	add	r6, sp, #20
 8022d8a:	e772      	b.n	8022c72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8022d8c:	ab05      	add	r3, sp, #20
 8022d8e:	461e      	mov	r6, r3
 8022d90:	e77e      	b.n	8022c90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8022d92:	ab05      	add	r3, sp, #20
 8022d94:	e77c      	b.n	8022c90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d9a:	b095      	sub	sp, #84	; 0x54
 8022d9c:	9212      	str	r2, [sp, #72]	; 0x48
 8022d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8022da0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022da2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8022da6:	9013      	str	r0, [sp, #76]	; 0x4c
 8022da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8022daa:	6850      	ldr	r0, [r2, #4]
 8022dac:	910e      	str	r1, [sp, #56]	; 0x38
 8022dae:	6812      	ldr	r2, [r2, #0]
 8022db0:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8022db4:	fb00 1303 	mla	r3, r0, r3, r1
 8022db8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8022dbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8022dc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022dc6:	685c      	ldr	r4, [r3, #4]
 8022dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022dca:	3404      	adds	r4, #4
 8022dcc:	43db      	mvns	r3, r3
 8022dce:	b2db      	uxtb	r3, r3
 8022dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	dc03      	bgt.n	8022de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	f340 8255 	ble.w	802328a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022de2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022de6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dea:	1e48      	subs	r0, r1, #1
 8022dec:	1e55      	subs	r5, r2, #1
 8022dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022df0:	2b00      	cmp	r3, #0
 8022df2:	f340 80f9 	ble.w	8022fe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022df6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022dfa:	1436      	asrs	r6, r6, #16
 8022dfc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022e00:	d406      	bmi.n	8022e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022e02:	4286      	cmp	r6, r0
 8022e04:	da04      	bge.n	8022e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	db02      	blt.n	8022e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022e0a:	42ab      	cmp	r3, r5
 8022e0c:	f2c0 80ed 	blt.w	8022fea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022e10:	3601      	adds	r6, #1
 8022e12:	f100 80da 	bmi.w	8022fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022e16:	42b1      	cmp	r1, r6
 8022e18:	f2c0 80d7 	blt.w	8022fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022e1c:	3301      	adds	r3, #1
 8022e1e:	f100 80d4 	bmi.w	8022fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022e22:	429a      	cmp	r2, r3
 8022e24:	f2c0 80d1 	blt.w	8022fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8022e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8022e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	f340 80fa 	ble.w	802302c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022e38:	9826      	ldr	r0, [sp, #152]	; 0x98
 8022e3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022e3e:	68c6      	ldr	r6, [r0, #12]
 8022e40:	141d      	asrs	r5, r3, #16
 8022e42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022e44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022e48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022e4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022e4c:	1400      	asrs	r0, r0, #16
 8022e4e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022e52:	6892      	ldr	r2, [r2, #8]
 8022e54:	f100 813e 	bmi.w	80230d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022e58:	1e57      	subs	r7, r2, #1
 8022e5a:	42b8      	cmp	r0, r7
 8022e5c:	f280 813a 	bge.w	80230d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022e60:	2d00      	cmp	r5, #0
 8022e62:	f2c0 8137 	blt.w	80230d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022e66:	1e77      	subs	r7, r6, #1
 8022e68:	42bd      	cmp	r5, r7
 8022e6a:	f280 8133 	bge.w	80230d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022e6e:	b212      	sxth	r2, r2
 8022e70:	fb05 0002 	mla	r0, r5, r2, r0
 8022e74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022e76:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022e7a:	182e      	adds	r6, r5, r0
 8022e7c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022e80:	eb04 050a 	add.w	r5, r4, sl
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	f000 8117 	beq.w	80230b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e8a:	f896 c001 	ldrb.w	ip, [r6, #1]
 8022e8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e92:	44a4      	add	ip, r4
 8022e94:	2900      	cmp	r1, #0
 8022e96:	f000 8117 	beq.w	80230c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022e9a:	18b0      	adds	r0, r6, r2
 8022e9c:	5cb2      	ldrb	r2, [r6, r2]
 8022e9e:	7840      	ldrb	r0, [r0, #1]
 8022ea0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022ea8:	4422      	add	r2, r4
 8022eaa:	4420      	add	r0, r4
 8022eac:	b29b      	uxth	r3, r3
 8022eae:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022eb2:	b289      	uxth	r1, r1
 8022eb4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022eb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022eba:	fb03 f901 	mul.w	r9, r3, r1
 8022ebe:	011b      	lsls	r3, r3, #4
 8022ec0:	f8b6 e000 	ldrh.w	lr, [r6]
 8022ec4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022ec8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022ecc:	eba3 0309 	sub.w	r3, r3, r9
 8022ed0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022ed4:	b289      	uxth	r1, r1
 8022ed6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022eda:	b29b      	uxth	r3, r3
 8022edc:	eba8 0801 	sub.w	r8, r8, r1
 8022ee0:	435f      	muls	r7, r3
 8022ee2:	fa1f f888 	uxth.w	r8, r8
 8022ee6:	9310      	str	r3, [sp, #64]	; 0x40
 8022ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022eea:	fb08 770b 	mla	r7, r8, fp, r7
 8022eee:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022ef2:	fb01 770b 	mla	r7, r1, fp, r7
 8022ef6:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022efa:	fb09 770b 	mla	r7, r9, fp, r7
 8022efe:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022f02:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022f06:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022f0a:	fb1b fb03 	smulbb	fp, fp, r3
 8022f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f10:	fb07 b706 	mla	r7, r7, r6, fp
 8022f14:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022f18:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022f1c:	f89c c000 	ldrb.w	ip, [ip]
 8022f20:	b2bf      	uxth	r7, r7
 8022f22:	435d      	muls	r5, r3
 8022f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f26:	fb08 550b 	mla	r5, r8, fp, r5
 8022f2a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022f2e:	fb01 550b 	mla	r5, r1, fp, r5
 8022f32:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022f36:	fb09 550b 	mla	r5, r9, fp, r5
 8022f3a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8022f3e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022f42:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022f46:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022f4a:	fa5f fe8e 	uxtb.w	lr, lr
 8022f4e:	fb1b fb03 	smulbb	fp, fp, r3
 8022f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f54:	fb03 f30c 	mul.w	r3, r3, ip
 8022f58:	f892 c000 	ldrb.w	ip, [r2]
 8022f5c:	fb05 b506 	mla	r5, r5, r6, fp
 8022f60:	fb08 330a 	mla	r3, r8, sl, r3
 8022f64:	b2ad      	uxth	r5, r5
 8022f66:	fb01 330c 	mla	r3, r1, ip, r3
 8022f6a:	f890 c000 	ldrb.w	ip, [r0]
 8022f6e:	f105 0b01 	add.w	fp, r5, #1
 8022f72:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f78:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022f7c:	fb1e fe03 	smulbb	lr, lr, r3
 8022f80:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022f84:	1c7b      	adds	r3, r7, #1
 8022f86:	096d      	lsrs	r5, r5, #5
 8022f88:	fb0c e606 	mla	r6, ip, r6, lr
 8022f8c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022f90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f94:	b2b6      	uxth	r6, r6
 8022f96:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8022f9a:	1c77      	adds	r7, r6, #1
 8022f9c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022fa0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022fa4:	431f      	orrs	r7, r3
 8022fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fa8:	433d      	orrs	r5, r7
 8022faa:	801d      	strh	r5, [r3, #0]
 8022fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022fb0:	3302      	adds	r3, #2
 8022fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8022fb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fb6:	4413      	add	r3, r2
 8022fb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022fba:	931f      	str	r3, [sp, #124]	; 0x7c
 8022fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fbe:	4413      	add	r3, r2
 8022fc0:	9320      	str	r3, [sp, #128]	; 0x80
 8022fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022fc4:	3b01      	subs	r3, #1
 8022fc6:	9311      	str	r3, [sp, #68]	; 0x44
 8022fc8:	e732      	b.n	8022e30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fcc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8022fce:	4433      	add	r3, r6
 8022fd0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022fd2:	931f      	str	r3, [sp, #124]	; 0x7c
 8022fd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fd6:	4433      	add	r3, r6
 8022fd8:	9320      	str	r3, [sp, #128]	; 0x80
 8022fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fdc:	3b01      	subs	r3, #1
 8022fde:	9309      	str	r3, [sp, #36]	; 0x24
 8022fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fe2:	3302      	adds	r3, #2
 8022fe4:	930a      	str	r3, [sp, #40]	; 0x28
 8022fe6:	e702      	b.n	8022dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022fe8:	d027      	beq.n	802303a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fec:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022fee:	3b01      	subs	r3, #1
 8022ff0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022ff2:	fb00 5003 	mla	r0, r0, r3, r5
 8022ff6:	1400      	asrs	r0, r0, #16
 8022ff8:	f53f af16 	bmi.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022ffc:	3901      	subs	r1, #1
 8022ffe:	4288      	cmp	r0, r1
 8023000:	f6bf af12 	bge.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023004:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023006:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023008:	fb01 0303 	mla	r3, r1, r3, r0
 802300c:	141b      	asrs	r3, r3, #16
 802300e:	f53f af0b 	bmi.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023012:	3a01      	subs	r2, #1
 8023014:	4293      	cmp	r3, r2
 8023016:	f6bf af07 	bge.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802301a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802301c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023020:	9311      	str	r3, [sp, #68]	; 0x44
 8023022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023024:	930c      	str	r3, [sp, #48]	; 0x30
 8023026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023028:	2b00      	cmp	r3, #0
 802302a:	dc70      	bgt.n	802310e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802302c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802302e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023034:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023038:	930a      	str	r3, [sp, #40]	; 0x28
 802303a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802303c:	2b00      	cmp	r3, #0
 802303e:	f340 8124 	ble.w	802328a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023046:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023048:	ee30 0a04 	vadd.f32	s0, s0, s8
 802304c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023050:	eef0 6a62 	vmov.f32	s13, s5
 8023054:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023058:	ee31 1a05 	vadd.f32	s2, s2, s10
 802305c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023060:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8023064:	eef0 6a43 	vmov.f32	s13, s6
 8023068:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802306c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8023070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023074:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023078:	ee77 2a62 	vsub.f32	s5, s14, s5
 802307c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023084:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023088:	ee12 2a90 	vmov	r2, s5
 802308c:	eef0 2a47 	vmov.f32	s5, s14
 8023090:	fb92 f3f3 	sdiv	r3, r2, r3
 8023094:	ee13 2a10 	vmov	r2, s6
 8023098:	9321      	str	r3, [sp, #132]	; 0x84
 802309a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802309c:	eeb0 3a67 	vmov.f32	s6, s15
 80230a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80230a4:	9322      	str	r3, [sp, #136]	; 0x88
 80230a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80230aa:	3b01      	subs	r3, #1
 80230ac:	930e      	str	r3, [sp, #56]	; 0x38
 80230ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80230b0:	bf08      	it	eq
 80230b2:	4613      	moveq	r3, r2
 80230b4:	9309      	str	r3, [sp, #36]	; 0x24
 80230b6:	e68c      	b.n	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80230b8:	b149      	cbz	r1, 80230ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80230ba:	5cb2      	ldrb	r2, [r6, r2]
 80230bc:	4628      	mov	r0, r5
 80230be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80230c2:	4422      	add	r2, r4
 80230c4:	46ac      	mov	ip, r5
 80230c6:	e6f1      	b.n	8022eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80230c8:	4628      	mov	r0, r5
 80230ca:	462a      	mov	r2, r5
 80230cc:	e6ee      	b.n	8022eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80230ce:	4628      	mov	r0, r5
 80230d0:	462a      	mov	r2, r5
 80230d2:	e7f7      	b.n	80230c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80230d4:	1c47      	adds	r7, r0, #1
 80230d6:	f53f af69 	bmi.w	8022fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80230da:	42ba      	cmp	r2, r7
 80230dc:	f6ff af66 	blt.w	8022fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80230e0:	1c6f      	adds	r7, r5, #1
 80230e2:	f53f af63 	bmi.w	8022fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80230e6:	42be      	cmp	r6, r7
 80230e8:	f6ff af60 	blt.w	8022fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80230ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80230ee:	b236      	sxth	r6, r6
 80230f0:	b212      	sxth	r2, r2
 80230f2:	9002      	str	r0, [sp, #8]
 80230f4:	9601      	str	r6, [sp, #4]
 80230f6:	9200      	str	r2, [sp, #0]
 80230f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80230fa:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80230fe:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023102:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023106:	4623      	mov	r3, r4
 8023108:	f7ff fd59 	bl	8022bbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802310c:	e74e      	b.n	8022fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802310e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023110:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023112:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023116:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802311a:	1400      	asrs	r0, r0, #16
 802311c:	142d      	asrs	r5, r5, #16
 802311e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023120:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023124:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023128:	fb02 5000 	mla	r0, r2, r0, r5
 802312c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802312e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023132:	182e      	adds	r6, r5, r0
 8023134:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023138:	eb04 0509 	add.w	r5, r4, r9
 802313c:	2b00      	cmp	r3, #0
 802313e:	f000 8096 	beq.w	802326e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023142:	7877      	ldrb	r7, [r6, #1]
 8023144:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023148:	4427      	add	r7, r4
 802314a:	2900      	cmp	r1, #0
 802314c:	f000 8097 	beq.w	802327e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8023150:	18b0      	adds	r0, r6, r2
 8023152:	5cb2      	ldrb	r2, [r6, r2]
 8023154:	7840      	ldrb	r0, [r0, #1]
 8023156:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802315a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802315e:	4422      	add	r2, r4
 8023160:	4420      	add	r0, r4
 8023162:	b29b      	uxth	r3, r3
 8023164:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023166:	b289      	uxth	r1, r1
 8023168:	f895 b002 	ldrb.w	fp, [r5, #2]
 802316c:	f8b6 c000 	ldrh.w	ip, [r6]
 8023170:	fb03 f801 	mul.w	r8, r3, r1
 8023174:	011b      	lsls	r3, r3, #4
 8023176:	78be      	ldrb	r6, [r7, #2]
 8023178:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802317c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023180:	eba3 0308 	sub.w	r3, r3, r8
 8023184:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023188:	b289      	uxth	r1, r1
 802318a:	b29b      	uxth	r3, r3
 802318c:	ebae 0e01 	sub.w	lr, lr, r1
 8023190:	435e      	muls	r6, r3
 8023192:	fa1f fe8e 	uxth.w	lr, lr
 8023196:	9310      	str	r3, [sp, #64]	; 0x40
 8023198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802319a:	fb0e 660b 	mla	r6, lr, fp, r6
 802319e:	f892 b002 	ldrb.w	fp, [r2, #2]
 80231a2:	fb01 660b 	mla	r6, r1, fp, r6
 80231a6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80231aa:	fb08 660b 	mla	r6, r8, fp, r6
 80231ae:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80231b2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80231b6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80231ba:	fb1b fb03 	smulbb	fp, fp, r3
 80231be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231c0:	fb06 b60a 	mla	r6, r6, sl, fp
 80231c4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80231c8:	787d      	ldrb	r5, [r7, #1]
 80231ca:	783f      	ldrb	r7, [r7, #0]
 80231cc:	b2b6      	uxth	r6, r6
 80231ce:	435d      	muls	r5, r3
 80231d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231d2:	fb0e 550b 	mla	r5, lr, fp, r5
 80231d6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80231da:	fb01 550b 	mla	r5, r1, fp, r5
 80231de:	f890 b001 	ldrb.w	fp, [r0, #1]
 80231e2:	fb08 550b 	mla	r5, r8, fp, r5
 80231e6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80231ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80231ee:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80231f2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80231f6:	fa5f fc8c 	uxtb.w	ip, ip
 80231fa:	fb1b fb03 	smulbb	fp, fp, r3
 80231fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023200:	437b      	muls	r3, r7
 8023202:	7817      	ldrb	r7, [r2, #0]
 8023204:	fb05 b50a 	mla	r5, r5, sl, fp
 8023208:	fb0e 3309 	mla	r3, lr, r9, r3
 802320c:	b2ad      	uxth	r5, r5
 802320e:	fb01 3307 	mla	r3, r1, r7, r3
 8023212:	7807      	ldrb	r7, [r0, #0]
 8023214:	f105 0b01 	add.w	fp, r5, #1
 8023218:	fb08 3707 	mla	r7, r8, r7, r3
 802321c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802321e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023222:	fb1c fc03 	smulbb	ip, ip, r3
 8023226:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802322a:	1c73      	adds	r3, r6, #1
 802322c:	096d      	lsrs	r5, r5, #5
 802322e:	fb07 c70a 	mla	r7, r7, sl, ip
 8023232:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023236:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802323a:	b2bf      	uxth	r7, r7
 802323c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802323e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023242:	1c7a      	adds	r2, r7, #1
 8023244:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023248:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802324c:	4316      	orrs	r6, r2
 802324e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023250:	432e      	orrs	r6, r5
 8023252:	f823 6b02 	strh.w	r6, [r3], #2
 8023256:	930c      	str	r3, [sp, #48]	; 0x30
 8023258:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802325a:	4413      	add	r3, r2
 802325c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802325e:	931f      	str	r3, [sp, #124]	; 0x7c
 8023260:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023262:	4413      	add	r3, r2
 8023264:	9320      	str	r3, [sp, #128]	; 0x80
 8023266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023268:	3b01      	subs	r3, #1
 802326a:	9311      	str	r3, [sp, #68]	; 0x44
 802326c:	e6db      	b.n	8023026 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802326e:	b149      	cbz	r1, 8023284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023270:	5cb2      	ldrb	r2, [r6, r2]
 8023272:	4628      	mov	r0, r5
 8023274:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023278:	4422      	add	r2, r4
 802327a:	462f      	mov	r7, r5
 802327c:	e771      	b.n	8023162 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802327e:	4628      	mov	r0, r5
 8023280:	462a      	mov	r2, r5
 8023282:	e76e      	b.n	8023162 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023284:	4628      	mov	r0, r5
 8023286:	462a      	mov	r2, r5
 8023288:	e7f7      	b.n	802327a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802328a:	b015      	add	sp, #84	; 0x54
 802328c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023294:	880f      	ldrh	r7, [r1, #0]
 8023296:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802329a:	023c      	lsls	r4, r7, #8
 802329c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80232a0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80232a4:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80232a8:	017c      	lsls	r4, r7, #5
 80232aa:	00ff      	lsls	r7, r7, #3
 80232ac:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80232b0:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80232b4:	b2ff      	uxtb	r7, r7
 80232b6:	ea4b 0404 	orr.w	r4, fp, r4
 80232ba:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80232be:	4327      	orrs	r7, r4
 80232c0:	fb05 ca0e 	mla	sl, r5, lr, ip
 80232c4:	2d00      	cmp	r5, #0
 80232c6:	9701      	str	r7, [sp, #4]
 80232c8:	eb02 080a 	add.w	r8, r2, sl
 80232cc:	db7e      	blt.n	80233cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80232ce:	45a9      	cmp	r9, r5
 80232d0:	dd7c      	ble.n	80233cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80232d2:	f1bc 0f00 	cmp.w	ip, #0
 80232d6:	db77      	blt.n	80233c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80232d8:	45e6      	cmp	lr, ip
 80232da:	dd75      	ble.n	80233c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80232dc:	f812 700a 	ldrb.w	r7, [r2, sl]
 80232e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80232e4:	441f      	add	r7, r3
 80232e6:	f11c 0201 	adds.w	r2, ip, #1
 80232ea:	d472      	bmi.n	80233d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80232ec:	4596      	cmp	lr, r2
 80232ee:	dd70      	ble.n	80233d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80232f0:	2800      	cmp	r0, #0
 80232f2:	d06e      	beq.n	80233d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80232f4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80232f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232fc:	441c      	add	r4, r3
 80232fe:	3501      	adds	r5, #1
 8023300:	d46b      	bmi.n	80233da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023302:	45a9      	cmp	r9, r5
 8023304:	dd69      	ble.n	80233da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023306:	2e00      	cmp	r6, #0
 8023308:	d067      	beq.n	80233da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802330a:	f1bc 0f00 	cmp.w	ip, #0
 802330e:	db62      	blt.n	80233d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023310:	45e6      	cmp	lr, ip
 8023312:	dd60      	ble.n	80233d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023314:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802331c:	441d      	add	r5, r3
 802331e:	f11c 0201 	adds.w	r2, ip, #1
 8023322:	d45d      	bmi.n	80233e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023324:	4596      	cmp	lr, r2
 8023326:	dd5b      	ble.n	80233e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023328:	2800      	cmp	r0, #0
 802332a:	d059      	beq.n	80233e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802332c:	44c6      	add	lr, r8
 802332e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023332:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023336:	4413      	add	r3, r2
 8023338:	b280      	uxth	r0, r0
 802333a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802333e:	b2b2      	uxth	r2, r6
 8023340:	f897 9000 	ldrb.w	r9, [r7]
 8023344:	787f      	ldrb	r7, [r7, #1]
 8023346:	fb00 f602 	mul.w	r6, r0, r2
 802334a:	0100      	lsls	r0, r0, #4
 802334c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023350:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023354:	1b80      	subs	r0, r0, r6
 8023356:	fa1f fc82 	uxth.w	ip, r2
 802335a:	b282      	uxth	r2, r0
 802335c:	78a0      	ldrb	r0, [r4, #2]
 802335e:	eba8 080c 	sub.w	r8, r8, ip
 8023362:	4350      	muls	r0, r2
 8023364:	fa1f f888 	uxth.w	r8, r8
 8023368:	fb08 0e0e 	mla	lr, r8, lr, r0
 802336c:	78a8      	ldrb	r0, [r5, #2]
 802336e:	fb0c e000 	mla	r0, ip, r0, lr
 8023372:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023376:	fb06 0e0e 	mla	lr, r6, lr, r0
 802337a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802337e:	f894 e000 	ldrb.w	lr, [r4]
 8023382:	fb02 fe0e 	mul.w	lr, r2, lr
 8023386:	fb08 e909 	mla	r9, r8, r9, lr
 802338a:	f895 e000 	ldrb.w	lr, [r5]
 802338e:	fb0c 990e 	mla	r9, ip, lr, r9
 8023392:	f893 e000 	ldrb.w	lr, [r3]
 8023396:	785b      	ldrb	r3, [r3, #1]
 8023398:	fb06 9e0e 	mla	lr, r6, lr, r9
 802339c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80233a0:	ea4e 0e00 	orr.w	lr, lr, r0
 80233a4:	7860      	ldrb	r0, [r4, #1]
 80233a6:	4350      	muls	r0, r2
 80233a8:	786a      	ldrb	r2, [r5, #1]
 80233aa:	fb08 0007 	mla	r0, r8, r7, r0
 80233ae:	fb0c 0202 	mla	r2, ip, r2, r0
 80233b2:	fb06 2303 	mla	r3, r6, r3, r2
 80233b6:	095b      	lsrs	r3, r3, #5
 80233b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233bc:	ea4e 0303 	orr.w	r3, lr, r3
 80233c0:	800b      	strh	r3, [r1, #0]
 80233c2:	b003      	add	sp, #12
 80233c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233c8:	af01      	add	r7, sp, #4
 80233ca:	e78c      	b.n	80232e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80233cc:	ac01      	add	r4, sp, #4
 80233ce:	4627      	mov	r7, r4
 80233d0:	e795      	b.n	80232fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80233d2:	ac01      	add	r4, sp, #4
 80233d4:	e793      	b.n	80232fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80233d6:	ad01      	add	r5, sp, #4
 80233d8:	e7a1      	b.n	802331e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80233da:	ab01      	add	r3, sp, #4
 80233dc:	461d      	mov	r5, r3
 80233de:	e7ab      	b.n	8023338 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80233e0:	ab01      	add	r3, sp, #4
 80233e2:	e7a9      	b.n	8023338 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080233e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80233e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233e8:	b08f      	sub	sp, #60	; 0x3c
 80233ea:	920c      	str	r2, [sp, #48]	; 0x30
 80233ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80233ee:	900d      	str	r0, [sp, #52]	; 0x34
 80233f0:	910a      	str	r1, [sp, #40]	; 0x28
 80233f2:	6850      	ldr	r0, [r2, #4]
 80233f4:	9306      	str	r3, [sp, #24]
 80233f6:	6812      	ldr	r2, [r2, #0]
 80233f8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80233fc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023400:	fb00 1303 	mla	r3, r0, r3, r1
 8023404:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023408:	9307      	str	r3, [sp, #28]
 802340a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802340c:	681b      	ldr	r3, [r3, #0]
 802340e:	9308      	str	r3, [sp, #32]
 8023410:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023412:	685c      	ldr	r4, [r3, #4]
 8023414:	3404      	adds	r4, #4
 8023416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023418:	2b00      	cmp	r3, #0
 802341a:	dc03      	bgt.n	8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802341c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802341e:	2b00      	cmp	r3, #0
 8023420:	f340 81d5 	ble.w	80237ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023424:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023426:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802342a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802342e:	1e48      	subs	r0, r1, #1
 8023430:	1e56      	subs	r6, r2, #1
 8023432:	9b06      	ldr	r3, [sp, #24]
 8023434:	2b00      	cmp	r3, #0
 8023436:	f340 80b6 	ble.w	80235a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802343a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802343e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023442:	d406      	bmi.n	8023452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023444:	4287      	cmp	r7, r0
 8023446:	da04      	bge.n	8023452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023448:	2b00      	cmp	r3, #0
 802344a:	db02      	blt.n	8023452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802344c:	42b3      	cmp	r3, r6
 802344e:	f2c0 80ab 	blt.w	80235a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023452:	3701      	adds	r7, #1
 8023454:	f100 809c 	bmi.w	8023590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023458:	42b9      	cmp	r1, r7
 802345a:	f2c0 8099 	blt.w	8023590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802345e:	3301      	adds	r3, #1
 8023460:	f100 8096 	bmi.w	8023590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023464:	429a      	cmp	r2, r3
 8023466:	f2c0 8093 	blt.w	8023590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802346a:	9b06      	ldr	r3, [sp, #24]
 802346c:	930b      	str	r3, [sp, #44]	; 0x2c
 802346e:	9b07      	ldr	r3, [sp, #28]
 8023470:	9309      	str	r3, [sp, #36]	; 0x24
 8023472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023474:	2b00      	cmp	r3, #0
 8023476:	f340 80b4 	ble.w	80235e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802347a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802347c:	142e      	asrs	r6, r5, #16
 802347e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023480:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023484:	68c7      	ldr	r7, [r0, #12]
 8023486:	ea5f 402b 	movs.w	r0, fp, asr #16
 802348a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802348e:	6892      	ldr	r2, [r2, #8]
 8023490:	f100 80fb 	bmi.w	802368a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023494:	f102 3cff 	add.w	ip, r2, #4294967295
 8023498:	4560      	cmp	r0, ip
 802349a:	f280 80f6 	bge.w	802368a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802349e:	2e00      	cmp	r6, #0
 80234a0:	f2c0 80f3 	blt.w	802368a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80234a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80234a8:	4566      	cmp	r6, ip
 80234aa:	f280 80ee 	bge.w	802368a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80234ae:	b212      	sxth	r2, r2
 80234b0:	fb06 0002 	mla	r0, r6, r2, r0
 80234b4:	9e08      	ldr	r6, [sp, #32]
 80234b6:	1837      	adds	r7, r6, r0
 80234b8:	5c30      	ldrb	r0, [r6, r0]
 80234ba:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80234be:	eb04 0c08 	add.w	ip, r4, r8
 80234c2:	2b00      	cmp	r3, #0
 80234c4:	f000 80d3 	beq.w	802366e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80234c8:	787e      	ldrb	r6, [r7, #1]
 80234ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80234ce:	4426      	add	r6, r4
 80234d0:	2900      	cmp	r1, #0
 80234d2:	f000 80d4 	beq.w	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80234d6:	18b8      	adds	r0, r7, r2
 80234d8:	5cba      	ldrb	r2, [r7, r2]
 80234da:	7840      	ldrb	r0, [r0, #1]
 80234dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80234e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234e4:	4422      	add	r2, r4
 80234e6:	4420      	add	r0, r4
 80234e8:	b29b      	uxth	r3, r3
 80234ea:	78b7      	ldrb	r7, [r6, #2]
 80234ec:	b289      	uxth	r1, r1
 80234ee:	f89c a002 	ldrb.w	sl, [ip, #2]
 80234f2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80234f6:	fb03 f901 	mul.w	r9, r3, r1
 80234fa:	011b      	lsls	r3, r3, #4
 80234fc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023500:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023504:	eba3 0309 	sub.w	r3, r3, r9
 8023508:	b289      	uxth	r1, r1
 802350a:	b29b      	uxth	r3, r3
 802350c:	ebae 0e01 	sub.w	lr, lr, r1
 8023510:	435f      	muls	r7, r3
 8023512:	fa1f fe8e 	uxth.w	lr, lr
 8023516:	fb0e 770a 	mla	r7, lr, sl, r7
 802351a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802351e:	fb01 770a 	mla	r7, r1, sl, r7
 8023522:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023526:	fb09 7a0a 	mla	sl, r9, sl, r7
 802352a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802352e:	f896 8000 	ldrb.w	r8, [r6]
 8023532:	7876      	ldrb	r6, [r6, #1]
 8023534:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023538:	fb03 f808 	mul.w	r8, r3, r8
 802353c:	4373      	muls	r3, r6
 802353e:	fb0e 8807 	mla	r8, lr, r7, r8
 8023542:	7817      	ldrb	r7, [r2, #0]
 8023544:	fb0e 330c 	mla	r3, lr, ip, r3
 8023548:	fb01 8807 	mla	r8, r1, r7, r8
 802354c:	7807      	ldrb	r7, [r0, #0]
 802354e:	fb09 8707 	mla	r7, r9, r7, r8
 8023552:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023556:	ea47 070a 	orr.w	r7, r7, sl
 802355a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802355e:	fb01 310a 	mla	r1, r1, sl, r3
 8023562:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023568:	fb09 1a0a 	mla	sl, r9, sl, r1
 802356c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023570:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023574:	ea47 070a 	orr.w	r7, r7, sl
 8023578:	801f      	strh	r7, [r3, #0]
 802357a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802357c:	3302      	adds	r3, #2
 802357e:	9309      	str	r3, [sp, #36]	; 0x24
 8023580:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023582:	449b      	add	fp, r3
 8023584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023586:	441d      	add	r5, r3
 8023588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802358a:	3b01      	subs	r3, #1
 802358c:	930b      	str	r3, [sp, #44]	; 0x2c
 802358e:	e770      	b.n	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023590:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023592:	449b      	add	fp, r3
 8023594:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023596:	441d      	add	r5, r3
 8023598:	9b06      	ldr	r3, [sp, #24]
 802359a:	3b01      	subs	r3, #1
 802359c:	9306      	str	r3, [sp, #24]
 802359e:	9b07      	ldr	r3, [sp, #28]
 80235a0:	3302      	adds	r3, #2
 80235a2:	9307      	str	r3, [sp, #28]
 80235a4:	e745      	b.n	8023432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80235a6:	d023      	beq.n	80235f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80235a8:	9b06      	ldr	r3, [sp, #24]
 80235aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80235ac:	3b01      	subs	r3, #1
 80235ae:	fb00 b003 	mla	r0, r0, r3, fp
 80235b2:	1400      	asrs	r0, r0, #16
 80235b4:	f53f af59 	bmi.w	802346a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80235b8:	3901      	subs	r1, #1
 80235ba:	4288      	cmp	r0, r1
 80235bc:	f6bf af55 	bge.w	802346a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80235c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80235c2:	fb01 5303 	mla	r3, r1, r3, r5
 80235c6:	141b      	asrs	r3, r3, #16
 80235c8:	f53f af4f 	bmi.w	802346a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80235cc:	3a01      	subs	r2, #1
 80235ce:	4293      	cmp	r3, r2
 80235d0:	f6bf af4b 	bge.w	802346a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80235d4:	9b06      	ldr	r3, [sp, #24]
 80235d6:	9309      	str	r3, [sp, #36]	; 0x24
 80235d8:	9b07      	ldr	r3, [sp, #28]
 80235da:	930b      	str	r3, [sp, #44]	; 0x2c
 80235dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235de:	2b00      	cmp	r3, #0
 80235e0:	dc70      	bgt.n	80236c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80235e2:	9b06      	ldr	r3, [sp, #24]
 80235e4:	9a07      	ldr	r2, [sp, #28]
 80235e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80235ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80235ee:	9307      	str	r3, [sp, #28]
 80235f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	f340 80eb 	ble.w	80237ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80235f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80235fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023602:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023606:	eef0 6a62 	vmov.f32	s13, s5
 802360a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802360e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023616:	ee16 ba90 	vmov	fp, s13
 802361a:	eef0 6a43 	vmov.f32	s13, s6
 802361e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023622:	ee16 5a90 	vmov	r5, s13
 8023626:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802362a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802362e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023632:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023636:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802363a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802363e:	ee12 2a90 	vmov	r2, s5
 8023642:	eef0 2a47 	vmov.f32	s5, s14
 8023646:	fb92 f3f3 	sdiv	r3, r2, r3
 802364a:	ee13 2a10 	vmov	r2, s6
 802364e:	931b      	str	r3, [sp, #108]	; 0x6c
 8023650:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023652:	eeb0 3a67 	vmov.f32	s6, s15
 8023656:	fb92 f3f3 	sdiv	r3, r2, r3
 802365a:	931c      	str	r3, [sp, #112]	; 0x70
 802365c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802365e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023660:	3b01      	subs	r3, #1
 8023662:	930a      	str	r3, [sp, #40]	; 0x28
 8023664:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023666:	bf08      	it	eq
 8023668:	4613      	moveq	r3, r2
 802366a:	9306      	str	r3, [sp, #24]
 802366c:	e6d3      	b.n	8023416 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802366e:	b149      	cbz	r1, 8023684 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023670:	5cba      	ldrb	r2, [r7, r2]
 8023672:	4660      	mov	r0, ip
 8023674:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023678:	4422      	add	r2, r4
 802367a:	4666      	mov	r6, ip
 802367c:	e734      	b.n	80234e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802367e:	4660      	mov	r0, ip
 8023680:	4662      	mov	r2, ip
 8023682:	e731      	b.n	80234e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8023684:	4660      	mov	r0, ip
 8023686:	4662      	mov	r2, ip
 8023688:	e7f7      	b.n	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802368a:	f110 0c01 	adds.w	ip, r0, #1
 802368e:	f53f af74 	bmi.w	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023692:	4562      	cmp	r2, ip
 8023694:	f6ff af71 	blt.w	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023698:	f116 0c01 	adds.w	ip, r6, #1
 802369c:	f53f af6d 	bmi.w	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80236a0:	4567      	cmp	r7, ip
 80236a2:	f6ff af6a 	blt.w	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80236a6:	b23f      	sxth	r7, r7
 80236a8:	b212      	sxth	r2, r2
 80236aa:	9701      	str	r7, [sp, #4]
 80236ac:	9200      	str	r2, [sp, #0]
 80236ae:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80236b2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80236b6:	4623      	mov	r3, r4
 80236b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80236ba:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80236be:	f7ff fde7 	bl	8023290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80236c2:	e75a      	b.n	802357a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80236c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80236c6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80236ca:	1428      	asrs	r0, r5, #16
 80236cc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80236d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80236d4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80236d8:	fb02 6000 	mla	r0, r2, r0, r6
 80236dc:	9e08      	ldr	r6, [sp, #32]
 80236de:	f816 8000 	ldrb.w	r8, [r6, r0]
 80236e2:	1837      	adds	r7, r6, r0
 80236e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80236e8:	eb04 0c08 	add.w	ip, r4, r8
 80236ec:	2b00      	cmp	r3, #0
 80236ee:	d060      	beq.n	80237b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80236f0:	787e      	ldrb	r6, [r7, #1]
 80236f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80236f6:	4426      	add	r6, r4
 80236f8:	2900      	cmp	r1, #0
 80236fa:	d062      	beq.n	80237c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80236fc:	18b8      	adds	r0, r7, r2
 80236fe:	5cba      	ldrb	r2, [r7, r2]
 8023700:	7840      	ldrb	r0, [r0, #1]
 8023702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802370a:	4422      	add	r2, r4
 802370c:	4420      	add	r0, r4
 802370e:	b29b      	uxth	r3, r3
 8023710:	78b7      	ldrb	r7, [r6, #2]
 8023712:	b289      	uxth	r1, r1
 8023714:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023718:	f89c c001 	ldrb.w	ip, [ip, #1]
 802371c:	fb03 f901 	mul.w	r9, r3, r1
 8023720:	011b      	lsls	r3, r3, #4
 8023722:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023726:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802372a:	eba3 0309 	sub.w	r3, r3, r9
 802372e:	b289      	uxth	r1, r1
 8023730:	b29b      	uxth	r3, r3
 8023732:	ebae 0e01 	sub.w	lr, lr, r1
 8023736:	435f      	muls	r7, r3
 8023738:	fa1f fe8e 	uxth.w	lr, lr
 802373c:	fb0e 770a 	mla	r7, lr, sl, r7
 8023740:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023744:	fb01 770a 	mla	r7, r1, sl, r7
 8023748:	f890 a002 	ldrb.w	sl, [r0, #2]
 802374c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023750:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023754:	f896 8000 	ldrb.w	r8, [r6]
 8023758:	7876      	ldrb	r6, [r6, #1]
 802375a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802375e:	fb03 f808 	mul.w	r8, r3, r8
 8023762:	4373      	muls	r3, r6
 8023764:	7856      	ldrb	r6, [r2, #1]
 8023766:	fb0e 8807 	mla	r8, lr, r7, r8
 802376a:	7817      	ldrb	r7, [r2, #0]
 802376c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023770:	fb01 8807 	mla	r8, r1, r7, r8
 8023774:	7807      	ldrb	r7, [r0, #0]
 8023776:	fb01 3306 	mla	r3, r1, r6, r3
 802377a:	fb09 8707 	mla	r7, r9, r7, r8
 802377e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023782:	ea47 070a 	orr.w	r7, r7, sl
 8023786:	f890 a001 	ldrb.w	sl, [r0, #1]
 802378a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023790:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023794:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023798:	ea47 070a 	orr.w	r7, r7, sl
 802379c:	f823 7b02 	strh.w	r7, [r3], #2
 80237a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80237a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80237a4:	449b      	add	fp, r3
 80237a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80237a8:	441d      	add	r5, r3
 80237aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237ac:	3b01      	subs	r3, #1
 80237ae:	9309      	str	r3, [sp, #36]	; 0x24
 80237b0:	e714      	b.n	80235dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80237b2:	b149      	cbz	r1, 80237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80237b4:	5cba      	ldrb	r2, [r7, r2]
 80237b6:	4660      	mov	r0, ip
 80237b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237bc:	4422      	add	r2, r4
 80237be:	4666      	mov	r6, ip
 80237c0:	e7a5      	b.n	802370e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80237c2:	4660      	mov	r0, ip
 80237c4:	4662      	mov	r2, ip
 80237c6:	e7a2      	b.n	802370e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80237c8:	4660      	mov	r0, ip
 80237ca:	4662      	mov	r2, ip
 80237cc:	e7f7      	b.n	80237be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80237ce:	b00f      	add	sp, #60	; 0x3c
 80237d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080237d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80237d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d8:	b085      	sub	sp, #20
 80237da:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80237de:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80237e2:	9102      	str	r1, [sp, #8]
 80237e4:	2c00      	cmp	r4, #0
 80237e6:	fb04 710c 	mla	r1, r4, ip, r7
 80237ea:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80237ee:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80237f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80237f6:	eb02 0e01 	add.w	lr, r2, r1
 80237fa:	f2c0 8122 	blt.w	8023a42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80237fe:	45a0      	cmp	r8, r4
 8023800:	f340 811f 	ble.w	8023a42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023804:	2f00      	cmp	r7, #0
 8023806:	f2c0 811a 	blt.w	8023a3e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802380a:	45bc      	cmp	ip, r7
 802380c:	f340 8117 	ble.w	8023a3e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023810:	5c52      	ldrb	r2, [r2, r1]
 8023812:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023816:	1c7a      	adds	r2, r7, #1
 8023818:	f100 8116 	bmi.w	8023a48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802381c:	4594      	cmp	ip, r2
 802381e:	f340 8113 	ble.w	8023a48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8023822:	2e00      	cmp	r6, #0
 8023824:	f000 8112 	beq.w	8023a4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8023828:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802382c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023830:	3401      	adds	r4, #1
 8023832:	f100 810f 	bmi.w	8023a54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023836:	45a0      	cmp	r8, r4
 8023838:	f340 810c 	ble.w	8023a54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802383c:	2800      	cmp	r0, #0
 802383e:	f000 810c 	beq.w	8023a5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8023842:	2f00      	cmp	r7, #0
 8023844:	f2c0 8104 	blt.w	8023a50 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8023848:	45bc      	cmp	ip, r7
 802384a:	f340 8101 	ble.w	8023a50 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802384e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8023852:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023856:	3701      	adds	r7, #1
 8023858:	f100 8102 	bmi.w	8023a60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802385c:	45bc      	cmp	ip, r7
 802385e:	f340 80ff 	ble.w	8023a60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8023862:	2e00      	cmp	r6, #0
 8023864:	f000 80fe 	beq.w	8023a64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8023868:	44f4      	add	ip, lr
 802386a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802386e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023872:	b2b6      	uxth	r6, r6
 8023874:	b280      	uxth	r0, r0
 8023876:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802387a:	fb00 fe06 	mul.w	lr, r0, r6
 802387e:	0136      	lsls	r6, r6, #4
 8023880:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023884:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023888:	eba6 070e 	sub.w	r7, r6, lr
 802388c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023890:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023894:	b280      	uxth	r0, r0
 8023896:	b2bf      	uxth	r7, r7
 8023898:	1a1b      	subs	r3, r3, r0
 802389a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802389e:	fb0a f607 	mul.w	r6, sl, r7
 80238a2:	b29b      	uxth	r3, r3
 80238a4:	fb0b 6603 	mla	r6, fp, r3, r6
 80238a8:	fb00 6609 	mla	r6, r0, r9, r6
 80238ac:	fb0e 6608 	mla	r6, lr, r8, r6
 80238b0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80238b4:	9600      	str	r6, [sp, #0]
 80238b6:	2e00      	cmp	r6, #0
 80238b8:	f000 80be 	beq.w	8023a38 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80238bc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80238c0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80238c4:	9e02      	ldr	r6, [sp, #8]
 80238c6:	fb0b fc0c 	mul.w	ip, fp, ip
 80238ca:	fb0b f505 	mul.w	r5, fp, r5
 80238ce:	8836      	ldrh	r6, [r6, #0]
 80238d0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80238d4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238d8:	9501      	str	r5, [sp, #4]
 80238da:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80238de:	44dc      	add	ip, fp
 80238e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238e4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80238e8:	9503      	str	r5, [sp, #12]
 80238ea:	9d01      	ldr	r5, [sp, #4]
 80238ec:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80238f0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80238f4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80238f8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80238fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8023900:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023904:	fb0a fa01 	mul.w	sl, sl, r1
 8023908:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802390c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023910:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023914:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023918:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802391c:	4465      	add	r5, ip
 802391e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023922:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023926:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802392a:	fb09 fc0c 	mul.w	ip, r9, ip
 802392e:	0a2d      	lsrs	r5, r5, #8
 8023930:	fb09 f904 	mul.w	r9, r9, r4
 8023934:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023938:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802393c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023940:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023944:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023948:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802394c:	437d      	muls	r5, r7
 802394e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023952:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023956:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802395a:	4461      	add	r1, ip
 802395c:	fb08 f404 	mul.w	r4, r8, r4
 8023960:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023964:	fb08 f802 	mul.w	r8, r8, r2
 8023968:	0a09      	lsrs	r1, r1, #8
 802396a:	0a22      	lsrs	r2, r4, #8
 802396c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023970:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023974:	fb07 f70a 	mul.w	r7, r7, sl
 8023978:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802397c:	4414      	add	r4, r2
 802397e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023982:	0a24      	lsrs	r4, r4, #8
 8023984:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023988:	9a03      	ldr	r2, [sp, #12]
 802398a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802398e:	fb02 5503 	mla	r5, r2, r3, r5
 8023992:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023996:	9a00      	ldr	r2, [sp, #0]
 8023998:	fb04 540e 	mla	r4, r4, lr, r5
 802399c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80239a0:	1235      	asrs	r5, r6, #8
 80239a2:	fb01 4100 	mla	r1, r1, r0, r4
 80239a6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80239aa:	0a09      	lsrs	r1, r1, #8
 80239ac:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80239b0:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80239b4:	fb03 7101 	mla	r1, r3, r1, r7
 80239b8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80239bc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80239c0:	fb00 e101 	mla	r1, r0, r1, lr
 80239c4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80239c8:	b287      	uxth	r7, r0
 80239ca:	0a09      	lsrs	r1, r1, #8
 80239cc:	437a      	muls	r2, r7
 80239ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80239d2:	1c53      	adds	r3, r2, #1
 80239d4:	4321      	orrs	r1, r4
 80239d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80239da:	0c0a      	lsrs	r2, r1, #16
 80239dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80239e0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80239e4:	b2c8      	uxtb	r0, r1
 80239e6:	fb12 f207 	smulbb	r2, r2, r7
 80239ea:	fb14 f407 	smulbb	r4, r4, r7
 80239ee:	b2db      	uxtb	r3, r3
 80239f0:	fb10 f007 	smulbb	r0, r0, r7
 80239f4:	fb05 2503 	mla	r5, r5, r3, r2
 80239f8:	10f2      	asrs	r2, r6, #3
 80239fa:	00f6      	lsls	r6, r6, #3
 80239fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023a00:	b2ad      	uxth	r5, r5
 8023a02:	b2f6      	uxtb	r6, r6
 8023a04:	fb02 4203 	mla	r2, r2, r3, r4
 8023a08:	fb06 0303 	mla	r3, r6, r3, r0
 8023a0c:	b294      	uxth	r4, r2
 8023a0e:	b299      	uxth	r1, r3
 8023a10:	1c6b      	adds	r3, r5, #1
 8023a12:	1c62      	adds	r2, r4, #1
 8023a14:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023a18:	1c4b      	adds	r3, r1, #1
 8023a1a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023a1e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023a22:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023a26:	0952      	lsrs	r2, r2, #5
 8023a28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023a2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a30:	432b      	orrs	r3, r5
 8023a32:	4313      	orrs	r3, r2
 8023a34:	9a02      	ldr	r2, [sp, #8]
 8023a36:	8013      	strh	r3, [r2, #0]
 8023a38:	b005      	add	sp, #20
 8023a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a3e:	2500      	movs	r5, #0
 8023a40:	e6e9      	b.n	8023816 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8023a42:	2100      	movs	r1, #0
 8023a44:	460d      	mov	r5, r1
 8023a46:	e6f3      	b.n	8023830 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023a48:	2100      	movs	r1, #0
 8023a4a:	e6f1      	b.n	8023830 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023a4c:	4631      	mov	r1, r6
 8023a4e:	e6ef      	b.n	8023830 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023a50:	2400      	movs	r4, #0
 8023a52:	e700      	b.n	8023856 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023a54:	2200      	movs	r2, #0
 8023a56:	4614      	mov	r4, r2
 8023a58:	e70b      	b.n	8023872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023a5a:	4602      	mov	r2, r0
 8023a5c:	4604      	mov	r4, r0
 8023a5e:	e708      	b.n	8023872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023a60:	2200      	movs	r2, #0
 8023a62:	e706      	b.n	8023872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023a64:	4632      	mov	r2, r6
 8023a66:	e704      	b.n	8023872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08023a68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a6c:	b09f      	sub	sp, #124	; 0x7c
 8023a6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a70:	9309      	str	r3, [sp, #36]	; 0x24
 8023a72:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023a74:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023a78:	901d      	str	r0, [sp, #116]	; 0x74
 8023a7a:	931c      	str	r3, [sp, #112]	; 0x70
 8023a7c:	6850      	ldr	r0, [r2, #4]
 8023a7e:	9119      	str	r1, [sp, #100]	; 0x64
 8023a80:	6812      	ldr	r2, [r2, #0]
 8023a82:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8023a84:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023a88:	fb00 1303 	mla	r3, r0, r3, r1
 8023a8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a90:	930c      	str	r3, [sp, #48]	; 0x30
 8023a92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a94:	681b      	ldr	r3, [r3, #0]
 8023a96:	9312      	str	r3, [sp, #72]	; 0x48
 8023a98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a9a:	685e      	ldr	r6, [r3, #4]
 8023a9c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8023aa0:	3604      	adds	r6, #4
 8023aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8023aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	dc03      	bgt.n	8023ab2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023aaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	f340 8387 	ble.w	80241c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023ab2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023ab4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ab8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023abc:	1e48      	subs	r0, r1, #1
 8023abe:	1e57      	subs	r7, r2, #1
 8023ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	f340 8194 	ble.w	8023df0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023ac8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023aca:	142b      	asrs	r3, r5, #16
 8023acc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023ad0:	d406      	bmi.n	8023ae0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023ad2:	4584      	cmp	ip, r0
 8023ad4:	da04      	bge.n	8023ae0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	db02      	blt.n	8023ae0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023ada:	42bb      	cmp	r3, r7
 8023adc:	f2c0 8189 	blt.w	8023df2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023ae0:	f11c 0c01 	adds.w	ip, ip, #1
 8023ae4:	f100 8177 	bmi.w	8023dd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023ae8:	4561      	cmp	r1, ip
 8023aea:	f2c0 8174 	blt.w	8023dd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023aee:	3301      	adds	r3, #1
 8023af0:	f100 8171 	bmi.w	8023dd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023af4:	429a      	cmp	r2, r3
 8023af6:	f2c0 816e 	blt.w	8023dd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023afc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023afe:	931a      	str	r3, [sp, #104]	; 0x68
 8023b00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	f340 8193 	ble.w	8023e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023b08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b0a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023b0e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023b12:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023b16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b18:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023b1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b1e:	141b      	asrs	r3, r3, #16
 8023b20:	f100 81d6 	bmi.w	8023ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023b24:	f100 38ff 	add.w	r8, r0, #4294967295
 8023b28:	4543      	cmp	r3, r8
 8023b2a:	f280 81d1 	bge.w	8023ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023b2e:	f1bc 0f00 	cmp.w	ip, #0
 8023b32:	f2c0 81cd 	blt.w	8023ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023b36:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b3a:	45c4      	cmp	ip, r8
 8023b3c:	f280 81c8 	bge.w	8023ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023b40:	b200      	sxth	r0, r0
 8023b42:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b44:	fb0c 3300 	mla	r3, ip, r0, r3
 8023b48:	eb04 0803 	add.w	r8, r4, r3
 8023b4c:	5ce3      	ldrb	r3, [r4, r3]
 8023b4e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023b52:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023b56:	2a00      	cmp	r2, #0
 8023b58:	f000 81af 	beq.w	8023eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023b5c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023b60:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023b64:	940e      	str	r4, [sp, #56]	; 0x38
 8023b66:	0e24      	lsrs	r4, r4, #24
 8023b68:	9415      	str	r4, [sp, #84]	; 0x54
 8023b6a:	b179      	cbz	r1, 8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023b6c:	eb08 0c00 	add.w	ip, r8, r0
 8023b70:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023b74:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023b78:	900a      	str	r0, [sp, #40]	; 0x28
 8023b7a:	0e00      	lsrs	r0, r0, #24
 8023b7c:	9013      	str	r0, [sp, #76]	; 0x4c
 8023b7e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023b82:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023b86:	900f      	str	r0, [sp, #60]	; 0x3c
 8023b88:	0e00      	lsrs	r0, r0, #24
 8023b8a:	9016      	str	r0, [sp, #88]	; 0x58
 8023b8c:	b292      	uxth	r2, r2
 8023b8e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023b90:	b289      	uxth	r1, r1
 8023b92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b94:	fb02 f901 	mul.w	r9, r2, r1
 8023b98:	0112      	lsls	r2, r2, #4
 8023b9a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023b9e:	eba2 0809 	sub.w	r8, r2, r9
 8023ba2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023ba6:	b289      	uxth	r1, r1
 8023ba8:	fa1f f888 	uxth.w	r8, r8
 8023bac:	1a52      	subs	r2, r2, r1
 8023bae:	fb08 f000 	mul.w	r0, r8, r0
 8023bb2:	b292      	uxth	r2, r2
 8023bb4:	fb02 000e 	mla	r0, r2, lr, r0
 8023bb8:	fb01 0004 	mla	r0, r1, r4, r0
 8023bbc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023bbe:	fb09 0004 	mla	r0, r9, r4, r0
 8023bc2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023bc6:	2800      	cmp	r0, #0
 8023bc8:	f000 80fa 	beq.w	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023bcc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023bd0:	d01b      	beq.n	8023c0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023bd2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023bda:	fb0e fa0a 	mul.w	sl, lr, sl
 8023bde:	fb0e fe03 	mul.w	lr, lr, r3
 8023be2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023be6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023bee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023bf2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023bf6:	4453      	add	r3, sl
 8023bf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bfc:	0a1b      	lsrs	r3, r3, #8
 8023bfe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c06:	ea43 030c 	orr.w	r3, r3, ip
 8023c0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c0c:	2cff      	cmp	r4, #255	; 0xff
 8023c0e:	d021      	beq.n	8023c54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023c10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c18:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023c24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c38:	44de      	add	lr, fp
 8023c3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c4e:	ea4e 040a 	orr.w	r4, lr, sl
 8023c52:	940e      	str	r4, [sp, #56]	; 0x38
 8023c54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c56:	2cff      	cmp	r4, #255	; 0xff
 8023c58:	d021      	beq.n	8023c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023c5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c5c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c62:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c76:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c82:	44de      	add	lr, fp
 8023c84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c98:	ea4e 040a 	orr.w	r4, lr, sl
 8023c9c:	940a      	str	r4, [sp, #40]	; 0x28
 8023c9e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ca0:	2cff      	cmp	r4, #255	; 0xff
 8023ca2:	d021      	beq.n	8023ce8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023ca4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ca6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023caa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023cac:	fb04 fb0b 	mul.w	fp, r4, fp
 8023cb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023cb2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023cb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023cb8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8023cc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cc8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ccc:	44de      	add	lr, fp
 8023cce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ce2:	ea4e 040a 	orr.w	r4, lr, sl
 8023ce6:	940f      	str	r4, [sp, #60]	; 0x3c
 8023ce8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023cea:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023cf2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023cf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023cf8:	fb08 fc0c 	mul.w	ip, r8, ip
 8023cfc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023d00:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023d04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023d06:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d0a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023d0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d10:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023d14:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023d18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023d1a:	fb08 f80e 	mul.w	r8, r8, lr
 8023d1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d22:	fb02 8303 	mla	r3, r2, r3, r8
 8023d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d2c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023d32:	fb01 330a 	mla	r3, r1, sl, r3
 8023d36:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023d3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023d3c:	fb09 3901 	mla	r9, r9, r1, r3
 8023d40:	883b      	ldrh	r3, [r7, #0]
 8023d42:	4342      	muls	r2, r0
 8023d44:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d48:	1c50      	adds	r0, r2, #1
 8023d4a:	1219      	asrs	r1, r3, #8
 8023d4c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d50:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023d54:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023d58:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d5c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023d60:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023d64:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023d68:	b2c0      	uxtb	r0, r0
 8023d6a:	fb12 f204 	smulbb	r2, r2, r4
 8023d6e:	fa5f fc8c 	uxtb.w	ip, ip
 8023d72:	fb1e fe04 	smulbb	lr, lr, r4
 8023d76:	fb01 2100 	mla	r1, r1, r0, r2
 8023d7a:	10da      	asrs	r2, r3, #3
 8023d7c:	fb1c fc04 	smulbb	ip, ip, r4
 8023d80:	00db      	lsls	r3, r3, #3
 8023d82:	b289      	uxth	r1, r1
 8023d84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023d88:	b2db      	uxtb	r3, r3
 8023d8a:	fb02 e200 	mla	r2, r2, r0, lr
 8023d8e:	fb03 c300 	mla	r3, r3, r0, ip
 8023d92:	b292      	uxth	r2, r2
 8023d94:	fa1f fc83 	uxth.w	ip, r3
 8023d98:	1c4b      	adds	r3, r1, #1
 8023d9a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023d9e:	f10c 0301 	add.w	r3, ip, #1
 8023da2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023da6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023daa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023dae:	430b      	orrs	r3, r1
 8023db0:	1c51      	adds	r1, r2, #1
 8023db2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023db6:	0952      	lsrs	r2, r2, #5
 8023db8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023dbc:	4313      	orrs	r3, r2
 8023dbe:	803b      	strh	r3, [r7, #0]
 8023dc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023dc2:	3702      	adds	r7, #2
 8023dc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023dc6:	441a      	add	r2, r3
 8023dc8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023dca:	441d      	add	r5, r3
 8023dcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023dce:	9229      	str	r2, [sp, #164]	; 0xa4
 8023dd0:	3b01      	subs	r3, #1
 8023dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8023dd4:	e694      	b.n	8023b00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023dd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023dd8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023dda:	441c      	add	r4, r3
 8023ddc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023dde:	441d      	add	r5, r3
 8023de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023de2:	9429      	str	r4, [sp, #164]	; 0xa4
 8023de4:	3b01      	subs	r3, #1
 8023de6:	9309      	str	r3, [sp, #36]	; 0x24
 8023de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023dea:	3302      	adds	r3, #2
 8023dec:	930c      	str	r3, [sp, #48]	; 0x30
 8023dee:	e667      	b.n	8023ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023df0:	d024      	beq.n	8023e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023df4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023df6:	3b01      	subs	r3, #1
 8023df8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023dfa:	fb00 4003 	mla	r0, r0, r3, r4
 8023dfe:	1400      	asrs	r0, r0, #16
 8023e00:	f53f ae7b 	bmi.w	8023afa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e04:	3901      	subs	r1, #1
 8023e06:	4288      	cmp	r0, r1
 8023e08:	f6bf ae77 	bge.w	8023afa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e0c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023e0e:	fb01 5303 	mla	r3, r1, r3, r5
 8023e12:	141b      	asrs	r3, r3, #16
 8023e14:	f53f ae71 	bmi.w	8023afa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e18:	3a01      	subs	r2, #1
 8023e1a:	4293      	cmp	r3, r2
 8023e1c:	f6bf ae6d 	bge.w	8023afa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e20:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023e24:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8023e28:	f1bb 0f00 	cmp.w	fp, #0
 8023e2c:	dc70      	bgt.n	8023f10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e36:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8023e3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	f340 81be 	ble.w	80241c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e52:	eef0 6a62 	vmov.f32	s13, s5
 8023e56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e62:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023e66:	eef0 6a43 	vmov.f32	s13, s6
 8023e6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e6e:	ee16 5a90 	vmov	r5, s13
 8023e72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e8a:	ee12 2a90 	vmov	r2, s5
 8023e8e:	eef0 2a47 	vmov.f32	s5, s14
 8023e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e96:	ee13 2a10 	vmov	r2, s6
 8023e9a:	932b      	str	r3, [sp, #172]	; 0xac
 8023e9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e9e:	eeb0 3a67 	vmov.f32	s6, s15
 8023ea2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ea6:	932c      	str	r3, [sp, #176]	; 0xb0
 8023ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023eaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023eac:	3b01      	subs	r3, #1
 8023eae:	9319      	str	r3, [sp, #100]	; 0x64
 8023eb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023eb2:	bf08      	it	eq
 8023eb4:	4613      	moveq	r3, r2
 8023eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8023eb8:	e5f4      	b.n	8023aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023eba:	2900      	cmp	r1, #0
 8023ebc:	f43f ae66 	beq.w	8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023ec0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023ec4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023ec8:	900a      	str	r0, [sp, #40]	; 0x28
 8023eca:	0e00      	lsrs	r0, r0, #24
 8023ecc:	9013      	str	r0, [sp, #76]	; 0x4c
 8023ece:	e65d      	b.n	8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023ed0:	f113 0801 	adds.w	r8, r3, #1
 8023ed4:	f53f af74 	bmi.w	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ed8:	4540      	cmp	r0, r8
 8023eda:	f6ff af71 	blt.w	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ede:	f11c 0801 	adds.w	r8, ip, #1
 8023ee2:	f53f af6d 	bmi.w	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ee6:	45c6      	cmp	lr, r8
 8023ee8:	f6ff af6a 	blt.w	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023eec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023eee:	b200      	sxth	r0, r0
 8023ef0:	9302      	str	r3, [sp, #8]
 8023ef2:	fa0f f38e 	sxth.w	r3, lr
 8023ef6:	9000      	str	r0, [sp, #0]
 8023ef8:	9301      	str	r3, [sp, #4]
 8023efa:	4633      	mov	r3, r6
 8023efc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023efe:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023f02:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023f06:	4639      	mov	r1, r7
 8023f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023f0a:	f7ff fc63 	bl	80237d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023f0e:	e757      	b.n	8023dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023f10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023f12:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023f16:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023f18:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023f1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023f1e:	1427      	asrs	r7, r4, #16
 8023f20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023f22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f26:	142b      	asrs	r3, r5, #16
 8023f28:	fb01 7303 	mla	r3, r1, r3, r7
 8023f2c:	18e7      	adds	r7, r4, r3
 8023f2e:	5ce3      	ldrb	r3, [r4, r3]
 8023f30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023f34:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023f38:	2a00      	cmp	r2, #0
 8023f3a:	f000 8137 	beq.w	80241ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8023f3e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023f42:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023f46:	9410      	str	r4, [sp, #64]	; 0x40
 8023f48:	0e24      	lsrs	r4, r4, #24
 8023f4a:	9417      	str	r4, [sp, #92]	; 0x5c
 8023f4c:	b170      	cbz	r0, 8023f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023f4e:	eb07 0e01 	add.w	lr, r7, r1
 8023f52:	5c79      	ldrb	r1, [r7, r1]
 8023f54:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f58:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f5a:	0e09      	lsrs	r1, r1, #24
 8023f5c:	9114      	str	r1, [sp, #80]	; 0x50
 8023f5e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023f62:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f66:	9111      	str	r1, [sp, #68]	; 0x44
 8023f68:	0e09      	lsrs	r1, r1, #24
 8023f6a:	9118      	str	r1, [sp, #96]	; 0x60
 8023f6c:	b292      	uxth	r2, r2
 8023f6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023f70:	b280      	uxth	r0, r0
 8023f72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f74:	fb02 f800 	mul.w	r8, r2, r0
 8023f78:	0112      	lsls	r2, r2, #4
 8023f7a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023f7e:	eba2 0e08 	sub.w	lr, r2, r8
 8023f82:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f86:	b280      	uxth	r0, r0
 8023f88:	fa1f fe8e 	uxth.w	lr, lr
 8023f8c:	1a12      	subs	r2, r2, r0
 8023f8e:	fb0e f101 	mul.w	r1, lr, r1
 8023f92:	b292      	uxth	r2, r2
 8023f94:	fb02 110c 	mla	r1, r2, ip, r1
 8023f98:	fb00 1104 	mla	r1, r0, r4, r1
 8023f9c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023f9e:	fb08 1104 	mla	r1, r8, r4, r1
 8023fa2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023fa6:	2900      	cmp	r1, #0
 8023fa8:	f000 80f5 	beq.w	8024196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023fac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023fb0:	d019      	beq.n	8023fe6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023fb2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023fb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fba:	fb0c fa0a 	mul.w	sl, ip, sl
 8023fbe:	fb0c fc03 	mul.w	ip, ip, r3
 8023fc2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023fc6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023fca:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023fce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fd2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023fd6:	4453      	add	r3, sl
 8023fd8:	0a3f      	lsrs	r7, r7, #8
 8023fda:	0a1b      	lsrs	r3, r3, #8
 8023fdc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023fe0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023fe4:	433b      	orrs	r3, r7
 8023fe6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023fe8:	2cff      	cmp	r4, #255	; 0xff
 8023fea:	d020      	beq.n	802402e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023fec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023fee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ff2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023ff4:	4367      	muls	r7, r4
 8023ff6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023ff8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ffc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024000:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024002:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024006:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802400a:	fb04 fa0a 	mul.w	sl, r4, sl
 802400e:	44bc      	add	ip, r7
 8024010:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024014:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024018:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802401c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024020:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024024:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024028:	ea4c 040a 	orr.w	r4, ip, sl
 802402c:	9410      	str	r4, [sp, #64]	; 0x40
 802402e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024030:	2cff      	cmp	r4, #255	; 0xff
 8024032:	d020      	beq.n	8024076 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024034:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024036:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802403a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802403c:	4367      	muls	r7, r4
 802403e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024040:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024044:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024048:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802404a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802404e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024052:	fb04 fa0a 	mul.w	sl, r4, sl
 8024056:	44bc      	add	ip, r7
 8024058:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802405c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024060:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024064:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024068:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802406c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024070:	ea4c 040a 	orr.w	r4, ip, sl
 8024074:	940b      	str	r4, [sp, #44]	; 0x2c
 8024076:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024078:	2cff      	cmp	r4, #255	; 0xff
 802407a:	d020      	beq.n	80240be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802407c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802407e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024082:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024084:	4367      	muls	r7, r4
 8024086:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024088:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802408c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024090:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024092:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024096:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802409a:	fb04 fa0a 	mul.w	sl, r4, sl
 802409e:	44bc      	add	ip, r7
 80240a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240b8:	ea4c 040a 	orr.w	r4, ip, sl
 80240bc:	9411      	str	r4, [sp, #68]	; 0x44
 80240be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80240c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80240cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80240ce:	fb0e f707 	mul.w	r7, lr, r7
 80240d2:	fb02 770c 	mla	r7, r2, ip, r7
 80240d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80240da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80240dc:	fb00 770c 	mla	r7, r0, ip, r7
 80240e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80240e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240e6:	fb08 770c 	mla	r7, r8, ip, r7
 80240ea:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80240ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80240f0:	fb0e fe0c 	mul.w	lr, lr, ip
 80240f4:	0a3f      	lsrs	r7, r7, #8
 80240f6:	fb02 e303 	mla	r3, r2, r3, lr
 80240fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80240fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024100:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024104:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024106:	fb00 330a 	mla	r3, r0, sl, r3
 802410a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802410e:	f8b9 0000 	ldrh.w	r0, [r9]
 8024112:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024118:	1202      	asrs	r2, r0, #8
 802411a:	434b      	muls	r3, r1
 802411c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024120:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024124:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024128:	1c59      	adds	r1, r3, #1
 802412a:	ea47 070c 	orr.w	r7, r7, ip
 802412e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024132:	0c3b      	lsrs	r3, r7, #16
 8024134:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024138:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802413c:	b2ff      	uxtb	r7, r7
 802413e:	fb13 f304 	smulbb	r3, r3, r4
 8024142:	b2c9      	uxtb	r1, r1
 8024144:	fb1c fc04 	smulbb	ip, ip, r4
 8024148:	fb02 3201 	mla	r2, r2, r1, r3
 802414c:	10c3      	asrs	r3, r0, #3
 802414e:	fb17 f704 	smulbb	r7, r7, r4
 8024152:	00c0      	lsls	r0, r0, #3
 8024154:	b292      	uxth	r2, r2
 8024156:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802415a:	b2c0      	uxtb	r0, r0
 802415c:	fb03 c301 	mla	r3, r3, r1, ip
 8024160:	f102 0c01 	add.w	ip, r2, #1
 8024164:	fb00 7001 	mla	r0, r0, r1, r7
 8024168:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802416c:	b280      	uxth	r0, r0
 802416e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024172:	b29b      	uxth	r3, r3
 8024174:	1c42      	adds	r2, r0, #1
 8024176:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802417a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802417e:	ea42 020c 	orr.w	r2, r2, ip
 8024182:	f103 0c01 	add.w	ip, r3, #1
 8024186:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802418a:	095b      	lsrs	r3, r3, #5
 802418c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024190:	431a      	orrs	r2, r3
 8024192:	f8a9 2000 	strh.w	r2, [r9]
 8024196:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024198:	f109 0902 	add.w	r9, r9, #2
 802419c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802419e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241a2:	441a      	add	r2, r3
 80241a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80241a6:	9229      	str	r2, [sp, #164]	; 0xa4
 80241a8:	441d      	add	r5, r3
 80241aa:	e63d      	b.n	8023e28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80241ac:	2800      	cmp	r0, #0
 80241ae:	f43f aedd 	beq.w	8023f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80241b2:	5c79      	ldrb	r1, [r7, r1]
 80241b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80241ba:	0e09      	lsrs	r1, r1, #24
 80241bc:	9114      	str	r1, [sp, #80]	; 0x50
 80241be:	e6d5      	b.n	8023f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80241c0:	b01f      	add	sp, #124	; 0x7c
 80241c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80241c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ca:	b089      	sub	sp, #36	; 0x24
 80241cc:	9101      	str	r1, [sp, #4]
 80241ce:	9801      	ldr	r0, [sp, #4]
 80241d0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80241d4:	8800      	ldrh	r0, [r0, #0]
 80241d6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80241da:	1206      	asrs	r6, r0, #8
 80241dc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80241e0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80241e4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80241e8:	9602      	str	r6, [sp, #8]
 80241ea:	10c6      	asrs	r6, r0, #3
 80241ec:	00c0      	lsls	r0, r0, #3
 80241ee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80241f2:	b2c0      	uxtb	r0, r0
 80241f4:	9603      	str	r6, [sp, #12]
 80241f6:	9004      	str	r0, [sp, #16]
 80241f8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80241fc:	fb07 100c 	mla	r0, r7, ip, r1
 8024200:	2f00      	cmp	r7, #0
 8024202:	eb02 0e00 	add.w	lr, r2, r0
 8024206:	f2c0 810a 	blt.w	802441e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802420a:	45b8      	cmp	r8, r7
 802420c:	f340 8107 	ble.w	802441e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024210:	2900      	cmp	r1, #0
 8024212:	f2c0 8102 	blt.w	802441a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024216:	458c      	cmp	ip, r1
 8024218:	f340 80ff 	ble.w	802441a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802421c:	5c12      	ldrb	r2, [r2, r0]
 802421e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024222:	1c4a      	adds	r2, r1, #1
 8024224:	f100 80fe 	bmi.w	8024424 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024228:	4594      	cmp	ip, r2
 802422a:	f340 80fb 	ble.w	8024424 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802422e:	2d00      	cmp	r5, #0
 8024230:	f000 80fa 	beq.w	8024428 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024234:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024238:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802423c:	3701      	adds	r7, #1
 802423e:	f100 80f7 	bmi.w	8024430 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024242:	45b8      	cmp	r8, r7
 8024244:	f340 80f4 	ble.w	8024430 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024248:	2c00      	cmp	r4, #0
 802424a:	f000 80f4 	beq.w	8024436 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802424e:	2900      	cmp	r1, #0
 8024250:	eb0e 020c 	add.w	r2, lr, ip
 8024254:	f2c0 80ea 	blt.w	802442c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024258:	458c      	cmp	ip, r1
 802425a:	f340 80e7 	ble.w	802442c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802425e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024262:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024266:	3101      	adds	r1, #1
 8024268:	f100 80e8 	bmi.w	802443c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802426c:	458c      	cmp	ip, r1
 802426e:	f340 80e5 	ble.w	802443c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024272:	2d00      	cmp	r5, #0
 8024274:	f000 80e4 	beq.w	8024440 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024278:	7852      	ldrb	r2, [r2, #1]
 802427a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802427e:	0e0b      	lsrs	r3, r1, #24
 8024280:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024284:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024288:	9300      	str	r3, [sp, #0]
 802428a:	b2a4      	uxth	r4, r4
 802428c:	b2ab      	uxth	r3, r5
 802428e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024292:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024296:	fb03 f904 	mul.w	r9, r3, r4
 802429a:	011b      	lsls	r3, r3, #4
 802429c:	fb0a f505 	mul.w	r5, sl, r5
 80242a0:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80242a4:	eba3 0e09 	sub.w	lr, r3, r9
 80242a8:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80242ac:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80242b0:	0a28      	lsrs	r0, r5, #8
 80242b2:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80242b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80242ba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80242be:	fb0a f303 	mul.w	r3, sl, r3
 80242c2:	fb08 f707 	mul.w	r7, r8, r7
 80242c6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80242ca:	4405      	add	r5, r0
 80242cc:	fb08 fc0c 	mul.w	ip, r8, ip
 80242d0:	b2a4      	uxth	r4, r4
 80242d2:	0a2d      	lsrs	r5, r5, #8
 80242d4:	fa1f fe8e 	uxth.w	lr, lr
 80242d8:	1b12      	subs	r2, r2, r4
 80242da:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80242de:	b292      	uxth	r2, r2
 80242e0:	9005      	str	r0, [sp, #20]
 80242e2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80242e6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80242ea:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80242ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80242f2:	0a1b      	lsrs	r3, r3, #8
 80242f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80242f8:	9306      	str	r3, [sp, #24]
 80242fa:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80242fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024302:	4460      	add	r0, ip
 8024304:	fb0b f303 	mul.w	r3, fp, r3
 8024308:	fb0b f606 	mul.w	r6, fp, r6
 802430c:	0a00      	lsrs	r0, r0, #8
 802430e:	0a1d      	lsrs	r5, r3, #8
 8024310:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024314:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024318:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802431c:	441d      	add	r5, r3
 802431e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024322:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024326:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802432a:	0a2d      	lsrs	r5, r5, #8
 802432c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024330:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024334:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024338:	0a36      	lsrs	r6, r6, #8
 802433a:	0a1b      	lsrs	r3, r3, #8
 802433c:	fb05 f50e 	mul.w	r5, r5, lr
 8024340:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024344:	9307      	str	r3, [sp, #28]
 8024346:	0e0b      	lsrs	r3, r1, #24
 8024348:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802434c:	fb0e f606 	mul.w	r6, lr, r6
 8024350:	435f      	muls	r7, r3
 8024352:	4359      	muls	r1, r3
 8024354:	9b05      	ldr	r3, [sp, #20]
 8024356:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802435a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802435e:	fb03 5502 	mla	r5, r3, r2, r5
 8024362:	9b06      	ldr	r3, [sp, #24]
 8024364:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024368:	fb0e fe0b 	mul.w	lr, lr, fp
 802436c:	44bc      	add	ip, r7
 802436e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8024372:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024376:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802437a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802437e:	0a09      	lsrs	r1, r1, #8
 8024380:	fb0c 5509 	mla	r5, ip, r9, r5
 8024384:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024388:	fb00 5504 	mla	r5, r0, r4, r5
 802438c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024390:	9b07      	ldr	r3, [sp, #28]
 8024392:	fb02 6000 	mla	r0, r2, r0, r6
 8024396:	0a2d      	lsrs	r5, r5, #8
 8024398:	fb02 e20a 	mla	r2, r2, sl, lr
 802439c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243a0:	fb09 0001 	mla	r0, r9, r1, r0
 80243a4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80243a8:	fb04 0003 	mla	r0, r4, r3, r0
 80243ac:	9b00      	ldr	r3, [sp, #0]
 80243ae:	fb04 2408 	mla	r4, r4, r8, r2
 80243b2:	9a04      	ldr	r2, [sp, #16]
 80243b4:	0a00      	lsrs	r0, r0, #8
 80243b6:	fb09 4903 	mla	r9, r9, r3, r4
 80243ba:	9b02      	ldr	r3, [sp, #8]
 80243bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80243c0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80243c4:	4305      	orrs	r5, r0
 80243c6:	fa5f f989 	uxtb.w	r9, r9
 80243ca:	fb03 f109 	mul.w	r1, r3, r9
 80243ce:	9b03      	ldr	r3, [sp, #12]
 80243d0:	fb03 f309 	mul.w	r3, r3, r9
 80243d4:	fb02 f909 	mul.w	r9, r2, r9
 80243d8:	1c4a      	adds	r2, r1, #1
 80243da:	1c58      	adds	r0, r3, #1
 80243dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80243e0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80243e4:	0c2a      	lsrs	r2, r5, #16
 80243e6:	0a2b      	lsrs	r3, r5, #8
 80243e8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80243ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80243f0:	0212      	lsls	r2, r2, #8
 80243f2:	00db      	lsls	r3, r3, #3
 80243f4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80243f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80243fc:	4313      	orrs	r3, r2
 80243fe:	f109 0201 	add.w	r2, r9, #1
 8024402:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024406:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802440a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802440e:	431d      	orrs	r5, r3
 8024410:	9b01      	ldr	r3, [sp, #4]
 8024412:	801d      	strh	r5, [r3, #0]
 8024414:	b009      	add	sp, #36	; 0x24
 8024416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802441a:	2000      	movs	r0, #0
 802441c:	e701      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802441e:	2600      	movs	r6, #0
 8024420:	4630      	mov	r0, r6
 8024422:	e70b      	b.n	802423c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024424:	2600      	movs	r6, #0
 8024426:	e709      	b.n	802423c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024428:	462e      	mov	r6, r5
 802442a:	e707      	b.n	802423c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802442c:	2700      	movs	r7, #0
 802442e:	e71a      	b.n	8024266 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024430:	2100      	movs	r1, #0
 8024432:	460f      	mov	r7, r1
 8024434:	e723      	b.n	802427e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024436:	4621      	mov	r1, r4
 8024438:	4627      	mov	r7, r4
 802443a:	e720      	b.n	802427e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802443c:	2100      	movs	r1, #0
 802443e:	e71e      	b.n	802427e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024440:	4629      	mov	r1, r5
 8024442:	e71c      	b.n	802427e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024444 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024448:	b09b      	sub	sp, #108	; 0x6c
 802444a:	9218      	str	r2, [sp, #96]	; 0x60
 802444c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802444e:	9019      	str	r0, [sp, #100]	; 0x64
 8024450:	9116      	str	r1, [sp, #88]	; 0x58
 8024452:	6850      	ldr	r0, [r2, #4]
 8024454:	9307      	str	r3, [sp, #28]
 8024456:	6812      	ldr	r2, [r2, #0]
 8024458:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802445a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802445e:	fb00 1303 	mla	r3, r0, r3, r1
 8024462:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024466:	930a      	str	r3, [sp, #40]	; 0x28
 8024468:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	930f      	str	r3, [sp, #60]	; 0x3c
 802446e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024470:	685e      	ldr	r6, [r3, #4]
 8024472:	3604      	adds	r6, #4
 8024474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024476:	2b00      	cmp	r3, #0
 8024478:	dc03      	bgt.n	8024482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802447a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802447c:	2b00      	cmp	r3, #0
 802447e:	f340 8373 	ble.w	8024b68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024484:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024488:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802448c:	1e48      	subs	r0, r1, #1
 802448e:	1e57      	subs	r7, r2, #1
 8024490:	9b07      	ldr	r3, [sp, #28]
 8024492:	2b00      	cmp	r3, #0
 8024494:	f340 818f 	ble.w	80247b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024498:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802449a:	142b      	asrs	r3, r5, #16
 802449c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80244a0:	d406      	bmi.n	80244b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80244a2:	4584      	cmp	ip, r0
 80244a4:	da04      	bge.n	80244b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	db02      	blt.n	80244b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80244aa:	42bb      	cmp	r3, r7
 80244ac:	f2c0 8184 	blt.w	80247b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80244b0:	f11c 0c01 	adds.w	ip, ip, #1
 80244b4:	f100 8172 	bmi.w	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80244b8:	4561      	cmp	r1, ip
 80244ba:	f2c0 816f 	blt.w	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80244be:	3301      	adds	r3, #1
 80244c0:	f100 816c 	bmi.w	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80244c4:	429a      	cmp	r2, r3
 80244c6:	f2c0 8169 	blt.w	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80244ca:	9b07      	ldr	r3, [sp, #28]
 80244cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80244ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80244d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	f340 818e 	ble.w	80247f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80244d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80244da:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80244de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80244e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80244e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244e8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80244ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80244ee:	141b      	asrs	r3, r3, #16
 80244f0:	f100 81d1 	bmi.w	8024896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80244f4:	f101 38ff 	add.w	r8, r1, #4294967295
 80244f8:	4543      	cmp	r3, r8
 80244fa:	f280 81cc 	bge.w	8024896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80244fe:	f1bc 0f00 	cmp.w	ip, #0
 8024502:	f2c0 81c8 	blt.w	8024896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024506:	f10e 38ff 	add.w	r8, lr, #4294967295
 802450a:	45c4      	cmp	ip, r8
 802450c:	f280 81c3 	bge.w	8024896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024510:	b209      	sxth	r1, r1
 8024512:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024514:	fb0c 3301 	mla	r3, ip, r1, r3
 8024518:	eb04 0803 	add.w	r8, r4, r3
 802451c:	5ce3      	ldrb	r3, [r4, r3]
 802451e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024522:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024526:	2a00      	cmp	r2, #0
 8024528:	f000 81aa 	beq.w	8024880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802452c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024530:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024534:	940b      	str	r4, [sp, #44]	; 0x2c
 8024536:	0e24      	lsrs	r4, r4, #24
 8024538:	9412      	str	r4, [sp, #72]	; 0x48
 802453a:	b178      	cbz	r0, 802455c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802453c:	eb08 0c01 	add.w	ip, r8, r1
 8024540:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024544:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024548:	9108      	str	r1, [sp, #32]
 802454a:	0e09      	lsrs	r1, r1, #24
 802454c:	9110      	str	r1, [sp, #64]	; 0x40
 802454e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024552:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024556:	910c      	str	r1, [sp, #48]	; 0x30
 8024558:	0e09      	lsrs	r1, r1, #24
 802455a:	9113      	str	r1, [sp, #76]	; 0x4c
 802455c:	b292      	uxth	r2, r2
 802455e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024560:	b280      	uxth	r0, r0
 8024562:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024564:	fb02 f900 	mul.w	r9, r2, r0
 8024568:	0112      	lsls	r2, r2, #4
 802456a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802456e:	eba2 0809 	sub.w	r8, r2, r9
 8024572:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024576:	b280      	uxth	r0, r0
 8024578:	fa1f f888 	uxth.w	r8, r8
 802457c:	1a12      	subs	r2, r2, r0
 802457e:	fb08 f101 	mul.w	r1, r8, r1
 8024582:	b292      	uxth	r2, r2
 8024584:	fb02 110e 	mla	r1, r2, lr, r1
 8024588:	fb00 1104 	mla	r1, r0, r4, r1
 802458c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802458e:	fb09 1104 	mla	r1, r9, r4, r1
 8024592:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024596:	2900      	cmp	r1, #0
 8024598:	f000 80f5 	beq.w	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802459c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80245a0:	d01b      	beq.n	80245da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80245a2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80245a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80245ae:	fb0e fe03 	mul.w	lr, lr, r3
 80245b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80245b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80245ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80245be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80245c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80245c6:	4453      	add	r3, sl
 80245c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245cc:	0a1b      	lsrs	r3, r3, #8
 80245ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80245d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80245d6:	ea43 030c 	orr.w	r3, r3, ip
 80245da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80245dc:	2cff      	cmp	r4, #255	; 0xff
 80245de:	d021      	beq.n	8024624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80245e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245e2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80245e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80245e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80245ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80245f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80245f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8024600:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024604:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024608:	44de      	add	lr, fp
 802460a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802460e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024612:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024616:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802461a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802461e:	ea4e 040a 	orr.w	r4, lr, sl
 8024622:	940b      	str	r4, [sp, #44]	; 0x2c
 8024624:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024626:	2cff      	cmp	r4, #255	; 0xff
 8024628:	d021      	beq.n	802466e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802462a:	9c08      	ldr	r4, [sp, #32]
 802462c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024630:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024632:	fb04 fb0b 	mul.w	fp, r4, fp
 8024636:	9c08      	ldr	r4, [sp, #32]
 8024638:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802463c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802463e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024642:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024646:	fb04 fa0a 	mul.w	sl, r4, sl
 802464a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802464e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024652:	44de      	add	lr, fp
 8024654:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024658:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802465c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024660:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024664:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024668:	ea4e 040a 	orr.w	r4, lr, sl
 802466c:	9408      	str	r4, [sp, #32]
 802466e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024670:	2cff      	cmp	r4, #255	; 0xff
 8024672:	d021      	beq.n	80246b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024674:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024676:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802467a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802467c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024680:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024682:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024686:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024688:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802468c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024690:	fb04 fa0a 	mul.w	sl, r4, sl
 8024694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024698:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802469c:	44de      	add	lr, fp
 802469e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246b2:	ea4e 040a 	orr.w	r4, lr, sl
 80246b6:	940c      	str	r4, [sp, #48]	; 0x30
 80246b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80246ba:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80246be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80246c2:	43c9      	mvns	r1, r1
 80246c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80246c8:	9c08      	ldr	r4, [sp, #32]
 80246ca:	fb08 fc0c 	mul.w	ip, r8, ip
 80246ce:	fb02 cc0e 	mla	ip, r2, lr, ip
 80246d2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80246d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80246d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80246dc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80246e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80246e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80246e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80246ea:	fb08 f80e 	mul.w	r8, r8, lr
 80246ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246f2:	fa5f fe81 	uxtb.w	lr, r1
 80246f6:	fb02 8303 	mla	r3, r2, r3, r8
 80246fa:	9a08      	ldr	r2, [sp, #32]
 80246fc:	f8b7 8000 	ldrh.w	r8, [r7]
 8024700:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024704:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802470a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802470e:	fb00 330a 	mla	r3, r0, sl, r3
 8024712:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024716:	ea4f 2228 	mov.w	r2, r8, asr #8
 802471a:	fb09 3900 	mla	r9, r9, r0, r3
 802471e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8024722:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024726:	b2c9      	uxtb	r1, r1
 8024728:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802472c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024730:	fb02 f20e 	mul.w	r2, r2, lr
 8024734:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024738:	fb00 f00e 	mul.w	r0, r0, lr
 802473c:	1c53      	adds	r3, r2, #1
 802473e:	fb01 f10e 	mul.w	r1, r1, lr
 8024742:	ea4c 0c09 	orr.w	ip, ip, r9
 8024746:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802474a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802474e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024752:	4a60      	ldr	r2, [pc, #384]	; (80248d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8024754:	b2db      	uxtb	r3, r3
 8024756:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802475a:	1c43      	adds	r3, r0, #1
 802475c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024760:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024764:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024768:	00db      	lsls	r3, r3, #3
 802476a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802476e:	4313      	orrs	r3, r2
 8024770:	1c4a      	adds	r2, r1, #1
 8024772:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024776:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802477a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802477e:	ea4c 0c03 	orr.w	ip, ip, r3
 8024782:	f8a7 c000 	strh.w	ip, [r7]
 8024786:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024788:	3702      	adds	r7, #2
 802478a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802478c:	441a      	add	r2, r3
 802478e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024790:	441d      	add	r5, r3
 8024792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024794:	9225      	str	r2, [sp, #148]	; 0x94
 8024796:	3b01      	subs	r3, #1
 8024798:	9317      	str	r3, [sp, #92]	; 0x5c
 802479a:	e699      	b.n	80244d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802479c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802479e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80247a0:	441c      	add	r4, r3
 80247a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247a4:	441d      	add	r5, r3
 80247a6:	9b07      	ldr	r3, [sp, #28]
 80247a8:	9425      	str	r4, [sp, #148]	; 0x94
 80247aa:	3b01      	subs	r3, #1
 80247ac:	9307      	str	r3, [sp, #28]
 80247ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247b0:	3302      	adds	r3, #2
 80247b2:	930a      	str	r3, [sp, #40]	; 0x28
 80247b4:	e66c      	b.n	8024490 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80247b6:	d024      	beq.n	8024802 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80247b8:	9b07      	ldr	r3, [sp, #28]
 80247ba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80247bc:	3b01      	subs	r3, #1
 80247be:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80247c0:	fb00 4003 	mla	r0, r0, r3, r4
 80247c4:	1400      	asrs	r0, r0, #16
 80247c6:	f53f ae80 	bmi.w	80244ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80247ca:	3901      	subs	r1, #1
 80247cc:	4288      	cmp	r0, r1
 80247ce:	f6bf ae7c 	bge.w	80244ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80247d2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247d4:	fb01 5303 	mla	r3, r1, r3, r5
 80247d8:	141b      	asrs	r3, r3, #16
 80247da:	f53f ae76 	bmi.w	80244ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80247de:	3a01      	subs	r2, #1
 80247e0:	4293      	cmp	r3, r2
 80247e2:	f6bf ae72 	bge.w	80244ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80247e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80247ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80247ee:	f1bb 0f00 	cmp.w	fp, #0
 80247f2:	dc71      	bgt.n	80248d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80247f4:	9b07      	ldr	r3, [sp, #28]
 80247f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80247fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247fc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024800:	930a      	str	r3, [sp, #40]	; 0x28
 8024802:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024804:	2b00      	cmp	r3, #0
 8024806:	f340 81af 	ble.w	8024b68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802480a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802480e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024810:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024814:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024818:	eef0 6a62 	vmov.f32	s13, s5
 802481c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024820:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024824:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024828:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802482c:	eef0 6a43 	vmov.f32	s13, s6
 8024830:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024834:	ee16 5a90 	vmov	r5, s13
 8024838:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802483c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024840:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024844:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024848:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802484c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024850:	ee12 2a90 	vmov	r2, s5
 8024854:	eef0 2a47 	vmov.f32	s5, s14
 8024858:	fb92 f3f3 	sdiv	r3, r2, r3
 802485c:	ee13 2a10 	vmov	r2, s6
 8024860:	9327      	str	r3, [sp, #156]	; 0x9c
 8024862:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024864:	eeb0 3a67 	vmov.f32	s6, s15
 8024868:	fb92 f3f3 	sdiv	r3, r2, r3
 802486c:	9328      	str	r3, [sp, #160]	; 0xa0
 802486e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024870:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024872:	3b01      	subs	r3, #1
 8024874:	9316      	str	r3, [sp, #88]	; 0x58
 8024876:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024878:	bf08      	it	eq
 802487a:	4613      	moveq	r3, r2
 802487c:	9307      	str	r3, [sp, #28]
 802487e:	e5f9      	b.n	8024474 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8024880:	2800      	cmp	r0, #0
 8024882:	f43f ae6b 	beq.w	802455c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024886:	f818 1001 	ldrb.w	r1, [r8, r1]
 802488a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802488e:	9108      	str	r1, [sp, #32]
 8024890:	0e09      	lsrs	r1, r1, #24
 8024892:	9110      	str	r1, [sp, #64]	; 0x40
 8024894:	e662      	b.n	802455c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024896:	f113 0801 	adds.w	r8, r3, #1
 802489a:	f53f af74 	bmi.w	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802489e:	4541      	cmp	r1, r8
 80248a0:	f6ff af71 	blt.w	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80248a4:	f11c 0801 	adds.w	r8, ip, #1
 80248a8:	f53f af6d 	bmi.w	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80248ac:	45c6      	cmp	lr, r8
 80248ae:	f6ff af6a 	blt.w	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80248b2:	b209      	sxth	r1, r1
 80248b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80248b8:	fa0f f38e 	sxth.w	r3, lr
 80248bc:	9100      	str	r1, [sp, #0]
 80248be:	4639      	mov	r1, r7
 80248c0:	9301      	str	r3, [sp, #4]
 80248c2:	4633      	mov	r3, r6
 80248c4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80248c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80248ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80248cc:	f7ff fc7b 	bl	80241c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80248d0:	e759      	b.n	8024786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80248d2:	bf00      	nop
 80248d4:	fffff800 	.word	0xfffff800
 80248d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80248da:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80248de:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80248e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80248e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248e6:	1427      	asrs	r7, r4, #16
 80248e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80248ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248ee:	142b      	asrs	r3, r5, #16
 80248f0:	fb01 7303 	mla	r3, r1, r3, r7
 80248f4:	18e7      	adds	r7, r4, r3
 80248f6:	5ce3      	ldrb	r3, [r4, r3]
 80248f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80248fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024900:	2a00      	cmp	r2, #0
 8024902:	f000 8127 	beq.w	8024b54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8024906:	f897 e001 	ldrb.w	lr, [r7, #1]
 802490a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802490e:	940d      	str	r4, [sp, #52]	; 0x34
 8024910:	0e24      	lsrs	r4, r4, #24
 8024912:	9414      	str	r4, [sp, #80]	; 0x50
 8024914:	b170      	cbz	r0, 8024934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024916:	eb07 0e01 	add.w	lr, r7, r1
 802491a:	5c79      	ldrb	r1, [r7, r1]
 802491c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024920:	9109      	str	r1, [sp, #36]	; 0x24
 8024922:	0e09      	lsrs	r1, r1, #24
 8024924:	9111      	str	r1, [sp, #68]	; 0x44
 8024926:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802492a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802492e:	910e      	str	r1, [sp, #56]	; 0x38
 8024930:	0e09      	lsrs	r1, r1, #24
 8024932:	9115      	str	r1, [sp, #84]	; 0x54
 8024934:	b292      	uxth	r2, r2
 8024936:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024938:	b280      	uxth	r0, r0
 802493a:	fb02 f800 	mul.w	r8, r2, r0
 802493e:	0112      	lsls	r2, r2, #4
 8024940:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024944:	eba2 0e08 	sub.w	lr, r2, r8
 8024948:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802494c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802494e:	b280      	uxth	r0, r0
 8024950:	fa1f fe8e 	uxth.w	lr, lr
 8024954:	1a09      	subs	r1, r1, r0
 8024956:	fb0e f202 	mul.w	r2, lr, r2
 802495a:	b289      	uxth	r1, r1
 802495c:	fb01 220c 	mla	r2, r1, ip, r2
 8024960:	fb00 2204 	mla	r2, r0, r4, r2
 8024964:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024966:	fb08 2204 	mla	r2, r8, r4, r2
 802496a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802496e:	2a00      	cmp	r2, #0
 8024970:	f000 80e5 	beq.w	8024b3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8024974:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024978:	d019      	beq.n	80249ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802497a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802497e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024982:	fb0c fa0a 	mul.w	sl, ip, sl
 8024986:	fb0c fc03 	mul.w	ip, ip, r3
 802498a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802498e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024992:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024996:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802499a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802499e:	4453      	add	r3, sl
 80249a0:	0a3f      	lsrs	r7, r7, #8
 80249a2:	0a1b      	lsrs	r3, r3, #8
 80249a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80249a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249ac:	433b      	orrs	r3, r7
 80249ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80249b0:	2cff      	cmp	r4, #255	; 0xff
 80249b2:	d020      	beq.n	80249f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80249b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80249b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80249bc:	4367      	muls	r7, r4
 80249be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80249c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80249c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80249ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80249d6:	44bc      	add	ip, r7
 80249d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249f0:	ea4c 040a 	orr.w	r4, ip, sl
 80249f4:	940d      	str	r4, [sp, #52]	; 0x34
 80249f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80249f8:	2cff      	cmp	r4, #255	; 0xff
 80249fa:	d020      	beq.n	8024a3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80249fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a04:	4367      	muls	r7, r4
 8024a06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a0c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a10:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a1e:	44bc      	add	ip, r7
 8024a20:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a38:	ea4c 040a 	orr.w	r4, ip, sl
 8024a3c:	9409      	str	r4, [sp, #36]	; 0x24
 8024a3e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024a40:	2cff      	cmp	r4, #255	; 0xff
 8024a42:	d020      	beq.n	8024a86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8024a44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024a46:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024a4c:	4367      	muls	r7, r4
 8024a4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024a50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a54:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024a5a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a62:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a66:	44bc      	add	ip, r7
 8024a68:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a80:	ea4c 040a 	orr.w	r4, ip, sl
 8024a84:	940e      	str	r4, [sp, #56]	; 0x38
 8024a86:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a88:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024a8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a90:	43d2      	mvns	r2, r2
 8024a92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024a98:	b2d2      	uxtb	r2, r2
 8024a9a:	fb0e f707 	mul.w	r7, lr, r7
 8024a9e:	fb01 770c 	mla	r7, r1, ip, r7
 8024aa2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024aa6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024aa8:	fb00 770c 	mla	r7, r0, ip, r7
 8024aac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ab0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ab2:	fb08 770c 	mla	r7, r8, ip, r7
 8024ab6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024aba:	fb0e fe0c 	mul.w	lr, lr, ip
 8024abe:	0a3f      	lsrs	r7, r7, #8
 8024ac0:	fb01 e303 	mla	r3, r1, r3, lr
 8024ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ac6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024aca:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024ace:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024ad0:	fb00 330a 	mla	r3, r0, sl, r3
 8024ad4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024ad8:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024adc:	f8b9 3000 	ldrh.w	r3, [r9]
 8024ae0:	1218      	asrs	r0, r3, #8
 8024ae2:	10d9      	asrs	r1, r3, #3
 8024ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ae8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024aec:	00db      	lsls	r3, r3, #3
 8024aee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024af2:	4350      	muls	r0, r2
 8024af4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024af8:	b2db      	uxtb	r3, r3
 8024afa:	4351      	muls	r1, r2
 8024afc:	ea47 070c 	orr.w	r7, r7, ip
 8024b00:	4353      	muls	r3, r2
 8024b02:	1c42      	adds	r2, r0, #1
 8024b04:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024b08:	0c3a      	lsrs	r2, r7, #16
 8024b0a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024b0e:	4a18      	ldr	r2, [pc, #96]	; (8024b70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8024b10:	b2c0      	uxtb	r0, r0
 8024b12:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024b16:	1c4a      	adds	r2, r1, #1
 8024b18:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024b1c:	0a3a      	lsrs	r2, r7, #8
 8024b1e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024b22:	00c9      	lsls	r1, r1, #3
 8024b24:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024b28:	4301      	orrs	r1, r0
 8024b2a:	1c58      	adds	r0, r3, #1
 8024b2c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024b30:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024b34:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8024b38:	4308      	orrs	r0, r1
 8024b3a:	f8a9 0000 	strh.w	r0, [r9]
 8024b3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024b40:	f109 0902 	add.w	r9, r9, #2
 8024b44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024b46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b4a:	441a      	add	r2, r3
 8024b4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b4e:	9225      	str	r2, [sp, #148]	; 0x94
 8024b50:	441d      	add	r5, r3
 8024b52:	e64c      	b.n	80247ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024b54:	2800      	cmp	r0, #0
 8024b56:	f43f aeed 	beq.w	8024934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024b5a:	5c79      	ldrb	r1, [r7, r1]
 8024b5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024b60:	9109      	str	r1, [sp, #36]	; 0x24
 8024b62:	0e09      	lsrs	r1, r1, #24
 8024b64:	9111      	str	r1, [sp, #68]	; 0x44
 8024b66:	e6e5      	b.n	8024934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024b68:	b01b      	add	sp, #108	; 0x6c
 8024b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b6e:	bf00      	nop
 8024b70:	fffff800 	.word	0xfffff800

08024b74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b78:	b085      	sub	sp, #20
 8024b7a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8024b7e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024b82:	2800      	cmp	r0, #0
 8024b84:	9103      	str	r1, [sp, #12]
 8024b86:	fb00 7406 	mla	r4, r0, r6, r7
 8024b8a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8024b8e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8024b92:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024b96:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024b9a:	eb03 0904 	add.w	r9, r3, r4
 8024b9e:	9501      	str	r5, [sp, #4]
 8024ba0:	f2c0 8150 	blt.w	8024e44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024ba4:	4583      	cmp	fp, r0
 8024ba6:	f340 814d 	ble.w	8024e44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024baa:	2f00      	cmp	r7, #0
 8024bac:	f2c0 8146 	blt.w	8024e3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024bb0:	42be      	cmp	r6, r7
 8024bb2:	f340 8143 	ble.w	8024e3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024bb6:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024bba:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8024bbe:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8024bc2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024bc6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024bca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024bce:	4355      	muls	r5, r2
 8024bd0:	fb0c f203 	mul.w	r2, ip, r3
 8024bd4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024bd8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024bdc:	441d      	add	r5, r3
 8024bde:	f102 0320 	add.w	r3, r2, #32
 8024be2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024be6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024bea:	0a1b      	lsrs	r3, r3, #8
 8024bec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024bf0:	431c      	orrs	r4, r3
 8024bf2:	1c7b      	adds	r3, r7, #1
 8024bf4:	f100 812b 	bmi.w	8024e4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024bf8:	429e      	cmp	r6, r3
 8024bfa:	f340 8128 	ble.w	8024e4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024bfe:	2900      	cmp	r1, #0
 8024c00:	f000 8128 	beq.w	8024e54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024c04:	9a01      	ldr	r2, [sp, #4]
 8024c06:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024c0a:	8855      	ldrh	r5, [r2, #2]
 8024c0c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024c10:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8024c14:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024c18:	fb08 f802 	mul.w	r8, r8, r2
 8024c1c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024c20:	435d      	muls	r5, r3
 8024c22:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024c26:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024c2a:	44d0      	add	r8, sl
 8024c2c:	f105 0a20 	add.w	sl, r5, #32
 8024c30:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024c34:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024c38:	0a2d      	lsrs	r5, r5, #8
 8024c3a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024c3e:	432a      	orrs	r2, r5
 8024c40:	3001      	adds	r0, #1
 8024c42:	f100 810d 	bmi.w	8024e60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024c46:	4583      	cmp	fp, r0
 8024c48:	f340 810a 	ble.w	8024e60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024c4c:	f1be 0f00 	cmp.w	lr, #0
 8024c50:	f000 810b 	beq.w	8024e6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8024c54:	2f00      	cmp	r7, #0
 8024c56:	f2c0 8100 	blt.w	8024e5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024c5a:	42be      	cmp	r6, r7
 8024c5c:	f340 80fd 	ble.w	8024e5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024c60:	9801      	ldr	r0, [sp, #4]
 8024c62:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024c66:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024c6a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8024c6e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8024c72:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8024c76:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024c7a:	fb0a fa00 	mul.w	sl, sl, r0
 8024c7e:	fb05 f808 	mul.w	r8, r5, r8
 8024c82:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024c86:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024c8a:	4482      	add	sl, r0
 8024c8c:	f108 0020 	add.w	r0, r8, #32
 8024c90:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024c94:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024c98:	0a00      	lsrs	r0, r0, #8
 8024c9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c9e:	ea4b 0b00 	orr.w	fp, fp, r0
 8024ca2:	3701      	adds	r7, #1
 8024ca4:	f100 80e6 	bmi.w	8024e74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024ca8:	42be      	cmp	r6, r7
 8024caa:	f340 80e3 	ble.w	8024e74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024cae:	2900      	cmp	r1, #0
 8024cb0:	f000 80e3 	beq.w	8024e7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024cb4:	3601      	adds	r6, #1
 8024cb6:	9801      	ldr	r0, [sp, #4]
 8024cb8:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024cbc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024cc0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024cc4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8024cc8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024ccc:	fb09 f906 	mul.w	r9, r9, r6
 8024cd0:	fb07 f800 	mul.w	r8, r7, r0
 8024cd4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024cd8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024cdc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024ce0:	44d1      	add	r9, sl
 8024ce2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024ce6:	f108 0020 	add.w	r0, r8, #32
 8024cea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024cee:	0a00      	lsrs	r0, r0, #8
 8024cf0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024cf4:	4330      	orrs	r0, r6
 8024cf6:	b28e      	uxth	r6, r1
 8024cf8:	fa1f f98e 	uxth.w	r9, lr
 8024cfc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024d00:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024d04:	fb06 f809 	mul.w	r8, r6, r9
 8024d08:	0136      	lsls	r6, r6, #4
 8024d0a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d0e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024d12:	9601      	str	r6, [sp, #4]
 8024d14:	ea4a 0404 	orr.w	r4, sl, r4
 8024d18:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024d1c:	fa1f f689 	uxth.w	r6, r9
 8024d20:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024d24:	fb11 f90e 	smulbb	r9, r1, lr
 8024d28:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d2c:	9602      	str	r6, [sp, #8]
 8024d2e:	4626      	mov	r6, r4
 8024d30:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024d34:	f1ce 0410 	rsb	r4, lr, #16
 8024d38:	ea4a 0202 	orr.w	r2, sl, r2
 8024d3c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024d40:	1a64      	subs	r4, r4, r1
 8024d42:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024d46:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024d4e:	434a      	muls	r2, r1
 8024d50:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024d54:	ea4a 0000 	orr.w	r0, sl, r0
 8024d58:	9903      	ldr	r1, [sp, #12]
 8024d5a:	fb04 2406 	mla	r4, r4, r6, r2
 8024d5e:	9e02      	ldr	r6, [sp, #8]
 8024d60:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024d64:	fb09 4200 	mla	r2, r9, r0, r4
 8024d68:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024d6c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024d70:	8808      	ldrh	r0, [r1, #0]
 8024d72:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024d76:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8024d7a:	ea44 0b0b 	orr.w	fp, r4, fp
 8024d7e:	9c01      	ldr	r4, [sp, #4]
 8024d80:	b289      	uxth	r1, r1
 8024d82:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024d86:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024d8a:	1ba4      	subs	r4, r4, r6
 8024d8c:	9e01      	ldr	r6, [sp, #4]
 8024d8e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024d92:	eba6 0608 	sub.w	r6, r6, r8
 8024d96:	b2a4      	uxth	r4, r4
 8024d98:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024d9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024da0:	b2b6      	uxth	r6, r6
 8024da2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024da6:	4373      	muls	r3, r6
 8024da8:	ea42 0e0e 	orr.w	lr, r2, lr
 8024dac:	fb0c 3304 	mla	r3, ip, r4, r3
 8024db0:	9c02      	ldr	r4, [sp, #8]
 8024db2:	fa1f f28e 	uxth.w	r2, lr
 8024db6:	fb04 3505 	mla	r5, r4, r5, r3
 8024dba:	10d4      	asrs	r4, r2, #3
 8024dbc:	fb08 5707 	mla	r7, r8, r7, r5
 8024dc0:	1215      	asrs	r5, r2, #8
 8024dc2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024dc6:	00d2      	lsls	r2, r2, #3
 8024dc8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024dcc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024dd0:	b2d2      	uxtb	r2, r2
 8024dd2:	434f      	muls	r7, r1
 8024dd4:	1c7b      	adds	r3, r7, #1
 8024dd6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024dda:	1203      	asrs	r3, r0, #8
 8024ddc:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024de0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024de4:	b2ff      	uxtb	r7, r7
 8024de6:	fb13 f307 	smulbb	r3, r3, r7
 8024dea:	fb05 3501 	mla	r5, r5, r1, r3
 8024dee:	10c3      	asrs	r3, r0, #3
 8024df0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024df4:	b2ad      	uxth	r5, r5
 8024df6:	fb13 f307 	smulbb	r3, r3, r7
 8024dfa:	fb04 3401 	mla	r4, r4, r1, r3
 8024dfe:	00c3      	lsls	r3, r0, #3
 8024e00:	b2db      	uxtb	r3, r3
 8024e02:	b2a4      	uxth	r4, r4
 8024e04:	fb13 f307 	smulbb	r3, r3, r7
 8024e08:	fb02 3101 	mla	r1, r2, r1, r3
 8024e0c:	1c6b      	adds	r3, r5, #1
 8024e0e:	1c62      	adds	r2, r4, #1
 8024e10:	b289      	uxth	r1, r1
 8024e12:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024e16:	1c4b      	adds	r3, r1, #1
 8024e18:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024e1c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024e20:	9a03      	ldr	r2, [sp, #12]
 8024e22:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024e26:	0964      	lsrs	r4, r4, #5
 8024e28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024e2c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024e30:	432b      	orrs	r3, r5
 8024e32:	4323      	orrs	r3, r4
 8024e34:	8013      	strh	r3, [r2, #0]
 8024e36:	b005      	add	sp, #20
 8024e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e3c:	f04f 0c00 	mov.w	ip, #0
 8024e40:	4664      	mov	r4, ip
 8024e42:	e6d6      	b.n	8024bf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8024e44:	2300      	movs	r3, #0
 8024e46:	469c      	mov	ip, r3
 8024e48:	461a      	mov	r2, r3
 8024e4a:	461c      	mov	r4, r3
 8024e4c:	e6f8      	b.n	8024c40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024e4e:	2300      	movs	r3, #0
 8024e50:	461a      	mov	r2, r3
 8024e52:	e6f5      	b.n	8024c40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024e54:	460b      	mov	r3, r1
 8024e56:	460a      	mov	r2, r1
 8024e58:	e6f2      	b.n	8024c40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024e5a:	2500      	movs	r5, #0
 8024e5c:	46ab      	mov	fp, r5
 8024e5e:	e720      	b.n	8024ca2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8024e60:	2700      	movs	r7, #0
 8024e62:	463d      	mov	r5, r7
 8024e64:	4638      	mov	r0, r7
 8024e66:	46bb      	mov	fp, r7
 8024e68:	e745      	b.n	8024cf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024e6a:	4677      	mov	r7, lr
 8024e6c:	4675      	mov	r5, lr
 8024e6e:	4670      	mov	r0, lr
 8024e70:	46f3      	mov	fp, lr
 8024e72:	e740      	b.n	8024cf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024e74:	2700      	movs	r7, #0
 8024e76:	4638      	mov	r0, r7
 8024e78:	e73d      	b.n	8024cf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024e7a:	460f      	mov	r7, r1
 8024e7c:	4608      	mov	r0, r1
 8024e7e:	e73a      	b.n	8024cf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08024e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e84:	b097      	sub	sp, #92	; 0x5c
 8024e86:	9214      	str	r2, [sp, #80]	; 0x50
 8024e88:	9308      	str	r3, [sp, #32]
 8024e8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024e8c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024e90:	9015      	str	r0, [sp, #84]	; 0x54
 8024e92:	9312      	str	r3, [sp, #72]	; 0x48
 8024e94:	6850      	ldr	r0, [r2, #4]
 8024e96:	9111      	str	r1, [sp, #68]	; 0x44
 8024e98:	6812      	ldr	r2, [r2, #0]
 8024e9a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024e9e:	fb00 1303 	mla	r3, r0, r3, r1
 8024ea2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8024ea8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024eaa:	681b      	ldr	r3, [r3, #0]
 8024eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8024eae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024eb0:	685b      	ldr	r3, [r3, #4]
 8024eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8024eb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8024eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024ebc:	2b00      	cmp	r3, #0
 8024ebe:	dc03      	bgt.n	8024ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024ec2:	2b00      	cmp	r3, #0
 8024ec4:	f340 83cd 	ble.w	8025662 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024ec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ed2:	1e48      	subs	r0, r1, #1
 8024ed4:	1e55      	subs	r5, r2, #1
 8024ed6:	9b08      	ldr	r3, [sp, #32]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	f340 81a5 	ble.w	8025228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024ede:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024ee2:	1436      	asrs	r6, r6, #16
 8024ee4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024ee8:	d406      	bmi.n	8024ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024eea:	4286      	cmp	r6, r0
 8024eec:	da04      	bge.n	8024ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024eee:	2b00      	cmp	r3, #0
 8024ef0:	db02      	blt.n	8024ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024ef2:	42ab      	cmp	r3, r5
 8024ef4:	f2c0 8199 	blt.w	802522a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024ef8:	3601      	adds	r6, #1
 8024efa:	f100 8186 	bmi.w	802520a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024efe:	42b1      	cmp	r1, r6
 8024f00:	f2c0 8183 	blt.w	802520a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024f04:	3301      	adds	r3, #1
 8024f06:	f100 8180 	bmi.w	802520a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024f0a:	429a      	cmp	r2, r3
 8024f0c:	f2c0 817d 	blt.w	802520a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024f10:	9b08      	ldr	r3, [sp, #32]
 8024f12:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024f16:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8024f1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	f340 81a6 	ble.w	802526e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024f22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024f24:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8024f26:	1418      	asrs	r0, r3, #16
 8024f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f2a:	142d      	asrs	r5, r5, #16
 8024f2c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024f32:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024f36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024f3c:	f100 81fa 	bmi.w	8025334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024f40:	f102 3eff 	add.w	lr, r2, #4294967295
 8024f44:	4575      	cmp	r5, lr
 8024f46:	f280 81f5 	bge.w	8025334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024f4a:	2800      	cmp	r0, #0
 8024f4c:	f2c0 81f2 	blt.w	8025334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024f50:	f103 3eff 	add.w	lr, r3, #4294967295
 8024f54:	4570      	cmp	r0, lr
 8024f56:	f280 81ed 	bge.w	8025334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024f5a:	b212      	sxth	r2, r2
 8024f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f5e:	fa1f fe81 	uxth.w	lr, r1
 8024f62:	fb00 5002 	mla	r0, r0, r2, r5
 8024f66:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024f6a:	eb03 0a00 	add.w	sl, r3, r0
 8024f6e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024f72:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024f76:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024f7a:	b29b      	uxth	r3, r3
 8024f7c:	f1bc 0f00 	cmp.w	ip, #0
 8024f80:	f000 81bb 	beq.w	80252fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024f84:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024f88:	eb0a 0b02 	add.w	fp, sl, r2
 8024f8c:	fa1f fa8c 	uxth.w	sl, ip
 8024f90:	940d      	str	r4, [sp, #52]	; 0x34
 8024f92:	fb0a fe0e 	mul.w	lr, sl, lr
 8024f96:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024f9a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024f9e:	eba5 050e 	sub.w	r5, r5, lr
 8024fa2:	940e      	str	r4, [sp, #56]	; 0x38
 8024fa4:	fa1f fa8a 	uxth.w	sl, sl
 8024fa8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024faa:	b2ad      	uxth	r5, r5
 8024fac:	eba3 030a 	sub.w	r3, r3, sl
 8024fb0:	fb08 f505 	mul.w	r5, r8, r5
 8024fb4:	b29b      	uxth	r3, r3
 8024fb6:	fb09 5303 	mla	r3, r9, r3, r5
 8024fba:	fb0a 3304 	mla	r3, sl, r4, r3
 8024fbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024fc0:	fb0e 3304 	mla	r3, lr, r4, r3
 8024fc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	f000 8111 	beq.w	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024fd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024fd4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024fd8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024fdc:	f000 8192 	beq.w	8025304 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8024fe0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024fe4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024fe8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024fec:	fb0a fe0e 	mul.w	lr, sl, lr
 8024ff0:	fb09 f000 	mul.w	r0, r9, r0
 8024ff4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024ff8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024ffc:	f100 0b20 	add.w	fp, r0, #32
 8025000:	44ce      	add	lr, r9
 8025002:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025006:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802500a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802500e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025012:	ea4e 0909 	orr.w	r9, lr, r9
 8025016:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802501a:	8868      	ldrh	r0, [r5, #2]
 802501c:	d019      	beq.n	8025052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802501e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025022:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025026:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802502a:	fb0a fe0e 	mul.w	lr, sl, lr
 802502e:	fb08 f800 	mul.w	r8, r8, r0
 8025032:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025036:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802503a:	f108 0b20 	add.w	fp, r8, #32
 802503e:	4486      	add	lr, r0
 8025040:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025044:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025048:	0a00      	lsrs	r0, r0, #8
 802504a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802504e:	ea4e 0000 	orr.w	r0, lr, r0
 8025052:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025056:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802505a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802505e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025062:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025066:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802506a:	ea4e 0909 	orr.w	r9, lr, r9
 802506e:	ea4a 0000 	orr.w	r0, sl, r0
 8025072:	f1bc 0f00 	cmp.w	ip, #0
 8025076:	f000 8147 	beq.w	8025308 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802507a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802507e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025080:	3a01      	subs	r2, #1
 8025082:	2cff      	cmp	r4, #255	; 0xff
 8025084:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025088:	f102 0202 	add.w	r2, r2, #2
 802508c:	eb05 0e02 	add.w	lr, r5, r2
 8025090:	5aaa      	ldrh	r2, [r5, r2]
 8025092:	d018      	beq.n	80250c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025094:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025098:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802509c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80250a0:	fb04 fa02 	mul.w	sl, r4, r2
 80250a4:	fb08 f805 	mul.w	r8, r8, r5
 80250a8:	f10a 0520 	add.w	r5, sl, #32
 80250ac:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80250b0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80250b4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80250b8:	4442      	add	r2, r8
 80250ba:	0a2d      	lsrs	r5, r5, #8
 80250bc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80250c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80250c4:	432a      	orrs	r2, r5
 80250c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80250c8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80250cc:	2cff      	cmp	r4, #255	; 0xff
 80250ce:	d01a      	beq.n	8025106 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80250d0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80250d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80250d8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80250dc:	fb04 fa05 	mul.w	sl, r4, r5
 80250e0:	fb08 f80e 	mul.w	r8, r8, lr
 80250e4:	f10a 0e20 	add.w	lr, sl, #32
 80250e8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80250ec:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80250f0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80250f4:	4445      	add	r5, r8
 80250f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250fa:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80250fe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025102:	ea45 050e 	orr.w	r5, r5, lr
 8025106:	fb1c fe01 	smulbb	lr, ip, r1
 802510a:	f1cc 0810 	rsb	r8, ip, #16
 802510e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025112:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025116:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802511a:	eba8 0801 	sub.w	r8, r8, r1
 802511e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025122:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025126:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802512a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802512e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025132:	ea4a 0202 	orr.w	r2, sl, r2
 8025136:	4341      	muls	r1, r0
 8025138:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802513c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025140:	fb09 1108 	mla	r1, r9, r8, r1
 8025144:	ea4b 0505 	orr.w	r5, fp, r5
 8025148:	fb0c 1102 	mla	r1, ip, r2, r1
 802514c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025150:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025154:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025158:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802515c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025160:	ea42 0e0e 	orr.w	lr, r2, lr
 8025164:	fa1f f28e 	uxth.w	r2, lr
 8025168:	2bff      	cmp	r3, #255	; 0xff
 802516a:	d103      	bne.n	8025174 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802516c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802516e:	29ff      	cmp	r1, #255	; 0xff
 8025170:	f000 80de 	beq.w	8025330 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025174:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025176:	1215      	asrs	r5, r2, #8
 8025178:	8838      	ldrh	r0, [r7, #0]
 802517a:	434b      	muls	r3, r1
 802517c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025180:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025182:	f103 0c01 	add.w	ip, r3, #1
 8025186:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802518a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802518e:	fa5f fc83 	uxtb.w	ip, r3
 8025192:	1203      	asrs	r3, r0, #8
 8025194:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025198:	fb13 f30c 	smulbb	r3, r3, ip
 802519c:	fb05 3501 	mla	r5, r5, r1, r3
 80251a0:	10c3      	asrs	r3, r0, #3
 80251a2:	10d1      	asrs	r1, r2, #3
 80251a4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80251a8:	00d2      	lsls	r2, r2, #3
 80251aa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80251ae:	b2ad      	uxth	r5, r5
 80251b0:	fb13 f30c 	smulbb	r3, r3, ip
 80251b4:	b2d2      	uxtb	r2, r2
 80251b6:	fb01 3104 	mla	r1, r1, r4, r3
 80251ba:	00c3      	lsls	r3, r0, #3
 80251bc:	b2db      	uxtb	r3, r3
 80251be:	b289      	uxth	r1, r1
 80251c0:	fb13 f30c 	smulbb	r3, r3, ip
 80251c4:	fb02 3304 	mla	r3, r2, r4, r3
 80251c8:	b29a      	uxth	r2, r3
 80251ca:	1c6b      	adds	r3, r5, #1
 80251cc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80251d0:	1c53      	adds	r3, r2, #1
 80251d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80251d6:	1c4a      	adds	r2, r1, #1
 80251d8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80251dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80251e0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80251e4:	0949      	lsrs	r1, r1, #5
 80251e6:	432b      	orrs	r3, r5
 80251e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80251ec:	430b      	orrs	r3, r1
 80251ee:	803b      	strh	r3, [r7, #0]
 80251f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80251f2:	3702      	adds	r7, #2
 80251f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80251f6:	4413      	add	r3, r2
 80251f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80251fa:	9321      	str	r3, [sp, #132]	; 0x84
 80251fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80251fe:	441a      	add	r2, r3
 8025200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025202:	3b01      	subs	r3, #1
 8025204:	9222      	str	r2, [sp, #136]	; 0x88
 8025206:	9313      	str	r3, [sp, #76]	; 0x4c
 8025208:	e687      	b.n	8024f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802520a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802520c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802520e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8025210:	4433      	add	r3, r6
 8025212:	9321      	str	r3, [sp, #132]	; 0x84
 8025214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025216:	441c      	add	r4, r3
 8025218:	9b08      	ldr	r3, [sp, #32]
 802521a:	3b01      	subs	r3, #1
 802521c:	9422      	str	r4, [sp, #136]	; 0x88
 802521e:	9308      	str	r3, [sp, #32]
 8025220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025222:	3302      	adds	r3, #2
 8025224:	9309      	str	r3, [sp, #36]	; 0x24
 8025226:	e656      	b.n	8024ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025228:	d028      	beq.n	802527c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802522a:	9b08      	ldr	r3, [sp, #32]
 802522c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802522e:	3b01      	subs	r3, #1
 8025230:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025232:	fb00 5003 	mla	r0, r0, r3, r5
 8025236:	1400      	asrs	r0, r0, #16
 8025238:	f53f ae6a 	bmi.w	8024f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802523c:	3901      	subs	r1, #1
 802523e:	4288      	cmp	r0, r1
 8025240:	f6bf ae66 	bge.w	8024f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025244:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025246:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025248:	fb01 0303 	mla	r3, r1, r3, r0
 802524c:	141b      	asrs	r3, r3, #16
 802524e:	f53f ae5f 	bmi.w	8024f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025252:	3a01      	subs	r2, #1
 8025254:	4293      	cmp	r3, r2
 8025256:	f6bf ae5b 	bge.w	8024f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802525a:	9b08      	ldr	r3, [sp, #32]
 802525c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025260:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025264:	9313      	str	r3, [sp, #76]	; 0x4c
 8025266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025268:	2b00      	cmp	r3, #0
 802526a:	f300 8082 	bgt.w	8025372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802526e:	9b08      	ldr	r3, [sp, #32]
 8025270:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025276:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802527a:	9309      	str	r3, [sp, #36]	; 0x24
 802527c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802527e:	2b00      	cmp	r3, #0
 8025280:	f340 81ef 	ble.w	8025662 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8025284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025288:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802528a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802528e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025292:	eef0 6a62 	vmov.f32	s13, s5
 8025296:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802529a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802529e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252a2:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80252a6:	eef0 6a43 	vmov.f32	s13, s6
 80252aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252ae:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80252b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80252c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80252ca:	ee12 2a90 	vmov	r2, s5
 80252ce:	eef0 2a47 	vmov.f32	s5, s14
 80252d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80252d6:	ee13 2a10 	vmov	r2, s6
 80252da:	9323      	str	r3, [sp, #140]	; 0x8c
 80252dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252de:	eeb0 3a67 	vmov.f32	s6, s15
 80252e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80252e6:	9324      	str	r3, [sp, #144]	; 0x90
 80252e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80252ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80252ec:	3b01      	subs	r3, #1
 80252ee:	9311      	str	r3, [sp, #68]	; 0x44
 80252f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252f2:	bf08      	it	eq
 80252f4:	4613      	moveq	r3, r2
 80252f6:	9308      	str	r3, [sp, #32]
 80252f8:	e5df      	b.n	8024eba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80252fa:	fb08 f505 	mul.w	r5, r8, r5
 80252fe:	fb09 5303 	mla	r3, r9, r3, r5
 8025302:	e65f      	b.n	8024fc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025304:	4681      	mov	r9, r0
 8025306:	e686      	b.n	8025016 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025308:	f1c1 0210 	rsb	r2, r1, #16
 802530c:	4341      	muls	r1, r0
 802530e:	fb09 1902 	mla	r9, r9, r2, r1
 8025312:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025316:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802531a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802531e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025322:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025326:	ea42 0909 	orr.w	r9, r2, r9
 802532a:	fa1f f289 	uxth.w	r2, r9
 802532e:	e71b      	b.n	8025168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8025330:	803a      	strh	r2, [r7, #0]
 8025332:	e75d      	b.n	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025334:	f115 0e01 	adds.w	lr, r5, #1
 8025338:	f53f af5a 	bmi.w	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802533c:	4572      	cmp	r2, lr
 802533e:	f6ff af57 	blt.w	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025342:	f110 0e01 	adds.w	lr, r0, #1
 8025346:	f53f af53 	bmi.w	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802534a:	4573      	cmp	r3, lr
 802534c:	f6ff af50 	blt.w	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025350:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025352:	b21b      	sxth	r3, r3
 8025354:	b212      	sxth	r2, r2
 8025356:	9502      	str	r5, [sp, #8]
 8025358:	9301      	str	r3, [sp, #4]
 802535a:	9200      	str	r2, [sp, #0]
 802535c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025360:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025364:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025368:	4639      	mov	r1, r7
 802536a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802536c:	f7ff fc02 	bl	8024b74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025370:	e73e      	b.n	80251f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025374:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802537a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802537e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025380:	fa1f fc82 	uxth.w	ip, r2
 8025384:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025388:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802538a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802538e:	141f      	asrs	r7, r3, #16
 8025390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025392:	141b      	asrs	r3, r3, #16
 8025394:	fb01 3707 	mla	r7, r1, r7, r3
 8025398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802539a:	eb03 0a07 	add.w	sl, r3, r7
 802539e:	f813 9007 	ldrb.w	r9, [r3, r7]
 80253a2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80253a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80253aa:	b29b      	uxth	r3, r3
 80253ac:	2d00      	cmp	r5, #0
 80253ae:	f000 813d 	beq.w	802562c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80253b2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80253b6:	eb0a 0b01 	add.w	fp, sl, r1
 80253ba:	fa1f fa85 	uxth.w	sl, r5
 80253be:	940f      	str	r4, [sp, #60]	; 0x3c
 80253c0:	fb0a fc0c 	mul.w	ip, sl, ip
 80253c4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80253c8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80253cc:	eba0 000c 	sub.w	r0, r0, ip
 80253d0:	9410      	str	r4, [sp, #64]	; 0x40
 80253d2:	fa1f fa8a 	uxth.w	sl, sl
 80253d6:	b280      	uxth	r0, r0
 80253d8:	eba3 030a 	sub.w	r3, r3, sl
 80253dc:	fb08 f000 	mul.w	r0, r8, r0
 80253e0:	b29b      	uxth	r3, r3
 80253e2:	fb09 0303 	mla	r3, r9, r3, r0
 80253e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80253e8:	fb0a 3300 	mla	r3, sl, r0, r3
 80253ec:	fb0c 3304 	mla	r3, ip, r4, r3
 80253f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80253f4:	2b00      	cmp	r3, #0
 80253f6:	f000 810b 	beq.w	8025610 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80253fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80253fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025402:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025406:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802540a:	f000 8114 	beq.w	8025636 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802540e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025412:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025416:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802541a:	fb0a fc0c 	mul.w	ip, sl, ip
 802541e:	fb09 f707 	mul.w	r7, r9, r7
 8025422:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025426:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802542a:	f107 0b20 	add.w	fp, r7, #32
 802542e:	44cc      	add	ip, r9
 8025430:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025434:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025438:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802543c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025440:	ea4c 0909 	orr.w	r9, ip, r9
 8025444:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025448:	8847      	ldrh	r7, [r0, #2]
 802544a:	d019      	beq.n	8025480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 802544c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025450:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025454:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025458:	fb0a fc0c 	mul.w	ip, sl, ip
 802545c:	fb08 f807 	mul.w	r8, r8, r7
 8025460:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025464:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025468:	f108 0b20 	add.w	fp, r8, #32
 802546c:	44bc      	add	ip, r7
 802546e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025472:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025476:	0a3f      	lsrs	r7, r7, #8
 8025478:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802547c:	ea4c 0707 	orr.w	r7, ip, r7
 8025480:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025484:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025488:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802548c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025490:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025494:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025498:	ea4c 0909 	orr.w	r9, ip, r9
 802549c:	ea4a 0707 	orr.w	r7, sl, r7
 80254a0:	2d00      	cmp	r5, #0
 80254a2:	f000 80ca 	beq.w	802563a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80254a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80254aa:	3901      	subs	r1, #1
 80254ac:	0049      	lsls	r1, r1, #1
 80254ae:	3102      	adds	r1, #2
 80254b0:	eb00 0c01 	add.w	ip, r0, r1
 80254b4:	5a41      	ldrh	r1, [r0, r1]
 80254b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80254b8:	28ff      	cmp	r0, #255	; 0xff
 80254ba:	d019      	beq.n	80254f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80254bc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80254c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80254c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80254c6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80254ca:	fb04 fa01 	mul.w	sl, r4, r1
 80254ce:	fb08 f800 	mul.w	r8, r8, r0
 80254d2:	f10a 0020 	add.w	r0, sl, #32
 80254d6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80254da:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80254de:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80254e2:	4441      	add	r1, r8
 80254e4:	0a00      	lsrs	r0, r0, #8
 80254e6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80254ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80254ee:	4301      	orrs	r1, r0
 80254f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80254f2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80254f6:	2cff      	cmp	r4, #255	; 0xff
 80254f8:	d01a      	beq.n	8025530 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 80254fa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80254fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025502:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025506:	fb04 fa00 	mul.w	sl, r4, r0
 802550a:	fb08 f80c 	mul.w	r8, r8, ip
 802550e:	f10a 0c20 	add.w	ip, sl, #32
 8025512:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025516:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802551a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802551e:	4440      	add	r0, r8
 8025520:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025524:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025528:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802552c:	ea40 000c 	orr.w	r0, r0, ip
 8025530:	fb15 fc02 	smulbb	ip, r5, r2
 8025534:	f1c5 0810 	rsb	r8, r5, #16
 8025538:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802553c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025540:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025544:	eba8 0802 	sub.w	r8, r8, r2
 8025548:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802554c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025550:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025554:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025558:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802555c:	ea4a 0101 	orr.w	r1, sl, r1
 8025560:	437a      	muls	r2, r7
 8025562:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025566:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802556a:	fb09 2208 	mla	r2, r9, r8, r2
 802556e:	ea4b 0000 	orr.w	r0, fp, r0
 8025572:	fb05 2201 	mla	r2, r5, r1, r2
 8025576:	fb0c 2200 	mla	r2, ip, r0, r2
 802557a:	0d57      	lsrs	r7, r2, #21
 802557c:	0952      	lsrs	r2, r2, #5
 802557e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025582:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025586:	433a      	orrs	r2, r7
 8025588:	2bff      	cmp	r3, #255	; 0xff
 802558a:	b292      	uxth	r2, r2
 802558c:	d102      	bne.n	8025594 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802558e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025590:	29ff      	cmp	r1, #255	; 0xff
 8025592:	d063      	beq.n	802565c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8025594:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025596:	1215      	asrs	r5, r2, #8
 8025598:	f8be 1000 	ldrh.w	r1, [lr]
 802559c:	4343      	muls	r3, r0
 802559e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80255a0:	10cf      	asrs	r7, r1, #3
 80255a2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80255a6:	1c58      	adds	r0, r3, #1
 80255a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80255ac:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80255b0:	1208      	asrs	r0, r1, #8
 80255b2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80255b6:	00c9      	lsls	r1, r1, #3
 80255b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80255bc:	b2db      	uxtb	r3, r3
 80255be:	b2c9      	uxtb	r1, r1
 80255c0:	fb10 f003 	smulbb	r0, r0, r3
 80255c4:	fb11 f103 	smulbb	r1, r1, r3
 80255c8:	fb05 0504 	mla	r5, r5, r4, r0
 80255cc:	10d0      	asrs	r0, r2, #3
 80255ce:	fb17 f703 	smulbb	r7, r7, r3
 80255d2:	00d2      	lsls	r2, r2, #3
 80255d4:	b2ad      	uxth	r5, r5
 80255d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80255da:	b2d2      	uxtb	r2, r2
 80255dc:	fb00 7004 	mla	r0, r0, r4, r7
 80255e0:	1c6b      	adds	r3, r5, #1
 80255e2:	fb02 1204 	mla	r2, r2, r4, r1
 80255e6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80255ea:	b292      	uxth	r2, r2
 80255ec:	b280      	uxth	r0, r0
 80255ee:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80255f2:	1c57      	adds	r7, r2, #1
 80255f4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80255f8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80255fc:	433d      	orrs	r5, r7
 80255fe:	1c47      	adds	r7, r0, #1
 8025600:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025604:	097f      	lsrs	r7, r7, #5
 8025606:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802560a:	433d      	orrs	r5, r7
 802560c:	f8ae 5000 	strh.w	r5, [lr]
 8025610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025612:	f10e 0e02 	add.w	lr, lr, #2
 8025616:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025618:	4413      	add	r3, r2
 802561a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802561c:	9321      	str	r3, [sp, #132]	; 0x84
 802561e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025620:	441a      	add	r2, r3
 8025622:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025624:	3b01      	subs	r3, #1
 8025626:	9222      	str	r2, [sp, #136]	; 0x88
 8025628:	9313      	str	r3, [sp, #76]	; 0x4c
 802562a:	e61c      	b.n	8025266 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802562c:	fb08 f000 	mul.w	r0, r8, r0
 8025630:	fb09 0303 	mla	r3, r9, r3, r0
 8025634:	e6dc      	b.n	80253f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8025636:	46b9      	mov	r9, r7
 8025638:	e704      	b.n	8025444 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802563a:	f1c2 0110 	rsb	r1, r2, #16
 802563e:	437a      	muls	r2, r7
 8025640:	fb09 2901 	mla	r9, r9, r1, r2
 8025644:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025648:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802564c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025650:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025654:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025658:	4302      	orrs	r2, r0
 802565a:	e795      	b.n	8025588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802565c:	f8ae 2000 	strh.w	r2, [lr]
 8025660:	e7d6      	b.n	8025610 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025662:	b017      	add	sp, #92	; 0x5c
 8025664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802566c:	b085      	sub	sp, #20
 802566e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8025672:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025676:	2800      	cmp	r0, #0
 8025678:	9103      	str	r1, [sp, #12]
 802567a:	fb00 7406 	mla	r4, r0, r6, r7
 802567e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8025682:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8025686:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802568a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802568e:	eb02 0904 	add.w	r9, r2, r4
 8025692:	9501      	str	r5, [sp, #4]
 8025694:	f2c0 8141 	blt.w	802591a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025698:	4583      	cmp	fp, r0
 802569a:	f340 813e 	ble.w	802591a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802569e:	2f00      	cmp	r7, #0
 80256a0:	f2c0 8137 	blt.w	8025912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80256a4:	42be      	cmp	r6, r7
 80256a6:	f340 8134 	ble.w	8025912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80256aa:	f812 c004 	ldrb.w	ip, [r2, r4]
 80256ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80256b2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80256b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80256ba:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80256be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80256c2:	4355      	muls	r5, r2
 80256c4:	fb0c f203 	mul.w	r2, ip, r3
 80256c8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80256cc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80256d0:	441d      	add	r5, r3
 80256d2:	f102 0320 	add.w	r3, r2, #32
 80256d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80256da:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80256de:	0a1b      	lsrs	r3, r3, #8
 80256e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80256e4:	431c      	orrs	r4, r3
 80256e6:	1c7b      	adds	r3, r7, #1
 80256e8:	f100 811c 	bmi.w	8025924 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80256ec:	429e      	cmp	r6, r3
 80256ee:	f340 8119 	ble.w	8025924 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80256f2:	2900      	cmp	r1, #0
 80256f4:	f000 8119 	beq.w	802592a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80256f8:	9a01      	ldr	r2, [sp, #4]
 80256fa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80256fe:	8855      	ldrh	r5, [r2, #2]
 8025700:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025704:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8025708:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802570c:	fb08 f802 	mul.w	r8, r8, r2
 8025710:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025714:	435d      	muls	r5, r3
 8025716:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802571a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802571e:	44d0      	add	r8, sl
 8025720:	f105 0a20 	add.w	sl, r5, #32
 8025724:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025728:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802572c:	0a2d      	lsrs	r5, r5, #8
 802572e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025732:	432a      	orrs	r2, r5
 8025734:	3001      	adds	r0, #1
 8025736:	f100 80fe 	bmi.w	8025936 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802573a:	4583      	cmp	fp, r0
 802573c:	f340 80fb 	ble.w	8025936 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025740:	f1be 0f00 	cmp.w	lr, #0
 8025744:	f000 80fc 	beq.w	8025940 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8025748:	2f00      	cmp	r7, #0
 802574a:	f2c0 80f1 	blt.w	8025930 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802574e:	42be      	cmp	r6, r7
 8025750:	f340 80ee 	ble.w	8025930 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025754:	9801      	ldr	r0, [sp, #4]
 8025756:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802575a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802575e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025762:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025766:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802576a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802576e:	fb0a fa00 	mul.w	sl, sl, r0
 8025772:	fb05 f808 	mul.w	r8, r5, r8
 8025776:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802577a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802577e:	4482      	add	sl, r0
 8025780:	f108 0020 	add.w	r0, r8, #32
 8025784:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025788:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802578c:	0a00      	lsrs	r0, r0, #8
 802578e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025792:	ea4b 0b00 	orr.w	fp, fp, r0
 8025796:	3701      	adds	r7, #1
 8025798:	f100 80d7 	bmi.w	802594a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802579c:	42be      	cmp	r6, r7
 802579e:	f340 80d4 	ble.w	802594a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80257a2:	2900      	cmp	r1, #0
 80257a4:	f000 80d4 	beq.w	8025950 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80257a8:	3601      	adds	r6, #1
 80257aa:	9801      	ldr	r0, [sp, #4]
 80257ac:	f819 7006 	ldrb.w	r7, [r9, r6]
 80257b0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80257b4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80257b8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80257bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80257c0:	fb09 f906 	mul.w	r9, r9, r6
 80257c4:	fb07 f800 	mul.w	r8, r7, r0
 80257c8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80257cc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80257d0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80257d4:	44d1      	add	r9, sl
 80257d6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80257da:	f108 0020 	add.w	r0, r8, #32
 80257de:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80257e2:	0a00      	lsrs	r0, r0, #8
 80257e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80257e8:	4330      	orrs	r0, r6
 80257ea:	b28e      	uxth	r6, r1
 80257ec:	fa1f f98e 	uxth.w	r9, lr
 80257f0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80257f4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80257f8:	fb06 f809 	mul.w	r8, r6, r9
 80257fc:	0136      	lsls	r6, r6, #4
 80257fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025802:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025806:	9601      	str	r6, [sp, #4]
 8025808:	ea4a 0404 	orr.w	r4, sl, r4
 802580c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025810:	fa1f f689 	uxth.w	r6, r9
 8025814:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025818:	fb11 f90e 	smulbb	r9, r1, lr
 802581c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025820:	9602      	str	r6, [sp, #8]
 8025822:	4626      	mov	r6, r4
 8025824:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8025828:	f1ce 0410 	rsb	r4, lr, #16
 802582c:	ea4a 0202 	orr.w	r2, sl, r2
 8025830:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025834:	1a64      	subs	r4, r4, r1
 8025836:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802583a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802583e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025842:	434a      	muls	r2, r1
 8025844:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8025848:	ea4a 0000 	orr.w	r0, sl, r0
 802584c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025850:	fb04 2406 	mla	r4, r4, r6, r2
 8025854:	9903      	ldr	r1, [sp, #12]
 8025856:	fb09 4200 	mla	r2, r9, r0, r4
 802585a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802585e:	9801      	ldr	r0, [sp, #4]
 8025860:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025864:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025868:	8809      	ldrh	r1, [r1, #0]
 802586a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802586e:	ea44 0b0b 	orr.w	fp, r4, fp
 8025872:	9c02      	ldr	r4, [sp, #8]
 8025874:	1b00      	subs	r0, r0, r4
 8025876:	9c01      	ldr	r4, [sp, #4]
 8025878:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802587c:	eba4 0608 	sub.w	r6, r4, r8
 8025880:	b280      	uxth	r0, r0
 8025882:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025886:	b2b6      	uxth	r6, r6
 8025888:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802588c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025890:	4373      	muls	r3, r6
 8025892:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025896:	fb0c 3300 	mla	r3, ip, r0, r3
 802589a:	9802      	ldr	r0, [sp, #8]
 802589c:	ea42 0e0e 	orr.w	lr, r2, lr
 80258a0:	fb00 3505 	mla	r5, r0, r5, r3
 80258a4:	120b      	asrs	r3, r1, #8
 80258a6:	10c8      	asrs	r0, r1, #3
 80258a8:	fb08 5707 	mla	r7, r8, r7, r5
 80258ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80258b0:	00c9      	lsls	r1, r1, #3
 80258b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80258b6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80258ba:	fa1f f28e 	uxth.w	r2, lr
 80258be:	b2c9      	uxtb	r1, r1
 80258c0:	b2ff      	uxtb	r7, r7
 80258c2:	437b      	muls	r3, r7
 80258c4:	4378      	muls	r0, r7
 80258c6:	434f      	muls	r7, r1
 80258c8:	1c59      	adds	r1, r3, #1
 80258ca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80258ce:	1213      	asrs	r3, r2, #8
 80258d0:	f023 0307 	bic.w	r3, r3, #7
 80258d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80258d8:	1c41      	adds	r1, r0, #1
 80258da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80258de:	10d1      	asrs	r1, r2, #3
 80258e0:	021b      	lsls	r3, r3, #8
 80258e2:	f021 0103 	bic.w	r1, r1, #3
 80258e6:	00d2      	lsls	r2, r2, #3
 80258e8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80258ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80258f0:	00c9      	lsls	r1, r1, #3
 80258f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80258f6:	430b      	orrs	r3, r1
 80258f8:	1c79      	adds	r1, r7, #1
 80258fa:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80258fe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025902:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025906:	431a      	orrs	r2, r3
 8025908:	9b03      	ldr	r3, [sp, #12]
 802590a:	801a      	strh	r2, [r3, #0]
 802590c:	b005      	add	sp, #20
 802590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025912:	f04f 0c00 	mov.w	ip, #0
 8025916:	4664      	mov	r4, ip
 8025918:	e6e5      	b.n	80256e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802591a:	2300      	movs	r3, #0
 802591c:	469c      	mov	ip, r3
 802591e:	461a      	mov	r2, r3
 8025920:	461c      	mov	r4, r3
 8025922:	e707      	b.n	8025734 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025924:	2300      	movs	r3, #0
 8025926:	461a      	mov	r2, r3
 8025928:	e704      	b.n	8025734 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802592a:	460b      	mov	r3, r1
 802592c:	460a      	mov	r2, r1
 802592e:	e701      	b.n	8025734 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025930:	2500      	movs	r5, #0
 8025932:	46ab      	mov	fp, r5
 8025934:	e72f      	b.n	8025796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8025936:	2700      	movs	r7, #0
 8025938:	463d      	mov	r5, r7
 802593a:	4638      	mov	r0, r7
 802593c:	46bb      	mov	fp, r7
 802593e:	e754      	b.n	80257ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025940:	4677      	mov	r7, lr
 8025942:	4675      	mov	r5, lr
 8025944:	4670      	mov	r0, lr
 8025946:	46f3      	mov	fp, lr
 8025948:	e74f      	b.n	80257ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802594a:	2700      	movs	r7, #0
 802594c:	4638      	mov	r0, r7
 802594e:	e74c      	b.n	80257ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025950:	460f      	mov	r7, r1
 8025952:	4608      	mov	r0, r1
 8025954:	e749      	b.n	80257ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802595c:	b093      	sub	sp, #76	; 0x4c
 802595e:	9210      	str	r2, [sp, #64]	; 0x40
 8025960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025962:	9011      	str	r0, [sp, #68]	; 0x44
 8025964:	910e      	str	r1, [sp, #56]	; 0x38
 8025966:	6850      	ldr	r0, [r2, #4]
 8025968:	9306      	str	r3, [sp, #24]
 802596a:	6812      	ldr	r2, [r2, #0]
 802596c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025970:	fb00 1303 	mla	r3, r0, r3, r1
 8025974:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025978:	9307      	str	r3, [sp, #28]
 802597a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802597c:	681b      	ldr	r3, [r3, #0]
 802597e:	9308      	str	r3, [sp, #32]
 8025980:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025982:	685b      	ldr	r3, [r3, #4]
 8025984:	9309      	str	r3, [sp, #36]	; 0x24
 8025986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025988:	2b00      	cmp	r3, #0
 802598a:	dc03      	bgt.n	8025994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802598c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802598e:	2b00      	cmp	r3, #0
 8025990:	f340 83b6 	ble.w	8026100 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025994:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025996:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802599a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802599e:	1e48      	subs	r0, r1, #1
 80259a0:	1e55      	subs	r5, r2, #1
 80259a2:	9b06      	ldr	r3, [sp, #24]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	f340 8165 	ble.w	8025c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80259aa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80259ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80259ae:	1436      	asrs	r6, r6, #16
 80259b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80259b4:	d406      	bmi.n	80259c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80259b6:	4286      	cmp	r6, r0
 80259b8:	da04      	bge.n	80259c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	db02      	blt.n	80259c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80259be:	42ab      	cmp	r3, r5
 80259c0:	f2c0 8159 	blt.w	8025c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80259c4:	3601      	adds	r6, #1
 80259c6:	f100 8146 	bmi.w	8025c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80259ca:	42b1      	cmp	r1, r6
 80259cc:	f2c0 8143 	blt.w	8025c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80259d0:	3301      	adds	r3, #1
 80259d2:	f100 8140 	bmi.w	8025c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80259d6:	429a      	cmp	r2, r3
 80259d8:	f2c0 813d 	blt.w	8025c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80259dc:	9b06      	ldr	r3, [sp, #24]
 80259de:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80259e2:	9f07      	ldr	r7, [sp, #28]
 80259e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80259e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	f340 8166 	ble.w	8025cba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80259ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80259f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80259f2:	1418      	asrs	r0, r3, #16
 80259f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80259f6:	142d      	asrs	r5, r5, #16
 80259f8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80259fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80259fe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025a02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025a08:	f100 81f0 	bmi.w	8025dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025a0c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025a10:	4575      	cmp	r5, lr
 8025a12:	f280 81eb 	bge.w	8025dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025a16:	2800      	cmp	r0, #0
 8025a18:	f2c0 81e8 	blt.w	8025dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025a1c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025a20:	4570      	cmp	r0, lr
 8025a22:	f280 81e3 	bge.w	8025dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025a26:	b212      	sxth	r2, r2
 8025a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a2a:	fa1f fe81 	uxth.w	lr, r1
 8025a2e:	fb00 5002 	mla	r0, r0, r2, r5
 8025a32:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025a36:	eb03 0a00 	add.w	sl, r3, r0
 8025a3a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025a3e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025a42:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025a46:	b29b      	uxth	r3, r3
 8025a48:	f1bc 0f00 	cmp.w	ip, #0
 8025a4c:	f000 817b 	beq.w	8025d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025a50:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025a54:	eb0a 0b02 	add.w	fp, sl, r2
 8025a58:	fa1f fa8c 	uxth.w	sl, ip
 8025a5c:	940a      	str	r4, [sp, #40]	; 0x28
 8025a5e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a62:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025a66:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025a6a:	eba5 050e 	sub.w	r5, r5, lr
 8025a6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025a70:	fa1f fa8a 	uxth.w	sl, sl
 8025a74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a76:	b2ad      	uxth	r5, r5
 8025a78:	eba3 030a 	sub.w	r3, r3, sl
 8025a7c:	fb08 f505 	mul.w	r5, r8, r5
 8025a80:	b29b      	uxth	r3, r3
 8025a82:	fb09 5303 	mla	r3, r9, r3, r5
 8025a86:	fb0a 3304 	mla	r3, sl, r4, r3
 8025a8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025a8c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025a90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	f000 80d1 	beq.w	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025a9a:	9c08      	ldr	r4, [sp, #32]
 8025a9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025aa0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025aa4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025aa8:	f000 8152 	beq.w	8025d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025aac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025ab0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025ab4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ab8:	fb0a fe0e 	mul.w	lr, sl, lr
 8025abc:	fb09 f000 	mul.w	r0, r9, r0
 8025ac0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025ac4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025ac8:	f100 0b20 	add.w	fp, r0, #32
 8025acc:	44ce      	add	lr, r9
 8025ace:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025ad2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ad6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ada:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025ade:	ea4e 0909 	orr.w	r9, lr, r9
 8025ae2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025ae6:	8868      	ldrh	r0, [r5, #2]
 8025ae8:	d019      	beq.n	8025b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025aea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025aee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025af2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025af6:	fb0a fe0e 	mul.w	lr, sl, lr
 8025afa:	fb08 f800 	mul.w	r8, r8, r0
 8025afe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025b02:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025b06:	f108 0b20 	add.w	fp, r8, #32
 8025b0a:	4486      	add	lr, r0
 8025b0c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025b10:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025b14:	0a00      	lsrs	r0, r0, #8
 8025b16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025b1a:	ea4e 0000 	orr.w	r0, lr, r0
 8025b1e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025b22:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025b26:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025b2a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b2e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025b32:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b36:	ea4e 0909 	orr.w	r9, lr, r9
 8025b3a:	ea4a 0000 	orr.w	r0, sl, r0
 8025b3e:	f1bc 0f00 	cmp.w	ip, #0
 8025b42:	f000 8107 	beq.w	8025d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025b46:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025b4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b4c:	3a01      	subs	r2, #1
 8025b4e:	2cff      	cmp	r4, #255	; 0xff
 8025b50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025b54:	f102 0202 	add.w	r2, r2, #2
 8025b58:	eb05 0e02 	add.w	lr, r5, r2
 8025b5c:	5aaa      	ldrh	r2, [r5, r2]
 8025b5e:	d018      	beq.n	8025b92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025b60:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025b64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b68:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025b6c:	fb04 fa02 	mul.w	sl, r4, r2
 8025b70:	fb08 f805 	mul.w	r8, r8, r5
 8025b74:	f10a 0520 	add.w	r5, sl, #32
 8025b78:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025b7c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025b80:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025b84:	4442      	add	r2, r8
 8025b86:	0a2d      	lsrs	r5, r5, #8
 8025b88:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025b8c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025b90:	432a      	orrs	r2, r5
 8025b92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b94:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025b98:	2cff      	cmp	r4, #255	; 0xff
 8025b9a:	d01a      	beq.n	8025bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025b9c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025ba0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025ba4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ba8:	fb04 fa05 	mul.w	sl, r4, r5
 8025bac:	fb08 f80e 	mul.w	r8, r8, lr
 8025bb0:	f10a 0e20 	add.w	lr, sl, #32
 8025bb4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025bb8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025bbc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025bc0:	4445      	add	r5, r8
 8025bc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025bc6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025bca:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025bce:	ea45 050e 	orr.w	r5, r5, lr
 8025bd2:	fb1c fe01 	smulbb	lr, ip, r1
 8025bd6:	f1cc 0810 	rsb	r8, ip, #16
 8025bda:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025bde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025be2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025be6:	eba8 0801 	sub.w	r8, r8, r1
 8025bea:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025bee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025bf2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025bf6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025bfa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025bfe:	ea4a 0202 	orr.w	r2, sl, r2
 8025c02:	4341      	muls	r1, r0
 8025c04:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025c08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c0c:	fb09 1108 	mla	r1, r9, r8, r1
 8025c10:	ea4b 0505 	orr.w	r5, fp, r5
 8025c14:	fb0c 1102 	mla	r1, ip, r2, r1
 8025c18:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025c1c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025c20:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025c24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c28:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025c2c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025c30:	fa1f f28e 	uxth.w	r2, lr
 8025c34:	2bff      	cmp	r3, #255	; 0xff
 8025c36:	f040 80a1 	bne.w	8025d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025c3a:	803a      	strh	r2, [r7, #0]
 8025c3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025c3e:	3702      	adds	r7, #2
 8025c40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025c42:	4413      	add	r3, r2
 8025c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025c46:	931d      	str	r3, [sp, #116]	; 0x74
 8025c48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c4a:	441a      	add	r2, r3
 8025c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025c4e:	3b01      	subs	r3, #1
 8025c50:	921e      	str	r2, [sp, #120]	; 0x78
 8025c52:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c54:	e6c7      	b.n	80259e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025c56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025c58:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025c5a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025c5c:	4433      	add	r3, r6
 8025c5e:	931d      	str	r3, [sp, #116]	; 0x74
 8025c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c62:	441c      	add	r4, r3
 8025c64:	9b06      	ldr	r3, [sp, #24]
 8025c66:	3b01      	subs	r3, #1
 8025c68:	941e      	str	r4, [sp, #120]	; 0x78
 8025c6a:	9306      	str	r3, [sp, #24]
 8025c6c:	9b07      	ldr	r3, [sp, #28]
 8025c6e:	3302      	adds	r3, #2
 8025c70:	9307      	str	r3, [sp, #28]
 8025c72:	e696      	b.n	80259a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025c74:	d028      	beq.n	8025cc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025c76:	9b06      	ldr	r3, [sp, #24]
 8025c78:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025c7a:	3b01      	subs	r3, #1
 8025c7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8025c7e:	fb00 5003 	mla	r0, r0, r3, r5
 8025c82:	1400      	asrs	r0, r0, #16
 8025c84:	f53f aeaa 	bmi.w	80259dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025c88:	3901      	subs	r1, #1
 8025c8a:	4288      	cmp	r0, r1
 8025c8c:	f6bf aea6 	bge.w	80259dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025c90:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025c92:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025c94:	fb01 0303 	mla	r3, r1, r3, r0
 8025c98:	141b      	asrs	r3, r3, #16
 8025c9a:	f53f ae9f 	bmi.w	80259dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025c9e:	3a01      	subs	r2, #1
 8025ca0:	4293      	cmp	r3, r2
 8025ca2:	f6bf ae9b 	bge.w	80259dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ca6:	9b06      	ldr	r3, [sp, #24]
 8025ca8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025cac:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8025cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	f300 80b6 	bgt.w	8025e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025cba:	9b06      	ldr	r3, [sp, #24]
 8025cbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025cc0:	9b07      	ldr	r3, [sp, #28]
 8025cc2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025cc6:	9307      	str	r3, [sp, #28]
 8025cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	f340 8218 	ble.w	8026100 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025cd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025cd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025cda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025cde:	eef0 6a62 	vmov.f32	s13, s5
 8025ce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ce6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025cea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cee:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8025cf2:	eef0 6a43 	vmov.f32	s13, s6
 8025cf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cfa:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8025cfe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025d02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025d06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025d0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025d0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025d12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025d16:	ee12 2a90 	vmov	r2, s5
 8025d1a:	eef0 2a47 	vmov.f32	s5, s14
 8025d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d22:	ee13 2a10 	vmov	r2, s6
 8025d26:	931f      	str	r3, [sp, #124]	; 0x7c
 8025d28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025d2a:	eeb0 3a67 	vmov.f32	s6, s15
 8025d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d32:	9320      	str	r3, [sp, #128]	; 0x80
 8025d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025d36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025d38:	3b01      	subs	r3, #1
 8025d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8025d3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025d3e:	bf08      	it	eq
 8025d40:	4613      	moveq	r3, r2
 8025d42:	9306      	str	r3, [sp, #24]
 8025d44:	e61f      	b.n	8025986 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025d46:	fb08 f505 	mul.w	r5, r8, r5
 8025d4a:	fb09 5303 	mla	r3, r9, r3, r5
 8025d4e:	e69f      	b.n	8025a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025d50:	4681      	mov	r9, r0
 8025d52:	e6c6      	b.n	8025ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025d54:	f1c1 0210 	rsb	r2, r1, #16
 8025d58:	4341      	muls	r1, r0
 8025d5a:	fb09 1902 	mla	r9, r9, r2, r1
 8025d5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025d62:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025d66:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025d6a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d6e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025d72:	ea42 0909 	orr.w	r9, r2, r9
 8025d76:	fa1f f289 	uxth.w	r2, r9
 8025d7a:	e75b      	b.n	8025c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025d7c:	f8b7 c000 	ldrh.w	ip, [r7]
 8025d80:	43db      	mvns	r3, r3
 8025d82:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025d86:	fa5f fe83 	uxtb.w	lr, r3
 8025d8a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025d8e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025d92:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025d96:	fb00 f00e 	mul.w	r0, r0, lr
 8025d9a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025d9e:	b2db      	uxtb	r3, r3
 8025da0:	1c41      	adds	r1, r0, #1
 8025da2:	fb05 f50e 	mul.w	r5, r5, lr
 8025da6:	fb03 f30e 	mul.w	r3, r3, lr
 8025daa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8025dae:	1211      	asrs	r1, r2, #8
 8025db0:	f021 0107 	bic.w	r1, r1, #7
 8025db4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025db8:	48d3      	ldr	r0, [pc, #844]	; (8026108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025dba:	b2c9      	uxtb	r1, r1
 8025dbc:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8025dc0:	1c69      	adds	r1, r5, #1
 8025dc2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025dc6:	10d1      	asrs	r1, r2, #3
 8025dc8:	00d2      	lsls	r2, r2, #3
 8025dca:	f021 0103 	bic.w	r1, r1, #3
 8025dce:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025dd2:	00c9      	lsls	r1, r1, #3
 8025dd4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025dd8:	4301      	orrs	r1, r0
 8025dda:	1c58      	adds	r0, r3, #1
 8025ddc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025de0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025de4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025de8:	430a      	orrs	r2, r1
 8025dea:	e726      	b.n	8025c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025dec:	f115 0e01 	adds.w	lr, r5, #1
 8025df0:	f53f af24 	bmi.w	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025df4:	4572      	cmp	r2, lr
 8025df6:	f6ff af21 	blt.w	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025dfa:	f110 0e01 	adds.w	lr, r0, #1
 8025dfe:	f53f af1d 	bmi.w	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025e02:	4573      	cmp	r3, lr
 8025e04:	f6ff af1a 	blt.w	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025e08:	b21b      	sxth	r3, r3
 8025e0a:	b212      	sxth	r2, r2
 8025e0c:	9301      	str	r3, [sp, #4]
 8025e0e:	9200      	str	r2, [sp, #0]
 8025e10:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025e14:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025e18:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025e1c:	4639      	mov	r1, r7
 8025e1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025e20:	f7ff fc22 	bl	8025668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025e24:	e70a      	b.n	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025e26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025e28:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025e2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025e2e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025e32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e34:	fa1f fc82 	uxth.w	ip, r2
 8025e38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025e3e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025e42:	141f      	asrs	r7, r3, #16
 8025e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025e46:	141b      	asrs	r3, r3, #16
 8025e48:	fb01 3707 	mla	r7, r1, r7, r3
 8025e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e4e:	eb03 0a07 	add.w	sl, r3, r7
 8025e52:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025e56:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025e5a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025e5e:	b29b      	uxth	r3, r3
 8025e60:	2d00      	cmp	r5, #0
 8025e62:	f000 80fe 	beq.w	8026062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025e66:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025e6a:	eb0a 0b01 	add.w	fp, sl, r1
 8025e6e:	fa1f fa85 	uxth.w	sl, r5
 8025e72:	940c      	str	r4, [sp, #48]	; 0x30
 8025e74:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e78:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025e7c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025e80:	eba0 000c 	sub.w	r0, r0, ip
 8025e84:	940d      	str	r4, [sp, #52]	; 0x34
 8025e86:	fa1f fa8a 	uxth.w	sl, sl
 8025e8a:	b280      	uxth	r0, r0
 8025e8c:	eba3 030a 	sub.w	r3, r3, sl
 8025e90:	fb08 f000 	mul.w	r0, r8, r0
 8025e94:	b29b      	uxth	r3, r3
 8025e96:	fb09 0303 	mla	r3, r9, r3, r0
 8025e9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025e9c:	fb0a 3300 	mla	r3, sl, r0, r3
 8025ea0:	fb0c 3304 	mla	r3, ip, r4, r3
 8025ea4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	f000 80cc 	beq.w	8026046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025eae:	9808      	ldr	r0, [sp, #32]
 8025eb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025eb4:	9c08      	ldr	r4, [sp, #32]
 8025eb6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025eba:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025ebe:	f000 80d5 	beq.w	802606c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025ec2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025ec6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025eca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025ece:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ed2:	fb09 f707 	mul.w	r7, r9, r7
 8025ed6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025eda:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025ede:	f107 0b20 	add.w	fp, r7, #32
 8025ee2:	44cc      	add	ip, r9
 8025ee4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025ee8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025eec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ef0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025ef4:	ea4c 0909 	orr.w	r9, ip, r9
 8025ef8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025efc:	8847      	ldrh	r7, [r0, #2]
 8025efe:	d019      	beq.n	8025f34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8025f00:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025f04:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025f08:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f0c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025f10:	fb08 f807 	mul.w	r8, r8, r7
 8025f14:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025f18:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025f1c:	f108 0b20 	add.w	fp, r8, #32
 8025f20:	44bc      	add	ip, r7
 8025f22:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025f26:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025f2a:	0a3f      	lsrs	r7, r7, #8
 8025f2c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f30:	ea4c 0707 	orr.w	r7, ip, r7
 8025f34:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025f38:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025f3c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025f40:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025f44:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025f48:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f4c:	ea4c 0909 	orr.w	r9, ip, r9
 8025f50:	ea4a 0707 	orr.w	r7, sl, r7
 8025f54:	2d00      	cmp	r5, #0
 8025f56:	f000 808b 	beq.w	8026070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025f5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025f5e:	3901      	subs	r1, #1
 8025f60:	0049      	lsls	r1, r1, #1
 8025f62:	3102      	adds	r1, #2
 8025f64:	eb00 0c01 	add.w	ip, r0, r1
 8025f68:	5a41      	ldrh	r1, [r0, r1]
 8025f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025f6c:	28ff      	cmp	r0, #255	; 0xff
 8025f6e:	d019      	beq.n	8025fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8025f70:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025f74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025f76:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025f7a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f7e:	fb04 fa01 	mul.w	sl, r4, r1
 8025f82:	fb08 f800 	mul.w	r8, r8, r0
 8025f86:	f10a 0020 	add.w	r0, sl, #32
 8025f8a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025f8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f92:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025f96:	4441      	add	r1, r8
 8025f98:	0a00      	lsrs	r0, r0, #8
 8025f9a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025f9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025fa2:	4301      	orrs	r1, r0
 8025fa4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025fa6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025faa:	2cff      	cmp	r4, #255	; 0xff
 8025fac:	d01a      	beq.n	8025fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8025fae:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025fb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025fb6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025fba:	fb04 fa00 	mul.w	sl, r4, r0
 8025fbe:	fb08 f80c 	mul.w	r8, r8, ip
 8025fc2:	f10a 0c20 	add.w	ip, sl, #32
 8025fc6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025fca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025fce:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025fd2:	4440      	add	r0, r8
 8025fd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025fdc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025fe0:	ea40 000c 	orr.w	r0, r0, ip
 8025fe4:	fb15 fc02 	smulbb	ip, r5, r2
 8025fe8:	f1c5 0810 	rsb	r8, r5, #16
 8025fec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025ff0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025ff4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025ff8:	eba8 0802 	sub.w	r8, r8, r2
 8025ffc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026000:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026004:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026008:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802600c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026010:	ea4a 0101 	orr.w	r1, sl, r1
 8026014:	437a      	muls	r2, r7
 8026016:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802601a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802601e:	fb09 2208 	mla	r2, r9, r8, r2
 8026022:	ea4b 0000 	orr.w	r0, fp, r0
 8026026:	fb05 2201 	mla	r2, r5, r1, r2
 802602a:	fb0c 2200 	mla	r2, ip, r0, r2
 802602e:	0d57      	lsrs	r7, r2, #21
 8026030:	0952      	lsrs	r2, r2, #5
 8026032:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026036:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802603a:	433a      	orrs	r2, r7
 802603c:	2bff      	cmp	r3, #255	; 0xff
 802603e:	b292      	uxth	r2, r2
 8026040:	d127      	bne.n	8026092 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8026042:	f8ae 2000 	strh.w	r2, [lr]
 8026046:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026048:	f10e 0e02 	add.w	lr, lr, #2
 802604c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802604e:	4413      	add	r3, r2
 8026050:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026052:	931d      	str	r3, [sp, #116]	; 0x74
 8026054:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026056:	441a      	add	r2, r3
 8026058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802605a:	3b01      	subs	r3, #1
 802605c:	921e      	str	r2, [sp, #120]	; 0x78
 802605e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026060:	e627      	b.n	8025cb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026062:	fb08 f000 	mul.w	r0, r8, r0
 8026066:	fb09 0303 	mla	r3, r9, r3, r0
 802606a:	e71b      	b.n	8025ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802606c:	46b9      	mov	r9, r7
 802606e:	e743      	b.n	8025ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8026070:	f1c2 0110 	rsb	r1, r2, #16
 8026074:	437a      	muls	r2, r7
 8026076:	fb09 2901 	mla	r9, r9, r1, r2
 802607a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802607e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026082:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026086:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802608a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802608e:	4302      	orrs	r2, r0
 8026090:	e7d4      	b.n	802603c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8026092:	f8be 7000 	ldrh.w	r7, [lr]
 8026096:	43db      	mvns	r3, r3
 8026098:	4c1b      	ldr	r4, [pc, #108]	; (8026108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802609a:	1238      	asrs	r0, r7, #8
 802609c:	fa5f fc83 	uxtb.w	ip, r3
 80260a0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80260a4:	10fd      	asrs	r5, r7, #3
 80260a6:	00fb      	lsls	r3, r7, #3
 80260a8:	fb00 f00c 	mul.w	r0, r0, ip
 80260ac:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80260b0:	b2db      	uxtb	r3, r3
 80260b2:	fb05 f10c 	mul.w	r1, r5, ip
 80260b6:	1c45      	adds	r5, r0, #1
 80260b8:	fb03 f30c 	mul.w	r3, r3, ip
 80260bc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80260c0:	1215      	asrs	r5, r2, #8
 80260c2:	f025 0507 	bic.w	r5, r5, #7
 80260c6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80260ca:	1c4d      	adds	r5, r1, #1
 80260cc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80260d0:	10d1      	asrs	r1, r2, #3
 80260d2:	b2c0      	uxtb	r0, r0
 80260d4:	f021 0103 	bic.w	r1, r1, #3
 80260d8:	00d2      	lsls	r2, r2, #3
 80260da:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80260de:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80260e2:	00c9      	lsls	r1, r1, #3
 80260e4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80260e8:	4308      	orrs	r0, r1
 80260ea:	1c59      	adds	r1, r3, #1
 80260ec:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80260f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80260f4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80260f8:	4318      	orrs	r0, r3
 80260fa:	f8ae 0000 	strh.w	r0, [lr]
 80260fe:	e7a2      	b.n	8026046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026100:	b013      	add	sp, #76	; 0x4c
 8026102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026106:	bf00      	nop
 8026108:	fffff800 	.word	0xfffff800

0802610c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026110:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026114:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026118:	fb05 4c03 	mla	ip, r5, r3, r4
 802611c:	2d00      	cmp	r5, #0
 802611e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8026122:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026126:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802612a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802612e:	8808      	ldrh	r0, [r1, #0]
 8026130:	f2c0 80a7 	blt.w	8026282 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026134:	45aa      	cmp	sl, r5
 8026136:	f340 80a4 	ble.w	8026282 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802613a:	2c00      	cmp	r4, #0
 802613c:	f2c0 809f 	blt.w	802627e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026140:	42a3      	cmp	r3, r4
 8026142:	f340 809c 	ble.w	802627e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026146:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802614a:	1c62      	adds	r2, r4, #1
 802614c:	f100 809c 	bmi.w	8026288 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026150:	4293      	cmp	r3, r2
 8026152:	f340 8099 	ble.w	8026288 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026156:	f1b9 0f00 	cmp.w	r9, #0
 802615a:	f000 8095 	beq.w	8026288 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802615e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8026162:	3501      	adds	r5, #1
 8026164:	f100 8094 	bmi.w	8026290 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026168:	45aa      	cmp	sl, r5
 802616a:	f340 8091 	ble.w	8026290 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802616e:	2f00      	cmp	r7, #0
 8026170:	f000 808e 	beq.w	8026290 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026174:	2c00      	cmp	r4, #0
 8026176:	f2c0 8089 	blt.w	802628c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802617a:	42a3      	cmp	r3, r4
 802617c:	f340 8086 	ble.w	802628c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026180:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8026184:	3401      	adds	r4, #1
 8026186:	f100 8086 	bmi.w	8026296 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802618a:	42a3      	cmp	r3, r4
 802618c:	f340 8083 	ble.w	8026296 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026190:	f1b9 0f00 	cmp.w	r9, #0
 8026194:	d07f      	beq.n	8026296 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026196:	3301      	adds	r3, #1
 8026198:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802619c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80261a0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80261a4:	fb19 fe07 	smulbb	lr, r9, r7
 80261a8:	f1c7 0210 	rsb	r2, r7, #16
 80261ac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80261b0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80261b4:	eba2 0209 	sub.w	r2, r2, r9
 80261b8:	ea44 0808 	orr.w	r8, r4, r8
 80261bc:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80261c0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80261c4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80261c8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80261cc:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80261d0:	ea44 0c0c 	orr.w	ip, r4, ip
 80261d4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80261d8:	fb04 f40c 	mul.w	r4, r4, ip
 80261dc:	fb02 4808 	mla	r8, r2, r8, r4
 80261e0:	041a      	lsls	r2, r3, #16
 80261e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80261e6:	b2b4      	uxth	r4, r6
 80261e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80261ec:	43f6      	mvns	r6, r6
 80261ee:	4313      	orrs	r3, r2
 80261f0:	042a      	lsls	r2, r5, #16
 80261f2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80261f6:	b2f6      	uxtb	r6, r6
 80261f8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80261fc:	fb0e 8303 	mla	r3, lr, r3, r8
 8026200:	432a      	orrs	r2, r5
 8026202:	fb07 3202 	mla	r2, r7, r2, r3
 8026206:	10c7      	asrs	r7, r0, #3
 8026208:	0d53      	lsrs	r3, r2, #21
 802620a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802620e:	0952      	lsrs	r2, r2, #5
 8026210:	fb17 f706 	smulbb	r7, r7, r6
 8026214:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026218:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802621c:	431a      	orrs	r2, r3
 802621e:	b293      	uxth	r3, r2
 8026220:	1202      	asrs	r2, r0, #8
 8026222:	121d      	asrs	r5, r3, #8
 8026224:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026228:	00c0      	lsls	r0, r0, #3
 802622a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802622e:	fb12 f206 	smulbb	r2, r2, r6
 8026232:	b2c0      	uxtb	r0, r0
 8026234:	fb05 2504 	mla	r5, r5, r4, r2
 8026238:	10da      	asrs	r2, r3, #3
 802623a:	fb10 f006 	smulbb	r0, r0, r6
 802623e:	00db      	lsls	r3, r3, #3
 8026240:	b2ad      	uxth	r5, r5
 8026242:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026246:	b2db      	uxtb	r3, r3
 8026248:	fb02 7204 	mla	r2, r2, r4, r7
 802624c:	fb03 0004 	mla	r0, r3, r4, r0
 8026250:	1c6b      	adds	r3, r5, #1
 8026252:	b292      	uxth	r2, r2
 8026254:	b280      	uxth	r0, r0
 8026256:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802625a:	1c43      	adds	r3, r0, #1
 802625c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026260:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026264:	1c50      	adds	r0, r2, #1
 8026266:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802626a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802626e:	0952      	lsrs	r2, r2, #5
 8026270:	432b      	orrs	r3, r5
 8026272:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026276:	4313      	orrs	r3, r2
 8026278:	800b      	strh	r3, [r1, #0]
 802627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802627e:	4680      	mov	r8, r0
 8026280:	e763      	b.n	802614a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026282:	4684      	mov	ip, r0
 8026284:	4680      	mov	r8, r0
 8026286:	e76c      	b.n	8026162 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026288:	4684      	mov	ip, r0
 802628a:	e76a      	b.n	8026162 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802628c:	4605      	mov	r5, r0
 802628e:	e779      	b.n	8026184 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026290:	4603      	mov	r3, r0
 8026292:	4605      	mov	r5, r0
 8026294:	e782      	b.n	802619c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026296:	4603      	mov	r3, r0
 8026298:	e780      	b.n	802619c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802629a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802629a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802629e:	b093      	sub	sp, #76	; 0x4c
 80262a0:	461d      	mov	r5, r3
 80262a2:	9210      	str	r2, [sp, #64]	; 0x40
 80262a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80262a6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80262aa:	910a      	str	r1, [sp, #40]	; 0x28
 80262ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80262ae:	6859      	ldr	r1, [r3, #4]
 80262b0:	681b      	ldr	r3, [r3, #0]
 80262b2:	9011      	str	r0, [sp, #68]	; 0x44
 80262b4:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80262b8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80262bc:	fb01 2707 	mla	r7, r1, r7, r2
 80262c0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80262c4:	9307      	str	r3, [sp, #28]
 80262c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	9309      	str	r3, [sp, #36]	; 0x24
 80262cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80262ce:	43db      	mvns	r3, r3
 80262d0:	b2db      	uxtb	r3, r3
 80262d2:	9308      	str	r3, [sp, #32]
 80262d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	dc03      	bgt.n	80262e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80262da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80262dc:	2b00      	cmp	r3, #0
 80262de:	f340 8205 	ble.w	80266ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80262e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262ec:	1e48      	subs	r0, r1, #1
 80262ee:	f102 3cff 	add.w	ip, r2, #4294967295
 80262f2:	2d00      	cmp	r5, #0
 80262f4:	f340 80da 	ble.w	80264ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80262f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80262fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026300:	d406      	bmi.n	8026310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026302:	4586      	cmp	lr, r0
 8026304:	da04      	bge.n	8026310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026306:	2b00      	cmp	r3, #0
 8026308:	db02      	blt.n	8026310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802630a:	4563      	cmp	r3, ip
 802630c:	f2c0 80cf 	blt.w	80264ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026310:	f11e 0e01 	adds.w	lr, lr, #1
 8026314:	f100 80c1 	bmi.w	802649a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026318:	4571      	cmp	r1, lr
 802631a:	f2c0 80be 	blt.w	802649a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802631e:	3301      	adds	r3, #1
 8026320:	f100 80bb 	bmi.w	802649a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026324:	429a      	cmp	r2, r3
 8026326:	f2c0 80b8 	blt.w	802649a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802632a:	46a9      	mov	r9, r5
 802632c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026330:	f1b9 0f00 	cmp.w	r9, #0
 8026334:	f340 80d8 	ble.w	80264e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802633a:	1421      	asrs	r1, r4, #16
 802633c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026340:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026344:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026348:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802634c:	f100 8112 	bmi.w	8026574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026350:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026354:	4551      	cmp	r1, sl
 8026356:	f280 810d 	bge.w	8026574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802635a:	2800      	cmp	r0, #0
 802635c:	f2c0 810a 	blt.w	8026574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026360:	f103 3aff 	add.w	sl, r3, #4294967295
 8026364:	4550      	cmp	r0, sl
 8026366:	f280 8105 	bge.w	8026574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802636a:	fa0f f38e 	sxth.w	r3, lr
 802636e:	fb00 1103 	mla	r1, r0, r3, r1
 8026372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026374:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026378:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802637c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026380:	f1bc 0f00 	cmp.w	ip, #0
 8026384:	d007      	beq.n	8026396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026386:	005b      	lsls	r3, r3, #1
 8026388:	eb0a 0003 	add.w	r0, sl, r3
 802638c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026390:	930c      	str	r3, [sp, #48]	; 0x30
 8026392:	8843      	ldrh	r3, [r0, #2]
 8026394:	930d      	str	r3, [sp, #52]	; 0x34
 8026396:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802639a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802639e:	fb12 f30c 	smulbb	r3, r2, ip
 80263a2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80263a6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80263aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80263ae:	10db      	asrs	r3, r3, #3
 80263b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80263b4:	ea40 000e 	orr.w	r0, r0, lr
 80263b8:	f1cc 0e10 	rsb	lr, ip, #16
 80263bc:	ea4a 0101 	orr.w	r1, sl, r1
 80263c0:	9f08      	ldr	r7, [sp, #32]
 80263c2:	ebae 0e02 	sub.w	lr, lr, r2
 80263c6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80263ca:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80263ce:	4351      	muls	r1, r2
 80263d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80263d2:	fb0e 1e00 	mla	lr, lr, r0, r1
 80263d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80263d8:	0410      	lsls	r0, r2, #16
 80263da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80263de:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80263e2:	4310      	orrs	r0, r2
 80263e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80263e6:	0412      	lsls	r2, r2, #16
 80263e8:	fb03 e000 	mla	r0, r3, r0, lr
 80263ec:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80263f0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80263f4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80263f8:	ea42 020e 	orr.w	r2, r2, lr
 80263fc:	fb03 0302 	mla	r3, r3, r2, r0
 8026400:	f8b8 0000 	ldrh.w	r0, [r8]
 8026404:	0d5a      	lsrs	r2, r3, #21
 8026406:	095b      	lsrs	r3, r3, #5
 8026408:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802640c:	1201      	asrs	r1, r0, #8
 802640e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026412:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026416:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802641a:	00c0      	lsls	r0, r0, #3
 802641c:	4313      	orrs	r3, r2
 802641e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026422:	fb11 f107 	smulbb	r1, r1, r7
 8026426:	b2c0      	uxtb	r0, r0
 8026428:	b29b      	uxth	r3, r3
 802642a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802642e:	fb10 f007 	smulbb	r0, r0, r7
 8026432:	fb1e fe07 	smulbb	lr, lr, r7
 8026436:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802643a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802643e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026442:	10d9      	asrs	r1, r3, #3
 8026444:	00db      	lsls	r3, r3, #3
 8026446:	fa1f fc8c 	uxth.w	ip, ip
 802644a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802644e:	b2db      	uxtb	r3, r3
 8026450:	fb01 e102 	mla	r1, r1, r2, lr
 8026454:	fb03 0302 	mla	r3, r3, r2, r0
 8026458:	b289      	uxth	r1, r1
 802645a:	b29a      	uxth	r2, r3
 802645c:	f10c 0301 	add.w	r3, ip, #1
 8026460:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026464:	1c53      	adds	r3, r2, #1
 8026466:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802646a:	1c4a      	adds	r2, r1, #1
 802646c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026470:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026474:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026478:	0949      	lsrs	r1, r1, #5
 802647a:	ea43 030c 	orr.w	r3, r3, ip
 802647e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026482:	430b      	orrs	r3, r1
 8026484:	f8a8 3000 	strh.w	r3, [r8]
 8026488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802648a:	f108 0802 	add.w	r8, r8, #2
 802648e:	f109 39ff 	add.w	r9, r9, #4294967295
 8026492:	441c      	add	r4, r3
 8026494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026496:	441e      	add	r6, r3
 8026498:	e74a      	b.n	8026330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802649a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802649c:	3d01      	subs	r5, #1
 802649e:	441c      	add	r4, r3
 80264a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80264a2:	441e      	add	r6, r3
 80264a4:	9b07      	ldr	r3, [sp, #28]
 80264a6:	3302      	adds	r3, #2
 80264a8:	9307      	str	r3, [sp, #28]
 80264aa:	e722      	b.n	80262f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80264ac:	d022      	beq.n	80264f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80264ae:	1e6b      	subs	r3, r5, #1
 80264b0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80264b2:	fb00 4003 	mla	r0, r0, r3, r4
 80264b6:	1400      	asrs	r0, r0, #16
 80264b8:	f53f af37 	bmi.w	802632a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80264bc:	3901      	subs	r1, #1
 80264be:	4288      	cmp	r0, r1
 80264c0:	f6bf af33 	bge.w	802632a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80264c4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80264c6:	fb01 6303 	mla	r3, r1, r3, r6
 80264ca:	141b      	asrs	r3, r3, #16
 80264cc:	f53f af2d 	bmi.w	802632a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80264d0:	3a01      	subs	r2, #1
 80264d2:	4293      	cmp	r3, r2
 80264d4:	f6bf af29 	bge.w	802632a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80264d8:	46a8      	mov	r8, r5
 80264da:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80264de:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80264e2:	f1b8 0f00 	cmp.w	r8, #0
 80264e6:	dc60      	bgt.n	80265aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80264e8:	9b07      	ldr	r3, [sp, #28]
 80264ea:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80264ee:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80264f2:	9307      	str	r3, [sp, #28]
 80264f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	f340 80f8 	ble.w	80266ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80264fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026500:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026502:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026506:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802650a:	eef0 6a62 	vmov.f32	s13, s5
 802650e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026512:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026516:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802651a:	ee16 4a90 	vmov	r4, s13
 802651e:	eef0 6a43 	vmov.f32	s13, s6
 8026522:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026526:	ee16 6a90 	vmov	r6, s13
 802652a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802652e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026532:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026536:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802653a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802653e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026542:	ee12 2a90 	vmov	r2, s5
 8026546:	eef0 2a47 	vmov.f32	s5, s14
 802654a:	fb92 f3f3 	sdiv	r3, r2, r3
 802654e:	ee13 2a10 	vmov	r2, s6
 8026552:	931f      	str	r3, [sp, #124]	; 0x7c
 8026554:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026556:	eeb0 3a67 	vmov.f32	s6, s15
 802655a:	fb92 f3f3 	sdiv	r3, r2, r3
 802655e:	9320      	str	r3, [sp, #128]	; 0x80
 8026560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026562:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026564:	3b01      	subs	r3, #1
 8026566:	930a      	str	r3, [sp, #40]	; 0x28
 8026568:	bf08      	it	eq
 802656a:	4615      	moveq	r5, r2
 802656c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802656e:	bf18      	it	ne
 8026570:	461d      	movne	r5, r3
 8026572:	e6af      	b.n	80262d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026574:	f111 0a01 	adds.w	sl, r1, #1
 8026578:	d486      	bmi.n	8026488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802657a:	45d6      	cmp	lr, sl
 802657c:	db84      	blt.n	8026488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802657e:	f110 0a01 	adds.w	sl, r0, #1
 8026582:	d481      	bmi.n	8026488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026584:	4553      	cmp	r3, sl
 8026586:	f6ff af7f 	blt.w	8026488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802658a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802658c:	b21b      	sxth	r3, r3
 802658e:	9101      	str	r1, [sp, #4]
 8026590:	4641      	mov	r1, r8
 8026592:	9300      	str	r3, [sp, #0]
 8026594:	fa0f f38e 	sxth.w	r3, lr
 8026598:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802659c:	e9cd c704 	strd	ip, r7, [sp, #16]
 80265a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80265a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80265a4:	f7ff fdb2 	bl	802610c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80265a8:	e76e      	b.n	8026488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80265aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80265ac:	1430      	asrs	r0, r6, #16
 80265ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80265b0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80265b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80265b8:	1423      	asrs	r3, r4, #16
 80265ba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80265be:	fb01 3000 	mla	r0, r1, r0, r3
 80265c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265c4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80265c8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80265cc:	8858      	ldrh	r0, [r3, #2]
 80265ce:	f1be 0f00 	cmp.w	lr, #0
 80265d2:	d00b      	beq.n	80265ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80265d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80265d8:	3901      	subs	r1, #1
 80265da:	0049      	lsls	r1, r1, #1
 80265dc:	3102      	adds	r1, #2
 80265de:	eb03 0b01 	add.w	fp, r3, r1
 80265e2:	5a5b      	ldrh	r3, [r3, r1]
 80265e4:	930e      	str	r3, [sp, #56]	; 0x38
 80265e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80265ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80265ec:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80265f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80265f4:	fb12 f30e 	smulbb	r3, r2, lr
 80265f8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80265fc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8026600:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026604:	10db      	asrs	r3, r3, #3
 8026606:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802660a:	ea41 010c 	orr.w	r1, r1, ip
 802660e:	f1ce 0c10 	rsb	ip, lr, #16
 8026612:	ea4b 0000 	orr.w	r0, fp, r0
 8026616:	9f08      	ldr	r7, [sp, #32]
 8026618:	ebac 0c02 	sub.w	ip, ip, r2
 802661c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026620:	f108 38ff 	add.w	r8, r8, #4294967295
 8026624:	4350      	muls	r0, r2
 8026626:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802662a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802662c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026630:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026632:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026636:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802663a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802663c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026640:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026644:	0412      	lsls	r2, r2, #16
 8026646:	ea4b 0101 	orr.w	r1, fp, r1
 802664a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802664e:	fb03 c101 	mla	r1, r3, r1, ip
 8026652:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026656:	4302      	orrs	r2, r0
 8026658:	fb03 1202 	mla	r2, r3, r2, r1
 802665c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8026660:	0952      	lsrs	r2, r2, #5
 8026662:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026666:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802666a:	f8b9 2000 	ldrh.w	r2, [r9]
 802666e:	ea4b 0303 	orr.w	r3, fp, r3
 8026672:	1211      	asrs	r1, r2, #8
 8026674:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026678:	b29b      	uxth	r3, r3
 802667a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802667e:	00d2      	lsls	r2, r2, #3
 8026680:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026684:	fb11 f107 	smulbb	r1, r1, r7
 8026688:	1218      	asrs	r0, r3, #8
 802668a:	fb1c fc07 	smulbb	ip, ip, r7
 802668e:	b2d2      	uxtb	r2, r2
 8026690:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026694:	fb12 f207 	smulbb	r2, r2, r7
 8026698:	fb00 100a 	mla	r0, r0, sl, r1
 802669c:	10d9      	asrs	r1, r3, #3
 802669e:	00db      	lsls	r3, r3, #3
 80266a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80266a4:	b280      	uxth	r0, r0
 80266a6:	b2db      	uxtb	r3, r3
 80266a8:	fb01 c10a 	mla	r1, r1, sl, ip
 80266ac:	fb03 230a 	mla	r3, r3, sl, r2
 80266b0:	1c42      	adds	r2, r0, #1
 80266b2:	b289      	uxth	r1, r1
 80266b4:	b29b      	uxth	r3, r3
 80266b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80266ba:	f101 0c01 	add.w	ip, r1, #1
 80266be:	1c5a      	adds	r2, r3, #1
 80266c0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80266c4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80266c8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80266cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80266ce:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80266d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80266d6:	441c      	add	r4, r3
 80266d8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80266dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80266de:	4310      	orrs	r0, r2
 80266e0:	441e      	add	r6, r3
 80266e2:	ea40 000c 	orr.w	r0, r0, ip
 80266e6:	f829 0b02 	strh.w	r0, [r9], #2
 80266ea:	e6fa      	b.n	80264e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80266ec:	b013      	add	sp, #76	; 0x4c
 80266ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080266f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80266f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80266f6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80266fa:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80266fe:	fb0e 4703 	mla	r7, lr, r3, r4
 8026702:	f1be 0f00 	cmp.w	lr, #0
 8026706:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 802670a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802670e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8026712:	8808      	ldrh	r0, [r1, #0]
 8026714:	db60      	blt.n	80267d8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026716:	45f1      	cmp	r9, lr
 8026718:	dd5e      	ble.n	80267d8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802671a:	2c00      	cmp	r4, #0
 802671c:	db5a      	blt.n	80267d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802671e:	42a3      	cmp	r3, r4
 8026720:	dd58      	ble.n	80267d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8026722:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8026726:	1c62      	adds	r2, r4, #1
 8026728:	d459      	bmi.n	80267de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802672a:	4293      	cmp	r3, r2
 802672c:	dd57      	ble.n	80267de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802672e:	2d00      	cmp	r5, #0
 8026730:	d055      	beq.n	80267de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026732:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8026736:	f11e 0e01 	adds.w	lr, lr, #1
 802673a:	d454      	bmi.n	80267e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802673c:	45f1      	cmp	r9, lr
 802673e:	dd52      	ble.n	80267e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026740:	2e00      	cmp	r6, #0
 8026742:	d050      	beq.n	80267e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026744:	2c00      	cmp	r4, #0
 8026746:	db4c      	blt.n	80267e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026748:	42a3      	cmp	r3, r4
 802674a:	dd4a      	ble.n	80267e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802674c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8026750:	3401      	adds	r4, #1
 8026752:	d405      	bmi.n	8026760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026754:	42a3      	cmp	r3, r4
 8026756:	dd03      	ble.n	8026760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026758:	b115      	cbz	r5, 8026760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802675a:	3301      	adds	r3, #1
 802675c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8026760:	fb15 f406 	smulbb	r4, r5, r6
 8026764:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026768:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802676c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026770:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026774:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026778:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802677c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026780:	ea43 0c0c 	orr.w	ip, r3, ip
 8026784:	f1c6 0310 	rsb	r3, r6, #16
 8026788:	ea4e 0707 	orr.w	r7, lr, r7
 802678c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8026790:	1b5b      	subs	r3, r3, r5
 8026792:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026796:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802679a:	437d      	muls	r5, r7
 802679c:	fb03 5c0c 	mla	ip, r3, ip, r5
 80267a0:	0403      	lsls	r3, r0, #16
 80267a2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267a6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80267aa:	4318      	orrs	r0, r3
 80267ac:	0413      	lsls	r3, r2, #16
 80267ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80267b2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80267b6:	fb04 c000 	mla	r0, r4, r0, ip
 80267ba:	4313      	orrs	r3, r2
 80267bc:	fb06 0003 	mla	r0, r6, r3, r0
 80267c0:	0d43      	lsrs	r3, r0, #21
 80267c2:	0940      	lsrs	r0, r0, #5
 80267c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80267c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267cc:	4318      	orrs	r0, r3
 80267ce:	8008      	strh	r0, [r1, #0]
 80267d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80267d4:	4684      	mov	ip, r0
 80267d6:	e7a6      	b.n	8026726 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80267d8:	4607      	mov	r7, r0
 80267da:	4684      	mov	ip, r0
 80267dc:	e7ab      	b.n	8026736 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80267de:	4607      	mov	r7, r0
 80267e0:	e7a9      	b.n	8026736 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80267e2:	4602      	mov	r2, r0
 80267e4:	e7b4      	b.n	8026750 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80267e6:	4602      	mov	r2, r0
 80267e8:	e7ba      	b.n	8026760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080267ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80267ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267ee:	b08f      	sub	sp, #60	; 0x3c
 80267f0:	461d      	mov	r5, r3
 80267f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80267f4:	9107      	str	r1, [sp, #28]
 80267f6:	920c      	str	r2, [sp, #48]	; 0x30
 80267f8:	6859      	ldr	r1, [r3, #4]
 80267fa:	681b      	ldr	r3, [r3, #0]
 80267fc:	900d      	str	r0, [sp, #52]	; 0x34
 80267fe:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8026802:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8026806:	fb01 2707 	mla	r7, r1, r7, r2
 802680a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802680e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026810:	f8d3 8000 	ldr.w	r8, [r3]
 8026814:	9b07      	ldr	r3, [sp, #28]
 8026816:	2b00      	cmp	r3, #0
 8026818:	dc03      	bgt.n	8026822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802681a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802681c:	2b00      	cmp	r3, #0
 802681e:	f340 8182 	ble.w	8026b26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8026822:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026824:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026828:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802682c:	1e48      	subs	r0, r1, #1
 802682e:	f102 3cff 	add.w	ip, r2, #4294967295
 8026832:	2d00      	cmp	r5, #0
 8026834:	f340 809b 	ble.w	802696e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8026838:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802683c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026840:	d406      	bmi.n	8026850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026842:	4586      	cmp	lr, r0
 8026844:	da04      	bge.n	8026850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026846:	2b00      	cmp	r3, #0
 8026848:	db02      	blt.n	8026850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802684a:	4563      	cmp	r3, ip
 802684c:	f2c0 8090 	blt.w	8026970 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026850:	f11e 0e01 	adds.w	lr, lr, #1
 8026854:	f100 8084 	bmi.w	8026960 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026858:	4571      	cmp	r1, lr
 802685a:	f2c0 8081 	blt.w	8026960 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802685e:	3301      	adds	r3, #1
 8026860:	d47e      	bmi.n	8026960 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026862:	429a      	cmp	r2, r3
 8026864:	db7c      	blt.n	8026960 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026866:	46aa      	mov	sl, r5
 8026868:	46b9      	mov	r9, r7
 802686a:	f1ba 0f00 	cmp.w	sl, #0
 802686e:	f340 8099 	ble.w	80269a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026874:	1421      	asrs	r1, r4, #16
 8026876:	ea4f 4026 	mov.w	r0, r6, asr #16
 802687a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802687e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026882:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026886:	f100 80d1 	bmi.w	8026a2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802688a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802688e:	4559      	cmp	r1, fp
 8026890:	f280 80cc 	bge.w	8026a2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026894:	2800      	cmp	r0, #0
 8026896:	f2c0 80c9 	blt.w	8026a2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802689a:	f103 3bff 	add.w	fp, r3, #4294967295
 802689e:	4558      	cmp	r0, fp
 80268a0:	f280 80c4 	bge.w	8026a2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80268a4:	fa0f fe8e 	sxth.w	lr, lr
 80268a8:	fb00 110e 	mla	r1, r0, lr, r1
 80268ac:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80268b0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80268b4:	8841      	ldrh	r1, [r0, #2]
 80268b6:	f1bc 0f00 	cmp.w	ip, #0
 80268ba:	d00b      	beq.n	80268d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80268bc:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80268c0:	3b01      	subs	r3, #1
 80268c2:	005b      	lsls	r3, r3, #1
 80268c4:	3302      	adds	r3, #2
 80268c6:	eb00 0e03 	add.w	lr, r0, r3
 80268ca:	5ac3      	ldrh	r3, [r0, r3]
 80268cc:	9308      	str	r3, [sp, #32]
 80268ce:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80268d2:	9309      	str	r3, [sp, #36]	; 0x24
 80268d4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80268d8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80268dc:	fb12 f30c 	smulbb	r3, r2, ip
 80268e0:	f1cc 0e10 	rsb	lr, ip, #16
 80268e4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80268e8:	10db      	asrs	r3, r3, #3
 80268ea:	ebae 0e02 	sub.w	lr, lr, r2
 80268ee:	ea40 000b 	orr.w	r0, r0, fp
 80268f2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80268f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80268fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80268fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026902:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026906:	ea4b 0101 	orr.w	r1, fp, r1
 802690a:	4351      	muls	r1, r2
 802690c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802690e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026912:	0410      	lsls	r0, r2, #16
 8026914:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026918:	9908      	ldr	r1, [sp, #32]
 802691a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802691e:	4310      	orrs	r0, r2
 8026920:	9a08      	ldr	r2, [sp, #32]
 8026922:	0412      	lsls	r2, r2, #16
 8026924:	fb03 e000 	mla	r0, r3, r0, lr
 8026928:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802692c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026930:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026934:	ea42 020e 	orr.w	r2, r2, lr
 8026938:	fb03 0302 	mla	r3, r3, r2, r0
 802693c:	0d5a      	lsrs	r2, r3, #21
 802693e:	095b      	lsrs	r3, r3, #5
 8026940:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026944:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026948:	4313      	orrs	r3, r2
 802694a:	f8a9 3000 	strh.w	r3, [r9]
 802694e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026950:	f109 0902 	add.w	r9, r9, #2
 8026954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026958:	441c      	add	r4, r3
 802695a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802695c:	441e      	add	r6, r3
 802695e:	e784      	b.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026960:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026962:	3d01      	subs	r5, #1
 8026964:	3702      	adds	r7, #2
 8026966:	441c      	add	r4, r3
 8026968:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802696a:	441e      	add	r6, r3
 802696c:	e761      	b.n	8026832 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802696e:	d01d      	beq.n	80269ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026970:	1e6b      	subs	r3, r5, #1
 8026972:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026974:	fb00 4003 	mla	r0, r0, r3, r4
 8026978:	1400      	asrs	r0, r0, #16
 802697a:	f53f af74 	bmi.w	8026866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802697e:	3901      	subs	r1, #1
 8026980:	4288      	cmp	r0, r1
 8026982:	f6bf af70 	bge.w	8026866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026986:	991c      	ldr	r1, [sp, #112]	; 0x70
 8026988:	fb01 6303 	mla	r3, r1, r3, r6
 802698c:	141b      	asrs	r3, r3, #16
 802698e:	f53f af6a 	bmi.w	8026866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026992:	3a01      	subs	r2, #1
 8026994:	4293      	cmp	r3, r2
 8026996:	f6bf af66 	bge.w	8026866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802699a:	46a9      	mov	r9, r5
 802699c:	46ba      	mov	sl, r7
 802699e:	f1b9 0f00 	cmp.w	r9, #0
 80269a2:	dc5b      	bgt.n	8026a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80269a4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80269a8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80269ac:	9b07      	ldr	r3, [sp, #28]
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	f340 80b9 	ble.w	8026b26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80269b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80269b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80269ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80269be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80269c2:	eef0 6a62 	vmov.f32	s13, s5
 80269c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80269ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80269ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80269d2:	ee16 4a90 	vmov	r4, s13
 80269d6:	eef0 6a43 	vmov.f32	s13, s6
 80269da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80269de:	ee16 6a90 	vmov	r6, s13
 80269e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80269e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80269ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80269ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80269f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80269f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80269fa:	ee12 2a90 	vmov	r2, s5
 80269fe:	eef0 2a47 	vmov.f32	s5, s14
 8026a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a06:	ee13 2a10 	vmov	r2, s6
 8026a0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8026a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a0e:	eeb0 3a67 	vmov.f32	s6, s15
 8026a12:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a16:	931c      	str	r3, [sp, #112]	; 0x70
 8026a18:	9b07      	ldr	r3, [sp, #28]
 8026a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026a1c:	3b01      	subs	r3, #1
 8026a1e:	9307      	str	r3, [sp, #28]
 8026a20:	bf08      	it	eq
 8026a22:	4615      	moveq	r5, r2
 8026a24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a26:	bf18      	it	ne
 8026a28:	461d      	movne	r5, r3
 8026a2a:	e6f3      	b.n	8026814 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026a2c:	f111 0b01 	adds.w	fp, r1, #1
 8026a30:	d48d      	bmi.n	802694e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026a32:	45de      	cmp	lr, fp
 8026a34:	db8b      	blt.n	802694e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026a36:	f110 0b01 	adds.w	fp, r0, #1
 8026a3a:	d488      	bmi.n	802694e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026a3c:	455b      	cmp	r3, fp
 8026a3e:	db86      	blt.n	802694e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026a40:	b21b      	sxth	r3, r3
 8026a42:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026a46:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026a4a:	9300      	str	r3, [sp, #0]
 8026a4c:	4642      	mov	r2, r8
 8026a4e:	fa0f f38e 	sxth.w	r3, lr
 8026a52:	4649      	mov	r1, r9
 8026a54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026a56:	f7ff fe4c 	bl	80266f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026a5a:	e778      	b.n	802694e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026a5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026a5e:	1420      	asrs	r0, r4, #16
 8026a60:	1431      	asrs	r1, r6, #16
 8026a62:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026a66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026a6a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026a6e:	fb03 0101 	mla	r1, r3, r1, r0
 8026a72:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026a76:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026a7a:	8841      	ldrh	r1, [r0, #2]
 8026a7c:	f1be 0f00 	cmp.w	lr, #0
 8026a80:	d00b      	beq.n	8026a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026a82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026a86:	3b01      	subs	r3, #1
 8026a88:	005b      	lsls	r3, r3, #1
 8026a8a:	3302      	adds	r3, #2
 8026a8c:	eb00 0b03 	add.w	fp, r0, r3
 8026a90:	5ac3      	ldrh	r3, [r0, r3]
 8026a92:	930a      	str	r3, [sp, #40]	; 0x28
 8026a94:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8026a9a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026a9e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026aa2:	fb12 f30e 	smulbb	r3, r2, lr
 8026aa6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026aaa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026aae:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ab2:	10db      	asrs	r3, r3, #3
 8026ab4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ab8:	ea40 000c 	orr.w	r0, r0, ip
 8026abc:	f1ce 0c10 	rsb	ip, lr, #16
 8026ac0:	ea4b 0101 	orr.w	r1, fp, r1
 8026ac4:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ac8:	ebac 0c02 	sub.w	ip, ip, r2
 8026acc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026ad0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026ad4:	4351      	muls	r1, r2
 8026ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026ad8:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026adc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026ade:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026ae2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026ae8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026aec:	0412      	lsls	r2, r2, #16
 8026aee:	ea4b 0000 	orr.w	r0, fp, r0
 8026af2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026af6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026afa:	fb03 c000 	mla	r0, r3, r0, ip
 8026afe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026b02:	ea42 0b0b 	orr.w	fp, r2, fp
 8026b06:	fb03 000b 	mla	r0, r3, fp, r0
 8026b0a:	0d43      	lsrs	r3, r0, #21
 8026b0c:	0940      	lsrs	r0, r0, #5
 8026b0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b12:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026b16:	4318      	orrs	r0, r3
 8026b18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026b1a:	441c      	add	r4, r3
 8026b1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026b1e:	f82a 0b02 	strh.w	r0, [sl], #2
 8026b22:	441e      	add	r6, r3
 8026b24:	e73b      	b.n	802699e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026b26:	b00f      	add	sp, #60	; 0x3c
 8026b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026b2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b30:	b085      	sub	sp, #20
 8026b32:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8026b36:	9102      	str	r1, [sp, #8]
 8026b38:	2c00      	cmp	r4, #0
 8026b3a:	fb04 7103 	mla	r1, r4, r3, r7
 8026b3e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026b42:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026b46:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026b4a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026b4e:	f2c0 811b 	blt.w	8026d88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026b52:	45a6      	cmp	lr, r4
 8026b54:	f340 8118 	ble.w	8026d88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026b58:	2f00      	cmp	r7, #0
 8026b5a:	f2c0 8113 	blt.w	8026d84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026b5e:	42bb      	cmp	r3, r7
 8026b60:	f340 8110 	ble.w	8026d84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026b64:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026b68:	1c7a      	adds	r2, r7, #1
 8026b6a:	f100 8110 	bmi.w	8026d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026b6e:	4293      	cmp	r3, r2
 8026b70:	f340 810d 	ble.w	8026d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026b74:	2e00      	cmp	r6, #0
 8026b76:	f000 810c 	beq.w	8026d92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8026b7a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026b7e:	3401      	adds	r4, #1
 8026b80:	f100 810b 	bmi.w	8026d9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026b84:	45a6      	cmp	lr, r4
 8026b86:	f340 8108 	ble.w	8026d9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026b8a:	2800      	cmp	r0, #0
 8026b8c:	f000 8108 	beq.w	8026da0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8026b90:	2f00      	cmp	r7, #0
 8026b92:	f2c0 8100 	blt.w	8026d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026b96:	42bb      	cmp	r3, r7
 8026b98:	f340 80fd 	ble.w	8026d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026b9c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026ba0:	3701      	adds	r7, #1
 8026ba2:	f100 8100 	bmi.w	8026da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026ba6:	42bb      	cmp	r3, r7
 8026ba8:	f340 80fd 	ble.w	8026da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026bac:	2e00      	cmp	r6, #0
 8026bae:	f000 80fc 	beq.w	8026daa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8026bb2:	3301      	adds	r3, #1
 8026bb4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026bb8:	b2b6      	uxth	r6, r6
 8026bba:	b280      	uxth	r0, r0
 8026bbc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026bc0:	fb00 fe06 	mul.w	lr, r0, r6
 8026bc4:	0136      	lsls	r6, r6, #4
 8026bc6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026bca:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026bce:	eba6 070e 	sub.w	r7, r6, lr
 8026bd2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026bd6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026bda:	b280      	uxth	r0, r0
 8026bdc:	b2bf      	uxth	r7, r7
 8026bde:	1a1b      	subs	r3, r3, r0
 8026be0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026be4:	fb0a f607 	mul.w	r6, sl, r7
 8026be8:	b29b      	uxth	r3, r3
 8026bea:	fb0b 6603 	mla	r6, fp, r3, r6
 8026bee:	fb00 6609 	mla	r6, r0, r9, r6
 8026bf2:	fb0e 6608 	mla	r6, lr, r8, r6
 8026bf6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026bfa:	9600      	str	r6, [sp, #0]
 8026bfc:	2e00      	cmp	r6, #0
 8026bfe:	f000 80be 	beq.w	8026d7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8026c02:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026c06:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026c0a:	9e02      	ldr	r6, [sp, #8]
 8026c0c:	fb0b fc0c 	mul.w	ip, fp, ip
 8026c10:	fb0b f505 	mul.w	r5, fp, r5
 8026c14:	8836      	ldrh	r6, [r6, #0]
 8026c16:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026c1a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026c1e:	9501      	str	r5, [sp, #4]
 8026c20:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026c24:	44dc      	add	ip, fp
 8026c26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c2a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8026c2e:	9503      	str	r5, [sp, #12]
 8026c30:	9d01      	ldr	r5, [sp, #4]
 8026c32:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026c36:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026c3a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026c3e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026c42:	fb0a fc0c 	mul.w	ip, sl, ip
 8026c46:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026c4a:	fb0a fa01 	mul.w	sl, sl, r1
 8026c4e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026c52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026c56:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026c5a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026c5e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026c62:	4465      	add	r5, ip
 8026c64:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026c68:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c70:	fb09 fc0c 	mul.w	ip, r9, ip
 8026c74:	0a2d      	lsrs	r5, r5, #8
 8026c76:	fb09 f904 	mul.w	r9, r9, r4
 8026c7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c7e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026c82:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026c86:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026c8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026c8e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026c92:	437d      	muls	r5, r7
 8026c94:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026c98:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8026c9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026ca0:	4461      	add	r1, ip
 8026ca2:	fb08 f404 	mul.w	r4, r8, r4
 8026ca6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026caa:	fb08 f802 	mul.w	r8, r8, r2
 8026cae:	0a09      	lsrs	r1, r1, #8
 8026cb0:	0a22      	lsrs	r2, r4, #8
 8026cb2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026cb6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026cba:	fb07 f70a 	mul.w	r7, r7, sl
 8026cbe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026cc2:	4414      	add	r4, r2
 8026cc4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026cc8:	0a24      	lsrs	r4, r4, #8
 8026cca:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026cce:	9a03      	ldr	r2, [sp, #12]
 8026cd0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026cd4:	fb02 5503 	mla	r5, r2, r3, r5
 8026cd8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026cdc:	9a00      	ldr	r2, [sp, #0]
 8026cde:	fb04 540e 	mla	r4, r4, lr, r5
 8026ce2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026ce6:	1235      	asrs	r5, r6, #8
 8026ce8:	fb01 4100 	mla	r1, r1, r0, r4
 8026cec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026cf0:	0a09      	lsrs	r1, r1, #8
 8026cf2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026cf6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026cfa:	fb03 7101 	mla	r1, r3, r1, r7
 8026cfe:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026d02:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026d06:	fb00 e101 	mla	r1, r0, r1, lr
 8026d0a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8026d0e:	b287      	uxth	r7, r0
 8026d10:	0a09      	lsrs	r1, r1, #8
 8026d12:	437a      	muls	r2, r7
 8026d14:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026d18:	1c53      	adds	r3, r2, #1
 8026d1a:	4321      	orrs	r1, r4
 8026d1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026d20:	0c0a      	lsrs	r2, r1, #16
 8026d22:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8026d26:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026d2a:	b2c8      	uxtb	r0, r1
 8026d2c:	fb12 f207 	smulbb	r2, r2, r7
 8026d30:	fb14 f407 	smulbb	r4, r4, r7
 8026d34:	b2db      	uxtb	r3, r3
 8026d36:	fb10 f007 	smulbb	r0, r0, r7
 8026d3a:	fb05 2503 	mla	r5, r5, r3, r2
 8026d3e:	10f2      	asrs	r2, r6, #3
 8026d40:	00f6      	lsls	r6, r6, #3
 8026d42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026d46:	b2ad      	uxth	r5, r5
 8026d48:	b2f6      	uxtb	r6, r6
 8026d4a:	fb02 4203 	mla	r2, r2, r3, r4
 8026d4e:	fb06 0303 	mla	r3, r6, r3, r0
 8026d52:	b294      	uxth	r4, r2
 8026d54:	b299      	uxth	r1, r3
 8026d56:	1c6b      	adds	r3, r5, #1
 8026d58:	1c62      	adds	r2, r4, #1
 8026d5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026d5e:	1c4b      	adds	r3, r1, #1
 8026d60:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026d64:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026d68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026d6c:	0952      	lsrs	r2, r2, #5
 8026d6e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d76:	432b      	orrs	r3, r5
 8026d78:	4313      	orrs	r3, r2
 8026d7a:	9a02      	ldr	r2, [sp, #8]
 8026d7c:	8013      	strh	r3, [r2, #0]
 8026d7e:	b005      	add	sp, #20
 8026d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d84:	2500      	movs	r5, #0
 8026d86:	e6ef      	b.n	8026b68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026d88:	2100      	movs	r1, #0
 8026d8a:	460d      	mov	r5, r1
 8026d8c:	e6f7      	b.n	8026b7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026d8e:	2100      	movs	r1, #0
 8026d90:	e6f5      	b.n	8026b7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026d92:	4631      	mov	r1, r6
 8026d94:	e6f3      	b.n	8026b7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026d96:	2400      	movs	r4, #0
 8026d98:	e702      	b.n	8026ba0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	4614      	mov	r4, r2
 8026d9e:	e70b      	b.n	8026bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026da0:	4602      	mov	r2, r0
 8026da2:	4604      	mov	r4, r0
 8026da4:	e708      	b.n	8026bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026da6:	2200      	movs	r2, #0
 8026da8:	e706      	b.n	8026bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026daa:	4632      	mov	r2, r6
 8026dac:	e704      	b.n	8026bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08026dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026dae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026db2:	b09d      	sub	sp, #116	; 0x74
 8026db4:	9219      	str	r2, [sp, #100]	; 0x64
 8026db6:	9307      	str	r3, [sp, #28]
 8026db8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026dba:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8026dbe:	901b      	str	r0, [sp, #108]	; 0x6c
 8026dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8026dc2:	6850      	ldr	r0, [r2, #4]
 8026dc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8026dc6:	6812      	ldr	r2, [r2, #0]
 8026dc8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026dcc:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8026dd0:	fb00 1303 	mla	r3, r0, r3, r1
 8026dd4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8026dda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026ddc:	681b      	ldr	r3, [r3, #0]
 8026dde:	9310      	str	r3, [sp, #64]	; 0x40
 8026de0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8026de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	dc03      	bgt.n	8026df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8026dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	f340 8375 	ble.w	80274de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026df4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026df6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026dfa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026dfe:	1e48      	subs	r0, r1, #1
 8026e00:	1e57      	subs	r7, r2, #1
 8026e02:	9b07      	ldr	r3, [sp, #28]
 8026e04:	2b00      	cmp	r3, #0
 8026e06:	f340 818e 	ble.w	8027126 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8026e0a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026e0e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026e12:	d406      	bmi.n	8026e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026e14:	4584      	cmp	ip, r0
 8026e16:	da04      	bge.n	8026e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026e18:	2b00      	cmp	r3, #0
 8026e1a:	db02      	blt.n	8026e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026e1c:	42bb      	cmp	r3, r7
 8026e1e:	f2c0 8183 	blt.w	8027128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026e22:	f11c 0c01 	adds.w	ip, ip, #1
 8026e26:	f100 8173 	bmi.w	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026e2a:	4561      	cmp	r1, ip
 8026e2c:	f2c0 8170 	blt.w	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026e30:	3301      	adds	r3, #1
 8026e32:	f100 816d 	bmi.w	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026e36:	429a      	cmp	r2, r3
 8026e38:	f2c0 816a 	blt.w	8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026e3c:	9b07      	ldr	r3, [sp, #28]
 8026e3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026e40:	9318      	str	r3, [sp, #96]	; 0x60
 8026e42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026e44:	2b00      	cmp	r3, #0
 8026e46:	f340 818c 	ble.w	8027162 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026e4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026e4c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026e50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026e52:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026e56:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026e5a:	1422      	asrs	r2, r4, #16
 8026e5c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026e60:	689b      	ldr	r3, [r3, #8]
 8026e62:	f100 81cd 	bmi.w	8027200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e66:	f103 38ff 	add.w	r8, r3, #4294967295
 8026e6a:	4542      	cmp	r2, r8
 8026e6c:	f280 81c8 	bge.w	8027200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e70:	f1bc 0f00 	cmp.w	ip, #0
 8026e74:	f2c0 81c4 	blt.w	8027200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e78:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026e7c:	45c4      	cmp	ip, r8
 8026e7e:	f280 81bf 	bge.w	8027200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e82:	b21b      	sxth	r3, r3
 8026e84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e86:	fb0c 2203 	mla	r2, ip, r3, r2
 8026e8a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026e8e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026e92:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026e96:	2800      	cmp	r0, #0
 8026e98:	f000 81a9 	beq.w	80271ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8026e9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026ea0:	950c      	str	r5, [sp, #48]	; 0x30
 8026ea2:	0e2d      	lsrs	r5, r5, #24
 8026ea4:	9513      	str	r5, [sp, #76]	; 0x4c
 8026ea6:	b181      	cbz	r1, 8026eca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026eac:	3b01      	subs	r3, #1
 8026eae:	009b      	lsls	r3, r3, #2
 8026eb0:	3304      	adds	r3, #4
 8026eb2:	eb08 0c03 	add.w	ip, r8, r3
 8026eb6:	f858 3003 	ldr.w	r3, [r8, r3]
 8026eba:	9308      	str	r3, [sp, #32]
 8026ebc:	0e1b      	lsrs	r3, r3, #24
 8026ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8026ec0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8026ec6:	0e1b      	lsrs	r3, r3, #24
 8026ec8:	9314      	str	r3, [sp, #80]	; 0x50
 8026eca:	b280      	uxth	r0, r0
 8026ecc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ece:	b289      	uxth	r1, r1
 8026ed0:	fb00 f901 	mul.w	r9, r0, r1
 8026ed4:	0100      	lsls	r0, r0, #4
 8026ed6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026eda:	eba0 0809 	sub.w	r8, r0, r9
 8026ede:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026ee2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026ee4:	b289      	uxth	r1, r1
 8026ee6:	fa1f f888 	uxth.w	r8, r8
 8026eea:	1a5b      	subs	r3, r3, r1
 8026eec:	fb08 f000 	mul.w	r0, r8, r0
 8026ef0:	b29b      	uxth	r3, r3
 8026ef2:	fb03 000e 	mla	r0, r3, lr, r0
 8026ef6:	fb01 0005 	mla	r0, r1, r5, r0
 8026efa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026efc:	fb09 0005 	mla	r0, r9, r5, r0
 8026f00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026f04:	2800      	cmp	r0, #0
 8026f06:	f000 80fa 	beq.w	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026f0a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026f0e:	d01b      	beq.n	8026f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026f10:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026f14:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026f18:	fb0e fa0a 	mul.w	sl, lr, sl
 8026f1c:	fb0e fe02 	mul.w	lr, lr, r2
 8026f20:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026f24:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026f28:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026f2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026f30:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026f34:	4452      	add	r2, sl
 8026f36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f3a:	0a12      	lsrs	r2, r2, #8
 8026f3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026f40:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026f44:	ea42 020c 	orr.w	r2, r2, ip
 8026f48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f4a:	2dff      	cmp	r5, #255	; 0xff
 8026f4c:	d021      	beq.n	8026f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8026f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f50:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f56:	fb05 fb0b 	mul.w	fp, r5, fp
 8026f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f5c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026f60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026f6a:	fb05 fa0a 	mul.w	sl, r5, sl
 8026f6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f72:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026f76:	44de      	add	lr, fp
 8026f78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026f8c:	ea4e 050a 	orr.w	r5, lr, sl
 8026f90:	950c      	str	r5, [sp, #48]	; 0x30
 8026f92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f94:	2dff      	cmp	r5, #255	; 0xff
 8026f96:	d021      	beq.n	8026fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026f98:	9d08      	ldr	r5, [sp, #32]
 8026f9a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026fa0:	fb05 fb0b 	mul.w	fp, r5, fp
 8026fa4:	9d08      	ldr	r5, [sp, #32]
 8026fa6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026faa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026fac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026fb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026fb4:	fb05 fa0a 	mul.w	sl, r5, sl
 8026fb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026fbc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026fc0:	44de      	add	lr, fp
 8026fc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026fc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026fd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026fd6:	ea4e 050a 	orr.w	r5, lr, sl
 8026fda:	9508      	str	r5, [sp, #32]
 8026fdc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026fde:	2dff      	cmp	r5, #255	; 0xff
 8026fe0:	d021      	beq.n	8027026 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8026fe2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026fe4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026fe8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026fea:	fb05 fb0b 	mul.w	fp, r5, fp
 8026fee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026ff0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026ff4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026ff6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ffa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ffe:	fb05 fa0a 	mul.w	sl, r5, sl
 8027002:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027006:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802700a:	44de      	add	lr, fp
 802700c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027010:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027014:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027018:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802701c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027020:	ea4e 050a 	orr.w	r5, lr, sl
 8027024:	950d      	str	r5, [sp, #52]	; 0x34
 8027026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027028:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802702c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027030:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027034:	9d08      	ldr	r5, [sp, #32]
 8027036:	fb08 fc0c 	mul.w	ip, r8, ip
 802703a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802703e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027042:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027044:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027048:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802704c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802704e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027052:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027056:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027058:	fb08 f80e 	mul.w	r8, r8, lr
 802705c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027060:	fb03 8202 	mla	r2, r3, r2, r8
 8027064:	9b08      	ldr	r3, [sp, #32]
 8027066:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802706a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802706e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027070:	fb01 220a 	mla	r2, r1, sl, r2
 8027074:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027078:	883b      	ldrh	r3, [r7, #0]
 802707a:	fb09 2901 	mla	r9, r9, r1, r2
 802707e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027080:	1219      	asrs	r1, r3, #8
 8027082:	4342      	muls	r2, r0
 8027084:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027088:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802708c:	1c50      	adds	r0, r2, #1
 802708e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027092:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027096:	ea4c 0c09 	orr.w	ip, ip, r9
 802709a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802709e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80270a2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80270a6:	fa5f fc8c 	uxtb.w	ip, ip
 80270aa:	fb12 f205 	smulbb	r2, r2, r5
 80270ae:	b2c0      	uxtb	r0, r0
 80270b0:	fb1c fc05 	smulbb	ip, ip, r5
 80270b4:	fb01 2100 	mla	r1, r1, r0, r2
 80270b8:	10da      	asrs	r2, r3, #3
 80270ba:	fb1e fe05 	smulbb	lr, lr, r5
 80270be:	00db      	lsls	r3, r3, #3
 80270c0:	b289      	uxth	r1, r1
 80270c2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80270c6:	b2db      	uxtb	r3, r3
 80270c8:	fb02 e200 	mla	r2, r2, r0, lr
 80270cc:	fb03 c300 	mla	r3, r3, r0, ip
 80270d0:	b292      	uxth	r2, r2
 80270d2:	fa1f fc83 	uxth.w	ip, r3
 80270d6:	1c4b      	adds	r3, r1, #1
 80270d8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80270dc:	f10c 0301 	add.w	r3, ip, #1
 80270e0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80270e4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80270e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80270ec:	430b      	orrs	r3, r1
 80270ee:	1c51      	adds	r1, r2, #1
 80270f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80270f4:	0952      	lsrs	r2, r2, #5
 80270f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80270fa:	4313      	orrs	r3, r2
 80270fc:	803b      	strh	r3, [r7, #0]
 80270fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027100:	3702      	adds	r7, #2
 8027102:	441c      	add	r4, r3
 8027104:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027106:	441e      	add	r6, r3
 8027108:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802710a:	3b01      	subs	r3, #1
 802710c:	9318      	str	r3, [sp, #96]	; 0x60
 802710e:	e698      	b.n	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027110:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027112:	441c      	add	r4, r3
 8027114:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027116:	441e      	add	r6, r3
 8027118:	9b07      	ldr	r3, [sp, #28]
 802711a:	3b01      	subs	r3, #1
 802711c:	9307      	str	r3, [sp, #28]
 802711e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027120:	3302      	adds	r3, #2
 8027122:	930a      	str	r3, [sp, #40]	; 0x28
 8027124:	e66d      	b.n	8026e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027126:	d023      	beq.n	8027170 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027128:	9b07      	ldr	r3, [sp, #28]
 802712a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802712c:	3b01      	subs	r3, #1
 802712e:	fb00 4003 	mla	r0, r0, r3, r4
 8027132:	1400      	asrs	r0, r0, #16
 8027134:	f53f ae82 	bmi.w	8026e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027138:	3901      	subs	r1, #1
 802713a:	4288      	cmp	r0, r1
 802713c:	f6bf ae7e 	bge.w	8026e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027140:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027142:	fb01 6303 	mla	r3, r1, r3, r6
 8027146:	141b      	asrs	r3, r3, #16
 8027148:	f53f ae78 	bmi.w	8026e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802714c:	3a01      	subs	r2, #1
 802714e:	4293      	cmp	r3, r2
 8027150:	f6bf ae74 	bge.w	8026e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027154:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027158:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802715c:	f1bb 0f00 	cmp.w	fp, #0
 8027160:	dc6c      	bgt.n	802723c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027162:	9b07      	ldr	r3, [sp, #28]
 8027164:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802716a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802716e:	930a      	str	r3, [sp, #40]	; 0x28
 8027170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027172:	2b00      	cmp	r3, #0
 8027174:	f340 81b3 	ble.w	80274de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802717c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802717e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027182:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027186:	eef0 6a62 	vmov.f32	s13, s5
 802718a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802718e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027196:	ee16 4a90 	vmov	r4, s13
 802719a:	eef0 6a43 	vmov.f32	s13, s6
 802719e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271a2:	ee16 6a90 	vmov	r6, s13
 80271a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80271aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80271ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80271b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80271b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80271ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80271be:	ee12 2a90 	vmov	r2, s5
 80271c2:	eef0 2a47 	vmov.f32	s5, s14
 80271c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80271ca:	ee13 2a10 	vmov	r2, s6
 80271ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80271d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271d2:	eeb0 3a67 	vmov.f32	s6, s15
 80271d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80271da:	932a      	str	r3, [sp, #168]	; 0xa8
 80271dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80271de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80271e0:	3b01      	subs	r3, #1
 80271e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80271e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271e6:	bf08      	it	eq
 80271e8:	4613      	moveq	r3, r2
 80271ea:	9307      	str	r3, [sp, #28]
 80271ec:	e5fb      	b.n	8026de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80271ee:	2900      	cmp	r1, #0
 80271f0:	f43f ae6b 	beq.w	8026eca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80271f4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80271f8:	9308      	str	r3, [sp, #32]
 80271fa:	0e1b      	lsrs	r3, r3, #24
 80271fc:	9311      	str	r3, [sp, #68]	; 0x44
 80271fe:	e664      	b.n	8026eca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027200:	f112 0801 	adds.w	r8, r2, #1
 8027204:	f53f af7b 	bmi.w	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027208:	4543      	cmp	r3, r8
 802720a:	f6ff af78 	blt.w	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802720e:	f11c 0801 	adds.w	r8, ip, #1
 8027212:	f53f af74 	bmi.w	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027216:	45c6      	cmp	lr, r8
 8027218:	f6ff af71 	blt.w	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802721c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802721e:	b21b      	sxth	r3, r3
 8027220:	9201      	str	r2, [sp, #4]
 8027222:	fa0f f28e 	sxth.w	r2, lr
 8027226:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802722a:	e9cd c002 	strd	ip, r0, [sp, #8]
 802722e:	9200      	str	r2, [sp, #0]
 8027230:	4639      	mov	r1, r7
 8027232:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027234:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027236:	f7ff fc79 	bl	8026b2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802723a:	e760      	b.n	80270fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802723c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802723e:	1427      	asrs	r7, r4, #16
 8027240:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027242:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027246:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802724a:	1433      	asrs	r3, r6, #16
 802724c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027250:	fb01 7303 	mla	r3, r1, r3, r7
 8027254:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027258:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802725c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027260:	2a00      	cmp	r2, #0
 8027262:	f000 8133 	beq.w	80274cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027266:	687d      	ldr	r5, [r7, #4]
 8027268:	950e      	str	r5, [sp, #56]	; 0x38
 802726a:	0e2d      	lsrs	r5, r5, #24
 802726c:	9515      	str	r5, [sp, #84]	; 0x54
 802726e:	b178      	cbz	r0, 8027290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027270:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027274:	3901      	subs	r1, #1
 8027276:	0089      	lsls	r1, r1, #2
 8027278:	3104      	adds	r1, #4
 802727a:	eb07 0e01 	add.w	lr, r7, r1
 802727e:	5879      	ldr	r1, [r7, r1]
 8027280:	9109      	str	r1, [sp, #36]	; 0x24
 8027282:	0e09      	lsrs	r1, r1, #24
 8027284:	9112      	str	r1, [sp, #72]	; 0x48
 8027286:	f8de 1004 	ldr.w	r1, [lr, #4]
 802728a:	910f      	str	r1, [sp, #60]	; 0x3c
 802728c:	0e09      	lsrs	r1, r1, #24
 802728e:	9116      	str	r1, [sp, #88]	; 0x58
 8027290:	b292      	uxth	r2, r2
 8027292:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027294:	b280      	uxth	r0, r0
 8027296:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027298:	fb02 f800 	mul.w	r8, r2, r0
 802729c:	0112      	lsls	r2, r2, #4
 802729e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80272a2:	eba2 0e08 	sub.w	lr, r2, r8
 80272a6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80272aa:	b280      	uxth	r0, r0
 80272ac:	fa1f fe8e 	uxth.w	lr, lr
 80272b0:	1a12      	subs	r2, r2, r0
 80272b2:	fb0e f101 	mul.w	r1, lr, r1
 80272b6:	b292      	uxth	r2, r2
 80272b8:	fb02 110c 	mla	r1, r2, ip, r1
 80272bc:	fb00 1105 	mla	r1, r0, r5, r1
 80272c0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80272c2:	fb08 1105 	mla	r1, r8, r5, r1
 80272c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80272ca:	2900      	cmp	r1, #0
 80272cc:	f000 80f5 	beq.w	80274ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80272d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80272d4:	d019      	beq.n	802730a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80272d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80272da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272de:	fb0c fa0a 	mul.w	sl, ip, sl
 80272e2:	fb0c fc03 	mul.w	ip, ip, r3
 80272e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80272ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80272ee:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80272f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80272f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80272fa:	4453      	add	r3, sl
 80272fc:	0a3f      	lsrs	r7, r7, #8
 80272fe:	0a1b      	lsrs	r3, r3, #8
 8027300:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027304:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027308:	433b      	orrs	r3, r7
 802730a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802730c:	2dff      	cmp	r5, #255	; 0xff
 802730e:	d020      	beq.n	8027352 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027310:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027312:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027316:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027318:	436f      	muls	r7, r5
 802731a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802731c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027320:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027324:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027326:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802732a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802732e:	fb05 fa0a 	mul.w	sl, r5, sl
 8027332:	44bc      	add	ip, r7
 8027334:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027338:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802733c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027340:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027344:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027348:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802734c:	ea4c 050a 	orr.w	r5, ip, sl
 8027350:	950e      	str	r5, [sp, #56]	; 0x38
 8027352:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027354:	2dff      	cmp	r5, #255	; 0xff
 8027356:	d020      	beq.n	802739a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027358:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802735a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802735e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027360:	436f      	muls	r7, r5
 8027362:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027364:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027368:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802736c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802736e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027372:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027376:	fb05 fa0a 	mul.w	sl, r5, sl
 802737a:	44bc      	add	ip, r7
 802737c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027384:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027388:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802738c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027390:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027394:	ea4c 050a 	orr.w	r5, ip, sl
 8027398:	9509      	str	r5, [sp, #36]	; 0x24
 802739a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802739c:	2dff      	cmp	r5, #255	; 0xff
 802739e:	d020      	beq.n	80273e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80273a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80273a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80273a6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80273a8:	436f      	muls	r7, r5
 80273aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80273ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80273b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80273b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80273b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80273ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273be:	fb05 fa0a 	mul.w	sl, r5, sl
 80273c2:	44bc      	add	ip, r7
 80273c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80273c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80273dc:	ea4c 050a 	orr.w	r5, ip, sl
 80273e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80273e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80273e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80273e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80273ec:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80273f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80273f2:	fb0e f707 	mul.w	r7, lr, r7
 80273f6:	fb02 770c 	mla	r7, r2, ip, r7
 80273fa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80273fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027400:	fb00 770c 	mla	r7, r0, ip, r7
 8027404:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027408:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802740a:	fb08 770c 	mla	r7, r8, ip, r7
 802740e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027414:	fb0e fe0c 	mul.w	lr, lr, ip
 8027418:	0a3f      	lsrs	r7, r7, #8
 802741a:	fb02 e303 	mla	r3, r2, r3, lr
 802741e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027420:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027424:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802742a:	fb00 330a 	mla	r3, r0, sl, r3
 802742e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027432:	f8b9 0000 	ldrh.w	r0, [r9]
 8027436:	fb08 3c0c 	mla	ip, r8, ip, r3
 802743a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802743c:	1202      	asrs	r2, r0, #8
 802743e:	4359      	muls	r1, r3
 8027440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027444:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027448:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802744c:	1c4b      	adds	r3, r1, #1
 802744e:	ea47 070c 	orr.w	r7, r7, ip
 8027452:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027456:	0c3b      	lsrs	r3, r7, #16
 8027458:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802745c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027460:	b2ff      	uxtb	r7, r7
 8027462:	fb13 f305 	smulbb	r3, r3, r5
 8027466:	b2c9      	uxtb	r1, r1
 8027468:	fb17 f705 	smulbb	r7, r7, r5
 802746c:	fb02 3201 	mla	r2, r2, r1, r3
 8027470:	10c3      	asrs	r3, r0, #3
 8027472:	fb1c fc05 	smulbb	ip, ip, r5
 8027476:	00c0      	lsls	r0, r0, #3
 8027478:	b292      	uxth	r2, r2
 802747a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802747e:	b2c0      	uxtb	r0, r0
 8027480:	fb03 c301 	mla	r3, r3, r1, ip
 8027484:	fb00 7001 	mla	r0, r0, r1, r7
 8027488:	1c51      	adds	r1, r2, #1
 802748a:	b29b      	uxth	r3, r3
 802748c:	b280      	uxth	r0, r0
 802748e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027492:	f100 0c01 	add.w	ip, r0, #1
 8027496:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802749a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802749e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80274a2:	ea4c 0202 	orr.w	r2, ip, r2
 80274a6:	f103 0c01 	add.w	ip, r3, #1
 80274aa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80274ae:	095b      	lsrs	r3, r3, #5
 80274b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80274b4:	431a      	orrs	r2, r3
 80274b6:	f8a9 2000 	strh.w	r2, [r9]
 80274ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80274bc:	f109 0902 	add.w	r9, r9, #2
 80274c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80274c4:	441c      	add	r4, r3
 80274c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80274c8:	441e      	add	r6, r3
 80274ca:	e647      	b.n	802715c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80274cc:	2800      	cmp	r0, #0
 80274ce:	f43f aedf 	beq.w	8027290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80274d2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80274d6:	9109      	str	r1, [sp, #36]	; 0x24
 80274d8:	0e09      	lsrs	r1, r1, #24
 80274da:	9112      	str	r1, [sp, #72]	; 0x48
 80274dc:	e6d8      	b.n	8027290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80274de:	b01d      	add	sp, #116	; 0x74
 80274e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080274e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80274e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274e8:	b085      	sub	sp, #20
 80274ea:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80274ee:	9102      	str	r1, [sp, #8]
 80274f0:	2c00      	cmp	r4, #0
 80274f2:	fb04 7103 	mla	r1, r4, r3, r7
 80274f6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80274fa:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80274fe:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027502:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027506:	f2c0 810c 	blt.w	8027722 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802750a:	45a6      	cmp	lr, r4
 802750c:	f340 8109 	ble.w	8027722 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027510:	2f00      	cmp	r7, #0
 8027512:	f2c0 8104 	blt.w	802771e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027516:	42bb      	cmp	r3, r7
 8027518:	f340 8101 	ble.w	802771e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802751c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027520:	1c7a      	adds	r2, r7, #1
 8027522:	f100 8101 	bmi.w	8027728 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027526:	4293      	cmp	r3, r2
 8027528:	f340 80fe 	ble.w	8027728 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802752c:	2e00      	cmp	r6, #0
 802752e:	f000 80fd 	beq.w	802772c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027532:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027536:	3401      	adds	r4, #1
 8027538:	f100 80fc 	bmi.w	8027734 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802753c:	45a6      	cmp	lr, r4
 802753e:	f340 80f9 	ble.w	8027734 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027542:	2800      	cmp	r0, #0
 8027544:	f000 80f9 	beq.w	802773a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027548:	2f00      	cmp	r7, #0
 802754a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802754e:	f2c0 80ef 	blt.w	8027730 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027552:	42bb      	cmp	r3, r7
 8027554:	f340 80ec 	ble.w	8027730 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027558:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802755c:	3701      	adds	r7, #1
 802755e:	f100 80ef 	bmi.w	8027740 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027562:	42bb      	cmp	r3, r7
 8027564:	f340 80ec 	ble.w	8027740 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027568:	2e00      	cmp	r6, #0
 802756a:	f000 80eb 	beq.w	8027744 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802756e:	6852      	ldr	r2, [r2, #4]
 8027570:	b2b6      	uxth	r6, r6
 8027572:	b280      	uxth	r0, r0
 8027574:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027578:	fb00 fe06 	mul.w	lr, r0, r6
 802757c:	0136      	lsls	r6, r6, #4
 802757e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027582:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027586:	eba6 070e 	sub.w	r7, r6, lr
 802758a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802758e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027592:	b280      	uxth	r0, r0
 8027594:	b2bf      	uxth	r7, r7
 8027596:	1a1b      	subs	r3, r3, r0
 8027598:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802759c:	fb07 f60a 	mul.w	r6, r7, sl
 80275a0:	b29b      	uxth	r3, r3
 80275a2:	fb0b 6603 	mla	r6, fp, r3, r6
 80275a6:	fb00 6609 	mla	r6, r0, r9, r6
 80275aa:	fb0e 6608 	mla	r6, lr, r8, r6
 80275ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80275b2:	9600      	str	r6, [sp, #0]
 80275b4:	2e00      	cmp	r6, #0
 80275b6:	f000 80af 	beq.w	8027718 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80275ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80275be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80275c2:	9e02      	ldr	r6, [sp, #8]
 80275c4:	fb0b fc0c 	mul.w	ip, fp, ip
 80275c8:	fb0b f505 	mul.w	r5, fp, r5
 80275cc:	8836      	ldrh	r6, [r6, #0]
 80275ce:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80275d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275d6:	9501      	str	r5, [sp, #4]
 80275d8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80275dc:	44dc      	add	ip, fp
 80275de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275e2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80275e6:	9503      	str	r5, [sp, #12]
 80275e8:	9d01      	ldr	r5, [sp, #4]
 80275ea:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80275ee:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80275f2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80275f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80275fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80275fe:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027602:	fb0a fa01 	mul.w	sl, sl, r1
 8027606:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802760a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802760e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8027612:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027616:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802761a:	4465      	add	r5, ip
 802761c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027620:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027624:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027628:	fb09 fc0c 	mul.w	ip, r9, ip
 802762c:	0a2d      	lsrs	r5, r5, #8
 802762e:	fb09 f904 	mul.w	r9, r9, r4
 8027632:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027636:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802763a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802763e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8027642:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027646:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802764a:	437d      	muls	r5, r7
 802764c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8027650:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027658:	4461      	add	r1, ip
 802765a:	fb08 f404 	mul.w	r4, r8, r4
 802765e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027662:	fb08 f802 	mul.w	r8, r8, r2
 8027666:	0a09      	lsrs	r1, r1, #8
 8027668:	0a22      	lsrs	r2, r4, #8
 802766a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802766e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027672:	fb07 f70a 	mul.w	r7, r7, sl
 8027676:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802767a:	4414      	add	r4, r2
 802767c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8027680:	0a24      	lsrs	r4, r4, #8
 8027682:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027686:	9a03      	ldr	r2, [sp, #12]
 8027688:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802768c:	fb02 5503 	mla	r5, r2, r3, r5
 8027690:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027694:	fb04 540e 	mla	r4, r4, lr, r5
 8027698:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802769c:	fb01 4100 	mla	r1, r1, r0, r4
 80276a0:	0a09      	lsrs	r1, r1, #8
 80276a2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80276a6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80276aa:	fb03 7101 	mla	r1, r3, r1, r7
 80276ae:	9b00      	ldr	r3, [sp, #0]
 80276b0:	fb0e 1e08 	mla	lr, lr, r8, r1
 80276b4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80276b8:	43da      	mvns	r2, r3
 80276ba:	1233      	asrs	r3, r6, #8
 80276bc:	fb00 e101 	mla	r1, r0, r1, lr
 80276c0:	10f0      	asrs	r0, r6, #3
 80276c2:	b2d2      	uxtb	r2, r2
 80276c4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80276c8:	0a09      	lsrs	r1, r1, #8
 80276ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80276ce:	00f6      	lsls	r6, r6, #3
 80276d0:	4353      	muls	r3, r2
 80276d2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80276d6:	4350      	muls	r0, r2
 80276d8:	b2f6      	uxtb	r6, r6
 80276da:	4321      	orrs	r1, r4
 80276dc:	4356      	muls	r6, r2
 80276de:	1c5a      	adds	r2, r3, #1
 80276e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80276e4:	0c0b      	lsrs	r3, r1, #16
 80276e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80276ea:	1c42      	adds	r2, r0, #1
 80276ec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80276f0:	0a0a      	lsrs	r2, r1, #8
 80276f2:	021b      	lsls	r3, r3, #8
 80276f4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80276f8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80276fc:	00d2      	lsls	r2, r2, #3
 80276fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027702:	4313      	orrs	r3, r2
 8027704:	1c72      	adds	r2, r6, #1
 8027706:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802770a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802770e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8027712:	4319      	orrs	r1, r3
 8027714:	9b02      	ldr	r3, [sp, #8]
 8027716:	8019      	strh	r1, [r3, #0]
 8027718:	b005      	add	sp, #20
 802771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802771e:	2500      	movs	r5, #0
 8027720:	e6fe      	b.n	8027520 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8027722:	2100      	movs	r1, #0
 8027724:	460d      	mov	r5, r1
 8027726:	e706      	b.n	8027536 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027728:	2100      	movs	r1, #0
 802772a:	e704      	b.n	8027536 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802772c:	4631      	mov	r1, r6
 802772e:	e702      	b.n	8027536 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027730:	2400      	movs	r4, #0
 8027732:	e713      	b.n	802755c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8027734:	2200      	movs	r2, #0
 8027736:	4614      	mov	r4, r2
 8027738:	e71a      	b.n	8027570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802773a:	4602      	mov	r2, r0
 802773c:	4604      	mov	r4, r0
 802773e:	e717      	b.n	8027570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027740:	2200      	movs	r2, #0
 8027742:	e715      	b.n	8027570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027744:	4632      	mov	r2, r6
 8027746:	e713      	b.n	8027570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08027748 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802774c:	b09b      	sub	sp, #108	; 0x6c
 802774e:	9218      	str	r2, [sp, #96]	; 0x60
 8027750:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027752:	9019      	str	r0, [sp, #100]	; 0x64
 8027754:	9116      	str	r1, [sp, #88]	; 0x58
 8027756:	6850      	ldr	r0, [r2, #4]
 8027758:	9307      	str	r3, [sp, #28]
 802775a:	6812      	ldr	r2, [r2, #0]
 802775c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027760:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027764:	fb00 1303 	mla	r3, r0, r3, r1
 8027768:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802776c:	930a      	str	r3, [sp, #40]	; 0x28
 802776e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027770:	681b      	ldr	r3, [r3, #0]
 8027772:	930f      	str	r3, [sp, #60]	; 0x3c
 8027774:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027776:	2b00      	cmp	r3, #0
 8027778:	dc03      	bgt.n	8027782 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802777a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802777c:	2b00      	cmp	r3, #0
 802777e:	f340 8387 	ble.w	8027e90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027782:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027784:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027788:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802778c:	1e48      	subs	r0, r1, #1
 802778e:	1e57      	subs	r7, r2, #1
 8027790:	9b07      	ldr	r3, [sp, #28]
 8027792:	2b00      	cmp	r3, #0
 8027794:	f340 8166 	ble.w	8027a64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027798:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802779c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80277a0:	d406      	bmi.n	80277b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80277a2:	4584      	cmp	ip, r0
 80277a4:	da04      	bge.n	80277b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	db02      	blt.n	80277b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80277aa:	42bb      	cmp	r3, r7
 80277ac:	f2c0 815b 	blt.w	8027a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80277b0:	f11c 0c01 	adds.w	ip, ip, #1
 80277b4:	f100 814b 	bmi.w	8027a4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80277b8:	4561      	cmp	r1, ip
 80277ba:	f2c0 8148 	blt.w	8027a4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80277be:	3301      	adds	r3, #1
 80277c0:	f100 8145 	bmi.w	8027a4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80277c4:	429a      	cmp	r2, r3
 80277c6:	f2c0 8142 	blt.w	8027a4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80277ca:	9b07      	ldr	r3, [sp, #28]
 80277cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80277ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80277d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80277d2:	2b00      	cmp	r3, #0
 80277d4:	f340 8165 	ble.w	8027aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80277d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80277da:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80277de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80277e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80277e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80277e8:	1422      	asrs	r2, r4, #16
 80277ea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80277ee:	689b      	ldr	r3, [r3, #8]
 80277f0:	f100 81d5 	bmi.w	8027b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80277f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80277f8:	4542      	cmp	r2, r8
 80277fa:	f280 81d0 	bge.w	8027b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80277fe:	f1bc 0f00 	cmp.w	ip, #0
 8027802:	f2c0 81cc 	blt.w	8027b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027806:	f10e 38ff 	add.w	r8, lr, #4294967295
 802780a:	45c4      	cmp	ip, r8
 802780c:	f280 81c7 	bge.w	8027b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027810:	b21b      	sxth	r3, r3
 8027812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027814:	fb0c 2203 	mla	r2, ip, r3, r2
 8027818:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802781c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027820:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027824:	2900      	cmp	r1, #0
 8027826:	f000 8182 	beq.w	8027b2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802782a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802782e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027830:	0e2d      	lsrs	r5, r5, #24
 8027832:	9512      	str	r5, [sp, #72]	; 0x48
 8027834:	b180      	cbz	r0, 8027858 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802783a:	3b01      	subs	r3, #1
 802783c:	009b      	lsls	r3, r3, #2
 802783e:	3304      	adds	r3, #4
 8027840:	eb08 0c03 	add.w	ip, r8, r3
 8027844:	f858 3003 	ldr.w	r3, [r8, r3]
 8027848:	9308      	str	r3, [sp, #32]
 802784a:	0e1b      	lsrs	r3, r3, #24
 802784c:	9310      	str	r3, [sp, #64]	; 0x40
 802784e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027852:	930c      	str	r3, [sp, #48]	; 0x30
 8027854:	0e1b      	lsrs	r3, r3, #24
 8027856:	9313      	str	r3, [sp, #76]	; 0x4c
 8027858:	b289      	uxth	r1, r1
 802785a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802785c:	b280      	uxth	r0, r0
 802785e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027860:	fb01 f900 	mul.w	r9, r1, r0
 8027864:	0109      	lsls	r1, r1, #4
 8027866:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802786a:	eba1 0809 	sub.w	r8, r1, r9
 802786e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8027872:	b280      	uxth	r0, r0
 8027874:	fa1f f888 	uxth.w	r8, r8
 8027878:	1a09      	subs	r1, r1, r0
 802787a:	fb08 f303 	mul.w	r3, r8, r3
 802787e:	b289      	uxth	r1, r1
 8027880:	fb01 330e 	mla	r3, r1, lr, r3
 8027884:	fb00 3305 	mla	r3, r0, r5, r3
 8027888:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802788a:	fb09 3305 	mla	r3, r9, r5, r3
 802788e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027892:	2b00      	cmp	r3, #0
 8027894:	f000 80d2 	beq.w	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027898:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802789c:	d01b      	beq.n	80278d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802789e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80278a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80278a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80278aa:	fb0e fe02 	mul.w	lr, lr, r2
 80278ae:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80278b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80278b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80278ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80278be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80278c2:	4452      	add	r2, sl
 80278c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80278c8:	0a12      	lsrs	r2, r2, #8
 80278ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80278ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80278d2:	ea42 020c 	orr.w	r2, r2, ip
 80278d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80278d8:	2dff      	cmp	r5, #255	; 0xff
 80278da:	d021      	beq.n	8027920 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80278dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80278de:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80278e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80278e4:	fb05 fb0b 	mul.w	fp, r5, fp
 80278e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80278ea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80278ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80278f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80278f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80278f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80278fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027900:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027904:	44de      	add	lr, fp
 8027906:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802790a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802790e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027912:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027916:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802791a:	ea4e 050a 	orr.w	r5, lr, sl
 802791e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027920:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027922:	2dff      	cmp	r5, #255	; 0xff
 8027924:	d021      	beq.n	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8027926:	9d08      	ldr	r5, [sp, #32]
 8027928:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802792c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802792e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027932:	9d08      	ldr	r5, [sp, #32]
 8027934:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027938:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802793a:	fb05 fa0e 	mul.w	sl, r5, lr
 802793e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027942:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802794a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802794e:	44de      	add	lr, fp
 8027950:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027954:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027958:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802795c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027960:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027964:	ea4e 050a 	orr.w	r5, lr, sl
 8027968:	9508      	str	r5, [sp, #32]
 802796a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802796c:	2dff      	cmp	r5, #255	; 0xff
 802796e:	d021      	beq.n	80279b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027972:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027976:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027978:	fb05 fb0b 	mul.w	fp, r5, fp
 802797c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802797e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027982:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027984:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027988:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802798c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027990:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027994:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027998:	44de      	add	lr, fp
 802799a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802799e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279ae:	ea4e 050a 	orr.w	r5, lr, sl
 80279b2:	950c      	str	r5, [sp, #48]	; 0x30
 80279b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80279b6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80279ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80279be:	2bff      	cmp	r3, #255	; 0xff
 80279c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80279c4:	9d08      	ldr	r5, [sp, #32]
 80279c6:	fb08 fc0c 	mul.w	ip, r8, ip
 80279ca:	fb01 cc0e 	mla	ip, r1, lr, ip
 80279ce:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80279d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80279d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80279d8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80279dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80279de:	fb09 cc0e 	mla	ip, r9, lr, ip
 80279e2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80279e6:	fb08 f80e 	mul.w	r8, r8, lr
 80279ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279ee:	fb01 8202 	mla	r2, r1, r2, r8
 80279f2:	9908      	ldr	r1, [sp, #32]
 80279f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80279f8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80279fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80279fe:	fb00 220a 	mla	r2, r0, sl, r2
 8027a02:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027a06:	fb09 2900 	mla	r9, r9, r0, r2
 8027a0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a0e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027a12:	ea4c 0c09 	orr.w	ip, ip, r9
 8027a16:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027a1a:	f040 8091 	bne.w	8027b40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027a1e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8027a22:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8027a26:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027a2a:	f022 0207 	bic.w	r2, r2, #7
 8027a2e:	431a      	orrs	r2, r3
 8027a30:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027a34:	ea4c 0c02 	orr.w	ip, ip, r2
 8027a38:	f8a7 c000 	strh.w	ip, [r7]
 8027a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027a3e:	3702      	adds	r7, #2
 8027a40:	441c      	add	r4, r3
 8027a42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a44:	441e      	add	r6, r3
 8027a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027a48:	3b01      	subs	r3, #1
 8027a4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8027a4c:	e6c0      	b.n	80277d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027a4e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027a50:	441c      	add	r4, r3
 8027a52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a54:	441e      	add	r6, r3
 8027a56:	9b07      	ldr	r3, [sp, #28]
 8027a58:	3b01      	subs	r3, #1
 8027a5a:	9307      	str	r3, [sp, #28]
 8027a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a5e:	3302      	adds	r3, #2
 8027a60:	930a      	str	r3, [sp, #40]	; 0x28
 8027a62:	e695      	b.n	8027790 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027a64:	d024      	beq.n	8027ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027a66:	9b07      	ldr	r3, [sp, #28]
 8027a68:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027a6a:	3b01      	subs	r3, #1
 8027a6c:	fb00 4003 	mla	r0, r0, r3, r4
 8027a70:	1400      	asrs	r0, r0, #16
 8027a72:	f53f aeaa 	bmi.w	80277ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027a76:	3901      	subs	r1, #1
 8027a78:	4288      	cmp	r0, r1
 8027a7a:	f6bf aea6 	bge.w	80277ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027a7e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027a80:	fb01 6303 	mla	r3, r1, r3, r6
 8027a84:	141b      	asrs	r3, r3, #16
 8027a86:	f53f aea0 	bmi.w	80277ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027a8a:	3a01      	subs	r2, #1
 8027a8c:	4293      	cmp	r3, r2
 8027a8e:	f6bf ae9c 	bge.w	80277ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027a92:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027a96:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027a9a:	f1bb 0f00 	cmp.w	fp, #0
 8027a9e:	f300 809a 	bgt.w	8027bd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027aa2:	9b07      	ldr	r3, [sp, #28]
 8027aa4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027aaa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027aae:	930a      	str	r3, [sp, #40]	; 0x28
 8027ab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027ab2:	2b00      	cmp	r3, #0
 8027ab4:	f340 81ec 	ble.w	8027e90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027abc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027abe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ac2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ac6:	eef0 6a62 	vmov.f32	s13, s5
 8027aca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ace:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ad2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ad6:	ee16 4a90 	vmov	r4, s13
 8027ada:	eef0 6a43 	vmov.f32	s13, s6
 8027ade:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ae2:	ee16 6a90 	vmov	r6, s13
 8027ae6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027aea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027aee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027af2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027af6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027afa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027afe:	ee12 2a90 	vmov	r2, s5
 8027b02:	eef0 2a47 	vmov.f32	s5, s14
 8027b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b0a:	ee13 2a10 	vmov	r2, s6
 8027b0e:	9327      	str	r3, [sp, #156]	; 0x9c
 8027b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b12:	eeb0 3a67 	vmov.f32	s6, s15
 8027b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b1a:	9328      	str	r3, [sp, #160]	; 0xa0
 8027b1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027b1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027b20:	3b01      	subs	r3, #1
 8027b22:	9316      	str	r3, [sp, #88]	; 0x58
 8027b24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b26:	bf08      	it	eq
 8027b28:	4613      	moveq	r3, r2
 8027b2a:	9307      	str	r3, [sp, #28]
 8027b2c:	e622      	b.n	8027774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027b2e:	2800      	cmp	r0, #0
 8027b30:	f43f ae92 	beq.w	8027858 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027b34:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027b38:	9308      	str	r3, [sp, #32]
 8027b3a:	0e1b      	lsrs	r3, r3, #24
 8027b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8027b3e:	e68b      	b.n	8027858 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027b40:	8839      	ldrh	r1, [r7, #0]
 8027b42:	43db      	mvns	r3, r3
 8027b44:	4dd4      	ldr	r5, [pc, #848]	; (8027e98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027b46:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027b4a:	fa5f f883 	uxtb.w	r8, r3
 8027b4e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8027b52:	10c8      	asrs	r0, r1, #3
 8027b54:	00cb      	lsls	r3, r1, #3
 8027b56:	fb0e fe08 	mul.w	lr, lr, r8
 8027b5a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027b5e:	b2db      	uxtb	r3, r3
 8027b60:	f10e 0101 	add.w	r1, lr, #1
 8027b64:	fb00 f008 	mul.w	r0, r0, r8
 8027b68:	fb03 f308 	mul.w	r3, r3, r8
 8027b6c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8027b70:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8027b74:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027b78:	f100 0e01 	add.w	lr, r0, #1
 8027b7c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8027b80:	b2c9      	uxtb	r1, r1
 8027b82:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027b86:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027b8a:	00d2      	lsls	r2, r2, #3
 8027b8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b90:	430a      	orrs	r2, r1
 8027b92:	1c59      	adds	r1, r3, #1
 8027b94:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027b98:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027b9c:	e748      	b.n	8027a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8027b9e:	f112 0801 	adds.w	r8, r2, #1
 8027ba2:	f53f af4b 	bmi.w	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ba6:	4543      	cmp	r3, r8
 8027ba8:	f6ff af48 	blt.w	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027bac:	f11c 0801 	adds.w	r8, ip, #1
 8027bb0:	f53f af44 	bmi.w	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027bb4:	45c6      	cmp	lr, r8
 8027bb6:	f6ff af41 	blt.w	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027bba:	b21b      	sxth	r3, r3
 8027bbc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027bc0:	fa0f f28e 	sxth.w	r2, lr
 8027bc4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027bc8:	9200      	str	r2, [sp, #0]
 8027bca:	4639      	mov	r1, r7
 8027bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027bce:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027bd0:	f7ff fc88 	bl	80274e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027bd4:	e732      	b.n	8027a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027bd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027bd8:	1421      	asrs	r1, r4, #16
 8027bda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027bdc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027be0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027be4:	1433      	asrs	r3, r6, #16
 8027be6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027bea:	fb07 1303 	mla	r3, r7, r3, r1
 8027bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027bf0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027bf4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027bf8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027bfc:	2a00      	cmp	r2, #0
 8027bfe:	f000 8108 	beq.w	8027e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027c02:	684d      	ldr	r5, [r1, #4]
 8027c04:	950d      	str	r5, [sp, #52]	; 0x34
 8027c06:	0e2d      	lsrs	r5, r5, #24
 8027c08:	9514      	str	r5, [sp, #80]	; 0x50
 8027c0a:	b178      	cbz	r0, 8027c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027c0c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8027c10:	3f01      	subs	r7, #1
 8027c12:	00bf      	lsls	r7, r7, #2
 8027c14:	3704      	adds	r7, #4
 8027c16:	eb01 0e07 	add.w	lr, r1, r7
 8027c1a:	59c9      	ldr	r1, [r1, r7]
 8027c1c:	9109      	str	r1, [sp, #36]	; 0x24
 8027c1e:	0e09      	lsrs	r1, r1, #24
 8027c20:	9111      	str	r1, [sp, #68]	; 0x44
 8027c22:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027c26:	910e      	str	r1, [sp, #56]	; 0x38
 8027c28:	0e09      	lsrs	r1, r1, #24
 8027c2a:	9115      	str	r1, [sp, #84]	; 0x54
 8027c2c:	b292      	uxth	r2, r2
 8027c2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c30:	b280      	uxth	r0, r0
 8027c32:	fb02 f900 	mul.w	r9, r2, r0
 8027c36:	0112      	lsls	r2, r2, #4
 8027c38:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027c3c:	eba2 0e09 	sub.w	lr, r2, r9
 8027c40:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027c44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027c46:	b280      	uxth	r0, r0
 8027c48:	fa1f fe8e 	uxth.w	lr, lr
 8027c4c:	1a09      	subs	r1, r1, r0
 8027c4e:	fb0e f202 	mul.w	r2, lr, r2
 8027c52:	b289      	uxth	r1, r1
 8027c54:	fb01 220c 	mla	r2, r1, ip, r2
 8027c58:	fb00 2205 	mla	r2, r0, r5, r2
 8027c5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c5e:	fb09 2205 	mla	r2, r9, r5, r2
 8027c62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027c66:	2a00      	cmp	r2, #0
 8027c68:	f000 80ca 	beq.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027c6c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027c70:	d019      	beq.n	8027ca6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8027c72:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027c76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c7a:	fb0c fa0a 	mul.w	sl, ip, sl
 8027c7e:	fb0c fc03 	mul.w	ip, ip, r3
 8027c82:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027c86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027c8a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027c8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c92:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027c96:	4453      	add	r3, sl
 8027c98:	0a3f      	lsrs	r7, r7, #8
 8027c9a:	0a1b      	lsrs	r3, r3, #8
 8027c9c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027ca0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027ca4:	433b      	orrs	r3, r7
 8027ca6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027ca8:	2dff      	cmp	r5, #255	; 0xff
 8027caa:	d020      	beq.n	8027cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8027cac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027cae:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027cb2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027cb4:	436f      	muls	r7, r5
 8027cb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027cb8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027cbc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027cc0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027cc2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027cc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027cca:	fb05 fa0a 	mul.w	sl, r5, sl
 8027cce:	44bc      	add	ip, r7
 8027cd0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027cd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cd8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027cdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ce0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ce4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027ce8:	ea4c 050a 	orr.w	r5, ip, sl
 8027cec:	950d      	str	r5, [sp, #52]	; 0x34
 8027cee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027cf0:	2dff      	cmp	r5, #255	; 0xff
 8027cf2:	d020      	beq.n	8027d36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8027cf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027cf6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027cfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027cfc:	436f      	muls	r7, r5
 8027cfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d00:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027d04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027d06:	fb05 fa0c 	mul.w	sl, r5, ip
 8027d0a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d16:	44bc      	add	ip, r7
 8027d18:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d30:	ea4c 050a 	orr.w	r5, ip, sl
 8027d34:	9509      	str	r5, [sp, #36]	; 0x24
 8027d36:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d38:	2dff      	cmp	r5, #255	; 0xff
 8027d3a:	d020      	beq.n	8027d7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8027d3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d3e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d42:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d44:	436f      	muls	r7, r5
 8027d46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d4c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027d50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d52:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d5a:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d5e:	44bc      	add	ip, r7
 8027d60:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027d6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d78:	ea4c 050a 	orr.w	r5, ip, sl
 8027d7c:	950e      	str	r5, [sp, #56]	; 0x38
 8027d7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027d80:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027d84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d88:	2aff      	cmp	r2, #255	; 0xff
 8027d8a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d90:	fb0e f707 	mul.w	r7, lr, r7
 8027d94:	fb01 770c 	mla	r7, r1, ip, r7
 8027d98:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027d9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d9e:	fb00 770c 	mla	r7, r0, ip, r7
 8027da2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027da6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027da8:	fb09 770c 	mla	r7, r9, ip, r7
 8027dac:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027db0:	fb0e fe0c 	mul.w	lr, lr, ip
 8027db4:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027db8:	fb01 e303 	mla	r3, r1, r3, lr
 8027dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027dbe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027dc2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027dc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027dc8:	fb00 330a 	mla	r3, r0, sl, r3
 8027dcc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027dd0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dd8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027ddc:	ea47 070c 	orr.w	r7, r7, ip
 8027de0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027de4:	d11e      	bne.n	8027e24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027de6:	097a      	lsrs	r2, r7, #5
 8027de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027dec:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027df0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027df4:	f023 0307 	bic.w	r3, r3, #7
 8027df8:	4313      	orrs	r3, r2
 8027dfa:	431f      	orrs	r7, r3
 8027dfc:	f8a8 7000 	strh.w	r7, [r8]
 8027e00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027e02:	f108 0802 	add.w	r8, r8, #2
 8027e06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027e0a:	441c      	add	r4, r3
 8027e0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e0e:	441e      	add	r6, r3
 8027e10:	e643      	b.n	8027a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027e12:	2800      	cmp	r0, #0
 8027e14:	f43f af0a 	beq.w	8027c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027e18:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8027e1e:	0e09      	lsrs	r1, r1, #24
 8027e20:	9111      	str	r1, [sp, #68]	; 0x44
 8027e22:	e703      	b.n	8027c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027e24:	f8b8 1000 	ldrh.w	r1, [r8]
 8027e28:	43d2      	mvns	r2, r2
 8027e2a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8027e2e:	fa5f fe82 	uxtb.w	lr, r2
 8027e32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027e36:	10c8      	asrs	r0, r1, #3
 8027e38:	00ca      	lsls	r2, r1, #3
 8027e3a:	fb0c fc0e 	mul.w	ip, ip, lr
 8027e3e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027e42:	b2d2      	uxtb	r2, r2
 8027e44:	f10c 0101 	add.w	r1, ip, #1
 8027e48:	fb00 f00e 	mul.w	r0, r0, lr
 8027e4c:	fb02 f20e 	mul.w	r2, r2, lr
 8027e50:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027e54:	0c39      	lsrs	r1, r7, #16
 8027e56:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027e5a:	490f      	ldr	r1, [pc, #60]	; (8027e98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027e5c:	fa5f fc8c 	uxtb.w	ip, ip
 8027e60:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027e64:	1c41      	adds	r1, r0, #1
 8027e66:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027e6a:	1c51      	adds	r1, r2, #1
 8027e6c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027e70:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027e74:	00c0      	lsls	r0, r0, #3
 8027e76:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027e7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e7e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027e82:	ea4c 0c00 	orr.w	ip, ip, r0
 8027e86:	ea47 0c0c 	orr.w	ip, r7, ip
 8027e8a:	f8a8 c000 	strh.w	ip, [r8]
 8027e8e:	e7b7      	b.n	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027e90:	b01b      	add	sp, #108	; 0x6c
 8027e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e96:	bf00      	nop
 8027e98:	fffff800 	.word	0xfffff800

08027e9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027ea0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8027ea4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027ea8:	2d00      	cmp	r5, #0
 8027eaa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027eae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027eb2:	fb05 0e03 	mla	lr, r5, r3, r0
 8027eb6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8027eba:	f2c0 808c 	blt.w	8027fd6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027ebe:	45a9      	cmp	r9, r5
 8027ec0:	f340 8089 	ble.w	8027fd6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027ec4:	2800      	cmp	r0, #0
 8027ec6:	f2c0 8084 	blt.w	8027fd2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027eca:	4580      	cmp	r8, r0
 8027ecc:	f340 8081 	ble.w	8027fd2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027ed0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027ed4:	f01e 0f01 	tst.w	lr, #1
 8027ed8:	5d16      	ldrb	r6, [r2, r4]
 8027eda:	bf0c      	ite	eq
 8027edc:	f006 060f 	andeq.w	r6, r6, #15
 8027ee0:	1136      	asrne	r6, r6, #4
 8027ee2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027ee6:	b2f6      	uxtb	r6, r6
 8027ee8:	1c44      	adds	r4, r0, #1
 8027eea:	d477      	bmi.n	8027fdc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027eec:	45a0      	cmp	r8, r4
 8027eee:	dd75      	ble.n	8027fdc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027ef0:	2f00      	cmp	r7, #0
 8027ef2:	d075      	beq.n	8027fe0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8027ef4:	f10e 0a01 	add.w	sl, lr, #1
 8027ef8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027efc:	f01a 0f01 	tst.w	sl, #1
 8027f00:	5d14      	ldrb	r4, [r2, r4]
 8027f02:	bf0c      	ite	eq
 8027f04:	f004 040f 	andeq.w	r4, r4, #15
 8027f08:	1124      	asrne	r4, r4, #4
 8027f0a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027f0e:	b2e4      	uxtb	r4, r4
 8027f10:	3501      	adds	r5, #1
 8027f12:	d469      	bmi.n	8027fe8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027f14:	45a9      	cmp	r9, r5
 8027f16:	dd67      	ble.n	8027fe8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027f18:	f1bc 0f00 	cmp.w	ip, #0
 8027f1c:	d067      	beq.n	8027fee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8027f1e:	2800      	cmp	r0, #0
 8027f20:	db60      	blt.n	8027fe4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027f22:	4580      	cmp	r8, r0
 8027f24:	dd5e      	ble.n	8027fe4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027f26:	eb03 090e 	add.w	r9, r3, lr
 8027f2a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027f2e:	f019 0f01 	tst.w	r9, #1
 8027f32:	5d55      	ldrb	r5, [r2, r5]
 8027f34:	bf0c      	ite	eq
 8027f36:	f005 050f 	andeq.w	r5, r5, #15
 8027f3a:	112d      	asrne	r5, r5, #4
 8027f3c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027f40:	b2ed      	uxtb	r5, r5
 8027f42:	3001      	adds	r0, #1
 8027f44:	d456      	bmi.n	8027ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027f46:	4580      	cmp	r8, r0
 8027f48:	dd54      	ble.n	8027ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027f4a:	2f00      	cmp	r7, #0
 8027f4c:	d054      	beq.n	8027ff8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8027f4e:	3301      	adds	r3, #1
 8027f50:	449e      	add	lr, r3
 8027f52:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027f56:	f01e 0f01 	tst.w	lr, #1
 8027f5a:	5cd0      	ldrb	r0, [r2, r3]
 8027f5c:	bf0c      	ite	eq
 8027f5e:	f000 000f 	andeq.w	r0, r0, #15
 8027f62:	1100      	asrne	r0, r0, #4
 8027f64:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027f68:	b2c3      	uxtb	r3, r0
 8027f6a:	b2ba      	uxth	r2, r7
 8027f6c:	fa1f fc8c 	uxth.w	ip, ip
 8027f70:	fb02 f00c 	mul.w	r0, r2, ip
 8027f74:	0112      	lsls	r2, r2, #4
 8027f76:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027f7a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027f7e:	1a12      	subs	r2, r2, r0
 8027f80:	fa1f fc8c 	uxth.w	ip, ip
 8027f84:	b292      	uxth	r2, r2
 8027f86:	eba7 070c 	sub.w	r7, r7, ip
 8027f8a:	4362      	muls	r2, r4
 8027f8c:	b2bf      	uxth	r7, r7
 8027f8e:	fb06 2207 	mla	r2, r6, r7, r2
 8027f92:	fb0c 2505 	mla	r5, ip, r5, r2
 8027f96:	fb00 5303 	mla	r3, r0, r3, r5
 8027f9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f9e:	b1b3      	cbz	r3, 8027fce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027fa0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8027fa4:	435a      	muls	r2, r3
 8027fa6:	1c53      	adds	r3, r2, #1
 8027fa8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027fac:	4a2d      	ldr	r2, [pc, #180]	; (8028064 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8027fae:	121b      	asrs	r3, r3, #8
 8027fb0:	6812      	ldr	r2, [r2, #0]
 8027fb2:	2bff      	cmp	r3, #255	; 0xff
 8027fb4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027fb8:	d120      	bne.n	8027ffc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8027fba:	0950      	lsrs	r0, r2, #5
 8027fbc:	4b2a      	ldr	r3, [pc, #168]	; (8028068 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8027fbe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027fc2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027fc6:	4033      	ands	r3, r6
 8027fc8:	4318      	orrs	r0, r3
 8027fca:	4302      	orrs	r2, r0
 8027fcc:	800a      	strh	r2, [r1, #0]
 8027fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fd2:	2600      	movs	r6, #0
 8027fd4:	e788      	b.n	8027ee8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027fd6:	2400      	movs	r4, #0
 8027fd8:	4626      	mov	r6, r4
 8027fda:	e799      	b.n	8027f10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027fdc:	2400      	movs	r4, #0
 8027fde:	e797      	b.n	8027f10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027fe0:	463c      	mov	r4, r7
 8027fe2:	e795      	b.n	8027f10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027fe4:	2500      	movs	r5, #0
 8027fe6:	e7ac      	b.n	8027f42 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027fe8:	2300      	movs	r3, #0
 8027fea:	461d      	mov	r5, r3
 8027fec:	e7bd      	b.n	8027f6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027fee:	4663      	mov	r3, ip
 8027ff0:	4665      	mov	r5, ip
 8027ff2:	e7ba      	b.n	8027f6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	e7b8      	b.n	8027f6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027ff8:	463b      	mov	r3, r7
 8027ffa:	e7b6      	b.n	8027f6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027ffc:	880d      	ldrh	r5, [r1, #0]
 8027ffe:	b29f      	uxth	r7, r3
 8028000:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028004:	43db      	mvns	r3, r3
 8028006:	122c      	asrs	r4, r5, #8
 8028008:	fb10 f007 	smulbb	r0, r0, r7
 802800c:	b2db      	uxtb	r3, r3
 802800e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028012:	b2f6      	uxtb	r6, r6
 8028014:	b2d2      	uxtb	r2, r2
 8028016:	fb04 0403 	mla	r4, r4, r3, r0
 802801a:	10e8      	asrs	r0, r5, #3
 802801c:	fb12 f207 	smulbb	r2, r2, r7
 8028020:	00ed      	lsls	r5, r5, #3
 8028022:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028026:	b2a4      	uxth	r4, r4
 8028028:	fb16 f607 	smulbb	r6, r6, r7
 802802c:	b2ed      	uxtb	r5, r5
 802802e:	fb00 6603 	mla	r6, r0, r3, r6
 8028032:	fb05 2303 	mla	r3, r5, r3, r2
 8028036:	b2b0      	uxth	r0, r6
 8028038:	b29a      	uxth	r2, r3
 802803a:	1c63      	adds	r3, r4, #1
 802803c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028040:	1c53      	adds	r3, r2, #1
 8028042:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028046:	1c42      	adds	r2, r0, #1
 8028048:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802804c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028050:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028054:	0940      	lsrs	r0, r0, #5
 8028056:	4323      	orrs	r3, r4
 8028058:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802805c:	4303      	orrs	r3, r0
 802805e:	800b      	strh	r3, [r1, #0]
 8028060:	e7b5      	b.n	8027fce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028062:	bf00      	nop
 8028064:	200152dc 	.word	0x200152dc
 8028068:	00fff800 	.word	0x00fff800

0802806c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028070:	b097      	sub	sp, #92	; 0x5c
 8028072:	9214      	str	r2, [sp, #80]	; 0x50
 8028074:	9309      	str	r3, [sp, #36]	; 0x24
 8028076:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028078:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802807c:	9015      	str	r0, [sp, #84]	; 0x54
 802807e:	910d      	str	r1, [sp, #52]	; 0x34
 8028080:	6850      	ldr	r0, [r2, #4]
 8028082:	930f      	str	r3, [sp, #60]	; 0x3c
 8028084:	6812      	ldr	r2, [r2, #0]
 8028086:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802808a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802808e:	fb00 1303 	mla	r3, r0, r3, r1
 8028092:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028096:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028098:	689b      	ldr	r3, [r3, #8]
 802809a:	3301      	adds	r3, #1
 802809c:	f023 0301 	bic.w	r3, r3, #1
 80280a0:	930a      	str	r3, [sp, #40]	; 0x28
 80280a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80280a4:	681f      	ldr	r7, [r3, #0]
 80280a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80280a8:	2b00      	cmp	r3, #0
 80280aa:	dc03      	bgt.n	80280b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80280ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	f340 8289 	ble.w	80285c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80280b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80280b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80280ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80280be:	1e48      	subs	r0, r1, #1
 80280c0:	f102 3cff 	add.w	ip, r2, #4294967295
 80280c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280c6:	2b00      	cmp	r3, #0
 80280c8:	f340 80c5 	ble.w	8028256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80280cc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80280d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80280d4:	d406      	bmi.n	80280e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80280d6:	4586      	cmp	lr, r0
 80280d8:	da04      	bge.n	80280e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80280da:	2b00      	cmp	r3, #0
 80280dc:	db02      	blt.n	80280e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80280de:	4563      	cmp	r3, ip
 80280e0:	f2c0 80ba 	blt.w	8028258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80280e4:	f11e 0e01 	adds.w	lr, lr, #1
 80280e8:	f100 80ab 	bmi.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80280ec:	4571      	cmp	r1, lr
 80280ee:	f2c0 80a8 	blt.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80280f2:	3301      	adds	r3, #1
 80280f4:	f100 80a5 	bmi.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80280f8:	429a      	cmp	r2, r3
 80280fa:	f2c0 80a2 	blt.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80280fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028100:	46c8      	mov	r8, r9
 8028102:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028106:	930e      	str	r3, [sp, #56]	; 0x38
 8028108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802810a:	2b00      	cmp	r3, #0
 802810c:	f340 80c4 	ble.w	8028298 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8028110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028112:	1430      	asrs	r0, r6, #16
 8028114:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028118:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802811c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028120:	1423      	asrs	r3, r4, #16
 8028122:	f100 814f 	bmi.w	80283c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028126:	f10c 3bff 	add.w	fp, ip, #4294967295
 802812a:	455b      	cmp	r3, fp
 802812c:	f280 814a 	bge.w	80283c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028130:	2800      	cmp	r0, #0
 8028132:	f2c0 8147 	blt.w	80283c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028136:	f10e 3bff 	add.w	fp, lr, #4294967295
 802813a:	4558      	cmp	r0, fp
 802813c:	f280 8142 	bge.w	80283c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028140:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028142:	fb00 3305 	mla	r3, r0, r5, r3
 8028146:	0858      	lsrs	r0, r3, #1
 8028148:	07dd      	lsls	r5, r3, #31
 802814a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802814e:	bf54      	ite	pl
 8028150:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028154:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028158:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802815c:	fa5f fc8c 	uxtb.w	ip, ip
 8028160:	2a00      	cmp	r2, #0
 8028162:	f000 80dd 	beq.w	8028320 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8028166:	1c58      	adds	r0, r3, #1
 8028168:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802816c:	07c0      	lsls	r0, r0, #31
 802816e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028172:	bf54      	ite	pl
 8028174:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028178:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802817c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028180:	fa5f f08e 	uxtb.w	r0, lr
 8028184:	9010      	str	r0, [sp, #64]	; 0x40
 8028186:	b1d9      	cbz	r1, 80281c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028188:	4453      	add	r3, sl
 802818a:	0858      	lsrs	r0, r3, #1
 802818c:	07dd      	lsls	r5, r3, #31
 802818e:	f103 0301 	add.w	r3, r3, #1
 8028192:	5c38      	ldrb	r0, [r7, r0]
 8028194:	bf54      	ite	pl
 8028196:	f000 000f 	andpl.w	r0, r0, #15
 802819a:	1100      	asrmi	r0, r0, #4
 802819c:	07dd      	lsls	r5, r3, #31
 802819e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80281a2:	b2c0      	uxtb	r0, r0
 80281a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80281a6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80281aa:	f817 e000 	ldrb.w	lr, [r7, r0]
 80281ae:	bf54      	ite	pl
 80281b0:	f00e 030f 	andpl.w	r3, lr, #15
 80281b4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80281b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80281bc:	b2db      	uxtb	r3, r3
 80281be:	9311      	str	r3, [sp, #68]	; 0x44
 80281c0:	b292      	uxth	r2, r2
 80281c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80281c4:	b289      	uxth	r1, r1
 80281c6:	fb02 f301 	mul.w	r3, r2, r1
 80281ca:	0112      	lsls	r2, r2, #4
 80281cc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80281d0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80281d4:	1ad2      	subs	r2, r2, r3
 80281d6:	b289      	uxth	r1, r1
 80281d8:	b292      	uxth	r2, r2
 80281da:	1a40      	subs	r0, r0, r1
 80281dc:	436a      	muls	r2, r5
 80281de:	b280      	uxth	r0, r0
 80281e0:	fb0c 2c00 	mla	ip, ip, r0, r2
 80281e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80281e6:	fb01 c102 	mla	r1, r1, r2, ip
 80281ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80281ec:	fb03 1302 	mla	r3, r3, r2, r1
 80281f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80281f4:	b1db      	cbz	r3, 802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80281f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80281f8:	4353      	muls	r3, r2
 80281fa:	1c5a      	adds	r2, r3, #1
 80281fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028200:	4ac6      	ldr	r2, [pc, #792]	; (802851c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028202:	121b      	asrs	r3, r3, #8
 8028204:	6812      	ldr	r2, [r2, #0]
 8028206:	2bff      	cmp	r3, #255	; 0xff
 8028208:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802820c:	f040 8099 	bne.w	8028342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8028210:	0953      	lsrs	r3, r2, #5
 8028212:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028216:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802821a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802821e:	f02c 0c07 	bic.w	ip, ip, #7
 8028222:	ea43 0c0c 	orr.w	ip, r3, ip
 8028226:	ea4c 0202 	orr.w	r2, ip, r2
 802822a:	f8a8 2000 	strh.w	r2, [r8]
 802822e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028230:	f108 0802 	add.w	r8, r8, #2
 8028234:	441c      	add	r4, r3
 8028236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028238:	441e      	add	r6, r3
 802823a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802823c:	3b01      	subs	r3, #1
 802823e:	930e      	str	r3, [sp, #56]	; 0x38
 8028240:	e762      	b.n	8028108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028244:	f109 0902 	add.w	r9, r9, #2
 8028248:	441c      	add	r4, r3
 802824a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802824c:	441e      	add	r6, r3
 802824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028250:	3b01      	subs	r3, #1
 8028252:	9309      	str	r3, [sp, #36]	; 0x24
 8028254:	e736      	b.n	80280c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028256:	d024      	beq.n	80282a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802825a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802825c:	3b01      	subs	r3, #1
 802825e:	fb00 4003 	mla	r0, r0, r3, r4
 8028262:	1400      	asrs	r0, r0, #16
 8028264:	f53f af4b 	bmi.w	80280fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028268:	3901      	subs	r1, #1
 802826a:	4288      	cmp	r0, r1
 802826c:	f6bf af47 	bge.w	80280fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028270:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028272:	fb01 6303 	mla	r3, r1, r3, r6
 8028276:	141b      	asrs	r3, r3, #16
 8028278:	f53f af41 	bmi.w	80280fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802827c:	3a01      	subs	r2, #1
 802827e:	4293      	cmp	r3, r2
 8028280:	f6bf af3d 	bge.w	80280fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028284:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028288:	46c8      	mov	r8, r9
 802828a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802828e:	930e      	str	r3, [sp, #56]	; 0x38
 8028290:	f1bb 0f00 	cmp.w	fp, #0
 8028294:	f300 80b7 	bgt.w	8028406 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8028298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802829a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802829e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80282a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	f340 818e 	ble.w	80285c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80282aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80282ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80282b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80282b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80282b8:	eef0 6a62 	vmov.f32	s13, s5
 80282bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80282c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80282c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282c8:	ee16 4a90 	vmov	r4, s13
 80282cc:	eef0 6a43 	vmov.f32	s13, s6
 80282d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282d4:	ee16 6a90 	vmov	r6, s13
 80282d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80282dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80282e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80282e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80282e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80282ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80282f0:	ee12 2a90 	vmov	r2, s5
 80282f4:	eef0 2a47 	vmov.f32	s5, s14
 80282f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80282fc:	ee13 2a10 	vmov	r2, s6
 8028300:	9323      	str	r3, [sp, #140]	; 0x8c
 8028302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028304:	eeb0 3a67 	vmov.f32	s6, s15
 8028308:	fb92 f3f3 	sdiv	r3, r2, r3
 802830c:	9324      	str	r3, [sp, #144]	; 0x90
 802830e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028312:	3b01      	subs	r3, #1
 8028314:	930d      	str	r3, [sp, #52]	; 0x34
 8028316:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028318:	bf08      	it	eq
 802831a:	4613      	moveq	r3, r2
 802831c:	9309      	str	r3, [sp, #36]	; 0x24
 802831e:	e6c2      	b.n	80280a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028320:	2900      	cmp	r1, #0
 8028322:	f43f af4d 	beq.w	80281c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028326:	eb0a 0003 	add.w	r0, sl, r3
 802832a:	0843      	lsrs	r3, r0, #1
 802832c:	07c0      	lsls	r0, r0, #31
 802832e:	5cfb      	ldrb	r3, [r7, r3]
 8028330:	bf54      	ite	pl
 8028332:	f003 030f 	andpl.w	r3, r3, #15
 8028336:	111b      	asrmi	r3, r3, #4
 8028338:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802833c:	b2db      	uxtb	r3, r3
 802833e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028340:	e73e      	b.n	80281c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028342:	f8b8 e000 	ldrh.w	lr, [r8]
 8028346:	fa1f fb83 	uxth.w	fp, r3
 802834a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802834e:	43db      	mvns	r3, r3
 8028350:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028354:	fb11 f10b 	smulbb	r1, r1, fp
 8028358:	b2db      	uxtb	r3, r3
 802835a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802835e:	fa5f fc8c 	uxtb.w	ip, ip
 8028362:	b2d2      	uxtb	r2, r2
 8028364:	fb00 1003 	mla	r0, r0, r3, r1
 8028368:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802836c:	fb1c fc0b 	smulbb	ip, ip, fp
 8028370:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028374:	b280      	uxth	r0, r0
 8028376:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802837a:	fb12 fb0b 	smulbb	fp, r2, fp
 802837e:	fa5f fe8e 	uxtb.w	lr, lr
 8028382:	fb01 cc03 	mla	ip, r1, r3, ip
 8028386:	fb0e bb03 	mla	fp, lr, r3, fp
 802838a:	1c43      	adds	r3, r0, #1
 802838c:	fa1f fc8c 	uxth.w	ip, ip
 8028390:	fa1f fb8b 	uxth.w	fp, fp
 8028394:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028398:	f10c 0101 	add.w	r1, ip, #1
 802839c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80283a0:	f10b 0001 	add.w	r0, fp, #1
 80283a4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80283a8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80283ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80283b0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80283b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80283b8:	4318      	orrs	r0, r3
 80283ba:	ea40 000c 	orr.w	r0, r0, ip
 80283be:	f8a8 0000 	strh.w	r0, [r8]
 80283c2:	e734      	b.n	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283c4:	f113 0b01 	adds.w	fp, r3, #1
 80283c8:	f53f af31 	bmi.w	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283cc:	45dc      	cmp	ip, fp
 80283ce:	f6ff af2e 	blt.w	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283d2:	f110 0b01 	adds.w	fp, r0, #1
 80283d6:	f53f af2a 	bmi.w	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283da:	45de      	cmp	lr, fp
 80283dc:	f6ff af27 	blt.w	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283e0:	9302      	str	r3, [sp, #8]
 80283e2:	fa0f f38e 	sxth.w	r3, lr
 80283e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80283e8:	9301      	str	r3, [sp, #4]
 80283ea:	fa0f f38c 	sxth.w	r3, ip
 80283ee:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80283f2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80283f6:	9300      	str	r3, [sp, #0]
 80283f8:	463a      	mov	r2, r7
 80283fa:	4653      	mov	r3, sl
 80283fc:	4641      	mov	r1, r8
 80283fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028400:	f7ff fd4c 	bl	8027e9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028404:	e713      	b.n	802822e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028406:	1422      	asrs	r2, r4, #16
 8028408:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802840a:	1433      	asrs	r3, r6, #16
 802840c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028410:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028414:	fb05 2303 	mla	r3, r5, r3, r2
 8028418:	085a      	lsrs	r2, r3, #1
 802841a:	07dd      	lsls	r5, r3, #31
 802841c:	5cba      	ldrb	r2, [r7, r2]
 802841e:	bf54      	ite	pl
 8028420:	f002 020f 	andpl.w	r2, r2, #15
 8028424:	1112      	asrmi	r2, r2, #4
 8028426:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802842a:	b2d2      	uxtb	r2, r2
 802842c:	2900      	cmp	r1, #0
 802842e:	d077      	beq.n	8028520 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028430:	f103 0e01 	add.w	lr, r3, #1
 8028434:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028438:	f01e 0f01 	tst.w	lr, #1
 802843c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028440:	bf0c      	ite	eq
 8028442:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028446:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802844a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802844e:	fa5f f58c 	uxtb.w	r5, ip
 8028452:	9512      	str	r5, [sp, #72]	; 0x48
 8028454:	b308      	cbz	r0, 802849a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028456:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028458:	442b      	add	r3, r5
 802845a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802845e:	07dd      	lsls	r5, r3, #31
 8028460:	f103 0301 	add.w	r3, r3, #1
 8028464:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028468:	bf54      	ite	pl
 802846a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802846e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028472:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028476:	fa5f f58c 	uxtb.w	r5, ip
 802847a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802847e:	950c      	str	r5, [sp, #48]	; 0x30
 8028480:	07dd      	lsls	r5, r3, #31
 8028482:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028486:	bf54      	ite	pl
 8028488:	f00c 0c0f 	andpl.w	ip, ip, #15
 802848c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028490:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028494:	fa5f f38c 	uxtb.w	r3, ip
 8028498:	9313      	str	r3, [sp, #76]	; 0x4c
 802849a:	b289      	uxth	r1, r1
 802849c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802849e:	b280      	uxth	r0, r0
 80284a0:	fb01 f300 	mul.w	r3, r1, r0
 80284a4:	0109      	lsls	r1, r1, #4
 80284a6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80284aa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80284ae:	1ac9      	subs	r1, r1, r3
 80284b0:	b280      	uxth	r0, r0
 80284b2:	b289      	uxth	r1, r1
 80284b4:	ebac 0c00 	sub.w	ip, ip, r0
 80284b8:	4369      	muls	r1, r5
 80284ba:	fa1f fc8c 	uxth.w	ip, ip
 80284be:	fb02 120c 	mla	r2, r2, ip, r1
 80284c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80284c4:	fb00 2001 	mla	r0, r0, r1, r2
 80284c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80284ca:	fb03 0302 	mla	r3, r3, r2, r0
 80284ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284d2:	b1d3      	cbz	r3, 802850a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80284d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80284d6:	4353      	muls	r3, r2
 80284d8:	1c5a      	adds	r2, r3, #1
 80284da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80284de:	4a0f      	ldr	r2, [pc, #60]	; (802851c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80284e0:	121b      	asrs	r3, r3, #8
 80284e2:	6812      	ldr	r2, [r2, #0]
 80284e4:	2bff      	cmp	r3, #255	; 0xff
 80284e6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80284ea:	d12d      	bne.n	8028548 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80284ec:	0953      	lsrs	r3, r2, #5
 80284ee:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80284f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80284f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80284fa:	f02c 0c07 	bic.w	ip, ip, #7
 80284fe:	ea43 0c0c 	orr.w	ip, r3, ip
 8028502:	ea4c 0202 	orr.w	r2, ip, r2
 8028506:	f8a8 2000 	strh.w	r2, [r8]
 802850a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802850c:	f108 0802 	add.w	r8, r8, #2
 8028510:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028514:	441c      	add	r4, r3
 8028516:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028518:	441e      	add	r6, r3
 802851a:	e6b9      	b.n	8028290 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802851c:	200152dc 	.word	0x200152dc
 8028520:	2800      	cmp	r0, #0
 8028522:	d0ba      	beq.n	802849a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028524:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028526:	442b      	add	r3, r5
 8028528:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802852c:	07db      	lsls	r3, r3, #31
 802852e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028532:	bf54      	ite	pl
 8028534:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028538:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802853c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028540:	fa5f f38c 	uxtb.w	r3, ip
 8028544:	930c      	str	r3, [sp, #48]	; 0x30
 8028546:	e7a8      	b.n	802849a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028548:	f8b8 e000 	ldrh.w	lr, [r8]
 802854c:	fa1f fa83 	uxth.w	sl, r3
 8028550:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028554:	43db      	mvns	r3, r3
 8028556:	ea4f 202e 	mov.w	r0, lr, asr #8
 802855a:	fb11 f10a 	smulbb	r1, r1, sl
 802855e:	b2db      	uxtb	r3, r3
 8028560:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028564:	b2d2      	uxtb	r2, r2
 8028566:	fa5f fc8c 	uxtb.w	ip, ip
 802856a:	fb00 1003 	mla	r0, r0, r3, r1
 802856e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028572:	fb12 f20a 	smulbb	r2, r2, sl
 8028576:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802857a:	b280      	uxth	r0, r0
 802857c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028580:	fb1c fc0a 	smulbb	ip, ip, sl
 8028584:	fa5f fe8e 	uxtb.w	lr, lr
 8028588:	fb0e 2203 	mla	r2, lr, r3, r2
 802858c:	fb01 cc03 	mla	ip, r1, r3, ip
 8028590:	1c43      	adds	r3, r0, #1
 8028592:	b292      	uxth	r2, r2
 8028594:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028598:	1c51      	adds	r1, r2, #1
 802859a:	fa1f fc8c 	uxth.w	ip, ip
 802859e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80285a2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80285a6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80285aa:	4308      	orrs	r0, r1
 80285ac:	f10c 0101 	add.w	r1, ip, #1
 80285b0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80285b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80285b8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80285bc:	ea40 000c 	orr.w	r0, r0, ip
 80285c0:	f8a8 0000 	strh.w	r0, [r8]
 80285c4:	e7a1      	b.n	802850a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80285c6:	b017      	add	sp, #92	; 0x5c
 80285c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080285cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80285cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80285d0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80285d4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80285d8:	2d00      	cmp	r5, #0
 80285da:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80285de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80285e2:	fb05 0e03 	mla	lr, r5, r3, r0
 80285e6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80285ea:	f2c0 80b0 	blt.w	802874e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80285ee:	45a9      	cmp	r9, r5
 80285f0:	f340 80ad 	ble.w	802874e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80285f4:	2800      	cmp	r0, #0
 80285f6:	f2c0 80a8 	blt.w	802874a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80285fa:	4580      	cmp	r8, r0
 80285fc:	f340 80a5 	ble.w	802874a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028600:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028604:	f01e 0f01 	tst.w	lr, #1
 8028608:	5d16      	ldrb	r6, [r2, r4]
 802860a:	bf0c      	ite	eq
 802860c:	f006 060f 	andeq.w	r6, r6, #15
 8028610:	1136      	asrne	r6, r6, #4
 8028612:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028616:	b2f6      	uxtb	r6, r6
 8028618:	1c44      	adds	r4, r0, #1
 802861a:	f100 809b 	bmi.w	8028754 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802861e:	45a0      	cmp	r8, r4
 8028620:	f340 8098 	ble.w	8028754 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028624:	2f00      	cmp	r7, #0
 8028626:	f000 8097 	beq.w	8028758 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802862a:	f10e 0a01 	add.w	sl, lr, #1
 802862e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028632:	f01a 0f01 	tst.w	sl, #1
 8028636:	5d14      	ldrb	r4, [r2, r4]
 8028638:	bf0c      	ite	eq
 802863a:	f004 040f 	andeq.w	r4, r4, #15
 802863e:	1124      	asrne	r4, r4, #4
 8028640:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028644:	b2e4      	uxtb	r4, r4
 8028646:	3501      	adds	r5, #1
 8028648:	f100 808a 	bmi.w	8028760 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802864c:	45a9      	cmp	r9, r5
 802864e:	f340 8087 	ble.w	8028760 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028652:	f1bc 0f00 	cmp.w	ip, #0
 8028656:	f000 8086 	beq.w	8028766 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802865a:	2800      	cmp	r0, #0
 802865c:	db7e      	blt.n	802875c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802865e:	4580      	cmp	r8, r0
 8028660:	dd7c      	ble.n	802875c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028662:	eb03 090e 	add.w	r9, r3, lr
 8028666:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802866a:	f019 0f01 	tst.w	r9, #1
 802866e:	5d55      	ldrb	r5, [r2, r5]
 8028670:	bf0c      	ite	eq
 8028672:	f005 050f 	andeq.w	r5, r5, #15
 8028676:	112d      	asrne	r5, r5, #4
 8028678:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802867c:	b2ed      	uxtb	r5, r5
 802867e:	3001      	adds	r0, #1
 8028680:	d474      	bmi.n	802876c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028682:	4580      	cmp	r8, r0
 8028684:	dd72      	ble.n	802876c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028686:	2f00      	cmp	r7, #0
 8028688:	d072      	beq.n	8028770 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802868a:	3301      	adds	r3, #1
 802868c:	449e      	add	lr, r3
 802868e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028692:	f01e 0f01 	tst.w	lr, #1
 8028696:	5cd0      	ldrb	r0, [r2, r3]
 8028698:	bf0c      	ite	eq
 802869a:	f000 000f 	andeq.w	r0, r0, #15
 802869e:	1100      	asrne	r0, r0, #4
 80286a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80286a4:	b2c3      	uxtb	r3, r0
 80286a6:	b2ba      	uxth	r2, r7
 80286a8:	fa1f fc8c 	uxth.w	ip, ip
 80286ac:	fb02 f00c 	mul.w	r0, r2, ip
 80286b0:	0112      	lsls	r2, r2, #4
 80286b2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80286b6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80286ba:	1a12      	subs	r2, r2, r0
 80286bc:	fa1f fc8c 	uxth.w	ip, ip
 80286c0:	b292      	uxth	r2, r2
 80286c2:	eba7 070c 	sub.w	r7, r7, ip
 80286c6:	4362      	muls	r2, r4
 80286c8:	b2bf      	uxth	r7, r7
 80286ca:	fb06 2207 	mla	r2, r6, r7, r2
 80286ce:	fb0c 2505 	mla	r5, ip, r5, r2
 80286d2:	fb00 5303 	mla	r3, r0, r3, r5
 80286d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80286da:	b3a3      	cbz	r3, 8028746 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80286dc:	4a25      	ldr	r2, [pc, #148]	; (8028774 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80286de:	880e      	ldrh	r6, [r1, #0]
 80286e0:	6815      	ldr	r5, [r2, #0]
 80286e2:	b29a      	uxth	r2, r3
 80286e4:	1234      	asrs	r4, r6, #8
 80286e6:	43db      	mvns	r3, r3
 80286e8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80286ec:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80286f0:	b2db      	uxtb	r3, r3
 80286f2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80286f6:	fb10 f002 	smulbb	r0, r0, r2
 80286fa:	b2ed      	uxtb	r5, r5
 80286fc:	fb17 f702 	smulbb	r7, r7, r2
 8028700:	fb04 0403 	mla	r4, r4, r3, r0
 8028704:	10f0      	asrs	r0, r6, #3
 8028706:	fb15 f202 	smulbb	r2, r5, r2
 802870a:	00f6      	lsls	r6, r6, #3
 802870c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028710:	b2a4      	uxth	r4, r4
 8028712:	b2f6      	uxtb	r6, r6
 8028714:	fb00 7003 	mla	r0, r0, r3, r7
 8028718:	fb06 2303 	mla	r3, r6, r3, r2
 802871c:	b280      	uxth	r0, r0
 802871e:	b29a      	uxth	r2, r3
 8028720:	1c63      	adds	r3, r4, #1
 8028722:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028726:	1c53      	adds	r3, r2, #1
 8028728:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802872c:	1c42      	adds	r2, r0, #1
 802872e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028732:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028736:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802873a:	0940      	lsrs	r0, r0, #5
 802873c:	4323      	orrs	r3, r4
 802873e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028742:	4303      	orrs	r3, r0
 8028744:	800b      	strh	r3, [r1, #0]
 8028746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802874a:	2600      	movs	r6, #0
 802874c:	e764      	b.n	8028618 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802874e:	2400      	movs	r4, #0
 8028750:	4626      	mov	r6, r4
 8028752:	e778      	b.n	8028646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028754:	2400      	movs	r4, #0
 8028756:	e776      	b.n	8028646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028758:	463c      	mov	r4, r7
 802875a:	e774      	b.n	8028646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802875c:	2500      	movs	r5, #0
 802875e:	e78e      	b.n	802867e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8028760:	2300      	movs	r3, #0
 8028762:	461d      	mov	r5, r3
 8028764:	e79f      	b.n	80286a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028766:	4663      	mov	r3, ip
 8028768:	4665      	mov	r5, ip
 802876a:	e79c      	b.n	80286a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802876c:	2300      	movs	r3, #0
 802876e:	e79a      	b.n	80286a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028770:	463b      	mov	r3, r7
 8028772:	e798      	b.n	80286a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028774:	200152dc 	.word	0x200152dc

08028778 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802877c:	b093      	sub	sp, #76	; 0x4c
 802877e:	461d      	mov	r5, r3
 8028780:	920c      	str	r2, [sp, #48]	; 0x30
 8028782:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028784:	9011      	str	r0, [sp, #68]	; 0x44
 8028786:	9107      	str	r1, [sp, #28]
 8028788:	6850      	ldr	r0, [r2, #4]
 802878a:	6812      	ldr	r2, [r2, #0]
 802878c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028790:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8028794:	fb00 1303 	mla	r3, r0, r3, r1
 8028798:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802879c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802879e:	689b      	ldr	r3, [r3, #8]
 80287a0:	3301      	adds	r3, #1
 80287a2:	f023 0301 	bic.w	r3, r3, #1
 80287a6:	9306      	str	r3, [sp, #24]
 80287a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80287aa:	681f      	ldr	r7, [r3, #0]
 80287ac:	9b07      	ldr	r3, [sp, #28]
 80287ae:	2b00      	cmp	r3, #0
 80287b0:	dc03      	bgt.n	80287ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80287b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	f340 8267 	ble.w	8028c88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80287ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80287bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80287c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80287c4:	1e48      	subs	r0, r1, #1
 80287c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80287ca:	2d00      	cmp	r5, #0
 80287cc:	f340 80b7 	ble.w	802893e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80287d0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80287d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80287d8:	d406      	bmi.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80287da:	4586      	cmp	lr, r0
 80287dc:	da04      	bge.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80287de:	2b00      	cmp	r3, #0
 80287e0:	db02      	blt.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80287e2:	4563      	cmp	r3, ip
 80287e4:	f2c0 80ac 	blt.w	8028940 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80287e8:	f11e 0e01 	adds.w	lr, lr, #1
 80287ec:	f100 809f 	bmi.w	802892e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80287f0:	4571      	cmp	r1, lr
 80287f2:	f2c0 809c 	blt.w	802892e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80287f6:	3301      	adds	r3, #1
 80287f8:	f100 8099 	bmi.w	802892e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80287fc:	429a      	cmp	r2, r3
 80287fe:	f2c0 8096 	blt.w	802892e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028802:	46c8      	mov	r8, r9
 8028804:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028808:	9509      	str	r5, [sp, #36]	; 0x24
 802880a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802880c:	2b00      	cmp	r3, #0
 802880e:	f340 80b5 	ble.w	802897c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8028812:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028816:	1430      	asrs	r0, r6, #16
 8028818:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802881c:	9308      	str	r3, [sp, #32]
 802881e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028820:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028824:	1423      	asrs	r3, r4, #16
 8028826:	f100 813f 	bmi.w	8028aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802882a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802882e:	455b      	cmp	r3, fp
 8028830:	f280 813a 	bge.w	8028aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028834:	2800      	cmp	r0, #0
 8028836:	f2c0 8137 	blt.w	8028aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802883a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802883e:	4558      	cmp	r0, fp
 8028840:	f280 8132 	bge.w	8028aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028844:	9a06      	ldr	r2, [sp, #24]
 8028846:	fb00 3302 	mla	r3, r0, r2, r3
 802884a:	0858      	lsrs	r0, r3, #1
 802884c:	07da      	lsls	r2, r3, #31
 802884e:	9a08      	ldr	r2, [sp, #32]
 8028850:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028854:	bf54      	ite	pl
 8028856:	f00c 0c0f 	andpl.w	ip, ip, #15
 802885a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802885e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028862:	fa5f fc8c 	uxtb.w	ip, ip
 8028866:	2a00      	cmp	r2, #0
 8028868:	f000 80cc 	beq.w	8028a04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802886c:	1c58      	adds	r0, r3, #1
 802886e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028872:	07c0      	lsls	r0, r0, #31
 8028874:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028878:	bf54      	ite	pl
 802887a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802887e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028882:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028886:	fa5f fe8e 	uxtb.w	lr, lr
 802888a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802888e:	b1b9      	cbz	r1, 80288c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028890:	4453      	add	r3, sl
 8028892:	0858      	lsrs	r0, r3, #1
 8028894:	07da      	lsls	r2, r3, #31
 8028896:	5c38      	ldrb	r0, [r7, r0]
 8028898:	bf54      	ite	pl
 802889a:	f000 000f 	andpl.w	r0, r0, #15
 802889e:	1100      	asrmi	r0, r0, #4
 80288a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80288a4:	b2c0      	uxtb	r0, r0
 80288a6:	900a      	str	r0, [sp, #40]	; 0x28
 80288a8:	1c58      	adds	r0, r3, #1
 80288aa:	0843      	lsrs	r3, r0, #1
 80288ac:	07c2      	lsls	r2, r0, #31
 80288ae:	5cfb      	ldrb	r3, [r7, r3]
 80288b0:	bf54      	ite	pl
 80288b2:	f003 030f 	andpl.w	r3, r3, #15
 80288b6:	111b      	asrmi	r3, r3, #4
 80288b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80288bc:	b2db      	uxtb	r3, r3
 80288be:	930e      	str	r3, [sp, #56]	; 0x38
 80288c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80288c4:	b289      	uxth	r1, r1
 80288c6:	fb02 f301 	mul.w	r3, r2, r1
 80288ca:	0112      	lsls	r2, r2, #4
 80288cc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80288d0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80288d4:	1ad2      	subs	r2, r2, r3
 80288d6:	b289      	uxth	r1, r1
 80288d8:	b292      	uxth	r2, r2
 80288da:	1a40      	subs	r0, r0, r1
 80288dc:	fa1f fe80 	uxth.w	lr, r0
 80288e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80288e2:	4342      	muls	r2, r0
 80288e4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80288e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80288ea:	fb01 c102 	mla	r1, r1, r2, ip
 80288ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80288f0:	fb03 1302 	mla	r3, r3, r2, r1
 80288f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80288f8:	2bff      	cmp	r3, #255	; 0xff
 80288fa:	f040 8094 	bne.w	8028a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80288fe:	4bbf      	ldr	r3, [pc, #764]	; (8028bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028900:	681a      	ldr	r2, [r3, #0]
 8028902:	4bbf      	ldr	r3, [pc, #764]	; (8028c00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028904:	0951      	lsrs	r1, r2, #5
 8028906:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802890a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802890e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028912:	430b      	orrs	r3, r1
 8028914:	4313      	orrs	r3, r2
 8028916:	f8a8 3000 	strh.w	r3, [r8]
 802891a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802891c:	f108 0802 	add.w	r8, r8, #2
 8028920:	441c      	add	r4, r3
 8028922:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028924:	441e      	add	r6, r3
 8028926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028928:	3b01      	subs	r3, #1
 802892a:	9309      	str	r3, [sp, #36]	; 0x24
 802892c:	e76d      	b.n	802880a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802892e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028930:	3d01      	subs	r5, #1
 8028932:	f109 0902 	add.w	r9, r9, #2
 8028936:	441c      	add	r4, r3
 8028938:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802893a:	441e      	add	r6, r3
 802893c:	e745      	b.n	80287ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802893e:	d021      	beq.n	8028984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028940:	1e6b      	subs	r3, r5, #1
 8028942:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028944:	fb00 4003 	mla	r0, r0, r3, r4
 8028948:	1400      	asrs	r0, r0, #16
 802894a:	f53f af5a 	bmi.w	8028802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802894e:	3901      	subs	r1, #1
 8028950:	4288      	cmp	r0, r1
 8028952:	f6bf af56 	bge.w	8028802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028956:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028958:	fb01 6303 	mla	r3, r1, r3, r6
 802895c:	141b      	asrs	r3, r3, #16
 802895e:	f53f af50 	bmi.w	8028802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028962:	3a01      	subs	r2, #1
 8028964:	4293      	cmp	r3, r2
 8028966:	f6bf af4c 	bge.w	8028802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802896a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802896e:	46a8      	mov	r8, r5
 8028970:	46ce      	mov	lr, r9
 8028972:	9308      	str	r3, [sp, #32]
 8028974:	f1b8 0f00 	cmp.w	r8, #0
 8028978:	f300 80b6 	bgt.w	8028ae8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802897c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028980:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028984:	9b07      	ldr	r3, [sp, #28]
 8028986:	2b00      	cmp	r3, #0
 8028988:	f340 817e 	ble.w	8028c88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802898c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028990:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028992:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028996:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802899a:	eef0 6a62 	vmov.f32	s13, s5
 802899e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80289a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80289a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289aa:	ee16 4a90 	vmov	r4, s13
 80289ae:	eef0 6a43 	vmov.f32	s13, s6
 80289b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289b6:	ee16 6a90 	vmov	r6, s13
 80289ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80289be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80289c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80289c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80289ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80289ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80289d2:	ee12 2a90 	vmov	r2, s5
 80289d6:	eef0 2a47 	vmov.f32	s5, s14
 80289da:	fb92 f3f3 	sdiv	r3, r2, r3
 80289de:	ee13 2a10 	vmov	r2, s6
 80289e2:	931f      	str	r3, [sp, #124]	; 0x7c
 80289e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80289e6:	eeb0 3a67 	vmov.f32	s6, s15
 80289ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80289ee:	9320      	str	r3, [sp, #128]	; 0x80
 80289f0:	9b07      	ldr	r3, [sp, #28]
 80289f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80289f4:	3b01      	subs	r3, #1
 80289f6:	9307      	str	r3, [sp, #28]
 80289f8:	bf08      	it	eq
 80289fa:	4615      	moveq	r5, r2
 80289fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80289fe:	bf18      	it	ne
 8028a00:	461d      	movne	r5, r3
 8028a02:	e6d3      	b.n	80287ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028a04:	2900      	cmp	r1, #0
 8028a06:	f43f af5b 	beq.w	80288c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028a0a:	eb0a 0003 	add.w	r0, sl, r3
 8028a0e:	0843      	lsrs	r3, r0, #1
 8028a10:	07c0      	lsls	r0, r0, #31
 8028a12:	5cfb      	ldrb	r3, [r7, r3]
 8028a14:	bf54      	ite	pl
 8028a16:	f003 030f 	andpl.w	r3, r3, #15
 8028a1a:	111b      	asrmi	r3, r3, #4
 8028a1c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028a20:	b2db      	uxtb	r3, r3
 8028a22:	930a      	str	r3, [sp, #40]	; 0x28
 8028a24:	e74c      	b.n	80288c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028a26:	2b00      	cmp	r3, #0
 8028a28:	f43f af77 	beq.w	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028a2c:	4a73      	ldr	r2, [pc, #460]	; (8028bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028a2e:	fa1f fe83 	uxth.w	lr, r3
 8028a32:	f8b8 c000 	ldrh.w	ip, [r8]
 8028a36:	43db      	mvns	r3, r3
 8028a38:	6810      	ldr	r0, [r2, #0]
 8028a3a:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028a3e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8028a42:	b2db      	uxtb	r3, r3
 8028a44:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028a48:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028a4c:	fb12 f20e 	smulbb	r2, r2, lr
 8028a50:	b2c0      	uxtb	r0, r0
 8028a52:	fb1b fb0e 	smulbb	fp, fp, lr
 8028a56:	fb01 2103 	mla	r1, r1, r3, r2
 8028a5a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028a5e:	fb10 fe0e 	smulbb	lr, r0, lr
 8028a62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028a66:	b289      	uxth	r1, r1
 8028a68:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028a6c:	fa5f fc8c 	uxtb.w	ip, ip
 8028a70:	fb02 b203 	mla	r2, r2, r3, fp
 8028a74:	1c48      	adds	r0, r1, #1
 8028a76:	fb0c e303 	mla	r3, ip, r3, lr
 8028a7a:	b292      	uxth	r2, r2
 8028a7c:	b29b      	uxth	r3, r3
 8028a7e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8028a82:	f102 0b01 	add.w	fp, r2, #1
 8028a86:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8028a8a:	1c59      	adds	r1, r3, #1
 8028a8c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028a90:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028a94:	0952      	lsrs	r2, r2, #5
 8028a96:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028a9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a9e:	4301      	orrs	r1, r0
 8028aa0:	4311      	orrs	r1, r2
 8028aa2:	f8a8 1000 	strh.w	r1, [r8]
 8028aa6:	e738      	b.n	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028aa8:	f113 0b01 	adds.w	fp, r3, #1
 8028aac:	f53f af35 	bmi.w	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028ab0:	45dc      	cmp	ip, fp
 8028ab2:	f6ff af32 	blt.w	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028ab6:	f110 0b01 	adds.w	fp, r0, #1
 8028aba:	f53f af2e 	bmi.w	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028abe:	45de      	cmp	lr, fp
 8028ac0:	f6ff af2b 	blt.w	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028ac4:	9302      	str	r3, [sp, #8]
 8028ac6:	fa0f f38e 	sxth.w	r3, lr
 8028aca:	9a08      	ldr	r2, [sp, #32]
 8028acc:	9301      	str	r3, [sp, #4]
 8028ace:	fa0f f38c 	sxth.w	r3, ip
 8028ad2:	9105      	str	r1, [sp, #20]
 8028ad4:	4641      	mov	r1, r8
 8028ad6:	9300      	str	r3, [sp, #0]
 8028ad8:	4653      	mov	r3, sl
 8028ada:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028ade:	463a      	mov	r2, r7
 8028ae0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028ae2:	f7ff fd73 	bl	80285cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028ae6:	e718      	b.n	802891a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028ae8:	1422      	asrs	r2, r4, #16
 8028aea:	9906      	ldr	r1, [sp, #24]
 8028aec:	1433      	asrs	r3, r6, #16
 8028aee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028af2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028af6:	fb01 2303 	mla	r3, r1, r3, r2
 8028afa:	085a      	lsrs	r2, r3, #1
 8028afc:	07d9      	lsls	r1, r3, #31
 8028afe:	5cba      	ldrb	r2, [r7, r2]
 8028b00:	bf54      	ite	pl
 8028b02:	f002 020f 	andpl.w	r2, r2, #15
 8028b06:	1112      	asrmi	r2, r2, #4
 8028b08:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028b0c:	b2d2      	uxtb	r2, r2
 8028b0e:	2800      	cmp	r0, #0
 8028b10:	d063      	beq.n	8028bda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8028b12:	f103 0a01 	add.w	sl, r3, #1
 8028b16:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8028b1a:	f01a 0f01 	tst.w	sl, #1
 8028b1e:	5c79      	ldrb	r1, [r7, r1]
 8028b20:	bf0c      	ite	eq
 8028b22:	f001 010f 	andeq.w	r1, r1, #15
 8028b26:	1109      	asrne	r1, r1, #4
 8028b28:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028b2c:	b2c9      	uxtb	r1, r1
 8028b2e:	910f      	str	r1, [sp, #60]	; 0x3c
 8028b30:	f1bc 0f00 	cmp.w	ip, #0
 8028b34:	d01a      	beq.n	8028b6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028b36:	9908      	ldr	r1, [sp, #32]
 8028b38:	440b      	add	r3, r1
 8028b3a:	0859      	lsrs	r1, r3, #1
 8028b3c:	f013 0f01 	tst.w	r3, #1
 8028b40:	f103 0301 	add.w	r3, r3, #1
 8028b44:	5c79      	ldrb	r1, [r7, r1]
 8028b46:	bf0c      	ite	eq
 8028b48:	f001 010f 	andeq.w	r1, r1, #15
 8028b4c:	1109      	asrne	r1, r1, #4
 8028b4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028b52:	b2c9      	uxtb	r1, r1
 8028b54:	910b      	str	r1, [sp, #44]	; 0x2c
 8028b56:	0859      	lsrs	r1, r3, #1
 8028b58:	07db      	lsls	r3, r3, #31
 8028b5a:	5c79      	ldrb	r1, [r7, r1]
 8028b5c:	bf54      	ite	pl
 8028b5e:	f001 010f 	andpl.w	r1, r1, #15
 8028b62:	1109      	asrmi	r1, r1, #4
 8028b64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028b68:	b2c9      	uxtb	r1, r1
 8028b6a:	9110      	str	r1, [sp, #64]	; 0x40
 8028b6c:	b280      	uxth	r0, r0
 8028b6e:	fa1f fc8c 	uxth.w	ip, ip
 8028b72:	fb00 f30c 	mul.w	r3, r0, ip
 8028b76:	0100      	lsls	r0, r0, #4
 8028b78:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028b7c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028b80:	1ac0      	subs	r0, r0, r3
 8028b82:	fa1f fc8c 	uxth.w	ip, ip
 8028b86:	b280      	uxth	r0, r0
 8028b88:	eba1 010c 	sub.w	r1, r1, ip
 8028b8c:	fa1f fa81 	uxth.w	sl, r1
 8028b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028b92:	4348      	muls	r0, r1
 8028b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028b96:	fb02 020a 	mla	r2, r2, sl, r0
 8028b9a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028ba0:	fb03 c302 	mla	r3, r3, r2, ip
 8028ba4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ba8:	2bff      	cmp	r3, #255	; 0xff
 8028baa:	d12b      	bne.n	8028c04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028bac:	4b13      	ldr	r3, [pc, #76]	; (8028bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028bae:	681a      	ldr	r2, [r3, #0]
 8028bb0:	4b13      	ldr	r3, [pc, #76]	; (8028c00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028bb2:	0951      	lsrs	r1, r2, #5
 8028bb4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028bb8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028bbc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028bc0:	430b      	orrs	r3, r1
 8028bc2:	4313      	orrs	r3, r2
 8028bc4:	f8ae 3000 	strh.w	r3, [lr]
 8028bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028bca:	f10e 0e02 	add.w	lr, lr, #2
 8028bce:	f108 38ff 	add.w	r8, r8, #4294967295
 8028bd2:	441c      	add	r4, r3
 8028bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028bd6:	441e      	add	r6, r3
 8028bd8:	e6cc      	b.n	8028974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028bda:	f1bc 0f00 	cmp.w	ip, #0
 8028bde:	d0c5      	beq.n	8028b6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028be0:	9908      	ldr	r1, [sp, #32]
 8028be2:	440b      	add	r3, r1
 8028be4:	0859      	lsrs	r1, r3, #1
 8028be6:	07db      	lsls	r3, r3, #31
 8028be8:	5c79      	ldrb	r1, [r7, r1]
 8028bea:	bf54      	ite	pl
 8028bec:	f001 010f 	andpl.w	r1, r1, #15
 8028bf0:	1109      	asrmi	r1, r1, #4
 8028bf2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028bf6:	b2c9      	uxtb	r1, r1
 8028bf8:	910b      	str	r1, [sp, #44]	; 0x2c
 8028bfa:	e7b7      	b.n	8028b6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028bfc:	200152dc 	.word	0x200152dc
 8028c00:	fffff800 	.word	0xfffff800
 8028c04:	2b00      	cmp	r3, #0
 8028c06:	d0df      	beq.n	8028bc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028c08:	4a21      	ldr	r2, [pc, #132]	; (8028c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8028c0a:	fa1f fa83 	uxth.w	sl, r3
 8028c0e:	f8be c000 	ldrh.w	ip, [lr]
 8028c12:	43db      	mvns	r3, r3
 8028c14:	6810      	ldr	r0, [r2, #0]
 8028c16:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028c1a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8028c1e:	b2db      	uxtb	r3, r3
 8028c20:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028c24:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028c28:	fb12 f20a 	smulbb	r2, r2, sl
 8028c2c:	b2c0      	uxtb	r0, r0
 8028c2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8028c32:	fb01 2103 	mla	r1, r1, r3, r2
 8028c36:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028c3a:	fb10 f00a 	smulbb	r0, r0, sl
 8028c3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028c42:	b289      	uxth	r1, r1
 8028c44:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c48:	fa5f fc8c 	uxtb.w	ip, ip
 8028c4c:	fb02 b203 	mla	r2, r2, r3, fp
 8028c50:	fb0c 0003 	mla	r0, ip, r3, r0
 8028c54:	1c4b      	adds	r3, r1, #1
 8028c56:	b292      	uxth	r2, r2
 8028c58:	b280      	uxth	r0, r0
 8028c5a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028c5e:	f100 0b01 	add.w	fp, r0, #1
 8028c62:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028c66:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8028c6a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8028c6e:	ea4b 0101 	orr.w	r1, fp, r1
 8028c72:	f102 0b01 	add.w	fp, r2, #1
 8028c76:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028c7a:	0952      	lsrs	r2, r2, #5
 8028c7c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c80:	4311      	orrs	r1, r2
 8028c82:	f8ae 1000 	strh.w	r1, [lr]
 8028c86:	e79f      	b.n	8028bc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028c88:	b013      	add	sp, #76	; 0x4c
 8028c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c8e:	bf00      	nop
 8028c90:	200152dc 	.word	0x200152dc

08028c94 <CRC_Lock>:
 8028c94:	4a20      	ldr	r2, [pc, #128]	; (8028d18 <CRC_Lock+0x84>)
 8028c96:	b530      	push	{r4, r5, lr}
 8028c98:	6813      	ldr	r3, [r2, #0]
 8028c9a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028c9e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028ca2:	f023 0301 	bic.w	r3, r3, #1
 8028ca6:	6013      	str	r3, [r2, #0]
 8028ca8:	4b1c      	ldr	r3, [pc, #112]	; (8028d1c <CRC_Lock+0x88>)
 8028caa:	681a      	ldr	r2, [r3, #0]
 8028cac:	4022      	ands	r2, r4
 8028cae:	42aa      	cmp	r2, r5
 8028cb0:	d005      	beq.n	8028cbe <CRC_Lock+0x2a>
 8028cb2:	681b      	ldr	r3, [r3, #0]
 8028cb4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028cb8:	4023      	ands	r3, r4
 8028cba:	4293      	cmp	r3, r2
 8028cbc:	d124      	bne.n	8028d08 <CRC_Lock+0x74>
 8028cbe:	4b18      	ldr	r3, [pc, #96]	; (8028d20 <CRC_Lock+0x8c>)
 8028cc0:	681b      	ldr	r3, [r3, #0]
 8028cc2:	bb0b      	cbnz	r3, 8028d08 <CRC_Lock+0x74>
 8028cc4:	4b17      	ldr	r3, [pc, #92]	; (8028d24 <CRC_Lock+0x90>)
 8028cc6:	681a      	ldr	r2, [r3, #0]
 8028cc8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028ccc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8028cd0:	d00d      	beq.n	8028cee <CRC_Lock+0x5a>
 8028cd2:	681a      	ldr	r2, [r3, #0]
 8028cd4:	f240 4483 	movw	r4, #1155	; 0x483
 8028cd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028cdc:	42a2      	cmp	r2, r4
 8028cde:	d006      	beq.n	8028cee <CRC_Lock+0x5a>
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	f240 4285 	movw	r2, #1157	; 0x485
 8028ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028cea:	4293      	cmp	r3, r2
 8028cec:	d10c      	bne.n	8028d08 <CRC_Lock+0x74>
 8028cee:	4b0e      	ldr	r3, [pc, #56]	; (8028d28 <CRC_Lock+0x94>)
 8028cf0:	2201      	movs	r2, #1
 8028cf2:	601a      	str	r2, [r3, #0]
 8028cf4:	681a      	ldr	r2, [r3, #0]
 8028cf6:	2a00      	cmp	r2, #0
 8028cf8:	d1fc      	bne.n	8028cf4 <CRC_Lock+0x60>
 8028cfa:	4b0c      	ldr	r3, [pc, #48]	; (8028d2c <CRC_Lock+0x98>)
 8028cfc:	6018      	str	r0, [r3, #0]
 8028cfe:	6818      	ldr	r0, [r3, #0]
 8028d00:	1a43      	subs	r3, r0, r1
 8028d02:	4258      	negs	r0, r3
 8028d04:	4158      	adcs	r0, r3
 8028d06:	bd30      	pop	{r4, r5, pc}
 8028d08:	4b09      	ldr	r3, [pc, #36]	; (8028d30 <CRC_Lock+0x9c>)
 8028d0a:	2201      	movs	r2, #1
 8028d0c:	601a      	str	r2, [r3, #0]
 8028d0e:	681a      	ldr	r2, [r3, #0]
 8028d10:	2a00      	cmp	r2, #0
 8028d12:	d1fc      	bne.n	8028d0e <CRC_Lock+0x7a>
 8028d14:	4b07      	ldr	r3, [pc, #28]	; (8028d34 <CRC_Lock+0xa0>)
 8028d16:	e7f1      	b.n	8028cfc <CRC_Lock+0x68>
 8028d18:	e0002000 	.word	0xe0002000
 8028d1c:	e000ed00 	.word	0xe000ed00
 8028d20:	e0042000 	.word	0xe0042000
 8028d24:	5c001000 	.word	0x5c001000
 8028d28:	58024c08 	.word	0x58024c08
 8028d2c:	58024c00 	.word	0x58024c00
 8028d30:	40023008 	.word	0x40023008
 8028d34:	40023000 	.word	0x40023000

08028d38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028d38:	6101      	str	r1, [r0, #16]
 8028d3a:	4770      	bx	lr

08028d3c <_ZN8touchgfx8Gestures4tickEv>:
 8028d3c:	7b83      	ldrb	r3, [r0, #14]
 8028d3e:	b14b      	cbz	r3, 8028d54 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028d40:	8903      	ldrh	r3, [r0, #8]
 8028d42:	3301      	adds	r3, #1
 8028d44:	b29b      	uxth	r3, r3
 8028d46:	2b07      	cmp	r3, #7
 8028d48:	8103      	strh	r3, [r0, #8]
 8028d4a:	bf81      	itttt	hi
 8028d4c:	2300      	movhi	r3, #0
 8028d4e:	8143      	strhhi	r3, [r0, #10]
 8028d50:	8183      	strhhi	r3, [r0, #12]
 8028d52:	7383      	strbhi	r3, [r0, #14]
 8028d54:	4770      	bx	lr
	...

08028d58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028d5c:	4698      	mov	r8, r3
 8028d5e:	8883      	ldrh	r3, [r0, #4]
 8028d60:	4604      	mov	r4, r0
 8028d62:	4617      	mov	r7, r2
 8028d64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028d68:	eba8 0303 	sub.w	r3, r8, r3
 8028d6c:	4a19      	ldr	r2, [pc, #100]	; (8028dd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028d6e:	460e      	mov	r6, r1
 8028d70:	b21b      	sxth	r3, r3
 8028d72:	88c1      	ldrh	r1, [r0, #6]
 8028d74:	9200      	str	r2, [sp, #0]
 8028d76:	2000      	movs	r0, #0
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	8aa2      	ldrh	r2, [r4, #20]
 8028d7c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028d80:	bfb8      	it	lt
 8028d82:	425b      	neglt	r3, r3
 8028d84:	f88d 0004 	strb.w	r0, [sp, #4]
 8028d88:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028d8c:	b21b      	sxth	r3, r3
 8028d8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028d92:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028d96:	4293      	cmp	r3, r2
 8028d98:	dc07      	bgt.n	8028daa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028d9a:	1a69      	subs	r1, r5, r1
 8028d9c:	b209      	sxth	r1, r1
 8028d9e:	2900      	cmp	r1, #0
 8028da0:	bfb8      	it	lt
 8028da2:	4249      	neglt	r1, r1
 8028da4:	b209      	sxth	r1, r1
 8028da6:	428a      	cmp	r2, r1
 8028da8:	da10      	bge.n	8028dcc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028daa:	6920      	ldr	r0, [r4, #16]
 8028dac:	4669      	mov	r1, sp
 8028dae:	eba8 0606 	sub.w	r6, r8, r6
 8028db2:	1bef      	subs	r7, r5, r7
 8028db4:	6803      	ldr	r3, [r0, #0]
 8028db6:	685b      	ldr	r3, [r3, #4]
 8028db8:	4798      	blx	r3
 8028dba:	2300      	movs	r3, #0
 8028dbc:	2001      	movs	r0, #1
 8028dbe:	8166      	strh	r6, [r4, #10]
 8028dc0:	8123      	strh	r3, [r4, #8]
 8028dc2:	81a7      	strh	r7, [r4, #12]
 8028dc4:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028dc8:	80e5      	strh	r5, [r4, #6]
 8028dca:	73a0      	strb	r0, [r4, #14]
 8028dcc:	b004      	add	sp, #16
 8028dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028dd2:	bf00      	nop
 8028dd4:	0802ed34 	.word	0x0802ed34

08028dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028dda:	461e      	mov	r6, r3
 8028ddc:	1e4b      	subs	r3, r1, #1
 8028dde:	b085      	sub	sp, #20
 8028de0:	4604      	mov	r4, r0
 8028de2:	2b01      	cmp	r3, #1
 8028de4:	460d      	mov	r5, r1
 8028de6:	4617      	mov	r7, r2
 8028de8:	d84b      	bhi.n	8028e82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028dea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028dee:	1cd3      	adds	r3, r2, #3
 8028df0:	b29b      	uxth	r3, r3
 8028df2:	2b06      	cmp	r3, #6
 8028df4:	d916      	bls.n	8028e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028df6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028e98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028dfa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028dfe:	f8cd c004 	str.w	ip, [sp, #4]
 8028e02:	f04f 0c00 	mov.w	ip, #0
 8028e06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e0a:	6900      	ldr	r0, [r0, #16]
 8028e0c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e10:	a901      	add	r1, sp, #4
 8028e12:	f88d c008 	strb.w	ip, [sp, #8]
 8028e16:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e1e:	6803      	ldr	r3, [r0, #0]
 8028e20:	689b      	ldr	r3, [r3, #8]
 8028e22:	4798      	blx	r3
 8028e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028e28:	1cd3      	adds	r3, r2, #3
 8028e2a:	b29b      	uxth	r3, r3
 8028e2c:	2b06      	cmp	r3, #6
 8028e2e:	d916      	bls.n	8028e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e30:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028e98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e38:	f8cd c004 	str.w	ip, [sp, #4]
 8028e3c:	f04f 0c01 	mov.w	ip, #1
 8028e40:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e44:	6920      	ldr	r0, [r4, #16]
 8028e46:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e4a:	a901      	add	r1, sp, #4
 8028e4c:	f88d c008 	strb.w	ip, [sp, #8]
 8028e50:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e58:	6803      	ldr	r3, [r0, #0]
 8028e5a:	689b      	ldr	r3, [r3, #8]
 8028e5c:	4798      	blx	r3
 8028e5e:	4b0d      	ldr	r3, [pc, #52]	; (8028e94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028e60:	a901      	add	r1, sp, #4
 8028e62:	6920      	ldr	r0, [r4, #16]
 8028e64:	9301      	str	r3, [sp, #4]
 8028e66:	2300      	movs	r3, #0
 8028e68:	f88d 5008 	strb.w	r5, [sp, #8]
 8028e6c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028e70:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028e74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e78:	6803      	ldr	r3, [r0, #0]
 8028e7a:	681b      	ldr	r3, [r3, #0]
 8028e7c:	4798      	blx	r3
 8028e7e:	b005      	add	sp, #20
 8028e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e82:	2900      	cmp	r1, #0
 8028e84:	d1eb      	bne.n	8028e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e86:	80a2      	strh	r2, [r4, #4]
 8028e88:	80c6      	strh	r6, [r0, #6]
 8028e8a:	60a1      	str	r1, [r4, #8]
 8028e8c:	81a1      	strh	r1, [r4, #12]
 8028e8e:	73a1      	strb	r1, [r4, #14]
 8028e90:	e7e5      	b.n	8028e5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e92:	bf00      	nop
 8028e94:	0802ed20 	.word	0x0802ed20
 8028e98:	0802ed48 	.word	0x0802ed48

08028e9c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8028e9c:	790b      	ldrb	r3, [r1, #4]
 8028e9e:	2b00      	cmp	r3, #0
 8028ea0:	bf0c      	ite	eq
 8028ea2:	2301      	moveq	r3, #1
 8028ea4:	2300      	movne	r3, #0
 8028ea6:	b570      	push	{r4, r5, r6, lr}
 8028ea8:	4604      	mov	r4, r0
 8028eaa:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8028eae:	460e      	mov	r6, r1
 8028eb0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8028eb4:	d109      	bne.n	8028eca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8028eb6:	b14d      	cbz	r5, 8028ecc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8028eb8:	7933      	ldrb	r3, [r6, #4]
 8028eba:	2b01      	cmp	r3, #1
 8028ebc:	d10c      	bne.n	8028ed8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028ebe:	6823      	ldr	r3, [r4, #0]
 8028ec0:	4620      	mov	r0, r4
 8028ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028ec8:	4718      	bx	r3
 8028eca:	b12d      	cbz	r5, 8028ed8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028ecc:	6823      	ldr	r3, [r4, #0]
 8028ece:	4620      	mov	r0, r4
 8028ed0:	695b      	ldr	r3, [r3, #20]
 8028ed2:	4798      	blx	r3
 8028ed4:	2d00      	cmp	r5, #0
 8028ed6:	d1ef      	bne.n	8028eb8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8028ed8:	bd70      	pop	{r4, r5, r6, pc}

08028eda <__aeabi_atexit>:
 8028eda:	460b      	mov	r3, r1
 8028edc:	4601      	mov	r1, r0
 8028ede:	4618      	mov	r0, r3
 8028ee0:	f000 b852 	b.w	8028f88 <__cxa_atexit>

08028ee4 <_ZdlPvj>:
 8028ee4:	f000 b812 	b.w	8028f0c <_ZdlPv>

08028ee8 <__cxa_guard_acquire>:
 8028ee8:	6803      	ldr	r3, [r0, #0]
 8028eea:	07db      	lsls	r3, r3, #31
 8028eec:	d406      	bmi.n	8028efc <__cxa_guard_acquire+0x14>
 8028eee:	7843      	ldrb	r3, [r0, #1]
 8028ef0:	b103      	cbz	r3, 8028ef4 <__cxa_guard_acquire+0xc>
 8028ef2:	deff      	udf	#255	; 0xff
 8028ef4:	2301      	movs	r3, #1
 8028ef6:	7043      	strb	r3, [r0, #1]
 8028ef8:	4618      	mov	r0, r3
 8028efa:	4770      	bx	lr
 8028efc:	2000      	movs	r0, #0
 8028efe:	4770      	bx	lr

08028f00 <__cxa_guard_release>:
 8028f00:	2301      	movs	r3, #1
 8028f02:	6003      	str	r3, [r0, #0]
 8028f04:	4770      	bx	lr

08028f06 <__cxa_pure_virtual>:
 8028f06:	b508      	push	{r3, lr}
 8028f08:	f000 f80e 	bl	8028f28 <_ZSt9terminatev>

08028f0c <_ZdlPv>:
 8028f0c:	f000 b988 	b.w	8029220 <free>

08028f10 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028f10:	b508      	push	{r3, lr}
 8028f12:	4780      	blx	r0
 8028f14:	f000 f80d 	bl	8028f32 <abort>

08028f18 <_ZSt13get_terminatev>:
 8028f18:	4b02      	ldr	r3, [pc, #8]	; (8028f24 <_ZSt13get_terminatev+0xc>)
 8028f1a:	6818      	ldr	r0, [r3, #0]
 8028f1c:	f3bf 8f5b 	dmb	ish
 8028f20:	4770      	bx	lr
 8028f22:	bf00      	nop
 8028f24:	200000b8 	.word	0x200000b8

08028f28 <_ZSt9terminatev>:
 8028f28:	b508      	push	{r3, lr}
 8028f2a:	f7ff fff5 	bl	8028f18 <_ZSt13get_terminatev>
 8028f2e:	f7ff ffef 	bl	8028f10 <_ZN10__cxxabiv111__terminateEPFvvE>

08028f32 <abort>:
 8028f32:	b508      	push	{r3, lr}
 8028f34:	2006      	movs	r0, #6
 8028f36:	f000 fe01 	bl	8029b3c <raise>
 8028f3a:	2001      	movs	r0, #1
 8028f3c:	f7d8 fcea 	bl	8001914 <_exit>

08028f40 <__assert_func>:
 8028f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028f42:	4614      	mov	r4, r2
 8028f44:	461a      	mov	r2, r3
 8028f46:	4b09      	ldr	r3, [pc, #36]	; (8028f6c <__assert_func+0x2c>)
 8028f48:	681b      	ldr	r3, [r3, #0]
 8028f4a:	4605      	mov	r5, r0
 8028f4c:	68d8      	ldr	r0, [r3, #12]
 8028f4e:	b14c      	cbz	r4, 8028f64 <__assert_func+0x24>
 8028f50:	4b07      	ldr	r3, [pc, #28]	; (8028f70 <__assert_func+0x30>)
 8028f52:	9100      	str	r1, [sp, #0]
 8028f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028f58:	4906      	ldr	r1, [pc, #24]	; (8028f74 <__assert_func+0x34>)
 8028f5a:	462b      	mov	r3, r5
 8028f5c:	f000 f8fe 	bl	802915c <fiprintf>
 8028f60:	f7ff ffe7 	bl	8028f32 <abort>
 8028f64:	4b04      	ldr	r3, [pc, #16]	; (8028f78 <__assert_func+0x38>)
 8028f66:	461c      	mov	r4, r3
 8028f68:	e7f3      	b.n	8028f52 <__assert_func+0x12>
 8028f6a:	bf00      	nop
 8028f6c:	200000bc 	.word	0x200000bc
 8028f70:	0802f010 	.word	0x0802f010
 8028f74:	0802f01d 	.word	0x0802f01d
 8028f78:	0802f04b 	.word	0x0802f04b

08028f7c <atexit>:
 8028f7c:	2300      	movs	r3, #0
 8028f7e:	4601      	mov	r1, r0
 8028f80:	461a      	mov	r2, r3
 8028f82:	4618      	mov	r0, r3
 8028f84:	f000 bf40 	b.w	8029e08 <__register_exitproc>

08028f88 <__cxa_atexit>:
 8028f88:	b510      	push	{r4, lr}
 8028f8a:	4c05      	ldr	r4, [pc, #20]	; (8028fa0 <__cxa_atexit+0x18>)
 8028f8c:	4613      	mov	r3, r2
 8028f8e:	b12c      	cbz	r4, 8028f9c <__cxa_atexit+0x14>
 8028f90:	460a      	mov	r2, r1
 8028f92:	4601      	mov	r1, r0
 8028f94:	2002      	movs	r0, #2
 8028f96:	f000 ff37 	bl	8029e08 <__register_exitproc>
 8028f9a:	bd10      	pop	{r4, pc}
 8028f9c:	4620      	mov	r0, r4
 8028f9e:	e7fc      	b.n	8028f9a <__cxa_atexit+0x12>
 8028fa0:	08029e09 	.word	0x08029e09

08028fa4 <__errno>:
 8028fa4:	4b01      	ldr	r3, [pc, #4]	; (8028fac <__errno+0x8>)
 8028fa6:	6818      	ldr	r0, [r3, #0]
 8028fa8:	4770      	bx	lr
 8028faa:	bf00      	nop
 8028fac:	200000bc 	.word	0x200000bc

08028fb0 <std>:
 8028fb0:	2300      	movs	r3, #0
 8028fb2:	b510      	push	{r4, lr}
 8028fb4:	4604      	mov	r4, r0
 8028fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8028fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028fbe:	6083      	str	r3, [r0, #8]
 8028fc0:	8181      	strh	r1, [r0, #12]
 8028fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8028fc4:	81c2      	strh	r2, [r0, #14]
 8028fc6:	6183      	str	r3, [r0, #24]
 8028fc8:	4619      	mov	r1, r3
 8028fca:	2208      	movs	r2, #8
 8028fcc:	305c      	adds	r0, #92	; 0x5c
 8028fce:	f000 f93d 	bl	802924c <memset>
 8028fd2:	4b05      	ldr	r3, [pc, #20]	; (8028fe8 <std+0x38>)
 8028fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8028fd6:	4b05      	ldr	r3, [pc, #20]	; (8028fec <std+0x3c>)
 8028fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8028fda:	4b05      	ldr	r3, [pc, #20]	; (8028ff0 <std+0x40>)
 8028fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028fde:	4b05      	ldr	r3, [pc, #20]	; (8028ff4 <std+0x44>)
 8028fe0:	6224      	str	r4, [r4, #32]
 8028fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8028fe4:	bd10      	pop	{r4, pc}
 8028fe6:	bf00      	nop
 8028fe8:	08029bb5 	.word	0x08029bb5
 8028fec:	08029bd7 	.word	0x08029bd7
 8028ff0:	08029c0f 	.word	0x08029c0f
 8028ff4:	08029c33 	.word	0x08029c33

08028ff8 <_cleanup_r>:
 8028ff8:	4901      	ldr	r1, [pc, #4]	; (8029000 <_cleanup_r+0x8>)
 8028ffa:	f000 b8c1 	b.w	8029180 <_fwalk_reent>
 8028ffe:	bf00      	nop
 8029000:	08029ff9 	.word	0x08029ff9

08029004 <__sfmoreglue>:
 8029004:	b570      	push	{r4, r5, r6, lr}
 8029006:	2268      	movs	r2, #104	; 0x68
 8029008:	1e4d      	subs	r5, r1, #1
 802900a:	4355      	muls	r5, r2
 802900c:	460e      	mov	r6, r1
 802900e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8029012:	f000 f98f 	bl	8029334 <_malloc_r>
 8029016:	4604      	mov	r4, r0
 8029018:	b140      	cbz	r0, 802902c <__sfmoreglue+0x28>
 802901a:	2100      	movs	r1, #0
 802901c:	e9c0 1600 	strd	r1, r6, [r0]
 8029020:	300c      	adds	r0, #12
 8029022:	60a0      	str	r0, [r4, #8]
 8029024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029028:	f000 f910 	bl	802924c <memset>
 802902c:	4620      	mov	r0, r4
 802902e:	bd70      	pop	{r4, r5, r6, pc}

08029030 <__sfp_lock_acquire>:
 8029030:	4801      	ldr	r0, [pc, #4]	; (8029038 <__sfp_lock_acquire+0x8>)
 8029032:	f000 b8ea 	b.w	802920a <__retarget_lock_acquire_recursive>
 8029036:	bf00      	nop
 8029038:	200153d2 	.word	0x200153d2

0802903c <__sfp_lock_release>:
 802903c:	4801      	ldr	r0, [pc, #4]	; (8029044 <__sfp_lock_release+0x8>)
 802903e:	f000 b8e6 	b.w	802920e <__retarget_lock_release_recursive>
 8029042:	bf00      	nop
 8029044:	200153d2 	.word	0x200153d2

08029048 <__sinit_lock_acquire>:
 8029048:	4801      	ldr	r0, [pc, #4]	; (8029050 <__sinit_lock_acquire+0x8>)
 802904a:	f000 b8de 	b.w	802920a <__retarget_lock_acquire_recursive>
 802904e:	bf00      	nop
 8029050:	200153d3 	.word	0x200153d3

08029054 <__sinit_lock_release>:
 8029054:	4801      	ldr	r0, [pc, #4]	; (802905c <__sinit_lock_release+0x8>)
 8029056:	f000 b8da 	b.w	802920e <__retarget_lock_release_recursive>
 802905a:	bf00      	nop
 802905c:	200153d3 	.word	0x200153d3

08029060 <__sinit>:
 8029060:	b510      	push	{r4, lr}
 8029062:	4604      	mov	r4, r0
 8029064:	f7ff fff0 	bl	8029048 <__sinit_lock_acquire>
 8029068:	69a3      	ldr	r3, [r4, #24]
 802906a:	b11b      	cbz	r3, 8029074 <__sinit+0x14>
 802906c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029070:	f7ff bff0 	b.w	8029054 <__sinit_lock_release>
 8029074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029078:	6523      	str	r3, [r4, #80]	; 0x50
 802907a:	4b13      	ldr	r3, [pc, #76]	; (80290c8 <__sinit+0x68>)
 802907c:	4a13      	ldr	r2, [pc, #76]	; (80290cc <__sinit+0x6c>)
 802907e:	681b      	ldr	r3, [r3, #0]
 8029080:	62a2      	str	r2, [r4, #40]	; 0x28
 8029082:	42a3      	cmp	r3, r4
 8029084:	bf04      	itt	eq
 8029086:	2301      	moveq	r3, #1
 8029088:	61a3      	streq	r3, [r4, #24]
 802908a:	4620      	mov	r0, r4
 802908c:	f000 f820 	bl	80290d0 <__sfp>
 8029090:	6060      	str	r0, [r4, #4]
 8029092:	4620      	mov	r0, r4
 8029094:	f000 f81c 	bl	80290d0 <__sfp>
 8029098:	60a0      	str	r0, [r4, #8]
 802909a:	4620      	mov	r0, r4
 802909c:	f000 f818 	bl	80290d0 <__sfp>
 80290a0:	2200      	movs	r2, #0
 80290a2:	60e0      	str	r0, [r4, #12]
 80290a4:	2104      	movs	r1, #4
 80290a6:	6860      	ldr	r0, [r4, #4]
 80290a8:	f7ff ff82 	bl	8028fb0 <std>
 80290ac:	68a0      	ldr	r0, [r4, #8]
 80290ae:	2201      	movs	r2, #1
 80290b0:	2109      	movs	r1, #9
 80290b2:	f7ff ff7d 	bl	8028fb0 <std>
 80290b6:	68e0      	ldr	r0, [r4, #12]
 80290b8:	2202      	movs	r2, #2
 80290ba:	2112      	movs	r1, #18
 80290bc:	f7ff ff78 	bl	8028fb0 <std>
 80290c0:	2301      	movs	r3, #1
 80290c2:	61a3      	str	r3, [r4, #24]
 80290c4:	e7d2      	b.n	802906c <__sinit+0xc>
 80290c6:	bf00      	nop
 80290c8:	0802f0ac 	.word	0x0802f0ac
 80290cc:	08028ff9 	.word	0x08028ff9

080290d0 <__sfp>:
 80290d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290d2:	4607      	mov	r7, r0
 80290d4:	f7ff ffac 	bl	8029030 <__sfp_lock_acquire>
 80290d8:	4b1e      	ldr	r3, [pc, #120]	; (8029154 <__sfp+0x84>)
 80290da:	681e      	ldr	r6, [r3, #0]
 80290dc:	69b3      	ldr	r3, [r6, #24]
 80290de:	b913      	cbnz	r3, 80290e6 <__sfp+0x16>
 80290e0:	4630      	mov	r0, r6
 80290e2:	f7ff ffbd 	bl	8029060 <__sinit>
 80290e6:	3648      	adds	r6, #72	; 0x48
 80290e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80290ec:	3b01      	subs	r3, #1
 80290ee:	d503      	bpl.n	80290f8 <__sfp+0x28>
 80290f0:	6833      	ldr	r3, [r6, #0]
 80290f2:	b30b      	cbz	r3, 8029138 <__sfp+0x68>
 80290f4:	6836      	ldr	r6, [r6, #0]
 80290f6:	e7f7      	b.n	80290e8 <__sfp+0x18>
 80290f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80290fc:	b9d5      	cbnz	r5, 8029134 <__sfp+0x64>
 80290fe:	4b16      	ldr	r3, [pc, #88]	; (8029158 <__sfp+0x88>)
 8029100:	60e3      	str	r3, [r4, #12]
 8029102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029106:	6665      	str	r5, [r4, #100]	; 0x64
 8029108:	f000 f87e 	bl	8029208 <__retarget_lock_init_recursive>
 802910c:	f7ff ff96 	bl	802903c <__sfp_lock_release>
 8029110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029118:	6025      	str	r5, [r4, #0]
 802911a:	61a5      	str	r5, [r4, #24]
 802911c:	2208      	movs	r2, #8
 802911e:	4629      	mov	r1, r5
 8029120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029124:	f000 f892 	bl	802924c <memset>
 8029128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802912c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029130:	4620      	mov	r0, r4
 8029132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029134:	3468      	adds	r4, #104	; 0x68
 8029136:	e7d9      	b.n	80290ec <__sfp+0x1c>
 8029138:	2104      	movs	r1, #4
 802913a:	4638      	mov	r0, r7
 802913c:	f7ff ff62 	bl	8029004 <__sfmoreglue>
 8029140:	4604      	mov	r4, r0
 8029142:	6030      	str	r0, [r6, #0]
 8029144:	2800      	cmp	r0, #0
 8029146:	d1d5      	bne.n	80290f4 <__sfp+0x24>
 8029148:	f7ff ff78 	bl	802903c <__sfp_lock_release>
 802914c:	230c      	movs	r3, #12
 802914e:	603b      	str	r3, [r7, #0]
 8029150:	e7ee      	b.n	8029130 <__sfp+0x60>
 8029152:	bf00      	nop
 8029154:	0802f0ac 	.word	0x0802f0ac
 8029158:	ffff0001 	.word	0xffff0001

0802915c <fiprintf>:
 802915c:	b40e      	push	{r1, r2, r3}
 802915e:	b503      	push	{r0, r1, lr}
 8029160:	4601      	mov	r1, r0
 8029162:	ab03      	add	r3, sp, #12
 8029164:	4805      	ldr	r0, [pc, #20]	; (802917c <fiprintf+0x20>)
 8029166:	f853 2b04 	ldr.w	r2, [r3], #4
 802916a:	6800      	ldr	r0, [r0, #0]
 802916c:	9301      	str	r3, [sp, #4]
 802916e:	f000 f97f 	bl	8029470 <_vfiprintf_r>
 8029172:	b002      	add	sp, #8
 8029174:	f85d eb04 	ldr.w	lr, [sp], #4
 8029178:	b003      	add	sp, #12
 802917a:	4770      	bx	lr
 802917c:	200000bc 	.word	0x200000bc

08029180 <_fwalk_reent>:
 8029180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029184:	4606      	mov	r6, r0
 8029186:	4688      	mov	r8, r1
 8029188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802918c:	2700      	movs	r7, #0
 802918e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029192:	f1b9 0901 	subs.w	r9, r9, #1
 8029196:	d505      	bpl.n	80291a4 <_fwalk_reent+0x24>
 8029198:	6824      	ldr	r4, [r4, #0]
 802919a:	2c00      	cmp	r4, #0
 802919c:	d1f7      	bne.n	802918e <_fwalk_reent+0xe>
 802919e:	4638      	mov	r0, r7
 80291a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80291a4:	89ab      	ldrh	r3, [r5, #12]
 80291a6:	2b01      	cmp	r3, #1
 80291a8:	d907      	bls.n	80291ba <_fwalk_reent+0x3a>
 80291aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80291ae:	3301      	adds	r3, #1
 80291b0:	d003      	beq.n	80291ba <_fwalk_reent+0x3a>
 80291b2:	4629      	mov	r1, r5
 80291b4:	4630      	mov	r0, r6
 80291b6:	47c0      	blx	r8
 80291b8:	4307      	orrs	r7, r0
 80291ba:	3568      	adds	r5, #104	; 0x68
 80291bc:	e7e9      	b.n	8029192 <_fwalk_reent+0x12>
	...

080291c0 <__libc_init_array>:
 80291c0:	b570      	push	{r4, r5, r6, lr}
 80291c2:	4d0d      	ldr	r5, [pc, #52]	; (80291f8 <__libc_init_array+0x38>)
 80291c4:	4c0d      	ldr	r4, [pc, #52]	; (80291fc <__libc_init_array+0x3c>)
 80291c6:	1b64      	subs	r4, r4, r5
 80291c8:	10a4      	asrs	r4, r4, #2
 80291ca:	2600      	movs	r6, #0
 80291cc:	42a6      	cmp	r6, r4
 80291ce:	d109      	bne.n	80291e4 <__libc_init_array+0x24>
 80291d0:	4d0b      	ldr	r5, [pc, #44]	; (8029200 <__libc_init_array+0x40>)
 80291d2:	4c0c      	ldr	r4, [pc, #48]	; (8029204 <__libc_init_array+0x44>)
 80291d4:	f001 f9b0 	bl	802a538 <_init>
 80291d8:	1b64      	subs	r4, r4, r5
 80291da:	10a4      	asrs	r4, r4, #2
 80291dc:	2600      	movs	r6, #0
 80291de:	42a6      	cmp	r6, r4
 80291e0:	d105      	bne.n	80291ee <__libc_init_array+0x2e>
 80291e2:	bd70      	pop	{r4, r5, r6, pc}
 80291e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80291e8:	4798      	blx	r3
 80291ea:	3601      	adds	r6, #1
 80291ec:	e7ee      	b.n	80291cc <__libc_init_array+0xc>
 80291ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80291f2:	4798      	blx	r3
 80291f4:	3601      	adds	r6, #1
 80291f6:	e7f2      	b.n	80291de <__libc_init_array+0x1e>
 80291f8:	0802f108 	.word	0x0802f108
 80291fc:	0802f108 	.word	0x0802f108
 8029200:	0802f108 	.word	0x0802f108
 8029204:	0802f124 	.word	0x0802f124

08029208 <__retarget_lock_init_recursive>:
 8029208:	4770      	bx	lr

0802920a <__retarget_lock_acquire_recursive>:
 802920a:	4770      	bx	lr

0802920c <__retarget_lock_release>:
 802920c:	4770      	bx	lr

0802920e <__retarget_lock_release_recursive>:
 802920e:	4770      	bx	lr

08029210 <malloc>:
 8029210:	4b02      	ldr	r3, [pc, #8]	; (802921c <malloc+0xc>)
 8029212:	4601      	mov	r1, r0
 8029214:	6818      	ldr	r0, [r3, #0]
 8029216:	f000 b88d 	b.w	8029334 <_malloc_r>
 802921a:	bf00      	nop
 802921c:	200000bc 	.word	0x200000bc

08029220 <free>:
 8029220:	4b02      	ldr	r3, [pc, #8]	; (802922c <free+0xc>)
 8029222:	4601      	mov	r1, r0
 8029224:	6818      	ldr	r0, [r3, #0]
 8029226:	f000 b819 	b.w	802925c <_free_r>
 802922a:	bf00      	nop
 802922c:	200000bc 	.word	0x200000bc

08029230 <memcpy>:
 8029230:	440a      	add	r2, r1
 8029232:	4291      	cmp	r1, r2
 8029234:	f100 33ff 	add.w	r3, r0, #4294967295
 8029238:	d100      	bne.n	802923c <memcpy+0xc>
 802923a:	4770      	bx	lr
 802923c:	b510      	push	{r4, lr}
 802923e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029246:	4291      	cmp	r1, r2
 8029248:	d1f9      	bne.n	802923e <memcpy+0xe>
 802924a:	bd10      	pop	{r4, pc}

0802924c <memset>:
 802924c:	4402      	add	r2, r0
 802924e:	4603      	mov	r3, r0
 8029250:	4293      	cmp	r3, r2
 8029252:	d100      	bne.n	8029256 <memset+0xa>
 8029254:	4770      	bx	lr
 8029256:	f803 1b01 	strb.w	r1, [r3], #1
 802925a:	e7f9      	b.n	8029250 <memset+0x4>

0802925c <_free_r>:
 802925c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802925e:	2900      	cmp	r1, #0
 8029260:	d044      	beq.n	80292ec <_free_r+0x90>
 8029262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029266:	9001      	str	r0, [sp, #4]
 8029268:	2b00      	cmp	r3, #0
 802926a:	f1a1 0404 	sub.w	r4, r1, #4
 802926e:	bfb8      	it	lt
 8029270:	18e4      	addlt	r4, r4, r3
 8029272:	f000 ff8f 	bl	802a194 <__malloc_lock>
 8029276:	4a1e      	ldr	r2, [pc, #120]	; (80292f0 <_free_r+0x94>)
 8029278:	9801      	ldr	r0, [sp, #4]
 802927a:	6813      	ldr	r3, [r2, #0]
 802927c:	b933      	cbnz	r3, 802928c <_free_r+0x30>
 802927e:	6063      	str	r3, [r4, #4]
 8029280:	6014      	str	r4, [r2, #0]
 8029282:	b003      	add	sp, #12
 8029284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029288:	f000 bf8a 	b.w	802a1a0 <__malloc_unlock>
 802928c:	42a3      	cmp	r3, r4
 802928e:	d908      	bls.n	80292a2 <_free_r+0x46>
 8029290:	6825      	ldr	r5, [r4, #0]
 8029292:	1961      	adds	r1, r4, r5
 8029294:	428b      	cmp	r3, r1
 8029296:	bf01      	itttt	eq
 8029298:	6819      	ldreq	r1, [r3, #0]
 802929a:	685b      	ldreq	r3, [r3, #4]
 802929c:	1949      	addeq	r1, r1, r5
 802929e:	6021      	streq	r1, [r4, #0]
 80292a0:	e7ed      	b.n	802927e <_free_r+0x22>
 80292a2:	461a      	mov	r2, r3
 80292a4:	685b      	ldr	r3, [r3, #4]
 80292a6:	b10b      	cbz	r3, 80292ac <_free_r+0x50>
 80292a8:	42a3      	cmp	r3, r4
 80292aa:	d9fa      	bls.n	80292a2 <_free_r+0x46>
 80292ac:	6811      	ldr	r1, [r2, #0]
 80292ae:	1855      	adds	r5, r2, r1
 80292b0:	42a5      	cmp	r5, r4
 80292b2:	d10b      	bne.n	80292cc <_free_r+0x70>
 80292b4:	6824      	ldr	r4, [r4, #0]
 80292b6:	4421      	add	r1, r4
 80292b8:	1854      	adds	r4, r2, r1
 80292ba:	42a3      	cmp	r3, r4
 80292bc:	6011      	str	r1, [r2, #0]
 80292be:	d1e0      	bne.n	8029282 <_free_r+0x26>
 80292c0:	681c      	ldr	r4, [r3, #0]
 80292c2:	685b      	ldr	r3, [r3, #4]
 80292c4:	6053      	str	r3, [r2, #4]
 80292c6:	4421      	add	r1, r4
 80292c8:	6011      	str	r1, [r2, #0]
 80292ca:	e7da      	b.n	8029282 <_free_r+0x26>
 80292cc:	d902      	bls.n	80292d4 <_free_r+0x78>
 80292ce:	230c      	movs	r3, #12
 80292d0:	6003      	str	r3, [r0, #0]
 80292d2:	e7d6      	b.n	8029282 <_free_r+0x26>
 80292d4:	6825      	ldr	r5, [r4, #0]
 80292d6:	1961      	adds	r1, r4, r5
 80292d8:	428b      	cmp	r3, r1
 80292da:	bf04      	itt	eq
 80292dc:	6819      	ldreq	r1, [r3, #0]
 80292de:	685b      	ldreq	r3, [r3, #4]
 80292e0:	6063      	str	r3, [r4, #4]
 80292e2:	bf04      	itt	eq
 80292e4:	1949      	addeq	r1, r1, r5
 80292e6:	6021      	streq	r1, [r4, #0]
 80292e8:	6054      	str	r4, [r2, #4]
 80292ea:	e7ca      	b.n	8029282 <_free_r+0x26>
 80292ec:	b003      	add	sp, #12
 80292ee:	bd30      	pop	{r4, r5, pc}
 80292f0:	200153d4 	.word	0x200153d4

080292f4 <sbrk_aligned>:
 80292f4:	b570      	push	{r4, r5, r6, lr}
 80292f6:	4e0e      	ldr	r6, [pc, #56]	; (8029330 <sbrk_aligned+0x3c>)
 80292f8:	460c      	mov	r4, r1
 80292fa:	6831      	ldr	r1, [r6, #0]
 80292fc:	4605      	mov	r5, r0
 80292fe:	b911      	cbnz	r1, 8029306 <sbrk_aligned+0x12>
 8029300:	f000 fbe4 	bl	8029acc <_sbrk_r>
 8029304:	6030      	str	r0, [r6, #0]
 8029306:	4621      	mov	r1, r4
 8029308:	4628      	mov	r0, r5
 802930a:	f000 fbdf 	bl	8029acc <_sbrk_r>
 802930e:	1c43      	adds	r3, r0, #1
 8029310:	d00a      	beq.n	8029328 <sbrk_aligned+0x34>
 8029312:	1cc4      	adds	r4, r0, #3
 8029314:	f024 0403 	bic.w	r4, r4, #3
 8029318:	42a0      	cmp	r0, r4
 802931a:	d007      	beq.n	802932c <sbrk_aligned+0x38>
 802931c:	1a21      	subs	r1, r4, r0
 802931e:	4628      	mov	r0, r5
 8029320:	f000 fbd4 	bl	8029acc <_sbrk_r>
 8029324:	3001      	adds	r0, #1
 8029326:	d101      	bne.n	802932c <sbrk_aligned+0x38>
 8029328:	f04f 34ff 	mov.w	r4, #4294967295
 802932c:	4620      	mov	r0, r4
 802932e:	bd70      	pop	{r4, r5, r6, pc}
 8029330:	200153d8 	.word	0x200153d8

08029334 <_malloc_r>:
 8029334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029338:	1ccd      	adds	r5, r1, #3
 802933a:	f025 0503 	bic.w	r5, r5, #3
 802933e:	3508      	adds	r5, #8
 8029340:	2d0c      	cmp	r5, #12
 8029342:	bf38      	it	cc
 8029344:	250c      	movcc	r5, #12
 8029346:	2d00      	cmp	r5, #0
 8029348:	4607      	mov	r7, r0
 802934a:	db01      	blt.n	8029350 <_malloc_r+0x1c>
 802934c:	42a9      	cmp	r1, r5
 802934e:	d905      	bls.n	802935c <_malloc_r+0x28>
 8029350:	230c      	movs	r3, #12
 8029352:	603b      	str	r3, [r7, #0]
 8029354:	2600      	movs	r6, #0
 8029356:	4630      	mov	r0, r6
 8029358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802935c:	4e2e      	ldr	r6, [pc, #184]	; (8029418 <_malloc_r+0xe4>)
 802935e:	f000 ff19 	bl	802a194 <__malloc_lock>
 8029362:	6833      	ldr	r3, [r6, #0]
 8029364:	461c      	mov	r4, r3
 8029366:	bb34      	cbnz	r4, 80293b6 <_malloc_r+0x82>
 8029368:	4629      	mov	r1, r5
 802936a:	4638      	mov	r0, r7
 802936c:	f7ff ffc2 	bl	80292f4 <sbrk_aligned>
 8029370:	1c43      	adds	r3, r0, #1
 8029372:	4604      	mov	r4, r0
 8029374:	d14d      	bne.n	8029412 <_malloc_r+0xde>
 8029376:	6834      	ldr	r4, [r6, #0]
 8029378:	4626      	mov	r6, r4
 802937a:	2e00      	cmp	r6, #0
 802937c:	d140      	bne.n	8029400 <_malloc_r+0xcc>
 802937e:	6823      	ldr	r3, [r4, #0]
 8029380:	4631      	mov	r1, r6
 8029382:	4638      	mov	r0, r7
 8029384:	eb04 0803 	add.w	r8, r4, r3
 8029388:	f000 fba0 	bl	8029acc <_sbrk_r>
 802938c:	4580      	cmp	r8, r0
 802938e:	d13a      	bne.n	8029406 <_malloc_r+0xd2>
 8029390:	6821      	ldr	r1, [r4, #0]
 8029392:	3503      	adds	r5, #3
 8029394:	1a6d      	subs	r5, r5, r1
 8029396:	f025 0503 	bic.w	r5, r5, #3
 802939a:	3508      	adds	r5, #8
 802939c:	2d0c      	cmp	r5, #12
 802939e:	bf38      	it	cc
 80293a0:	250c      	movcc	r5, #12
 80293a2:	4629      	mov	r1, r5
 80293a4:	4638      	mov	r0, r7
 80293a6:	f7ff ffa5 	bl	80292f4 <sbrk_aligned>
 80293aa:	3001      	adds	r0, #1
 80293ac:	d02b      	beq.n	8029406 <_malloc_r+0xd2>
 80293ae:	6823      	ldr	r3, [r4, #0]
 80293b0:	442b      	add	r3, r5
 80293b2:	6023      	str	r3, [r4, #0]
 80293b4:	e00e      	b.n	80293d4 <_malloc_r+0xa0>
 80293b6:	6822      	ldr	r2, [r4, #0]
 80293b8:	1b52      	subs	r2, r2, r5
 80293ba:	d41e      	bmi.n	80293fa <_malloc_r+0xc6>
 80293bc:	2a0b      	cmp	r2, #11
 80293be:	d916      	bls.n	80293ee <_malloc_r+0xba>
 80293c0:	1961      	adds	r1, r4, r5
 80293c2:	42a3      	cmp	r3, r4
 80293c4:	6025      	str	r5, [r4, #0]
 80293c6:	bf18      	it	ne
 80293c8:	6059      	strne	r1, [r3, #4]
 80293ca:	6863      	ldr	r3, [r4, #4]
 80293cc:	bf08      	it	eq
 80293ce:	6031      	streq	r1, [r6, #0]
 80293d0:	5162      	str	r2, [r4, r5]
 80293d2:	604b      	str	r3, [r1, #4]
 80293d4:	4638      	mov	r0, r7
 80293d6:	f104 060b 	add.w	r6, r4, #11
 80293da:	f000 fee1 	bl	802a1a0 <__malloc_unlock>
 80293de:	f026 0607 	bic.w	r6, r6, #7
 80293e2:	1d23      	adds	r3, r4, #4
 80293e4:	1af2      	subs	r2, r6, r3
 80293e6:	d0b6      	beq.n	8029356 <_malloc_r+0x22>
 80293e8:	1b9b      	subs	r3, r3, r6
 80293ea:	50a3      	str	r3, [r4, r2]
 80293ec:	e7b3      	b.n	8029356 <_malloc_r+0x22>
 80293ee:	6862      	ldr	r2, [r4, #4]
 80293f0:	42a3      	cmp	r3, r4
 80293f2:	bf0c      	ite	eq
 80293f4:	6032      	streq	r2, [r6, #0]
 80293f6:	605a      	strne	r2, [r3, #4]
 80293f8:	e7ec      	b.n	80293d4 <_malloc_r+0xa0>
 80293fa:	4623      	mov	r3, r4
 80293fc:	6864      	ldr	r4, [r4, #4]
 80293fe:	e7b2      	b.n	8029366 <_malloc_r+0x32>
 8029400:	4634      	mov	r4, r6
 8029402:	6876      	ldr	r6, [r6, #4]
 8029404:	e7b9      	b.n	802937a <_malloc_r+0x46>
 8029406:	230c      	movs	r3, #12
 8029408:	603b      	str	r3, [r7, #0]
 802940a:	4638      	mov	r0, r7
 802940c:	f000 fec8 	bl	802a1a0 <__malloc_unlock>
 8029410:	e7a1      	b.n	8029356 <_malloc_r+0x22>
 8029412:	6025      	str	r5, [r4, #0]
 8029414:	e7de      	b.n	80293d4 <_malloc_r+0xa0>
 8029416:	bf00      	nop
 8029418:	200153d4 	.word	0x200153d4

0802941c <__sfputc_r>:
 802941c:	6893      	ldr	r3, [r2, #8]
 802941e:	3b01      	subs	r3, #1
 8029420:	2b00      	cmp	r3, #0
 8029422:	b410      	push	{r4}
 8029424:	6093      	str	r3, [r2, #8]
 8029426:	da08      	bge.n	802943a <__sfputc_r+0x1e>
 8029428:	6994      	ldr	r4, [r2, #24]
 802942a:	42a3      	cmp	r3, r4
 802942c:	db01      	blt.n	8029432 <__sfputc_r+0x16>
 802942e:	290a      	cmp	r1, #10
 8029430:	d103      	bne.n	802943a <__sfputc_r+0x1e>
 8029432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029436:	f000 bc15 	b.w	8029c64 <__swbuf_r>
 802943a:	6813      	ldr	r3, [r2, #0]
 802943c:	1c58      	adds	r0, r3, #1
 802943e:	6010      	str	r0, [r2, #0]
 8029440:	7019      	strb	r1, [r3, #0]
 8029442:	4608      	mov	r0, r1
 8029444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029448:	4770      	bx	lr

0802944a <__sfputs_r>:
 802944a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802944c:	4606      	mov	r6, r0
 802944e:	460f      	mov	r7, r1
 8029450:	4614      	mov	r4, r2
 8029452:	18d5      	adds	r5, r2, r3
 8029454:	42ac      	cmp	r4, r5
 8029456:	d101      	bne.n	802945c <__sfputs_r+0x12>
 8029458:	2000      	movs	r0, #0
 802945a:	e007      	b.n	802946c <__sfputs_r+0x22>
 802945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029460:	463a      	mov	r2, r7
 8029462:	4630      	mov	r0, r6
 8029464:	f7ff ffda 	bl	802941c <__sfputc_r>
 8029468:	1c43      	adds	r3, r0, #1
 802946a:	d1f3      	bne.n	8029454 <__sfputs_r+0xa>
 802946c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029470 <_vfiprintf_r>:
 8029470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029474:	460d      	mov	r5, r1
 8029476:	b09d      	sub	sp, #116	; 0x74
 8029478:	4614      	mov	r4, r2
 802947a:	4698      	mov	r8, r3
 802947c:	4606      	mov	r6, r0
 802947e:	b118      	cbz	r0, 8029488 <_vfiprintf_r+0x18>
 8029480:	6983      	ldr	r3, [r0, #24]
 8029482:	b90b      	cbnz	r3, 8029488 <_vfiprintf_r+0x18>
 8029484:	f7ff fdec 	bl	8029060 <__sinit>
 8029488:	4b89      	ldr	r3, [pc, #548]	; (80296b0 <_vfiprintf_r+0x240>)
 802948a:	429d      	cmp	r5, r3
 802948c:	d11b      	bne.n	80294c6 <_vfiprintf_r+0x56>
 802948e:	6875      	ldr	r5, [r6, #4]
 8029490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029492:	07d9      	lsls	r1, r3, #31
 8029494:	d405      	bmi.n	80294a2 <_vfiprintf_r+0x32>
 8029496:	89ab      	ldrh	r3, [r5, #12]
 8029498:	059a      	lsls	r2, r3, #22
 802949a:	d402      	bmi.n	80294a2 <_vfiprintf_r+0x32>
 802949c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802949e:	f7ff feb4 	bl	802920a <__retarget_lock_acquire_recursive>
 80294a2:	89ab      	ldrh	r3, [r5, #12]
 80294a4:	071b      	lsls	r3, r3, #28
 80294a6:	d501      	bpl.n	80294ac <_vfiprintf_r+0x3c>
 80294a8:	692b      	ldr	r3, [r5, #16]
 80294aa:	b9eb      	cbnz	r3, 80294e8 <_vfiprintf_r+0x78>
 80294ac:	4629      	mov	r1, r5
 80294ae:	4630      	mov	r0, r6
 80294b0:	f000 fc3c 	bl	8029d2c <__swsetup_r>
 80294b4:	b1c0      	cbz	r0, 80294e8 <_vfiprintf_r+0x78>
 80294b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80294b8:	07dc      	lsls	r4, r3, #31
 80294ba:	d50e      	bpl.n	80294da <_vfiprintf_r+0x6a>
 80294bc:	f04f 30ff 	mov.w	r0, #4294967295
 80294c0:	b01d      	add	sp, #116	; 0x74
 80294c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294c6:	4b7b      	ldr	r3, [pc, #492]	; (80296b4 <_vfiprintf_r+0x244>)
 80294c8:	429d      	cmp	r5, r3
 80294ca:	d101      	bne.n	80294d0 <_vfiprintf_r+0x60>
 80294cc:	68b5      	ldr	r5, [r6, #8]
 80294ce:	e7df      	b.n	8029490 <_vfiprintf_r+0x20>
 80294d0:	4b79      	ldr	r3, [pc, #484]	; (80296b8 <_vfiprintf_r+0x248>)
 80294d2:	429d      	cmp	r5, r3
 80294d4:	bf08      	it	eq
 80294d6:	68f5      	ldreq	r5, [r6, #12]
 80294d8:	e7da      	b.n	8029490 <_vfiprintf_r+0x20>
 80294da:	89ab      	ldrh	r3, [r5, #12]
 80294dc:	0598      	lsls	r0, r3, #22
 80294de:	d4ed      	bmi.n	80294bc <_vfiprintf_r+0x4c>
 80294e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80294e2:	f7ff fe94 	bl	802920e <__retarget_lock_release_recursive>
 80294e6:	e7e9      	b.n	80294bc <_vfiprintf_r+0x4c>
 80294e8:	2300      	movs	r3, #0
 80294ea:	9309      	str	r3, [sp, #36]	; 0x24
 80294ec:	2320      	movs	r3, #32
 80294ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80294f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80294f6:	2330      	movs	r3, #48	; 0x30
 80294f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80296bc <_vfiprintf_r+0x24c>
 80294fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029500:	f04f 0901 	mov.w	r9, #1
 8029504:	4623      	mov	r3, r4
 8029506:	469a      	mov	sl, r3
 8029508:	f813 2b01 	ldrb.w	r2, [r3], #1
 802950c:	b10a      	cbz	r2, 8029512 <_vfiprintf_r+0xa2>
 802950e:	2a25      	cmp	r2, #37	; 0x25
 8029510:	d1f9      	bne.n	8029506 <_vfiprintf_r+0x96>
 8029512:	ebba 0b04 	subs.w	fp, sl, r4
 8029516:	d00b      	beq.n	8029530 <_vfiprintf_r+0xc0>
 8029518:	465b      	mov	r3, fp
 802951a:	4622      	mov	r2, r4
 802951c:	4629      	mov	r1, r5
 802951e:	4630      	mov	r0, r6
 8029520:	f7ff ff93 	bl	802944a <__sfputs_r>
 8029524:	3001      	adds	r0, #1
 8029526:	f000 80aa 	beq.w	802967e <_vfiprintf_r+0x20e>
 802952a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802952c:	445a      	add	r2, fp
 802952e:	9209      	str	r2, [sp, #36]	; 0x24
 8029530:	f89a 3000 	ldrb.w	r3, [sl]
 8029534:	2b00      	cmp	r3, #0
 8029536:	f000 80a2 	beq.w	802967e <_vfiprintf_r+0x20e>
 802953a:	2300      	movs	r3, #0
 802953c:	f04f 32ff 	mov.w	r2, #4294967295
 8029540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029544:	f10a 0a01 	add.w	sl, sl, #1
 8029548:	9304      	str	r3, [sp, #16]
 802954a:	9307      	str	r3, [sp, #28]
 802954c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029550:	931a      	str	r3, [sp, #104]	; 0x68
 8029552:	4654      	mov	r4, sl
 8029554:	2205      	movs	r2, #5
 8029556:	f814 1b01 	ldrb.w	r1, [r4], #1
 802955a:	4858      	ldr	r0, [pc, #352]	; (80296bc <_vfiprintf_r+0x24c>)
 802955c:	f7d6 fe58 	bl	8000210 <memchr>
 8029560:	9a04      	ldr	r2, [sp, #16]
 8029562:	b9d8      	cbnz	r0, 802959c <_vfiprintf_r+0x12c>
 8029564:	06d1      	lsls	r1, r2, #27
 8029566:	bf44      	itt	mi
 8029568:	2320      	movmi	r3, #32
 802956a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802956e:	0713      	lsls	r3, r2, #28
 8029570:	bf44      	itt	mi
 8029572:	232b      	movmi	r3, #43	; 0x2b
 8029574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029578:	f89a 3000 	ldrb.w	r3, [sl]
 802957c:	2b2a      	cmp	r3, #42	; 0x2a
 802957e:	d015      	beq.n	80295ac <_vfiprintf_r+0x13c>
 8029580:	9a07      	ldr	r2, [sp, #28]
 8029582:	4654      	mov	r4, sl
 8029584:	2000      	movs	r0, #0
 8029586:	f04f 0c0a 	mov.w	ip, #10
 802958a:	4621      	mov	r1, r4
 802958c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029590:	3b30      	subs	r3, #48	; 0x30
 8029592:	2b09      	cmp	r3, #9
 8029594:	d94e      	bls.n	8029634 <_vfiprintf_r+0x1c4>
 8029596:	b1b0      	cbz	r0, 80295c6 <_vfiprintf_r+0x156>
 8029598:	9207      	str	r2, [sp, #28]
 802959a:	e014      	b.n	80295c6 <_vfiprintf_r+0x156>
 802959c:	eba0 0308 	sub.w	r3, r0, r8
 80295a0:	fa09 f303 	lsl.w	r3, r9, r3
 80295a4:	4313      	orrs	r3, r2
 80295a6:	9304      	str	r3, [sp, #16]
 80295a8:	46a2      	mov	sl, r4
 80295aa:	e7d2      	b.n	8029552 <_vfiprintf_r+0xe2>
 80295ac:	9b03      	ldr	r3, [sp, #12]
 80295ae:	1d19      	adds	r1, r3, #4
 80295b0:	681b      	ldr	r3, [r3, #0]
 80295b2:	9103      	str	r1, [sp, #12]
 80295b4:	2b00      	cmp	r3, #0
 80295b6:	bfbb      	ittet	lt
 80295b8:	425b      	neglt	r3, r3
 80295ba:	f042 0202 	orrlt.w	r2, r2, #2
 80295be:	9307      	strge	r3, [sp, #28]
 80295c0:	9307      	strlt	r3, [sp, #28]
 80295c2:	bfb8      	it	lt
 80295c4:	9204      	strlt	r2, [sp, #16]
 80295c6:	7823      	ldrb	r3, [r4, #0]
 80295c8:	2b2e      	cmp	r3, #46	; 0x2e
 80295ca:	d10c      	bne.n	80295e6 <_vfiprintf_r+0x176>
 80295cc:	7863      	ldrb	r3, [r4, #1]
 80295ce:	2b2a      	cmp	r3, #42	; 0x2a
 80295d0:	d135      	bne.n	802963e <_vfiprintf_r+0x1ce>
 80295d2:	9b03      	ldr	r3, [sp, #12]
 80295d4:	1d1a      	adds	r2, r3, #4
 80295d6:	681b      	ldr	r3, [r3, #0]
 80295d8:	9203      	str	r2, [sp, #12]
 80295da:	2b00      	cmp	r3, #0
 80295dc:	bfb8      	it	lt
 80295de:	f04f 33ff 	movlt.w	r3, #4294967295
 80295e2:	3402      	adds	r4, #2
 80295e4:	9305      	str	r3, [sp, #20]
 80295e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80296cc <_vfiprintf_r+0x25c>
 80295ea:	7821      	ldrb	r1, [r4, #0]
 80295ec:	2203      	movs	r2, #3
 80295ee:	4650      	mov	r0, sl
 80295f0:	f7d6 fe0e 	bl	8000210 <memchr>
 80295f4:	b140      	cbz	r0, 8029608 <_vfiprintf_r+0x198>
 80295f6:	2340      	movs	r3, #64	; 0x40
 80295f8:	eba0 000a 	sub.w	r0, r0, sl
 80295fc:	fa03 f000 	lsl.w	r0, r3, r0
 8029600:	9b04      	ldr	r3, [sp, #16]
 8029602:	4303      	orrs	r3, r0
 8029604:	3401      	adds	r4, #1
 8029606:	9304      	str	r3, [sp, #16]
 8029608:	f814 1b01 	ldrb.w	r1, [r4], #1
 802960c:	482c      	ldr	r0, [pc, #176]	; (80296c0 <_vfiprintf_r+0x250>)
 802960e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029612:	2206      	movs	r2, #6
 8029614:	f7d6 fdfc 	bl	8000210 <memchr>
 8029618:	2800      	cmp	r0, #0
 802961a:	d03f      	beq.n	802969c <_vfiprintf_r+0x22c>
 802961c:	4b29      	ldr	r3, [pc, #164]	; (80296c4 <_vfiprintf_r+0x254>)
 802961e:	bb1b      	cbnz	r3, 8029668 <_vfiprintf_r+0x1f8>
 8029620:	9b03      	ldr	r3, [sp, #12]
 8029622:	3307      	adds	r3, #7
 8029624:	f023 0307 	bic.w	r3, r3, #7
 8029628:	3308      	adds	r3, #8
 802962a:	9303      	str	r3, [sp, #12]
 802962c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802962e:	443b      	add	r3, r7
 8029630:	9309      	str	r3, [sp, #36]	; 0x24
 8029632:	e767      	b.n	8029504 <_vfiprintf_r+0x94>
 8029634:	fb0c 3202 	mla	r2, ip, r2, r3
 8029638:	460c      	mov	r4, r1
 802963a:	2001      	movs	r0, #1
 802963c:	e7a5      	b.n	802958a <_vfiprintf_r+0x11a>
 802963e:	2300      	movs	r3, #0
 8029640:	3401      	adds	r4, #1
 8029642:	9305      	str	r3, [sp, #20]
 8029644:	4619      	mov	r1, r3
 8029646:	f04f 0c0a 	mov.w	ip, #10
 802964a:	4620      	mov	r0, r4
 802964c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029650:	3a30      	subs	r2, #48	; 0x30
 8029652:	2a09      	cmp	r2, #9
 8029654:	d903      	bls.n	802965e <_vfiprintf_r+0x1ee>
 8029656:	2b00      	cmp	r3, #0
 8029658:	d0c5      	beq.n	80295e6 <_vfiprintf_r+0x176>
 802965a:	9105      	str	r1, [sp, #20]
 802965c:	e7c3      	b.n	80295e6 <_vfiprintf_r+0x176>
 802965e:	fb0c 2101 	mla	r1, ip, r1, r2
 8029662:	4604      	mov	r4, r0
 8029664:	2301      	movs	r3, #1
 8029666:	e7f0      	b.n	802964a <_vfiprintf_r+0x1da>
 8029668:	ab03      	add	r3, sp, #12
 802966a:	9300      	str	r3, [sp, #0]
 802966c:	462a      	mov	r2, r5
 802966e:	4b16      	ldr	r3, [pc, #88]	; (80296c8 <_vfiprintf_r+0x258>)
 8029670:	a904      	add	r1, sp, #16
 8029672:	4630      	mov	r0, r6
 8029674:	f3af 8000 	nop.w
 8029678:	4607      	mov	r7, r0
 802967a:	1c78      	adds	r0, r7, #1
 802967c:	d1d6      	bne.n	802962c <_vfiprintf_r+0x1bc>
 802967e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029680:	07d9      	lsls	r1, r3, #31
 8029682:	d405      	bmi.n	8029690 <_vfiprintf_r+0x220>
 8029684:	89ab      	ldrh	r3, [r5, #12]
 8029686:	059a      	lsls	r2, r3, #22
 8029688:	d402      	bmi.n	8029690 <_vfiprintf_r+0x220>
 802968a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802968c:	f7ff fdbf 	bl	802920e <__retarget_lock_release_recursive>
 8029690:	89ab      	ldrh	r3, [r5, #12]
 8029692:	065b      	lsls	r3, r3, #25
 8029694:	f53f af12 	bmi.w	80294bc <_vfiprintf_r+0x4c>
 8029698:	9809      	ldr	r0, [sp, #36]	; 0x24
 802969a:	e711      	b.n	80294c0 <_vfiprintf_r+0x50>
 802969c:	ab03      	add	r3, sp, #12
 802969e:	9300      	str	r3, [sp, #0]
 80296a0:	462a      	mov	r2, r5
 80296a2:	4b09      	ldr	r3, [pc, #36]	; (80296c8 <_vfiprintf_r+0x258>)
 80296a4:	a904      	add	r1, sp, #16
 80296a6:	4630      	mov	r0, r6
 80296a8:	f000 f880 	bl	80297ac <_printf_i>
 80296ac:	e7e4      	b.n	8029678 <_vfiprintf_r+0x208>
 80296ae:	bf00      	nop
 80296b0:	0802f06c 	.word	0x0802f06c
 80296b4:	0802f08c 	.word	0x0802f08c
 80296b8:	0802f04c 	.word	0x0802f04c
 80296bc:	0802f0b0 	.word	0x0802f0b0
 80296c0:	0802f0ba 	.word	0x0802f0ba
 80296c4:	00000000 	.word	0x00000000
 80296c8:	0802944b 	.word	0x0802944b
 80296cc:	0802f0b6 	.word	0x0802f0b6

080296d0 <_printf_common>:
 80296d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80296d4:	4616      	mov	r6, r2
 80296d6:	4699      	mov	r9, r3
 80296d8:	688a      	ldr	r2, [r1, #8]
 80296da:	690b      	ldr	r3, [r1, #16]
 80296dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80296e0:	4293      	cmp	r3, r2
 80296e2:	bfb8      	it	lt
 80296e4:	4613      	movlt	r3, r2
 80296e6:	6033      	str	r3, [r6, #0]
 80296e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80296ec:	4607      	mov	r7, r0
 80296ee:	460c      	mov	r4, r1
 80296f0:	b10a      	cbz	r2, 80296f6 <_printf_common+0x26>
 80296f2:	3301      	adds	r3, #1
 80296f4:	6033      	str	r3, [r6, #0]
 80296f6:	6823      	ldr	r3, [r4, #0]
 80296f8:	0699      	lsls	r1, r3, #26
 80296fa:	bf42      	ittt	mi
 80296fc:	6833      	ldrmi	r3, [r6, #0]
 80296fe:	3302      	addmi	r3, #2
 8029700:	6033      	strmi	r3, [r6, #0]
 8029702:	6825      	ldr	r5, [r4, #0]
 8029704:	f015 0506 	ands.w	r5, r5, #6
 8029708:	d106      	bne.n	8029718 <_printf_common+0x48>
 802970a:	f104 0a19 	add.w	sl, r4, #25
 802970e:	68e3      	ldr	r3, [r4, #12]
 8029710:	6832      	ldr	r2, [r6, #0]
 8029712:	1a9b      	subs	r3, r3, r2
 8029714:	42ab      	cmp	r3, r5
 8029716:	dc26      	bgt.n	8029766 <_printf_common+0x96>
 8029718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802971c:	1e13      	subs	r3, r2, #0
 802971e:	6822      	ldr	r2, [r4, #0]
 8029720:	bf18      	it	ne
 8029722:	2301      	movne	r3, #1
 8029724:	0692      	lsls	r2, r2, #26
 8029726:	d42b      	bmi.n	8029780 <_printf_common+0xb0>
 8029728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802972c:	4649      	mov	r1, r9
 802972e:	4638      	mov	r0, r7
 8029730:	47c0      	blx	r8
 8029732:	3001      	adds	r0, #1
 8029734:	d01e      	beq.n	8029774 <_printf_common+0xa4>
 8029736:	6823      	ldr	r3, [r4, #0]
 8029738:	68e5      	ldr	r5, [r4, #12]
 802973a:	6832      	ldr	r2, [r6, #0]
 802973c:	f003 0306 	and.w	r3, r3, #6
 8029740:	2b04      	cmp	r3, #4
 8029742:	bf08      	it	eq
 8029744:	1aad      	subeq	r5, r5, r2
 8029746:	68a3      	ldr	r3, [r4, #8]
 8029748:	6922      	ldr	r2, [r4, #16]
 802974a:	bf0c      	ite	eq
 802974c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029750:	2500      	movne	r5, #0
 8029752:	4293      	cmp	r3, r2
 8029754:	bfc4      	itt	gt
 8029756:	1a9b      	subgt	r3, r3, r2
 8029758:	18ed      	addgt	r5, r5, r3
 802975a:	2600      	movs	r6, #0
 802975c:	341a      	adds	r4, #26
 802975e:	42b5      	cmp	r5, r6
 8029760:	d11a      	bne.n	8029798 <_printf_common+0xc8>
 8029762:	2000      	movs	r0, #0
 8029764:	e008      	b.n	8029778 <_printf_common+0xa8>
 8029766:	2301      	movs	r3, #1
 8029768:	4652      	mov	r2, sl
 802976a:	4649      	mov	r1, r9
 802976c:	4638      	mov	r0, r7
 802976e:	47c0      	blx	r8
 8029770:	3001      	adds	r0, #1
 8029772:	d103      	bne.n	802977c <_printf_common+0xac>
 8029774:	f04f 30ff 	mov.w	r0, #4294967295
 8029778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802977c:	3501      	adds	r5, #1
 802977e:	e7c6      	b.n	802970e <_printf_common+0x3e>
 8029780:	18e1      	adds	r1, r4, r3
 8029782:	1c5a      	adds	r2, r3, #1
 8029784:	2030      	movs	r0, #48	; 0x30
 8029786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802978a:	4422      	add	r2, r4
 802978c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029794:	3302      	adds	r3, #2
 8029796:	e7c7      	b.n	8029728 <_printf_common+0x58>
 8029798:	2301      	movs	r3, #1
 802979a:	4622      	mov	r2, r4
 802979c:	4649      	mov	r1, r9
 802979e:	4638      	mov	r0, r7
 80297a0:	47c0      	blx	r8
 80297a2:	3001      	adds	r0, #1
 80297a4:	d0e6      	beq.n	8029774 <_printf_common+0xa4>
 80297a6:	3601      	adds	r6, #1
 80297a8:	e7d9      	b.n	802975e <_printf_common+0x8e>
	...

080297ac <_printf_i>:
 80297ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80297b0:	7e0f      	ldrb	r7, [r1, #24]
 80297b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80297b4:	2f78      	cmp	r7, #120	; 0x78
 80297b6:	4691      	mov	r9, r2
 80297b8:	4680      	mov	r8, r0
 80297ba:	460c      	mov	r4, r1
 80297bc:	469a      	mov	sl, r3
 80297be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80297c2:	d807      	bhi.n	80297d4 <_printf_i+0x28>
 80297c4:	2f62      	cmp	r7, #98	; 0x62
 80297c6:	d80a      	bhi.n	80297de <_printf_i+0x32>
 80297c8:	2f00      	cmp	r7, #0
 80297ca:	f000 80d8 	beq.w	802997e <_printf_i+0x1d2>
 80297ce:	2f58      	cmp	r7, #88	; 0x58
 80297d0:	f000 80a3 	beq.w	802991a <_printf_i+0x16e>
 80297d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80297d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80297dc:	e03a      	b.n	8029854 <_printf_i+0xa8>
 80297de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80297e2:	2b15      	cmp	r3, #21
 80297e4:	d8f6      	bhi.n	80297d4 <_printf_i+0x28>
 80297e6:	a101      	add	r1, pc, #4	; (adr r1, 80297ec <_printf_i+0x40>)
 80297e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80297ec:	08029845 	.word	0x08029845
 80297f0:	08029859 	.word	0x08029859
 80297f4:	080297d5 	.word	0x080297d5
 80297f8:	080297d5 	.word	0x080297d5
 80297fc:	080297d5 	.word	0x080297d5
 8029800:	080297d5 	.word	0x080297d5
 8029804:	08029859 	.word	0x08029859
 8029808:	080297d5 	.word	0x080297d5
 802980c:	080297d5 	.word	0x080297d5
 8029810:	080297d5 	.word	0x080297d5
 8029814:	080297d5 	.word	0x080297d5
 8029818:	08029965 	.word	0x08029965
 802981c:	08029889 	.word	0x08029889
 8029820:	08029947 	.word	0x08029947
 8029824:	080297d5 	.word	0x080297d5
 8029828:	080297d5 	.word	0x080297d5
 802982c:	08029987 	.word	0x08029987
 8029830:	080297d5 	.word	0x080297d5
 8029834:	08029889 	.word	0x08029889
 8029838:	080297d5 	.word	0x080297d5
 802983c:	080297d5 	.word	0x080297d5
 8029840:	0802994f 	.word	0x0802994f
 8029844:	682b      	ldr	r3, [r5, #0]
 8029846:	1d1a      	adds	r2, r3, #4
 8029848:	681b      	ldr	r3, [r3, #0]
 802984a:	602a      	str	r2, [r5, #0]
 802984c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029854:	2301      	movs	r3, #1
 8029856:	e0a3      	b.n	80299a0 <_printf_i+0x1f4>
 8029858:	6820      	ldr	r0, [r4, #0]
 802985a:	6829      	ldr	r1, [r5, #0]
 802985c:	0606      	lsls	r6, r0, #24
 802985e:	f101 0304 	add.w	r3, r1, #4
 8029862:	d50a      	bpl.n	802987a <_printf_i+0xce>
 8029864:	680e      	ldr	r6, [r1, #0]
 8029866:	602b      	str	r3, [r5, #0]
 8029868:	2e00      	cmp	r6, #0
 802986a:	da03      	bge.n	8029874 <_printf_i+0xc8>
 802986c:	232d      	movs	r3, #45	; 0x2d
 802986e:	4276      	negs	r6, r6
 8029870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029874:	485e      	ldr	r0, [pc, #376]	; (80299f0 <_printf_i+0x244>)
 8029876:	230a      	movs	r3, #10
 8029878:	e019      	b.n	80298ae <_printf_i+0x102>
 802987a:	680e      	ldr	r6, [r1, #0]
 802987c:	602b      	str	r3, [r5, #0]
 802987e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029882:	bf18      	it	ne
 8029884:	b236      	sxthne	r6, r6
 8029886:	e7ef      	b.n	8029868 <_printf_i+0xbc>
 8029888:	682b      	ldr	r3, [r5, #0]
 802988a:	6820      	ldr	r0, [r4, #0]
 802988c:	1d19      	adds	r1, r3, #4
 802988e:	6029      	str	r1, [r5, #0]
 8029890:	0601      	lsls	r1, r0, #24
 8029892:	d501      	bpl.n	8029898 <_printf_i+0xec>
 8029894:	681e      	ldr	r6, [r3, #0]
 8029896:	e002      	b.n	802989e <_printf_i+0xf2>
 8029898:	0646      	lsls	r6, r0, #25
 802989a:	d5fb      	bpl.n	8029894 <_printf_i+0xe8>
 802989c:	881e      	ldrh	r6, [r3, #0]
 802989e:	4854      	ldr	r0, [pc, #336]	; (80299f0 <_printf_i+0x244>)
 80298a0:	2f6f      	cmp	r7, #111	; 0x6f
 80298a2:	bf0c      	ite	eq
 80298a4:	2308      	moveq	r3, #8
 80298a6:	230a      	movne	r3, #10
 80298a8:	2100      	movs	r1, #0
 80298aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80298ae:	6865      	ldr	r5, [r4, #4]
 80298b0:	60a5      	str	r5, [r4, #8]
 80298b2:	2d00      	cmp	r5, #0
 80298b4:	bfa2      	ittt	ge
 80298b6:	6821      	ldrge	r1, [r4, #0]
 80298b8:	f021 0104 	bicge.w	r1, r1, #4
 80298bc:	6021      	strge	r1, [r4, #0]
 80298be:	b90e      	cbnz	r6, 80298c4 <_printf_i+0x118>
 80298c0:	2d00      	cmp	r5, #0
 80298c2:	d04d      	beq.n	8029960 <_printf_i+0x1b4>
 80298c4:	4615      	mov	r5, r2
 80298c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80298ca:	fb03 6711 	mls	r7, r3, r1, r6
 80298ce:	5dc7      	ldrb	r7, [r0, r7]
 80298d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80298d4:	4637      	mov	r7, r6
 80298d6:	42bb      	cmp	r3, r7
 80298d8:	460e      	mov	r6, r1
 80298da:	d9f4      	bls.n	80298c6 <_printf_i+0x11a>
 80298dc:	2b08      	cmp	r3, #8
 80298de:	d10b      	bne.n	80298f8 <_printf_i+0x14c>
 80298e0:	6823      	ldr	r3, [r4, #0]
 80298e2:	07de      	lsls	r6, r3, #31
 80298e4:	d508      	bpl.n	80298f8 <_printf_i+0x14c>
 80298e6:	6923      	ldr	r3, [r4, #16]
 80298e8:	6861      	ldr	r1, [r4, #4]
 80298ea:	4299      	cmp	r1, r3
 80298ec:	bfde      	ittt	le
 80298ee:	2330      	movle	r3, #48	; 0x30
 80298f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80298f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80298f8:	1b52      	subs	r2, r2, r5
 80298fa:	6122      	str	r2, [r4, #16]
 80298fc:	f8cd a000 	str.w	sl, [sp]
 8029900:	464b      	mov	r3, r9
 8029902:	aa03      	add	r2, sp, #12
 8029904:	4621      	mov	r1, r4
 8029906:	4640      	mov	r0, r8
 8029908:	f7ff fee2 	bl	80296d0 <_printf_common>
 802990c:	3001      	adds	r0, #1
 802990e:	d14c      	bne.n	80299aa <_printf_i+0x1fe>
 8029910:	f04f 30ff 	mov.w	r0, #4294967295
 8029914:	b004      	add	sp, #16
 8029916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802991a:	4835      	ldr	r0, [pc, #212]	; (80299f0 <_printf_i+0x244>)
 802991c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029920:	6829      	ldr	r1, [r5, #0]
 8029922:	6823      	ldr	r3, [r4, #0]
 8029924:	f851 6b04 	ldr.w	r6, [r1], #4
 8029928:	6029      	str	r1, [r5, #0]
 802992a:	061d      	lsls	r5, r3, #24
 802992c:	d514      	bpl.n	8029958 <_printf_i+0x1ac>
 802992e:	07df      	lsls	r7, r3, #31
 8029930:	bf44      	itt	mi
 8029932:	f043 0320 	orrmi.w	r3, r3, #32
 8029936:	6023      	strmi	r3, [r4, #0]
 8029938:	b91e      	cbnz	r6, 8029942 <_printf_i+0x196>
 802993a:	6823      	ldr	r3, [r4, #0]
 802993c:	f023 0320 	bic.w	r3, r3, #32
 8029940:	6023      	str	r3, [r4, #0]
 8029942:	2310      	movs	r3, #16
 8029944:	e7b0      	b.n	80298a8 <_printf_i+0xfc>
 8029946:	6823      	ldr	r3, [r4, #0]
 8029948:	f043 0320 	orr.w	r3, r3, #32
 802994c:	6023      	str	r3, [r4, #0]
 802994e:	2378      	movs	r3, #120	; 0x78
 8029950:	4828      	ldr	r0, [pc, #160]	; (80299f4 <_printf_i+0x248>)
 8029952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029956:	e7e3      	b.n	8029920 <_printf_i+0x174>
 8029958:	0659      	lsls	r1, r3, #25
 802995a:	bf48      	it	mi
 802995c:	b2b6      	uxthmi	r6, r6
 802995e:	e7e6      	b.n	802992e <_printf_i+0x182>
 8029960:	4615      	mov	r5, r2
 8029962:	e7bb      	b.n	80298dc <_printf_i+0x130>
 8029964:	682b      	ldr	r3, [r5, #0]
 8029966:	6826      	ldr	r6, [r4, #0]
 8029968:	6961      	ldr	r1, [r4, #20]
 802996a:	1d18      	adds	r0, r3, #4
 802996c:	6028      	str	r0, [r5, #0]
 802996e:	0635      	lsls	r5, r6, #24
 8029970:	681b      	ldr	r3, [r3, #0]
 8029972:	d501      	bpl.n	8029978 <_printf_i+0x1cc>
 8029974:	6019      	str	r1, [r3, #0]
 8029976:	e002      	b.n	802997e <_printf_i+0x1d2>
 8029978:	0670      	lsls	r0, r6, #25
 802997a:	d5fb      	bpl.n	8029974 <_printf_i+0x1c8>
 802997c:	8019      	strh	r1, [r3, #0]
 802997e:	2300      	movs	r3, #0
 8029980:	6123      	str	r3, [r4, #16]
 8029982:	4615      	mov	r5, r2
 8029984:	e7ba      	b.n	80298fc <_printf_i+0x150>
 8029986:	682b      	ldr	r3, [r5, #0]
 8029988:	1d1a      	adds	r2, r3, #4
 802998a:	602a      	str	r2, [r5, #0]
 802998c:	681d      	ldr	r5, [r3, #0]
 802998e:	6862      	ldr	r2, [r4, #4]
 8029990:	2100      	movs	r1, #0
 8029992:	4628      	mov	r0, r5
 8029994:	f7d6 fc3c 	bl	8000210 <memchr>
 8029998:	b108      	cbz	r0, 802999e <_printf_i+0x1f2>
 802999a:	1b40      	subs	r0, r0, r5
 802999c:	6060      	str	r0, [r4, #4]
 802999e:	6863      	ldr	r3, [r4, #4]
 80299a0:	6123      	str	r3, [r4, #16]
 80299a2:	2300      	movs	r3, #0
 80299a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80299a8:	e7a8      	b.n	80298fc <_printf_i+0x150>
 80299aa:	6923      	ldr	r3, [r4, #16]
 80299ac:	462a      	mov	r2, r5
 80299ae:	4649      	mov	r1, r9
 80299b0:	4640      	mov	r0, r8
 80299b2:	47d0      	blx	sl
 80299b4:	3001      	adds	r0, #1
 80299b6:	d0ab      	beq.n	8029910 <_printf_i+0x164>
 80299b8:	6823      	ldr	r3, [r4, #0]
 80299ba:	079b      	lsls	r3, r3, #30
 80299bc:	d413      	bmi.n	80299e6 <_printf_i+0x23a>
 80299be:	68e0      	ldr	r0, [r4, #12]
 80299c0:	9b03      	ldr	r3, [sp, #12]
 80299c2:	4298      	cmp	r0, r3
 80299c4:	bfb8      	it	lt
 80299c6:	4618      	movlt	r0, r3
 80299c8:	e7a4      	b.n	8029914 <_printf_i+0x168>
 80299ca:	2301      	movs	r3, #1
 80299cc:	4632      	mov	r2, r6
 80299ce:	4649      	mov	r1, r9
 80299d0:	4640      	mov	r0, r8
 80299d2:	47d0      	blx	sl
 80299d4:	3001      	adds	r0, #1
 80299d6:	d09b      	beq.n	8029910 <_printf_i+0x164>
 80299d8:	3501      	adds	r5, #1
 80299da:	68e3      	ldr	r3, [r4, #12]
 80299dc:	9903      	ldr	r1, [sp, #12]
 80299de:	1a5b      	subs	r3, r3, r1
 80299e0:	42ab      	cmp	r3, r5
 80299e2:	dcf2      	bgt.n	80299ca <_printf_i+0x21e>
 80299e4:	e7eb      	b.n	80299be <_printf_i+0x212>
 80299e6:	2500      	movs	r5, #0
 80299e8:	f104 0619 	add.w	r6, r4, #25
 80299ec:	e7f5      	b.n	80299da <_printf_i+0x22e>
 80299ee:	bf00      	nop
 80299f0:	0802f0c1 	.word	0x0802f0c1
 80299f4:	0802f0d2 	.word	0x0802f0d2

080299f8 <cleanup_glue>:
 80299f8:	b538      	push	{r3, r4, r5, lr}
 80299fa:	460c      	mov	r4, r1
 80299fc:	6809      	ldr	r1, [r1, #0]
 80299fe:	4605      	mov	r5, r0
 8029a00:	b109      	cbz	r1, 8029a06 <cleanup_glue+0xe>
 8029a02:	f7ff fff9 	bl	80299f8 <cleanup_glue>
 8029a06:	4621      	mov	r1, r4
 8029a08:	4628      	mov	r0, r5
 8029a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029a0e:	f7ff bc25 	b.w	802925c <_free_r>
	...

08029a14 <_reclaim_reent>:
 8029a14:	4b2c      	ldr	r3, [pc, #176]	; (8029ac8 <_reclaim_reent+0xb4>)
 8029a16:	681b      	ldr	r3, [r3, #0]
 8029a18:	4283      	cmp	r3, r0
 8029a1a:	b570      	push	{r4, r5, r6, lr}
 8029a1c:	4604      	mov	r4, r0
 8029a1e:	d051      	beq.n	8029ac4 <_reclaim_reent+0xb0>
 8029a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8029a22:	b143      	cbz	r3, 8029a36 <_reclaim_reent+0x22>
 8029a24:	68db      	ldr	r3, [r3, #12]
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	d14a      	bne.n	8029ac0 <_reclaim_reent+0xac>
 8029a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029a2c:	6819      	ldr	r1, [r3, #0]
 8029a2e:	b111      	cbz	r1, 8029a36 <_reclaim_reent+0x22>
 8029a30:	4620      	mov	r0, r4
 8029a32:	f7ff fc13 	bl	802925c <_free_r>
 8029a36:	6961      	ldr	r1, [r4, #20]
 8029a38:	b111      	cbz	r1, 8029a40 <_reclaim_reent+0x2c>
 8029a3a:	4620      	mov	r0, r4
 8029a3c:	f7ff fc0e 	bl	802925c <_free_r>
 8029a40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8029a42:	b111      	cbz	r1, 8029a4a <_reclaim_reent+0x36>
 8029a44:	4620      	mov	r0, r4
 8029a46:	f7ff fc09 	bl	802925c <_free_r>
 8029a4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8029a4c:	b111      	cbz	r1, 8029a54 <_reclaim_reent+0x40>
 8029a4e:	4620      	mov	r0, r4
 8029a50:	f7ff fc04 	bl	802925c <_free_r>
 8029a54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8029a56:	b111      	cbz	r1, 8029a5e <_reclaim_reent+0x4a>
 8029a58:	4620      	mov	r0, r4
 8029a5a:	f7ff fbff 	bl	802925c <_free_r>
 8029a5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029a60:	b111      	cbz	r1, 8029a68 <_reclaim_reent+0x54>
 8029a62:	4620      	mov	r0, r4
 8029a64:	f7ff fbfa 	bl	802925c <_free_r>
 8029a68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8029a6a:	b111      	cbz	r1, 8029a72 <_reclaim_reent+0x5e>
 8029a6c:	4620      	mov	r0, r4
 8029a6e:	f7ff fbf5 	bl	802925c <_free_r>
 8029a72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8029a74:	b111      	cbz	r1, 8029a7c <_reclaim_reent+0x68>
 8029a76:	4620      	mov	r0, r4
 8029a78:	f7ff fbf0 	bl	802925c <_free_r>
 8029a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029a7e:	b111      	cbz	r1, 8029a86 <_reclaim_reent+0x72>
 8029a80:	4620      	mov	r0, r4
 8029a82:	f7ff fbeb 	bl	802925c <_free_r>
 8029a86:	69a3      	ldr	r3, [r4, #24]
 8029a88:	b1e3      	cbz	r3, 8029ac4 <_reclaim_reent+0xb0>
 8029a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8029a8c:	4620      	mov	r0, r4
 8029a8e:	4798      	blx	r3
 8029a90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8029a92:	b1b9      	cbz	r1, 8029ac4 <_reclaim_reent+0xb0>
 8029a94:	4620      	mov	r0, r4
 8029a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029a9a:	f7ff bfad 	b.w	80299f8 <cleanup_glue>
 8029a9e:	5949      	ldr	r1, [r1, r5]
 8029aa0:	b941      	cbnz	r1, 8029ab4 <_reclaim_reent+0xa0>
 8029aa2:	3504      	adds	r5, #4
 8029aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029aa6:	2d80      	cmp	r5, #128	; 0x80
 8029aa8:	68d9      	ldr	r1, [r3, #12]
 8029aaa:	d1f8      	bne.n	8029a9e <_reclaim_reent+0x8a>
 8029aac:	4620      	mov	r0, r4
 8029aae:	f7ff fbd5 	bl	802925c <_free_r>
 8029ab2:	e7ba      	b.n	8029a2a <_reclaim_reent+0x16>
 8029ab4:	680e      	ldr	r6, [r1, #0]
 8029ab6:	4620      	mov	r0, r4
 8029ab8:	f7ff fbd0 	bl	802925c <_free_r>
 8029abc:	4631      	mov	r1, r6
 8029abe:	e7ef      	b.n	8029aa0 <_reclaim_reent+0x8c>
 8029ac0:	2500      	movs	r5, #0
 8029ac2:	e7ef      	b.n	8029aa4 <_reclaim_reent+0x90>
 8029ac4:	bd70      	pop	{r4, r5, r6, pc}
 8029ac6:	bf00      	nop
 8029ac8:	200000bc 	.word	0x200000bc

08029acc <_sbrk_r>:
 8029acc:	b538      	push	{r3, r4, r5, lr}
 8029ace:	4d06      	ldr	r5, [pc, #24]	; (8029ae8 <_sbrk_r+0x1c>)
 8029ad0:	2300      	movs	r3, #0
 8029ad2:	4604      	mov	r4, r0
 8029ad4:	4608      	mov	r0, r1
 8029ad6:	602b      	str	r3, [r5, #0]
 8029ad8:	f7d7 ff4a 	bl	8001970 <_sbrk>
 8029adc:	1c43      	adds	r3, r0, #1
 8029ade:	d102      	bne.n	8029ae6 <_sbrk_r+0x1a>
 8029ae0:	682b      	ldr	r3, [r5, #0]
 8029ae2:	b103      	cbz	r3, 8029ae6 <_sbrk_r+0x1a>
 8029ae4:	6023      	str	r3, [r4, #0]
 8029ae6:	bd38      	pop	{r3, r4, r5, pc}
 8029ae8:	200154e4 	.word	0x200154e4

08029aec <_raise_r>:
 8029aec:	291f      	cmp	r1, #31
 8029aee:	b538      	push	{r3, r4, r5, lr}
 8029af0:	4604      	mov	r4, r0
 8029af2:	460d      	mov	r5, r1
 8029af4:	d904      	bls.n	8029b00 <_raise_r+0x14>
 8029af6:	2316      	movs	r3, #22
 8029af8:	6003      	str	r3, [r0, #0]
 8029afa:	f04f 30ff 	mov.w	r0, #4294967295
 8029afe:	bd38      	pop	{r3, r4, r5, pc}
 8029b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029b02:	b112      	cbz	r2, 8029b0a <_raise_r+0x1e>
 8029b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029b08:	b94b      	cbnz	r3, 8029b1e <_raise_r+0x32>
 8029b0a:	4620      	mov	r0, r4
 8029b0c:	f000 f830 	bl	8029b70 <_getpid_r>
 8029b10:	462a      	mov	r2, r5
 8029b12:	4601      	mov	r1, r0
 8029b14:	4620      	mov	r0, r4
 8029b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b1a:	f000 b817 	b.w	8029b4c <_kill_r>
 8029b1e:	2b01      	cmp	r3, #1
 8029b20:	d00a      	beq.n	8029b38 <_raise_r+0x4c>
 8029b22:	1c59      	adds	r1, r3, #1
 8029b24:	d103      	bne.n	8029b2e <_raise_r+0x42>
 8029b26:	2316      	movs	r3, #22
 8029b28:	6003      	str	r3, [r0, #0]
 8029b2a:	2001      	movs	r0, #1
 8029b2c:	e7e7      	b.n	8029afe <_raise_r+0x12>
 8029b2e:	2400      	movs	r4, #0
 8029b30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029b34:	4628      	mov	r0, r5
 8029b36:	4798      	blx	r3
 8029b38:	2000      	movs	r0, #0
 8029b3a:	e7e0      	b.n	8029afe <_raise_r+0x12>

08029b3c <raise>:
 8029b3c:	4b02      	ldr	r3, [pc, #8]	; (8029b48 <raise+0xc>)
 8029b3e:	4601      	mov	r1, r0
 8029b40:	6818      	ldr	r0, [r3, #0]
 8029b42:	f7ff bfd3 	b.w	8029aec <_raise_r>
 8029b46:	bf00      	nop
 8029b48:	200000bc 	.word	0x200000bc

08029b4c <_kill_r>:
 8029b4c:	b538      	push	{r3, r4, r5, lr}
 8029b4e:	4d07      	ldr	r5, [pc, #28]	; (8029b6c <_kill_r+0x20>)
 8029b50:	2300      	movs	r3, #0
 8029b52:	4604      	mov	r4, r0
 8029b54:	4608      	mov	r0, r1
 8029b56:	4611      	mov	r1, r2
 8029b58:	602b      	str	r3, [r5, #0]
 8029b5a:	f7d7 fed3 	bl	8001904 <_kill>
 8029b5e:	1c43      	adds	r3, r0, #1
 8029b60:	d102      	bne.n	8029b68 <_kill_r+0x1c>
 8029b62:	682b      	ldr	r3, [r5, #0]
 8029b64:	b103      	cbz	r3, 8029b68 <_kill_r+0x1c>
 8029b66:	6023      	str	r3, [r4, #0]
 8029b68:	bd38      	pop	{r3, r4, r5, pc}
 8029b6a:	bf00      	nop
 8029b6c:	200154e4 	.word	0x200154e4

08029b70 <_getpid_r>:
 8029b70:	f7d7 bec6 	b.w	8001900 <_getpid>

08029b74 <siprintf>:
 8029b74:	b40e      	push	{r1, r2, r3}
 8029b76:	b500      	push	{lr}
 8029b78:	b09c      	sub	sp, #112	; 0x70
 8029b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8029b7c:	9002      	str	r0, [sp, #8]
 8029b7e:	9006      	str	r0, [sp, #24]
 8029b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8029b84:	4809      	ldr	r0, [pc, #36]	; (8029bac <siprintf+0x38>)
 8029b86:	9107      	str	r1, [sp, #28]
 8029b88:	9104      	str	r1, [sp, #16]
 8029b8a:	4909      	ldr	r1, [pc, #36]	; (8029bb0 <siprintf+0x3c>)
 8029b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8029b90:	9105      	str	r1, [sp, #20]
 8029b92:	6800      	ldr	r0, [r0, #0]
 8029b94:	9301      	str	r3, [sp, #4]
 8029b96:	a902      	add	r1, sp, #8
 8029b98:	f000 fb92 	bl	802a2c0 <_svfiprintf_r>
 8029b9c:	9b02      	ldr	r3, [sp, #8]
 8029b9e:	2200      	movs	r2, #0
 8029ba0:	701a      	strb	r2, [r3, #0]
 8029ba2:	b01c      	add	sp, #112	; 0x70
 8029ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8029ba8:	b003      	add	sp, #12
 8029baa:	4770      	bx	lr
 8029bac:	200000bc 	.word	0x200000bc
 8029bb0:	ffff0208 	.word	0xffff0208

08029bb4 <__sread>:
 8029bb4:	b510      	push	{r4, lr}
 8029bb6:	460c      	mov	r4, r1
 8029bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029bbc:	f000 fc80 	bl	802a4c0 <_read_r>
 8029bc0:	2800      	cmp	r0, #0
 8029bc2:	bfab      	itete	ge
 8029bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8029bc8:	181b      	addge	r3, r3, r0
 8029bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029bce:	bfac      	ite	ge
 8029bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8029bd2:	81a3      	strhlt	r3, [r4, #12]
 8029bd4:	bd10      	pop	{r4, pc}

08029bd6 <__swrite>:
 8029bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029bda:	461f      	mov	r7, r3
 8029bdc:	898b      	ldrh	r3, [r1, #12]
 8029bde:	05db      	lsls	r3, r3, #23
 8029be0:	4605      	mov	r5, r0
 8029be2:	460c      	mov	r4, r1
 8029be4:	4616      	mov	r6, r2
 8029be6:	d505      	bpl.n	8029bf4 <__swrite+0x1e>
 8029be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029bec:	2302      	movs	r3, #2
 8029bee:	2200      	movs	r2, #0
 8029bf0:	f000 fa3e 	bl	802a070 <_lseek_r>
 8029bf4:	89a3      	ldrh	r3, [r4, #12]
 8029bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029bfe:	81a3      	strh	r3, [r4, #12]
 8029c00:	4632      	mov	r2, r6
 8029c02:	463b      	mov	r3, r7
 8029c04:	4628      	mov	r0, r5
 8029c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029c0a:	f000 b87d 	b.w	8029d08 <_write_r>

08029c0e <__sseek>:
 8029c0e:	b510      	push	{r4, lr}
 8029c10:	460c      	mov	r4, r1
 8029c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c16:	f000 fa2b 	bl	802a070 <_lseek_r>
 8029c1a:	1c43      	adds	r3, r0, #1
 8029c1c:	89a3      	ldrh	r3, [r4, #12]
 8029c1e:	bf15      	itete	ne
 8029c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8029c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029c2a:	81a3      	strheq	r3, [r4, #12]
 8029c2c:	bf18      	it	ne
 8029c2e:	81a3      	strhne	r3, [r4, #12]
 8029c30:	bd10      	pop	{r4, pc}

08029c32 <__sclose>:
 8029c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c36:	f000 b949 	b.w	8029ecc <_close_r>

08029c3a <strncmp>:
 8029c3a:	b510      	push	{r4, lr}
 8029c3c:	b17a      	cbz	r2, 8029c5e <strncmp+0x24>
 8029c3e:	4603      	mov	r3, r0
 8029c40:	3901      	subs	r1, #1
 8029c42:	1884      	adds	r4, r0, r2
 8029c44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029c48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8029c4c:	4290      	cmp	r0, r2
 8029c4e:	d101      	bne.n	8029c54 <strncmp+0x1a>
 8029c50:	42a3      	cmp	r3, r4
 8029c52:	d101      	bne.n	8029c58 <strncmp+0x1e>
 8029c54:	1a80      	subs	r0, r0, r2
 8029c56:	bd10      	pop	{r4, pc}
 8029c58:	2800      	cmp	r0, #0
 8029c5a:	d1f3      	bne.n	8029c44 <strncmp+0xa>
 8029c5c:	e7fa      	b.n	8029c54 <strncmp+0x1a>
 8029c5e:	4610      	mov	r0, r2
 8029c60:	e7f9      	b.n	8029c56 <strncmp+0x1c>
	...

08029c64 <__swbuf_r>:
 8029c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c66:	460e      	mov	r6, r1
 8029c68:	4614      	mov	r4, r2
 8029c6a:	4605      	mov	r5, r0
 8029c6c:	b118      	cbz	r0, 8029c76 <__swbuf_r+0x12>
 8029c6e:	6983      	ldr	r3, [r0, #24]
 8029c70:	b90b      	cbnz	r3, 8029c76 <__swbuf_r+0x12>
 8029c72:	f7ff f9f5 	bl	8029060 <__sinit>
 8029c76:	4b21      	ldr	r3, [pc, #132]	; (8029cfc <__swbuf_r+0x98>)
 8029c78:	429c      	cmp	r4, r3
 8029c7a:	d12b      	bne.n	8029cd4 <__swbuf_r+0x70>
 8029c7c:	686c      	ldr	r4, [r5, #4]
 8029c7e:	69a3      	ldr	r3, [r4, #24]
 8029c80:	60a3      	str	r3, [r4, #8]
 8029c82:	89a3      	ldrh	r3, [r4, #12]
 8029c84:	071a      	lsls	r2, r3, #28
 8029c86:	d52f      	bpl.n	8029ce8 <__swbuf_r+0x84>
 8029c88:	6923      	ldr	r3, [r4, #16]
 8029c8a:	b36b      	cbz	r3, 8029ce8 <__swbuf_r+0x84>
 8029c8c:	6923      	ldr	r3, [r4, #16]
 8029c8e:	6820      	ldr	r0, [r4, #0]
 8029c90:	1ac0      	subs	r0, r0, r3
 8029c92:	6963      	ldr	r3, [r4, #20]
 8029c94:	b2f6      	uxtb	r6, r6
 8029c96:	4283      	cmp	r3, r0
 8029c98:	4637      	mov	r7, r6
 8029c9a:	dc04      	bgt.n	8029ca6 <__swbuf_r+0x42>
 8029c9c:	4621      	mov	r1, r4
 8029c9e:	4628      	mov	r0, r5
 8029ca0:	f000 f9aa 	bl	8029ff8 <_fflush_r>
 8029ca4:	bb30      	cbnz	r0, 8029cf4 <__swbuf_r+0x90>
 8029ca6:	68a3      	ldr	r3, [r4, #8]
 8029ca8:	3b01      	subs	r3, #1
 8029caa:	60a3      	str	r3, [r4, #8]
 8029cac:	6823      	ldr	r3, [r4, #0]
 8029cae:	1c5a      	adds	r2, r3, #1
 8029cb0:	6022      	str	r2, [r4, #0]
 8029cb2:	701e      	strb	r6, [r3, #0]
 8029cb4:	6963      	ldr	r3, [r4, #20]
 8029cb6:	3001      	adds	r0, #1
 8029cb8:	4283      	cmp	r3, r0
 8029cba:	d004      	beq.n	8029cc6 <__swbuf_r+0x62>
 8029cbc:	89a3      	ldrh	r3, [r4, #12]
 8029cbe:	07db      	lsls	r3, r3, #31
 8029cc0:	d506      	bpl.n	8029cd0 <__swbuf_r+0x6c>
 8029cc2:	2e0a      	cmp	r6, #10
 8029cc4:	d104      	bne.n	8029cd0 <__swbuf_r+0x6c>
 8029cc6:	4621      	mov	r1, r4
 8029cc8:	4628      	mov	r0, r5
 8029cca:	f000 f995 	bl	8029ff8 <_fflush_r>
 8029cce:	b988      	cbnz	r0, 8029cf4 <__swbuf_r+0x90>
 8029cd0:	4638      	mov	r0, r7
 8029cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029cd4:	4b0a      	ldr	r3, [pc, #40]	; (8029d00 <__swbuf_r+0x9c>)
 8029cd6:	429c      	cmp	r4, r3
 8029cd8:	d101      	bne.n	8029cde <__swbuf_r+0x7a>
 8029cda:	68ac      	ldr	r4, [r5, #8]
 8029cdc:	e7cf      	b.n	8029c7e <__swbuf_r+0x1a>
 8029cde:	4b09      	ldr	r3, [pc, #36]	; (8029d04 <__swbuf_r+0xa0>)
 8029ce0:	429c      	cmp	r4, r3
 8029ce2:	bf08      	it	eq
 8029ce4:	68ec      	ldreq	r4, [r5, #12]
 8029ce6:	e7ca      	b.n	8029c7e <__swbuf_r+0x1a>
 8029ce8:	4621      	mov	r1, r4
 8029cea:	4628      	mov	r0, r5
 8029cec:	f000 f81e 	bl	8029d2c <__swsetup_r>
 8029cf0:	2800      	cmp	r0, #0
 8029cf2:	d0cb      	beq.n	8029c8c <__swbuf_r+0x28>
 8029cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8029cf8:	e7ea      	b.n	8029cd0 <__swbuf_r+0x6c>
 8029cfa:	bf00      	nop
 8029cfc:	0802f06c 	.word	0x0802f06c
 8029d00:	0802f08c 	.word	0x0802f08c
 8029d04:	0802f04c 	.word	0x0802f04c

08029d08 <_write_r>:
 8029d08:	b538      	push	{r3, r4, r5, lr}
 8029d0a:	4d07      	ldr	r5, [pc, #28]	; (8029d28 <_write_r+0x20>)
 8029d0c:	4604      	mov	r4, r0
 8029d0e:	4608      	mov	r0, r1
 8029d10:	4611      	mov	r1, r2
 8029d12:	2200      	movs	r2, #0
 8029d14:	602a      	str	r2, [r5, #0]
 8029d16:	461a      	mov	r2, r3
 8029d18:	f7d7 fe10 	bl	800193c <_write>
 8029d1c:	1c43      	adds	r3, r0, #1
 8029d1e:	d102      	bne.n	8029d26 <_write_r+0x1e>
 8029d20:	682b      	ldr	r3, [r5, #0]
 8029d22:	b103      	cbz	r3, 8029d26 <_write_r+0x1e>
 8029d24:	6023      	str	r3, [r4, #0]
 8029d26:	bd38      	pop	{r3, r4, r5, pc}
 8029d28:	200154e4 	.word	0x200154e4

08029d2c <__swsetup_r>:
 8029d2c:	4b32      	ldr	r3, [pc, #200]	; (8029df8 <__swsetup_r+0xcc>)
 8029d2e:	b570      	push	{r4, r5, r6, lr}
 8029d30:	681d      	ldr	r5, [r3, #0]
 8029d32:	4606      	mov	r6, r0
 8029d34:	460c      	mov	r4, r1
 8029d36:	b125      	cbz	r5, 8029d42 <__swsetup_r+0x16>
 8029d38:	69ab      	ldr	r3, [r5, #24]
 8029d3a:	b913      	cbnz	r3, 8029d42 <__swsetup_r+0x16>
 8029d3c:	4628      	mov	r0, r5
 8029d3e:	f7ff f98f 	bl	8029060 <__sinit>
 8029d42:	4b2e      	ldr	r3, [pc, #184]	; (8029dfc <__swsetup_r+0xd0>)
 8029d44:	429c      	cmp	r4, r3
 8029d46:	d10f      	bne.n	8029d68 <__swsetup_r+0x3c>
 8029d48:	686c      	ldr	r4, [r5, #4]
 8029d4a:	89a3      	ldrh	r3, [r4, #12]
 8029d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029d50:	0719      	lsls	r1, r3, #28
 8029d52:	d42c      	bmi.n	8029dae <__swsetup_r+0x82>
 8029d54:	06dd      	lsls	r5, r3, #27
 8029d56:	d411      	bmi.n	8029d7c <__swsetup_r+0x50>
 8029d58:	2309      	movs	r3, #9
 8029d5a:	6033      	str	r3, [r6, #0]
 8029d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029d60:	81a3      	strh	r3, [r4, #12]
 8029d62:	f04f 30ff 	mov.w	r0, #4294967295
 8029d66:	e03e      	b.n	8029de6 <__swsetup_r+0xba>
 8029d68:	4b25      	ldr	r3, [pc, #148]	; (8029e00 <__swsetup_r+0xd4>)
 8029d6a:	429c      	cmp	r4, r3
 8029d6c:	d101      	bne.n	8029d72 <__swsetup_r+0x46>
 8029d6e:	68ac      	ldr	r4, [r5, #8]
 8029d70:	e7eb      	b.n	8029d4a <__swsetup_r+0x1e>
 8029d72:	4b24      	ldr	r3, [pc, #144]	; (8029e04 <__swsetup_r+0xd8>)
 8029d74:	429c      	cmp	r4, r3
 8029d76:	bf08      	it	eq
 8029d78:	68ec      	ldreq	r4, [r5, #12]
 8029d7a:	e7e6      	b.n	8029d4a <__swsetup_r+0x1e>
 8029d7c:	0758      	lsls	r0, r3, #29
 8029d7e:	d512      	bpl.n	8029da6 <__swsetup_r+0x7a>
 8029d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029d82:	b141      	cbz	r1, 8029d96 <__swsetup_r+0x6a>
 8029d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029d88:	4299      	cmp	r1, r3
 8029d8a:	d002      	beq.n	8029d92 <__swsetup_r+0x66>
 8029d8c:	4630      	mov	r0, r6
 8029d8e:	f7ff fa65 	bl	802925c <_free_r>
 8029d92:	2300      	movs	r3, #0
 8029d94:	6363      	str	r3, [r4, #52]	; 0x34
 8029d96:	89a3      	ldrh	r3, [r4, #12]
 8029d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029d9c:	81a3      	strh	r3, [r4, #12]
 8029d9e:	2300      	movs	r3, #0
 8029da0:	6063      	str	r3, [r4, #4]
 8029da2:	6923      	ldr	r3, [r4, #16]
 8029da4:	6023      	str	r3, [r4, #0]
 8029da6:	89a3      	ldrh	r3, [r4, #12]
 8029da8:	f043 0308 	orr.w	r3, r3, #8
 8029dac:	81a3      	strh	r3, [r4, #12]
 8029dae:	6923      	ldr	r3, [r4, #16]
 8029db0:	b94b      	cbnz	r3, 8029dc6 <__swsetup_r+0x9a>
 8029db2:	89a3      	ldrh	r3, [r4, #12]
 8029db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029dbc:	d003      	beq.n	8029dc6 <__swsetup_r+0x9a>
 8029dbe:	4621      	mov	r1, r4
 8029dc0:	4630      	mov	r0, r6
 8029dc2:	f000 f98d 	bl	802a0e0 <__smakebuf_r>
 8029dc6:	89a0      	ldrh	r0, [r4, #12]
 8029dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029dcc:	f010 0301 	ands.w	r3, r0, #1
 8029dd0:	d00a      	beq.n	8029de8 <__swsetup_r+0xbc>
 8029dd2:	2300      	movs	r3, #0
 8029dd4:	60a3      	str	r3, [r4, #8]
 8029dd6:	6963      	ldr	r3, [r4, #20]
 8029dd8:	425b      	negs	r3, r3
 8029dda:	61a3      	str	r3, [r4, #24]
 8029ddc:	6923      	ldr	r3, [r4, #16]
 8029dde:	b943      	cbnz	r3, 8029df2 <__swsetup_r+0xc6>
 8029de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029de4:	d1ba      	bne.n	8029d5c <__swsetup_r+0x30>
 8029de6:	bd70      	pop	{r4, r5, r6, pc}
 8029de8:	0781      	lsls	r1, r0, #30
 8029dea:	bf58      	it	pl
 8029dec:	6963      	ldrpl	r3, [r4, #20]
 8029dee:	60a3      	str	r3, [r4, #8]
 8029df0:	e7f4      	b.n	8029ddc <__swsetup_r+0xb0>
 8029df2:	2000      	movs	r0, #0
 8029df4:	e7f7      	b.n	8029de6 <__swsetup_r+0xba>
 8029df6:	bf00      	nop
 8029df8:	200000bc 	.word	0x200000bc
 8029dfc:	0802f06c 	.word	0x0802f06c
 8029e00:	0802f08c 	.word	0x0802f08c
 8029e04:	0802f04c 	.word	0x0802f04c

08029e08 <__register_exitproc>:
 8029e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029e0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8029ec8 <__register_exitproc+0xc0>
 8029e10:	4606      	mov	r6, r0
 8029e12:	f8d8 0000 	ldr.w	r0, [r8]
 8029e16:	461f      	mov	r7, r3
 8029e18:	460d      	mov	r5, r1
 8029e1a:	4691      	mov	r9, r2
 8029e1c:	f7ff f9f5 	bl	802920a <__retarget_lock_acquire_recursive>
 8029e20:	4b25      	ldr	r3, [pc, #148]	; (8029eb8 <__register_exitproc+0xb0>)
 8029e22:	681c      	ldr	r4, [r3, #0]
 8029e24:	b934      	cbnz	r4, 8029e34 <__register_exitproc+0x2c>
 8029e26:	4c25      	ldr	r4, [pc, #148]	; (8029ebc <__register_exitproc+0xb4>)
 8029e28:	601c      	str	r4, [r3, #0]
 8029e2a:	4b25      	ldr	r3, [pc, #148]	; (8029ec0 <__register_exitproc+0xb8>)
 8029e2c:	b113      	cbz	r3, 8029e34 <__register_exitproc+0x2c>
 8029e2e:	681b      	ldr	r3, [r3, #0]
 8029e30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029e34:	6863      	ldr	r3, [r4, #4]
 8029e36:	2b1f      	cmp	r3, #31
 8029e38:	dd07      	ble.n	8029e4a <__register_exitproc+0x42>
 8029e3a:	f8d8 0000 	ldr.w	r0, [r8]
 8029e3e:	f7ff f9e6 	bl	802920e <__retarget_lock_release_recursive>
 8029e42:	f04f 30ff 	mov.w	r0, #4294967295
 8029e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029e4a:	b34e      	cbz	r6, 8029ea0 <__register_exitproc+0x98>
 8029e4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029e50:	b988      	cbnz	r0, 8029e76 <__register_exitproc+0x6e>
 8029e52:	4b1c      	ldr	r3, [pc, #112]	; (8029ec4 <__register_exitproc+0xbc>)
 8029e54:	b923      	cbnz	r3, 8029e60 <__register_exitproc+0x58>
 8029e56:	f8d8 0000 	ldr.w	r0, [r8]
 8029e5a:	f7ff f9d7 	bl	802920c <__retarget_lock_release>
 8029e5e:	e7f0      	b.n	8029e42 <__register_exitproc+0x3a>
 8029e60:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029e64:	f7ff f9d4 	bl	8029210 <malloc>
 8029e68:	2800      	cmp	r0, #0
 8029e6a:	d0f4      	beq.n	8029e56 <__register_exitproc+0x4e>
 8029e6c:	2300      	movs	r3, #0
 8029e6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029e72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029e76:	6863      	ldr	r3, [r4, #4]
 8029e78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029e7c:	2201      	movs	r2, #1
 8029e7e:	409a      	lsls	r2, r3
 8029e80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029e84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029e88:	4313      	orrs	r3, r2
 8029e8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029e8e:	2e02      	cmp	r6, #2
 8029e90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029e94:	bf02      	ittt	eq
 8029e96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029e9a:	4313      	orreq	r3, r2
 8029e9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029ea0:	6863      	ldr	r3, [r4, #4]
 8029ea2:	f8d8 0000 	ldr.w	r0, [r8]
 8029ea6:	1c5a      	adds	r2, r3, #1
 8029ea8:	3302      	adds	r3, #2
 8029eaa:	6062      	str	r2, [r4, #4]
 8029eac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029eb0:	f7ff f9ad 	bl	802920e <__retarget_lock_release_recursive>
 8029eb4:	2000      	movs	r0, #0
 8029eb6:	e7c6      	b.n	8029e46 <__register_exitproc+0x3e>
 8029eb8:	20015574 	.word	0x20015574
 8029ebc:	200154e8 	.word	0x200154e8
 8029ec0:	0802f0e4 	.word	0x0802f0e4
 8029ec4:	08029211 	.word	0x08029211
 8029ec8:	20000120 	.word	0x20000120

08029ecc <_close_r>:
 8029ecc:	b538      	push	{r3, r4, r5, lr}
 8029ece:	4d06      	ldr	r5, [pc, #24]	; (8029ee8 <_close_r+0x1c>)
 8029ed0:	2300      	movs	r3, #0
 8029ed2:	4604      	mov	r4, r0
 8029ed4:	4608      	mov	r0, r1
 8029ed6:	602b      	str	r3, [r5, #0]
 8029ed8:	f7d7 fd3e 	bl	8001958 <_close>
 8029edc:	1c43      	adds	r3, r0, #1
 8029ede:	d102      	bne.n	8029ee6 <_close_r+0x1a>
 8029ee0:	682b      	ldr	r3, [r5, #0]
 8029ee2:	b103      	cbz	r3, 8029ee6 <_close_r+0x1a>
 8029ee4:	6023      	str	r3, [r4, #0]
 8029ee6:	bd38      	pop	{r3, r4, r5, pc}
 8029ee8:	200154e4 	.word	0x200154e4

08029eec <__sflush_r>:
 8029eec:	898a      	ldrh	r2, [r1, #12]
 8029eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ef2:	4605      	mov	r5, r0
 8029ef4:	0710      	lsls	r0, r2, #28
 8029ef6:	460c      	mov	r4, r1
 8029ef8:	d458      	bmi.n	8029fac <__sflush_r+0xc0>
 8029efa:	684b      	ldr	r3, [r1, #4]
 8029efc:	2b00      	cmp	r3, #0
 8029efe:	dc05      	bgt.n	8029f0c <__sflush_r+0x20>
 8029f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029f02:	2b00      	cmp	r3, #0
 8029f04:	dc02      	bgt.n	8029f0c <__sflush_r+0x20>
 8029f06:	2000      	movs	r0, #0
 8029f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029f0e:	2e00      	cmp	r6, #0
 8029f10:	d0f9      	beq.n	8029f06 <__sflush_r+0x1a>
 8029f12:	2300      	movs	r3, #0
 8029f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029f18:	682f      	ldr	r7, [r5, #0]
 8029f1a:	602b      	str	r3, [r5, #0]
 8029f1c:	d032      	beq.n	8029f84 <__sflush_r+0x98>
 8029f1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029f20:	89a3      	ldrh	r3, [r4, #12]
 8029f22:	075a      	lsls	r2, r3, #29
 8029f24:	d505      	bpl.n	8029f32 <__sflush_r+0x46>
 8029f26:	6863      	ldr	r3, [r4, #4]
 8029f28:	1ac0      	subs	r0, r0, r3
 8029f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029f2c:	b10b      	cbz	r3, 8029f32 <__sflush_r+0x46>
 8029f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029f30:	1ac0      	subs	r0, r0, r3
 8029f32:	2300      	movs	r3, #0
 8029f34:	4602      	mov	r2, r0
 8029f36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029f38:	6a21      	ldr	r1, [r4, #32]
 8029f3a:	4628      	mov	r0, r5
 8029f3c:	47b0      	blx	r6
 8029f3e:	1c43      	adds	r3, r0, #1
 8029f40:	89a3      	ldrh	r3, [r4, #12]
 8029f42:	d106      	bne.n	8029f52 <__sflush_r+0x66>
 8029f44:	6829      	ldr	r1, [r5, #0]
 8029f46:	291d      	cmp	r1, #29
 8029f48:	d82c      	bhi.n	8029fa4 <__sflush_r+0xb8>
 8029f4a:	4a2a      	ldr	r2, [pc, #168]	; (8029ff4 <__sflush_r+0x108>)
 8029f4c:	40ca      	lsrs	r2, r1
 8029f4e:	07d6      	lsls	r6, r2, #31
 8029f50:	d528      	bpl.n	8029fa4 <__sflush_r+0xb8>
 8029f52:	2200      	movs	r2, #0
 8029f54:	6062      	str	r2, [r4, #4]
 8029f56:	04d9      	lsls	r1, r3, #19
 8029f58:	6922      	ldr	r2, [r4, #16]
 8029f5a:	6022      	str	r2, [r4, #0]
 8029f5c:	d504      	bpl.n	8029f68 <__sflush_r+0x7c>
 8029f5e:	1c42      	adds	r2, r0, #1
 8029f60:	d101      	bne.n	8029f66 <__sflush_r+0x7a>
 8029f62:	682b      	ldr	r3, [r5, #0]
 8029f64:	b903      	cbnz	r3, 8029f68 <__sflush_r+0x7c>
 8029f66:	6560      	str	r0, [r4, #84]	; 0x54
 8029f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029f6a:	602f      	str	r7, [r5, #0]
 8029f6c:	2900      	cmp	r1, #0
 8029f6e:	d0ca      	beq.n	8029f06 <__sflush_r+0x1a>
 8029f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029f74:	4299      	cmp	r1, r3
 8029f76:	d002      	beq.n	8029f7e <__sflush_r+0x92>
 8029f78:	4628      	mov	r0, r5
 8029f7a:	f7ff f96f 	bl	802925c <_free_r>
 8029f7e:	2000      	movs	r0, #0
 8029f80:	6360      	str	r0, [r4, #52]	; 0x34
 8029f82:	e7c1      	b.n	8029f08 <__sflush_r+0x1c>
 8029f84:	6a21      	ldr	r1, [r4, #32]
 8029f86:	2301      	movs	r3, #1
 8029f88:	4628      	mov	r0, r5
 8029f8a:	47b0      	blx	r6
 8029f8c:	1c41      	adds	r1, r0, #1
 8029f8e:	d1c7      	bne.n	8029f20 <__sflush_r+0x34>
 8029f90:	682b      	ldr	r3, [r5, #0]
 8029f92:	2b00      	cmp	r3, #0
 8029f94:	d0c4      	beq.n	8029f20 <__sflush_r+0x34>
 8029f96:	2b1d      	cmp	r3, #29
 8029f98:	d001      	beq.n	8029f9e <__sflush_r+0xb2>
 8029f9a:	2b16      	cmp	r3, #22
 8029f9c:	d101      	bne.n	8029fa2 <__sflush_r+0xb6>
 8029f9e:	602f      	str	r7, [r5, #0]
 8029fa0:	e7b1      	b.n	8029f06 <__sflush_r+0x1a>
 8029fa2:	89a3      	ldrh	r3, [r4, #12]
 8029fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029fa8:	81a3      	strh	r3, [r4, #12]
 8029faa:	e7ad      	b.n	8029f08 <__sflush_r+0x1c>
 8029fac:	690f      	ldr	r7, [r1, #16]
 8029fae:	2f00      	cmp	r7, #0
 8029fb0:	d0a9      	beq.n	8029f06 <__sflush_r+0x1a>
 8029fb2:	0793      	lsls	r3, r2, #30
 8029fb4:	680e      	ldr	r6, [r1, #0]
 8029fb6:	bf08      	it	eq
 8029fb8:	694b      	ldreq	r3, [r1, #20]
 8029fba:	600f      	str	r7, [r1, #0]
 8029fbc:	bf18      	it	ne
 8029fbe:	2300      	movne	r3, #0
 8029fc0:	eba6 0807 	sub.w	r8, r6, r7
 8029fc4:	608b      	str	r3, [r1, #8]
 8029fc6:	f1b8 0f00 	cmp.w	r8, #0
 8029fca:	dd9c      	ble.n	8029f06 <__sflush_r+0x1a>
 8029fcc:	6a21      	ldr	r1, [r4, #32]
 8029fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029fd0:	4643      	mov	r3, r8
 8029fd2:	463a      	mov	r2, r7
 8029fd4:	4628      	mov	r0, r5
 8029fd6:	47b0      	blx	r6
 8029fd8:	2800      	cmp	r0, #0
 8029fda:	dc06      	bgt.n	8029fea <__sflush_r+0xfe>
 8029fdc:	89a3      	ldrh	r3, [r4, #12]
 8029fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029fe2:	81a3      	strh	r3, [r4, #12]
 8029fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8029fe8:	e78e      	b.n	8029f08 <__sflush_r+0x1c>
 8029fea:	4407      	add	r7, r0
 8029fec:	eba8 0800 	sub.w	r8, r8, r0
 8029ff0:	e7e9      	b.n	8029fc6 <__sflush_r+0xda>
 8029ff2:	bf00      	nop
 8029ff4:	20400001 	.word	0x20400001

08029ff8 <_fflush_r>:
 8029ff8:	b538      	push	{r3, r4, r5, lr}
 8029ffa:	690b      	ldr	r3, [r1, #16]
 8029ffc:	4605      	mov	r5, r0
 8029ffe:	460c      	mov	r4, r1
 802a000:	b913      	cbnz	r3, 802a008 <_fflush_r+0x10>
 802a002:	2500      	movs	r5, #0
 802a004:	4628      	mov	r0, r5
 802a006:	bd38      	pop	{r3, r4, r5, pc}
 802a008:	b118      	cbz	r0, 802a012 <_fflush_r+0x1a>
 802a00a:	6983      	ldr	r3, [r0, #24]
 802a00c:	b90b      	cbnz	r3, 802a012 <_fflush_r+0x1a>
 802a00e:	f7ff f827 	bl	8029060 <__sinit>
 802a012:	4b14      	ldr	r3, [pc, #80]	; (802a064 <_fflush_r+0x6c>)
 802a014:	429c      	cmp	r4, r3
 802a016:	d11b      	bne.n	802a050 <_fflush_r+0x58>
 802a018:	686c      	ldr	r4, [r5, #4]
 802a01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a01e:	2b00      	cmp	r3, #0
 802a020:	d0ef      	beq.n	802a002 <_fflush_r+0xa>
 802a022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a024:	07d0      	lsls	r0, r2, #31
 802a026:	d404      	bmi.n	802a032 <_fflush_r+0x3a>
 802a028:	0599      	lsls	r1, r3, #22
 802a02a:	d402      	bmi.n	802a032 <_fflush_r+0x3a>
 802a02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a02e:	f7ff f8ec 	bl	802920a <__retarget_lock_acquire_recursive>
 802a032:	4628      	mov	r0, r5
 802a034:	4621      	mov	r1, r4
 802a036:	f7ff ff59 	bl	8029eec <__sflush_r>
 802a03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a03c:	07da      	lsls	r2, r3, #31
 802a03e:	4605      	mov	r5, r0
 802a040:	d4e0      	bmi.n	802a004 <_fflush_r+0xc>
 802a042:	89a3      	ldrh	r3, [r4, #12]
 802a044:	059b      	lsls	r3, r3, #22
 802a046:	d4dd      	bmi.n	802a004 <_fflush_r+0xc>
 802a048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a04a:	f7ff f8e0 	bl	802920e <__retarget_lock_release_recursive>
 802a04e:	e7d9      	b.n	802a004 <_fflush_r+0xc>
 802a050:	4b05      	ldr	r3, [pc, #20]	; (802a068 <_fflush_r+0x70>)
 802a052:	429c      	cmp	r4, r3
 802a054:	d101      	bne.n	802a05a <_fflush_r+0x62>
 802a056:	68ac      	ldr	r4, [r5, #8]
 802a058:	e7df      	b.n	802a01a <_fflush_r+0x22>
 802a05a:	4b04      	ldr	r3, [pc, #16]	; (802a06c <_fflush_r+0x74>)
 802a05c:	429c      	cmp	r4, r3
 802a05e:	bf08      	it	eq
 802a060:	68ec      	ldreq	r4, [r5, #12]
 802a062:	e7da      	b.n	802a01a <_fflush_r+0x22>
 802a064:	0802f06c 	.word	0x0802f06c
 802a068:	0802f08c 	.word	0x0802f08c
 802a06c:	0802f04c 	.word	0x0802f04c

0802a070 <_lseek_r>:
 802a070:	b538      	push	{r3, r4, r5, lr}
 802a072:	4d07      	ldr	r5, [pc, #28]	; (802a090 <_lseek_r+0x20>)
 802a074:	4604      	mov	r4, r0
 802a076:	4608      	mov	r0, r1
 802a078:	4611      	mov	r1, r2
 802a07a:	2200      	movs	r2, #0
 802a07c:	602a      	str	r2, [r5, #0]
 802a07e:	461a      	mov	r2, r3
 802a080:	f7d7 fc74 	bl	800196c <_lseek>
 802a084:	1c43      	adds	r3, r0, #1
 802a086:	d102      	bne.n	802a08e <_lseek_r+0x1e>
 802a088:	682b      	ldr	r3, [r5, #0]
 802a08a:	b103      	cbz	r3, 802a08e <_lseek_r+0x1e>
 802a08c:	6023      	str	r3, [r4, #0]
 802a08e:	bd38      	pop	{r3, r4, r5, pc}
 802a090:	200154e4 	.word	0x200154e4

0802a094 <__swhatbuf_r>:
 802a094:	b570      	push	{r4, r5, r6, lr}
 802a096:	460e      	mov	r6, r1
 802a098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a09c:	2900      	cmp	r1, #0
 802a09e:	b096      	sub	sp, #88	; 0x58
 802a0a0:	4614      	mov	r4, r2
 802a0a2:	461d      	mov	r5, r3
 802a0a4:	da08      	bge.n	802a0b8 <__swhatbuf_r+0x24>
 802a0a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a0aa:	2200      	movs	r2, #0
 802a0ac:	602a      	str	r2, [r5, #0]
 802a0ae:	061a      	lsls	r2, r3, #24
 802a0b0:	d410      	bmi.n	802a0d4 <__swhatbuf_r+0x40>
 802a0b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a0b6:	e00e      	b.n	802a0d6 <__swhatbuf_r+0x42>
 802a0b8:	466a      	mov	r2, sp
 802a0ba:	f000 fa13 	bl	802a4e4 <_fstat_r>
 802a0be:	2800      	cmp	r0, #0
 802a0c0:	dbf1      	blt.n	802a0a6 <__swhatbuf_r+0x12>
 802a0c2:	9a01      	ldr	r2, [sp, #4]
 802a0c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a0c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a0cc:	425a      	negs	r2, r3
 802a0ce:	415a      	adcs	r2, r3
 802a0d0:	602a      	str	r2, [r5, #0]
 802a0d2:	e7ee      	b.n	802a0b2 <__swhatbuf_r+0x1e>
 802a0d4:	2340      	movs	r3, #64	; 0x40
 802a0d6:	2000      	movs	r0, #0
 802a0d8:	6023      	str	r3, [r4, #0]
 802a0da:	b016      	add	sp, #88	; 0x58
 802a0dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a0e0 <__smakebuf_r>:
 802a0e0:	898b      	ldrh	r3, [r1, #12]
 802a0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a0e4:	079d      	lsls	r5, r3, #30
 802a0e6:	4606      	mov	r6, r0
 802a0e8:	460c      	mov	r4, r1
 802a0ea:	d507      	bpl.n	802a0fc <__smakebuf_r+0x1c>
 802a0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a0f0:	6023      	str	r3, [r4, #0]
 802a0f2:	6123      	str	r3, [r4, #16]
 802a0f4:	2301      	movs	r3, #1
 802a0f6:	6163      	str	r3, [r4, #20]
 802a0f8:	b002      	add	sp, #8
 802a0fa:	bd70      	pop	{r4, r5, r6, pc}
 802a0fc:	ab01      	add	r3, sp, #4
 802a0fe:	466a      	mov	r2, sp
 802a100:	f7ff ffc8 	bl	802a094 <__swhatbuf_r>
 802a104:	9900      	ldr	r1, [sp, #0]
 802a106:	4605      	mov	r5, r0
 802a108:	4630      	mov	r0, r6
 802a10a:	f7ff f913 	bl	8029334 <_malloc_r>
 802a10e:	b948      	cbnz	r0, 802a124 <__smakebuf_r+0x44>
 802a110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a114:	059a      	lsls	r2, r3, #22
 802a116:	d4ef      	bmi.n	802a0f8 <__smakebuf_r+0x18>
 802a118:	f023 0303 	bic.w	r3, r3, #3
 802a11c:	f043 0302 	orr.w	r3, r3, #2
 802a120:	81a3      	strh	r3, [r4, #12]
 802a122:	e7e3      	b.n	802a0ec <__smakebuf_r+0xc>
 802a124:	4b0d      	ldr	r3, [pc, #52]	; (802a15c <__smakebuf_r+0x7c>)
 802a126:	62b3      	str	r3, [r6, #40]	; 0x28
 802a128:	89a3      	ldrh	r3, [r4, #12]
 802a12a:	6020      	str	r0, [r4, #0]
 802a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a130:	81a3      	strh	r3, [r4, #12]
 802a132:	9b00      	ldr	r3, [sp, #0]
 802a134:	6163      	str	r3, [r4, #20]
 802a136:	9b01      	ldr	r3, [sp, #4]
 802a138:	6120      	str	r0, [r4, #16]
 802a13a:	b15b      	cbz	r3, 802a154 <__smakebuf_r+0x74>
 802a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a140:	4630      	mov	r0, r6
 802a142:	f000 f9e1 	bl	802a508 <_isatty_r>
 802a146:	b128      	cbz	r0, 802a154 <__smakebuf_r+0x74>
 802a148:	89a3      	ldrh	r3, [r4, #12]
 802a14a:	f023 0303 	bic.w	r3, r3, #3
 802a14e:	f043 0301 	orr.w	r3, r3, #1
 802a152:	81a3      	strh	r3, [r4, #12]
 802a154:	89a0      	ldrh	r0, [r4, #12]
 802a156:	4305      	orrs	r5, r0
 802a158:	81a5      	strh	r5, [r4, #12]
 802a15a:	e7cd      	b.n	802a0f8 <__smakebuf_r+0x18>
 802a15c:	08028ff9 	.word	0x08028ff9

0802a160 <memmove>:
 802a160:	4288      	cmp	r0, r1
 802a162:	b510      	push	{r4, lr}
 802a164:	eb01 0402 	add.w	r4, r1, r2
 802a168:	d902      	bls.n	802a170 <memmove+0x10>
 802a16a:	4284      	cmp	r4, r0
 802a16c:	4623      	mov	r3, r4
 802a16e:	d807      	bhi.n	802a180 <memmove+0x20>
 802a170:	1e43      	subs	r3, r0, #1
 802a172:	42a1      	cmp	r1, r4
 802a174:	d008      	beq.n	802a188 <memmove+0x28>
 802a176:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a17e:	e7f8      	b.n	802a172 <memmove+0x12>
 802a180:	4402      	add	r2, r0
 802a182:	4601      	mov	r1, r0
 802a184:	428a      	cmp	r2, r1
 802a186:	d100      	bne.n	802a18a <memmove+0x2a>
 802a188:	bd10      	pop	{r4, pc}
 802a18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a192:	e7f7      	b.n	802a184 <memmove+0x24>

0802a194 <__malloc_lock>:
 802a194:	4801      	ldr	r0, [pc, #4]	; (802a19c <__malloc_lock+0x8>)
 802a196:	f7ff b838 	b.w	802920a <__retarget_lock_acquire_recursive>
 802a19a:	bf00      	nop
 802a19c:	200153d1 	.word	0x200153d1

0802a1a0 <__malloc_unlock>:
 802a1a0:	4801      	ldr	r0, [pc, #4]	; (802a1a8 <__malloc_unlock+0x8>)
 802a1a2:	f7ff b834 	b.w	802920e <__retarget_lock_release_recursive>
 802a1a6:	bf00      	nop
 802a1a8:	200153d1 	.word	0x200153d1

0802a1ac <_realloc_r>:
 802a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a1b0:	4680      	mov	r8, r0
 802a1b2:	4614      	mov	r4, r2
 802a1b4:	460e      	mov	r6, r1
 802a1b6:	b921      	cbnz	r1, 802a1c2 <_realloc_r+0x16>
 802a1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a1bc:	4611      	mov	r1, r2
 802a1be:	f7ff b8b9 	b.w	8029334 <_malloc_r>
 802a1c2:	b92a      	cbnz	r2, 802a1d0 <_realloc_r+0x24>
 802a1c4:	f7ff f84a 	bl	802925c <_free_r>
 802a1c8:	4625      	mov	r5, r4
 802a1ca:	4628      	mov	r0, r5
 802a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a1d0:	f000 f9aa 	bl	802a528 <_malloc_usable_size_r>
 802a1d4:	4284      	cmp	r4, r0
 802a1d6:	4607      	mov	r7, r0
 802a1d8:	d802      	bhi.n	802a1e0 <_realloc_r+0x34>
 802a1da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a1de:	d812      	bhi.n	802a206 <_realloc_r+0x5a>
 802a1e0:	4621      	mov	r1, r4
 802a1e2:	4640      	mov	r0, r8
 802a1e4:	f7ff f8a6 	bl	8029334 <_malloc_r>
 802a1e8:	4605      	mov	r5, r0
 802a1ea:	2800      	cmp	r0, #0
 802a1ec:	d0ed      	beq.n	802a1ca <_realloc_r+0x1e>
 802a1ee:	42bc      	cmp	r4, r7
 802a1f0:	4622      	mov	r2, r4
 802a1f2:	4631      	mov	r1, r6
 802a1f4:	bf28      	it	cs
 802a1f6:	463a      	movcs	r2, r7
 802a1f8:	f7ff f81a 	bl	8029230 <memcpy>
 802a1fc:	4631      	mov	r1, r6
 802a1fe:	4640      	mov	r0, r8
 802a200:	f7ff f82c 	bl	802925c <_free_r>
 802a204:	e7e1      	b.n	802a1ca <_realloc_r+0x1e>
 802a206:	4635      	mov	r5, r6
 802a208:	e7df      	b.n	802a1ca <_realloc_r+0x1e>

0802a20a <__ssputs_r>:
 802a20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a20e:	688e      	ldr	r6, [r1, #8]
 802a210:	429e      	cmp	r6, r3
 802a212:	4682      	mov	sl, r0
 802a214:	460c      	mov	r4, r1
 802a216:	4690      	mov	r8, r2
 802a218:	461f      	mov	r7, r3
 802a21a:	d838      	bhi.n	802a28e <__ssputs_r+0x84>
 802a21c:	898a      	ldrh	r2, [r1, #12]
 802a21e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a222:	d032      	beq.n	802a28a <__ssputs_r+0x80>
 802a224:	6825      	ldr	r5, [r4, #0]
 802a226:	6909      	ldr	r1, [r1, #16]
 802a228:	eba5 0901 	sub.w	r9, r5, r1
 802a22c:	6965      	ldr	r5, [r4, #20]
 802a22e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a236:	3301      	adds	r3, #1
 802a238:	444b      	add	r3, r9
 802a23a:	106d      	asrs	r5, r5, #1
 802a23c:	429d      	cmp	r5, r3
 802a23e:	bf38      	it	cc
 802a240:	461d      	movcc	r5, r3
 802a242:	0553      	lsls	r3, r2, #21
 802a244:	d531      	bpl.n	802a2aa <__ssputs_r+0xa0>
 802a246:	4629      	mov	r1, r5
 802a248:	f7ff f874 	bl	8029334 <_malloc_r>
 802a24c:	4606      	mov	r6, r0
 802a24e:	b950      	cbnz	r0, 802a266 <__ssputs_r+0x5c>
 802a250:	230c      	movs	r3, #12
 802a252:	f8ca 3000 	str.w	r3, [sl]
 802a256:	89a3      	ldrh	r3, [r4, #12]
 802a258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a25c:	81a3      	strh	r3, [r4, #12]
 802a25e:	f04f 30ff 	mov.w	r0, #4294967295
 802a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a266:	6921      	ldr	r1, [r4, #16]
 802a268:	464a      	mov	r2, r9
 802a26a:	f7fe ffe1 	bl	8029230 <memcpy>
 802a26e:	89a3      	ldrh	r3, [r4, #12]
 802a270:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a278:	81a3      	strh	r3, [r4, #12]
 802a27a:	6126      	str	r6, [r4, #16]
 802a27c:	6165      	str	r5, [r4, #20]
 802a27e:	444e      	add	r6, r9
 802a280:	eba5 0509 	sub.w	r5, r5, r9
 802a284:	6026      	str	r6, [r4, #0]
 802a286:	60a5      	str	r5, [r4, #8]
 802a288:	463e      	mov	r6, r7
 802a28a:	42be      	cmp	r6, r7
 802a28c:	d900      	bls.n	802a290 <__ssputs_r+0x86>
 802a28e:	463e      	mov	r6, r7
 802a290:	6820      	ldr	r0, [r4, #0]
 802a292:	4632      	mov	r2, r6
 802a294:	4641      	mov	r1, r8
 802a296:	f7ff ff63 	bl	802a160 <memmove>
 802a29a:	68a3      	ldr	r3, [r4, #8]
 802a29c:	1b9b      	subs	r3, r3, r6
 802a29e:	60a3      	str	r3, [r4, #8]
 802a2a0:	6823      	ldr	r3, [r4, #0]
 802a2a2:	4433      	add	r3, r6
 802a2a4:	6023      	str	r3, [r4, #0]
 802a2a6:	2000      	movs	r0, #0
 802a2a8:	e7db      	b.n	802a262 <__ssputs_r+0x58>
 802a2aa:	462a      	mov	r2, r5
 802a2ac:	f7ff ff7e 	bl	802a1ac <_realloc_r>
 802a2b0:	4606      	mov	r6, r0
 802a2b2:	2800      	cmp	r0, #0
 802a2b4:	d1e1      	bne.n	802a27a <__ssputs_r+0x70>
 802a2b6:	6921      	ldr	r1, [r4, #16]
 802a2b8:	4650      	mov	r0, sl
 802a2ba:	f7fe ffcf 	bl	802925c <_free_r>
 802a2be:	e7c7      	b.n	802a250 <__ssputs_r+0x46>

0802a2c0 <_svfiprintf_r>:
 802a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2c4:	4698      	mov	r8, r3
 802a2c6:	898b      	ldrh	r3, [r1, #12]
 802a2c8:	061b      	lsls	r3, r3, #24
 802a2ca:	b09d      	sub	sp, #116	; 0x74
 802a2cc:	4607      	mov	r7, r0
 802a2ce:	460d      	mov	r5, r1
 802a2d0:	4614      	mov	r4, r2
 802a2d2:	d50e      	bpl.n	802a2f2 <_svfiprintf_r+0x32>
 802a2d4:	690b      	ldr	r3, [r1, #16]
 802a2d6:	b963      	cbnz	r3, 802a2f2 <_svfiprintf_r+0x32>
 802a2d8:	2140      	movs	r1, #64	; 0x40
 802a2da:	f7ff f82b 	bl	8029334 <_malloc_r>
 802a2de:	6028      	str	r0, [r5, #0]
 802a2e0:	6128      	str	r0, [r5, #16]
 802a2e2:	b920      	cbnz	r0, 802a2ee <_svfiprintf_r+0x2e>
 802a2e4:	230c      	movs	r3, #12
 802a2e6:	603b      	str	r3, [r7, #0]
 802a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 802a2ec:	e0d1      	b.n	802a492 <_svfiprintf_r+0x1d2>
 802a2ee:	2340      	movs	r3, #64	; 0x40
 802a2f0:	616b      	str	r3, [r5, #20]
 802a2f2:	2300      	movs	r3, #0
 802a2f4:	9309      	str	r3, [sp, #36]	; 0x24
 802a2f6:	2320      	movs	r3, #32
 802a2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 802a300:	2330      	movs	r3, #48	; 0x30
 802a302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802a4ac <_svfiprintf_r+0x1ec>
 802a306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a30a:	f04f 0901 	mov.w	r9, #1
 802a30e:	4623      	mov	r3, r4
 802a310:	469a      	mov	sl, r3
 802a312:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a316:	b10a      	cbz	r2, 802a31c <_svfiprintf_r+0x5c>
 802a318:	2a25      	cmp	r2, #37	; 0x25
 802a31a:	d1f9      	bne.n	802a310 <_svfiprintf_r+0x50>
 802a31c:	ebba 0b04 	subs.w	fp, sl, r4
 802a320:	d00b      	beq.n	802a33a <_svfiprintf_r+0x7a>
 802a322:	465b      	mov	r3, fp
 802a324:	4622      	mov	r2, r4
 802a326:	4629      	mov	r1, r5
 802a328:	4638      	mov	r0, r7
 802a32a:	f7ff ff6e 	bl	802a20a <__ssputs_r>
 802a32e:	3001      	adds	r0, #1
 802a330:	f000 80aa 	beq.w	802a488 <_svfiprintf_r+0x1c8>
 802a334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a336:	445a      	add	r2, fp
 802a338:	9209      	str	r2, [sp, #36]	; 0x24
 802a33a:	f89a 3000 	ldrb.w	r3, [sl]
 802a33e:	2b00      	cmp	r3, #0
 802a340:	f000 80a2 	beq.w	802a488 <_svfiprintf_r+0x1c8>
 802a344:	2300      	movs	r3, #0
 802a346:	f04f 32ff 	mov.w	r2, #4294967295
 802a34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a34e:	f10a 0a01 	add.w	sl, sl, #1
 802a352:	9304      	str	r3, [sp, #16]
 802a354:	9307      	str	r3, [sp, #28]
 802a356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a35a:	931a      	str	r3, [sp, #104]	; 0x68
 802a35c:	4654      	mov	r4, sl
 802a35e:	2205      	movs	r2, #5
 802a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a364:	4851      	ldr	r0, [pc, #324]	; (802a4ac <_svfiprintf_r+0x1ec>)
 802a366:	f7d5 ff53 	bl	8000210 <memchr>
 802a36a:	9a04      	ldr	r2, [sp, #16]
 802a36c:	b9d8      	cbnz	r0, 802a3a6 <_svfiprintf_r+0xe6>
 802a36e:	06d0      	lsls	r0, r2, #27
 802a370:	bf44      	itt	mi
 802a372:	2320      	movmi	r3, #32
 802a374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a378:	0711      	lsls	r1, r2, #28
 802a37a:	bf44      	itt	mi
 802a37c:	232b      	movmi	r3, #43	; 0x2b
 802a37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a382:	f89a 3000 	ldrb.w	r3, [sl]
 802a386:	2b2a      	cmp	r3, #42	; 0x2a
 802a388:	d015      	beq.n	802a3b6 <_svfiprintf_r+0xf6>
 802a38a:	9a07      	ldr	r2, [sp, #28]
 802a38c:	4654      	mov	r4, sl
 802a38e:	2000      	movs	r0, #0
 802a390:	f04f 0c0a 	mov.w	ip, #10
 802a394:	4621      	mov	r1, r4
 802a396:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a39a:	3b30      	subs	r3, #48	; 0x30
 802a39c:	2b09      	cmp	r3, #9
 802a39e:	d94e      	bls.n	802a43e <_svfiprintf_r+0x17e>
 802a3a0:	b1b0      	cbz	r0, 802a3d0 <_svfiprintf_r+0x110>
 802a3a2:	9207      	str	r2, [sp, #28]
 802a3a4:	e014      	b.n	802a3d0 <_svfiprintf_r+0x110>
 802a3a6:	eba0 0308 	sub.w	r3, r0, r8
 802a3aa:	fa09 f303 	lsl.w	r3, r9, r3
 802a3ae:	4313      	orrs	r3, r2
 802a3b0:	9304      	str	r3, [sp, #16]
 802a3b2:	46a2      	mov	sl, r4
 802a3b4:	e7d2      	b.n	802a35c <_svfiprintf_r+0x9c>
 802a3b6:	9b03      	ldr	r3, [sp, #12]
 802a3b8:	1d19      	adds	r1, r3, #4
 802a3ba:	681b      	ldr	r3, [r3, #0]
 802a3bc:	9103      	str	r1, [sp, #12]
 802a3be:	2b00      	cmp	r3, #0
 802a3c0:	bfbb      	ittet	lt
 802a3c2:	425b      	neglt	r3, r3
 802a3c4:	f042 0202 	orrlt.w	r2, r2, #2
 802a3c8:	9307      	strge	r3, [sp, #28]
 802a3ca:	9307      	strlt	r3, [sp, #28]
 802a3cc:	bfb8      	it	lt
 802a3ce:	9204      	strlt	r2, [sp, #16]
 802a3d0:	7823      	ldrb	r3, [r4, #0]
 802a3d2:	2b2e      	cmp	r3, #46	; 0x2e
 802a3d4:	d10c      	bne.n	802a3f0 <_svfiprintf_r+0x130>
 802a3d6:	7863      	ldrb	r3, [r4, #1]
 802a3d8:	2b2a      	cmp	r3, #42	; 0x2a
 802a3da:	d135      	bne.n	802a448 <_svfiprintf_r+0x188>
 802a3dc:	9b03      	ldr	r3, [sp, #12]
 802a3de:	1d1a      	adds	r2, r3, #4
 802a3e0:	681b      	ldr	r3, [r3, #0]
 802a3e2:	9203      	str	r2, [sp, #12]
 802a3e4:	2b00      	cmp	r3, #0
 802a3e6:	bfb8      	it	lt
 802a3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 802a3ec:	3402      	adds	r4, #2
 802a3ee:	9305      	str	r3, [sp, #20]
 802a3f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802a4bc <_svfiprintf_r+0x1fc>
 802a3f4:	7821      	ldrb	r1, [r4, #0]
 802a3f6:	2203      	movs	r2, #3
 802a3f8:	4650      	mov	r0, sl
 802a3fa:	f7d5 ff09 	bl	8000210 <memchr>
 802a3fe:	b140      	cbz	r0, 802a412 <_svfiprintf_r+0x152>
 802a400:	2340      	movs	r3, #64	; 0x40
 802a402:	eba0 000a 	sub.w	r0, r0, sl
 802a406:	fa03 f000 	lsl.w	r0, r3, r0
 802a40a:	9b04      	ldr	r3, [sp, #16]
 802a40c:	4303      	orrs	r3, r0
 802a40e:	3401      	adds	r4, #1
 802a410:	9304      	str	r3, [sp, #16]
 802a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a416:	4826      	ldr	r0, [pc, #152]	; (802a4b0 <_svfiprintf_r+0x1f0>)
 802a418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a41c:	2206      	movs	r2, #6
 802a41e:	f7d5 fef7 	bl	8000210 <memchr>
 802a422:	2800      	cmp	r0, #0
 802a424:	d038      	beq.n	802a498 <_svfiprintf_r+0x1d8>
 802a426:	4b23      	ldr	r3, [pc, #140]	; (802a4b4 <_svfiprintf_r+0x1f4>)
 802a428:	bb1b      	cbnz	r3, 802a472 <_svfiprintf_r+0x1b2>
 802a42a:	9b03      	ldr	r3, [sp, #12]
 802a42c:	3307      	adds	r3, #7
 802a42e:	f023 0307 	bic.w	r3, r3, #7
 802a432:	3308      	adds	r3, #8
 802a434:	9303      	str	r3, [sp, #12]
 802a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a438:	4433      	add	r3, r6
 802a43a:	9309      	str	r3, [sp, #36]	; 0x24
 802a43c:	e767      	b.n	802a30e <_svfiprintf_r+0x4e>
 802a43e:	fb0c 3202 	mla	r2, ip, r2, r3
 802a442:	460c      	mov	r4, r1
 802a444:	2001      	movs	r0, #1
 802a446:	e7a5      	b.n	802a394 <_svfiprintf_r+0xd4>
 802a448:	2300      	movs	r3, #0
 802a44a:	3401      	adds	r4, #1
 802a44c:	9305      	str	r3, [sp, #20]
 802a44e:	4619      	mov	r1, r3
 802a450:	f04f 0c0a 	mov.w	ip, #10
 802a454:	4620      	mov	r0, r4
 802a456:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a45a:	3a30      	subs	r2, #48	; 0x30
 802a45c:	2a09      	cmp	r2, #9
 802a45e:	d903      	bls.n	802a468 <_svfiprintf_r+0x1a8>
 802a460:	2b00      	cmp	r3, #0
 802a462:	d0c5      	beq.n	802a3f0 <_svfiprintf_r+0x130>
 802a464:	9105      	str	r1, [sp, #20]
 802a466:	e7c3      	b.n	802a3f0 <_svfiprintf_r+0x130>
 802a468:	fb0c 2101 	mla	r1, ip, r1, r2
 802a46c:	4604      	mov	r4, r0
 802a46e:	2301      	movs	r3, #1
 802a470:	e7f0      	b.n	802a454 <_svfiprintf_r+0x194>
 802a472:	ab03      	add	r3, sp, #12
 802a474:	9300      	str	r3, [sp, #0]
 802a476:	462a      	mov	r2, r5
 802a478:	4b0f      	ldr	r3, [pc, #60]	; (802a4b8 <_svfiprintf_r+0x1f8>)
 802a47a:	a904      	add	r1, sp, #16
 802a47c:	4638      	mov	r0, r7
 802a47e:	f3af 8000 	nop.w
 802a482:	1c42      	adds	r2, r0, #1
 802a484:	4606      	mov	r6, r0
 802a486:	d1d6      	bne.n	802a436 <_svfiprintf_r+0x176>
 802a488:	89ab      	ldrh	r3, [r5, #12]
 802a48a:	065b      	lsls	r3, r3, #25
 802a48c:	f53f af2c 	bmi.w	802a2e8 <_svfiprintf_r+0x28>
 802a490:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a492:	b01d      	add	sp, #116	; 0x74
 802a494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a498:	ab03      	add	r3, sp, #12
 802a49a:	9300      	str	r3, [sp, #0]
 802a49c:	462a      	mov	r2, r5
 802a49e:	4b06      	ldr	r3, [pc, #24]	; (802a4b8 <_svfiprintf_r+0x1f8>)
 802a4a0:	a904      	add	r1, sp, #16
 802a4a2:	4638      	mov	r0, r7
 802a4a4:	f7ff f982 	bl	80297ac <_printf_i>
 802a4a8:	e7eb      	b.n	802a482 <_svfiprintf_r+0x1c2>
 802a4aa:	bf00      	nop
 802a4ac:	0802f0b0 	.word	0x0802f0b0
 802a4b0:	0802f0ba 	.word	0x0802f0ba
 802a4b4:	00000000 	.word	0x00000000
 802a4b8:	0802a20b 	.word	0x0802a20b
 802a4bc:	0802f0b6 	.word	0x0802f0b6

0802a4c0 <_read_r>:
 802a4c0:	b538      	push	{r3, r4, r5, lr}
 802a4c2:	4d07      	ldr	r5, [pc, #28]	; (802a4e0 <_read_r+0x20>)
 802a4c4:	4604      	mov	r4, r0
 802a4c6:	4608      	mov	r0, r1
 802a4c8:	4611      	mov	r1, r2
 802a4ca:	2200      	movs	r2, #0
 802a4cc:	602a      	str	r2, [r5, #0]
 802a4ce:	461a      	mov	r2, r3
 802a4d0:	f7d7 fa26 	bl	8001920 <_read>
 802a4d4:	1c43      	adds	r3, r0, #1
 802a4d6:	d102      	bne.n	802a4de <_read_r+0x1e>
 802a4d8:	682b      	ldr	r3, [r5, #0]
 802a4da:	b103      	cbz	r3, 802a4de <_read_r+0x1e>
 802a4dc:	6023      	str	r3, [r4, #0]
 802a4de:	bd38      	pop	{r3, r4, r5, pc}
 802a4e0:	200154e4 	.word	0x200154e4

0802a4e4 <_fstat_r>:
 802a4e4:	b538      	push	{r3, r4, r5, lr}
 802a4e6:	4d07      	ldr	r5, [pc, #28]	; (802a504 <_fstat_r+0x20>)
 802a4e8:	2300      	movs	r3, #0
 802a4ea:	4604      	mov	r4, r0
 802a4ec:	4608      	mov	r0, r1
 802a4ee:	4611      	mov	r1, r2
 802a4f0:	602b      	str	r3, [r5, #0]
 802a4f2:	f7d7 fa34 	bl	800195e <_fstat>
 802a4f6:	1c43      	adds	r3, r0, #1
 802a4f8:	d102      	bne.n	802a500 <_fstat_r+0x1c>
 802a4fa:	682b      	ldr	r3, [r5, #0]
 802a4fc:	b103      	cbz	r3, 802a500 <_fstat_r+0x1c>
 802a4fe:	6023      	str	r3, [r4, #0]
 802a500:	bd38      	pop	{r3, r4, r5, pc}
 802a502:	bf00      	nop
 802a504:	200154e4 	.word	0x200154e4

0802a508 <_isatty_r>:
 802a508:	b538      	push	{r3, r4, r5, lr}
 802a50a:	4d06      	ldr	r5, [pc, #24]	; (802a524 <_isatty_r+0x1c>)
 802a50c:	2300      	movs	r3, #0
 802a50e:	4604      	mov	r4, r0
 802a510:	4608      	mov	r0, r1
 802a512:	602b      	str	r3, [r5, #0]
 802a514:	f7d7 fa28 	bl	8001968 <_isatty>
 802a518:	1c43      	adds	r3, r0, #1
 802a51a:	d102      	bne.n	802a522 <_isatty_r+0x1a>
 802a51c:	682b      	ldr	r3, [r5, #0]
 802a51e:	b103      	cbz	r3, 802a522 <_isatty_r+0x1a>
 802a520:	6023      	str	r3, [r4, #0]
 802a522:	bd38      	pop	{r3, r4, r5, pc}
 802a524:	200154e4 	.word	0x200154e4

0802a528 <_malloc_usable_size_r>:
 802a528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a52c:	1f18      	subs	r0, r3, #4
 802a52e:	2b00      	cmp	r3, #0
 802a530:	bfbc      	itt	lt
 802a532:	580b      	ldrlt	r3, [r1, r0]
 802a534:	18c0      	addlt	r0, r0, r3
 802a536:	4770      	bx	lr

0802a538 <_init>:
 802a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a53a:	bf00      	nop
 802a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a53e:	bc08      	pop	{r3}
 802a540:	469e      	mov	lr, r3
 802a542:	4770      	bx	lr

0802a544 <_fini>:
 802a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a546:	bf00      	nop
 802a548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a54a:	bc08      	pop	{r3}
 802a54c:	469e      	mov	lr, r3
 802a54e:	4770      	bx	lr
