
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bc60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005454  0802be30  0802be30  0003be30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000003c  08031284  08031284  00041284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080312c0  080312c0  0014e350  2**0
                  CONTENTS
  5 .ARM          00000008  080312c0  080312c0  000412c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080312c8  080312c8  0014e350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  080312c8  080312c8  000412c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080312e4  080312e4  000412e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  080312ec  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015768  20000124  08031410  00050124  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  2001588c  08031410  0005588c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0014e350  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00150000  2**2
                  ALLOC
 14 ExtFlashSection 000ec460  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00001da8  900ec460  900ec460  0014c460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000148  900ee208  900ee208  0014e208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   0011e575  00000000  00000000  0014e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001e1da  00000000  00000000  0026c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003830  00000000  00000000  0028aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00006e38  00000000  00000000  0028e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003c385  00000000  00000000  00295138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0007f790  00000000  00000000  002d14bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0012ac0b  00000000  00000000  00350c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  0047b858  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a974  00000000  00000000  0047b928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00058945  00000000  00000000  0048629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802be18 	.word	0x0802be18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802be18 	.word	0x0802be18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f009 b976 	b.w	800a0e4 <vTaskSetApplicationTaskTag>
 8000df8:	08001e31 	.word	0x08001e31

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f007 fb5c 	bl	80084bc <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f029 fe8a 	bl	802ab2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f029 fe85 	bl	802ab2c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f006 fae4 	bl	8007438 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f005 ff90 	bl	8006d94 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f006 fcbf 	bl	8007810 <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f029 fe3b 	bl	802ab2c <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f004 fec6 	bl	8005c48 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc6      	ldr	r3, [pc, #792]	; (80011d8 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f004 fedb 	bl	8005c84 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f004 fed1 	bl	8005c84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f004 febe 	bl	8005c64 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4aba      	ldr	r2, [pc, #744]	; (80011dc <main+0x33c>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f004 fddb 	bl	8005b10 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f029 fde1 	bl	802ab2c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489d      	ldr	r0, [pc, #628]	; (80011e4 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d98      	ldr	r5, [pc, #608]	; (80011e8 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e97      	ldr	r6, [pc, #604]	; (80011ec <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f005 f96d 	bl	800632c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4866      	ldr	r0, [pc, #408]	; (80011f0 <main+0x350>)
 8001058:	f005 f968 	bl	800632c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x354>)
 8001064:	f005 f962 	bl	800632c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <main+0x358>)
 800106e:	f005 f95d 	bl	800632c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <main+0x35c>)
 8001078:	f005 f958 	bl	800632c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	4859      	ldr	r0, [pc, #356]	; (80011e4 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f004 ffca 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f004 ffc1 	bl	8006020 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f004 ffb9 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f004 ffb0 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f004 ffa7 	bl	8006020 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x360>)
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f004 fdfc 	bl	8005cdc <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4948      	ldr	r1, [pc, #288]	; (8001208 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f004 fe92 	bl	8005e20 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d42      	ldr	r5, [pc, #264]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f004 ff45 	bl	8005f90 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4940      	ldr	r1, [pc, #256]	; (8001210 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f006 febb 	bl	8007ebc <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f006 fed0 	bl	8007efc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f004 fcfb 	bl	8005b58 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f006 fec3 	bl	8007efc <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f006 feb8 	bl	8007efc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f006 feaa 	bl	8007efc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d19      	ldr	r5, [pc, #100]	; (8001214 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f006 fec3 	bl	8007f3a <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <main+0x378>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011ca:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011d2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011d6:	e023      	b.n	8001220 <main+0x380>
 80011d8:	0300001b 	.word	0x0300001b
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	20000304 	.word	0x20000304
 80011f0:	40022800 	.word	0x40022800
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40021800 	.word	0x40021800
 8001200:	20000158 	.word	0x20000158
 8001204:	40023000 	.word	0x40023000
 8001208:	4002b000 	.word	0x4002b000
 800120c:	20000140 	.word	0x20000140
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200001bc 	.word	0x200001bc
 8001218:	20404768 	.word	0x20404768
 800121c:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	f005 f9ab 	bl	800657e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f005 fbca 	bl	80069c4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001234:	4d3e      	ldr	r5, [pc, #248]	; (8001330 <main+0x490>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	f005 fbeb 	bl	8006a10 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	2234      	movs	r2, #52	; 0x34
 800123c:	4621      	mov	r1, r4
 800123e:	eb0d 0002 	add.w	r0, sp, r2
 8001242:	f029 fc73 	bl	802ab2c <memset>
  hltdc.Instance = LTDC;
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <main+0x494>)
  hltdc.Init.VerticalSync = 9;
 8001248:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 800124a:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 800124c:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001252:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001254:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001262:	230b      	movs	r3, #11
 8001264:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001268:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800126c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 800126e:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001272:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800127a:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127e:	f005 fc73 	bl	8006b68 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001282:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001284:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 800128c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001290:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 8001294:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001296:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 800129a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 800129e:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a2:	2105      	movs	r1, #5
 80012a4:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012ac:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b0:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b4:	4622      	mov	r2, r4
 80012b6:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b8:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	f005 fd1f 	bl	8006cfe <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c0:	481d      	ldr	r0, [pc, #116]	; (8001338 <main+0x498>)
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <main+0x49c>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012c6:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ca:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d2:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012da:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012de:	f005 fe69 	bl	8006fb4 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012e2:	f004 fa93 	bl	800580c <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012e6:	f004 f9d7 	bl	8005698 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012ea:	205c      	movs	r0, #92	; 0x5c
 80012ec:	f004 fc98 	bl	8005c20 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f0:	f000 fb5e 	bl	80019b0 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012f4:	f000 fb88 	bl	8001a08 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80012f8:	f000 fb85 	bl	8001a06 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80012fc:	f007 f84e 	bl	800839c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <main+0x4a0>)
 8001302:	4621      	mov	r1, r4
 8001304:	480f      	ldr	r0, [pc, #60]	; (8001344 <main+0x4a4>)
 8001306:	f007 f883 	bl	8008410 <osThreadNew>
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <main+0x4a8>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <main+0x4ac>)
 800130e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001310:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <main+0x4b0>)
 8001314:	f007 f87c 	bl	8008410 <osThreadNew>
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <main+0x4b4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <main+0x4b8>)
 800131c:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131e:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <main+0x4bc>)
 8001322:	f007 f875 	bl	8008410 <osThreadNew>
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <main+0x4c0>)
 8001328:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800132a:	f007 f851 	bl	80083d0 <osKernelStart>
  while (1)
 800132e:	e7fe      	b.n	800132e <main+0x48e>
 8001330:	20000210 	.word	0x20000210
 8001334:	40016800 	.word	0x40016800
 8001338:	200002b8 	.word	0x200002b8
 800133c:	a0001000 	.word	0xa0001000
 8001340:	0802beb8 	.word	0x0802beb8
 8001344:	08000dfd 	.word	0x08000dfd
 8001348:	20000154 	.word	0x20000154
 800134c:	0802be94 	.word	0x0802be94
 8001350:	08001a0d 	.word	0x08001a0d
 8001354:	20000150 	.word	0x20000150
 8001358:	0802bedc 	.word	0x0802bedc
 800135c:	080031d5 	.word	0x080031d5
 8001360:	20000338 	.word	0x20000338

08001364 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001364:	6802      	ldr	r2, [r0, #0]
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001368:	429a      	cmp	r2, r3
 800136a:	d101      	bne.n	8001370 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800136c:	f004 bbe2 	b.w	8005b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40001000 	.word	0x40001000

08001378 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x38>)
{
 800137e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001380:	210f      	movs	r1, #15
 8001382:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ae:	f004 bbf7 	b.w	8005ba0 <HAL_NVIC_SetPriority>
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b8:	6802      	ldr	r2, [r0, #0]
{
 80013ba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_CRC_MspInit+0x28>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d10b      	bne.n	80013da <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c2:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013da:	b002      	add	sp, #8
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023000 	.word	0x40023000

080013e4 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_DMA2D_MspInit+0x3c>)
{
 80013e6:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d115      	bne.n	800141a <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ee:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013f2:	2105      	movs	r1, #5
 80013f4:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800140a:	f004 fbc9 	bl	8005ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001410:	b003      	add	sp, #12
 8001412:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001416:	f004 bbf5 	b.w	8005c04 <HAL_NVIC_EnableIRQ>
}
 800141a:	b003      	add	sp, #12
 800141c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001420:	4002b000 	.word	0x4002b000

08001424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001424:	b510      	push	{r4, lr}
 8001426:	b0a8      	sub	sp, #160	; 0xa0
 8001428:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	2214      	movs	r2, #20
 800142c:	2100      	movs	r1, #0
 800142e:	a802      	add	r0, sp, #8
 8001430:	f029 fb7c 	bl	802ab2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	2284      	movs	r2, #132	; 0x84
 8001436:	2100      	movs	r1, #0
 8001438:	a807      	add	r0, sp, #28
 800143a:	f029 fb77 	bl	802ab2c <memset>
  if(hi2c->Instance==I2C3)
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_I2C_MspInit+0x7c>)
 8001442:	429a      	cmp	r2, r3
 8001444:	d12a      	bne.n	800149c <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800144c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f006 faad 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 8001452:	b108      	cbz	r0, 8001458 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001454:	f7ff ff90 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001458:	4c12      	ldr	r4, [pc, #72]	; (80014a4 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6323      	str	r3, [r4, #48]	; 0x30
 800146a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001484:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001486:	f004 fdcb 	bl	8006020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800148c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001490:	6423      	str	r3, [r4, #64]	; 0x40
 8001492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800149c:	b028      	add	sp, #160	; 0xa0
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021c00 	.word	0x40021c00

080014ac <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014ac:	6802      	ldr	r2, [r0, #0]
{
 80014ae:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x2c>)
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d10f      	bne.n	80014d6 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c4:	f004 fe90 	bl	80061e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014d2:	f004 be89 	b.w	80061e8 <HAL_GPIO_DeInit>
}
 80014d6:	bd08      	pop	{r3, pc}
 80014d8:	40005c00 	.word	0x40005c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021c00 	.word	0x40021c00

080014e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	b0ac      	sub	sp, #176	; 0xb0
 80014e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	2214      	movs	r2, #20
 80014ec:	2100      	movs	r1, #0
 80014ee:	a806      	add	r0, sp, #24
 80014f0:	f029 fb1c 	bl	802ab2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	2284      	movs	r2, #132	; 0x84
 80014f6:	2100      	movs	r1, #0
 80014f8:	a80b      	add	r0, sp, #44	; 0x2c
 80014fa:	f029 fb17 	bl	802ab2c <memset>
  if(hltdc->Instance==LTDC)
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_LTDC_MspInit+0x140>)
 8001502:	429a      	cmp	r2, r3
 8001504:	f040 808c 	bne.w	8001620 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001508:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800150a:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800150c:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150e:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001510:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001514:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001522:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f006 fa41 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 800152a:	b108      	cbz	r0, 8001530 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 800152c:	f7ff ff24 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001536:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	a906      	add	r1, sp, #24
 800153c:	483b      	ldr	r0, [pc, #236]	; (800162c <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
 8001544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001546:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f042 0210 	orr.w	r2, r2, #16
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f002 0210 	and.w	r2, r2, #16
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001580:	9203      	str	r2, [sp, #12]
 8001582:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001592:	9204      	str	r2, [sp, #16]
 8001594:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2310      	movs	r3, #16
 80015aa:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b2:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	f004 fd34 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b8:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015bc:	a906      	add	r1, sp, #24
 80015be:	481c      	ldr	r0, [pc, #112]	; (8001630 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015ca:	f004 fd29 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ce:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015d0:	a906      	add	r1, sp, #24
 80015d2:	4818      	ldr	r0, [pc, #96]	; (8001634 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015de:	f004 fd1f 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e6:	a906      	add	r1, sp, #24
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ee:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f4:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f6:	f004 fd13 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015fa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fe:	a906      	add	r1, sp, #24
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001602:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800160c:	f004 fd08 	bl	8006020 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001610:	2058      	movs	r0, #88	; 0x58
 8001612:	4622      	mov	r2, r4
 8001614:	2105      	movs	r1, #5
 8001616:	f004 fac3 	bl	8005ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800161a:	2058      	movs	r0, #88	; 0x58
 800161c:	f004 faf2 	bl	8005c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001620:	b02c      	add	sp, #176	; 0xb0
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	40016800 	.word	0x40016800
 8001628:	40023800 	.word	0x40023800
 800162c:	40021000 	.word	0x40021000
 8001630:	40022400 	.word	0x40022400
 8001634:	40022800 	.word	0x40022800
 8001638:	40021800 	.word	0x40021800
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	2214      	movs	r2, #20
 8001642:	2100      	movs	r1, #0
{
 8001644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001648:	b08a      	sub	sp, #40	; 0x28
 800164a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	eb0d 0002 	add.w	r0, sp, r2
 8001650:	f029 fa6c 	bl	802ab2c <memset>
  if(hqspi->Instance==QUADSPI)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_QSPI_MspInit+0xc8>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d151      	bne.n	8001700 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001660:	2403      	movs	r4, #3
 8001662:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166a:	a905      	add	r1, sp, #20
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166e:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
 8001676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001678:	f002 0202 	and.w	r2, r2, #2
 800167c:	9201      	str	r2, [sp, #4]
 800167e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001682:	f042 0210 	orr.w	r2, r2, #16
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
 8001688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168a:	f002 0210 	and.w	r2, r2, #16
 800168e:	9202      	str	r2, [sp, #8]
 8001690:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	f042 0202 	orr.w	r2, r2, #2
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f002 0202 	and.w	r2, r2, #2
 80016a0:	9203      	str	r2, [sp, #12]
 80016a2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a6:	f042 0208 	orr.w	r2, r2, #8
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ba:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f004 fcaf 	bl	8006020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	a905      	add	r1, sp, #20
 80016c6:	4813      	ldr	r0, [pc, #76]	; (8001714 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016cc:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016d2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f004 fca4 	bl	8006020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	a905      	add	r1, sp, #20
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016dc:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f004 fc9b 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	a905      	add	r1, sp, #20
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f004 fc90 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001700:	b00a      	add	sp, #40	; 0x28
 8001702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001706:	bf00      	nop
 8001708:	a0001000 	.word	0xa0001000
 800170c:	40023800 	.word	0x40023800
 8001710:	40021000 	.word	0x40021000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020c00 	.word	0x40020c00

0800171c <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 800171c:	6802      	ldr	r2, [r0, #0]
{
 800171e:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x34>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d113      	bne.n	800174e <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001728:	2104      	movs	r1, #4
 800172a:	480b      	ldr	r0, [pc, #44]	; (8001758 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 800172c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001734:	f004 fd58 	bl	80061e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001738:	2144      	movs	r1, #68	; 0x44
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <HAL_QSPI_MspDeInit+0x40>)
 800173c:	f004 fd54 	bl	80061e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001740:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800174a:	f004 bd4d 	b.w	80061e8 <HAL_GPIO_DeInit>
}
 800174e:	bd08      	pop	{r3, pc}
 8001750:	a0001000 	.word	0xa0001000
 8001754:	40023800 	.word	0x40023800
 8001758:	40021000 	.word	0x40021000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020c00 	.word	0x40020c00

08001764 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001768:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800176a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_SDRAM_MspInit+0xb0>)
 800176e:	681e      	ldr	r6, [r3, #0]
 8001770:	2e00      	cmp	r6, #0
 8001772:	d14d      	bne.n	8001810 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001774:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001778:	2503      	movs	r5, #3
 800177a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800177c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a2:	f004 fc3d 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017aa:	a901      	add	r1, sp, #4
 80017ac:	481c      	ldr	r0, [pc, #112]	; (8001820 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b8:	f004 fc32 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017bc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	a901      	add	r1, sp, #4
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f004 fc27 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d6:	a901      	add	r1, sp, #4
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e4:	f004 fc1c 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e8:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ea:	a901      	add	r1, sp, #4
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f8:	f004 fc12 	bl	8006020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fc:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	a901      	add	r1, sp, #4
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001802:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f004 fc08 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001810:	b007      	add	sp, #28
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	2000033c 	.word	0x2000033c
 8001818:	40023800 	.word	0x40023800
 800181c:	40021000 	.word	0x40021000
 8001820:	40021800 	.word	0x40021800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021400 	.word	0x40021400
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40020800 	.word	0x40020800

08001834 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_InitTick+0x88>)
 8001836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001838:	f042 0210 	orr.w	r2, r2, #16
{
 800183c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001840:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001844:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001852:	f006 f88d 	bl	8007970 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001856:	9b06      	ldr	r3, [sp, #24]
 8001858:	bb4b      	cbnz	r3, 80018ae <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800185a:	f006 f879 	bl	8007950 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800185e:	4e18      	ldr	r6, [pc, #96]	; (80018c0 <HAL_InitTick+0x8c>)
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_InitTick+0x90>)
 8001862:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001864:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001868:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_InitTick+0x94>)
 800186c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001870:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001872:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8001874:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 800187e:	f006 fccd 	bl	800821c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001882:	4604      	mov	r4, r0
 8001884:	b980      	cbnz	r0, 80018a8 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001886:	4630      	mov	r0, r6
 8001888:	f006 fb70 	bl	8007f6c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800188c:	4604      	mov	r4, r0
 800188e:	b958      	cbnz	r0, 80018a8 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f004 f9b7 	bl	8005c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	2d0f      	cmp	r5, #15
 8001898:	d80d      	bhi.n	80018b6 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800189a:	4622      	mov	r2, r4
 800189c:	4629      	mov	r1, r5
 800189e:	2036      	movs	r0, #54	; 0x36
 80018a0:	f004 f97e 	bl	8005ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_InitTick+0x98>)
 80018a6:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80018a8:	4620      	mov	r0, r4
 80018aa:	b008      	add	sp, #32
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018ae:	f006 f84f 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 80018b2:	0040      	lsls	r0, r0, #1
 80018b4:	e7d3      	b.n	800185e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80018b6:	2401      	movs	r4, #1
 80018b8:	e7f6      	b.n	80018a8 <HAL_InitTick+0x74>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	20000340 	.word	0x20000340
 80018c4:	40001000 	.word	0x40001000
 80018c8:	000f4240 	.word	0x000f4240
 80018cc:	2000003c 	.word	0x2000003c

080018d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d0:	4770      	bx	lr

080018d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler>

080018d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler>

080018d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler>

080018d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler>

080018da <DebugMon_Handler>:
 80018da:	4770      	bx	lr

080018dc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <TIM6_DAC_IRQHandler+0x8>)
 80018de:	f006 bb87 	b.w	8007ff0 <HAL_TIM_IRQHandler>
 80018e2:	bf00      	nop
 80018e4:	20000340 	.word	0x20000340

080018e8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018e8:	4801      	ldr	r0, [pc, #4]	; (80018f0 <LTDC_IRQHandler+0x8>)
 80018ea:	f005 b9ab 	b.w	8006c44 <HAL_LTDC_IRQHandler>
 80018ee:	bf00      	nop
 80018f0:	20000210 	.word	0x20000210

080018f4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <DMA2D_IRQHandler+0x8>)
 80018f6:	f004 bac1 	b.w	8005e7c <HAL_DMA2D_IRQHandler>
 80018fa:	bf00      	nop
 80018fc:	2000017c 	.word	0x2000017c

08001900 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001900:	2001      	movs	r0, #1
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001906:	f028 ffbd 	bl	802a884 <__errno>
 800190a:	2316      	movs	r3, #22
 800190c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	bd08      	pop	{r3, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001916:	f028 ffb5 	bl	802a884 <__errno>
 800191a:	2316      	movs	r3, #22
 800191c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800191e:	e7fe      	b.n	800191e <_exit+0xa>

08001920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	460d      	mov	r5, r1
 8001924:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	460e      	mov	r6, r1
 8001928:	1b73      	subs	r3, r6, r5
 800192a:	429c      	cmp	r4, r3
 800192c:	dc01      	bgt.n	8001932 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800192e:	4620      	mov	r0, r4
 8001930:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001932:	f3af 8000 	nop.w
 8001936:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	e7f5      	b.n	8001928 <_read+0x8>

0800193c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	460d      	mov	r5, r1
 8001940:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	460e      	mov	r6, r1
 8001944:	1b73      	subs	r3, r6, r5
 8001946:	429c      	cmp	r4, r3
 8001948:	dc01      	bgt.n	800194e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800194a:	4620      	mov	r0, r4
 800194c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800194e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	e7f5      	b.n	8001944 <_write+0x8>

08001958 <_close>:

int _close(int file)
{
	return -1;
}
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001962:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001964:	604b      	str	r3, [r1, #4]
}
 8001966:	4770      	bx	lr

08001968 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001968:	2001      	movs	r0, #1
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800196c:	2000      	movs	r0, #0
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <_sbrk+0x30>)
{
 8001972:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001974:	6811      	ldr	r1, [r2, #0]
{
 8001976:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001978:	b909      	cbnz	r1, 800197e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <_sbrk+0x34>)
 800197c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	6810      	ldr	r0, [r2, #0]
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <_sbrk+0x38>)
 8001982:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <_sbrk+0x3c>)
 8001984:	4403      	add	r3, r0
 8001986:	1b09      	subs	r1, r1, r4
 8001988:	428b      	cmp	r3, r1
 800198a:	d906      	bls.n	800199a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800198c:	f028 ff7a 	bl	802a884 <__errno>
 8001990:	230c      	movs	r3, #12
 8001992:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001994:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001998:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800199a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800199c:	e7fc      	b.n	8001998 <_sbrk+0x28>
 800199e:	bf00      	nop
 80019a0:	2000038c 	.word	0x2000038c
 80019a4:	20015890 	.word	0x20015890
 80019a8:	20050000 	.word	0x20050000
 80019ac:	00000a00 	.word	0x00000a00

080019b0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80019b0:	4770      	bx	lr
	...

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr  r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019de:	f003 ffad 	bl	800593c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f029 f85d 	bl	802aaa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fa5b 	bl	8000ea0 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019f0:	080312ec 	.word	0x080312ec
  ldr  r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f8:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019fc:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001a00:	2001588c 	.word	0x2001588c

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>

08001a06 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a06:	4770      	bx	lr

08001a08 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001a08:	f001 b842 	b.w	8002a90 <touchgfx_init>

08001a0c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a0c:	f001 b8b0 	b.w	8002b70 <touchgfx_taskEntry>

08001a10 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001a10:	6840      	ldr	r0, [r0, #4]
    }
 8001a12:	4770      	bx	lr

08001a14 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001a14:	6041      	str	r1, [r0, #4]
    }
 8001a16:	4770      	bx	lr

08001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001a18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a1c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a24:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a2c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a30:	430a      	orrs	r2, r1
 8001a32:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	4770      	bx	lr
 8001a40:	e0001000 	.word	0xe0001000
 8001a44:	c5acce55 	.word	0xc5acce55

08001a48 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a48:	1a51      	subs	r1, r2, r1
 8001a4a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a4e:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a52:	4770      	bx	lr

08001a54 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a56:	6858      	ldr	r0, [r3, #4]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e0001000 	.word	0xe0001000

08001a60 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a60:	4770      	bx	lr

08001a62 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
 8001a66:	210c      	movs	r1, #12
 8001a68:	f028 feac 	bl	802a7c4 <_ZdlPvj>
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	bd10      	pop	{r4, pc}

08001a70 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a70:	6803      	ldr	r3, [r0, #0]
{
 8001a72:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a74:	691b      	ldr	r3, [r3, #16]
{
 8001a76:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a78:	b131      	cbz	r1, 8001a88 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a7a:	4798      	blx	r3
 8001a7c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	4418      	add	r0, r3
 8001a84:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a86:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a88:	4798      	blx	r3
 8001a8a:	60a0      	str	r0, [r4, #8]
}
 8001a8c:	e7fb      	b.n	8001a86 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a90 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a92:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a94:	4a02      	ldr	r2, [pc, #8]	; (8001aa0 <_ZN20STM32TouchController4initEv+0x10>)
 8001a96:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4718      	bx	r3
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000390 	.word	0x20000390

08001aa4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001aa4:	4770      	bx	lr

08001aa6 <_ZN20STM32TouchControllerD0Ev>:
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	f028 fe8a 	bl	802a7c4 <_ZdlPvj>
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001ab6:	4d0a      	ldr	r5, [pc, #40]	; (8001ae0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001ab8:	460c      	mov	r4, r1
    if (tsDriver)
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	b913      	cbnz	r3, 8001ac4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001abe:	2000      	movs	r0, #0
}
 8001ac0:	b003      	add	sp, #12
 8001ac2:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2070      	movs	r0, #112	; 0x70
 8001ac8:	9201      	str	r2, [sp, #4]
 8001aca:	4798      	blx	r3
 8001acc:	9901      	ldr	r1, [sp, #4]
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d0f5      	beq.n	8001abe <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	2070      	movs	r0, #112	; 0x70
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4798      	blx	r3
 8001adc:	2001      	movs	r0, #1
 8001ade:	e7ef      	b.n	8001ac0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001ae0:	20000390 	.word	0x20000390

08001ae4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ae6:	2301      	movs	r3, #1
{
 8001ae8:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001af4:	f10d 0217 	add.w	r2, sp, #23
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	460a      	mov	r2, r1
 8001afc:	4601      	mov	r1, r0
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <TS_IO_Write+0x30>)
 8001b00:	f004 fda8 	bl	8006654 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001b04:	b110      	cbz	r0, 8001b0c <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <TS_IO_Write+0x30>)
 8001b08:	f004 fd8a 	bl	8006620 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001b0c:	b007      	add	sp, #28
 8001b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b12:	bf00      	nop
 8001b14:	200001bc 	.word	0x200001bc

08001b18 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001b1a:	2300      	movs	r3, #0
{
 8001b1c:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001b22:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b26:	2301      	movs	r3, #1
 8001b28:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b2c:	f10d 0117 	add.w	r1, sp, #23
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	4601      	mov	r1, r0
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <TS_IO_Read+0x34>)
 8001b36:	f004 fe67 	bl	8006808 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b3a:	b110      	cbz	r0, 8001b42 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <TS_IO_Read+0x34>)
 8001b3e:	f004 fd6f 	bl	8006620 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b42:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b46:	b007      	add	sp, #28
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b4c:	200001bc 	.word	0x200001bc

08001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b50:	2803      	cmp	r0, #3
 8001b52:	d823      	bhi.n	8001b9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b54:	e8df f000 	tbb	[pc, r0]
 8001b58:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b6a:	f004 bbdf 	b.w	800632c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	fab2 f282 	clz	r2, r2
 8001b78:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001b7c:	e7f5      	b.n	8001b6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	0952      	lsrs	r2, r2, #5
 8001b8a:	e7f6      	b.n	8001b7a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	0952      	lsrs	r2, r2, #5
 8001b9a:	e7e6      	b.n	8001b6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000394 	.word	0x20000394
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40021800 	.word	0x40021800

08001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bb0:	2803      	cmp	r0, #3
 8001bb2:	d823      	bhi.n	8001bfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001bb4:	e8df f000 	tbb	[pc, r0]
 8001bb8:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	3a00      	subs	r2, #0
 8001bc6:	bf18      	it	ne
 8001bc8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bca:	f004 bbaf 	b.w	800632c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	3a00      	subs	r2, #0
 8001bd6:	bf18      	it	ne
 8001bd8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001bdc:	e7f5      	b.n	8001bca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	3a00      	subs	r2, #0
 8001be6:	bf18      	it	ne
 8001be8:	2201      	movne	r2, #1
 8001bea:	e7f6      	b.n	8001bda <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	3a00      	subs	r2, #0
 8001bf6:	bf18      	it	ne
 8001bf8:	2201      	movne	r2, #1
 8001bfa:	e7e6      	b.n	8001bca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000394 	.word	0x20000394
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40021800 	.word	0x40021800

08001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c10:	2803      	cmp	r0, #3
 8001c12:	d80f      	bhi.n	8001c34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001c14:	e8df f000 	tbb	[pc, r0]
 8001c18:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c20:	f004 bb89 	b.w	8006336 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c24:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c28:	e7fa      	b.n	8001c20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	e7fb      	b.n	8001c26 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c2e:	2140      	movs	r1, #64	; 0x40
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c32:	e7f5      	b.n	8001c20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40021800 	.word	0x40021800

08001c44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c44:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c46:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001c4a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001c4e:	4770      	bx	lr

08001c50 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c50:	2000      	movs	r0, #0
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c54:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c56:	3900      	subs	r1, #0
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001c5a:	bf18      	it	ne
 8001c5c:	2101      	movne	r1, #1
 8001c5e:	7019      	strb	r1, [r3, #0]
    }
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200155e7 	.word	0x200155e7

08001c68 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c68:	2000      	movs	r0, #0
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c6e:	b10b      	cbz	r3, 8001c74 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c70:	4608      	mov	r0, r1
 8001c72:	4718      	bx	r3
        }
    }
 8001c74:	4770      	bx	lr

08001c76 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c7a:	4770      	bx	lr

08001c7c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c7c:	6840      	ldr	r0, [r0, #4]
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4718      	bx	r3

08001c84 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c84:	4770      	bx	lr
	...

08001c88 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c88:	b538      	push	{r3, r4, r5, lr}
 8001c8a:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c8c:	f001 f84c 	bl	8002d28 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001c9a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001c9e:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001ca0:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001ca2:	4d06      	ldr	r5, [pc, #24]	; (8001cbc <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001ca4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff feb5 	bl	8001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001cae:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001cb0:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001cb2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	c0000000 	.word	0xc0000000
 8001cbc:	200003a4 	.word	0x200003a4

08001cc0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001cc0:	f001 b80c 	b.w	8002cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001cc4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cc4:	f001 b810 	b.w	8002ce8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001cc8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cca:	f001 f85f 	bl	8002d8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cda:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cde:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ce2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ce6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cea:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cec:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cf0:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf2:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cf6:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf8:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001cfc:	d2f9      	bcs.n	8001cf2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cfe:	3b20      	subs	r3, #32
 8001d00:	f113 0f20 	cmn.w	r3, #32
 8001d04:	d1f2      	bne.n	8001cec <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d14:	f001 b848 	b.w	8002da8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001d18 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d18:	f000 bfbc 	b.w	8002c94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d1c <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d1c:	f001 b962 	b.w	8002fe4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d20 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d20:	f001 b96a 	b.w	8002ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001d24 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d24:	f000 bfc0 	b.w	8002ca8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d28 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d2c:	f017 f9e2 	bl	80190f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	4620      	mov	r0, r4
 8001d34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d3c:	4718      	bx	r3

08001d3e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d3e:	f016 bc33 	b.w	80185a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d42 <_ZN11TouchGFXHALD0Ev>:
 8001d42:	b510      	push	{r4, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	217c      	movs	r1, #124	; 0x7c
 8001d48:	f028 fd3c 	bl	802a7c4 <_ZdlPvj>
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d50:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d54:	b11b      	cbz	r3, 8001d5e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d56:	6840      	ldr	r0, [r0, #4]
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4718      	bx	r3
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4770      	bx	lr
	...

08001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d64:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d6a:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d6c:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001d70:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d72:	428c      	cmp	r4, r1
 8001d74:	d009      	beq.n	8001d8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d76:	b93a      	cbnz	r2, 8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d78:	490a      	ldr	r1, [pc, #40]	; (8001da4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d7c:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d7e:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d80:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d82:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d84:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d86:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d88:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d0fc      	beq.n	8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d8e:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d92:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d94:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d96:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d98:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	e7f3      	b.n	8001d86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d9e:	bf00      	nop
 8001da0:	200155e0 	.word	0x200155e0
 8001da4:	200155de 	.word	0x200155de
 8001da8:	200155dc 	.word	0x200155dc

08001dac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	460d      	mov	r5, r1
 8001db0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001db2:	b935      	cbnz	r5, 8001dc2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001db6:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001dbe:	f028 fd2f 	bl	802a820 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001dc2:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001dc6:	3a00      	subs	r2, #0
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001dca:	bf18      	it	ne
 8001dcc:	2201      	movne	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001dd0:	6803      	ldr	r3, [r0, #0]
    }
 8001dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	4718      	bx	r3
 8001ddc:	0802bf40 	.word	0x0802bf40
 8001de0:	0802bf78 	.word	0x0802bf78
 8001de4:	0802bfc6 	.word	0x0802bfc6
 8001de8:	200155e6 	.word	0x200155e6

08001dec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001dec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	428b      	cmp	r3, r1
 8001df4:	d803      	bhi.n	8001dfe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d905      	bls.n	8001e0a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e00:	219e      	movs	r1, #158	; 0x9e
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e06:	f028 fd0b 	bl	802a820 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e0c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e10:	801a      	strh	r2, [r3, #0]
    }
 8001e12:	bd08      	pop	{r3, pc}
 8001e14:	200155dc 	.word	0x200155dc
 8001e18:	200155de 	.word	0x200155de
 8001e1c:	0802c00b 	.word	0x0802c00b
 8001e20:	0802c06e 	.word	0x0802c06e
 8001e24:	0802bfc6 	.word	0x0802bfc6
 8001e28:	200155e2 	.word	0x200155e2
 8001e2c:	200155e4 	.word	0x200155e4

08001e30 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e30:	4601      	mov	r1, r0
 8001e32:	b508      	push	{r3, lr}
        return instance;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <IdleTaskHook+0x14>)
 8001e36:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e38:	b101      	cbz	r1, 8001e3c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e3a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e3c:	f017 f974 	bl	8019128 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e40:	2001      	movs	r0, #1
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	200155e8 	.word	0x200155e8

08001e48 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <_GLOBAL__sub_I_instrumentation+0x14>)
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200003a4 	.word	0x200003a4
 8001e5c:	0802bf08 	.word	0x0802bf08

08001e60 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e60:	2101      	movs	r1, #1
 8001e62:	2200      	movs	r2, #0
{
 8001e64:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e66:	4608      	mov	r0, r1
 8001e68:	f006 fbde 	bl	8008628 <osSemaphoreNew>
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e6e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e70:	b928      	cbnz	r0, 8001e7e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e74:	2128      	movs	r1, #40	; 0x28
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e7a:	f028 fcd1 	bl	802a820 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2104      	movs	r1, #4
 8001e82:	2001      	movs	r0, #1
 8001e84:	f006 fc96 	bl	80087b4 <osMessageQueueNew>
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e8a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e8c:	b918      	cbnz	r0, 8001e96 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e94:	e7f0      	b.n	8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e96:	bd08      	pop	{r3, pc}
 8001e98:	200003b4 	.word	0x200003b4
 8001e9c:	0802c18c 	.word	0x0802c18c
 8001ea0:	0802c1d5 	.word	0x0802c1d5
 8001ea4:	0802c204 	.word	0x0802c204
 8001ea8:	200003b0 	.word	0x200003b0
 8001eac:	0802c263 	.word	0x0802c263

08001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	f006 bc0c 	b.w	80086d4 <osSemaphoreAcquire>
 8001ebc:	200003b4 	.word	0x200003b4

08001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ec0:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f006 bc40 	b.w	8008748 <osSemaphoreRelease>
 8001ec8:	200003b4 	.word	0x200003b4

08001ecc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f006 bbff 	b.w	80086d4 <osSemaphoreAcquire>
 8001ed6:	bf00      	nop
 8001ed8:	200003b4 	.word	0x200003b4

08001edc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001edc:	f7ff bff0 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ee0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	f006 bca9 	b.w	8008840 <osMessageQueuePut>
 8001eee:	bf00      	nop
 8001ef0:	200003b0 	.word	0x200003b0
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001efa:	2300      	movs	r3, #0
 8001efc:	4c07      	ldr	r4, [pc, #28]	; (8001f1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001efe:	a901      	add	r1, sp, #4
 8001f00:	461a      	mov	r2, r3
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f006 fcde 	bl	80088c4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	a901      	add	r1, sp, #4
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f006 fcd7 	bl	80088c4 <osMessageQueueGet>
}
 8001f16:	b002      	add	sp, #8
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003b0 	.word	0x200003b0

08001f20 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	4718      	bx	r3

08001f26 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f26:	2001      	movs	r0, #1
 8001f28:	4770      	bx	lr

08001f2a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f2a:	6803      	ldr	r3, [r0, #0]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4718      	bx	r3

08001f30 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001f32:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f36:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f4c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001f54:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f5a:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <_ZN8STM32DMA10initializeEv+0x44>)
 8001f62:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f64:	b002      	add	sp, #8
 8001f66:	4770      	bx	lr
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	2000017c 	.word	0x2000017c
 8001f70:	08001fb9 	.word	0x08001fb9
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f78:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f7c:	4770      	bx	lr
	...

08001f80 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f86:	6003      	str	r3, [r0, #0]
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f92:	f3bf 8f6f 	isb	sy
}
 8001f96:	4770      	bx	lr
 8001f98:	0802c414 	.word	0x0802c414
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4604      	mov	r4, r0
}
 8001fa4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001fa8:	f7ff ffea 	bl	8001f80 <_ZN8STM32DMAD1Ev>
 8001fac:	4620      	mov	r0, r4
 8001fae:	f028 fc09 	bl	802a7c4 <_ZdlPvj>
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	bd10      	pop	{r4, pc}
	...

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	200155e8 	.word	0x200155e8

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f017 f9dd 	bl	80193a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0802c414 	.word	0x0802c414

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f028 fbfd 	bl	802a820 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	0802c2a5 	.word	0x0802c2a5
 8002034:	0802c2c0 	.word	0x0802c2c0
 8002038:	0802c30a 	.word	0x0802c30a

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f028 fbdf 	bl	802a820 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	0802c2a5 	.word	0x0802c2a5
 8002070:	0802c367 	.word	0x0802c367
 8002074:	0802c30a 	.word	0x0802c30a

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002120:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002122:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002124:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002126:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800212c:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 800212e:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002130:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002132:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1111 	movw	r1, #273	; 0x111
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f028 fb6c 	bl	802a820 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	4002b000 	.word	0x4002b000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	0802c3b2 	.word	0x0802c3b2
 80021bc:	0802c3cc 	.word	0x0802c3cc
 80021c0:	0802c30a 	.word	0x0802c30a
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa6      	ldrh	r6, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021de:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021e2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e4:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e6:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e1      	ldr	r1, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002212:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8002214:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002216:	0a0a      	lsrs	r2, r1, #8
 8002218:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800221c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002220:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002224:	4302      	orrs	r2, r0
 8002226:	430a      	orrs	r2, r1
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800222c:	e7ed      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800222e:	bf00      	nop
 8002230:	4002b000 	.word	0x4002b000
 8002234:	00010009 	.word	0x00010009
 8002238:	00020201 	.word	0x00020201
 800223c:	00030201 	.word	0x00030201

08002240 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:

    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);

    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8002240:	6940      	ldr	r0, [r0, #20]
 8002242:	4770      	bx	lr

08002244 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:

    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002244:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002248:	4770      	bx	lr

0800224a <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800224a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800224c:	b923      	cbnz	r3, 8002258 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800224e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002250:	3800      	subs	r0, #0
 8002252:	bf18      	it	ne
 8002254:	2001      	movne	r0, #1
 8002256:	4770      	bx	lr
 8002258:	2001      	movs	r0, #1
}
 800225a:	4770      	bx	lr

0800225c <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800225c:	6880      	ldr	r0, [r0, #8]
 800225e:	4770      	bx	lr

08002260 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002260:	3004      	adds	r0, #4
{
 8002262:	b510      	push	{r4, lr}
 8002264:	460c      	mov	r4, r1
    *data = videoInfo;
 8002266:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 800226c:	bd10      	pop	{r4, pc}

0800226e <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 800226e:	4770      	bx	lr

08002270 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002270:	b508      	push	{r3, lr}
    assert(0);
 8002272:	4a03      	ldr	r2, [pc, #12]	; (8002280 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002274:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800227c:	f028 fad0 	bl	802a820 <__assert_func>
 8002280:	0802c45c 	.word	0x0802c45c
 8002284:	0802e36b 	.word	0x0802e36b
 8002288:	0802c4b7 	.word	0x0802c4b7

0800228c <_ZN20SoftwareMJPEGDecoderD0Ev>:
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	2148      	movs	r1, #72	; 0x48
 8002292:	f028 fa97 	bl	802a7c4 <_ZdlPvj>
 8002296:	4620      	mov	r0, r4
 8002298:	bd10      	pop	{r4, pc}
	...

0800229c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800229c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022a0:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80022a4:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80022a8:	4605      	mov	r5, r0
 80022aa:	460e      	mov	r6, r1
 80022ac:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d052      	beq.n	8002358 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022b2:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80022b4:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80022b6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002360 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 80022be:	f00e fca9 	bl	8010c14 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 80022c2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80022c6:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80022c8:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 80022ca:	a824      	add	r0, sp, #144	; 0x90
 80022cc:	f008 fbc3 	bl	800aa56 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80022d0:	463a      	mov	r2, r7
 80022d2:	4631      	mov	r1, r6
 80022d4:	a824      	add	r0, sp, #144	; 0x90
 80022d6:	f009 fb57 	bl	800b988 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 80022da:	2101      	movs	r1, #1
 80022dc:	a824      	add	r0, sp, #144	; 0x90
 80022de:	f008 fcc3 	bl	800ac68 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 80022e2:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 80022e4:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 80022e6:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 80022ea:	f008 fd61 	bl	800adb0 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022ee:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 80022f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022f4:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022f8:	429e      	cmp	r6, r3
 80022fa:	bf28      	it	cs
 80022fc:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002300:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002302:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002306:	bf28      	it	cs
 8002308:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800230a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 800230c:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 8002310:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002312:	429f      	cmp	r7, r3
 8002314:	d91a      	bls.n	800234c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	a901      	add	r1, sp, #4
 800231a:	a824      	add	r0, sp, #144	; 0x90
 800231c:	f008 fd91 	bl	800ae42 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 8002320:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002322:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 8002326:	4298      	cmp	r0, r3
 8002328:	d90e      	bls.n	8002348 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800232a:	7859      	ldrb	r1, [r3, #1]
 800232c:	789a      	ldrb	r2, [r3, #2]
 800232e:	00c9      	lsls	r1, r1, #3
 8002330:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002334:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002338:	430a      	orrs	r2, r1
 800233a:	f813 1b03 	ldrb.w	r1, [r3], #3
 800233e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 8002342:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 8002346:	e7ee      	b.n	8002326 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002348:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 800234a:	e7e1      	b.n	8002310 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 800234c:	a824      	add	r0, sp, #144	; 0x90
 800234e:	f008 fcad 	bl	800acac <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002352:	a824      	add	r0, sp, #144	; 0x90
 8002354:	f008 fbcc 	bl	800aaf0 <jpeg_destroy_decompress>
}
 8002358:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002360:	fffff800 	.word	0xfffff800

08002364 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8002366:	6002      	str	r2, [r0, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800236e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002372:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8002376:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800237a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800237e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8002382:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002386:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800238a:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800238e:	4770      	bx	lr
 8002390:	0802c7a8 	.word	0x0802c7a8

08002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002394:	b420      	push	{r5}
 8002396:	460d      	mov	r5, r1
 8002398:	4611      	mov	r1, r2
 800239a:	461a      	mov	r2, r3
    if (reader != 0)
 800239c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800239e:	b13b      	cbz	r3, 80023b0 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80023a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023a4:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80023a6:	4428      	add	r0, r5
}
 80023a8:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80023ac:	f029 b8b5 	b.w	802b51a <strncmp>
        src = (const char*)movieData + offset;
 80023b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023b2:	e7f8      	b.n	80023a6 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80023b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80023b6:	b510      	push	{r4, lr}
    if (reader != 0)
 80023b8:	b173      	cbz	r3, 80023d8 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80023ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 80023be:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023c0:	1853      	adds	r3, r2, r1
 80023c2:	5c52      	ldrb	r2, [r2, r1]
 80023c4:	7898      	ldrb	r0, [r3, #2]
 80023c6:	785c      	ldrb	r4, [r3, #1]
 80023c8:	0400      	lsls	r0, r0, #16
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80023d0:	4310      	orrs	r0, r2
 80023d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80023d6:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80023d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023da:	5858      	ldr	r0, [r3, r1]
 80023dc:	e7fb      	b.n	80023d6 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

080023de <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80023de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023e0:	b143      	cbz	r3, 80023f4 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80023e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023e4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80023e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023e8:	185a      	adds	r2, r3, r1
 80023ea:	5c58      	ldrb	r0, [r3, r1]
 80023ec:	7852      	ldrb	r2, [r2, #1]
 80023ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80023f2:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80023f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023f6:	5a58      	ldrh	r0, [r3, r1]
}
 80023f8:	4770      	bx	lr
	...

080023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	4604      	mov	r4, r0
    if (reader != 0)
 8002400:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002402:	460d      	mov	r5, r1
 8002404:	4616      	mov	r6, r2
    if (reader != 0)
 8002406:	b1d8      	cbz	r0, 8002440 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800240a:	4293      	cmp	r3, r2
 800240c:	d208      	bcs.n	8002420 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800240e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002416:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 800241c:	f028 fa00 	bl	802a820 <__assert_func>
        reader->seek(offset);
 8002420:	6803      	ldr	r3, [r0, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002426:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002428:	4632      	mov	r2, r6
 800242a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800242c:	6803      	ldr	r3, [r0, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4798      	blx	r3
 8002432:	b910      	cbnz	r0, 800243a <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002434:	230d      	movs	r3, #13
 8002436:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 800243a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 800243c:	6425      	str	r5, [r4, #64]	; 0x40
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002440:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002442:	4408      	add	r0, r1
 8002444:	e7fb      	b.n	800243e <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002446:	bf00      	nop
 8002448:	0802c533 	.word	0x0802c533
 800244c:	0802c4b7 	.word	0x0802c4b7
 8002450:	0802c520 	.word	0x0802c520

08002454 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002458:	6943      	ldr	r3, [r0, #20]
{
 800245a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800245c:	b92b      	cbnz	r3, 800246a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002460:	21a9      	movs	r1, #169	; 0xa9
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002464:	4823      	ldr	r0, [pc, #140]	; (80024f4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002466:	f028 f9db 	bl	802a820 <__assert_func>
    readData(currentMovieOffset, 8);
 800246a:	2208      	movs	r2, #8
 800246c:	6981      	ldr	r1, [r0, #24]
 800246e:	f7ff ffc5 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002472:	69a1      	ldr	r1, [r4, #24]
 8002474:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002476:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800247a:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800247c:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002480:	f7ff ff98 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002484:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002486:	69a1      	ldr	r1, [r4, #24]
 8002488:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800248a:	440d      	add	r5, r1
 800248c:	f105 0208 	add.w	r2, r5, #8
 8002490:	429a      	cmp	r2, r3
 8002492:	d224      	bcs.n	80024de <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002494:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002496:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002498:	2208      	movs	r2, #8
 800249a:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800249c:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80024a0:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024a2:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80024a4:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80024a6:	f7ff ffa9 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80024aa:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80024ae:	4620      	mov	r0, r4
 80024b0:	4641      	mov	r1, r8
 80024b2:	f7ff ff94 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
 80024b6:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80024b8:	f108 0104 	add.w	r1, r8, #4
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ff79 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024c2:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 80024c4:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024c6:	d1de      	bne.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024c8:	f108 0102 	add.w	r1, r8, #2
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ff86 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024d2:	42b8      	cmp	r0, r7
 80024d4:	d1d7      	bne.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	d0d5      	beq.n	8002486 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80024da:	2001      	movs	r0, #1
 80024dc:	e004      	b.n	80024e8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 80024de:	2301      	movs	r3, #1
    return false;
 80024e0:	2000      	movs	r0, #0
    frameNumber = 1;
 80024e2:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80024e4:	6a23      	ldr	r3, [r4, #32]
 80024e6:	61a3      	str	r3, [r4, #24]
}
 80024e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ec:	0802c575 	.word	0x0802c575
 80024f0:	0802c5be 	.word	0x0802c5be
 80024f4:	0802c4b7 	.word	0x0802c4b7

080024f8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	4604      	mov	r4, r0
 80024fe:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002502:	468a      	mov	sl, r1
 8002504:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002506:	6981      	ldr	r1, [r0, #24]
 8002508:	2208      	movs	r2, #8
{
 800250a:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 800250c:	f7ff ff76 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002510:	69a7      	ldr	r7, [r4, #24]
 8002512:	4620      	mov	r0, r4
 8002514:	1d39      	adds	r1, r7, #4
 8002516:	f7ff ff4d 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800251a:	f107 0108 	add.w	r1, r7, #8
 800251e:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002520:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff6a 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002528:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800252a:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 800252c:	b933      	cbnz	r3, 800253c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002530:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 8002536:	483c      	ldr	r0, [pc, #240]	; (8002628 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002538:	f028 f972 	bl	802a820 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800253c:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 800253e:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002540:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002544:	f00e fb66 	bl	8010c14 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002548:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800254c:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800254e:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002550:	a824      	add	r0, sp, #144	; 0x90
 8002552:	f008 fa80 	bl	800aa56 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002556:	4632      	mov	r2, r6
 8002558:	4639      	mov	r1, r7
 800255a:	a824      	add	r0, sp, #144	; 0x90
 800255c:	f009 fa14 	bl	800b988 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002560:	2101      	movs	r1, #1
 8002562:	a824      	add	r0, sp, #144	; 0x90
 8002564:	f008 fb80 	bl	800ac68 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002568:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 800256a:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 800256c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002570:	f008 fc1e 	bl	800adb0 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002574:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002578:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800257a:	42b3      	cmp	r3, r6
 800257c:	d205      	bcs.n	800258a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800257e:	2201      	movs	r2, #1
 8002580:	a901      	add	r1, sp, #4
 8002582:	a824      	add	r0, sp, #144	; 0x90
 8002584:	f008 fc5d 	bl	800ae42 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002588:	e7f6      	b.n	8002578 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 800258a:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800258e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002592:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8002596:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002598:	fb08 5506 	mla	r5, r8, r6, r5
 800259c:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800259e:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025a2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800262c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80025a6:	b23f      	sxth	r7, r7
 80025a8:	429f      	cmp	r7, r3
 80025aa:	bf28      	it	cs
 80025ac:	461f      	movcs	r7, r3
 80025ae:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80025b2:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80025b6:	441e      	add	r6, r3
 80025b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80025ba:	b236      	sxth	r6, r6
 80025bc:	429e      	cmp	r6, r3
 80025be:	bf28      	it	cs
 80025c0:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 80025c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80025c4:	42b3      	cmp	r3, r6
 80025c6:	d21f      	bcs.n	8002608 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	a901      	add	r1, sp, #4
 80025cc:	a824      	add	r0, sp, #144	; 0x90
 80025ce:	f008 fc38 	bl	800ae42 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 80025d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025d4:	4649      	mov	r1, r9
 80025d6:	4452      	add	r2, sl
 80025d8:	42b9      	cmp	r1, r7
 80025da:	f102 0203 	add.w	r2, r2, #3
 80025de:	d211      	bcs.n	8002604 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025e0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80025e4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80025e8:	00c0      	lsls	r0, r0, #3
 80025ea:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80025ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80025f2:	4303      	orrs	r3, r0
 80025f4:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80025f8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80025fc:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002600:	3101      	adds	r1, #1
 8002602:	e7e9      	b.n	80025d8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002604:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002606:	e7dc      	b.n	80025c2 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002608:	a824      	add	r0, sp, #144	; 0x90
 800260a:	f008 fb4f 	bl	800acac <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800260e:	a824      	add	r0, sp, #144	; 0x90
 8002610:	f008 fa6e 	bl	800aaf0 <jpeg_destroy_decompress>
}
 8002614:	2001      	movs	r0, #1
 8002616:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800261a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	0802c5f1 	.word	0x0802c5f1
 8002624:	0802c647 	.word	0x0802c647
 8002628:	0802c4b7 	.word	0x0802c4b7
 800262c:	fffff800 	.word	0xfffff800

08002630 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002630:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002632:	6803      	ldr	r3, [r0, #0]
 8002634:	bf38      	it	cc
 8002636:	2101      	movcc	r1, #1
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800263a:	b570      	push	{r4, r5, r6, lr}
 800263c:	460d      	mov	r5, r1
 800263e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002640:	4798      	blx	r3
 8002642:	42a8      	cmp	r0, r5
 8002644:	d204      	bcs.n	8002650 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	4620      	mov	r0, r4
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4798      	blx	r3
 800264e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002650:	1e6b      	subs	r3, r5, #1
 8002652:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002654:	2210      	movs	r2, #16
 8002656:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002658:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800265c:	f106 0108 	add.w	r1, r6, #8
 8002660:	f7ff fecc 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002664:	f106 0110 	add.w	r1, r6, #16
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fea3 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800266e:	6a23      	ldr	r3, [r4, #32]
 8002670:	3b04      	subs	r3, #4
 8002672:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002674:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 800267c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002680:	2100      	movs	r1, #0
{
 8002682:	4604      	mov	r4, r0
    readData(0, 72);
 8002684:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002686:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002688:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 800268c:	f7ff feb6 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002690:	69a7      	ldr	r7, [r4, #24]
 8002692:	2304      	movs	r3, #4
 8002694:	4a63      	ldr	r2, [pc, #396]	; (8002824 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002696:	4639      	mov	r1, r7
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff fe7b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800269e:	b140      	cbz	r0, 80026b2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80026a0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026a4:	21f1      	movs	r1, #241	; 0xf1
        lastError = AVI_ERROR_NOT_RIFF;
 80026a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80026aa:	4b60      	ldr	r3, [pc, #384]	; (800282c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80026ac:	4860      	ldr	r0, [pc, #384]	; (8002830 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80026ae:	f028 f8b7 	bl	802a820 <__assert_func>
    currentMovieOffset += 8;
 80026b2:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80026b6:	2304      	movs	r3, #4
 80026b8:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80026ba:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80026bc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80026be:	f7ff fe69 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026c2:	b130      	cbz	r0, 80026d2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80026c4:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80026c6:	4a58      	ldr	r2, [pc, #352]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026c8:	21f9      	movs	r1, #249	; 0xf9
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80026ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 80026ce:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80026d0:	e7ec      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 80026d2:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80026d6:	2304      	movs	r3, #4
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80026da:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80026dc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80026de:	f7ff fe59 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026e2:	4606      	mov	r6, r0
 80026e4:	b138      	cbz	r0, 80026f6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026e6:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026ea:	f44f 7180 	mov.w	r1, #256	; 0x100
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80026f4:	e7da      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026f6:	f107 0110 	add.w	r1, r7, #16
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff fe5a 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002700:	4605      	mov	r5, r0
 8002702:	b920      	cbnz	r0, 800270e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002706:	f44f 7183 	mov.w	r1, #262	; 0x106
 800270a:	4a47      	ldr	r2, [pc, #284]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800270c:	e7ce      	b.n	80026ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800270e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8002712:	2304      	movs	r3, #4
 8002714:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002716:	4620      	mov	r0, r4
 8002718:	4641      	mov	r1, r8
 800271a:	f7ff fe3b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800271e:	2800      	cmp	r0, #0
 8002720:	d04b      	beq.n	80027ba <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002722:	2306      	movs	r3, #6
 8002724:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002728:	2304      	movs	r3, #4
 800272a:	4a48      	ldr	r2, [pc, #288]	; (800284c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800272c:	f107 0118 	add.w	r1, r7, #24
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff fe2f 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002736:	2800      	cmp	r0, #0
 8002738:	d041      	beq.n	80027be <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800273a:	2307      	movs	r3, #7
 800273c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002740:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002742:	4f43      	ldr	r7, [pc, #268]	; (8002850 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002744:	220c      	movs	r2, #12
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7ff fe57 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800274e:	f105 0608 	add.w	r6, r5, #8
 8002752:	2304      	movs	r3, #4
 8002754:	463a      	mov	r2, r7
 8002756:	4620      	mov	r0, r4
 8002758:	4631      	mov	r1, r6
 800275a:	f7ff fe1b 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800275e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002762:	2800      	cmp	r0, #0
 8002764:	d04a      	beq.n	80027fc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d14a      	bne.n	8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800276a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800276c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800276e:	42ab      	cmp	r3, r5
 8002770:	d84a      	bhi.n	8002808 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002772:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002776:	1d29      	adds	r1, r5, #4
 8002778:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800277a:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800277c:	9101      	str	r1, [sp, #4]
 800277e:	f7ff fe19 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002782:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002784:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002786:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fe13 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800278e:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002790:	2204      	movs	r2, #4
 8002792:	4620      	mov	r0, r4
 8002794:	4631      	mov	r1, r6
 8002796:	f7ff fe31 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800279a:	2304      	movs	r3, #4
 800279c:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800279e:	4631      	mov	r1, r6
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fdf7 	bl	8002394 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d139      	bne.n	800281e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 80027aa:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80027ac:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80027ae:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80027b0:	69a3      	ldr	r3, [r4, #24]
 80027b2:	6223      	str	r3, [r4, #32]
}
 80027b4:	b002      	add	sp, #8
 80027b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80027ba:	2601      	movs	r6, #1
 80027bc:	e7b4      	b.n	8002728 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d0be      	beq.n	8002740 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80027c2:	f107 0120 	add.w	r1, r7, #32
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff fdf4 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80027d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80027d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d8:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fdea 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80027e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80027e4:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fde4 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80027ec:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80027f0:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fdde 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027f8:	6120      	str	r0, [r4, #16]
 80027fa:	e7a1      	b.n	8002740 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0b8      	beq.n	8002772 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002800:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002806:	e7d5      	b.n	80027b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fdd3 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800280e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002810:	220c      	movs	r2, #12
        listOffset += listSize;
 8002812:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7ff fdf0 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800281c:	e797      	b.n	800274e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800281e:	230b      	movs	r3, #11
 8002820:	e7ef      	b.n	8002802 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002822:	bf00      	nop
 8002824:	0802c6a1 	.word	0x0802c6a1
 8002828:	0802c6bf 	.word	0x0802c6bf
 800282c:	0802c6a6 	.word	0x0802c6a6
 8002830:	0802c4b7 	.word	0x0802c4b7
 8002834:	0802c6ec 	.word	0x0802c6ec
 8002838:	0802c6f1 	.word	0x0802c6f1
 800283c:	0802c709 	.word	0x0802c709
 8002840:	0802c70e 	.word	0x0802c70e
 8002844:	0802c724 	.word	0x0802c724
 8002848:	0802c730 	.word	0x0802c730
 800284c:	0802c735 	.word	0x0802c735
 8002850:	0802c73a 	.word	0x0802c73a
 8002854:	0802c73f 	.word	0x0802c73f

08002858 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002858:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800285c:	2200      	movs	r2, #0
 800285e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002860:	f7ff bf0c 	b.w	800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002864 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002864:	b510      	push	{r4, lr}
    movieData = 0;
 8002866:	2300      	movs	r3, #0
{
 8002868:	4604      	mov	r4, r0
 800286a:	4608      	mov	r0, r1
    movieData = 0;
 800286c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800286e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002870:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4798      	blx	r3
 8002876:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002878:	4620      	mov	r0, r4
}
 800287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800287e:	f7ff befd 	b.w	800267c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002882 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002882:	b4f0      	push	{r4, r5, r6, r7}
 8002884:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002888:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 800288c:	b12a      	cbz	r2, 800289a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800288e:	b123      	cbz	r3, 800289a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002890:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002894:	bcf0      	pop	{r4, r5, r6, r7}
 8002896:	f7ff bd01 	b.w	800229c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 800289a:	bcf0      	pop	{r4, r5, r6, r7}
 800289c:	4770      	bx	lr
	...

080028a0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80028a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028a6:	6943      	ldr	r3, [r0, #20]
{
 80028a8:	4604      	mov	r4, r0
 80028aa:	460f      	mov	r7, r1
 80028ac:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028ae:	b92b      	cbnz	r3, 80028bc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80028b2:	2176      	movs	r1, #118	; 0x76
 80028b4:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80028b6:	482b      	ldr	r0, [pc, #172]	; (8002964 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80028b8:	f027 ffb2 	bl	802a820 <__assert_func>
    readData(currentMovieOffset, 8);
 80028bc:	2208      	movs	r2, #8
 80028be:	6981      	ldr	r1, [r0, #24]
 80028c0:	f7ff fd9c 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 80028c4:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f106 0a08 	add.w	sl, r6, #8
 80028cc:	1d31      	adds	r1, r6, #4
 80028ce:	f7ff fd71 	bl	80023b4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028d4:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80028d8:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d231      	bcs.n	8002942 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 80028de:	4631      	mov	r1, r6
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fd7c 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028e6:	f243 0330 	movw	r3, #12336	; 0x3030
 80028ea:	4298      	cmp	r0, r3
 80028ec:	d11d      	bne.n	800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80028ee:	1cb1      	adds	r1, r6, #2
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fd74 	bl	80023de <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028f6:	f246 3364 	movw	r3, #25444	; 0x6364
 80028fa:	4298      	cmp	r0, r3
 80028fc:	d115      	bne.n	800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80028fe:	b1a5      	cbz	r5, 800292a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002900:	462a      	mov	r2, r5
 8002902:	4651      	mov	r1, sl
 8002904:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002906:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800290a:	f7ff fd77 	bl	80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800290e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002910:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002912:	462a      	mov	r2, r5
 8002914:	4620      	mov	r0, r4
 8002916:	f8cd 8000 	str.w	r8, [sp]
 800291a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800291e:	463b      	mov	r3, r7
 8002920:	f7ff ffaf 	bl	8002882 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002924:	6963      	ldr	r3, [r4, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800292a:	69a3      	ldr	r3, [r4, #24]
 800292c:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 800292e:	b18d      	cbz	r5, 8002954 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8002930:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002932:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002934:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002936:	3301      	adds	r3, #1
 8002938:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800293c:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800293e:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002940:	d10a      	bne.n	8002958 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002942:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002944:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002946:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002948:	61a3      	str	r3, [r4, #24]
}
 800294a:	f080 0001 	eor.w	r0, r0, #1
 800294e:	b004      	add	sp, #16
 8002950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8002954:	3308      	adds	r3, #8
 8002956:	e7eb      	b.n	8002930 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002958:	2000      	movs	r0, #0
 800295a:	e7f6      	b.n	800294a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 800295c:	0802c575 	.word	0x0802c575
 8002960:	0802c744 	.word	0x0802c744
 8002964:	0802c4b7 	.word	0x0802c4b7

08002968 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002968:	2001      	movs	r0, #1
 800296a:	4770      	bx	lr

0800296c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800296c:	200c      	movs	r0, #12
 800296e:	4770      	bx	lr

08002970 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002970:	230c      	movs	r3, #12
 8002972:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002976:	3008      	adds	r0, #8
 8002978:	4770      	bx	lr

0800297a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800297a:	230c      	movs	r3, #12
 800297c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002980:	3008      	adds	r0, #8
 8002982:	4770      	bx	lr

08002984 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002984:	2001      	movs	r0, #1
 8002986:	4770      	bx	lr

08002988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002988:	f44f 60b7 	mov.w	r0, #1464	; 0x5b8
 800298c:	4770      	bx	lr

0800298e <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800298e:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
 8002992:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002996:	3008      	adds	r0, #8
 8002998:	4770      	bx	lr

0800299a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800299a:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
 800299e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029a2:	3008      	adds	r0, #8
 80029a4:	4770      	bx	lr

080029a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80029a6:	2001      	movs	r0, #1
 80029a8:	4770      	bx	lr

080029aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80029aa:	2010      	movs	r0, #16
 80029ac:	4770      	bx	lr

080029ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029b2:	3008      	adds	r0, #8
 80029b4:	4770      	bx	lr

080029b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029b6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029ba:	3008      	adds	r0, #8
 80029bc:	4770      	bx	lr

080029be <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenNoTransition();
 80029be:	4608      	mov	r0, r1
 80029c0:	f000 bf1e 	b.w	8003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>

080029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029c6:	b510      	push	{r4, lr}
 80029c8:	4604      	mov	r4, r0
 80029ca:	6003      	str	r3, [r0, #0]
 80029cc:	f015 f96e 	bl	8017cac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029d0:	4620      	mov	r0, r4
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	0802c850 	.word	0x0802c850

080029d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f7ff fff2 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029e0:	2114      	movs	r1, #20
 80029e2:	4620      	mov	r0, r4
 80029e4:	f027 feee 	bl	802a7c4 <_ZdlPvj>
 80029e8:	4620      	mov	r0, r4
 80029ea:	bd10      	pop	{r4, pc}

080029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029ee:	b510      	push	{r4, lr}
 80029f0:	4604      	mov	r4, r0
 80029f2:	6003      	str	r3, [r0, #0]
 80029f4:	f015 f95a 	bl	8017cac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	0802c81c 	.word	0x0802c81c

08002a00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	f7ff fff2 	bl	80029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a08:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f027 fed9 	bl	802a7c4 <_ZdlPvj>
 8002a12:	4620      	mov	r0, r4
 8002a14:	bd10      	pop	{r4, pc}
	...

08002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	6003      	str	r3, [r0, #0]
 8002a20:	f015 f944 	bl	8017cac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a24:	4620      	mov	r0, r4
 8002a26:	bd10      	pop	{r4, pc}
 8002a28:	0802c7e8 	.word	0x0802c7e8

08002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	f7ff fff2 	bl	8002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a34:	2118      	movs	r1, #24
 8002a36:	4620      	mov	r0, r4
 8002a38:	f027 fec4 	bl	802a7c4 <_ZdlPvj>
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <_ZN12FrontendHeapD1Ev+0x24>)
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
 8002a46:	6003      	str	r3, [r0, #0]
 8002a48:	f200 50ec 	addw	r0, r0, #1516	; 0x5ec
 8002a4c:	f7ff ffba 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002a54:	f7ff ffca 	bl	80029ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI12SettingsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a58:	f104 0014 	add.w	r0, r4, #20
 8002a5c:	f7ff ffdc 	bl	8002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14AboutPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a60:	4620      	mov	r0, r4
 8002a62:	bd10      	pop	{r4, pc}
 8002a64:	0802c884 	.word	0x0802c884

08002a68 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002a68:	b508      	push	{r3, lr}
 8002a6a:	4802      	ldr	r0, [pc, #8]	; (8002a74 <__tcf_0+0xc>)
 8002a6c:	f7ff ffe8 	bl	8002a40 <_ZN12FrontendHeapD1Ev>
 8002a70:	bd08      	pop	{r3, pc}
 8002a72:	bf00      	nop
 8002a74:	200003bc 	.word	0x200003bc

08002a78 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	f7ff ffe0 	bl	8002a40 <_ZN12FrontendHeapD1Ev>
 8002a80:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8002a84:	4620      	mov	r0, r4
 8002a86:	f027 fe9d 	bl	802a7c4 <_ZdlPvj>
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	bd10      	pop	{r4, pc}
	...

08002a90 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002a94:	f000 fdee 	bl	8003674 <_ZN14BitmapDatabase11getInstanceEv>
 8002a98:	2400      	movs	r4, #0
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	f000 fdee 	bl	800367c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	9400      	str	r4, [sp, #0]
 8002aaa:	f01c f875 	bl	801eb98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <touchgfx_init+0xb4>)
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002ab2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002ab4:	4d25      	ldr	r5, [pc, #148]	; (8002b4c <touchgfx_init+0xbc>)
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f002 fbc4 	bl	8005244 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002abc:	4824      	ldr	r0, [pc, #144]	; (8002b50 <touchgfx_init+0xc0>)
 8002abe:	f01b ffd3 	bl	801ea68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002ac2:	782b      	ldrb	r3, [r5, #0]
 8002ac4:	f3bf 8f5b 	dmb	ish
 8002ac8:	07db      	lsls	r3, r3, #31
 8002aca:	d435      	bmi.n	8002b38 <touchgfx_init+0xa8>
 8002acc:	4628      	mov	r0, r5
 8002ace:	f027 fe7b 	bl	802a7c8 <__cxa_guard_acquire>
 8002ad2:	b388      	cbz	r0, 8002b38 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002ad4:	4c1f      	ldr	r4, [pc, #124]	; (8002b54 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <touchgfx_init+0xc8>)
 8002ad8:	f504 66c1 	add.w	r6, r4, #1544	; 0x608
 8002adc:	f104 0014 	add.w	r0, r4, #20
 8002ae0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002ae4:	f204 57ec 	addw	r7, r4, #1516	; 0x5ec
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	6060      	str	r0, [r4, #4]
 8002aec:	f8c4 8008 	str.w	r8, [r4, #8]
 8002af0:	60e7      	str	r7, [r4, #12]
 8002af2:	6126      	str	r6, [r4, #16]
 8002af4:	f015 f8dc 	bl	8017cb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <touchgfx_init+0xcc>)
 8002afa:	4640      	mov	r0, r8
 8002afc:	6163      	str	r3, [r4, #20]
 8002afe:	f015 f8d7 	bl	8017cb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <touchgfx_init+0xd0>)
 8002b04:	4638      	mov	r0, r7
 8002b06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b08:	f015 f8d2 	bl	8017cb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <touchgfx_init+0xd4>)
 8002b0e:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
 8002b12:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
 8002b16:	f002 fca5 	bl	8005464 <_ZN5ModelC1Ev>
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	f504 61c0 	add.w	r1, r4, #1536	; 0x600
 8002b20:	4630      	mov	r0, r6
 8002b22:	f002 fc33 	bl	800538c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002b26:	4630      	mov	r0, r6
 8002b28:	f000 fe6a 	bl	8003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        static FrontendHeap instance;
 8002b2c:	480e      	ldr	r0, [pc, #56]	; (8002b68 <touchgfx_init+0xd8>)
 8002b2e:	f027 fe95 	bl	802a85c <atexit>
 8002b32:	4628      	mov	r0, r5
 8002b34:	f027 fe54 	bl	802a7e0 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <touchgfx_init+0xdc>)
}
 8002b3a:	b002      	add	sp, #8
 8002b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002b40:	f7ff b8a2 	b.w	8001c88 <_ZN11TouchGFXHAL10initializeEv>
 8002b44:	20015644 	.word	0x20015644
 8002b48:	2000193c 	.word	0x2000193c
 8002b4c:	200003b8 	.word	0x200003b8
 8002b50:	20000008 	.word	0x20000008
 8002b54:	200003bc 	.word	0x200003bc
 8002b58:	0802c884 	.word	0x0802c884
 8002b5c:	0802c7e8 	.word	0x0802c7e8
 8002b60:	0802c81c 	.word	0x0802c81c
 8002b64:	0802c850 	.word	0x0802c850
 8002b68:	08002a69 	.word	0x08002a69
 8002b6c:	200018c0 	.word	0x200018c0

08002b70 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002b70:	4801      	ldr	r0, [pc, #4]	; (8002b78 <touchgfx_taskEntry+0x8>)
 8002b72:	f015 bd80 	b.w	8018676 <_ZN8touchgfx3HAL9taskEntryEv>
 8002b76:	bf00      	nop
 8002b78:	200018c0 	.word	0x200018c0

08002b7c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002b7c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002b7e:	4e23      	ldr	r6, [pc, #140]	; (8002c0c <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002b82:	4c24      	ldr	r4, [pc, #144]	; (8002c14 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002b84:	4630      	mov	r0, r6
static LCD16bpp display;
 8002b86:	4d24      	ldr	r5, [pc, #144]	; (8002c18 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002b88:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002b8a:	f7ff fa1d 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f01f f90e 	bl	8021db0 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b9c:	4820      	ldr	r0, [pc, #128]	; (8002c20 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002b9e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ba2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ba8:	60dc      	str	r4, [r3, #12]
 8002baa:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002bae:	491d      	ldr	r1, [pc, #116]	; (8002c24 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002bb0:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002bb4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002bb8:	6759      	str	r1, [r3, #116]	; 0x74
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002bc0:	4919      	ldr	r1, [pc, #100]	; (8002c28 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002bc2:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002bc4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002bc8:	8001      	strh	r1, [r0, #0]
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002bcc:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bce:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002bd2:	4817      	ldr	r0, [pc, #92]	; (8002c30 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002bd4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002bd8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002bdc:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002be0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002be4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002be8:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002bec:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002bf0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002bf4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bf8:	8001      	strh	r1, [r0, #0]
 8002bfa:	480e      	ldr	r0, [pc, #56]	; (8002c34 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c00:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002c04:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002c06:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	20000b20 	.word	0x20000b20
 8002c10:	0802bf30 	.word	0x0802bf30
 8002c14:	20000b1c 	.word	0x20000b1c
 8002c18:	20001940 	.word	0x20001940
 8002c1c:	200018c0 	.word	0x200018c0
 8002c20:	200155dc 	.word	0x200155dc
 8002c24:	01000001 	.word	0x01000001
 8002c28:	200155e8 	.word	0x200155e8
 8002c2c:	200155e2 	.word	0x200155e2
 8002c30:	200155de 	.word	0x200155de
 8002c34:	200155e4 	.word	0x200155e4
 8002c38:	200155e0 	.word	0x200155e0
 8002c3c:	0802c0bc 	.word	0x0802c0bc

08002c40 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002c42:	f7ff b99d 	b.w	8001f80 <_ZN8STM32DMAD1Ev>
 8002c46:	bf00      	nop
 8002c48:	20000b20 	.word	0x20000b20

08002c4c <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c4c:	4910      	ldr	r1, [pc, #64]	; (8002c90 <SCB_CleanInvalidateDCache+0x44>)
 8002c4e:	2300      	movs	r3, #0
{
 8002c50:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c56:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c5a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c5e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c62:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c66:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002c6a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c6c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c70:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c72:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002c76:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c78:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002c7c:	d2f9      	bcs.n	8002c72 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002c7e:	3b20      	subs	r3, #32
 8002c80:	f113 0f20 	cmn.w	r3, #32
 8002c84:	d1f2      	bne.n	8002c6c <SCB_CleanInvalidateDCache+0x20>
 8002c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c8a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002c96:	2290      	movs	r2, #144	; 0x90
 8002c98:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002c9c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002caa:	490a      	ldr	r1, [pc, #40]	; (8002cd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002cac:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002cae:	480a      	ldr	r0, [pc, #40]	; (8002cd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002cba:	6911      	ldr	r1, [r2, #16]
 8002cbc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002cc0:	3901      	subs	r1, #1
 8002cc2:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002cc6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002cce:	4770      	bx	lr
 8002cd0:	40016800 	.word	0x40016800
 8002cd4:	200019bc 	.word	0x200019bc
 8002cd8:	200019ba 	.word	0x200019ba

08002cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002cde:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002ce2:	4770      	bx	lr
 8002ce4:	40016800 	.word	0x40016800

08002ce8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cea:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002cec:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cf2:	4770      	bx	lr
 8002cf4:	40016800 	.word	0x40016800

08002cf8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	03db      	lsls	r3, r3, #15
 8002cfe:	d501      	bpl.n	8002d04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002d00:	f7ff bfa4 	b.w	8002c4c <SCB_CleanInvalidateDCache>
    }
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002d0c:	4770      	bx	lr

08002d0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002d0e:	2338      	movs	r3, #56	; 0x38
 8002d10:	fb01 3103 	mla	r1, r1, r3, r3
 8002d14:	2300      	movs	r3, #0
 8002d16:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002d18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d1c:	b90b      	cbnz	r3, 8002d22 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d20:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002d22:	4770      	bx	lr

08002d24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002d24:	4770      	bx	lr
	...

08002d28 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4604      	mov	r4, r0
    HAL::initialize();
 8002d2c:	f015 fc91 	bl	8018652 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002d34:	f018 ffc6 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002d42:	4620      	mov	r0, r4
 8002d44:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002d4e:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002d52:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002d54:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002d5a:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002d5c:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	c007f800 	.word	0xc007f800
 8002d68:	20002188 	.word	0x20002188
 8002d6c:	20002140 	.word	0x20002140
 8002d70:	c00bf400 	.word	0xc00bf400

08002d74 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002d74:	f015 bc54 	b.w	8018620 <_ZN8touchgfx3HAL10beginFrameEv>

08002d78 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002d78:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002d7c:	b113      	cbz	r3, 8002d84 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002d7e:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002d84:	f015 bc58 	b.w	8018638 <_ZN8touchgfx3HAL8endFrameEv>
 8002d88:	200019b8 	.word	0x200019b8

08002d8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002d8c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002d8e:	f015 fc11 	bl	80185b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	03db      	lsls	r3, r3, #15
 8002d98:	d503      	bpl.n	8002da2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002d9e:	f7ff bf55 	b.w	8002c4c <SCB_CleanInvalidateDCache>
}
 8002da2:	bd08      	pop	{r3, pc}
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002da8:	f015 bd6d 	b.w	8018886 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002dac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002dac:	b510      	push	{r4, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	2158      	movs	r1, #88	; 0x58
 8002db2:	f027 fd07 	bl	802a7c4 <_ZdlPvj>
 8002db6:	4620      	mov	r0, r4
 8002db8:	bd10      	pop	{r4, pc}
	...

08002dbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002dbc:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002dbe:	b131      	cbz	r1, 8002dce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002dc2:	f240 1197 	movw	r1, #407	; 0x197
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002dca:	f027 fd29 	bl	802a820 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002dce:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002dd2:	bd08      	pop	{r3, pc}
 8002dd4:	0802c890 	.word	0x0802c890
 8002dd8:	0802c8a4 	.word	0x0802c8a4
 8002ddc:	0802ca31 	.word	0x0802ca31

08002de0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002de0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002de2:	b131      	cbz	r1, 8002df2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002de6:	f240 1191 	movw	r1, #401	; 0x191
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002dec:	4806      	ldr	r0, [pc, #24]	; (8002e08 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002dee:	f027 fd17 	bl	802a820 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002df2:	6840      	ldr	r0, [r0, #4]
 8002df4:	4611      	mov	r1, r2
 8002df6:	6803      	ldr	r3, [r0, #0]
    }
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4718      	bx	r3
 8002e00:	0802c890 	.word	0x0802c890
 8002e04:	0802ca73 	.word	0x0802ca73
 8002e08:	0802ca31 	.word	0x0802ca31

08002e0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002e0c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e0e:	b129      	cbz	r1, 8002e1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002e12:	217a      	movs	r1, #122	; 0x7a
 8002e14:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002e16:	4804      	ldr	r0, [pc, #16]	; (8002e28 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002e18:	f027 fd02 	bl	802a820 <__assert_func>
    }
 8002e1c:	6900      	ldr	r0, [r0, #16]
 8002e1e:	bd08      	pop	{r3, pc}
 8002e20:	0802c890 	.word	0x0802c890
 8002e24:	0802cc24 	.word	0x0802cc24
 8002e28:	0802ca31 	.word	0x0802ca31

08002e2c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002e2c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e2e:	b129      	cbz	r1, 8002e3c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002e32:	2183      	movs	r1, #131	; 0x83
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002e36:	4806      	ldr	r0, [pc, #24]	; (8002e50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002e38:	f027 fcf2 	bl	802a820 <__assert_func>
        stream.tickCount = 0;
 8002e3c:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002e3e:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002e40:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	0802c890 	.word	0x0802c890
 8002e4c:	0802cddc 	.word	0x0802cddc
 8002e50:	0802ca31 	.word	0x0802ca31

08002e54 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002e58:	b129      	cbz	r1, 8002e66 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002e5c:	21a4      	movs	r1, #164	; 0xa4
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002e60:	4827      	ldr	r0, [pc, #156]	; (8002f00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002e62:	f027 fcdd 	bl	802a820 <__assert_func>
        switch (cmd)
 8002e66:	2a05      	cmp	r2, #5
 8002e68:	d834      	bhi.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002e6a:	e8df f002 	tbb	[pc, r2]
 8002e6e:	2903      	.short	0x2903
 8002e70:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002e74:	6840      	ldr	r0, [r0, #4]
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4798      	blx	r3
 8002e7c:	b350      	cbz	r0, 8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e84:	f005 fb76 	bl	8008574 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002e88:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002e8a:	2201      	movs	r2, #1
                if(stream.isStopped)
 8002e8c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002e90:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002e94:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002e98:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002e9a:	6163      	str	r3, [r4, #20]
                if(stream.isStopped)
 8002e9c:	b101      	cbz	r1, 8002ea0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002e9e:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002ea4:	6263      	str	r3, [r4, #36]	; 0x24
                if(stream.nextBuffer == 0)
 8002ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ea8:	b92b      	cbnz	r3, 8002eb6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002eaa:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002eac:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002eae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002eb2:	f005 fc49 	bl	8008748 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002ebc:	f005 bb8a 	b.w	80085d4 <osMutexRelease>
            stream.isPlaying = false;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002ec6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002eca:	e003      	b.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002ecc:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002ed2:	6143      	str	r3, [r0, #20]
    }
 8002ed4:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002ed6:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002edc:	6143      	str	r3, [r0, #20]
 8002ede:	e7f2      	b.n	8002ec6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e7ed      	b.n	8002ec6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002eea:	3b00      	subs	r3, #0
 8002eec:	bf18      	it	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002ef4:	e7ee      	b.n	8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002ef6:	bf00      	nop
 8002ef8:	0802c890 	.word	0x0802c890
 8002efc:	0802cf9b 	.word	0x0802cf9b
 8002f00:	0802ca31 	.word	0x0802ca31

08002f04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002f0a:	b129      	cbz	r1, 8002f18 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002f0e:	21e7      	movs	r1, #231	; 0xe7
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002f12:	4832      	ldr	r0, [pc, #200]	; (8002fdc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002f14:	f027 fc84 	bl	802a820 <__assert_func>
        if (stream.isPlaying)
 8002f18:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f1c:	b133      	cbz	r3, 8002f2c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002f1e:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8002f26:	6943      	ldr	r3, [r0, #20]
 8002f28:	4413      	add	r3, r2
 8002f2a:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04d      	beq.n	8002fce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002f32:	69e1      	ldr	r1, [r4, #28]
 8002f34:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002f38:	4353      	muls	r3, r2
 8002f3a:	68a2      	ldr	r2, [r4, #8]
 8002f3c:	434a      	muls	r2, r1
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d220      	bcs.n	8002f84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f42:	6a23      	ldr	r3, [r4, #32]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d042      	beq.n	8002fce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f4e:	f005 fb11 	bl	8008574 <osMutexAcquire>
            if(stream.seek_to_frame > 0)
 8002f52:	6a23      	ldr	r3, [r4, #32]
 8002f54:	b10b      	cbz	r3, 8002f5a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(stream.nextBuffer != 0)
 8002f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f5c:	b9fb      	cbnz	r3, 8002f9e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8002f5e:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8002f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f62:	f005 fb37 	bl	80085d4 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8002f66:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f6a:	b90b      	cbnz	r3, 8002f70 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8002f6c:	6a23      	ldr	r3, [r4, #32]
 8002f6e:	b13b      	cbz	r3, 8002f80 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8002f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f72:	b92b      	cbnz	r3, 8002f80 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8002f74:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8002f76:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8002f78:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8002f7c:	f005 fbe4 	bl	8008748 <osSemaphoreRelease>
    }
 8002f80:	4628      	mov	r0, r5
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8002f84:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d0dd      	beq.n	8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002f92:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002f94:	bf98      	it	ls
 8002f96:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002f9a:	6262      	str	r2, [r4, #36]	; 0x24
 8002f9c:	e7d4      	b.n	8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8002f9e:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002fa0:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8002fa4:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8002fa6:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8002fa8:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8002faa:	68e2      	ldr	r2, [r4, #12]
 8002fac:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8002fae:	68a2      	ldr	r2, [r4, #8]
 8002fb0:	3201      	adds	r2, #1
 8002fb2:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002fb4:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8002fb6:	6833      	ldr	r3, [r6, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d1ce      	bne.n	8002f5e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8002fc0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1cb      	bne.n	8002f60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8002fc8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8002fcc:	e7c8      	b.n	8002f60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8002fce:	2501      	movs	r5, #1
 8002fd0:	e7c9      	b.n	8002f66 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8002fd2:	bf00      	nop
 8002fd4:	0802c890 	.word	0x0802c890
 8002fd8:	0802d172 	.word	0x0802d172
 8002fdc:	0802ca31 	.word	0x0802ca31
 8002fe0:	200155e8 	.word	0x200155e8

08002fe4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002ffa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800300e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003016:	f3bf 8f6f 	isb	sy
}
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100

08003020 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003020:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003022:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003026:	bb3b      	cbnz	r3, 8003078 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 8003028:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 800302a:	6083      	str	r3, [r0, #8]
 800302c:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 800302e:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	6143      	str	r3, [r0, #20]
 8003036:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003038:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800303c:	6183      	str	r3, [r0, #24]
 800303e:	61c3      	str	r3, [r0, #28]
 8003040:	6203      	str	r3, [r0, #32]
 8003042:	6243      	str	r3, [r0, #36]	; 0x24
 8003044:	6283      	str	r3, [r0, #40]	; 0x28
 8003046:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003048:	6303      	str	r3, [r0, #48]	; 0x30
 800304a:	6343      	str	r3, [r0, #52]	; 0x34
 800304c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003050:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003052:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003056:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800305a:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800305c:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800305e:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003060:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003062:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003066:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 800306a:	4429      	add	r1, r5
 800306c:	428c      	cmp	r4, r1
 800306e:	d90a      	bls.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003072:	2158      	movs	r1, #88	; 0x58
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003076:	e003      	b.n	8003080 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800307a:	f240 11f5 	movw	r1, #501	; 0x1f5
 800307e:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003082:	f027 fbcd 	bl	802a820 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003086:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003088:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800308c:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 800308e:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003090:	4618      	mov	r0, r3
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	0802d4d0 	.word	0x0802d4d0
 8003098:	0802d510 	.word	0x0802d510
 800309c:	0802d316 	.word	0x0802d316
 80030a0:	0802d346 	.word	0x0802d346
 80030a4:	0802ca31 	.word	0x0802ca31

080030a8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80030a8:	b510      	push	{r4, lr}
        return instance;
 80030aa:	4c14      	ldr	r4, [pc, #80]	; (80030fc <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	b323      	cbz	r3, 80030fa <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_LTDC_LineEventCallback+0x58>)
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_LTDC_LineEventCallback+0x5c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	8811      	ldrh	r1, [r2, #0]
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d113      	bne.n	80030e4 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_LTDC_LineEventCallback+0x60>)
 80030be:	8819      	ldrh	r1, [r3, #0]
 80030c0:	f003 fe4a 	bl	8006d58 <HAL_LTDC_ProgramLineEvent>
 80030c4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80030c6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80030ca:	3301      	adds	r3, #1
 80030cc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80030d0:	f7fe ff06 	bl	8001ee0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f016 f80d 	bl	80190f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80030da:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80030e0:	f7fe bd36 	b.w	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80030e4:	f003 fe38 	bl	8006d58 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80030e8:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030f0:	2000      	movs	r0, #0
    }
 80030f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030f6:	f7fe bd5b 	b.w	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	200155e8 	.word	0x200155e8
 8003100:	40016800 	.word	0x40016800
 8003104:	200019bc 	.word	0x200019bc
 8003108:	200019ba 	.word	0x200019ba

0800310c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800310c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003110:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003112:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003116:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 800311a:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800311e:	b91b      	cbnz	r3, 8003128 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8003120:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003122:	f005 fad7 	bl	80086d4 <osSemaphoreAcquire>
                continue;
 8003126:	e7f6      	b.n	8003116 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 8003128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800312a:	f005 fa23 	bl	8008574 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800312e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 8003132:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003134:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 8003136:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003138:	bf08      	it	eq
 800313a:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 800313c:	b336      	cbz	r6, 800318c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	4631      	mov	r1, r6
 8003142:	4628      	mov	r0, r5
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 800314c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003152:	f005 fa3f 	bl	80085d4 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800315c:	4639      	mov	r1, r7
 800315e:	f8cd 8000 	str.w	r8, [sp]
 8003162:	4628      	mov	r0, r5
 8003164:	695e      	ldr	r6, [r3, #20]
 8003166:	f44f 7388 	mov.w	r3, #272	; 0x110
 800316a:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003170:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003174:	f005 f9fe 	bl	8008574 <osMutexAcquire>
            if (stream.cancelDecoding)
 8003178:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800317c:	b1c3      	cbz	r3, 80031b0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 800317e:	2300      	movs	r3, #0
 8003180:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003184:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003186:	f005 fa25 	bl	80085d4 <osMutexRelease>
 800318a:	e7c4      	b.n	8003116 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 800318c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0de      	beq.n	8003150 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003192:	682b      	ldr	r3, [r5, #0]
 8003194:	4628      	mov	r0, r5
 8003196:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800319a:	4798      	blx	r3
 800319c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800319e:	4401      	add	r1, r0
 80031a0:	4628      	mov	r0, r5
 80031a2:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 80031a8:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 80031aa:	4413      	add	r3, r2
 80031ac:	60a3      	str	r3, [r4, #8]
 80031ae:	e7cf      	b.n	8003150 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 80031b0:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80031b2:	b15e      	cbz	r6, 80031cc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	4628      	mov	r0, r5
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	4798      	blx	r3
 80031bc:	3801      	subs	r0, #1
 80031be:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 80031c0:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 80031c2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 80031c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80031ca:	e7db      	b.n	8003184 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60e3      	str	r3, [r4, #12]
 80031d0:	e7f6      	b.n	80031c0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080031d4 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <videoTaskFunc+0x8>)
{
 80031d6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80031d8:	f7ff ff98 	bl	800310c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80031dc:	20002188 	.word	0x20002188

080031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80031e8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80031ea:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80031ec:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80031ee:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031f6:	f005 f9bd 	bl	8008574 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80031fa:	2138      	movs	r1, #56	; 0x38
 80031fc:	fb01 4305 	mla	r3, r1, r5, r4
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	b10a      	cbz	r2, 8003208 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 8003204:	2200      	movs	r2, #0
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
 8003208:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 800320c:	2301      	movs	r3, #1
 800320e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003212:	2300      	movs	r3, #0
 8003214:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 8003218:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800321a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 800321e:	f005 b9d9 	b.w	80085d4 <osMutexRelease>

08003222 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003222:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003224:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003228:	4604      	mov	r4, r0
 800322a:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 800322c:	4611      	mov	r1, r2
 800322e:	6858      	ldr	r0, [r3, #4]
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4798      	blx	r3
        clearState(handle);
 8003236:	4629      	mov	r1, r5
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ffd1 	bl	80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800323e:	bd38      	pop	{r3, r4, r5, pc}

08003240 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	460d      	mov	r5, r1
 8003244:	4611      	mov	r1, r2
 8003246:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003248:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800324c:	6850      	ldr	r0, [r2, #4]
 800324e:	6802      	ldr	r2, [r0, #0]
 8003250:	6896      	ldr	r6, [r2, #8]
 8003252:	461a      	mov	r2, r3
 8003254:	47b0      	blx	r6
        clearState(handle);
 8003256:	4629      	mov	r1, r5
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff ffc1 	bl	80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800325e:	bd70      	pop	{r4, r5, r6, pc}

08003260 <_GLOBAL__sub_I_lineBuffer>:
}
 8003260:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003262:	4916      	ldr	r1, [pc, #88]	; (80032bc <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 8003264:	2500      	movs	r5, #0
 8003266:	4816      	ldr	r0, [pc, #88]	; (80032c0 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003268:	f7ff f87c 	bl	8002364 <_ZN20SoftwareMJPEGDecoderC1EPh>
 800326c:	4c15      	ldr	r4, [pc, #84]	; (80032c4 <_GLOBAL__sub_I_lineBuffer+0x64>)
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003270:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003272:	462a      	mov	r2, r5
 8003274:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 8003276:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 800327c:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800327e:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 8003280:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003284:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 8003288:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 800328c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003294:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003298:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800329c:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80032a0:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80032a4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80032a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80032ac:	f005 f9bc 	bl	8008628 <osSemaphoreNew>
 80032b0:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80032b2:	4628      	mov	r0, r5
 80032b4:	f005 f91c 	bl	80084f0 <osMutexNew>
 80032b8:	6560      	str	r0, [r4, #84]	; 0x54
}
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	200019c0 	.word	0x200019c0
 80032c0:	20002140 	.word	0x20002140
 80032c4:	20002188 	.word	0x20002188
 80032c8:	0802d6c0 	.word	0x0802d6c0

080032cc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr

080032d0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80032d0:	8081      	strh	r1, [r0, #4]
    }
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80032d4:	80c1      	strh	r1, [r0, #6]
    }
 80032d6:	4770      	bx	lr

080032d8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80032d8:	8101      	strh	r1, [r0, #8]
    }
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80032dc:	8141      	strh	r1, [r0, #10]
    }
 80032de:	4770      	bx	lr

080032e0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80032e0:	4770      	bx	lr

080032e2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e2:	4770      	bx	lr

080032e4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e4:	4770      	bx	lr

080032e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80032e6:	4770      	bx	lr

080032e8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80032e8:	4770      	bx	lr

080032ea <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80032ea:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80032ec:	88c4      	ldrh	r4, [r0, #6]
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	1b12      	subs	r2, r2, r4
 80032f2:	8884      	ldrh	r4, [r0, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	1b09      	subs	r1, r1, r4
 80032f8:	b212      	sxth	r2, r2
    }
 80032fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80032fe:	b209      	sxth	r1, r1
 8003300:	4718      	bx	r3

08003302 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003306:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003312:	6010      	str	r0, [r2, #0]
    }
 8003314:	4770      	bx	lr

08003316 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003316:	4770      	bx	lr

08003318 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003318:	4770      	bx	lr

0800331a <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800331a:	4770      	bx	lr

0800331c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800331c:	4770      	bx	lr

0800331e <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800331e:	4770      	bx	lr

08003320 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003320:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003324:	b11a      	cbz	r2, 800332e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003326:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800332a:	b102      	cbz	r2, 800332e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800332c:	6018      	str	r0, [r3, #0]
        }
    }
 800332e:	4770      	bx	lr

08003330 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003330:	4770      	bx	lr

08003332 <_ZN13AboutViewBaseD1Ev>:

class AboutViewBase : public touchgfx::View<AboutPresenter>
{
public:
    AboutViewBase();
    virtual ~AboutViewBase() {}
 8003332:	4770      	bx	lr

08003334 <_ZN13AboutViewBase11setupScreenEv>:
}

void AboutViewBase::setupScreen()
{

}
 8003334:	4770      	bx	lr

08003336 <_ZN8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003336:	4770      	bx	lr

08003338 <_ZN8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 8003338:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun)(t1);
 800333a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800333c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800333e:	68c2      	ldr	r2, [r0, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	1055      	asrs	r5, r2, #1
 8003344:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003348:	07d2      	lsls	r2, r2, #31
 800334a:	bf48      	it	mi
 800334c:	5962      	ldrmi	r2, [r4, r5]
    }
 800334e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003350:	bf48      	it	mi
 8003352:	58d3      	ldrmi	r3, [r2, r3]
 8003354:	4718      	bx	r3

08003356 <_ZNK8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003356:	6843      	ldr	r3, [r0, #4]
 8003358:	b12b      	cbz	r3, 8003366 <_ZNK8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 800335a:	6883      	ldr	r3, [r0, #8]
 800335c:	b92b      	cbnz	r3, 800336a <_ZNK8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800335e:	68c0      	ldr	r0, [r0, #12]
 8003360:	f000 0001 	and.w	r0, r0, #1
 8003364:	4770      	bx	lr
 8003366:	4618      	mov	r0, r3
 8003368:	4770      	bx	lr
 800336a:	2001      	movs	r0, #1
    }
 800336c:	4770      	bx	lr

0800336e <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800336e:	b510      	push	{r4, lr}
 8003370:	4604      	mov	r4, r0
    }
 8003372:	2108      	movs	r1, #8
 8003374:	f027 fa26 	bl	802a7c4 <_ZdlPvj>
 8003378:	4620      	mov	r0, r4
 800337a:	bd10      	pop	{r4, pc}

0800337c <_ZN8touchgfx8CallbackI13AboutViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	2110      	movs	r1, #16
 8003382:	f027 fa1f 	bl	802a7c4 <_ZdlPvj>
 8003386:	4620      	mov	r0, r4
 8003388:	bd10      	pop	{r4, pc}

0800338a <_ZN13AboutViewBaseD0Ev>:
 800338a:	b510      	push	{r4, lr}
 800338c:	4604      	mov	r4, r0
 800338e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003392:	f027 fa17 	bl	802a7c4 <_ZdlPvj>
 8003396:	4620      	mov	r0, r4
 8003398:	bd10      	pop	{r4, pc}

0800339a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800339a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800339e:	b112      	cbz	r2, 80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033a0:	6803      	ldr	r3, [r0, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4718      	bx	r3
    }
 80033a6:	4770      	bx	lr

080033a8 <_ZN13AboutViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void AboutViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btnAboutHome)
 80033a8:	3098      	adds	r0, #152	; 0x98
 80033aa:	4288      	cmp	r0, r1
{
 80033ac:	b508      	push	{r3, lr}
    if (&src == &btnAboutHome)
 80033ae:	d105      	bne.n	80033bc <_ZN13AboutViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80033b0:	f018 fc88 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
        //aboutToMain
        //When btnAboutHome clicked change screen to Main
        //Go to Main with no screen transition
        application().gotoMainScreenNoTransition();
    }
}
 80033b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenNoTransition();
 80033b8:	f000 ba22 	b.w	8003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
}
 80033bc:	bd08      	pop	{r3, pc}

080033be <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80033be:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4604      	mov	r4, r0
        setX(x);
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80033c6:	4615      	mov	r5, r2
        setX(x);
 80033c8:	4798      	blx	r3
        setY(y);
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80033d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80033d6:	4718      	bx	r3

080033d8 <_ZN8touchgfx6WidgetC1Ev>:
 80033d8:	2200      	movs	r2, #0
 80033da:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80033de:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 80033e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80033e6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80033ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ee:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 80033f0:	4a01      	ldr	r2, [pc, #4]	; (80033f8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80033f2:	6002      	str	r2, [r0, #0]
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	0802d7c0 	.word	0x0802d7c0

080033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80033fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8003400:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 8003402:	4606      	mov	r6, r0
 8003404:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 8003406:	428b      	cmp	r3, r1
 8003408:	d92b      	bls.n	8003462 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b92b      	cbnz	r3, 800341c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8003412:	216c      	movs	r1, #108	; 0x6c
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003416:	4819      	ldr	r0, [pc, #100]	; (800347c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003418:	f027 fa02 	bl	802a820 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800341c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	f001 ff46 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	4601      	mov	r1, r0
 8003434:	9001      	str	r0, [sp, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	4628      	mov	r0, r5
 800343a:	4798      	blx	r3
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	4604      	mov	r4, r0
 8003440:	9901      	ldr	r1, [sp, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4628      	mov	r0, r5
 8003446:	4798      	blx	r3
 8003448:	fb14 f400 	smulbb	r4, r4, r0
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	4628      	mov	r0, r5
 8003450:	b2e4      	uxtb	r4, r4
 8003452:	9901      	ldr	r1, [sp, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	4798      	blx	r3
 8003458:	4404      	add	r4, r0
 800345a:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800345e:	b002      	add	sp, #8
 8003460:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8003468:	e7f9      	b.n	800345e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x62>
 800346a:	bf00      	nop
 800346c:	2001563c 	.word	0x2001563c
 8003470:	20015638 	.word	0x20015638
 8003474:	0802d6f4 	.word	0x0802d6f4
 8003478:	0802d736 	.word	0x0802d736
 800347c:	0802d771 	.word	0x0802d771
 8003480:	20015640 	.word	0x20015640
 8003484:	20015644 	.word	0x20015644

08003488 <_ZN13AboutViewBaseC1Ev>:
AboutViewBase::AboutViewBase() :
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	b08b      	sub	sp, #44	; 0x2c
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8003490:	2500      	movs	r5, #0
 8003492:	f019 fe51 	bl	801d138 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &AboutViewBase::buttonCallbackHandler)
 8003496:	4626      	mov	r6, r4
 8003498:	4b61      	ldr	r3, [pc, #388]	; (8003620 <_ZN13AboutViewBaseC1Ev+0x198>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800349a:	4629      	mov	r1, r5
 800349c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800349e:	2226      	movs	r2, #38	; 0x26
 80034a0:	f846 3b40 	str.w	r3, [r6], #64
 80034a4:	4630      	mov	r0, r6
 80034a6:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 80034aa:	f027 fb3f 	bl	802ab2c <memset>
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff ff92 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 80034b4:	27ff      	movs	r7, #255	; 0xff
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <_ZN13AboutViewBaseC1Ev+0x19c>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80034b8:	f64f 7aff 	movw	sl, #65535	; 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80034bc:	2226      	movs	r2, #38	; 0x26
 80034be:	4629      	mov	r1, r5
 80034c0:	6423      	str	r3, [r4, #64]	; 0x40
 80034c2:	4640      	mov	r0, r8
 80034c4:	f884 7066 	strb.w	r7, [r4, #102]	; 0x66
 80034c8:	f104 0998 	add.w	r9, r4, #152	; 0x98
        : color(col)
 80034cc:	66a5      	str	r5, [r4, #104]	; 0x68
 80034ce:	f8ad a020 	strh.w	sl, [sp, #32]
 80034d2:	f027 fb2b 	bl	802ab2c <memset>
 80034d6:	4640      	mov	r0, r8
        : typedTextId(id)
 80034d8:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8003638 <_ZN13AboutViewBaseC1Ev+0x1b0>
 80034dc:	f7ff ff7c 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 80034e0:	4b51      	ldr	r3, [pc, #324]	; (8003628 <_ZN13AboutViewBaseC1Ev+0x1a0>)
    {
        Image::setBitmap(bmp);
 80034e2:	a908      	add	r1, sp, #32
 80034e4:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 80034e6:	66e3      	str	r3, [r4, #108]	; 0x6c
 80034e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80034ec:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
 80034f0:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
 80034f4:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80034f8:	f016 fd96 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80034fc:	4648      	mov	r0, r9
 80034fe:	f016 fec5 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003502:	4629      	mov	r1, r5
 8003504:	2226      	movs	r2, #38	; 0x26
 8003506:	4638      	mov	r0, r7
 8003508:	f027 fb10 	bl	802ab2c <memset>
 800350c:	4638      	mov	r0, r7
 800350e:	f7ff ff63 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8003512:	4b46      	ldr	r3, [pc, #280]	; (800362c <_ZN13AboutViewBaseC1Ev+0x1a4>)
 8003514:	f8a4 a10c 	strh.w	sl, [r4, #268]	; 0x10c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003518:	f04f 3aff 	mov.w	sl, #4294967295
 800351c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003520:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        setXY(x, y);
 8003524:	462a      	mov	r2, r5
 8003526:	4629      	mov	r1, r5
 8003528:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800352c:	4630      	mov	r0, r6
        : pobject(pObject), pmemfun(pmemfun_1)
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <_ZN13AboutViewBaseC1Ev+0x1a8>)
        : color(col)
 8003530:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003534:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003538:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 800353c:	f8c4 b108 	str.w	fp, [r4, #264]	; 0x108
 8003540:	e9c4 344a 	strd	r3, r4, [r4, #296]	; 0x128
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <_ZN13AboutViewBaseC1Ev+0x1ac>)
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003546:	e9c4 a548 	strd	sl, r5, [r4, #288]	; 0x120
 800354a:	e9c4 354c 	strd	r3, r5, [r4, #304]	; 0x130
 800354e:	f7ff ff36 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003552:	4630      	mov	r0, r6
 8003554:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003558:	f7ff febe 	bl	80032d8 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800355c:	4630      	mov	r0, r6
 800355e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003562:	f7ff febb 	bl	80032dc <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003566:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    aboutBG.setXY(0, 0);
 800356a:	462a      	mov	r2, r5
 800356c:	4629      	mov	r1, r5
 800356e:	4640      	mov	r0, r8
 8003570:	66a3      	str	r3, [r4, #104]	; 0x68
 8003572:	f7ff ff24 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8003576:	2301      	movs	r3, #1
    aboutBG.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8003578:	a908      	add	r1, sp, #32
 800357a:	4640      	mov	r0, r8
 800357c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003580:	f016 fd52 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    btnAboutHome.setXY(0, 212);
 8003584:	4629      	mov	r1, r5
 8003586:	4648      	mov	r0, r9
 8003588:	22d4      	movs	r2, #212	; 0xd4
 800358a:	f7ff ff18 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 800358e:	2307      	movs	r3, #7
    btnAboutHome.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003590:	aa08      	add	r2, sp, #32
 8003592:	a907      	add	r1, sp, #28
 8003594:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003598:	2308      	movs	r3, #8
 800359a:	4648      	mov	r0, r9
 800359c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80035a0:	f016 fb1f 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80035a4:	230f      	movs	r3, #15
        updateTextPosition();
 80035a6:	4648      	mov	r0, r9
 80035a8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
 80035ac:	f7ff ff26 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btnAboutHome.setAction(buttonCallback);
 80035b0:	f504 7394 	add.w	r3, r4, #296	; 0x128
    aboutHeader.setXY(211, 0);
 80035b4:	462a      	mov	r2, r5
 80035b6:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80035b8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80035bc:	21d3      	movs	r1, #211	; 0xd3
        colorPressed = col;
 80035be:	e9c4 aa35 	strd	sl, sl, [r4, #212]	; 0xd4
 80035c2:	f7ff fefc 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        linespace = space;
 80035c6:	f8a4 5114 	strh.w	r5, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 80035ca:	ad02      	add	r5, sp, #8
 80035cc:	4639      	mov	r1, r7
        color = newColor;
 80035ce:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
        boundingArea = calculateBoundingArea();
 80035d2:	4628      	mov	r0, r5
 80035d4:	f016 f81a 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80035d8:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80035dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 80035e4:	230d      	movs	r3, #13
    aboutHeader.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8QF8));
 80035e6:	a908      	add	r1, sp, #32
 80035e8:	4638      	mov	r0, r7
 80035ea:	f8cd b020 	str.w	fp, [sp, #32]
 80035ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80035f2:	f016 fa9b 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80035f6:	1d20      	adds	r0, r4, #4
 80035f8:	4631      	mov	r1, r6
 80035fa:	9001      	str	r0, [sp, #4]
 80035fc:	f014 fd36 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003600:	4641      	mov	r1, r8
 8003602:	9801      	ldr	r0, [sp, #4]
 8003604:	f014 fd32 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003608:	4649      	mov	r1, r9
 800360a:	9801      	ldr	r0, [sp, #4]
 800360c:	f014 fd2e 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003610:	9801      	ldr	r0, [sp, #4]
 8003612:	4639      	mov	r1, r7
 8003614:	f014 fd2a 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003618:	4620      	mov	r0, r4
 800361a:	b00b      	add	sp, #44	; 0x2c
 800361c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003620:	0802d850 	.word	0x0802d850
 8003624:	08030bf4 	.word	0x08030bf4
 8003628:	08030d38 	.word	0x08030d38
 800362c:	08030b64 	.word	0x08030b64
 8003630:	0802d838 	.word	0x0802d838
 8003634:	080033a9 	.word	0x080033a9
 8003638:	0802d828 	.word	0x0802d828

0800363c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800363c:	4770      	bx	lr

0800363e <_ZN23ApplicationFontProviderD0Ev>:
 800363e:	b510      	push	{r4, lr}
 8003640:	4604      	mov	r4, r0
 8003642:	2104      	movs	r1, #4
 8003644:	f027 f8be 	bl	802a7c4 <_ZdlPvj>
 8003648:	4620      	mov	r0, r4
 800364a:	bd10      	pop	{r4, pc}

0800364c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800364c:	2901      	cmp	r1, #1
{
 800364e:	b508      	push	{r3, lr}
    switch (typography)
 8003650:	d006      	beq.n	8003660 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003652:	2902      	cmp	r1, #2
 8003654:	d008      	beq.n	8003668 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003656:	b959      	cbnz	r1, 8003670 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003658:	f001 fe40 	bl	80052dc <_ZN17TypedTextDatabase8getFontsEv>
 800365c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800365e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003660:	f001 fe3c 	bl	80052dc <_ZN17TypedTextDatabase8getFontsEv>
 8003664:	6840      	ldr	r0, [r0, #4]
 8003666:	e7fa      	b.n	800365e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003668:	f001 fe38 	bl	80052dc <_ZN17TypedTextDatabase8getFontsEv>
 800366c:	6880      	ldr	r0, [r0, #8]
 800366e:	e7f6      	b.n	800365e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003670:	2000      	movs	r0, #0
 8003672:	e7f4      	b.n	800365e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003674 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003674:	4800      	ldr	r0, [pc, #0]	; (8003678 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003676:	4770      	bx	lr
 8003678:	0802d890 	.word	0x0802d890

0800367c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800367c:	200f      	movs	r0, #15
 800367e:	4770      	bx	lr

08003680 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003680:	b513      	push	{r0, r1, r4, lr}
 8003682:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003684:	b151      	cbz	r1, 800369c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003686:	6803      	ldr	r3, [r0, #0]
 8003688:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800368a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800368c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003690:	689c      	ldr	r4, [r3, #8]
 8003692:	f10d 0303 	add.w	r3, sp, #3
 8003696:	47a0      	blx	r4
        return glyph;
    }
 8003698:	b002      	add	sp, #8
 800369a:	bd10      	pop	{r4, pc}
            return 0;
 800369c:	4608      	mov	r0, r1
 800369e:	e7fb      	b.n	8003698 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080036a0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80036a0:	8940      	ldrh	r0, [r0, #10]
 80036a2:	4770      	bx	lr

080036a4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80036a4:	8980      	ldrh	r0, [r0, #12]
 80036a6:	4770      	bx	lr

080036a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80036a8:	8880      	ldrh	r0, [r0, #4]
 80036aa:	4770      	bx	lr

080036ac <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80036ac:	7983      	ldrb	r3, [r0, #6]
 80036ae:	8880      	ldrh	r0, [r0, #4]
 80036b0:	4418      	add	r0, r3
    }
 80036b2:	b280      	uxth	r0, r0
 80036b4:	4770      	bx	lr

080036b6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80036b6:	79c0      	ldrb	r0, [r0, #7]
    }
 80036b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80036bc:	4770      	bx	lr

080036be <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80036be:	79c0      	ldrb	r0, [r0, #7]
    }
 80036c0:	09c0      	lsrs	r0, r0, #7
 80036c2:	4770      	bx	lr

080036c4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80036c4:	4770      	bx	lr

080036c6 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80036c6:	4770      	bx	lr

080036c8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80036c8:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80036cc:	6808      	ldr	r0, [r1, #0]
 80036ce:	6849      	ldr	r1, [r1, #4]
 80036d0:	c303      	stmia	r3!, {r0, r1}
    }
 80036d2:	4770      	bx	lr

080036d4 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80036d4:	4770      	bx	lr

080036d6 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80036d6:	4770      	bx	lr

080036d8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80036d8:	6041      	str	r1, [r0, #4]
    }
 80036da:	4770      	bx	lr

080036dc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80036dc:	4770      	bx	lr
	...

080036e0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80036e2:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80036e6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80036f0:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80036f4:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoMainScreenNoTransition();
    }
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	08003c6d 	.word	0x08003c6d

08003700 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003700:	2301      	movs	r3, #1
 8003702:	7203      	strb	r3, [r0, #8]
    }
 8003704:	4770      	bx	lr

08003706 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003706:	4770      	bx	lr

08003708 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003708:	4770      	bx	lr

0800370a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800370a:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800370c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800370e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003710:	68c2      	ldr	r2, [r0, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	1054      	asrs	r4, r2, #1
 8003716:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800371a:	07d2      	lsls	r2, r2, #31
 800371c:	bf48      	it	mi
 800371e:	590a      	ldrmi	r2, [r1, r4]
    }
 8003720:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003724:	bf48      	it	mi
 8003726:	58d3      	ldrmi	r3, [r2, r3]
 8003728:	4718      	bx	r3

0800372a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800372a:	6843      	ldr	r3, [r0, #4]
 800372c:	b12b      	cbz	r3, 800373a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800372e:	6883      	ldr	r3, [r0, #8]
 8003730:	b92b      	cbnz	r3, 800373e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003732:	68c0      	ldr	r0, [r0, #12]
 8003734:	f000 0001 	and.w	r0, r0, #1
 8003738:	4770      	bx	lr
 800373a:	4618      	mov	r0, r3
 800373c:	4770      	bx	lr
 800373e:	2001      	movs	r0, #1
    }
 8003740:	4770      	bx	lr

08003742 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
 8003746:	210c      	movs	r1, #12
 8003748:	f027 f83c 	bl	802a7c4 <_ZdlPvj>
 800374c:	4620      	mov	r0, r4
 800374e:	bd10      	pop	{r4, pc}

08003750 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003750:	b510      	push	{r4, lr}
 8003752:	4604      	mov	r4, r0
 8003754:	2110      	movs	r1, #16
 8003756:	f027 f835 	bl	802a7c4 <_ZdlPvj>
 800375a:	4620      	mov	r0, r4
 800375c:	bd10      	pop	{r4, pc}

0800375e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800375e:	b510      	push	{r4, lr}
 8003760:	4604      	mov	r4, r0
 8003762:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003766:	f027 f82d 	bl	802a7c4 <_ZdlPvj>
 800376a:	4620      	mov	r0, r4
 800376c:	bd10      	pop	{r4, pc}

0800376e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800376e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003770:	f018 faa8 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8003774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8003778:	f018 be4a 	b.w	801c410 <_ZN8touchgfx11Application10invalidateEv>

0800377c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800377c:	b510      	push	{r4, lr}
 800377e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003780:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8003784:	b158      	cbz	r0, 800379e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003786:	6803      	ldr	r3, [r0, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4798      	blx	r3
 800378c:	b138      	cbz	r0, 800379e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800378e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003792:	6803      	ldr	r3, [r0, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800379e:	bd10      	pop	{r4, pc}

080037a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	4604      	mov	r4, r0
 80037a4:	4617      	mov	r7, r2
 80037a6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80037a8:	f018 faae 	bl	801bd08 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80037ae:	2500      	movs	r5, #0
        instance = this;
 80037b0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037b2:	4629      	mov	r1, r5
      model(m)
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80037b6:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80037ba:	4e0f      	ldr	r6, [pc, #60]	; (80037f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80037c2:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80037c6:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037ca:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80037cc:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80037d4:	4628      	mov	r0, r5
 80037d6:	f001 fd35 	bl	8005244 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80037da:	6833      	ldr	r3, [r6, #0]
 80037dc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80037e0:	b10a      	cbz	r2, 80037e6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80037e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037e4:	b900      	cbnz	r0, 80037e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80037e6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80037e8:	f020 f8c9 	bl	802397e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80037ec:	4620      	mov	r0, r4
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f0:	20015634 	.word	0x20015634
 80037f4:	0802e000 	.word	0x0802e000
 80037f8:	200155e8 	.word	0x200155e8
 80037fc:	0802dfe8 	.word	0x0802dfe8

08003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x1c>)
 8003802:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003806:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800380a:	2300      	movs	r3, #0
 800380c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8003810:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003814:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	08003c6d 	.word	0x08003c6d

08003820 <_ZN23FrontendApplicationBase30gotoSettingsScreenNoTransitionEv>:
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <_ZN23FrontendApplicationBase30gotoSettingsScreenNoTransitionEv+0x1c>)
 8003822:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003826:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800382a:	2300      	movs	r3, #0
 800382c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Settings

void FrontendApplicationBase::gotoSettingsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSettingsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003830:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003834:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	08003b21 	.word	0x08003b21

08003840 <_ZN23FrontendApplicationBase28gotoStatusScreenNoTransitionEv>:
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <_ZN23FrontendApplicationBase28gotoStatusScreenNoTransitionEv+0x1c>)
 8003842:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003846:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800384a:	2300      	movs	r3, #0
 800384c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Status

void FrontendApplicationBase::gotoStatusScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoStatusScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003850:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003854:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	080039d5 	.word	0x080039d5

08003860 <_ZN23FrontendApplicationBase27gotoAboutScreenNoTransitionEv>:
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <_ZN23FrontendApplicationBase27gotoAboutScreenNoTransitionEv+0x1c>)
 8003862:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003866:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800386a:	2300      	movs	r3, #0
 800386c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// About

void FrontendApplicationBase::gotoAboutScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoAboutScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003870:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003874:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	08003889 	.word	0x08003889

08003880 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003880:	6803      	ldr	r3, [r0, #0]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4718      	bx	r3
	...

08003888 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoAboutScreenNoTransitionImpl()
{
 8003888:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<AboutView, AboutPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800388c:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003890:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003892:	68a8      	ldr	r0, [r5, #8]
 8003894:	6803      	ldr	r3, [r0, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4798      	blx	r3
 800389a:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
 800389e:	d205      	bcs.n	80038ac <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x24>
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x12c>)
 80038a2:	21a3      	movs	r1, #163	; 0xa3
 80038a4:	4a44      	ldr	r2, [pc, #272]	; (80039b8 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80038a6:	4845      	ldr	r0, [pc, #276]	; (80039bc <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x134>)
 80038a8:	f026 ffba 	bl	802a820 <__assert_func>
 80038ac:	6868      	ldr	r0, [r5, #4]
 80038ae:	6803      	ldr	r3, [r0, #0]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4798      	blx	r3
 80038b4:	280f      	cmp	r0, #15
 80038b6:	d803      	bhi.n	80038c0 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x38>
 80038b8:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x138>)
 80038ba:	21a4      	movs	r1, #164	; 0xa4
 80038bc:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x130>)
 80038be:	e7f2      	b.n	80038a6 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80038c0:	68e8      	ldr	r0, [r5, #12]
 80038c2:	6803      	ldr	r3, [r0, #0]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4798      	blx	r3
 80038c8:	280b      	cmp	r0, #11
 80038ca:	d803      	bhi.n	80038d4 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x4c>
 80038cc:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x13c>)
 80038ce:	21a5      	movs	r1, #165	; 0xa5
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x130>)
 80038d2:	e7e8      	b.n	80038a6 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80038d4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80039cc <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80038d8:	f018 f9f4 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 80038dc:	f018 f9f8 	bl	801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80038e0:	f8d9 0000 	ldr.w	r0, [r9]
 80038e4:	b110      	cbz	r0, 80038ec <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80038e6:	6803      	ldr	r3, [r0, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4798      	blx	r3
    if (*currentTrans)
 80038ec:	f8d9 0000 	ldr.w	r0, [r9]
 80038f0:	b110      	cbz	r0, 80038f8 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4798      	blx	r3
    if (*currentScreen)
 80038f8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80039d0 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x148>
 80038fc:	f8d8 0000 	ldr.w	r0, [r8]
 8003900:	b110      	cbz	r0, 8003908 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003902:	6803      	ldr	r3, [r0, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4798      	blx	r3
    if (*currentPresenter)
 8003908:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800390c:	b110      	cbz	r0, 8003914 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800390e:	6803      	ldr	r3, [r0, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4798      	blx	r3
    if (*currentScreen)
 8003914:	f8d8 0000 	ldr.w	r0, [r8]
 8003918:	b110      	cbz	r0, 8003920 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800391a:	6803      	ldr	r3, [r0, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4798      	blx	r3
    if (*currentPresenter)
 8003920:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003924:	b110      	cbz	r0, 800392c <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003926:	6803      	ldr	r3, [r0, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800392c:	2100      	movs	r1, #0
 800392e:	68e8      	ldr	r0, [r5, #12]
 8003930:	f7ff ffa6 	bl	8003880 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8003934:	f04f 0b00 	mov.w	fp, #0
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x140>)
 800393a:	4604      	mov	r4, r0
 800393c:	f8c0 b004 	str.w	fp, [r0, #4]
 8003940:	4659      	mov	r1, fp
 8003942:	6003      	str	r3, [r0, #0]
 8003944:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003948:	68a8      	ldr	r0, [r5, #8]
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	4798      	blx	r3
 8003950:	4606      	mov	r6, r0
 8003952:	f001 fcfd 	bl	8005350 <_ZN9AboutViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003956:	6868      	ldr	r0, [r5, #4]
 8003958:	4659      	mov	r1, fp
 800395a:	6803      	ldr	r3, [r0, #0]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	4798      	blx	r3
 8003960:	4605      	mov	r5, r0
 8003962:	4631      	mov	r1, r6
 8003964:	f001 fcda 	bl	800531c <_ZN14AboutPresenterC1ER9AboutView>
    *currentTrans = newTransition;
 8003968:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800396c:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003970:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003974:	b1e5      	cbz	r5, 80039b0 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0x128>
 8003976:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003978:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800397c:	4630      	mov	r0, r6
 800397e:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003980:	f8c5 a008 	str.w	sl, [r5, #8]
 8003984:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003986:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003988:	4798      	blx	r3
    newPresenter->activate();
 800398a:	682b      	ldr	r3, [r5, #0]
 800398c:	4628      	mov	r0, r5
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003992:	4621      	mov	r1, r4
 8003994:	4630      	mov	r0, r6
 8003996:	f019 fd7b 	bl	801d490 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4620      	mov	r0, r4
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	4798      	blx	r3
    newTransition->invalidate();
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4620      	mov	r0, r4
 80039a6:	695b      	ldr	r3, [r3, #20]
}
 80039a8:	b001      	add	sp, #4
 80039aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ae:	4718      	bx	r3
    model->bind(newPresenter);
 80039b0:	462b      	mov	r3, r5
 80039b2:	e7e1      	b.n	8003978 <_ZN23FrontendApplicationBase31gotoAboutScreenNoTransitionImplEv+0xf0>
 80039b4:	0802d9bc 	.word	0x0802d9bc
 80039b8:	0802da4a 	.word	0x0802da4a
 80039bc:	0802db4a 	.word	0x0802db4a
 80039c0:	0802db91 	.word	0x0802db91
 80039c4:	0802dc34 	.word	0x0802dc34
 80039c8:	0802e04c 	.word	0x0802e04c
 80039cc:	20015628 	.word	0x20015628
 80039d0:	20015624 	.word	0x20015624

080039d4 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv>:
{
 80039d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<StatusView, StatusPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80039d8:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80039dc:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80039de:	68a8      	ldr	r0, [r5, #8]
 80039e0:	6803      	ldr	r3, [r0, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4798      	blx	r3
 80039e6:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 80039ea:	d205      	bcs.n	80039f8 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x24>
 80039ec:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x12c>)
 80039ee:	21a3      	movs	r1, #163	; 0xa3
 80039f0:	4a44      	ldr	r2, [pc, #272]	; (8003b04 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80039f2:	4845      	ldr	r0, [pc, #276]	; (8003b08 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x134>)
 80039f4:	f026 ff14 	bl	802a820 <__assert_func>
 80039f8:	6868      	ldr	r0, [r5, #4]
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4798      	blx	r3
 8003a00:	280f      	cmp	r0, #15
 8003a02:	d803      	bhi.n	8003a0c <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x38>
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x138>)
 8003a06:	21a4      	movs	r1, #164	; 0xa4
 8003a08:	4a3e      	ldr	r2, [pc, #248]	; (8003b04 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x130>)
 8003a0a:	e7f2      	b.n	80039f2 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003a0c:	68e8      	ldr	r0, [r5, #12]
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4798      	blx	r3
 8003a14:	280b      	cmp	r0, #11
 8003a16:	d803      	bhi.n	8003a20 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x4c>
 8003a18:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x13c>)
 8003a1a:	21a5      	movs	r1, #165	; 0xa5
 8003a1c:	4a39      	ldr	r2, [pc, #228]	; (8003b04 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x130>)
 8003a1e:	e7e8      	b.n	80039f2 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003a20:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003b18 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003a24:	f018 f94e 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 8003a28:	f018 f952 	bl	801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003a2c:	f8d9 0000 	ldr.w	r0, [r9]
 8003a30:	b110      	cbz	r0, 8003a38 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003a32:	6803      	ldr	r3, [r0, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4798      	blx	r3
    if (*currentTrans)
 8003a38:	f8d9 0000 	ldr.w	r0, [r9]
 8003a3c:	b110      	cbz	r0, 8003a44 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003a3e:	6803      	ldr	r3, [r0, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4798      	blx	r3
    if (*currentScreen)
 8003a44:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003b1c <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x148>
 8003a48:	f8d8 0000 	ldr.w	r0, [r8]
 8003a4c:	b110      	cbz	r0, 8003a54 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4798      	blx	r3
    if (*currentPresenter)
 8003a54:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003a58:	b110      	cbz	r0, 8003a60 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003a5a:	6803      	ldr	r3, [r0, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4798      	blx	r3
    if (*currentScreen)
 8003a60:	f8d8 0000 	ldr.w	r0, [r8]
 8003a64:	b110      	cbz	r0, 8003a6c <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003a66:	6803      	ldr	r3, [r0, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4798      	blx	r3
    if (*currentPresenter)
 8003a6c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003a70:	b110      	cbz	r0, 8003a78 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003a72:	6803      	ldr	r3, [r0, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003a78:	2100      	movs	r1, #0
 8003a7a:	68e8      	ldr	r0, [r5, #12]
 8003a7c:	f7ff ff00 	bl	8003880 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8003a80:	f04f 0b00 	mov.w	fp, #0
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x140>)
 8003a86:	4604      	mov	r4, r0
 8003a88:	f8c0 b004 	str.w	fp, [r0, #4]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	6003      	str	r3, [r0, #0]
 8003a90:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003a94:	68a8      	ldr	r0, [r5, #8]
 8003a96:	6803      	ldr	r3, [r0, #0]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	4798      	blx	r3
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	f001 fd8b 	bl	80055b8 <_ZN10StatusViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003aa2:	6868      	ldr	r0, [r5, #4]
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	6803      	ldr	r3, [r0, #0]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	4798      	blx	r3
 8003aac:	4605      	mov	r5, r0
 8003aae:	4631      	mov	r1, r6
 8003ab0:	f001 fd58 	bl	8005564 <_ZN15StatusPresenterC1ER10StatusView>
    *currentTrans = newTransition;
 8003ab4:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003ab8:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003abc:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003ac0:	b1e5      	cbz	r5, 8003afc <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0x128>
 8003ac2:	1d2b      	adds	r3, r5, #4
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ac8:	4630      	mov	r0, r6
 8003aca:	6833      	ldr	r3, [r6, #0]
 8003acc:	f8c5 a008 	str.w	sl, [r5, #8]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003ad4:	4798      	blx	r3
    newPresenter->activate();
 8003ad6:	682b      	ldr	r3, [r5, #0]
 8003ad8:	4628      	mov	r0, r5
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f019 fcd5 	bl	801d490 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	4620      	mov	r0, r4
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4798      	blx	r3
    newTransition->invalidate();
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	4620      	mov	r0, r4
 8003af2:	695b      	ldr	r3, [r3, #20]
}
 8003af4:	b001      	add	sp, #4
 8003af6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	4718      	bx	r3
    model->bind(newPresenter);
 8003afc:	462b      	mov	r3, r5
 8003afe:	e7e1      	b.n	8003ac4 <_ZN23FrontendApplicationBase32gotoStatusScreenNoTransitionImplEv+0xf0>
 8003b00:	0802d9bc 	.word	0x0802d9bc
 8003b04:	0802dcd7 	.word	0x0802dcd7
 8003b08:	0802db4a 	.word	0x0802db4a
 8003b0c:	0802db91 	.word	0x0802db91
 8003b10:	0802dc34 	.word	0x0802dc34
 8003b14:	0802e04c 	.word	0x0802e04c
 8003b18:	20015628 	.word	0x20015628
 8003b1c:	20015624 	.word	0x20015624

08003b20 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv>:
{
 8003b20:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<SettingsView, SettingsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003b24:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003b28:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003b2a:	68a8      	ldr	r0, [r5, #8]
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4798      	blx	r3
 8003b32:	f5b0 6fb7 	cmp.w	r0, #1464	; 0x5b8
 8003b36:	d205      	bcs.n	8003b44 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x24>
 8003b38:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x12c>)
 8003b3a:	21a3      	movs	r1, #163	; 0xa3
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003b3e:	4845      	ldr	r0, [pc, #276]	; (8003c54 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x134>)
 8003b40:	f026 fe6e 	bl	802a820 <__assert_func>
 8003b44:	6868      	ldr	r0, [r5, #4]
 8003b46:	6803      	ldr	r3, [r0, #0]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4798      	blx	r3
 8003b4c:	280f      	cmp	r0, #15
 8003b4e:	d803      	bhi.n	8003b58 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x38>
 8003b50:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x138>)
 8003b52:	21a4      	movs	r1, #164	; 0xa4
 8003b54:	4a3e      	ldr	r2, [pc, #248]	; (8003c50 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x130>)
 8003b56:	e7f2      	b.n	8003b3e <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003b58:	68e8      	ldr	r0, [r5, #12]
 8003b5a:	6803      	ldr	r3, [r0, #0]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4798      	blx	r3
 8003b60:	280b      	cmp	r0, #11
 8003b62:	d803      	bhi.n	8003b6c <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x4c>
 8003b64:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x13c>)
 8003b66:	21a5      	movs	r1, #165	; 0xa5
 8003b68:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x130>)
 8003b6a:	e7e8      	b.n	8003b3e <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003b6c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003c64 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003b70:	f018 f8a8 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 8003b74:	f018 f8ac 	bl	801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003b78:	f8d9 0000 	ldr.w	r0, [r9]
 8003b7c:	b110      	cbz	r0, 8003b84 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4798      	blx	r3
    if (*currentTrans)
 8003b84:	f8d9 0000 	ldr.w	r0, [r9]
 8003b88:	b110      	cbz	r0, 8003b90 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4798      	blx	r3
    if (*currentScreen)
 8003b90:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003c68 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x148>
 8003b94:	f8d8 0000 	ldr.w	r0, [r8]
 8003b98:	b110      	cbz	r0, 8003ba0 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003b9a:	6803      	ldr	r3, [r0, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4798      	blx	r3
    if (*currentPresenter)
 8003ba0:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003ba4:	b110      	cbz	r0, 8003bac <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003ba6:	6803      	ldr	r3, [r0, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4798      	blx	r3
    if (*currentScreen)
 8003bac:	f8d8 0000 	ldr.w	r0, [r8]
 8003bb0:	b110      	cbz	r0, 8003bb8 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4798      	blx	r3
    if (*currentPresenter)
 8003bb8:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003bbc:	b110      	cbz	r0, 8003bc4 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003bbe:	6803      	ldr	r3, [r0, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	68e8      	ldr	r0, [r5, #12]
 8003bc8:	f7ff fe5a 	bl	8003880 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8003bcc:	f04f 0b00 	mov.w	fp, #0
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x140>)
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	f8c0 b004 	str.w	fp, [r0, #4]
 8003bd8:	4659      	mov	r1, fp
 8003bda:	6003      	str	r3, [r0, #0]
 8003bdc:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003be0:	68a8      	ldr	r0, [r5, #8]
 8003be2:	6803      	ldr	r3, [r0, #0]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	4798      	blx	r3
 8003be8:	4606      	mov	r6, r0
 8003bea:	f001 fca3 	bl	8005534 <_ZN12SettingsViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003bee:	6868      	ldr	r0, [r5, #4]
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	6803      	ldr	r3, [r0, #0]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	4798      	blx	r3
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	f001 fc46 	bl	800548c <_ZN17SettingsPresenterC1ER12SettingsView>
    *currentTrans = newTransition;
 8003c00:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003c04:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003c08:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003c0c:	b1e5      	cbz	r5, 8003c48 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0x128>
 8003c0e:	1d2b      	adds	r3, r5, #4
 8003c10:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003c14:	4630      	mov	r0, r6
 8003c16:	6833      	ldr	r3, [r6, #0]
 8003c18:	f8c5 a008 	str.w	sl, [r5, #8]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003c20:	4798      	blx	r3
    newPresenter->activate();
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	4628      	mov	r0, r5
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f019 fc2f 	bl	801d490 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4620      	mov	r0, r4
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	4798      	blx	r3
    newTransition->invalidate();
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	695b      	ldr	r3, [r3, #20]
}
 8003c40:	b001      	add	sp, #4
 8003c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c46:	4718      	bx	r3
    model->bind(newPresenter);
 8003c48:	462b      	mov	r3, r5
 8003c4a:	e7e1      	b.n	8003c10 <_ZN23FrontendApplicationBase34gotoSettingsScreenNoTransitionImplEv+0xf0>
 8003c4c:	0802d9bc 	.word	0x0802d9bc
 8003c50:	0802ddd9 	.word	0x0802ddd9
 8003c54:	0802db4a 	.word	0x0802db4a
 8003c58:	0802db91 	.word	0x0802db91
 8003c5c:	0802dc34 	.word	0x0802dc34
 8003c60:	0802e04c 	.word	0x0802e04c
 8003c64:	20015628 	.word	0x20015628
 8003c68:	20015624 	.word	0x20015624

08003c6c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:
{
 8003c6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003c70:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003c74:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c76:	68a8      	ldr	r0, [r5, #8]
 8003c78:	6803      	ldr	r3, [r0, #0]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4798      	blx	r3
 8003c7e:	f5b0 7f3a 	cmp.w	r0, #744	; 0x2e8
 8003c82:	d205      	bcs.n	8003c90 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x24>
 8003c84:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x12c>)
 8003c86:	21a3      	movs	r1, #163	; 0xa3
 8003c88:	4a44      	ldr	r2, [pc, #272]	; (8003d9c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c8a:	4845      	ldr	r0, [pc, #276]	; (8003da0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
 8003c8c:	f026 fdc8 	bl	802a820 <__assert_func>
 8003c90:	6868      	ldr	r0, [r5, #4]
 8003c92:	6803      	ldr	r3, [r0, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4798      	blx	r3
 8003c98:	280f      	cmp	r0, #15
 8003c9a:	d803      	bhi.n	8003ca4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x38>
 8003c9c:	4b41      	ldr	r3, [pc, #260]	; (8003da4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x138>)
 8003c9e:	21a4      	movs	r1, #164	; 0xa4
 8003ca0:	4a3e      	ldr	r2, [pc, #248]	; (8003d9c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x130>)
 8003ca2:	e7f2      	b.n	8003c8a <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003ca4:	68e8      	ldr	r0, [r5, #12]
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4798      	blx	r3
 8003cac:	280b      	cmp	r0, #11
 8003cae:	d803      	bhi.n	8003cb8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x4c>
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x13c>)
 8003cb2:	21a5      	movs	r1, #165	; 0xa5
 8003cb4:	4a39      	ldr	r2, [pc, #228]	; (8003d9c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x130>)
 8003cb6:	e7e8      	b.n	8003c8a <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003cb8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003db0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003cbc:	f018 f802 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 8003cc0:	f018 f806 	bl	801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8003cc8:	b110      	cbz	r0, 8003cd0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4798      	blx	r3
    if (*currentTrans)
 8003cd0:	f8d9 0000 	ldr.w	r0, [r9]
 8003cd4:	b110      	cbz	r0, 8003cdc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003cd6:	6803      	ldr	r3, [r0, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4798      	blx	r3
    if (*currentScreen)
 8003cdc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003db4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x148>
 8003ce0:	f8d8 0000 	ldr.w	r0, [r8]
 8003ce4:	b110      	cbz	r0, 8003cec <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003ce6:	6803      	ldr	r3, [r0, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4798      	blx	r3
    if (*currentPresenter)
 8003cec:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003cf0:	b110      	cbz	r0, 8003cf8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4798      	blx	r3
    if (*currentScreen)
 8003cf8:	f8d8 0000 	ldr.w	r0, [r8]
 8003cfc:	b110      	cbz	r0, 8003d04 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003cfe:	6803      	ldr	r3, [r0, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4798      	blx	r3
    if (*currentPresenter)
 8003d04:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003d08:	b110      	cbz	r0, 8003d10 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003d10:	2100      	movs	r1, #0
 8003d12:	68e8      	ldr	r0, [r5, #12]
 8003d14:	f7ff fdb4 	bl	8003880 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8003d18:	f04f 0b00 	mov.w	fp, #0
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x140>)
 8003d1e:	4604      	mov	r4, r0
 8003d20:	f8c0 b004 	str.w	fp, [r0, #4]
 8003d24:	4659      	mov	r1, fp
 8003d26:	6003      	str	r3, [r0, #0]
 8003d28:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003d2c:	68a8      	ldr	r0, [r5, #8]
 8003d2e:	6803      	ldr	r3, [r0, #0]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	4798      	blx	r3
 8003d34:	4606      	mov	r6, r0
 8003d36:	f001 fb85 	bl	8005444 <_ZN8MainViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003d3a:	6868      	ldr	r0, [r5, #4]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	4798      	blx	r3
 8003d44:	4605      	mov	r5, r0
 8003d46:	4631      	mov	r1, r6
 8003d48:	f001 fb38 	bl	80053bc <_ZN13MainPresenterC1ER8MainView>
    *currentTrans = newTransition;
 8003d4c:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003d50:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003d54:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003d58:	b1e5      	cbz	r5, 8003d94 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x128>
 8003d5a:	1d2b      	adds	r3, r5, #4
 8003d5c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003d60:	4630      	mov	r0, r6
 8003d62:	6833      	ldr	r3, [r6, #0]
 8003d64:	f8c5 a008 	str.w	sl, [r5, #8]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003d6c:	4798      	blx	r3
    newPresenter->activate();
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	4628      	mov	r0, r5
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d76:	4621      	mov	r1, r4
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f019 fb89 	bl	801d490 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	4620      	mov	r0, r4
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4798      	blx	r3
    newTransition->invalidate();
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	4620      	mov	r0, r4
 8003d8a:	695b      	ldr	r3, [r3, #20]
}
 8003d8c:	b001      	add	sp, #4
 8003d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d92:	4718      	bx	r3
    model->bind(newPresenter);
 8003d94:	462b      	mov	r3, r5
 8003d96:	e7e1      	b.n	8003d5c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xf0>
 8003d98:	0802d9bc 	.word	0x0802d9bc
 8003d9c:	0802dedf 	.word	0x0802dedf
 8003da0:	0802db4a 	.word	0x0802db4a
 8003da4:	0802db91 	.word	0x0802db91
 8003da8:	0802dc34 	.word	0x0802dc34
 8003dac:	0802e04c 	.word	0x0802e04c
 8003db0:	20015628 	.word	0x20015628
 8003db4:	20015624 	.word	0x20015624

08003db8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003db8:	6a00      	ldr	r0, [r0, #32]
 8003dba:	4770      	bx	lr

08003dbc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003dbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003dbe:	4770      	bx	lr

08003dc0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003dc0:	4770      	bx	lr

08003dc2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003dc2:	888b      	ldrh	r3, [r1, #4]
 8003dc4:	6980      	ldr	r0, [r0, #24]
 8003dc6:	0adb      	lsrs	r3, r3, #11
 8003dc8:	680a      	ldr	r2, [r1, #0]
 8003dca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003dce:	4410      	add	r0, r2
 8003dd0:	4770      	bx	lr

08003dd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003dd2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003dd4:	b1c2      	cbz	r2, 8003e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003dd6:	7b13      	ldrb	r3, [r2, #12]
 8003dd8:	b1b3      	cbz	r3, 8003e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003dda:	7b54      	ldrb	r4, [r2, #13]
 8003ddc:	7ad2      	ldrb	r2, [r2, #11]
 8003dde:	0224      	lsls	r4, r4, #8
 8003de0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003de4:	4314      	orrs	r4, r2
 8003de6:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003de8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003dea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003dee:	8813      	ldrh	r3, [r2, #0]
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d102      	bne.n	8003dfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003df4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003df8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003dfa:	d805      	bhi.n	8003e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003dfc:	3801      	subs	r0, #1
 8003dfe:	3204      	adds	r2, #4
 8003e00:	b280      	uxth	r0, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d1f3      	bne.n	8003dee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003e06:	e7f7      	b.n	8003df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e7f5      	b.n	8003df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003e0c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4604      	mov	r4, r0
 8003e10:	2128      	movs	r1, #40	; 0x28
 8003e12:	f026 fcd7 	bl	802a7c4 <_ZdlPvj>
 8003e16:	4620      	mov	r0, r4
 8003e18:	bd10      	pop	{r4, pc}
	...

08003e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e1c:	b530      	push	{r4, r5, lr}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e22:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e26:	9506      	str	r5, [sp, #24]
 8003e28:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003e2c:	9505      	str	r5, [sp, #20]
 8003e2e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003e32:	9504      	str	r5, [sp, #16]
 8003e34:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003e38:	9503      	str	r5, [sp, #12]
 8003e3a:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003e3e:	9502      	str	r5, [sp, #8]
 8003e40:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003e44:	9501      	str	r5, [sp, #4]
 8003e46:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003e4a:	9500      	str	r5, [sp, #0]
 8003e4c:	f018 ff80 	bl	801cd50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8003e52:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e58:	61a3      	str	r3, [r4, #24]
 8003e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e5c:	61e3      	str	r3, [r4, #28]
 8003e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e60:	6223      	str	r3, [r4, #32]
 8003e62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e64:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003e66:	b009      	add	sp, #36	; 0x24
 8003e68:	bd30      	pop	{r4, r5, pc}
 8003e6a:	bf00      	nop
 8003e6c:	0802e070 	.word	0x0802e070

08003e70 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8003e70:	4770      	bx	lr

08003e72 <_ZN12MainViewBase11setupScreenEv>:
}

void MainViewBase::setupScreen()
{

}
 8003e72:	4770      	bx	lr

08003e74 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e74:	4770      	bx	lr

08003e76 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003e76:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003e78:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003e7a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003e7c:	68c2      	ldr	r2, [r0, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	1055      	asrs	r5, r2, #1
 8003e82:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003e86:	07d2      	lsls	r2, r2, #31
 8003e88:	bf48      	it	mi
 8003e8a:	5962      	ldrmi	r2, [r4, r5]
    }
 8003e8c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003e8e:	bf48      	it	mi
 8003e90:	58d3      	ldrmi	r3, [r2, r3]
 8003e92:	4718      	bx	r3

08003e94 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8003e94:	6843      	ldr	r3, [r0, #4]
 8003e96:	b12b      	cbz	r3, 8003ea4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003e98:	6883      	ldr	r3, [r0, #8]
 8003e9a:	b92b      	cbnz	r3, 8003ea8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003e9c:	68c0      	ldr	r0, [r0, #12]
 8003e9e:	f000 0001 	and.w	r0, r0, #1
 8003ea2:	4770      	bx	lr
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	4770      	bx	lr
 8003ea8:	2001      	movs	r0, #1
    }
 8003eaa:	4770      	bx	lr

08003eac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003eac:	b510      	push	{r4, lr}
 8003eae:	4604      	mov	r4, r0
 8003eb0:	2110      	movs	r1, #16
 8003eb2:	f026 fc87 	bl	802a7c4 <_ZdlPvj>
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	bd10      	pop	{r4, pc}

08003eba <_ZN12MainViewBaseD0Ev>:
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003ec2:	f026 fc7f 	bl	802a7c4 <_ZdlPvj>
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8003eca:	b508      	push	{r3, lr}
    if (&src == &btnMainSettings)
 8003ecc:	f500 73ae 	add.w	r3, r0, #348	; 0x15c
 8003ed0:	4299      	cmp	r1, r3
 8003ed2:	d105      	bne.n	8003ee0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003ed4:	f017 fef6 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
        //mainToStatus
        //When btnMainStatus clicked change screen to Status
        //Go to Status with no screen transition
        application().gotoStatusScreenNoTransition();
    }
}
 8003ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoSettingsScreenNoTransition();
 8003edc:	f7ff bca0 	b.w	8003820 <_ZN23FrontendApplicationBase30gotoSettingsScreenNoTransitionEv>
    else if (&src == &btnMainAbout)
 8003ee0:	f500 73c8 	add.w	r3, r0, #400	; 0x190
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	d105      	bne.n	8003ef4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
 8003ee8:	f017 feec 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
}
 8003eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoAboutScreenNoTransition();
 8003ef0:	f7ff bcb6 	b.w	8003860 <_ZN23FrontendApplicationBase27gotoAboutScreenNoTransitionEv>
    else if (&src == &btnMainStatus)
 8003ef4:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8003ef8:	4281      	cmp	r1, r0
 8003efa:	d105      	bne.n	8003f08 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
 8003efc:	f017 fee2 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
}
 8003f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoStatusScreenNoTransition();
 8003f04:	f7ff bc9c 	b.w	8003840 <_ZN23FrontendApplicationBase28gotoStatusScreenNoTransitionEv>
}
 8003f08:	bd08      	pop	{r3, pc}

08003f0a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003f0a:	b570      	push	{r4, r5, r6, lr}
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	461d      	mov	r5, r3
 8003f10:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003f14:	f7ff fa53 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4798      	blx	r3
        setHeight(height);
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	4631      	mov	r1, r6
 8003f26:	4620      	mov	r0, r4
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003f2e:	4718      	bx	r3

08003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003f36:	2226      	movs	r2, #38	; 0x26
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f026 fdf7 	bl	802ab2c <memset>
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7ff fa4a 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	882b      	ldrh	r3, [r5, #0]
 8003f4e:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003f50:	23ff      	movs	r3, #255	; 0xff
 8003f52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8003f56:	f016 f867 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
 8003f5e:	bf00      	nop
 8003f60:	08030d38 	.word	0x08030d38

08003f64 <_ZN12MainViewBaseC1Ev>:
MainViewBase::MainViewBase() :
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	4604      	mov	r4, r0
        : presenter(0)
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8003f70:	4627      	mov	r7, r4
 8003f72:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 8003f76:	f504 7bae 	add.w	fp, r4, #348	; 0x15c
 8003f7a:	f504 7ac8 	add.w	sl, r4, #400	; 0x190
 8003f7e:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
MainViewBase::MainViewBase() :
 8003f82:	ed2d 8b06 	vpush	{d8-d10}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	f019 f8d6 	bl	801d138 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8003f8c:	4bc4      	ldr	r3, [pc, #784]	; (80042a0 <_ZN12MainViewBaseC1Ev+0x33c>)
        : Widget(), alpha(255), color(0)
 8003f8e:	2226      	movs	r2, #38	; 0x26
 8003f90:	4629      	mov	r1, r5
 8003f92:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003f94:	f847 3b40 	str.w	r3, [r7], #64
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f026 fdc7 	bl	802ab2c <memset>
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f7ff fa1a 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8003fa4:	4bbf      	ldr	r3, [pc, #764]	; (80042a4 <_ZN12MainViewBaseC1Ev+0x340>)
 8003fa6:	a906      	add	r1, sp, #24
        : color(col)
 8003fa8:	66a5      	str	r5, [r4, #104]	; 0x68
 8003faa:	6423      	str	r3, [r4, #64]	; 0x40
 8003fac:	23ff      	movs	r3, #255	; 0xff
 8003fae:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003fb2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8003fb6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003fba:	4618      	mov	r0, r3
 8003fbc:	ee08 3a10 	vmov	s16, r3
 8003fc0:	f7ff ffb6 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003fc4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003fc8:	a906      	add	r1, sp, #24
 8003fca:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	ee08 3a90 	vmov	s17, r3
 8003fd4:	f7ff ffac 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f013 ff85 	bl	8017ee8 <_ZN8touchgfx12DigitalClockC1Ev>
        : Widget(), action(), pressed(false)
 8003fde:	4629      	mov	r1, r5
 8003fe0:	2226      	movs	r2, #38	; 0x26
 8003fe2:	4658      	mov	r0, fp
 8003fe4:	f026 fda2 	bl	802ab2c <memset>
 8003fe8:	4658      	mov	r0, fp
 8003fea:	f7ff f9f5 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8003fee:	f04f 0301 	mov.w	r3, #1
 8003ff2:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003ffc:	4baa      	ldr	r3, [pc, #680]	; (80042a8 <_ZN12MainViewBaseC1Ev+0x344>)
 8003ffe:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
 8004002:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 8004006:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
 800400a:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
 800400e:	f884 818e 	strb.w	r8, [r4, #398]	; 0x18e
 8004012:	f016 f93b 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004016:	4648      	mov	r0, r9
 8004018:	f016 f938 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800401c:	f504 7208 	add.w	r2, r4, #544	; 0x220
 8004020:	a906      	add	r1, sp, #24
 8004022:	f8ad 8018 	strh.w	r8, [sp, #24]
 8004026:	4610      	mov	r0, r2
 8004028:	ee09 2a10 	vmov	s18, r2
 800402c:	f7ff ff80 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004030:	f504 7213 	add.w	r2, r4, #588	; 0x24c
 8004034:	a906      	add	r1, sp, #24
 8004036:	f8ad 8018 	strh.w	r8, [sp, #24]
 800403a:	4610      	mov	r0, r2
 800403c:	ee09 2a90 	vmov	s19, r2
 8004040:	f7ff ff76 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004044:	f504 721e 	add.w	r2, r4, #632	; 0x278
 8004048:	a906      	add	r1, sp, #24
 800404a:	f8ad 8018 	strh.w	r8, [sp, #24]
 800404e:	4610      	mov	r0, r2
 8004050:	ee0a 2a10 	vmov	s20, r2
 8004054:	f7ff ff6c 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004058:	f504 7229 	add.w	r2, r4, #676	; 0x2a4
 800405c:	a906      	add	r1, sp, #24
 800405e:	f8ad 8018 	strh.w	r8, [sp, #24]
 8004062:	4610      	mov	r0, r2
 8004064:	ee0a 2a90 	vmov	s21, r2
 8004068:	f7ff ff62 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 800406c:	4b8f      	ldr	r3, [pc, #572]	; (80042ac <_ZN12MainViewBaseC1Ev+0x348>)
    __background.setPosition(0, 0, 480, 272);
 800406e:	462a      	mov	r2, r5
 8004070:	4629      	mov	r1, r5
 8004072:	4638      	mov	r0, r7
 8004074:	f04f 0802 	mov.w	r8, #2
 8004078:	e9c4 34b4 	strd	r3, r4, [r4, #720]	; 0x2d0
 800407c:	4b8c      	ldr	r3, [pc, #560]	; (80042b0 <_ZN12MainViewBaseC1Ev+0x34c>)
 800407e:	e9c4 35b6 	strd	r3, r5, [r4, #728]	; 0x2d8
 8004082:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800408c:	f7ff ff3d 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004090:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    mainBG.setXY(0, 0);
 8004094:	4629      	mov	r1, r5
 8004096:	ee18 0a10 	vmov	r0, s16
 800409a:	66a2      	str	r2, [r4, #104]	; 0x68
 800409c:	462a      	mov	r2, r5
 800409e:	f7ff f98e 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
    mainBG.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 80040a2:	a906      	add	r1, sp, #24
 80040a4:	ee18 0a10 	vmov	r0, s16
 80040a8:	f8ad 8018 	strh.w	r8, [sp, #24]
 80040ac:	f015 ffbc 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainLOGO.setXY(90, -14);
 80040b0:	f06f 020d 	mvn.w	r2, #13
 80040b4:	ee18 0a90 	vmov	r0, s17
 80040b8:	215a      	movs	r1, #90	; 0x5a
 80040ba:	f7ff f980 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
    mainLOGO.setBitmap(touchgfx::Bitmap(BITMAP_AW_EMBEDDED_LOGOS_TRANSPARENT_25PC_ID));
 80040be:	a906      	add	r1, sp, #24
 80040c0:	ee18 0a90 	vmov	r0, s17
 80040c4:	f8ad 5018 	strh.w	r5, [sp, #24]
 80040c8:	f015 ffae 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    digitalClock1.setPosition(178, 0, 125, 43);
 80040cc:	232b      	movs	r3, #43	; 0x2b
 80040ce:	462a      	mov	r2, r5
 80040d0:	4630      	mov	r0, r6
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	21b2      	movs	r1, #178	; 0xb2
 80040d6:	237d      	movs	r3, #125	; 0x7d
 80040d8:	f7ff ff17 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80040dc:	4630      	mov	r0, r6
 80040de:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80040e2:	f013 fe34 	bl	8017d4e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <_ZN12MainViewBaseC1Ev+0x350>)
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IDW8));
 80040e8:	a906      	add	r1, sp, #24
 80040ea:	4630      	mov	r0, r6
 80040ec:	9306      	str	r3, [sp, #24]
 80040ee:	2317      	movs	r3, #23
 80040f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80040f4:	f013 fe39 	bl	8017d6a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 80040f8:	4630      	mov	r0, r6
 80040fa:	2101      	movs	r1, #1
 80040fc:	f013 ff42 	bl	8017f84 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8004100:	f04f 0301 	mov.w	r3, #1
    digitalClock1.setTime24Hour(12, 0, 0);
 8004104:	462a      	mov	r2, r5
 8004106:	4630      	mov	r0, r6
 8004108:	f884 30f3 	strb.w	r3, [r4, #243]	; 0xf3
 800410c:	210c      	movs	r1, #12
 800410e:	462b      	mov	r3, r5
 8004110:	f013 ff3b 	bl	8017f8a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    btnMainSettings.setXY(0, 0);
 8004114:	462a      	mov	r2, r5
 8004116:	4629      	mov	r1, r5
 8004118:	4658      	mov	r0, fp
 800411a:	f7ff f950 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 800411e:	2306      	movs	r3, #6
    btnMainSettings.setBitmaps(touchgfx::Bitmap(BITMAP_CONFIGURATION_ID), touchgfx::Bitmap(BITMAP_CONFIGURATION_ID));
 8004120:	aa06      	add	r2, sp, #24
 8004122:	a905      	add	r1, sp, #20
 8004124:	4658      	mov	r0, fp
 8004126:	f8ad 3014 	strh.w	r3, [sp, #20]
 800412a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800412e:	f015 fd58 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnMainSettings.setAction(buttonCallback);
 8004132:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
    btnMainAbout.setXY(0, 212);
 8004136:	4629      	mov	r1, r5
 8004138:	4650      	mov	r0, sl
 800413a:	22d4      	movs	r2, #212	; 0xd4
        action = &callback;
 800413c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    btnMainSettings.setAction(buttonCallback);
 8004140:	9303      	str	r3, [sp, #12]
    btnMainAbout.setXY(0, 212);
 8004142:	f7ff f93c 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004146:	2307      	movs	r3, #7
    btnMainAbout.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004148:	a905      	add	r1, sp, #20
 800414a:	aa06      	add	r2, sp, #24
 800414c:	4650      	mov	r0, sl
 800414e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004152:	f04f 0308 	mov.w	r3, #8
 8004156:	f8ad 3018 	strh.w	r3, [sp, #24]
 800415a:	f015 fd42 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800415e:	2216      	movs	r2, #22
        updateTextPosition();
 8004160:	4650      	mov	r0, sl
 8004162:	f8a4 21c8 	strh.w	r2, [r4, #456]	; 0x1c8
 8004166:	f7ff f949 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800416a:	9b03      	ldr	r3, [sp, #12]
        color = col;
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
    btnMainStatus.setXY(420, 212);
 8004170:	4648      	mov	r0, r9
 8004172:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
 8004176:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
        colorPressed = col;
 800417a:	e9c4 2273 	strd	r2, r2, [r4, #460]	; 0x1cc
 800417e:	22d4      	movs	r2, #212	; 0xd4
 8004180:	f7ff f91d 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004184:	2307      	movs	r3, #7
    btnMainStatus.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004186:	aa06      	add	r2, sp, #24
 8004188:	a905      	add	r1, sp, #20
 800418a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800418e:	f04f 0308 	mov.w	r3, #8
 8004192:	4648      	mov	r0, r9
 8004194:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004198:	f015 fd23 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800419c:	2315      	movs	r3, #21
        updateTextPosition();
 800419e:	4648      	mov	r0, r9
 80041a0:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 80041a4:	f7ff f92a 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295
    mainStateGreen.setXY(354, 2);
 80041ac:	4642      	mov	r2, r8
 80041ae:	ee19 0a10 	vmov	r0, s18
 80041b2:	f44f 71b1 	mov.w	r1, #354	; 0x162
        colorPressed = col;
 80041b6:	e9c4 3385 	strd	r3, r3, [r4, #532]	; 0x214
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 80041c0:	f7ff f8fd 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 80041c4:	2309      	movs	r3, #9
    mainStateGreen.setBitmap(touchgfx::Bitmap(BITMAP_GREENLED_ID));
 80041c6:	a906      	add	r1, sp, #24
 80041c8:	ee19 0a10 	vmov	r0, s18
 80041cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80041d0:	f015 ff2a 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainStateOrange.setXY(374, 2);
 80041d4:	4642      	mov	r2, r8
 80041d6:	ee19 0a90 	vmov	r0, s19
 80041da:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80041de:	f7ff f8ee 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 80041e2:	230a      	movs	r3, #10
    mainStateOrange.setBitmap(touchgfx::Bitmap(BITMAP_ORANGELED_ID));
 80041e4:	a906      	add	r1, sp, #24
 80041e6:	ee19 0a90 	vmov	r0, s19
 80041ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80041ee:	f015 ff1b 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainStateRed.setXY(394, 2);
 80041f2:	4642      	mov	r2, r8
 80041f4:	ee1a 0a10 	vmov	r0, s20
 80041f8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80041fc:	f7ff f8df 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004200:	230b      	movs	r3, #11
    mainStateRed.setBitmap(touchgfx::Bitmap(BITMAP_REDLED_ID));
 8004202:	a906      	add	r1, sp, #24
 8004204:	ee1a 0a10 	vmov	r0, s20
 8004208:	f8ad 3018 	strh.w	r3, [sp, #24]
 800420c:	f015 ff0c 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainWifiLogo.setXY(456, 0);
 8004210:	462a      	mov	r2, r5
 8004212:	ee1a 0a90 	vmov	r0, s21
 8004216:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800421a:	1d25      	adds	r5, r4, #4
 800421c:	f7ff f8cf 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004220:	230c      	movs	r3, #12
    mainWifiLogo.setBitmap(touchgfx::Bitmap(BITMAP_WIFI_ID));
 8004222:	a906      	add	r1, sp, #24
 8004224:	ee1a 0a90 	vmov	r0, s21
 8004228:	f8ad 3018 	strh.w	r3, [sp, #24]
 800422c:	f015 fefc 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004230:	4639      	mov	r1, r7
 8004232:	4628      	mov	r0, r5
 8004234:	f013 ff1a 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004238:	ee18 1a10 	vmov	r1, s16
 800423c:	4628      	mov	r0, r5
 800423e:	f013 ff15 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004242:	ee18 1a90 	vmov	r1, s17
 8004246:	4628      	mov	r0, r5
 8004248:	f013 ff10 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800424c:	4631      	mov	r1, r6
 800424e:	4628      	mov	r0, r5
 8004250:	f013 ff0c 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004254:	4659      	mov	r1, fp
 8004256:	4628      	mov	r0, r5
 8004258:	f013 ff08 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800425c:	4651      	mov	r1, sl
 800425e:	4628      	mov	r0, r5
 8004260:	f013 ff04 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004264:	4649      	mov	r1, r9
 8004266:	4628      	mov	r0, r5
 8004268:	f013 ff00 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800426c:	ee19 1a10 	vmov	r1, s18
 8004270:	4628      	mov	r0, r5
 8004272:	f013 fefb 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004276:	ee19 1a90 	vmov	r1, s19
 800427a:	4628      	mov	r0, r5
 800427c:	f013 fef6 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004280:	ee1a 1a10 	vmov	r1, s20
 8004284:	4628      	mov	r0, r5
 8004286:	f013 fef1 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800428a:	4628      	mov	r0, r5
 800428c:	ee1a 1a90 	vmov	r1, s21
 8004290:	f013 feec 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004294:	4620      	mov	r0, r4
 8004296:	b009      	add	sp, #36	; 0x24
 8004298:	ecbd 8b06 	vpop	{d8-d10}
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	0802e0e0 	.word	0x0802e0e0
 80042a4:	08030bf4 	.word	0x08030bf4
 80042a8:	08030c5c 	.word	0x08030c5c
 80042ac:	0802e0c8 	.word	0x0802e0c8
 80042b0:	08003ecb 	.word	0x08003ecb
 80042b4:	0802d828 	.word	0x0802d828

080042b8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80042b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80042ba:	4770      	bx	lr

080042bc <_ZN8touchgfx8TextArea8setWidthEs>:
    virtual void setWidth(int16_t width)
 80042bc:	b530      	push	{r4, r5, lr}
 80042be:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80042c0:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80042c2:	4604      	mov	r4, r0
        rect.width = width;
 80042c4:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80042c6:	466d      	mov	r5, sp
 80042c8:	4601      	mov	r1, r0
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	343c      	adds	r4, #60	; 0x3c
 80042d0:	4628      	mov	r0, r5
 80042d2:	4798      	blx	r3
 80042d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80042dc:	b005      	add	sp, #20
 80042de:	bd30      	pop	{r4, r5, pc}

080042e0 <_ZN8touchgfx8TextArea9setHeightEs>:
    virtual void setHeight(int16_t height)
 80042e0:	b530      	push	{r4, r5, lr}
 80042e2:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80042e4:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80042e6:	4604      	mov	r4, r0
        rect.height = height;
 80042e8:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80042ea:	466d      	mov	r5, sp
 80042ec:	4601      	mov	r1, r0
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f2:	343c      	adds	r4, #60	; 0x3c
 80042f4:	4628      	mov	r0, r5
 80042f6:	4798      	blx	r3
 80042f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004300:	b005      	add	sp, #20
 8004302:	bd30      	pop	{r4, r5, pc}

08004304 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8004304:	2200      	movs	r2, #0
 8004306:	8002      	strh	r2, [r0, #0]
 8004308:	8042      	strh	r2, [r0, #2]
 800430a:	8082      	strh	r2, [r0, #4]
 800430c:	80c2      	strh	r2, [r0, #6]
    }
 800430e:	4770      	bx	lr

08004310 <_ZN8touchgfx8TextArea8setAlphaEh>:
        alpha = newAlpha;
 8004310:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004314:	4770      	bx	lr

08004316 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
 8004316:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4604      	mov	r4, r0
        setX(x);
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800431e:	4615      	mov	r5, r2
        setX(x);
 8004320:	4798      	blx	r3
        setBaselineY(baselineY);
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4620      	mov	r0, r4
 8004326:	4629      	mov	r1, r5
 8004328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 800432a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800432e:	4718      	bx	r3

08004330 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
    }
 8004330:	2000      	movs	r0, #0
 8004332:	4770      	bx	lr

08004334 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004334:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004336:	4770      	bx	lr

08004338 <_ZN16SettingsViewBaseD1Ev>:

class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase() {}
 8004338:	4770      	bx	lr

0800433a <_ZN16SettingsViewBase11wifi_toggleEv>:
     * Virtual Action Handlers
     */
    virtual void wifi_toggle()
    {
        // Override and implement this function in Settings
    }
 800433a:	4770      	bx	lr

0800433c <_ZN16SettingsViewBase11setupScreenEv>:
}

void SettingsViewBase::setupScreen()
{

}
 800433c:	4770      	bx	lr

0800433e <_ZN16SettingsViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:
    }
}

void SettingsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
}
 800433e:	4770      	bx	lr

08004340 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
     *
     * @see setPressed
     */
    bool getPressed()
    {
        return pressed;
 8004340:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8004344:	b14b      	cbz	r3, 800435a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004346:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800434e:	b13b      	cbz	r3, 8004360 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8004350:	f100 0374 	add.w	r3, r0, #116	; 0x74
 8004354:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8004356:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 8004358:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 800435a:	f100 0268 	add.w	r2, r0, #104	; 0x68
 800435e:	e7f4      	b.n	800434a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004360:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8004364:	e7f6      	b.n	8004354 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>

08004366 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004366:	4770      	bx	lr

08004368 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8004368:	4770      	bx	lr

0800436a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800436a:	4770      	bx	lr

0800436c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800436c:	4770      	bx	lr

0800436e <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800436e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004370:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004372:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004374:	68c2      	ldr	r2, [r0, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	1055      	asrs	r5, r2, #1
 800437a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	bf48      	it	mi
 8004382:	5962      	ldrmi	r2, [r4, r5]
    }
 8004384:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004386:	bf48      	it	mi
 8004388:	58d3      	ldrmi	r3, [r2, r3]
 800438a:	4718      	bx	r3

0800438c <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800438c:	6843      	ldr	r3, [r0, #4]
 800438e:	b12b      	cbz	r3, 800439c <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 8004390:	6883      	ldr	r3, [r0, #8]
 8004392:	b92b      	cbnz	r3, 80043a0 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8004394:	68c0      	ldr	r0, [r0, #12]
 8004396:	f000 0001 	and.w	r0, r0, #1
 800439a:	4770      	bx	lr
 800439c:	4618      	mov	r0, r3
 800439e:	4770      	bx	lr
 80043a0:	2001      	movs	r0, #1
    }
 80043a2:	4770      	bx	lr

080043a4 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80043a4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80043a6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80043a8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80043aa:	68c2      	ldr	r2, [r0, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	1055      	asrs	r5, r2, #1
 80043b0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80043b4:	07d2      	lsls	r2, r2, #31
 80043b6:	bf48      	it	mi
 80043b8:	5962      	ldrmi	r2, [r4, r5]
    }
 80043ba:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80043bc:	bf48      	it	mi
 80043be:	58d3      	ldrmi	r3, [r2, r3]
 80043c0:	4718      	bx	r3

080043c2 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80043c2:	6843      	ldr	r3, [r0, #4]
 80043c4:	b12b      	cbz	r3, 80043d2 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80043c6:	6883      	ldr	r3, [r0, #8]
 80043c8:	b92b      	cbnz	r3, 80043d6 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80043ca:	68c0      	ldr	r0, [r0, #12]
 80043cc:	f000 0001 	and.w	r0, r0, #1
 80043d0:	4770      	bx	lr
 80043d2:	4618      	mov	r0, r3
 80043d4:	4770      	bx	lr
 80043d6:	2001      	movs	r0, #1
    }
 80043d8:	4770      	bx	lr

080043da <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80043da:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80043de:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 80043e2:	4770      	bx	lr

080043e4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	214c      	movs	r1, #76	; 0x4c
 80043ea:	f026 f9eb 	bl	802a7c4 <_ZdlPvj>
 80043ee:	4620      	mov	r0, r4
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80043f2:	b510      	push	{r4, lr}
 80043f4:	4604      	mov	r4, r0
 80043f6:	2110      	movs	r1, #16
 80043f8:	f026 f9e4 	bl	802a7c4 <_ZdlPvj>
 80043fc:	4620      	mov	r0, r4
 80043fe:	bd10      	pop	{r4, pc}

08004400 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8004400:	b510      	push	{r4, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	2110      	movs	r1, #16
 8004406:	f026 f9dd 	bl	802a7c4 <_ZdlPvj>
 800440a:	4620      	mov	r0, r4
 800440c:	bd10      	pop	{r4, pc}

0800440e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 800440e:	b510      	push	{r4, lr}
 8004410:	4604      	mov	r4, r0
 8004412:	2178      	movs	r1, #120	; 0x78
 8004414:	f026 f9d6 	bl	802a7c4 <_ZdlPvj>
 8004418:	4620      	mov	r0, r4
 800441a:	bd10      	pop	{r4, pc}

0800441c <_ZN16SettingsViewBaseD0Ev>:
    virtual ~SettingsViewBase() {}
 800441c:	b510      	push	{r4, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	f240 51b4 	movw	r1, #1460	; 0x5b4
 8004424:	f026 f9ce 	bl	802a7c4 <_ZdlPvj>
 8004428:	4620      	mov	r0, r4
 800442a:	bd10      	pop	{r4, pc}

0800442c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800442c:	b510      	push	{r4, lr}
 800442e:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8004430:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004432:	b150      	cbz	r0, 800444a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8004434:	6803      	ldr	r3, [r0, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4798      	blx	r3
 800443a:	b130      	cbz	r0, 800444a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 800443c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800443e:	4621      	mov	r1, r4
 8004440:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4718      	bx	r3
    }
 800444a:	bd10      	pop	{r4, pc}

0800444c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800444c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800444e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004450:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004452:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004456:	b28d      	uxth	r5, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b92b      	cbnz	r3, 8004468 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800445e:	216c      	movs	r1, #108	; 0x6c
 8004460:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004462:	4811      	ldr	r0, [pc, #68]	; (80044a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004464:	f026 f9dc 	bl	802a820 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004468:	4910      	ldr	r1, [pc, #64]	; (80044ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800446a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800446c:	8809      	ldrh	r1, [r1, #0]
 800446e:	4291      	cmp	r1, r2
 8004470:	d803      	bhi.n	800447a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004474:	216d      	movs	r1, #109	; 0x6d
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004478:	e7f3      	b.n	8004462 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800447a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004486:	6803      	ldr	r3, [r0, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	4798      	blx	r3
 800448c:	1a28      	subs	r0, r5, r0
 800448e:	4633      	mov	r3, r6
 8004490:	b201      	sxth	r1, r0
 8004492:	4620      	mov	r0, r4
    }
 8004494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004498:	4718      	bx	r3
 800449a:	bf00      	nop
 800449c:	20015638 	.word	0x20015638
 80044a0:	0802d6f4 	.word	0x0802d6f4
 80044a4:	0802d736 	.word	0x0802d736
 80044a8:	0802d771 	.word	0x0802d771
 80044ac:	2001563c 	.word	0x2001563c
 80044b0:	0802e10c 	.word	0x0802e10c
 80044b4:	20015640 	.word	0x20015640

080044b8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80044b8:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80044ba:	b570      	push	{r4, r5, r6, lr}
 80044bc:	4604      	mov	r4, r0
 80044be:	460d      	mov	r5, r1
        return pressed;
 80044c0:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80044c4:	b99b      	cbnz	r3, 80044ee <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x36>
 80044c6:	b98e      	cbnz	r6, 80044ec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80044c8:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 80044cc:	4620      	mov	r0, r4
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044da:	4798      	blx	r3
        {
            setPressed(newPressedValue);
            invalidate();
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	4620      	mov	r0, r4
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 80044e4:	b116      	cbz	r6, 80044ec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
 80044e6:	792b      	ldrb	r3, [r5, #4]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d003      	beq.n	80044f4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	d0fc      	beq.n	80044ec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
 80044f2:	e7e9      	b.n	80044c8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    }
 80044fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004500:	4718      	bx	r3

08004502 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    if (&src == &btnSettingsCancel)
 8004502:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8004506:	4291      	cmp	r1, r2
{
 8004508:	b510      	push	{r4, lr}
    if (&src == &btnSettingsCancel)
 800450a:	d105      	bne.n	8004518 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800450c:	f017 fbda 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
}
 8004510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoMainScreenNoTransition();
 8004514:	f7ff b974 	b.w	8003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    else if (&src == &toggleButtonWiFi)
 8004518:	f500 727c 	add.w	r2, r0, #1008	; 0x3f0
 800451c:	4291      	cmp	r1, r2
 800451e:	d104      	bne.n	800452a <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
        wifi_toggle();
 8004520:	6803      	ldr	r3, [r0, #0]
}
 8004522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        wifi_toggle();
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4718      	bx	r3
}
 800452a:	bd10      	pop	{r4, pc}

0800452c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800452c:	2200      	movs	r2, #0
 800452e:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004532:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004534:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8004538:	4770      	bx	lr
	...

0800453c <_ZN8touchgfx3BoxC1Ev>:
    Box()
 800453c:	b510      	push	{r4, lr}
 800453e:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8004540:	2226      	movs	r2, #38	; 0x26
 8004542:	2100      	movs	r1, #0
 8004544:	f026 faf2 	bl	802ab2c <memset>
 8004548:	4620      	mov	r0, r4
 800454a:	f7fe ff45 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 8004550:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	23ff      	movs	r3, #255	; 0xff
 8004556:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 800455a:	2300      	movs	r3, #0
 800455c:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 800455e:	bd10      	pop	{r4, pc}
 8004560:	08030bf4 	.word	0x08030bf4

08004564 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004568:	2226      	movs	r2, #38	; 0x26
 800456a:	2100      	movs	r1, #0
 800456c:	f026 fade 	bl	802ab2c <memset>
 8004570:	4620      	mov	r0, r4
 8004572:	f7fe ff31 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004578:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 800457c:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800457e:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004582:	62a3      	str	r3, [r4, #40]	; 0x28
 8004584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004588:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800458a:	2300      	movs	r3, #0
 800458c:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	8723      	strh	r3, [r4, #56]	; 0x38
 8004596:	63e3      	str	r3, [r4, #60]	; 0x3c
              text(0)
 8004598:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	08030b64 	.word	0x08030b64
 80045a4:	0802d828 	.word	0x0802d828

080045a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
        : pressed(false), alpha(255), action(0)
 80045a8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    BoxWithBorderButtonStyle()
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	8583      	strh	r3, [r0, #44]	; 0x2c
        touchable = touch;
 80045b0:	f240 1301 	movw	r3, #257	; 0x101
          firstChild(0)
 80045b4:	2500      	movs	r5, #0
        : T(), up(), down()
 80045b6:	4606      	mov	r6, r0
 80045b8:	8483      	strh	r3, [r0, #36]	; 0x24
    BoxWithBorderButtonStyle()
 80045ba:	4604      	mov	r4, r0
        : T(), up(), down()
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x5c>)
 80045be:	6285      	str	r5, [r0, #40]	; 0x28
 80045c0:	6305      	str	r5, [r0, #48]	; 0x30
        : x(0), y(0), width(0), height(0)
 80045c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045c6:	e9c0 5503 	strd	r5, r5, [r0, #12]
          visible(true)
 80045ca:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80045ce:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80045d2:	f846 3b34 	str.w	r3, [r6], #52
        : Box(), borderColor(0), borderSize(0)
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff ffb0 	bl	800453c <_ZN8touchgfx3BoxC1Ev>
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x60>)
        borderBox.setXY(0, 0);
 80045de:	462a      	mov	r2, r5
 80045e0:	4629      	mov	r1, r5
 80045e2:	4630      	mov	r0, r6
 80045e4:	6363      	str	r3, [r4, #52]	; 0x34
        : color(col)
 80045e6:	6625      	str	r5, [r4, #96]	; 0x60
 80045e8:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
        : color(0)
 80045ec:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80045f0:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 80045f4:	f7fe fee3 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80045f8:	4620      	mov	r0, r4
 80045fa:	4631      	mov	r1, r6
 80045fc:	f013 fd36 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004600:	4620      	mov	r0, r4
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	0802e21c 	.word	0x0802e21c
 8004608:	08030cd0 	.word	0x08030cd0

0800460c <_ZN16SettingsViewBaseC1Ev>:
SettingsViewBase::SettingsViewBase() :
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	2500      	movs	r5, #0
 8004614:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004618:	4eea      	ldr	r6, [pc, #936]	; (80049c4 <_ZN16SettingsViewBaseC1Ev+0x3b8>)
    flexButtonCallback(this, &SettingsViewBase::flexButtonCallbackHandler)
 800461a:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
 800461e:	f504 7932 	add.w	r9, r4, #712	; 0x2c8
 8004622:	f504 7845 	add.w	r8, r4, #788	; 0x314
 8004626:	f504 6b8e 	add.w	fp, r4, #1136	; 0x470
SettingsViewBase::SettingsViewBase() :
 800462a:	ed2d 8b0e 	vpush	{d8-d14}
 800462e:	b08d      	sub	sp, #52	; 0x34
 8004630:	f018 fd82 	bl	801d138 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &SettingsViewBase::flexButtonCallbackHandler)
 8004634:	4be4      	ldr	r3, [pc, #912]	; (80049c8 <_ZN16SettingsViewBaseC1Ev+0x3bc>)
 8004636:	4622      	mov	r2, r4
 8004638:	63e5      	str	r5, [r4, #60]	; 0x3c
 800463a:	f842 3b40 	str.w	r3, [r2], #64
 800463e:	4610      	mov	r0, r2
 8004640:	ee08 2a10 	vmov	s16, r2
 8004644:	f7ff ff7a 	bl	800453c <_ZN8touchgfx3BoxC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 8004648:	2226      	movs	r2, #38	; 0x26
 800464a:	4629      	mov	r1, r5
 800464c:	4650      	mov	r0, sl
 800464e:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004652:	f026 fa6b 	bl	802ab2c <memset>
 8004656:	4650      	mov	r0, sl
 8004658:	f7fe febe 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 800465c:	4bdb      	ldr	r3, [pc, #876]	; (80049cc <_ZN16SettingsViewBaseC1Ev+0x3c0>)
        Image::setBitmap(bmp);
 800465e:	a90a      	add	r1, sp, #40	; 0x28
 8004660:	4650      	mov	r0, sl
        : Widget(), bitmap(bmp), alpha(255)
 8004662:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004664:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8004668:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
 800466c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8004670:	f015 fcda 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004674:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8004678:	4618      	mov	r0, r3
 800467a:	ee08 3a90 	vmov	s17, r3
 800467e:	f015 fe05 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004682:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8004686:	4618      	mov	r0, r3
 8004688:	ee09 3a10 	vmov	s18, r3
 800468c:	f015 fdfe 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004690:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8004694:	4618      	mov	r0, r3
 8004696:	ee09 3a90 	vmov	s19, r3
 800469a:	f7ff ff63 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
 800469e:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80046a2:	4618      	mov	r0, r3
 80046a4:	ee0e 3a10 	vmov	s28, r3
 80046a8:	f7ff ff48 	bl	800453c <_ZN8touchgfx3BoxC1Ev>
 80046ac:	f504 73d2 	add.w	r3, r4, #420	; 0x1a4
 80046b0:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
 80046b4:	4618      	mov	r0, r3
        : color(col)
 80046b6:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
 80046ba:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
 80046be:	ee0a 3a10 	vmov	s20, r3
 80046c2:	f7ff ff71 	bl	80045a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80046c6:	f504 7307 	add.w	r3, r4, #540	; 0x21c
 80046ca:	4618      	mov	r0, r3
 80046cc:	ee0e 3a90 	vmov	s29, r3
 80046d0:	f7ff ff34 	bl	800453c <_ZN8touchgfx3BoxC1Ev>
 80046d4:	f504 7314 	add.w	r3, r4, #592	; 0x250
 80046d8:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
 80046dc:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 80046de:	4ebc      	ldr	r6, [pc, #752]	; (80049d0 <_ZN16SettingsViewBaseC1Ev+0x3c4>)
 80046e0:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
 80046e4:	ee0a 3a90 	vmov	s21, r3
 80046e8:	f8a4 524c 	strh.w	r5, [r4, #588]	; 0x24c
 80046ec:	f7ff ff5c 	bl	80045a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
        : TextArea()
 80046f0:	4648      	mov	r0, r9
 80046f2:	f7ff ff37 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80046f6:	f8c4 62c8 	str.w	r6, [r4, #712]	; 0x2c8
        : TextArea()
 80046fa:	4640      	mov	r0, r8
        : TextAreaWithWildcardBase(), wc1(0)
 80046fc:	f8c4 5310 	str.w	r5, [r4, #784]	; 0x310
        : TextArea()
 8004700:	f7ff ff30 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
 8004704:	f504 7358 	add.w	r3, r4, #864	; 0x360
        : TextAreaWithWildcardBase(), wc1(0)
 8004708:	f8c4 6314 	str.w	r6, [r4, #788]	; 0x314
 800470c:	4618      	mov	r0, r3
 800470e:	f8c4 535c 	str.w	r5, [r4, #860]	; 0x35c
 8004712:	ee0b 3a10 	vmov	s22, r3
 8004716:	f7ff ff25 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
 800471a:	f504 736a 	add.w	r3, r4, #936	; 0x3a8
 800471e:	4618      	mov	r0, r3
 8004720:	ee0b 3a90 	vmov	s23, r3
 8004724:	f7ff ff1e 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
 8004728:	f504 737c 	add.w	r3, r4, #1008	; 0x3f0
        : Widget(), action(), pressed(false)
 800472c:	2226      	movs	r2, #38	; 0x26
 800472e:	4629      	mov	r1, r5
 8004730:	ee0c 3a10 	vmov	s24, r3
 8004734:	4618      	mov	r0, r3
 8004736:	f026 f9f9 	bl	802ab2c <memset>
 800473a:	ee1c 0a10 	vmov	r0, s24
 800473e:	f7fe fe4b 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8004742:	f04f 0301 	mov.w	r3, #1
 8004746:	f8a4 741e 	strh.w	r7, [r4, #1054]	; 0x41e
 800474a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 800474e:	4ba1      	ldr	r3, [pc, #644]	; (80049d4 <_ZN16SettingsViewBaseC1Ev+0x3c8>)
 8004750:	f8a4 7420 	strh.w	r7, [r4, #1056]	; 0x420
 8004754:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
 8004758:	f504 6385 	add.w	r3, r4, #1064	; 0x428
 800475c:	f884 7422 	strb.w	r7, [r4, #1058]	; 0x422
 8004760:	4618      	mov	r0, r3
 8004762:	f8a4 7424 	strh.w	r7, [r4, #1060]	; 0x424
 8004766:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 800476a:	ee0c 3a90 	vmov	s25, r3
 800476e:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        color = col;
 8004772:	f04f 37ff 	mov.w	r7, #4294967295
 8004776:	f7ff fef5 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
        : TextArea()
 800477a:	4658      	mov	r0, fp
 800477c:	f7ff fef2 	bl	8004564 <_ZN8touchgfx8TextAreaC1Ev>
 8004780:	f204 43bc 	addw	r3, r4, #1212	; 0x4bc
        : TextAreaWithWildcardBase(), wc1(0)
 8004784:	f8c4 6470 	str.w	r6, [r4, #1136]	; 0x470
 8004788:	f04f 0607 	mov.w	r6, #7
 800478c:	4618      	mov	r0, r3
 800478e:	f8c4 54b8 	str.w	r5, [r4, #1208]	; 0x4b8
 8004792:	ee0d 3a10 	vmov	s26, r3
 8004796:	f015 fd79 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800479a:	f204 5304 	addw	r3, r4, #1284	; 0x504
 800479e:	4618      	mov	r0, r3
 80047a0:	ee0d 3a90 	vmov	s27, r3
 80047a4:	f015 fd72 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80047a8:	4b8b      	ldr	r3, [pc, #556]	; (80049d8 <_ZN16SettingsViewBaseC1Ev+0x3cc>)
    __background.setPosition(0, 0, 480, 272);
 80047aa:	462a      	mov	r2, r5
 80047ac:	4629      	mov	r1, r5
 80047ae:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
 80047b2:	ee18 0a10 	vmov	r0, s16
 80047b6:	4b89      	ldr	r3, [pc, #548]	; (80049dc <_ZN16SettingsViewBaseC1Ev+0x3d0>)
 80047b8:	f8c4 4598 	str.w	r4, [r4, #1432]	; 0x598
 80047bc:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
 80047c0:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <_ZN16SettingsViewBaseC1Ev+0x3d4>)
 80047c2:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
 80047c6:	f8c4 35a4 	str.w	r3, [r4, #1444]	; 0x5a4
 80047ca:	4b86      	ldr	r3, [pc, #536]	; (80049e4 <_ZN16SettingsViewBaseC1Ev+0x3d8>)
 80047cc:	f8c4 45a8 	str.w	r4, [r4, #1448]	; 0x5a8
 80047d0:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
 80047d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80047d8:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80047e2:	f7ff fb92 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80047e6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    settingsBG.setXY(0, 0);
 80047ea:	462a      	mov	r2, r5
 80047ec:	4629      	mov	r1, r5
 80047ee:	4650      	mov	r0, sl
 80047f0:	66a3      	str	r3, [r4, #104]	; 0x68
 80047f2:	f7fe fde4 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 80047f6:	f04f 0301 	mov.w	r3, #1
    settingsBG.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 80047fa:	a90a      	add	r1, sp, #40	; 0x28
 80047fc:	4650      	mov	r0, sl
 80047fe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004802:	f015 fc11 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    btnSettingsCancel.setXY(0, 212);
 8004806:	22d4      	movs	r2, #212	; 0xd4
 8004808:	4629      	mov	r1, r5
 800480a:	ee18 0a90 	vmov	r0, s17
 800480e:	f7fe fdd6 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004812:	f04f 0308 	mov.w	r3, #8
    btnSettingsCancel.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004816:	aa0a      	add	r2, sp, #40	; 0x28
 8004818:	a909      	add	r1, sp, #36	; 0x24
 800481a:	ee18 0a90 	vmov	r0, s17
 800481e:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8004822:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004826:	f015 f9dc 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800482a:	2314      	movs	r3, #20
        updateTextPosition();
 800482c:	ee18 0a90 	vmov	r0, s17
 8004830:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
 8004834:	f7fe fde2 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btnSettingsCancel.setAction(buttonCallback);
 8004838:	f204 5294 	addw	r2, r4, #1428	; 0x594
    btnSettingsSave.setXY(420, 212);
 800483c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004840:	ee19 0a10 	vmov	r0, s18
    btnSettingsCancel.setAction(buttonCallback);
 8004844:	9202      	str	r2, [sp, #8]
        action = &callback;
 8004846:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    btnSettingsSave.setXY(420, 212);
 800484a:	22d4      	movs	r2, #212	; 0xd4
        colorPressed = col;
 800484c:	e9c4 7735 	strd	r7, r7, [r4, #212]	; 0xd4
 8004850:	f7fe fdb5 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004854:	f04f 0308 	mov.w	r3, #8
    btnSettingsSave.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004858:	aa0a      	add	r2, sp, #40	; 0x28
 800485a:	a909      	add	r1, sp, #36	; 0x24
 800485c:	ee19 0a10 	vmov	r0, s18
 8004860:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8004864:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004868:	f015 f9bb 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800486c:	2313      	movs	r3, #19
        boundingArea = calculateBoundingArea();
 800486e:	ae04      	add	r6, sp, #16
        updateTextPosition();
 8004870:	ee19 0a10 	vmov	r0, s18
 8004874:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8004878:	f7fe fdc0 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    settingsHeader.setXY(199, 0);
 800487c:	462a      	mov	r2, r5
 800487e:	21c7      	movs	r1, #199	; 0xc7
 8004880:	ee19 0a90 	vmov	r0, s19
        colorPressed = col;
 8004884:	e9c4 7747 	strd	r7, r7, [r4, #284]	; 0x11c
 8004888:	f7fe fd99 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 800488c:	ee19 1a90 	vmov	r1, s19
 8004890:	4630      	mov	r0, r6
        color = newColor;
 8004892:	f8c4 7158 	str.w	r7, [r4, #344]	; 0x158
        linespace = space;
 8004896:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
        boundingArea = calculateBoundingArea();
 800489a:	f014 feb7 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800489e:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 80048a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <_ZN16SettingsViewBaseC1Ev+0x3dc>)
    settingsHeader.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IMOE));
 80048ac:	a90a      	add	r1, sp, #40	; 0x28
 80048ae:	ee19 0a90 	vmov	r0, s19
 80048b2:	930a      	str	r3, [sp, #40]	; 0x28
 80048b4:	230b      	movs	r3, #11
 80048b6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80048ba:	f015 f937 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    boxWithBorderSSID.setPosition(117, 63, 246, 50);
 80048be:	2332      	movs	r3, #50	; 0x32
 80048c0:	223f      	movs	r2, #63	; 0x3f
 80048c2:	2175      	movs	r1, #117	; 0x75
 80048c4:	ee1e 0a10 	vmov	r0, s28
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	23f6      	movs	r3, #246	; 0xf6
 80048cc:	f7ff fb1d 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80048d0:	f04f 0202 	mov.w	r2, #2
 80048d4:	4b45      	ldr	r3, [pc, #276]	; (80049ec <_ZN16SettingsViewBaseC1Ev+0x3e0>)
        borderBox.setPosition(x, y, width, height);
 80048d6:	4629      	mov	r1, r5
 80048d8:	f8a4 21a0 	strh.w	r2, [r4, #416]	; 0x1a0
 80048dc:	2232      	movs	r2, #50	; 0x32
 80048de:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 80048e2:	9200      	str	r2, [sp, #0]
 80048e4:	462a      	mov	r2, r5
        borderColor = colorBorder;
 80048e6:	e9c4 3766 	strd	r3, r7, [r4, #408]	; 0x198
 80048ea:	23f6      	movs	r3, #246	; 0xf6
 80048ec:	f7ff fb0d 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 80048f0:	f04f 0105 	mov.w	r1, #5
        down = colorPressed;
 80048f4:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <_ZN16SettingsViewBaseC1Ev+0x3e4>)
        borderDown = borderColorPressed;
 80048f6:	4b3f      	ldr	r3, [pc, #252]	; (80049f4 <_ZN16SettingsViewBaseC1Ev+0x3e8>)
 80048f8:	483f      	ldr	r0, [pc, #252]	; (80049f8 <_ZN16SettingsViewBaseC1Ev+0x3ec>)
 80048fa:	f8a4 1208 	strh.w	r1, [r4, #520]	; 0x208
        down = colorPressed;
 80048fe:	493f      	ldr	r1, [pc, #252]	; (80049fc <_ZN16SettingsViewBaseC1Ev+0x3f0>)
        borderDown = borderColorPressed;
 8004900:	e9c4 0385 	strd	r0, r3, [r4, #532]	; 0x214
        down = colorPressed;
 8004904:	e9c4 2183 	strd	r2, r1, [r4, #524]	; 0x20c
        handlePressedUpdated();
 8004908:	ee1a 0a10 	vmov	r0, s20
 800490c:	f7ff fd18 	bl	8004340 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButtonSSID.setPosition(117, 63, 246, 50);
 8004910:	f04f 0e32 	mov.w	lr, #50	; 0x32
 8004914:	223f      	movs	r2, #63	; 0x3f
 8004916:	2175      	movs	r1, #117	; 0x75
 8004918:	f8cd e000 	str.w	lr, [sp]
 800491c:	23f6      	movs	r3, #246	; 0xf6
 800491e:	ee1a 0a10 	vmov	r0, s20
 8004922:	f7ff faf2 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 8004926:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800492a:	ee1a 0a10 	vmov	r0, s20
        alpha = newAlpha;
 800492e:	f884 51d1 	strb.w	r5, [r4, #465]	; 0x1d1
        handleAlphaUpdated();
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	4798      	blx	r3
    boxWithBorderPass.setPosition(117, 123, 246, 50);
 8004938:	f04f 0e32 	mov.w	lr, #50	; 0x32
 800493c:	23f6      	movs	r3, #246	; 0xf6
 800493e:	227b      	movs	r2, #123	; 0x7b
 8004940:	2175      	movs	r1, #117	; 0x75
 8004942:	ee1e 0a90 	vmov	r0, s29
 8004946:	f8cd e000 	str.w	lr, [sp]
 800494a:	f7ff fade 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        borderBox.setPosition(x, y, width, height);
 800494e:	f04f 0e32 	mov.w	lr, #50	; 0x32
 8004952:	f04f 0c02 	mov.w	ip, #2
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <_ZN16SettingsViewBaseC1Ev+0x3e0>)
 8004958:	f8cd e000 	str.w	lr, [sp]
 800495c:	462a      	mov	r2, r5
 800495e:	4629      	mov	r1, r5
 8004960:	f504 7021 	add.w	r0, r4, #644	; 0x284
 8004964:	f8a4 c24c 	strh.w	ip, [r4, #588]	; 0x24c
        borderColor = colorBorder;
 8004968:	e9c4 3791 	strd	r3, r7, [r4, #580]	; 0x244
 800496c:	23f6      	movs	r3, #246	; 0xf6
 800496e:	f7ff facc 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 8004972:	f04f 0c05 	mov.w	ip, #5
        down = colorPressed;
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <_ZN16SettingsViewBaseC1Ev+0x3e4>)
 8004978:	4920      	ldr	r1, [pc, #128]	; (80049fc <_ZN16SettingsViewBaseC1Ev+0x3f0>)
        borderDown = borderColorPressed;
 800497a:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <_ZN16SettingsViewBaseC1Ev+0x3e8>)
 800497c:	481e      	ldr	r0, [pc, #120]	; (80049f8 <_ZN16SettingsViewBaseC1Ev+0x3ec>)
 800497e:	f8a4 c2b4 	strh.w	ip, [r4, #692]	; 0x2b4
        down = colorPressed;
 8004982:	e9c4 21ae 	strd	r2, r1, [r4, #696]	; 0x2b8
        borderDown = borderColorPressed;
 8004986:	e9c4 03b0 	strd	r0, r3, [r4, #704]	; 0x2c0
        handlePressedUpdated();
 800498a:	ee1a 0a90 	vmov	r0, s21
 800498e:	f7ff fcd7 	bl	8004340 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButtonPass.setPosition(117, 123, 246, 50);
 8004992:	2332      	movs	r3, #50	; 0x32
 8004994:	227b      	movs	r2, #123	; 0x7b
 8004996:	2175      	movs	r1, #117	; 0x75
 8004998:	ee1a 0a90 	vmov	r0, s21
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	23f6      	movs	r3, #246	; 0xf6
 80049a0:	f7ff fab3 	bl	8003f0a <_ZN8touchgfx8Drawable11setPositionEssss>
 80049a4:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
 80049a8:	ee1a 0a90 	vmov	r0, s21
        alpha = newAlpha;
 80049ac:	f884 527d 	strb.w	r5, [r4, #637]	; 0x27d
        handleAlphaUpdated();
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	4798      	blx	r3
    textAreaSSID.setXY(123, 76);
 80049b6:	224c      	movs	r2, #76	; 0x4c
 80049b8:	217b      	movs	r1, #123	; 0x7b
 80049ba:	4648      	mov	r0, r9
 80049bc:	f7fe fcff 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 80049c0:	e01e      	b.n	8004a00 <_ZN16SettingsViewBaseC1Ev+0x3f4>
 80049c2:	bf00      	nop
 80049c4:	08030cd0 	.word	0x08030cd0
 80049c8:	0802e2e8 	.word	0x0802e2e8
 80049cc:	08030d38 	.word	0x08030d38
 80049d0:	0802e18c 	.word	0x0802e18c
 80049d4:	08030af0 	.word	0x08030af0
 80049d8:	0802e2b8 	.word	0x0802e2b8
 80049dc:	08004503 	.word	0x08004503
 80049e0:	0802e2d0 	.word	0x0802e2d0
 80049e4:	0800433f 	.word	0x0800433f
 80049e8:	0802d828 	.word	0x0802d828
 80049ec:	ff9e9e9e 	.word	0xff9e9e9e
 80049f0:	ff006699 	.word	0xff006699
 80049f4:	ff336699 	.word	0xff336699
 80049f8:	ff003366 	.word	0xff003366
 80049fc:	ff0099cc 	.word	0xff0099cc
        color = newColor;
 8004a00:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8004a04:	4649      	mov	r1, r9
 8004a06:	4630      	mov	r0, r6
        color = newColor;
 8004a08:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
        boundingArea = calculateBoundingArea();
 8004a0c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
        linespace = space;
 8004a10:	f8a4 52fc 	strh.w	r5, [r4, #764]	; 0x2fc
        boundingArea = calculateBoundingArea();
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a18:	4798      	blx	r3
 8004a1a:	f504 7341 	add.w	r3, r4, #772	; 0x304
 8004a1e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(textAreaSSIDBuffer, TEXTAREASSID_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BAJ3).getText());
 8004a26:	f204 534c 	addw	r3, r4, #1356	; 0x54c
 8004a2a:	9303      	str	r3, [sp, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004a2c:	4bdc      	ldr	r3, [pc, #880]	; (8004da0 <_ZN16SettingsViewBaseC1Ev+0x794>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	b92b      	cbnz	r3, 8004a3e <_ZN16SettingsViewBaseC1Ev+0x432>
 8004a32:	4bdc      	ldr	r3, [pc, #880]	; (8004da4 <_ZN16SettingsViewBaseC1Ev+0x798>)
 8004a34:	2160      	movs	r1, #96	; 0x60
 8004a36:	4adc      	ldr	r2, [pc, #880]	; (8004da8 <_ZN16SettingsViewBaseC1Ev+0x79c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004a38:	48dc      	ldr	r0, [pc, #880]	; (8004dac <_ZN16SettingsViewBaseC1Ev+0x7a0>)
 8004a3a:	f025 fef1 	bl	802a820 <__assert_func>
 8004a3e:	4bdc      	ldr	r3, [pc, #880]	; (8004db0 <_ZN16SettingsViewBaseC1Ev+0x7a4>)
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d803      	bhi.n	8004a4e <_ZN16SettingsViewBaseC1Ev+0x442>
 8004a46:	4bdb      	ldr	r3, [pc, #876]	; (8004db4 <_ZN16SettingsViewBaseC1Ev+0x7a8>)
 8004a48:	2161      	movs	r1, #97	; 0x61
 8004a4a:	4ad7      	ldr	r2, [pc, #860]	; (8004da8 <_ZN16SettingsViewBaseC1Ev+0x79c>)
 8004a4c:	e7f4      	b.n	8004a38 <_ZN16SettingsViewBaseC1Ev+0x42c>
        return texts->getText(typedTextId);
 8004a4e:	4bda      	ldr	r3, [pc, #872]	; (8004db8 <_ZN16SettingsViewBaseC1Ev+0x7ac>)
 8004a50:	2108      	movs	r1, #8
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	f000 fc32 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8004a58:	4ad8      	ldr	r2, [pc, #864]	; (8004dbc <_ZN16SettingsViewBaseC1Ev+0x7b0>)
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2112      	movs	r1, #18
 8004a5e:	9803      	ldr	r0, [sp, #12]
 8004a60:	f019 fff4 	bl	801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8004a64:	9903      	ldr	r1, [sp, #12]
    textAreaSSID.resizeToCurrentText();
 8004a66:	4648      	mov	r0, r9
 8004a68:	f8c4 1310 	str.w	r1, [r4, #784]	; 0x310
 8004a6c:	f015 f83e 	bl	8019aec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004a70:	4bd3      	ldr	r3, [pc, #844]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
    textAreaSSID.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P5QY));
 8004a72:	a90a      	add	r1, sp, #40	; 0x28
 8004a74:	4648      	mov	r0, r9
 8004a76:	930a      	str	r3, [sp, #40]	; 0x28
 8004a78:	230a      	movs	r3, #10
 8004a7a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004a7e:	f015 f855 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaPass.setXY(123, 136);
 8004a82:	2288      	movs	r2, #136	; 0x88
 8004a84:	217b      	movs	r1, #123	; 0x7b
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7fe fc99 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004a8c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8004a90:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
 8004a94:	4630      	mov	r0, r6
        color = newColor;
 8004a96:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
        boundingArea = calculateBoundingArea();
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8004aa0:	f8a4 5348 	strh.w	r5, [r4, #840]	; 0x348
        boundingArea = calculateBoundingArea();
 8004aa4:	4798      	blx	r3
 8004aa6:	f504 7354 	add.w	r3, r4, #848	; 0x350
 8004aaa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004ab2:	49bb      	ldr	r1, [pc, #748]	; (8004da0 <_ZN16SettingsViewBaseC1Ev+0x794>)
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0bb      	beq.n	8004a32 <_ZN16SettingsViewBaseC1Ev+0x426>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004aba:	48bd      	ldr	r0, [pc, #756]	; (8004db0 <_ZN16SettingsViewBaseC1Ev+0x7a4>)
 8004abc:	8803      	ldrh	r3, [r0, #0]
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	d9c1      	bls.n	8004a46 <_ZN16SettingsViewBaseC1Ev+0x43a>
        return texts->getText(typedTextId);
 8004ac2:	4abd      	ldr	r2, [pc, #756]	; (8004db8 <_ZN16SettingsViewBaseC1Ev+0x7ac>)
 8004ac4:	2107      	movs	r1, #7
 8004ac6:	6810      	ldr	r0, [r2, #0]
 8004ac8:	f000 fbf8 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8004acc:	f8c4 035c 	str.w	r0, [r4, #860]	; 0x35c
    textAreaPass.resizeToCurrentText();
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f015 f80b 	bl	8019aec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004ad6:	4bba      	ldr	r3, [pc, #744]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
    textAreaPass.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7167));
 8004ad8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8004adc:	4640      	mov	r0, r8
 8004ade:	930a      	str	r3, [sp, #40]	; 0x28
 8004ae0:	2309      	movs	r3, #9
 8004ae2:	4661      	mov	r1, ip
 8004ae4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004ae8:	f015 f820 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea1.setXY(60, 76);
 8004aec:	224c      	movs	r2, #76	; 0x4c
 8004aee:	213c      	movs	r1, #60	; 0x3c
 8004af0:	ee1b 0a10 	vmov	r0, s22
 8004af4:	f7fe fc63 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004af8:	4630      	mov	r0, r6
 8004afa:	ee1b 1a10 	vmov	r1, s22
        color = newColor;
 8004afe:	f8c4 7390 	str.w	r7, [r4, #912]	; 0x390
        linespace = space;
 8004b02:	f8a4 5394 	strh.w	r5, [r4, #916]	; 0x394
        boundingArea = calculateBoundingArea();
 8004b06:	f014 fd81 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004b0a:	f504 7367 	add.w	r3, r4, #924	; 0x39c
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AVRV));
 8004b0e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8004b12:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b1a:	4ba9      	ldr	r3, [pc, #676]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
 8004b1c:	4661      	mov	r1, ip
 8004b1e:	ee1b 0a10 	vmov	r0, s22
 8004b22:	930a      	str	r3, [sp, #40]	; 0x28
 8004b24:	2306      	movs	r3, #6
 8004b26:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004b2a:	f014 ffff 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea1_1.setXY(67, 136);
 8004b2e:	2288      	movs	r2, #136	; 0x88
 8004b30:	2143      	movs	r1, #67	; 0x43
 8004b32:	ee1b 0a90 	vmov	r0, s23
 8004b36:	f7fe fc42 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8004b40:	f8c4 73d8 	str.w	r7, [r4, #984]	; 0x3d8
        linespace = space;
 8004b44:	f8a4 53dc 	strh.w	r5, [r4, #988]	; 0x3dc
        boundingArea = calculateBoundingArea();
 8004b48:	f014 fd60 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004b4c:	f04f 0c05 	mov.w	ip, #5
 8004b50:	f504 7379 	add.w	r3, r4, #996	; 0x3e4
 8004b54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004b58:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CHWV));
 8004b5c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8004b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b64:	4b96      	ldr	r3, [pc, #600]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
 8004b66:	4661      	mov	r1, ip
 8004b68:	ee1b 0a90 	vmov	r0, s23
 8004b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b6e:	f014 ffdd 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    toggleButtonWiFi.setXY(176, 223);
 8004b72:	22df      	movs	r2, #223	; 0xdf
 8004b74:	21b0      	movs	r1, #176	; 0xb0
 8004b76:	ee1c 0a10 	vmov	r0, s24
 8004b7a:	f7fe fc20 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004b7e:	f04f 0c03 	mov.w	ip, #3
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8004b82:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004b86:	ee1c 0a10 	vmov	r0, s24
 8004b8a:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8004b8e:	f04f 0c04 	mov.w	ip, #4
 8004b92:	4672      	mov	r2, lr
 8004b94:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
        originalPressed = bitmapPressed;
 8004b98:	f8a4 c424 	strh.w	ip, [r4, #1060]	; 0x424
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8004b9c:	4671      	mov	r1, lr
 8004b9e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8004ba2:	f015 f81e 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004ba6:	9a02      	ldr	r2, [sp, #8]
    textArea1_1_1.setXY(219, 199);
 8004ba8:	21db      	movs	r1, #219	; 0xdb
 8004baa:	ee1c 0a90 	vmov	r0, s25
 8004bae:	f8c4 2418 	str.w	r2, [r4, #1048]	; 0x418
 8004bb2:	22c7      	movs	r2, #199	; 0xc7
 8004bb4:	f7fe fc03 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004bb8:	4630      	mov	r0, r6
 8004bba:	ee1c 1a90 	vmov	r1, s25
        color = newColor;
 8004bbe:	f8c4 7458 	str.w	r7, [r4, #1112]	; 0x458
        linespace = space;
 8004bc2:	f8a4 545c 	strh.w	r5, [r4, #1116]	; 0x45c
        boundingArea = calculateBoundingArea();
 8004bc6:	f014 fd21 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004bca:	f204 4364 	addw	r3, r4, #1124	; 0x464
    textArea1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X6LV));
 8004bce:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004bd2:	f04f 0c04 	mov.w	ip, #4
 8004bd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004bde:	4b78      	ldr	r3, [pc, #480]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
 8004be0:	4671      	mov	r1, lr
 8004be2:	ee1c 0a90 	vmov	r0, s25
 8004be6:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8004bea:	930a      	str	r3, [sp, #40]	; 0x28
 8004bec:	f014 ff9e 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaWifiState.setXY(153, 33);
 8004bf0:	2221      	movs	r2, #33	; 0x21
 8004bf2:	2199      	movs	r1, #153	; 0x99
 8004bf4:	4658      	mov	r0, fp
 8004bf6:	f7fe fbe2 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004bfa:	4b72      	ldr	r3, [pc, #456]	; (8004dc4 <_ZN16SettingsViewBaseC1Ev+0x7b8>)
        boundingArea = calculateBoundingArea();
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	4659      	mov	r1, fp
        color = newColor;
 8004c00:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
        boundingArea = calculateBoundingArea();
 8004c04:	f8d4 3470 	ldr.w	r3, [r4, #1136]	; 0x470
        linespace = space;
 8004c08:	f8a4 54a4 	strh.w	r5, [r4, #1188]	; 0x4a4
        boundingArea = calculateBoundingArea();
 8004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c10:	4798      	blx	r3
 8004c12:	f204 43ac 	addw	r3, r4, #1196	; 0x4ac
 8004c16:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004c1e:	4960      	ldr	r1, [pc, #384]	; (8004da0 <_ZN16SettingsViewBaseC1Ev+0x794>)
    Unicode::snprintf(textAreaWifiStateBuffer, TEXTAREAWIFISTATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TO40).getText());
 8004c20:	f504 66ae 	add.w	r6, r4, #1392	; 0x570
 8004c24:	680b      	ldr	r3, [r1, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f43f af03 	beq.w	8004a32 <_ZN16SettingsViewBaseC1Ev+0x426>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004c2c:	4860      	ldr	r0, [pc, #384]	; (8004db0 <_ZN16SettingsViewBaseC1Ev+0x7a4>)
 8004c2e:	8803      	ldrh	r3, [r0, #0]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f67f af08 	bls.w	8004a46 <_ZN16SettingsViewBaseC1Ev+0x43a>
        return texts->getText(typedTextId);
 8004c36:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <_ZN16SettingsViewBaseC1Ev+0x7ac>)
 8004c38:	2102      	movs	r1, #2
 8004c3a:	6810      	ldr	r0, [r2, #0]
 8004c3c:	f000 fb3e 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8004c40:	4a5e      	ldr	r2, [pc, #376]	; (8004dbc <_ZN16SettingsViewBaseC1Ev+0x7b0>)
 8004c42:	4603      	mov	r3, r0
 8004c44:	2112      	movs	r1, #18
 8004c46:	4630      	mov	r0, r6
 8004c48:	f019 ff00 	bl	801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaWifiState.resizeToCurrentText();
 8004c4c:	4658      	mov	r0, fp
 8004c4e:	f8c4 64b8 	str.w	r6, [r4, #1208]	; 0x4b8
 8004c52:	f04f 0607 	mov.w	r6, #7
 8004c56:	f014 ff49 	bl	8019aec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004c5a:	f04f 0c03 	mov.w	ip, #3
 8004c5e:	4b58      	ldr	r3, [pc, #352]	; (8004dc0 <_ZN16SettingsViewBaseC1Ev+0x7b4>)
    textAreaWifiState.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PIEH));
 8004c60:	a90a      	add	r1, sp, #40	; 0x28
 8004c62:	4658      	mov	r0, fp
 8004c64:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8004c68:	930a      	str	r3, [sp, #40]	; 0x28
 8004c6a:	f014 ff5f 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    btnSettingsSave_1.setXY(420, 212);
 8004c6e:	ee1d 0a10 	vmov	r0, s26
 8004c72:	22d4      	movs	r2, #212	; 0xd4
 8004c74:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004c78:	f7fe fba1 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004c7c:	f04f 0308 	mov.w	r3, #8
    btnSettingsSave_1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004c80:	a909      	add	r1, sp, #36	; 0x24
 8004c82:	aa0a      	add	r2, sp, #40	; 0x28
 8004c84:	ee1d 0a10 	vmov	r0, s26
 8004c88:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004c8c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8004c90:	f014 ffa7 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004c94:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 8004c98:	ee1d 0a10 	vmov	r0, s26
 8004c9c:	f8a4 24f4 	strh.w	r2, [r4, #1268]	; 0x4f4
 8004ca0:	f7fe fbac 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btnSettingsConnect.setXY(390, 88);
 8004ca4:	ee1d 0a90 	vmov	r0, s27
 8004ca8:	2258      	movs	r2, #88	; 0x58
 8004caa:	f44f 71c3 	mov.w	r1, #390	; 0x186
        color = col;
 8004cae:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
        colorPressed = col;
 8004cb2:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
 8004cb6:	f7fe fb82 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004cba:	f04f 0308 	mov.w	r3, #8
    btnSettingsConnect.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004cbe:	aa0a      	add	r2, sp, #40	; 0x28
 8004cc0:	a909      	add	r1, sp, #36	; 0x24
 8004cc2:	ee1d 0a90 	vmov	r0, s27
 8004cc6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004cca:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8004cce:	f014 ff88 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004cd2:	f8a4 553c 	strh.w	r5, [r4, #1340]	; 0x53c
 8004cd6:	1d25      	adds	r5, r4, #4
        updateTextPosition();
 8004cd8:	ee1d 0a90 	vmov	r0, s27
 8004cdc:	f7fe fb8e 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004ce0:	ee18 1a10 	vmov	r1, s16
 8004ce4:	4628      	mov	r0, r5
        color = col;
 8004ce6:	f8c4 7540 	str.w	r7, [r4, #1344]	; 0x540
        colorPressed = col;
 8004cea:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
 8004cee:	f013 f9bd 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f013 f9b9 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004cfa:	ee18 1a90 	vmov	r1, s17
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f013 f9b4 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d04:	ee19 1a10 	vmov	r1, s18
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f013 f9af 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d0e:	ee19 1a90 	vmov	r1, s19
 8004d12:	4628      	mov	r0, r5
 8004d14:	f013 f9aa 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d18:	ee1e 1a10 	vmov	r1, s28
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f013 f9a5 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d22:	ee1a 1a10 	vmov	r1, s20
 8004d26:	4628      	mov	r0, r5
 8004d28:	f013 f9a0 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d2c:	ee1e 1a90 	vmov	r1, s29
 8004d30:	4628      	mov	r0, r5
 8004d32:	f013 f99b 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d36:	ee1a 1a90 	vmov	r1, s21
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f013 f996 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d40:	4649      	mov	r1, r9
 8004d42:	4628      	mov	r0, r5
 8004d44:	f013 f992 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d48:	4641      	mov	r1, r8
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f013 f98e 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d50:	ee1b 1a10 	vmov	r1, s22
 8004d54:	4628      	mov	r0, r5
 8004d56:	f013 f989 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d5a:	ee1b 1a90 	vmov	r1, s23
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f013 f984 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d64:	ee1c 1a10 	vmov	r1, s24
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f013 f97f 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d6e:	ee1c 1a90 	vmov	r1, s25
 8004d72:	4628      	mov	r0, r5
 8004d74:	f013 f97a 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d78:	4659      	mov	r1, fp
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f013 f976 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d80:	ee1d 1a10 	vmov	r1, s26
 8004d84:	4628      	mov	r0, r5
 8004d86:	f013 f971 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	ee1d 1a90 	vmov	r1, s27
 8004d90:	f013 f96c 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004d94:	4620      	mov	r0, r4
 8004d96:	b00d      	add	sp, #52	; 0x34
 8004d98:	ecbd 8b0e 	vpop	{d8-d14}
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	20015638 	.word	0x20015638
 8004da4:	0802d6f4 	.word	0x0802d6f4
 8004da8:	0802e14a 	.word	0x0802e14a
 8004dac:	0802d771 	.word	0x0802d771
 8004db0:	2001563c 	.word	0x2001563c
 8004db4:	0802e10c 	.word	0x0802e10c
 8004db8:	20015644 	.word	0x20015644
 8004dbc:	0802fd30 	.word	0x0802fd30
 8004dc0:	0802d828 	.word	0x0802d828
 8004dc4:	ffff0000 	.word	0xffff0000

08004dc8 <_ZN14StatusViewBaseD1Ev>:

class StatusViewBase : public touchgfx::View<StatusPresenter>
{
public:
    StatusViewBase();
    virtual ~StatusViewBase() {}
 8004dc8:	4770      	bx	lr

08004dca <_ZN14StatusViewBase11setupScreenEv>:
}

void StatusViewBase::setupScreen()
{

}
 8004dca:	4770      	bx	lr

08004dcc <_ZN8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004dcc:	4770      	bx	lr

08004dce <_ZN8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004dce:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004dd0:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004dd2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004dd4:	68c2      	ldr	r2, [r0, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	1055      	asrs	r5, r2, #1
 8004dda:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004dde:	07d2      	lsls	r2, r2, #31
 8004de0:	bf48      	it	mi
 8004de2:	5962      	ldrmi	r2, [r4, r5]
    }
 8004de4:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004de6:	bf48      	it	mi
 8004de8:	58d3      	ldrmi	r3, [r2, r3]
 8004dea:	4718      	bx	r3

08004dec <_ZNK8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004dec:	6843      	ldr	r3, [r0, #4]
 8004dee:	b12b      	cbz	r3, 8004dfc <_ZNK8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8004df0:	6883      	ldr	r3, [r0, #8]
 8004df2:	b92b      	cbnz	r3, 8004e00 <_ZNK8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004df4:	68c0      	ldr	r0, [r0, #12]
 8004df6:	f000 0001 	and.w	r0, r0, #1
 8004dfa:	4770      	bx	lr
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	4770      	bx	lr
 8004e00:	2001      	movs	r0, #1
    }
 8004e02:	4770      	bx	lr

08004e04 <_ZN8touchgfx8CallbackI14StatusViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004e04:	b510      	push	{r4, lr}
 8004e06:	4604      	mov	r4, r0
 8004e08:	2110      	movs	r1, #16
 8004e0a:	f025 fcdb 	bl	802a7c4 <_ZdlPvj>
 8004e0e:	4620      	mov	r0, r4
 8004e10:	bd10      	pop	{r4, pc}

08004e12 <_ZN14StatusViewBaseD0Ev>:
 8004e12:	b510      	push	{r4, lr}
 8004e14:	4604      	mov	r4, r0
 8004e16:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8004e1a:	f025 fcd3 	bl	802a7c4 <_ZdlPvj>
 8004e1e:	4620      	mov	r0, r4
 8004e20:	bd10      	pop	{r4, pc}

08004e22 <_ZN14StatusViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void StatusViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btnStatusHome)
 8004e22:	3098      	adds	r0, #152	; 0x98
 8004e24:	4288      	cmp	r0, r1
{
 8004e26:	b508      	push	{r3, lr}
    if (&src == &btnStatusHome)
 8004e28:	d105      	bne.n	8004e36 <_ZN14StatusViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004e2a:	f016 ff4b 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
        //StatusToMain
        //When btnStatusHome clicked change screen to Main
        //Go to Main with no screen transition
        application().gotoMainScreenNoTransition();
    }
}
 8004e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenNoTransition();
 8004e32:	f7fe bce5 	b.w	8003800 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
}
 8004e36:	bd08      	pop	{r3, pc}

08004e38 <_ZN14StatusViewBaseC1Ev>:
StatusViewBase::StatusViewBase() :
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	b08b      	sub	sp, #44	; 0x2c
 8004e40:	2500      	movs	r5, #0
 8004e42:	f018 f979 	bl	801d138 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &StatusViewBase::buttonCallbackHandler)
 8004e46:	4626      	mov	r6, r4
 8004e48:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <_ZN14StatusViewBaseC1Ev+0x1ac>)
        : Widget(), alpha(255), color(0)
 8004e4a:	2226      	movs	r2, #38	; 0x26
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004e50:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 8004e54:	f846 3b40 	str.w	r3, [r6], #64
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f025 fe67 	bl	802ab2c <memset>
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7fe faba 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8004e64:	4b60      	ldr	r3, [pc, #384]	; (8004fe8 <_ZN14StatusViewBaseC1Ev+0x1b0>)
 8004e66:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8004e6a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8004e6e:	6423      	str	r3, [r4, #64]	; 0x40
 8004e70:	23ff      	movs	r3, #255	; 0xff
 8004e72:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
 8004e76:	a908      	add	r1, sp, #32
 8004e78:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8004e7c:	4658      	mov	r0, fp
 8004e7e:	66a5      	str	r5, [r4, #104]	; 0x68
 8004e80:	f504 7a94 	add.w	sl, r4, #296	; 0x128
 8004e84:	f8ad 9020 	strh.w	r9, [sp, #32]
 8004e88:	f7ff f852 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	f015 f9fd 	bl	801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004e92:	4629      	mov	r1, r5
 8004e94:	2226      	movs	r2, #38	; 0x26
 8004e96:	4638      	mov	r0, r7
 8004e98:	f025 fe48 	bl	802ab2c <memset>
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7fe fa9b 	bl	80033d8 <_ZN8touchgfx6WidgetC1Ev>
 8004ea2:	4b52      	ldr	r3, [pc, #328]	; (8004fec <_ZN14StatusViewBaseC1Ev+0x1b4>)
 8004ea4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
        : typedTextId(id)
 8004ea8:	f8a4 910c 	strh.w	r9, [r4, #268]	; 0x10c
 8004eac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004eb0:	f04f 39ff 	mov.w	r9, #4294967295
 8004eb4:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <_ZN14StatusViewBaseC1Ev+0x1b8>)
 8004eb6:	a908      	add	r1, sp, #32
 8004eb8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        : color(col)
 8004ec2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8004ec6:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004eca:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 8004ece:	f8ad 9020 	strh.w	r9, [sp, #32]
              text(0)
 8004ed2:	e9c4 9548 	strd	r9, r5, [r4, #288]	; 0x120
 8004ed6:	f7ff f82b 	bl	8003f30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004eda:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <_ZN14StatusViewBaseC1Ev+0x1bc>)
        setXY(x, y);
 8004edc:	4629      	mov	r1, r5
 8004ede:	4630      	mov	r0, r6
 8004ee0:	e9c4 2455 	strd	r2, r4, [r4, #340]	; 0x154
 8004ee4:	4a44      	ldr	r2, [pc, #272]	; (8004ff8 <_ZN14StatusViewBaseC1Ev+0x1c0>)
 8004ee6:	e9c4 2557 	strd	r2, r5, [r4, #348]	; 0x15c
 8004eea:	462a      	mov	r2, r5
 8004eec:	f7fe fa67 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004ef6:	f7fe f9ef 	bl	80032d8 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8004efa:	4630      	mov	r0, r6
 8004efc:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004f00:	f7fe f9ec 	bl	80032dc <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 8004f04:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    statusBG.setXY(0, 0);
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4658      	mov	r0, fp
 8004f0c:	66a2      	str	r2, [r4, #104]	; 0x68
 8004f0e:	462a      	mov	r2, r5
 8004f10:	f7fe fa55 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004f14:	2201      	movs	r2, #1
    statusBG.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8004f16:	a908      	add	r1, sp, #32
 8004f18:	4658      	mov	r0, fp
 8004f1a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8004f1e:	f015 f883 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    btnStatusHome.setXY(0, 212);
 8004f22:	4629      	mov	r1, r5
 8004f24:	4640      	mov	r0, r8
 8004f26:	22d4      	movs	r2, #212	; 0xd4
 8004f28:	f7fe fa49 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004f2c:	2207      	movs	r2, #7
    btnStatusHome.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8004f2e:	a907      	add	r1, sp, #28
 8004f30:	4640      	mov	r0, r8
 8004f32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8004f36:	2208      	movs	r2, #8
 8004f38:	f8ad 2020 	strh.w	r2, [sp, #32]
 8004f3c:	aa08      	add	r2, sp, #32
 8004f3e:	f014 fe50 	bl	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004f42:	2210      	movs	r2, #16
        updateTextPosition();
 8004f44:	4640      	mov	r0, r8
 8004f46:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8004f4a:	f7fe fa57 	bl	80033fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btnStatusHome.setAction(buttonCallback);
 8004f4e:	f504 72aa 	add.w	r2, r4, #340	; 0x154
    statusHeader.setXY(208, 0);
 8004f52:	4638      	mov	r0, r7
 8004f54:	21d0      	movs	r1, #208	; 0xd0
 8004f56:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
 8004f5a:	462a      	mov	r2, r5
        colorPressed = col;
 8004f5c:	e9c4 9935 	strd	r9, r9, [r4, #212]	; 0xd4
 8004f60:	f7fe fa2d 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004f64:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
        boundingArea = calculateBoundingArea();
 8004f68:	f10d 0908 	add.w	r9, sp, #8
 8004f6c:	4639      	mov	r1, r7
        linespace = space;
 8004f6e:	f8a4 5114 	strh.w	r5, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 8004f72:	4648      	mov	r0, r9
 8004f74:	f014 fb4a 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        : typedTextId(id)
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <_ZN14StatusViewBaseC1Ev+0x1b8>)
 8004f7a:	f504 7c8e 	add.w	ip, r4, #284	; 0x11c
 8004f7e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004f82:	9308      	str	r3, [sp, #32]
 8004f84:	230e      	movs	r3, #14
 8004f86:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    statusHeader.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JWZO));
 8004f8a:	a908      	add	r1, sp, #32
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8004f92:	f014 fdcb 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    statusWifiLogo.setXY(456, 0);
 8004f96:	462a      	mov	r2, r5
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8004f9e:	f7fe fa0e 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8004fa2:	230d      	movs	r3, #13
    statusWifiLogo.setBitmap(touchgfx::Bitmap(BITMAP_WIFI_WHITE_ID));
 8004fa4:	a908      	add	r1, sp, #32
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004fac:	f015 f83c 	bl	801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004fb0:	1d20      	adds	r0, r4, #4
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	9001      	str	r0, [sp, #4]
 8004fb6:	f013 f859 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004fba:	4659      	mov	r1, fp
 8004fbc:	9801      	ldr	r0, [sp, #4]
 8004fbe:	f013 f855 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	9801      	ldr	r0, [sp, #4]
 8004fc6:	f013 f851 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004fca:	4639      	mov	r1, r7
 8004fcc:	9801      	ldr	r0, [sp, #4]
 8004fce:	f013 f84d 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004fd2:	9801      	ldr	r0, [sp, #4]
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	f013 f849 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004fda:	4620      	mov	r0, r4
 8004fdc:	b00b      	add	sp, #44	; 0x2c
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0802e338 	.word	0x0802e338
 8004fe8:	08030bf4 	.word	0x08030bf4
 8004fec:	08030b64 	.word	0x08030b64
 8004ff0:	0802d828 	.word	0x0802d828
 8004ff4:	0802e320 	.word	0x0802e320
 8004ff8:	08004e23 	.word	0x08004e23

08004ffc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004ffc:	4770      	bx	lr
	...

08005000 <_Z23getFont_verdana_10_4bppv>:
{
 8005000:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005002:	4d15      	ldr	r5, [pc, #84]	; (8005058 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8005004:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005006:	782c      	ldrb	r4, [r5, #0]
 8005008:	f3bf 8f5b 	dmb	ish
 800500c:	f014 0401 	ands.w	r4, r4, #1
 8005010:	d11f      	bne.n	8005052 <_Z23getFont_verdana_10_4bppv+0x52>
 8005012:	4628      	mov	r0, r5
 8005014:	f025 fbd8 	bl	802a7c8 <__cxa_guard_acquire>
 8005018:	b1d8      	cbz	r0, 8005052 <_Z23getFont_verdana_10_4bppv+0x52>
 800501a:	233f      	movs	r3, #63	; 0x3f
 800501c:	2201      	movs	r2, #1
 800501e:	490f      	ldr	r1, [pc, #60]	; (800505c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <_Z23getFont_verdana_10_4bppv+0x60>)
 8005024:	480f      	ldr	r0, [pc, #60]	; (8005064 <_Z23getFont_verdana_10_4bppv+0x64>)
 8005026:	9306      	str	r3, [sp, #24]
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <_Z23getFont_verdana_10_4bppv+0x68>)
 800502a:	9408      	str	r4, [sp, #32]
 800502c:	9403      	str	r4, [sp, #12]
 800502e:	9400      	str	r4, [sp, #0]
 8005030:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005034:	2304      	movs	r3, #4
 8005036:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800503a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800503e:	230a      	movs	r3, #10
 8005040:	2211      	movs	r2, #17
 8005042:	f7fe feeb 	bl	8003e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005046:	4809      	ldr	r0, [pc, #36]	; (800506c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8005048:	f025 fc08 	bl	802a85c <atexit>
 800504c:	4628      	mov	r0, r5
 800504e:	f025 fbc7 	bl	802a7e0 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8005052:	4804      	ldr	r0, [pc, #16]	; (8005064 <_Z23getFont_verdana_10_4bppv+0x64>)
 8005054:	b00d      	add	sp, #52	; 0x34
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	200021e0 	.word	0x200021e0
 800505c:	900edee8 	.word	0x900edee8
 8005060:	08031284 	.word	0x08031284
 8005064:	200021e4 	.word	0x200021e4
 8005068:	080312b4 	.word	0x080312b4
 800506c:	08004ffd 	.word	0x08004ffd

08005070 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 24, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005070:	4770      	bx	lr
	...

08005074 <_Z23getFont_verdana_20_4bppv>:
{
 8005074:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 24, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005076:	4d15      	ldr	r5, [pc, #84]	; (80050cc <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8005078:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 24, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800507a:	782c      	ldrb	r4, [r5, #0]
 800507c:	f3bf 8f5b 	dmb	ish
 8005080:	f014 0401 	ands.w	r4, r4, #1
 8005084:	d11f      	bne.n	80050c6 <_Z23getFont_verdana_20_4bppv+0x52>
 8005086:	4628      	mov	r0, r5
 8005088:	f025 fb9e 	bl	802a7c8 <__cxa_guard_acquire>
 800508c:	b1d8      	cbz	r0, 80050c6 <_Z23getFont_verdana_20_4bppv+0x52>
 800508e:	233f      	movs	r3, #63	; 0x3f
 8005090:	2201      	movs	r2, #1
 8005092:	490f      	ldr	r1, [pc, #60]	; (80050d0 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8005094:	9307      	str	r3, [sp, #28]
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <_Z23getFont_verdana_20_4bppv+0x60>)
 8005098:	480f      	ldr	r0, [pc, #60]	; (80050d8 <_Z23getFont_verdana_20_4bppv+0x64>)
 800509a:	9306      	str	r3, [sp, #24]
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <_Z23getFont_verdana_20_4bppv+0x68>)
 800509e:	9408      	str	r4, [sp, #32]
 80050a0:	9403      	str	r4, [sp, #12]
 80050a2:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80050a6:	2304      	movs	r3, #4
 80050a8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80050ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2218      	movs	r2, #24
 80050b4:	2314      	movs	r3, #20
 80050b6:	f7fe feb1 	bl	8003e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80050ba:	4809      	ldr	r0, [pc, #36]	; (80050e0 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80050bc:	f025 fbce 	bl	802a85c <atexit>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f025 fb8d 	bl	802a7e0 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80050c6:	4804      	ldr	r0, [pc, #16]	; (80050d8 <_Z23getFont_verdana_20_4bppv+0x64>)
 80050c8:	b00d      	add	sp, #52	; 0x34
 80050ca:	bd30      	pop	{r4, r5, pc}
 80050cc:	2000220c 	.word	0x2000220c
 80050d0:	900edfd8 	.word	0x900edfd8
 80050d4:	08031288 	.word	0x08031288
 80050d8:	20002210 	.word	0x20002210
 80050dc:	080312b8 	.word	0x080312b8
 80050e0:	08005071 	.word	0x08005071

080050e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80050e4:	4770      	bx	lr
	...

080050e8 <_Z23getFont_verdana_40_4bppv>:
{
 80050e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80050ea:	4d15      	ldr	r5, [pc, #84]	; (8005140 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 80050ec:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80050ee:	782c      	ldrb	r4, [r5, #0]
 80050f0:	f3bf 8f5b 	dmb	ish
 80050f4:	f014 0401 	ands.w	r4, r4, #1
 80050f8:	d11f      	bne.n	800513a <_Z23getFont_verdana_40_4bppv+0x52>
 80050fa:	4628      	mov	r0, r5
 80050fc:	f025 fb64 	bl	802a7c8 <__cxa_guard_acquire>
 8005100:	b1d8      	cbz	r0, 800513a <_Z23getFont_verdana_40_4bppv+0x52>
 8005102:	233f      	movs	r3, #63	; 0x3f
 8005104:	2204      	movs	r2, #4
 8005106:	490f      	ldr	r1, [pc, #60]	; (8005144 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8005108:	9307      	str	r3, [sp, #28]
 800510a:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <_Z23getFont_verdana_40_4bppv+0x60>)
 800510c:	480f      	ldr	r0, [pc, #60]	; (800514c <_Z23getFont_verdana_40_4bppv+0x64>)
 800510e:	9306      	str	r3, [sp, #24]
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <_Z23getFont_verdana_40_4bppv+0x68>)
 8005112:	9408      	str	r4, [sp, #32]
 8005114:	9403      	str	r4, [sp, #12]
 8005116:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800511a:	2301      	movs	r3, #1
 800511c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005120:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2210      	movs	r2, #16
 8005128:	2328      	movs	r3, #40	; 0x28
 800512a:	f7fe fe77 	bl	8003e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800512e:	4809      	ldr	r0, [pc, #36]	; (8005154 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8005130:	f025 fb94 	bl	802a85c <atexit>
 8005134:	4628      	mov	r0, r5
 8005136:	f025 fb53 	bl	802a7e0 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800513a:	4804      	ldr	r0, [pc, #16]	; (800514c <_Z23getFont_verdana_40_4bppv+0x64>)
 800513c:	b00d      	add	sp, #52	; 0x34
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	20002238 	.word	0x20002238
 8005144:	900ee128 	.word	0x900ee128
 8005148:	080312b0 	.word	0x080312b0
 800514c:	2000223c 	.word	0x2000223c
 8005150:	080312bc 	.word	0x080312bc
 8005154:	080050e5 	.word	0x080050e5

08005158 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8005158:	2000      	movs	r0, #0
 800515a:	4770      	bx	lr

0800515c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 800515c:	2000      	movs	r0, #0
 800515e:	4770      	bx	lr

08005160 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005160:	b40e      	push	{r1, r2, r3}
 8005162:	b503      	push	{r0, r1, lr}
 8005164:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005166:	2100      	movs	r1, #0
{
 8005168:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800516c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800516e:	f017 fc1f 	bl	801c9b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005172:	b002      	add	sp, #8
 8005174:	f85d eb04 	ldr.w	lr, [sp], #4
 8005178:	b003      	add	sp, #12
 800517a:	4770      	bx	lr

0800517c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800517c:	b40c      	push	{r2, r3}
 800517e:	b507      	push	{r0, r1, r2, lr}
 8005180:	ab04      	add	r3, sp, #16
 8005182:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8005186:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005188:	f017 fc12 	bl	801c9b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800518c:	b003      	add	sp, #12
 800518e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005192:	b002      	add	sp, #8
 8005194:	4770      	bx	lr
	...

08005198 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8005198:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800519a:	b510      	push	{r4, lr}
 800519c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800519e:	b373      	cbz	r3, 80051fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80051a0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80051a2:	b92b      	cbnz	r3, 80051b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80051a6:	21c0      	movs	r1, #192	; 0xc0
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80051aa:	4819      	ldr	r0, [pc, #100]	; (8005210 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80051ac:	f025 fb38 	bl	802a820 <__assert_func>
            return buffer[pos];
 80051b0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80051b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80051b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80051b8:	b30b      	cbz	r3, 80051fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80051ba:	f018 fe99 	bl	801def0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80051be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d803      	bhi.n	80051cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80051c6:	21c5      	movs	r1, #197	; 0xc5
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80051ca:	e7ee      	b.n	80051aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80051cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80051ce:	f640 103f 	movw	r0, #2367	; 0x93f
 80051d2:	1c53      	adds	r3, r2, #1
 80051d4:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	4619      	mov	r1, r3
 80051da:	bf88      	it	hi
 80051dc:	f1a3 010a 	subhi.w	r1, r3, #10
 80051e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80051e4:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80051e6:	4281      	cmp	r1, r0
 80051e8:	d109      	bne.n	80051fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80051ea:	2b0a      	cmp	r3, #10
 80051ec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80051f0:	bf28      	it	cs
 80051f2:	2300      	movcs	r3, #0
            return buffer[pos];
 80051f4:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80051f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80051fa:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80051fc:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80051fe:	4620      	mov	r0, r4
}
 8005200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8005204:	f018 bd76 	b.w	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005208:	0802e364 	.word	0x0802e364
 800520c:	0802e36d 	.word	0x0802e36d
 8005210:	0802e418 	.word	0x0802e418
 8005214:	0802e462 	.word	0x0802e462
 8005218:	0802e470 	.word	0x0802e470

0800521c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800521c:	f018 bd33 	b.w	801dc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08005220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005220:	b510      	push	{r4, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	ac02      	add	r4, sp, #8
 8005226:	e884 0006 	stmia.w	r4, {r1, r2}
 800522a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800522c:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800522e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8005230:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	9b08      	ldr	r3, [sp, #32]
 800523a:	f016 f879 	bl	801b330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800523e:	b006      	add	sp, #24
 8005240:	bd10      	pop	{r4, pc}
	...

08005244 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005244:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8005246:	bb18      	cbnz	r0, 8005290 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800524a:	4813      	ldr	r0, [pc, #76]	; (8005298 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4913      	ldr	r1, [pc, #76]	; (800529c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8005250:	b1b3      	cbz	r3, 8005280 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005252:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005254:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005256:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005258:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800525a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	441a      	add	r2, r3
 8005260:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8005264:	2200      	movs	r2, #0
 8005266:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005268:	f000 f838 	bl	80052dc <_ZN17TypedTextDatabase8getFontsEv>
 800526c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800526e:	f000 f833 	bl	80052d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8005274:	601c      	str	r4, [r3, #0]
        fonts = f;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8005278:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800527c:	8018      	strh	r0, [r3, #0]
    }
}
 800527e:	e007      	b.n	8005290 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8005282:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8005286:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800528a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800528c:	2c00      	cmp	r4, #0
 800528e:	d1e8      	bne.n	8005262 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	20002264 	.word	0x20002264
 8005298:	20002268 	.word	0x20002268
 800529c:	2000226c 	.word	0x2000226c
 80052a0:	20002270 	.word	0x20002270
 80052a4:	20015638 	.word	0x20015638
 80052a8:	20015640 	.word	0x20015640
 80052ac:	2001563c 	.word	0x2001563c
 80052b0:	900ee268 	.word	0x900ee268
 80052b4:	900ee208 	.word	0x900ee208
 80052b8:	900ee34c 	.word	0x900ee34c

080052bc <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80052bc:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	2000226c 	.word	0x2000226c
 80052d4:	20002268 	.word	0x20002268

080052d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80052d8:	2018      	movs	r0, #24
 80052da:	4770      	bx	lr

080052dc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80052dc:	4800      	ldr	r0, [pc, #0]	; (80052e0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80052de:	4770      	bx	lr
 80052e0:	20002274 	.word	0x20002274

080052e4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80052e4:	b510      	push	{r4, lr}
};
 80052e6:	4c05      	ldr	r4, [pc, #20]	; (80052fc <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80052e8:	f7ff fec4 	bl	8005074 <_Z23getFont_verdana_20_4bppv>
};
 80052ec:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80052ee:	f7ff fefb 	bl	80050e8 <_Z23getFont_verdana_40_4bppv>
};
 80052f2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80052f4:	f7ff fe84 	bl	8005000 <_Z23getFont_verdana_10_4bppv>
};
 80052f8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80052fa:	bd10      	pop	{r4, pc}
 80052fc:	20002274 	.word	0x20002274

08005300 <_ZN14AboutPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~AboutPresenter() {};
 8005300:	4770      	bx	lr

08005302 <_ZThn4_N14AboutPresenterD1Ev>:
 8005302:	3804      	subs	r0, #4
 8005304:	4770      	bx	lr

08005306 <_ZN14AboutPresenter10deactivateEv>:
}

void AboutPresenter::activate()
{

}
 8005306:	4770      	bx	lr

08005308 <_ZN14AboutPresenterD0Ev>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	2110      	movs	r1, #16
 800530e:	f025 fa59 	bl	802a7c4 <_ZdlPvj>
 8005312:	4620      	mov	r0, r4
 8005314:	bd10      	pop	{r4, pc}

08005316 <_ZThn4_N14AboutPresenterD0Ev>:
 8005316:	f1a0 0004 	sub.w	r0, r0, #4
 800531a:	e7f5      	b.n	8005308 <_ZN14AboutPresenterD0Ev>

0800531c <_ZN14AboutPresenterC1ER9AboutView>:
    ModelListener() : model(0) {}
 800531c:	2200      	movs	r2, #0
    : view(v)
 800531e:	60c1      	str	r1, [r0, #12]
 8005320:	6082      	str	r2, [r0, #8]
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <_ZN14AboutPresenterC1ER9AboutView+0x18>)
AboutPresenter::AboutPresenter(AboutView& v)
 8005324:	b510      	push	{r4, lr}
    : view(v)
 8005326:	f102 0408 	add.w	r4, r2, #8
 800532a:	3220      	adds	r2, #32
 800532c:	6004      	str	r4, [r0, #0]
 800532e:	6042      	str	r2, [r0, #4]
}
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	0802e544 	.word	0x0802e544

08005338 <_ZN9AboutViewD1Ev>:

class AboutView : public AboutViewBase
{
public:
    AboutView();
    virtual ~AboutView() {}
 8005338:	4770      	bx	lr

0800533a <_ZN9AboutView14tearDownScreenEv>:
}

void AboutView::tearDownScreen()
{
    AboutViewBase::tearDownScreen();
}
 800533a:	4770      	bx	lr

0800533c <_ZN9AboutView11setupScreenEv>:
    AboutViewBase::setupScreen();
 800533c:	f7fd bffa 	b.w	8003334 <_ZN13AboutViewBase11setupScreenEv>

08005340 <_ZN9AboutViewD0Ev>:
 8005340:	b510      	push	{r4, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005348:	f025 fa3c 	bl	802a7c4 <_ZdlPvj>
 800534c:	4620      	mov	r0, r4
 800534e:	bd10      	pop	{r4, pc}

08005350 <_ZN9AboutViewC1Ev>:
AboutView::AboutView()
 8005350:	b510      	push	{r4, lr}
 8005352:	4604      	mov	r4, r0
 8005354:	f7fe f898 	bl	8003488 <_ZN13AboutViewBaseC1Ev>
 8005358:	4b01      	ldr	r3, [pc, #4]	; (8005360 <_ZN9AboutViewC1Ev+0x10>)
}
 800535a:	4620      	mov	r0, r4
AboutView::AboutView()
 800535c:	6023      	str	r3, [r4, #0]
}
 800535e:	bd10      	pop	{r4, pc}
 8005360:	0802e574 	.word	0x0802e574

08005364 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005364:	4770      	bx	lr

08005366 <_ZN19FrontendApplicationD0Ev>:
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800536e:	f025 fa29 	bl	802a7c4 <_ZdlPvj>
 8005372:	4620      	mov	r0, r4
 8005374:	bd10      	pop	{r4, pc}

08005376 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005376:	b510      	push	{r4, lr}
 8005378:	4604      	mov	r4, r0
    {
        model.tick();
 800537a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800537e:	f000 f875 	bl	800546c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005382:	4620      	mov	r0, r4
    }
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8005388:	f016 bb4a 	b.w	801ba20 <_ZN8touchgfx11Application15handleTickEventEv>

0800538c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800538c:	b510      	push	{r4, lr}
 800538e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005390:	f7fe fa06 	bl	80037a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8005396:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8005398:	6023      	str	r3, [r4, #0]
}
 800539a:	bd10      	pop	{r4, pc}
 800539c:	0802e5a8 	.word	0x0802e5a8

080053a0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80053a0:	4770      	bx	lr

080053a2 <_ZThn4_N13MainPresenterD1Ev>:
 80053a2:	3804      	subs	r0, #4
 80053a4:	4770      	bx	lr

080053a6 <_ZN13MainPresenter10deactivateEv>:
}

void MainPresenter::activate()
{

}
 80053a6:	4770      	bx	lr

080053a8 <_ZN13MainPresenterD0Ev>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	2110      	movs	r1, #16
 80053ae:	f025 fa09 	bl	802a7c4 <_ZdlPvj>
 80053b2:	4620      	mov	r0, r4
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <_ZThn4_N13MainPresenterD0Ev>:
 80053b6:	f1a0 0004 	sub.w	r0, r0, #4
 80053ba:	e7f5      	b.n	80053a8 <_ZN13MainPresenterD0Ev>

080053bc <_ZN13MainPresenterC1ER8MainView>:
 80053bc:	2200      	movs	r2, #0
    : view(v)
 80053be:	60c1      	str	r1, [r0, #12]
 80053c0:	6082      	str	r2, [r0, #8]
 80053c2:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <_ZN13MainPresenterC1ER8MainView+0x18>)
MainPresenter::MainPresenter(MainView& v)
 80053c4:	b510      	push	{r4, lr}
    : view(v)
 80053c6:	f102 0408 	add.w	r4, r2, #8
 80053ca:	3220      	adds	r2, #32
 80053cc:	6004      	str	r4, [r0, #0]
 80053ce:	6042      	str	r2, [r0, #4]
}
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	bf00      	nop
 80053d4:	0802e5ec 	.word	0x0802e5ec

080053d8 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80053d8:	4770      	bx	lr

080053da <_ZN8MainView14tearDownScreenEv>:
}

void MainView::tearDownScreen()
{
    MainViewBase::tearDownScreen();
}
 80053da:	4770      	bx	lr

080053dc <_ZN8MainView11setupScreenEv>:
{
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
    MainViewBase::setupScreen();
 80053e0:	f7fe fd47 	bl	8003e72 <_ZN12MainViewBase11setupScreenEv>

    bool getWifiState()
    {
        return model->getWifiState();
 80053e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    mainWifiLogo.invalidate();
 80053e6:	f504 7029 	add.w	r0, r4, #676	; 0x2a4
        wifiState = state;
    }

    bool getWifiState()
    {
        return wifiState;
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	791b      	ldrb	r3, [r3, #4]
    wifiState = presenter->getWifiState();
 80053ee:	f884 32e4 	strb.w	r3, [r4, #740]	; 0x2e4
        visible = vis;
 80053f2:	f884 32c9 	strb.w	r3, [r4, #713]	; 0x2c9
}
 80053f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mainWifiLogo.invalidate();
 80053fa:	f017 bbfb 	b.w	801cbf4 <_ZNK8touchgfx8Drawable10invalidateEv>

080053fe <_ZN8MainViewD0Ev>:
 80053fe:	b510      	push	{r4, lr}
 8005400:	4604      	mov	r4, r0
 8005402:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8005406:	f025 f9dd 	bl	802a7c4 <_ZdlPvj>
 800540a:	4620      	mov	r0, r4
 800540c:	bd10      	pop	{r4, pc}

0800540e <_ZN8MainView15handleTickEventEv>:

void MainView::handleTickEvent()
{
 800540e:	b538      	push	{r3, r4, r5, lr}
    bool isGreenVisible;
    tickCounter++;
 8005410:	f8d0 32e0 	ldr.w	r3, [r0, #736]	; 0x2e0
 8005414:	253c      	movs	r5, #60	; 0x3c
{
 8005416:	4604      	mov	r4, r0
    tickCounter++;
 8005418:	3301      	adds	r3, #1
 800541a:	fb93 f2f5 	sdiv	r2, r3, r5
 800541e:	fb05 3512 	mls	r5, r5, r2, r3
 8005422:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0

    if((tickCounter % 60) == 0)
 8005426:	b95d      	cbnz	r5, 8005440 <_ZN8MainView15handleTickEventEv+0x32>
    {
        isGreenVisible = mainStateGreen.isVisible();
        mainStateGreen.setVisible(!isGreenVisible);
 8005428:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
        mainStateGreen.invalidate();
 800542c:	f500 7008 	add.w	r0, r0, #544	; 0x220
        mainStateGreen.setVisible(!isGreenVisible);
 8005430:	f083 0301 	eor.w	r3, r3, #1
 8005434:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
        mainStateGreen.invalidate();
 8005438:	f017 fbdc 	bl	801cbf4 <_ZNK8touchgfx8Drawable10invalidateEv>
        tickCounter = 0;
 800543c:	f8c4 52e0 	str.w	r5, [r4, #736]	; 0x2e0
    }

}
 8005440:	bd38      	pop	{r3, r4, r5, pc}
	...

08005444 <_ZN8MainViewC1Ev>:
MainView::MainView()
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	f7fe fd8c 	bl	8003f64 <_ZN12MainViewBaseC1Ev>
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <_ZN8MainViewC1Ev+0x1c>)
}
 800544e:	4620      	mov	r0, r4
MainView::MainView()
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 8005458:	f884 32e4 	strb.w	r3, [r4, #740]	; 0x2e4
}
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	0802e61c 	.word	0x0802e61c

08005464 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0), wifiState(false)
 8005464:	2200      	movs	r2, #0
 8005466:	6002      	str	r2, [r0, #0]
 8005468:	7102      	strb	r2, [r0, #4]
{

}
 800546a:	4770      	bx	lr

0800546c <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800546c:	4770      	bx	lr

0800546e <_ZN17SettingsPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~SettingsPresenter() {};
 800546e:	4770      	bx	lr

08005470 <_ZThn4_N17SettingsPresenterD1Ev>:
 8005470:	3804      	subs	r0, #4
 8005472:	4770      	bx	lr

08005474 <_ZN17SettingsPresenter10deactivateEv>:
}

void SettingsPresenter::activate()
{

}
 8005474:	4770      	bx	lr

08005476 <_ZN17SettingsPresenterD0Ev>:
 8005476:	b510      	push	{r4, lr}
 8005478:	4604      	mov	r4, r0
 800547a:	2110      	movs	r1, #16
 800547c:	f025 f9a2 	bl	802a7c4 <_ZdlPvj>
 8005480:	4620      	mov	r0, r4
 8005482:	bd10      	pop	{r4, pc}

08005484 <_ZThn4_N17SettingsPresenterD0Ev>:
 8005484:	f1a0 0004 	sub.w	r0, r0, #4
 8005488:	e7f5      	b.n	8005476 <_ZN17SettingsPresenterD0Ev>
	...

0800548c <_ZN17SettingsPresenterC1ER12SettingsView>:
 800548c:	2200      	movs	r2, #0
    : view(v)
 800548e:	60c1      	str	r1, [r0, #12]
 8005490:	6082      	str	r2, [r0, #8]
 8005492:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <_ZN17SettingsPresenterC1ER12SettingsView+0x18>)
SettingsPresenter::SettingsPresenter(SettingsView& v)
 8005494:	b510      	push	{r4, lr}
    : view(v)
 8005496:	f102 0408 	add.w	r4, r2, #8
 800549a:	3220      	adds	r2, #32
 800549c:	6004      	str	r4, [r0, #0]
 800549e:	6042      	str	r2, [r0, #4]
}
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	bf00      	nop
 80054a4:	0802e648 	.word	0x0802e648

080054a8 <_ZN12SettingsViewD1Ev>:

class SettingsView : public SettingsViewBase
{
public:
    SettingsView();
    virtual ~SettingsView() {}
 80054a8:	4770      	bx	lr

080054aa <_ZN12SettingsView14tearDownScreenEv>:
}

void SettingsView::tearDownScreen()
{
    SettingsViewBase::tearDownScreen();
}
 80054aa:	4770      	bx	lr

080054ac <_ZN12SettingsView11setupScreenEv>:
{
 80054ac:	b513      	push	{r0, r1, r4, lr}
 80054ae:	4604      	mov	r4, r0
    SettingsViewBase::setupScreen();
 80054b0:	f7fe ff44 	bl	800433c <_ZN16SettingsViewBase11setupScreenEv>
        model->saveWifiState(state);
    }

    bool getWifiState()
    {
        return model->getWifiState();
 80054b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    toggleButtonWiFi.forceState(wifiEnabled);
 80054b6:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	9001      	str	r0, [sp, #4]
 80054be:	7919      	ldrb	r1, [r3, #4]
    wifiEnabled = presenter->getWifiState();
 80054c0:	f884 15b4 	strb.w	r1, [r4, #1460]	; 0x5b4
    toggleButtonWiFi.forceState(wifiEnabled);
 80054c4:	f013 ffb1 	bl	801942a <_ZN8touchgfx12ToggleButton10forceStateEb>
    toggleButtonWiFi.invalidate();
 80054c8:	9801      	ldr	r0, [sp, #4]
}
 80054ca:	b002      	add	sp, #8
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    toggleButtonWiFi.invalidate();
 80054d0:	f017 bb90 	b.w	801cbf4 <_ZNK8touchgfx8Drawable10invalidateEv>

080054d4 <_ZN12SettingsViewD0Ev>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
 80054dc:	f025 f972 	bl	802a7c4 <_ZdlPvj>
 80054e0:	4620      	mov	r0, r4
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 80054e4:	b508      	push	{r3, lr}
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	b92b      	cbnz	r3, 80054f8 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 80054ee:	2187      	movs	r1, #135	; 0x87
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 80054f2:	4805      	ldr	r0, [pc, #20]	; (8005508 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 80054f4:	f025 f994 	bl	802a820 <__assert_func>
        return bitmapId;
    }
 80054f8:	8800      	ldrh	r0, [r0, #0]
 80054fa:	bd08      	pop	{r3, pc}
 80054fc:	20015670 	.word	0x20015670
 8005500:	0802e670 	.word	0x0802e670
 8005504:	0802e6ac 	.word	0x0802e6ac
 8005508:	0802e6df 	.word	0x0802e6df

0800550c <_ZN12SettingsView11wifi_toggleEv>:

void SettingsView::wifi_toggle()
{
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4605      	mov	r5, r0
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
    {
        return up.getId() == originalPressed.getId();
 8005510:	f200 401e 	addw	r0, r0, #1054	; 0x41e
 8005514:	f7ff ffe6 	bl	80054e4 <_ZNK8touchgfx6Bitmap5getIdEv>
 8005518:	4604      	mov	r4, r0
 800551a:	f205 4024 	addw	r0, r5, #1060	; 0x424
 800551e:	f7ff ffe1 	bl	80054e4 <_ZNK8touchgfx6Bitmap5getIdEv>
 8005522:	1a22      	subs	r2, r4, r0
 8005524:	4253      	negs	r3, r2
 8005526:	4153      	adcs	r3, r2
        model->saveWifiState(state);
 8005528:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        wifiState = state;
 800552a:	6892      	ldr	r2, [r2, #8]
    wifiEnabled = toggleButtonWiFi.getState();
 800552c:	f885 35b4 	strb.w	r3, [r5, #1460]	; 0x5b4
 8005530:	7113      	strb	r3, [r2, #4]
    presenter->saveWifiState(wifiEnabled);
}
 8005532:	bd38      	pop	{r3, r4, r5, pc}

08005534 <_ZN12SettingsViewC1Ev>:
SettingsView::SettingsView()
 8005534:	b510      	push	{r4, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	f7ff f868 	bl	800460c <_ZN16SettingsViewBaseC1Ev>
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <_ZN12SettingsViewC1Ev+0x10>)
}
 800553e:	4620      	mov	r0, r4
SettingsView::SettingsView()
 8005540:	6023      	str	r3, [r4, #0]
}
 8005542:	bd10      	pop	{r4, pc}
 8005544:	0802e72c 	.word	0x0802e72c

08005548 <_ZN15StatusPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~StatusPresenter() {};
 8005548:	4770      	bx	lr

0800554a <_ZThn4_N15StatusPresenterD1Ev>:
 800554a:	3804      	subs	r0, #4
 800554c:	4770      	bx	lr

0800554e <_ZN15StatusPresenter10deactivateEv>:
}

void StatusPresenter::activate()
{

}
 800554e:	4770      	bx	lr

08005550 <_ZN15StatusPresenterD0Ev>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	2110      	movs	r1, #16
 8005556:	f025 f935 	bl	802a7c4 <_ZdlPvj>
 800555a:	4620      	mov	r0, r4
 800555c:	bd10      	pop	{r4, pc}

0800555e <_ZThn4_N15StatusPresenterD0Ev>:
 800555e:	f1a0 0004 	sub.w	r0, r0, #4
 8005562:	e7f5      	b.n	8005550 <_ZN15StatusPresenterD0Ev>

08005564 <_ZN15StatusPresenterC1ER10StatusView>:
 8005564:	2200      	movs	r2, #0
    : view(v)
 8005566:	60c1      	str	r1, [r0, #12]
 8005568:	6082      	str	r2, [r0, #8]
 800556a:	4a04      	ldr	r2, [pc, #16]	; (800557c <_ZN15StatusPresenterC1ER10StatusView+0x18>)
StatusPresenter::StatusPresenter(StatusView& v)
 800556c:	b510      	push	{r4, lr}
    : view(v)
 800556e:	f102 0408 	add.w	r4, r2, #8
 8005572:	3220      	adds	r2, #32
 8005574:	6004      	str	r4, [r0, #0]
 8005576:	6042      	str	r2, [r0, #4]
}
 8005578:	bd10      	pop	{r4, pc}
 800557a:	bf00      	nop
 800557c:	0802e75c 	.word	0x0802e75c

08005580 <_ZN10StatusViewD1Ev>:

class StatusView : public StatusViewBase
{
public:
    StatusView();
    virtual ~StatusView() {}
 8005580:	4770      	bx	lr

08005582 <_ZN10StatusView14tearDownScreenEv>:
}

void StatusView::tearDownScreen()
{
    StatusViewBase::tearDownScreen();
}
 8005582:	4770      	bx	lr

08005584 <_ZN10StatusView11setupScreenEv>:
{
 8005584:	b510      	push	{r4, lr}
 8005586:	4604      	mov	r4, r0
    StatusViewBase::setupScreen();
 8005588:	f7ff fc1f 	bl	8004dca <_ZN14StatusViewBase11setupScreenEv>

    bool getWifiState()
    {
        return model->getWifiState();
 800558c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    statusWifiLogo.invalidate();
 800558e:	f504 7094 	add.w	r0, r4, #296	; 0x128
        return wifiState;
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	791b      	ldrb	r3, [r3, #4]
    wifiState = presenter->getWifiState();
 8005596:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
 800559a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
}
 800559e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    statusWifiLogo.invalidate();
 80055a2:	f017 bb27 	b.w	801cbf4 <_ZNK8touchgfx8Drawable10invalidateEv>

080055a6 <_ZN10StatusViewD0Ev>:
 80055a6:	b510      	push	{r4, lr}
 80055a8:	4604      	mov	r4, r0
 80055aa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80055ae:	f025 f909 	bl	802a7c4 <_ZdlPvj>
 80055b2:	4620      	mov	r0, r4
 80055b4:	bd10      	pop	{r4, pc}
	...

080055b8 <_ZN10StatusViewC1Ev>:
StatusView::StatusView()
 80055b8:	b510      	push	{r4, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	f7ff fc3c 	bl	8004e38 <_ZN14StatusViewBaseC1Ev>
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <_ZN10StatusViewC1Ev+0x18>)
}
 80055c2:	4620      	mov	r0, r4
StatusView::StatusView()
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
}
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	bf00      	nop
 80055d0:	0802e78c 	.word	0x0802e78c

080055d4 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80055d4:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80055d6:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80055da:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80055dc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80055e0:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80055e2:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80055e4:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80055e6:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80055e8:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80055ea:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80055ec:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80055ee:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80055f0:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80055f2:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80055f4:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80055f6:	480b      	ldr	r0, [pc, #44]	; (8005624 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80055f8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80055fc:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005600:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8005604:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8005606:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8005608:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800560a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800560e:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8005610:	466a      	mov	r2, sp
 8005612:	f001 fd79 	bl	8007108 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8005616:	3800      	subs	r0, #0
 8005618:	bf18      	it	ne
 800561a:	2001      	movne	r0, #1
 800561c:	b015      	add	sp, #84	; 0x54
 800561e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005622:	bf00      	nop
 8005624:	20002280 	.word	0x20002280

08005628 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8005628:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800562a:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800562e:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4817      	ldr	r0, [pc, #92]	; (8005694 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005636:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8005638:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800563a:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800563c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800563e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005640:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005644:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8005646:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005648:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800564a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800564e:	f001 fd18 	bl	8007082 <HAL_QSPI_Command>
 8005652:	b9e0      	cbnz	r0, 800568e <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8005654:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8005656:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005658:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800565c:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800565e:	480d      	ldr	r0, [pc, #52]	; (8005694 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8005660:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005664:	2310      	movs	r3, #16
 8005666:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800566a:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800566c:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800566e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005676:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005678:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800567a:	f241 3388 	movw	r3, #5000	; 0x1388
 800567e:	f001 fd43 	bl	8007108 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8005682:	3800      	subs	r0, #0
 8005684:	bf18      	it	ne
 8005686:	2001      	movne	r0, #1
}
 8005688:	b015      	add	sp, #84	; 0x54
 800568a:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800568e:	2001      	movs	r0, #1
 8005690:	e7fa      	b.n	8005688 <QSPI_WriteEnable.constprop.0+0x60>
 8005692:	bf00      	nop
 8005694:	20002280 	.word	0x20002280

08005698 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8005698:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800569a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800569e:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80056a0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80056a4:	480e      	ldr	r0, [pc, #56]	; (80056e0 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80056a6:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80056a8:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80056aa:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80056ac:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80056ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056b2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80056b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b8:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80056c0:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80056c2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80056c4:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80056c6:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80056c8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80056cc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80056d0:	f001 fd6a 	bl	80071a8 <HAL_QSPI_MemoryMapped>
}
 80056d4:	3800      	subs	r0, #0
 80056d6:	bf18      	it	ne
 80056d8:	2001      	movne	r0, #1
 80056da:	b011      	add	sp, #68	; 0x44
 80056dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80056e0:	20002280 	.word	0x20002280

080056e4 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80056e4:	4b45      	ldr	r3, [pc, #276]	; (80057fc <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80056e6:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80056e8:	4845      	ldr	r0, [pc, #276]	; (8005800 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80056ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ec:	f042 0202 	orr.w	r2, r2, #2
{
 80056f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
{
 80056f4:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80056f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80056f8:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80056fa:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80056fc:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80056fe:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8005702:	4d40      	ldr	r5, [pc, #256]	; (8005804 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8005704:	9200      	str	r2, [sp, #0]
 8005706:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	f042 0202 	orr.w	r2, r2, #2
 800570e:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	f022 0202 	bic.w	r2, r2, #2
 8005716:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	f042 0202 	orr.w	r2, r2, #2
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	f002 0202 	and.w	r2, r2, #2
 8005726:	9201      	str	r2, [sp, #4]
 8005728:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800572a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572c:	f042 0202 	orr.w	r2, r2, #2
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
 8005732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005734:	f002 0202 	and.w	r2, r2, #2
 8005738:	9202      	str	r2, [sp, #8]
 800573a:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 800573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
 8005744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005746:	f002 0208 	and.w	r2, r2, #8
 800574a:	9203      	str	r2, [sp, #12]
 800574c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
 8005756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005758:	f002 0208 	and.w	r2, r2, #8
 800575c:	9204      	str	r2, [sp, #16]
 800575e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8005760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005762:	f042 0210 	orr.w	r2, r2, #16
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
 8005768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800576a:	f002 0210 	and.w	r2, r2, #16
 800576e:	9205      	str	r2, [sp, #20]
 8005770:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8005772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005774:	f042 0208 	orr.w	r2, r2, #8
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800577a:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	9306      	str	r3, [sp, #24]
 8005784:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005786:	2302      	movs	r3, #2
 8005788:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800578c:	2303      	movs	r3, #3
 800578e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005792:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8005794:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005796:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8005798:	f000 fc42 	bl	8006020 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800579c:	a907      	add	r1, sp, #28
 800579e:	4818      	ldr	r0, [pc, #96]	; (8005800 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80057a0:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80057a2:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057a4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80057a6:	f000 fc3b 	bl	8006020 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80057aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80057ae:	a907      	add	r1, sp, #28
 80057b0:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057b2:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80057b4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80057b6:	f000 fc33 	bl	8006020 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80057ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80057be:	a907      	add	r1, sp, #28
 80057c0:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057c2:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80057c4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80057c6:	f000 fc2b 	bl	8006020 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80057ca:	a907      	add	r1, sp, #28
 80057cc:	480e      	ldr	r0, [pc, #56]	; (8005808 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80057ce:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057d0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80057d2:	f000 fc25 	bl	8006020 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80057d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80057da:	a907      	add	r1, sp, #28
 80057dc:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057de:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80057e0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80057e2:	f000 fc1d 	bl	8006020 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80057e6:	4632      	mov	r2, r6
 80057e8:	210f      	movs	r1, #15
 80057ea:	205c      	movs	r0, #92	; 0x5c
 80057ec:	f000 f9d8 	bl	8005ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80057f0:	205c      	movs	r0, #92	; 0x5c
 80057f2:	f000 fa07 	bl	8005c04 <HAL_NVIC_EnableIRQ>
}
 80057f6:	b00d      	add	sp, #52	; 0x34
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	40020400 	.word	0x40020400
 8005804:	40020c00 	.word	0x40020c00
 8005808:	40021000 	.word	0x40021000

0800580c <BSP_QSPI_Init>:
{ 
 800580c:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800580e:	4c49      	ldr	r4, [pc, #292]	; (8005934 <BSP_QSPI_Init+0x128>)
{ 
 8005810:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8005812:	4b49      	ldr	r3, [pc, #292]	; (8005938 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8005814:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8005816:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8005818:	f001 fc20 	bl	800705c <HAL_QSPI_DeInit>
 800581c:	4605      	mov	r5, r0
 800581e:	b110      	cbz	r0, 8005826 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8005820:	2001      	movs	r0, #1
}
 8005822:	b011      	add	sp, #68	; 0x44
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8005826:	4601      	mov	r1, r0
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ff5b 	bl	80056e4 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 800582e:	2601      	movs	r6, #1
 8005830:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8005836:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800583a:	2310      	movs	r3, #16
 800583c:	60e3      	str	r3, [r4, #12]
 800583e:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8005842:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005846:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8005848:	3b01      	subs	r3, #1
 800584a:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 800584c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8005850:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005854:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005858:	f001 fbac 	bl	8006fb4 <HAL_QSPI_Init>
 800585c:	2800      	cmp	r0, #0
 800585e:	d1df      	bne.n	8005820 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005860:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005864:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8005866:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005868:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800586c:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800586e:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005870:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005872:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005874:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005876:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800587a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800587e:	4620      	mov	r0, r4
 8005880:	f001 fbff 	bl	8007082 <HAL_QSPI_Command>
 8005884:	b108      	cbz	r0, 800588a <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8005886:	2004      	movs	r0, #4
 8005888:	e7cb      	b.n	8005822 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800588a:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800588c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005890:	a902      	add	r1, sp, #8
 8005892:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8005894:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005896:	f001 fbf4 	bl	8007082 <HAL_QSPI_Command>
 800589a:	2800      	cmp	r0, #0
 800589c:	d1f3      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800589e:	f241 3088 	movw	r0, #5000	; 0x1388
 80058a2:	f7ff fe97 	bl	80055d4 <QSPI_AutoPollingMemReady.constprop.0>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d1ed      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80058aa:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 80058ac:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80058b4:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80058b6:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80058b8:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058ba:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80058be:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80058c2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058c6:	4620      	mov	r0, r4
 80058c8:	f001 fbdb 	bl	8007082 <HAL_QSPI_Command>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d1da      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	f10d 0107 	add.w	r1, sp, #7
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 fd4b 	bl	8007374 <HAL_QSPI_Receive>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d1d1      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80058e2:	f7ff fea1 	bl	8005628 <QSPI_WriteEnable.constprop.0>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1cd      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80058ea:	2381      	movs	r3, #129	; 0x81
 80058ec:	22f0      	movs	r2, #240	; 0xf0
 80058ee:	9302      	str	r3, [sp, #8]
 80058f0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80058f4:	210a      	movs	r1, #10
 80058f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058fa:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058fe:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005908:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800590a:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005910:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005914:	f001 fbb5 	bl	8007082 <HAL_QSPI_Command>
 8005918:	2800      	cmp	r0, #0
 800591a:	d1b4      	bne.n	8005886 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	f10d 0107 	add.w	r1, sp, #7
 8005924:	4620      	mov	r0, r4
 8005926:	f001 fcc9 	bl	80072bc <HAL_QSPI_Transmit>
 800592a:	2800      	cmp	r0, #0
 800592c:	f43f af79 	beq.w	8005822 <BSP_QSPI_Init+0x16>
 8005930:	e7a9      	b.n	8005886 <BSP_QSPI_Init+0x7a>
 8005932:	bf00      	nop
 8005934:	20002280 	.word	0x20002280
 8005938:	a0001000 	.word	0xa0001000

0800593c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800593c:	490f      	ldr	r1, [pc, #60]	; (800597c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800593e:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005940:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <SystemInit+0x44>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005956:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800595e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005962:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005964:	4a07      	ldr	r2, [pc, #28]	; (8005984 <SystemInit+0x48>)
 8005966:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800596e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005970:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005976:	608b      	str	r3, [r1, #8]
#endif
}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000ed00 	.word	0xe000ed00
 8005980:	40023800 	.word	0x40023800
 8005984:	24003010 	.word	0x24003010

08005988 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8005988:	4770      	bx	lr

0800598a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800598a:	2000      	movs	r0, #0
 800598c:	4770      	bx	lr
	...

08005990 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8005990:	2300      	movs	r3, #0
{
 8005992:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8005994:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	b90a      	cbnz	r2, 80059a2 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
{
 80059a2:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80059a4:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80059a6:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80059a8:	21a8      	movs	r1, #168	; 0xa8
 80059aa:	4628      	mov	r0, r5
 80059ac:	f7fc f8b4 	bl	8001b18 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80059b0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80059b4:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80059b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059bc:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80059be:	d103      	bne.n	80059c8 <ft5336_ReadID+0x38>
  return (ucReadId);
 80059c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80059c4:	b003      	add	sp, #12
 80059c6:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80059c8:	2b51      	cmp	r3, #81	; 0x51
 80059ca:	d1ec      	bne.n	80059a6 <ft5336_ReadID+0x16>
 80059cc:	e7f8      	b.n	80059c0 <ft5336_ReadID+0x30>
 80059ce:	bf00      	nop
 80059d0:	200022ce 	.word	0x200022ce

080059d4 <ft5336_TS_DetectTouch>:
{
 80059d4:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80059d6:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80059d8:	2102      	movs	r1, #2
 80059da:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80059dc:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80059e0:	f7fc f89a 	bl	8001b18 <TS_IO_Read>
 80059e4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80059e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80059f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d901      	bls.n	8005a00 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80059fc:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8005a06:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005a0a:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	709a      	strb	r2, [r3, #2]
}
 8005a10:	b002      	add	sp, #8
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	200022ce 	.word	0x200022ce

08005a18 <ft5336_TS_GetXY>:
{
 8005a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005a1c:	4d2f      	ldr	r5, [pc, #188]	; (8005adc <ft5336_TS_GetXY+0xc4>)
{
 8005a1e:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8005a20:	2300      	movs	r3, #0
{
 8005a22:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005a24:	78ac      	ldrb	r4, [r5, #2]
 8005a26:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8005a28:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005a2c:	42a2      	cmp	r2, r4
 8005a2e:	d94d      	bls.n	8005acc <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8005a30:	2c09      	cmp	r4, #9
 8005a32:	d84e      	bhi.n	8005ad2 <ft5336_TS_GetXY+0xba>
 8005a34:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	1d19      	adds	r1, r3, #4
 8005a3e:	f103 0b03 	add.w	fp, r3, #3
 8005a42:	f103 0a06 	add.w	sl, r3, #6
 8005a46:	3305      	adds	r3, #5
 8005a48:	b2c9      	uxtb	r1, r1
 8005a4a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a4e:	fa5f fa8a 	uxtb.w	sl, sl
 8005a52:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005a56:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005a58:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005ae0 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7fc f85b 	bl	8001b18 <TS_IO_Read>
 8005a62:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005a66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005a6e:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005a72:	f7fc f851 	bl	8001b18 <TS_IO_Read>
 8005a76:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005a7a:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005a80:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005a82:	f8b9 2000 	ldrh.w	r2, [r9]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a8c:	4313      	orrs	r3, r2
    *X = coord;
 8005a8e:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005a90:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005a94:	f7fc f840 	bl	8001b18 <TS_IO_Read>
 8005a98:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005a9c:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005aa2:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005aa4:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005aa8:	f7fc f836 	bl	8001b18 <TS_IO_Read>
 8005aac:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ab4:	f8b9 2000 	ldrh.w	r2, [r9]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8005ac4:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005ac6:	78ab      	ldrb	r3, [r5, #2]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	70ab      	strb	r3, [r5, #2]
}
 8005acc:	b003      	add	sp, #12
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005ad2:	4698      	mov	r8, r3
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	469b      	mov	fp, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	e7bc      	b.n	8005a56 <ft5336_TS_GetXY+0x3e>
 8005adc:	200022ce 	.word	0x200022ce
 8005ae0:	200022cc 	.word	0x200022cc

08005ae4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	21a4      	movs	r1, #164	; 0xa4
 8005ae8:	b2c0      	uxtb	r0, r0
 8005aea:	f7fb bffb 	b.w	8001ae4 <TS_IO_Write>

08005aee <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005aee:	2200      	movs	r2, #0
 8005af0:	21a4      	movs	r1, #164	; 0xa4
 8005af2:	b2c0      	uxtb	r0, r0
 8005af4:	f7fb bff6 	b.w	8001ae4 <TS_IO_Write>

08005af8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8005af8:	f7ff bff9 	b.w	8005aee <ft5336_TS_DisableIT>

08005afc <ft5336_TS_ClearIT>:
 8005afc:	4770      	bx	lr
	...

08005b00 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	b90a      	cbnz	r2, 8005b0a <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
}
 8005b0a:	4770      	bx	lr
 8005b0c:	200022ce 	.word	0x200022ce

08005b10 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b10:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b12:	2003      	movs	r0, #3
{
 8005b14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b1e:	f000 f82d 	bl	8005b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7fb fe86 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b28:	f7fb fc28 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	bd08      	pop	{r3, pc}
 8005b30:	40023c00 	.word	0x40023c00

08005b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005b34:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <HAL_IncTick+0x10>)
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <HAL_IncTick+0x14>)
 8005b38:	6811      	ldr	r1, [r2, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	440b      	add	r3, r1
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200022d4 	.word	0x200022d4
 8005b48:	20000038 	.word	0x20000038

08005b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <HAL_GetTick+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200022d4 	.word	0x200022d4

08005b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005b5c:	f7ff fff6 	bl	8005b4c <HAL_GetTick>
 8005b60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b62:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005b64:	bf1e      	ittt	ne
 8005b66:	4b04      	ldrne	r3, [pc, #16]	; (8005b78 <HAL_Delay+0x20>)
 8005b68:	781b      	ldrbne	r3, [r3, #0]
 8005b6a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b6c:	f7ff ffee 	bl	8005b4c <HAL_GetTick>
 8005b70:	1b43      	subs	r3, r0, r5
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	d3fa      	bcc.n	8005b6c <HAL_Delay+0x14>
  {
  }
}
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	20000038 	.word	0x20000038

08005b7c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b7c:	4907      	ldr	r1, [pc, #28]	; (8005b9c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b7e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b80:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8a:	0412      	lsls	r2, r2, #16
 8005b8c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005b98:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ba2:	b530      	push	{r4, r5, lr}
 8005ba4:	68dc      	ldr	r4, [r3, #12]
 8005ba6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005baa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bae:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bb0:	2d04      	cmp	r5, #4
 8005bb2:	bf28      	it	cs
 8005bb4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bb6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bbc:	bf8c      	ite	hi
 8005bbe:	3c03      	subhi	r4, #3
 8005bc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8005bc6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bcc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd4:	fa01 f104 	lsl.w	r1, r1, r4
 8005bd8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bdc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005be0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005be2:	db06      	blt.n	8005bf2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005be8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005bec:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005bf0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf2:	f000 000f 	and.w	r0, r0, #15
 8005bf6:	4a02      	ldr	r2, [pc, #8]	; (8005c00 <HAL_NVIC_SetPriority+0x60>)
 8005bf8:	5413      	strb	r3, [r2, r0]
 8005bfa:	e7f9      	b.n	8005bf0 <HAL_NVIC_SetPriority+0x50>
 8005bfc:	e000ed00 	.word	0xe000ed00
 8005c00:	e000ed14 	.word	0xe000ed14

08005c04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c04:	2800      	cmp	r0, #0
 8005c06:	db08      	blt.n	8005c1a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c08:	0942      	lsrs	r2, r0, #5
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f000 001f 	and.w	r0, r0, #31
 8005c10:	fa03 f000 	lsl.w	r0, r3, r0
 8005c14:	4b01      	ldr	r3, [pc, #4]	; (8005c1c <HAL_NVIC_EnableIRQ+0x18>)
 8005c16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005c1a:	4770      	bx	lr
 8005c1c:	e000e100 	.word	0xe000e100

08005c20 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	db0d      	blt.n	8005c40 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c24:	0943      	lsrs	r3, r0, #5
 8005c26:	2201      	movs	r2, #1
 8005c28:	f000 001f 	and.w	r0, r0, #31
 8005c2c:	3320      	adds	r3, #32
 8005c2e:	fa02 f000 	lsl.w	r0, r2, r0
 8005c32:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_NVIC_DisableIRQ+0x24>)
 8005c34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005c3c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	e000e100 	.word	0xe000e100

08005c48 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005c48:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <HAL_MPU_Disable+0x18>)
 8005c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000ed00 	.word	0xe000ed00

08005c64 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_MPU_Enable+0x1c>)
 8005c66:	f040 0001 	orr.w	r0, r0, #1
 8005c6a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005c7a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005c84:	7843      	ldrb	r3, [r0, #1]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_MPU_ConfigRegion+0x54>)
{
 8005c88:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8005c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8005c8e:	7801      	ldrb	r1, [r0, #0]
 8005c90:	b1e9      	cbz	r1, 8005cce <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8005c92:	6843      	ldr	r3, [r0, #4]
 8005c94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005c98:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c9a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005c9c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c9e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ca2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ca4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ca6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005caa:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cac:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005cb0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cb2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005cb6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005cbc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005cc2:	7a01      	ldrb	r1, [r0, #8]
 8005cc4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cc8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005ccc:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005cce:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8005cd2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8005cd6:	e7f9      	b.n	8005ccc <HAL_MPU_ConfigRegion+0x48>
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005cdc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005cde:	4604      	mov	r4, r0
 8005ce0:	b908      	cbnz	r0, 8005ce6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005ce2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005ce4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005ce6:	7f43      	ldrb	r3, [r0, #29]
 8005ce8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cec:	b913      	cbnz	r3, 8005cf4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005cee:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005cf0:	f7fb fb62 	bl	80013b8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005cf8:	7923      	ldrb	r3, [r4, #4]
 8005cfa:	b9e3      	cbnz	r3, 8005d36 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <HAL_CRC_Init+0x70>)
 8005d00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	f022 0218 	bic.w	r2, r2, #24
 8005d08:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d0a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d0c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d0e:	b9d2      	cbnz	r2, 8005d46 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d14:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8005d16:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	6961      	ldr	r1, [r4, #20]
 8005d1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d20:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d22:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d24:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005d30:	2301      	movs	r3, #1
 8005d32:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005d34:	e7d6      	b.n	8005ce4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005d36:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f808 	bl	8005d50 <HAL_CRCEx_Polynomial_Set>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d0e2      	beq.n	8005d0a <HAL_CRC_Init+0x2e>
 8005d44:	e7cd      	b.n	8005ce2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d46:	6922      	ldr	r2, [r4, #16]
 8005d48:	e7e4      	b.n	8005d14 <HAL_CRC_Init+0x38>
 8005d4a:	bf00      	nop
 8005d4c:	04c11db7 	.word	0x04c11db7

08005d50 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005d50:	231f      	movs	r3, #31
{
 8005d52:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005d54:	3b01      	subs	r3, #1
 8005d56:	d31c      	bcc.n	8005d92 <HAL_CRCEx_Polynomial_Set+0x42>
 8005d58:	fa21 f403 	lsr.w	r4, r1, r3
 8005d5c:	07e4      	lsls	r4, r4, #31
 8005d5e:	d5f9      	bpl.n	8005d54 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005d60:	2a10      	cmp	r2, #16
 8005d62:	d012      	beq.n	8005d8a <HAL_CRCEx_Polynomial_Set+0x3a>
 8005d64:	d804      	bhi.n	8005d70 <HAL_CRCEx_Polynomial_Set+0x20>
 8005d66:	b13a      	cbz	r2, 8005d78 <HAL_CRCEx_Polynomial_Set+0x28>
 8005d68:	2a08      	cmp	r2, #8
 8005d6a:	d010      	beq.n	8005d8e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005d6c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005d6e:	e00b      	b.n	8005d88 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005d70:	2a18      	cmp	r2, #24
 8005d72:	d1fb      	bne.n	8005d6c <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005d74:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005d76:	d8f9      	bhi.n	8005d6c <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005d78:	6800      	ldr	r0, [r0, #0]
 8005d7a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005d7c:	6883      	ldr	r3, [r0, #8]
 8005d7e:	f023 0318 	bic.w	r3, r3, #24
 8005d82:	431a      	orrs	r2, r3
 8005d84:	6082      	str	r2, [r0, #8]
 8005d86:	2000      	movs	r0, #0
}
 8005d88:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005d8a:	2b07      	cmp	r3, #7
 8005d8c:	e7f3      	b.n	8005d76 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005d8e:	2b0f      	cmp	r3, #15
 8005d90:	e7f1      	b.n	8005d76 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d1ea      	bne.n	8005d6c <HAL_CRCEx_Polynomial_Set+0x1c>
 8005d96:	e7ef      	b.n	8005d78 <HAL_CRCEx_Polynomial_Set+0x28>

08005d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005d9e:	f7ff fed5 	bl	8005b4c <HAL_GetTick>
 8005da2:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005da4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d006      	beq.n	8005dba <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dac:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8005dae:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005db0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005db2:	2300      	movs	r3, #0
 8005db4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f022 0216 	bic.w	r2, r2, #22
 8005dc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dca:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dce:	b90a      	cbnz	r2, 8005dd4 <HAL_DMA_Abort+0x3c>
 8005dd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005dd2:	b11a      	cbz	r2, 8005ddc <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	f022 0208 	bic.w	r2, r2, #8
 8005dda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f013 0301 	ands.w	r3, r3, #1
 8005dec:	d10a      	bne.n	8005e04 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005df0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005df2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df4:	408a      	lsls	r2, r1
 8005df6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005df8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8005dfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005dfe:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8005e02:	e7d9      	b.n	8005db8 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e04:	f7ff fea2 	bl	8005b4c <HAL_GetTick>
 8005e08:	1b40      	subs	r0, r0, r5
 8005e0a:	2805      	cmp	r0, #5
 8005e0c:	d9ea      	bls.n	8005de4 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e0e:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e10:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e12:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005e14:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e16:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005e1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005e1e:	e7cb      	b.n	8005db8 <HAL_DMA_Abort+0x20>

08005e20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005e20:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005e22:	4604      	mov	r4, r0
 8005e24:	b330      	cbz	r0, 8005e74 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005e2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e2e:	b91b      	cbnz	r3, 8005e38 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005e30:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005e34:	f7fb fad6 	bl	80013e4 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e38:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e3a:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e3c:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e3e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005e4a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e4c:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e4e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e50:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e58:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e5a:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e66:	430b      	orrs	r3, r1
 8005e68:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e6a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8005e72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e74:	2001      	movs	r0, #1
 8005e76:	e7fc      	b.n	8005e72 <HAL_DMA2D_Init+0x52>

08005e78 <HAL_DMA2D_LineEventCallback>:
 8005e78:	4770      	bx	lr

08005e7a <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8005e7a:	4770      	bx	lr

08005e7c <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e7c:	6803      	ldr	r3, [r0, #0]
{
 8005e7e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e80:	685e      	ldr	r6, [r3, #4]
{
 8005e82:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005e84:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e86:	07f2      	lsls	r2, r6, #31
 8005e88:	d514      	bpl.n	8005eb4 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005e8a:	05e9      	lsls	r1, r5, #23
 8005e8c:	d512      	bpl.n	8005eb4 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e94:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005eae:	6943      	ldr	r3, [r0, #20]
 8005eb0:	b103      	cbz	r3, 8005eb4 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005eb2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005eb4:	06b2      	lsls	r2, r6, #26
 8005eb6:	d516      	bpl.n	8005ee6 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005eb8:	04ab      	lsls	r3, r5, #18
 8005eba:	d514      	bpl.n	8005ee6 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005eca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b10b      	cbz	r3, 8005ee6 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ee6:	0730      	lsls	r0, r6, #28
 8005ee8:	d516      	bpl.n	8005f18 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005eea:	0529      	lsls	r1, r5, #20
 8005eec:	d514      	bpl.n	8005f18 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005ef8:	2208      	movs	r2, #8
 8005efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005efc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005efe:	f043 0304 	orr.w	r3, r3, #4
 8005f02:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f04:	2304      	movs	r3, #4
 8005f06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f10:	6963      	ldr	r3, [r4, #20]
 8005f12:	b10b      	cbz	r3, 8005f18 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f14:	4620      	mov	r0, r4
 8005f16:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f18:	0772      	lsls	r2, r6, #29
 8005f1a:	d50b      	bpl.n	8005f34 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f1c:	056b      	lsls	r3, r5, #21
 8005f1e:	d509      	bpl.n	8005f34 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f20:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f22:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f30:	f7ff ffa2 	bl	8005e78 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f34:	07b0      	lsls	r0, r6, #30
 8005f36:	d514      	bpl.n	8005f62 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f38:	05a9      	lsls	r1, r5, #22
 8005f3a:	d512      	bpl.n	8005f62 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f46:	2202      	movs	r2, #2
 8005f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f4c:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f54:	2300      	movs	r3, #0
 8005f56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	b10b      	cbz	r3, 8005f62 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f62:	06f2      	lsls	r2, r6, #27
 8005f64:	d513      	bpl.n	8005f8e <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f66:	04eb      	lsls	r3, r5, #19
 8005f68:	d511      	bpl.n	8005f8e <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f6a:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f6c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f74:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005f76:	2210      	movs	r2, #16
 8005f78:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f7c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f8a:	f7ff ff76 	bl	8005e7a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}

08005f90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f92:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	f04f 0302 	mov.w	r3, #2
 8005f9c:	d02b      	beq.n	8005ff6 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f9e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8005fa2:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005fa4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8005fa8:	4f1c      	ldr	r7, [pc, #112]	; (800601c <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8005faa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005fae:	010e      	lsls	r6, r1, #4
 8005fb0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005fb2:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8005fb6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fba:	3c09      	subs	r4, #9
 8005fbc:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005fbe:	bf96      	itet	ls
 8005fc0:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005fc4:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005fc8:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005fca:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005fcc:	b9a9      	cbnz	r1, 8005ffa <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005fce:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fd0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005fd2:	ea01 0107 	and.w	r1, r1, r7
 8005fd6:	ea42 0201 	orr.w	r2, r2, r1
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005fdc:	6982      	ldr	r2, [r0, #24]
 8005fde:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fe0:	d803      	bhi.n	8005fea <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005fe2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005fe4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8005ff6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ffa:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ffc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ffe:	ea01 0107 	and.w	r1, r1, r7
 8006002:	ea42 0201 	orr.w	r2, r2, r1
 8006006:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006008:	eb00 0206 	add.w	r2, r0, r6
 800600c:	6992      	ldr	r2, [r2, #24]
 800600e:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006010:	d8eb      	bhi.n	8005fea <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006012:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006016:	621d      	str	r5, [r3, #32]
 8006018:	e7e7      	b.n	8005fea <HAL_DMA2D_ConfigLayer+0x5a>
 800601a:	bf00      	nop
 800601c:	00fcfff0 	.word	0x00fcfff0

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006024:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006026:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80061e4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800602a:	4a6c      	ldr	r2, [pc, #432]	; (80061dc <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800602c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800602e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8006030:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006032:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8006036:	43ac      	bics	r4, r5
 8006038:	f040 80b6 	bne.w	80061a8 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800603c:	684d      	ldr	r5, [r1, #4]
 800603e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006042:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006044:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006048:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800604c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800604e:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006050:	2f01      	cmp	r7, #1
 8006052:	d834      	bhi.n	80060be <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8006054:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006056:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800605a:	68cf      	ldr	r7, [r1, #12]
 800605c:	fa07 f708 	lsl.w	r7, r7, r8
 8006060:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8006064:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006066:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006068:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800606c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8006070:	409f      	lsls	r7, r3
 8006072:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8006076:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006078:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800607a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800607c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006080:	688f      	ldr	r7, [r1, #8]
 8006082:	fa07 f708 	lsl.w	r7, r7, r8
 8006086:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800608a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800608c:	d119      	bne.n	80060c2 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800608e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006092:	f003 0b07 	and.w	fp, r3, #7
 8006096:	f04f 0e0f 	mov.w	lr, #15
 800609a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800609e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80060a2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060a6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80060aa:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80060ae:	690f      	ldr	r7, [r1, #16]
 80060b0:	fa07 f70b 	lsl.w	r7, r7, fp
 80060b4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80060b8:	f8ca 7020 	str.w	r7, [sl, #32]
 80060bc:	e001      	b.n	80060c2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060be:	2c03      	cmp	r4, #3
 80060c0:	d1da      	bne.n	8006078 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80060c2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060c4:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060c8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060cc:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060d0:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80060d4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060d6:	d067      	beq.n	80061a8 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d8:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80060dc:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060e0:	f003 0703 	and.w	r7, r3, #3
 80060e4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80060ec:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060f0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80060f6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80060fa:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80060fe:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8006102:	9401      	str	r4, [sp, #4]
 8006104:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006106:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800610a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800610e:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006112:	4c33      	ldr	r4, [pc, #204]	; (80061e0 <HAL_GPIO_Init+0x1c0>)
 8006114:	42a0      	cmp	r0, r4
 8006116:	d04e      	beq.n	80061b6 <HAL_GPIO_Init+0x196>
 8006118:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800611c:	42a0      	cmp	r0, r4
 800611e:	d04c      	beq.n	80061ba <HAL_GPIO_Init+0x19a>
 8006120:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006124:	42a0      	cmp	r0, r4
 8006126:	d04a      	beq.n	80061be <HAL_GPIO_Init+0x19e>
 8006128:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800612c:	42a0      	cmp	r0, r4
 800612e:	d048      	beq.n	80061c2 <HAL_GPIO_Init+0x1a2>
 8006130:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006134:	42a0      	cmp	r0, r4
 8006136:	d046      	beq.n	80061c6 <HAL_GPIO_Init+0x1a6>
 8006138:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800613c:	42a0      	cmp	r0, r4
 800613e:	d044      	beq.n	80061ca <HAL_GPIO_Init+0x1aa>
 8006140:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006144:	42a0      	cmp	r0, r4
 8006146:	d042      	beq.n	80061ce <HAL_GPIO_Init+0x1ae>
 8006148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800614c:	42a0      	cmp	r0, r4
 800614e:	d040      	beq.n	80061d2 <HAL_GPIO_Init+0x1b2>
 8006150:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006154:	42a0      	cmp	r0, r4
 8006156:	d03e      	beq.n	80061d6 <HAL_GPIO_Init+0x1b6>
 8006158:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800615c:	42a0      	cmp	r0, r4
 800615e:	bf0c      	ite	eq
 8006160:	2409      	moveq	r4, #9
 8006162:	240a      	movne	r4, #10
 8006164:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006166:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006168:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800616c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800616e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8006172:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8006174:	bf54      	ite	pl
 8006176:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006178:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800617c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800617e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8006180:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8006182:	bf54      	ite	pl
 8006184:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006186:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800618a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800618c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800618e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8006190:	bf54      	ite	pl
 8006192:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006194:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006198:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800619a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800619c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800619e:	bf54      	ite	pl
 80061a0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80061a2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80061a6:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061a8:	3301      	adds	r3, #1
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	f47f af3e 	bne.w	800602c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80061b0:	b003      	add	sp, #12
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061b6:	2400      	movs	r4, #0
 80061b8:	e7d4      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061ba:	2401      	movs	r4, #1
 80061bc:	e7d2      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061be:	2402      	movs	r4, #2
 80061c0:	e7d0      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061c2:	2403      	movs	r4, #3
 80061c4:	e7ce      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061c6:	2404      	movs	r4, #4
 80061c8:	e7cc      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061ca:	2405      	movs	r4, #5
 80061cc:	e7ca      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061ce:	2406      	movs	r4, #6
 80061d0:	e7c8      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061d2:	2407      	movs	r4, #7
 80061d4:	e7c6      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061d6:	2408      	movs	r4, #8
 80061d8:	e7c4      	b.n	8006164 <HAL_GPIO_Init+0x144>
 80061da:	bf00      	nop
 80061dc:	40013c00 	.word	0x40013c00
 80061e0:	40020000 	.word	0x40020000
 80061e4:	40023800 	.word	0x40023800

080061e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80061ec:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061ee:	4c4a      	ldr	r4, [pc, #296]	; (8006318 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061f0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8006320 <HAL_GPIO_DeInit+0x138>
 80061f4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8006324 <HAL_GPIO_DeInit+0x13c>
 80061f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006328 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80061fc:	2301      	movs	r3, #1
 80061fe:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8006202:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8006206:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800620a:	d16e      	bne.n	80062ea <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 800620c:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006210:	f002 0c03 	and.w	ip, r2, #3
 8006214:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006216:	4b41      	ldr	r3, [pc, #260]	; (800631c <HAL_GPIO_DeInit+0x134>)
 8006218:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800621c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006220:	4298      	cmp	r0, r3
 8006222:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006226:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 800622a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800622e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006232:	d05f      	beq.n	80062f4 <HAL_GPIO_DeInit+0x10c>
 8006234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006238:	4298      	cmp	r0, r3
 800623a:	d05d      	beq.n	80062f8 <HAL_GPIO_DeInit+0x110>
 800623c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006240:	4298      	cmp	r0, r3
 8006242:	d05b      	beq.n	80062fc <HAL_GPIO_DeInit+0x114>
 8006244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006248:	4298      	cmp	r0, r3
 800624a:	d059      	beq.n	8006300 <HAL_GPIO_DeInit+0x118>
 800624c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006250:	4298      	cmp	r0, r3
 8006252:	d057      	beq.n	8006304 <HAL_GPIO_DeInit+0x11c>
 8006254:	4548      	cmp	r0, r9
 8006256:	d057      	beq.n	8006308 <HAL_GPIO_DeInit+0x120>
 8006258:	4550      	cmp	r0, sl
 800625a:	d057      	beq.n	800630c <HAL_GPIO_DeInit+0x124>
 800625c:	4558      	cmp	r0, fp
 800625e:	d057      	beq.n	8006310 <HAL_GPIO_DeInit+0x128>
 8006260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006264:	4298      	cmp	r0, r3
 8006266:	d055      	beq.n	8006314 <HAL_GPIO_DeInit+0x12c>
 8006268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626c:	4298      	cmp	r0, r3
 800626e:	bf0c      	ite	eq
 8006270:	2309      	moveq	r3, #9
 8006272:	230a      	movne	r3, #10
 8006274:	fa03 f30c 	lsl.w	r3, r3, ip
 8006278:	4543      	cmp	r3, r8
 800627a:	d113      	bne.n	80062a4 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	ea23 0307 	bic.w	r3, r3, r7
 8006282:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	ea23 0307 	bic.w	r3, r3, r7
 800628a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800628c:	68e3      	ldr	r3, [r4, #12]
 800628e:	ea23 0307 	bic.w	r3, r3, r7
 8006292:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	ea23 0307 	bic.w	r3, r3, r7
 800629a:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800629c:	68ab      	ldr	r3, [r5, #8]
 800629e:	ea23 0306 	bic.w	r3, r3, r6
 80062a2:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062a4:	2603      	movs	r6, #3
 80062a6:	0053      	lsls	r3, r2, #1
 80062a8:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062aa:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062ae:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062b2:	270f      	movs	r7, #15
 80062b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062b8:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062bc:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062c0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062c2:	fa22 f506 	lsr.w	r5, r2, r6
 80062c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80062ca:	6a2e      	ldr	r6, [r5, #32]
 80062cc:	ea26 0707 	bic.w	r7, r6, r7
 80062d0:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80062d2:	68c5      	ldr	r5, [r0, #12]
 80062d4:	ea25 0503 	bic.w	r5, r5, r3
 80062d8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062da:	6845      	ldr	r5, [r0, #4]
 80062dc:	ea25 050e 	bic.w	r5, r5, lr
 80062e0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062e2:	6885      	ldr	r5, [r0, #8]
 80062e4:	ea25 0303 	bic.w	r3, r5, r3
 80062e8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80062ea:	3201      	adds	r2, #1
 80062ec:	2a10      	cmp	r2, #16
 80062ee:	d185      	bne.n	80061fc <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80062f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80062f4:	2300      	movs	r3, #0
 80062f6:	e7bd      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e7bb      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e7b9      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006300:	2303      	movs	r3, #3
 8006302:	e7b7      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006304:	2304      	movs	r3, #4
 8006306:	e7b5      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006308:	2305      	movs	r3, #5
 800630a:	e7b3      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 800630c:	2306      	movs	r3, #6
 800630e:	e7b1      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006310:	2307      	movs	r3, #7
 8006312:	e7af      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006314:	2308      	movs	r3, #8
 8006316:	e7ad      	b.n	8006274 <HAL_GPIO_DeInit+0x8c>
 8006318:	40013c00 	.word	0x40013c00
 800631c:	40020000 	.word	0x40020000
 8006320:	40021400 	.word	0x40021400
 8006324:	40021800 	.word	0x40021800
 8006328:	40021c00 	.word	0x40021c00

0800632c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800632c:	b10a      	cbz	r2, 8006332 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800632e:	6181      	str	r1, [r0, #24]
  }
}
 8006330:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006332:	0409      	lsls	r1, r1, #16
 8006334:	e7fb      	b.n	800632e <HAL_GPIO_WritePin+0x2>

08006336 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006336:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006338:	ea01 0203 	and.w	r2, r1, r3
 800633c:	ea21 0103 	bic.w	r1, r1, r3
 8006340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006344:	6181      	str	r1, [r0, #24]
}
 8006346:	4770      	bx	lr

08006348 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	0791      	lsls	r1, r2, #30
 800634e:	d501      	bpl.n	8006354 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006350:	2200      	movs	r2, #0
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	07d2      	lsls	r2, r2, #31
 8006358:	d403      	bmi.n	8006362 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	619a      	str	r2, [r3, #24]
  }
}
 8006362:	4770      	bx	lr

08006364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006364:	b530      	push	{r4, r5, lr}
 8006366:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006368:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800636c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800636e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006370:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006376:	4a05      	ldr	r2, [pc, #20]	; (800638c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006378:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800637a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800637e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006382:	ea20 0002 	bic.w	r0, r0, r2
 8006386:	4303      	orrs	r3, r0
 8006388:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800638a:	bd30      	pop	{r4, r5, pc}
 800638c:	03ff63ff 	.word	0x03ff63ff

08006390 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8006390:	6803      	ldr	r3, [r0, #0]
{
 8006392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006396:	699c      	ldr	r4, [r3, #24]
{
 8006398:	4605      	mov	r5, r0
 800639a:	460f      	mov	r7, r1
 800639c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800639e:	f014 0410 	ands.w	r4, r4, #16
 80063a2:	d070      	beq.n	8006486 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80063a4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063aa:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	0692      	lsls	r2, r2, #26
 80063b2:	d462      	bmi.n	800647a <I2C_IsErrorOccurred+0xea>
 80063b4:	f1b8 0f00 	cmp.w	r8, #0
 80063b8:	d036      	beq.n	8006428 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80063ba:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80063be:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063c4:	05d6      	lsls	r6, r2, #23
 80063c6:	d505      	bpl.n	80063d4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80063cc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80063d0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063d2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063d4:	0551      	lsls	r1, r2, #21
 80063d6:	d505      	bpl.n	80063e4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80063dc:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063e2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063e4:	0592      	lsls	r2, r2, #22
 80063e6:	d550      	bpl.n	800648a <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80063ec:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063f0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7ff ffa8 	bl	8006348 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80063f8:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80063fa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80063fc:	6853      	ldr	r3, [r2, #4]
 80063fe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006402:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006406:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006410:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006412:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006414:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006416:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006418:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800641c:	2300      	movs	r3, #0
 800641e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006422:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8006426:	e032      	b.n	800648e <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8006428:	1c7a      	adds	r2, r7, #1
 800642a:	d0c0      	beq.n	80063ae <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800642c:	f7ff fb8e 	bl	8005b4c <HAL_GetTick>
 8006430:	1b80      	subs	r0, r0, r6
 8006432:	42b8      	cmp	r0, r7
 8006434:	d801      	bhi.n	800643a <I2C_IsErrorOccurred+0xaa>
 8006436:	2f00      	cmp	r7, #0
 8006438:	d1b8      	bne.n	80063ac <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800643a:	682b      	ldr	r3, [r5, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800643e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006442:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006444:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006446:	0400      	lsls	r0, r0, #16
 8006448:	d50a      	bpl.n	8006460 <I2C_IsErrorOccurred+0xd0>
 800644a:	0448      	lsls	r0, r1, #17
 800644c:	d408      	bmi.n	8006460 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800644e:	2a20      	cmp	r2, #32
 8006450:	d006      	beq.n	8006460 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006458:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800645a:	f7ff fb77 	bl	8005b4c <HAL_GetTick>
 800645e:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	0699      	lsls	r1, r3, #26
 8006466:	d4a1      	bmi.n	80063ac <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006468:	f7ff fb70 	bl	8005b4c <HAL_GetTick>
 800646c:	1b80      	subs	r0, r0, r6
 800646e:	2819      	cmp	r0, #25
 8006470:	d9f6      	bls.n	8006460 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006472:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006474:	f04f 0801 	mov.w	r8, #1
 8006478:	e798      	b.n	80063ac <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800647a:	f1b8 0f00 	cmp.w	r8, #0
 800647e:	d19c      	bne.n	80063ba <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006480:	2220      	movs	r2, #32
 8006482:	61da      	str	r2, [r3, #28]
 8006484:	e799      	b.n	80063ba <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	4620      	mov	r0, r4
 8006488:	e79a      	b.n	80063c0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800648a:	2800      	cmp	r0, #0
 800648c:	d1b1      	bne.n	80063f2 <I2C_IsErrorOccurred+0x62>
}
 800648e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006492 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006492:	b570      	push	{r4, r5, r6, lr}
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	079b      	lsls	r3, r3, #30
 80064a0:	d501      	bpl.n	80064a6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80064a2:	2000      	movs	r0, #0
}
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	4632      	mov	r2, r6
 80064a8:	4629      	mov	r1, r5
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff ff70 	bl	8006390 <I2C_IsErrorOccurred>
 80064b0:	b9a0      	cbnz	r0, 80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	1c6a      	adds	r2, r5, #1
 80064b4:	d0f1      	beq.n	800649a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7ff fb49 	bl	8005b4c <HAL_GetTick>
 80064ba:	1b80      	subs	r0, r0, r6
 80064bc:	42a8      	cmp	r0, r5
 80064be:	d801      	bhi.n	80064c4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80064c0:	2d00      	cmp	r5, #0
 80064c2:	d1ea      	bne.n	800649a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064c6:	f043 0320 	orr.w	r3, r3, #32
 80064ca:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	2320      	movs	r3, #32
 80064ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80064d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80064dc:	2001      	movs	r0, #1
 80064de:	e7e1      	b.n	80064a4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080064e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	9f06      	ldr	r7, [sp, #24]
 80064e6:	4604      	mov	r4, r0
 80064e8:	4688      	mov	r8, r1
 80064ea:	4616      	mov	r6, r2
 80064ec:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	6993      	ldr	r3, [r2, #24]
 80064f2:	ea38 0303 	bics.w	r3, r8, r3
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	42b3      	cmp	r3, r6
 80064fe:	d001      	beq.n	8006504 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006500:	2000      	movs	r0, #0
 8006502:	e015      	b.n	8006530 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006504:	1c6b      	adds	r3, r5, #1
 8006506:	d0f3      	beq.n	80064f0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7ff fb20 	bl	8005b4c <HAL_GetTick>
 800650c:	1bc0      	subs	r0, r0, r7
 800650e:	42a8      	cmp	r0, r5
 8006510:	d801      	bhi.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x36>
 8006512:	2d00      	cmp	r5, #0
 8006514:	d1eb      	bne.n	80064ee <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006516:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006518:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006520:	2320      	movs	r3, #32
 8006522:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800652c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006534 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	460d      	mov	r5, r1
 800653a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	069b      	lsls	r3, r3, #26
 8006542:	d501      	bpl.n	8006548 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006544:	2000      	movs	r0, #0
}
 8006546:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006548:	4632      	mov	r2, r6
 800654a:	4629      	mov	r1, r5
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff ff1f 	bl	8006390 <I2C_IsErrorOccurred>
 8006552:	b990      	cbnz	r0, 800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006554:	f7ff fafa 	bl	8005b4c <HAL_GetTick>
 8006558:	1b80      	subs	r0, r0, r6
 800655a:	42a8      	cmp	r0, r5
 800655c:	d801      	bhi.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800655e:	2d00      	cmp	r5, #0
 8006560:	d1ec      	bne.n	800653c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006562:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006564:	f043 0320 	orr.w	r3, r3, #32
 8006568:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800656a:	2320      	movs	r3, #32
 800656c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006570:	2300      	movs	r3, #0
 8006572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006576:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800657a:	2001      	movs	r0, #1
 800657c:	e7e3      	b.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800657e <HAL_I2C_Init>:
{
 800657e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006580:	4604      	mov	r4, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d04a      	beq.n	800661c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006586:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800658a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800658e:	b91b      	cbnz	r3, 8006598 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006590:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006594:	f7fa ff46 	bl	8001424 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006598:	2324      	movs	r3, #36	; 0x24
 800659a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065a8:	6862      	ldr	r2, [r4, #4]
 80065aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065b6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065bc:	2901      	cmp	r1, #1
 80065be:	d124      	bne.n	800660a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c8:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80065ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065dc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80065e0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065e2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065ea:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	f042 0201 	orr.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006602:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006608:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800660a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800660e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006610:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006612:	d1d8      	bne.n	80065c6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	e7d4      	b.n	80065c6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800661c:	2001      	movs	r0, #1
 800661e:	e7f3      	b.n	8006608 <HAL_I2C_Init+0x8a>

08006620 <HAL_I2C_DeInit>:
{
 8006620:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006622:	4604      	mov	r4, r0
 8006624:	b198      	cbz	r0, 800664e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006626:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006628:	2324      	movs	r3, #36	; 0x24
 800662a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006636:	f7fa ff39 	bl	80014ac <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663a:	2000      	movs	r0, #0
 800663c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800663e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006642:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006646:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006648:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800664c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800664e:	2001      	movs	r0, #1
 8006650:	e7fc      	b.n	800664c <HAL_I2C_DeInit+0x2c>
	...

08006654 <HAL_I2C_Mem_Write>:
{
 8006654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800665a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800665e:	4604      	mov	r4, r0
 8006660:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006662:	2b20      	cmp	r3, #32
{
 8006664:	4616      	mov	r6, r2
 8006666:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800666a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800666e:	f040 80c6 	bne.w	80067fe <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8006672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006674:	b113      	cbz	r3, 800667c <HAL_I2C_Mem_Write+0x28>
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	d106      	bne.n	800668a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800667c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006680:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006682:	2001      	movs	r0, #1
}
 8006684:	b003      	add	sp, #12
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800668a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800668e:	2b01      	cmp	r3, #1
 8006690:	f000 80b5 	beq.w	80067fe <HAL_I2C_Mem_Write+0x1aa>
 8006694:	f04f 0b01 	mov.w	fp, #1
 8006698:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800669c:	f7ff fa56 	bl	8005b4c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066a0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80066a2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066a4:	9000      	str	r0, [sp, #0]
 80066a6:	465a      	mov	r2, fp
 80066a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff ff17 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d1e5      	bne.n	8006682 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066b6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066b8:	fa5f f289 	uxtb.w	r2, r9
 80066bc:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80066be:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80066ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066cc:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ce:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80066d0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066d2:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80066d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066de:	f7ff fe41 	bl	8006364 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	462a      	mov	r2, r5
 80066e4:	4641      	mov	r1, r8
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff fed3 	bl	8006492 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ec:	bb18      	cbnz	r0, 8006736 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ee:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066f2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f4:	d115      	bne.n	8006722 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066f6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066fe:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	4643      	mov	r3, r8
 8006702:	9500      	str	r5, [sp, #0]
 8006704:	f7ff feec 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 8006708:	b9a8      	cbnz	r0, 8006736 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800670a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2bff      	cmp	r3, #255	; 0xff
 8006710:	d815      	bhi.n	800673e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8006712:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006718:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800671a:	b292      	uxth	r2, r2
 800671c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	e012      	b.n	8006748 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006722:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006724:	4641      	mov	r1, r8
 8006726:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006728:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800672a:	462a      	mov	r2, r5
 800672c:	f7ff feb1 	bl	8006492 <I2C_WaitOnTXISFlagUntilTimeout>
 8006730:	b908      	cbnz	r0, 8006736 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	e7df      	b.n	80066f6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8006736:	2300      	movs	r3, #0
 8006738:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800673c:	e7a1      	b.n	8006682 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800673e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006744:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006746:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006748:	4639      	mov	r1, r7
 800674a:	4620      	mov	r0, r4
 800674c:	f7ff fe0a 	bl	8006364 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006750:	462a      	mov	r2, r5
 8006752:	4641      	mov	r1, r8
 8006754:	4620      	mov	r0, r4
 8006756:	f7ff fe9c 	bl	8006492 <I2C_WaitOnTXISFlagUntilTimeout>
 800675a:	2800      	cmp	r0, #0
 800675c:	d191      	bne.n	8006682 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800675e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006766:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006768:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800676a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800676c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800676e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006770:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006772:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006774:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006776:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006778:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800677a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800677c:	b29b      	uxth	r3, r3
 800677e:	b1b3      	cbz	r3, 80067ae <HAL_I2C_Mem_Write+0x15a>
 8006780:	b9aa      	cbnz	r2, 80067ae <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006782:	4643      	mov	r3, r8
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	4620      	mov	r0, r4
 8006788:	9500      	str	r5, [sp, #0]
 800678a:	f7ff fea9 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 800678e:	2800      	cmp	r0, #0
 8006790:	f47f af77 	bne.w	8006682 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	2bff      	cmp	r3, #255	; 0xff
 800679a:	d928      	bls.n	80067ee <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800679c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800679e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067a6:	4639      	mov	r1, r7
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fddb 	bl	8006364 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80067ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1cc      	bne.n	8006750 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b6:	462a      	mov	r2, r5
 80067b8:	4641      	mov	r1, r8
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff feba 	bl	8006534 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	f47f af5e 	bne.w	8006682 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2120      	movs	r1, #32
 80067ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80067d2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80067d6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80067e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067e8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80067ec:	e74a      	b.n	8006684 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80067ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067f4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80067f6:	b292      	uxth	r2, r2
 80067f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	e7d3      	b.n	80067a6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80067fe:	2002      	movs	r0, #2
 8006800:	e740      	b.n	8006684 <HAL_I2C_Mem_Write+0x30>
 8006802:	bf00      	nop
 8006804:	80002000 	.word	0x80002000

08006808 <HAL_I2C_Mem_Read>:
{
 8006808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800680e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006812:	4604      	mov	r4, r0
 8006814:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006816:	2b20      	cmp	r3, #32
{
 8006818:	4616      	mov	r6, r2
 800681a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800681e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006822:	f040 80c9 	bne.w	80069b8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8006826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006828:	b113      	cbz	r3, 8006830 <HAL_I2C_Mem_Read+0x28>
 800682a:	f1ba 0f00 	cmp.w	sl, #0
 800682e:	d106      	bne.n	800683e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006834:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006836:	2001      	movs	r0, #1
}
 8006838:	b003      	add	sp, #12
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800683e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006842:	2b01      	cmp	r3, #1
 8006844:	f000 80b8 	beq.w	80069b8 <HAL_I2C_Mem_Read+0x1b0>
 8006848:	f04f 0b01 	mov.w	fp, #1
 800684c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006850:	f7ff f97c 	bl	8005b4c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006854:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8006856:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006858:	9000      	str	r0, [sp, #0]
 800685a:	465a      	mov	r2, fp
 800685c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff fe3d 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 8006866:	2800      	cmp	r0, #0
 8006868:	d1e5      	bne.n	8006836 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800686a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800686c:	fa5f f289 	uxtb.w	r2, r9
 8006870:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8006872:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006878:	2340      	movs	r3, #64	; 0x40
 800687a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800687e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006880:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006882:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006884:	4b4d      	ldr	r3, [pc, #308]	; (80069bc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8006886:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff fd68 	bl	8006364 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006894:	462a      	mov	r2, r5
 8006896:	4641      	mov	r1, r8
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff fdfa 	bl	8006492 <I2C_WaitOnTXISFlagUntilTimeout>
 800689e:	bb20      	cbnz	r0, 80068ea <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068a0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068a6:	d116      	bne.n	80068d6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	2200      	movs	r2, #0
 80068ac:	2140      	movs	r1, #64	; 0x40
 80068ae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	4643      	mov	r3, r8
 80068b4:	9500      	str	r5, [sp, #0]
 80068b6:	f7ff fe13 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 80068ba:	b9b0      	cbnz	r0, 80068ea <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2bff      	cmp	r3, #255	; 0xff
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <HAL_I2C_Mem_Read+0x1b8>)
 80068c4:	d815      	bhi.n	80068f2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80068c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80068ce:	b292      	uxth	r2, r2
 80068d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	e012      	b.n	80068fc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068d6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d8:	4641      	mov	r1, r8
 80068da:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068de:	462a      	mov	r2, r5
 80068e0:	f7ff fdd7 	bl	8006492 <I2C_WaitOnTXISFlagUntilTimeout>
 80068e4:	b908      	cbnz	r0, 80068ea <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	e7de      	b.n	80068a8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80068ea:	2300      	movs	r3, #0
 80068ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80068f0:	e7a1      	b.n	8006836 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068fc:	4639      	mov	r1, r7
 80068fe:	4620      	mov	r0, r4
 8006900:	f7ff fd30 	bl	8006364 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006904:	4643      	mov	r3, r8
 8006906:	2200      	movs	r2, #0
 8006908:	2104      	movs	r1, #4
 800690a:	4620      	mov	r0, r4
 800690c:	9500      	str	r5, [sp, #0]
 800690e:	f7ff fde7 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 8006912:	2800      	cmp	r0, #0
 8006914:	d18f      	bne.n	8006836 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800691a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006922:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006924:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006926:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006928:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800692a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800692c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800692e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006930:	b29b      	uxth	r3, r3
 8006932:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006934:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	b1b3      	cbz	r3, 8006968 <HAL_I2C_Mem_Read+0x160>
 800693a:	b9aa      	cbnz	r2, 8006968 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800693c:	4643      	mov	r3, r8
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	4620      	mov	r0, r4
 8006942:	9500      	str	r5, [sp, #0]
 8006944:	f7ff fdcc 	bl	80064e0 <I2C_WaitOnFlagUntilTimeout>
 8006948:	2800      	cmp	r0, #0
 800694a:	f47f af74 	bne.w	8006836 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d928      	bls.n	80069a8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006956:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800695c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800695e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006960:	4639      	mov	r1, r7
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fcfe 	bl	8006364 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1c9      	bne.n	8006904 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006970:	462a      	mov	r2, r5
 8006972:	4641      	mov	r1, r8
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff fddd 	bl	8006534 <I2C_WaitOnSTOPFlagUntilTimeout>
 800697a:	2800      	cmp	r0, #0
 800697c:	f47f af5b 	bne.w	8006836 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	2120      	movs	r1, #32
 8006984:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800698c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006990:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800699a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800699e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80069a6:	e747      	b.n	8006838 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80069a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80069b0:	b292      	uxth	r2, r2
 80069b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	e7d3      	b.n	8006960 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80069b8:	2002      	movs	r0, #2
 80069ba:	e73d      	b.n	8006838 <HAL_I2C_Mem_Read+0x30>
 80069bc:	80002000 	.word	0x80002000
 80069c0:	80002400 	.word	0x80002400

080069c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069c4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	b2dc      	uxtb	r4, r3
 80069ce:	d11d      	bne.n	8006a0c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d019      	beq.n	8006a0c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069d8:	2324      	movs	r3, #36	; 0x24
 80069da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069de:	6803      	ldr	r3, [r0, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4311      	orrs	r1, r2
 80069f4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fe:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006a00:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006a08:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a0a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	e7fc      	b.n	8006a0a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08006a10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a10:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	b2dc      	uxtb	r4, r3
 8006a1a:	d11c      	bne.n	8006a56 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d018      	beq.n	8006a56 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a24:	2324      	movs	r3, #36	; 0x24
 8006a26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a2a:	6803      	ldr	r3, [r0, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a34:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a36:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a3a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a3e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a48:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006a4a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006a52:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a54:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a56:	2002      	movs	r0, #2
 8006a58:	e7fc      	b.n	8006a54 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08006a5a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a5a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a5c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a5e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a62:	3284      	adds	r2, #132	; 0x84
 8006a64:	1883      	adds	r3, r0, r2
{
 8006a66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a6a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a6c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a70:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006a72:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a76:	684c      	ldr	r4, [r1, #4]
 8006a78:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a7c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a80:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a84:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a86:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a88:	68c5      	ldr	r5, [r0, #12]
 8006a8a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8006a8e:	443d      	add	r5, r7
 8006a90:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a94:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a96:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a98:	68c5      	ldr	r5, [r0, #12]
 8006a9a:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8006a9e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006aa0:	689d      	ldr	r5, [r3, #8]
 8006aa2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8006aa6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006aa8:	688d      	ldr	r5, [r1, #8]
 8006aaa:	68c7      	ldr	r7, [r0, #12]
 8006aac:	3501      	adds	r5, #1
 8006aae:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8006ab2:	443d      	add	r5, r7
 8006ab4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ab8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006aba:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006abc:	691d      	ldr	r5, [r3, #16]
 8006abe:	f025 0507 	bic.w	r5, r5, #7
 8006ac2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ac4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ac6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ac8:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006acc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ad0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006ad4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8006ad8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8006adc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8006ae0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8006ae4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ae6:	695d      	ldr	r5, [r3, #20]
 8006ae8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006aec:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006aee:	694d      	ldr	r5, [r1, #20]
 8006af0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006af2:	69dd      	ldr	r5, [r3, #28]
 8006af4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8006af8:	f025 0507 	bic.w	r5, r5, #7
 8006afc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006afe:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8006b02:	433d      	orrs	r5, r7
 8006b04:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b06:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b08:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b0a:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b0e:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b10:	b31e      	cbz	r6, 8006b5a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b12:	2e01      	cmp	r6, #1
 8006b14:	d023      	beq.n	8006b5e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b16:	1eb5      	subs	r5, r6, #2
 8006b18:	2d02      	cmp	r5, #2
 8006b1a:	d922      	bls.n	8006b62 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006b1c:	2e07      	cmp	r6, #7
 8006b1e:	bf0c      	ite	eq
 8006b20:	2502      	moveq	r5, #2
 8006b22:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b24:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b26:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b2a:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b2e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b30:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b32:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b34:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b36:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b38:	436e      	muls	r6, r5
 8006b3a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006b3e:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b40:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006b42:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8006b46:	f024 0407 	bic.w	r4, r4, #7
 8006b4a:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b4c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b4e:	5883      	ldr	r3, [r0, r2]
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	5083      	str	r3, [r0, r2]
}
 8006b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8006b5a:	2504      	movs	r5, #4
 8006b5c:	e7e2      	b.n	8006b24 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006b5e:	2503      	movs	r5, #3
 8006b60:	e7e0      	b.n	8006b24 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006b62:	2502      	movs	r5, #2
 8006b64:	e7de      	b.n	8006b24 <LTDC_SetConfig+0xca>
	...

08006b68 <HAL_LTDC_Init>:
{
 8006b68:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d063      	beq.n	8006c38 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006b70:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006b74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b78:	b91b      	cbnz	r3, 8006b82 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8006b7a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8006b7e:	f7fa fcb1 	bl	80014e4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006b90:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b92:	6999      	ldr	r1, [r3, #24]
 8006b94:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8006b98:	4302      	orrs	r2, r0
 8006b9a:	68e0      	ldr	r0, [r4, #12]
 8006b9c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b9e:	6920      	ldr	r0, [r4, #16]
 8006ba0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ba2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ba4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ba6:	4925      	ldr	r1, [pc, #148]	; (8006c3c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ba8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	400a      	ands	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bb6:	69a0      	ldr	r0, [r4, #24]
 8006bb8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006bba:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006bbc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	400a      	ands	r2, r1
 8006bc2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bca:	6a20      	ldr	r0, [r4, #32]
 8006bcc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006bce:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006bd0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006be0:	4302      	orrs	r2, r0
 8006be2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	4011      	ands	r1, r2
 8006be8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006bea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006bfa:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006bfe:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006c02:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c06:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c0a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006c14:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006c18:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	f042 0206 	orr.w	r2, r2, #6
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c2c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006c2e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c32:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7fc      	b.n	8006c36 <HAL_LTDC_Init+0xce>
 8006c3c:	f000f800 	.word	0xf000f800

08006c40 <HAL_LTDC_ErrorCallback>:
 8006c40:	4770      	bx	lr

08006c42 <HAL_LTDC_ReloadEventCallback>:
 8006c42:	4770      	bx	lr

08006c44 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006c44:	6803      	ldr	r3, [r0, #0]
{
 8006c46:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006c48:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8006c4a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006c4c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006c4e:	0772      	lsls	r2, r6, #29
 8006c50:	d514      	bpl.n	8006c7c <HAL_LTDC_IRQHandler+0x38>
 8006c52:	0769      	lsls	r1, r5, #29
 8006c54:	d512      	bpl.n	8006c7c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c58:	f022 0204 	bic.w	r2, r2, #4
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006c5e:	2204      	movs	r2, #4
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006c62:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006c6e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006c70:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006c74:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006c78:	f7ff ffe2 	bl	8006c40 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006c7c:	07b2      	lsls	r2, r6, #30
 8006c7e:	d516      	bpl.n	8006cae <HAL_LTDC_IRQHandler+0x6a>
 8006c80:	07ab      	lsls	r3, r5, #30
 8006c82:	d514      	bpl.n	8006cae <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006c84:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8006c86:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8a:	f022 0202 	bic.w	r2, r2, #2
 8006c8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006c90:	2202      	movs	r2, #2
 8006c92:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006c94:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006caa:	f7ff ffc9 	bl	8006c40 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006cae:	07f0      	lsls	r0, r6, #31
 8006cb0:	d510      	bpl.n	8006cd4 <HAL_LTDC_IRQHandler+0x90>
 8006cb2:	07e9      	lsls	r1, r5, #31
 8006cb4:	d50e      	bpl.n	8006cd4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006cb6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8006cb8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8006cc6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8006cc8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006ccc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006cd0:	f7fc f9ea 	bl	80030a8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006cd4:	0732      	lsls	r2, r6, #28
 8006cd6:	d511      	bpl.n	8006cfc <HAL_LTDC_IRQHandler+0xb8>
 8006cd8:	072b      	lsls	r3, r5, #28
 8006cda:	d50f      	bpl.n	8006cfc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006cdc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006cde:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce2:	f022 0208 	bic.w	r2, r2, #8
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ce8:	2208      	movs	r2, #8
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006cf8:	f7ff ffa3 	bl	8006c42 <HAL_LTDC_ReloadEventCallback>
}
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}

08006cfe <HAL_LTDC_ConfigLayer>:
{
 8006cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8006d02:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8006d06:	4606      	mov	r6, r0
 8006d08:	460f      	mov	r7, r1
 8006d0a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	f04f 0002 	mov.w	r0, #2
 8006d12:	d01f      	beq.n	8006d54 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d14:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8006d16:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d1a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d1c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d20:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006d24:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d28:	3438      	adds	r4, #56	; 0x38
 8006d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d36:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4662      	mov	r2, ip
 8006d3c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d3e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006d40:	f7ff fe8b 	bl	8006a5a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006d44:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8006d46:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006d48:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006d4c:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006d50:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d58 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8006d58:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f04f 0302 	mov.w	r3, #2
 8006d62:	d012      	beq.n	8006d8a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d64:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006d68:	6803      	ldr	r3, [r0, #0]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <HAL_LTDC_ProgramLineEvent+0x38>)
 8006d74:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006d84:	2300      	movs	r3, #0
 8006d86:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8006d8a:	4618      	mov	r0, r3
}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40016800 	.word	0x40016800

08006d94 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8006d96:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d9a:	4c19      	ldr	r4, [pc, #100]	; (8006e00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006db4:	f7fe feca 	bl	8005b4c <HAL_GetTick>
 8006db8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dba:	6863      	ldr	r3, [r4, #4]
 8006dbc:	03da      	lsls	r2, r3, #15
 8006dbe:	d50c      	bpl.n	8006dda <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006dc0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dc2:	4d0f      	ldr	r5, [pc, #60]	; (8006e00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006dca:	f7fe febf 	bl	8005b4c <HAL_GetTick>
 8006dce:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dd0:	686b      	ldr	r3, [r5, #4]
 8006dd2:	039b      	lsls	r3, r3, #14
 8006dd4:	d50a      	bpl.n	8006dec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e006      	b.n	8006de8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dda:	f7fe feb7 	bl	8005b4c <HAL_GetTick>
 8006dde:	1b40      	subs	r0, r0, r5
 8006de0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006de4:	d9e9      	bls.n	8006dba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8006de6:	2003      	movs	r0, #3
}
 8006de8:	b003      	add	sp, #12
 8006dea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dec:	f7fe feae 	bl	8005b4c <HAL_GetTick>
 8006df0:	1b00      	subs	r0, r0, r4
 8006df2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006df6:	d9eb      	bls.n	8006dd0 <HAL_PWREx_EnableOverDrive+0x3c>
 8006df8:	e7f5      	b.n	8006de6 <HAL_PWREx_EnableOverDrive+0x52>
 8006dfa:	bf00      	nop
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40007000 	.word	0x40007000

08006e04 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006e08:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006e0a:	b136      	cbz	r6, 8006e1a <QSPI_Config+0x16>
 8006e0c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8006e10:	d003      	beq.n	8006e1a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006e12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006e14:	6804      	ldr	r4, [r0, #0]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006e1a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e1e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006e22:	f1b9 0f00 	cmp.w	r9, #0
 8006e26:	d04f      	beq.n	8006ec8 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e28:	694b      	ldr	r3, [r1, #20]
 8006e2a:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006e2e:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e30:	f8d1 a000 	ldr.w	sl, [r1]
 8006e34:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8006e38:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8006e3c:	ea49 0902 	orr.w	r9, r9, r2
 8006e40:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006e44:	b335      	cbz	r5, 8006e94 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006e46:	688b      	ldr	r3, [r1, #8]
 8006e48:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e4c:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006e4e:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e50:	b19f      	cbz	r7, 8006e7a <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e52:	ea4a 0307 	orr.w	r3, sl, r7
 8006e56:	4323      	orrs	r3, r4
 8006e58:	68cc      	ldr	r4, [r1, #12]
 8006e5a:	ea43 0308 	orr.w	r3, r3, r8
 8006e5e:	ea43 030e 	orr.w	r3, r3, lr
 8006e62:	4333      	orrs	r3, r6
 8006e64:	4323      	orrs	r3, r4
 8006e66:	ea43 030c 	orr.w	r3, r3, ip
 8006e6a:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006e6c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e70:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006e72:	d00d      	beq.n	8006e90 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006e74:	684b      	ldr	r3, [r1, #4]
 8006e76:	6183      	str	r3, [r0, #24]
 8006e78:	e00a      	b.n	8006e90 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e7a:	ea4a 0304 	orr.w	r3, sl, r4
 8006e7e:	ea43 0308 	orr.w	r3, r3, r8
 8006e82:	ea43 030e 	orr.w	r3, r3, lr
 8006e86:	4333      	orrs	r3, r6
 8006e88:	ea43 030c 	orr.w	r3, r3, ip
 8006e8c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e8e:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e94:	b16f      	cbz	r7, 8006eb2 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e96:	ea4a 0307 	orr.w	r3, sl, r7
 8006e9a:	4323      	orrs	r3, r4
 8006e9c:	68cc      	ldr	r4, [r1, #12]
 8006e9e:	ea43 0308 	orr.w	r3, r3, r8
 8006ea2:	ea43 030e 	orr.w	r3, r3, lr
 8006ea6:	4323      	orrs	r3, r4
 8006ea8:	ea43 030c 	orr.w	r3, r3, ip
 8006eac:	ea43 0309 	orr.w	r3, r3, r9
 8006eb0:	e7dc      	b.n	8006e6c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006eb2:	ea4a 0304 	orr.w	r3, sl, r4
 8006eb6:	ea43 0308 	orr.w	r3, r3, r8
 8006eba:	ea43 030e 	orr.w	r3, r3, lr
 8006ebe:	ea43 030c 	orr.w	r3, r3, ip
 8006ec2:	ea43 0309 	orr.w	r3, r3, r9
 8006ec6:	e7e2      	b.n	8006e8e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006ec8:	b365      	cbz	r5, 8006f24 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006eca:	6804      	ldr	r4, [r0, #0]
 8006ecc:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ece:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006ed0:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006ed2:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ed6:	694e      	ldr	r6, [r1, #20]
 8006ed8:	ea43 0502 	orr.w	r5, r3, r2
 8006edc:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8006ee0:	04b6      	lsls	r6, r6, #18
 8006ee2:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006ee6:	b1a7      	cbz	r7, 8006f12 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ee8:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006eea:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006eee:	ea40 0008 	orr.w	r0, r0, r8
 8006ef2:	ea43 0300 	orr.w	r3, r3, r0
 8006ef6:	68c8      	ldr	r0, [r1, #12]
 8006ef8:	ea43 030c 	orr.w	r3, r3, ip
 8006efc:	ea43 0300 	orr.w	r3, r3, r0
 8006f00:	ea43 0306 	orr.w	r3, r3, r6
 8006f04:	ea43 0305 	orr.w	r3, r3, r5
 8006f08:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006f0a:	d0c1      	beq.n	8006e90 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006f0c:	684b      	ldr	r3, [r1, #4]
 8006f0e:	61a3      	str	r3, [r4, #24]
 8006f10:	e7be      	b.n	8006e90 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f12:	ea40 0008 	orr.w	r0, r0, r8
 8006f16:	4303      	orrs	r3, r0
 8006f18:	ea43 030c 	orr.w	r3, r3, ip
 8006f1c:	4333      	orrs	r3, r6
 8006f1e:	432b      	orrs	r3, r5
 8006f20:	6163      	str	r3, [r4, #20]
 8006f22:	e7b5      	b.n	8006e90 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006f24:	b17f      	cbz	r7, 8006f46 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f26:	ea46 0307 	orr.w	r3, r6, r7
 8006f2a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	4323      	orrs	r3, r4
 8006f32:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8006f34:	4323      	orrs	r3, r4
 8006f36:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006f38:	4323      	orrs	r3, r4
 8006f3a:	68cc      	ldr	r4, [r1, #12]
 8006f3c:	4323      	orrs	r3, r4
 8006f3e:	694c      	ldr	r4, [r1, #20]
 8006f40:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8006f44:	e792      	b.n	8006e6c <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d0a2      	beq.n	8006e90 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f4a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006f4c:	6800      	ldr	r0, [r0, #0]
 8006f4e:	4333      	orrs	r3, r6
 8006f50:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006f52:	431a      	orrs	r2, r3
 8006f54:	694b      	ldr	r3, [r1, #20]
 8006f56:	4332      	orrs	r2, r6
 8006f58:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8006f5a:	4332      	orrs	r2, r6
 8006f5c:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8006f60:	6142      	str	r2, [r0, #20]
}
 8006f62:	e795      	b.n	8006e90 <QSPI_Config+0x8c>

08006f64 <QSPI_WaitFlagStateUntilTimeout>:
{
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460e      	mov	r6, r1
 8006f70:	4615      	mov	r5, r2
 8006f72:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	6893      	ldr	r3, [r2, #8]
 8006f78:	4233      	tst	r3, r6
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	d101      	bne.n	8006f88 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8006f84:	2000      	movs	r0, #0
 8006f86:	e012      	b.n	8006fae <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006f88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006f8c:	d0f3      	beq.n	8006f76 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8e:	f7fe fddd 	bl	8005b4c <HAL_GetTick>
 8006f92:	1bc0      	subs	r0, r0, r7
 8006f94:	4540      	cmp	r0, r8
 8006f96:	d802      	bhi.n	8006f9e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d1ea      	bne.n	8006f74 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f9e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006fa0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006fa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006fa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006fb4 <HAL_QSPI_Init>:
{
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006fba:	f7fe fdc7 	bl	8005b4c <HAL_GetTick>
 8006fbe:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	d047      	beq.n	8007054 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006fc4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006fc8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006fcc:	b94a      	cbnz	r2, 8006fe2 <HAL_QSPI_Init+0x2e>
 8006fce:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8006fd0:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8006fd2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8006fd6:	f7fa fb33 	bl	8001640 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8006fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	68a1      	ldr	r1, [r4, #8]
 8006fe6:	6802      	ldr	r2, [r0, #0]
 8006fe8:	3901      	subs	r1, #1
 8006fea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006fee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ff2:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006ff4:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006ffa:	9200      	str	r2, [sp, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f7ff ffb1 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007002:	bb10      	cbnz	r0, 800704a <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	69e5      	ldr	r5, [r4, #28]
 8007008:	68e3      	ldr	r3, [r4, #12]
 800700a:	6811      	ldr	r1, [r2, #0]
 800700c:	432b      	orrs	r3, r5
 800700e:	6a25      	ldr	r5, [r4, #32]
 8007010:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007014:	432b      	orrs	r3, r5
 8007016:	6865      	ldr	r5, [r4, #4]
 8007018:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800701c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007020:	430b      	orrs	r3, r1
 8007022:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007024:	6855      	ldr	r5, [r2, #4]
 8007026:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800702a:	430b      	orrs	r3, r1
 800702c:	6921      	ldr	r1, [r4, #16]
 800702e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007032:	4909      	ldr	r1, [pc, #36]	; (8007058 <HAL_QSPI_Init+0xa4>)
 8007034:	4029      	ands	r1, r5
 8007036:	430b      	orrs	r3, r1
 8007038:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007042:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007044:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007046:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800704a:	2300      	movs	r3, #0
 800704c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007050:	b005      	add	sp, #20
 8007052:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007054:	2001      	movs	r0, #1
 8007056:	e7fb      	b.n	8007050 <HAL_QSPI_Init+0x9c>
 8007058:	ffe0f8fe 	.word	0xffe0f8fe

0800705c <HAL_QSPI_DeInit>:
{
 800705c:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800705e:	4604      	mov	r4, r0
 8007060:	b168      	cbz	r0, 800707e <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8007062:	6802      	ldr	r2, [r0, #0]
 8007064:	6813      	ldr	r3, [r2, #0]
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800706c:	f7fa fb56 	bl	800171c <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007070:	2000      	movs	r0, #0
 8007072:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8007074:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007078:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800707c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800707e:	2001      	movs	r0, #1
 8007080:	e7fc      	b.n	800707c <HAL_QSPI_DeInit+0x20>

08007082 <HAL_QSPI_Command>:
{
 8007082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007086:	4604      	mov	r4, r0
 8007088:	b085      	sub	sp, #20
 800708a:	4617      	mov	r7, r2
 800708c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800708e:	f7fe fd5d 	bl	8005b4c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007092:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007096:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007098:	2a01      	cmp	r2, #1
 800709a:	d033      	beq.n	8007104 <HAL_QSPI_Command+0x82>
 800709c:	2201      	movs	r2, #1
 800709e:	2602      	movs	r6, #2
 80070a0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80070a4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80070a8:	2a01      	cmp	r2, #1
 80070aa:	fa5f f882 	uxtb.w	r8, r2
 80070ae:	d127      	bne.n	8007100 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070b0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80070b2:	9003      	str	r0, [sp, #12]
 80070b4:	2120      	movs	r1, #32
 80070b6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070b8:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80070ba:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80070bc:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80070c0:	f7ff ff50 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80070c4:	4605      	mov	r5, r0
 80070c6:	b9a0      	cbnz	r0, 80070f2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80070c8:	4602      	mov	r2, r0
 80070ca:	4649      	mov	r1, r9
 80070cc:	4620      	mov	r0, r4
 80070ce:	f7ff fe99 	bl	8006e04 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80070d2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	b94a      	cbnz	r2, 80070ee <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80070da:	4642      	mov	r2, r8
 80070dc:	4631      	mov	r1, r6
 80070de:	4620      	mov	r0, r4
 80070e0:	9700      	str	r7, [sp, #0]
 80070e2:	f7ff ff3f 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80070e6:	4605      	mov	r5, r0
 80070e8:	b918      	cbnz	r0, 80070f2 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80070ee:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80070f2:	2300      	movs	r3, #0
 80070f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80070f8:	4628      	mov	r0, r5
 80070fa:	b005      	add	sp, #20
 80070fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8007100:	4635      	mov	r5, r6
 8007102:	e7f6      	b.n	80070f2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8007104:	2502      	movs	r5, #2
 8007106:	e7f7      	b.n	80070f8 <HAL_QSPI_Command+0x76>

08007108 <HAL_QSPI_AutoPolling>:
{
 8007108:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800710c:	4604      	mov	r4, r0
 800710e:	4615      	mov	r5, r2
 8007110:	461e      	mov	r6, r3
 8007112:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8007114:	f7fe fd1a 	bl	8005b4c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007118:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800711c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800711e:	2a01      	cmp	r2, #1
 8007120:	d040      	beq.n	80071a4 <HAL_QSPI_AutoPolling+0x9c>
 8007122:	2201      	movs	r2, #1
 8007124:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007128:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800712c:	2a01      	cmp	r2, #1
 800712e:	b2d7      	uxtb	r7, r2
 8007130:	d136      	bne.n	80071a0 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007132:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007134:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007136:	9003      	str	r0, [sp, #12]
 8007138:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800713a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800713c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800713e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007142:	2120      	movs	r1, #32
 8007144:	f7ff ff0e 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007148:	bb20      	cbnz	r0, 8007194 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800714a:	6821      	ldr	r1, [r4, #0]
 800714c:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800714e:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007150:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007152:	686a      	ldr	r2, [r5, #4]
 8007154:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007156:	68aa      	ldr	r2, [r5, #8]
 8007158:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800715a:	680a      	ldr	r2, [r1, #0]
 800715c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007160:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007162:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007164:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007168:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800716a:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800716c:	68ea      	ldr	r2, [r5, #12]
 800716e:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007176:	f7ff fe45 	bl	8006e04 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	463a      	mov	r2, r7
 800717e:	2108      	movs	r1, #8
 8007180:	4620      	mov	r0, r4
 8007182:	9600      	str	r6, [sp, #0]
 8007184:	f7ff feee 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007188:	b920      	cbnz	r0, 8007194 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	2208      	movs	r2, #8
 800718e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007190:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007194:	2300      	movs	r3, #0
 8007196:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800719a:	b004      	add	sp, #16
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 80071a0:	2002      	movs	r0, #2
 80071a2:	e7f7      	b.n	8007194 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 80071a4:	2002      	movs	r0, #2
 80071a6:	e7f8      	b.n	800719a <HAL_QSPI_AutoPolling+0x92>

080071a8 <HAL_QSPI_MemoryMapped>:
{
 80071a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071aa:	4604      	mov	r4, r0
 80071ac:	4616      	mov	r6, r2
 80071ae:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80071b0:	f7fe fccc 	bl	8005b4c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80071b4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80071b8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80071ba:	2a01      	cmp	r2, #1
 80071bc:	d033      	beq.n	8007226 <HAL_QSPI_MemoryMapped+0x7e>
 80071be:	2201      	movs	r2, #1
 80071c0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80071c4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80071c8:	2a01      	cmp	r2, #1
 80071ca:	d12a      	bne.n	8007222 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071cc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80071ce:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80071d0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071d2:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80071d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80071d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071da:	9100      	str	r1, [sp, #0]
 80071dc:	2120      	movs	r1, #32
 80071de:	f7ff fec1 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80071e2:	4605      	mov	r5, r0
 80071e4:	b9b8      	cbnz	r0, 8007216 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	6872      	ldr	r2, [r6, #4]
 80071ea:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80071ec:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80071ee:	f020 0008 	bic.w	r0, r0, #8
 80071f2:	ea40 0002 	orr.w	r0, r0, r2
 80071f6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80071f8:	d107      	bne.n	800720a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80071fa:	6832      	ldr	r2, [r6, #0]
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80071fe:	2210      	movs	r2, #16
 8007200:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007208:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800720a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800720e:	4639      	mov	r1, r7
 8007210:	4620      	mov	r0, r4
 8007212:	f7ff fdf7 	bl	8006e04 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800721c:	4628      	mov	r0, r5
 800721e:	b003      	add	sp, #12
 8007220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8007222:	2502      	movs	r5, #2
 8007224:	e7f7      	b.n	8007216 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8007226:	2502      	movs	r5, #2
 8007228:	e7f8      	b.n	800721c <HAL_QSPI_MemoryMapped+0x74>

0800722a <HAL_QSPI_Abort>:
{
 800722a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800722c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800722e:	f7fe fc8d 	bl	8005b4c <HAL_GetTick>
 8007232:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8007234:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8007238:	f010 0002 	ands.w	r0, r0, #2
 800723c:	d03a      	beq.n	80072b4 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 800723e:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007240:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8007242:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007246:	680a      	ldr	r2, [r1, #0]
 8007248:	f012 0204 	ands.w	r2, r2, #4
 800724c:	d034      	beq.n	80072b8 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800724e:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8007250:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007252:	f022 0204 	bic.w	r2, r2, #4
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800725a:	f7fe fd9d 	bl	8005d98 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	b118      	cbz	r0, 800726a <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007262:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007264:	f042 0204 	orr.w	r2, r2, #4
 8007268:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	6891      	ldr	r1, [r2, #8]
 800726e:	0689      	lsls	r1, r1, #26
 8007270:	d51d      	bpl.n	80072ae <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007272:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007274:	4620      	mov	r0, r4
 8007276:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007278:	f041 0102 	orr.w	r1, r1, #2
 800727c:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800727e:	2102      	movs	r1, #2
 8007280:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007282:	9200      	str	r2, [sp, #0]
 8007284:	2201      	movs	r2, #1
 8007286:	f7ff fe6d 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	b990      	cbnz	r0, 80072b4 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	2102      	movs	r1, #2
 8007292:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007294:	2120      	movs	r1, #32
 8007296:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	4602      	mov	r2, r0
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff fe61 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80072a2:	b938      	cbnz	r0, 80072b4 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80072a4:	6822      	ldr	r2, [r4, #0]
 80072a6:	6953      	ldr	r3, [r2, #20]
 80072a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80072ac:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80072b4:	b004      	add	sp, #16
 80072b6:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80072b8:	4610      	mov	r0, r2
 80072ba:	e7d6      	b.n	800726a <HAL_QSPI_Abort+0x40>

080072bc <HAL_QSPI_Transmit>:
{
 80072bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	b085      	sub	sp, #20
 80072c2:	4616      	mov	r6, r2
 80072c4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80072c6:	f7fe fc41 	bl	8005b4c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80072ca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80072ce:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80072d0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	d04c      	beq.n	8007370 <HAL_QSPI_Transmit+0xb4>
 80072d6:	2201      	movs	r2, #1
 80072d8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80072dc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80072e0:	2a01      	cmp	r2, #1
 80072e2:	b2d0      	uxtb	r0, r2
 80072e4:	d142      	bne.n	800736c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80072e6:	2200      	movs	r2, #0
 80072e8:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	d039      	beq.n	8007362 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80072ee:	2212      	movs	r2, #18
 80072f0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80072f4:	692a      	ldr	r2, [r5, #16]
 80072f6:	3201      	adds	r2, #1
 80072f8:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80072fa:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80072fc:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80072fe:	3201      	adds	r2, #1
 8007300:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007302:	696a      	ldr	r2, [r5, #20]
 8007304:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007308:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800730a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800730c:	b9a2      	cbnz	r2, 8007338 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800730e:	2201      	movs	r2, #1
 8007310:	2102      	movs	r1, #2
 8007312:	4620      	mov	r0, r4
 8007314:	9600      	str	r6, [sp, #0]
 8007316:	f7ff fe25 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800731a:	b928      	cbnz	r0, 8007328 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8007320:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007322:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8007324:	f7ff ff81 	bl	800722a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8007328:	2301      	movs	r3, #1
 800732a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800732e:	2300      	movs	r3, #0
 8007330:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007334:	b005      	add	sp, #20
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007338:	2201      	movs	r2, #1
 800733a:	2104      	movs	r1, #4
 800733c:	4620      	mov	r0, r4
 800733e:	9600      	str	r6, [sp, #0]
 8007340:	9303      	str	r3, [sp, #12]
 8007342:	f7ff fe0f 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007346:	2800      	cmp	r0, #0
 8007348:	d1ee      	bne.n	8007328 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800734a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800734c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8007354:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007356:	3201      	adds	r2, #1
 8007358:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800735a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800735c:	3a01      	subs	r2, #1
 800735e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007360:	e7d3      	b.n	800730a <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007362:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800736a:	e7e0      	b.n	800732e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800736c:	2002      	movs	r0, #2
 800736e:	e7de      	b.n	800732e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8007370:	2002      	movs	r0, #2
 8007372:	e7df      	b.n	8007334 <HAL_QSPI_Transmit+0x78>

08007374 <HAL_QSPI_Receive>:
{
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	b085      	sub	sp, #20
 800737a:	4616      	mov	r6, r2
 800737c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800737e:	f7fe fbe5 	bl	8005b4c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007382:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007384:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007386:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800738a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800738e:	2a01      	cmp	r2, #1
 8007390:	d050      	beq.n	8007434 <HAL_QSPI_Receive+0xc0>
 8007392:	2201      	movs	r2, #1
 8007394:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007398:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800739c:	2a01      	cmp	r2, #1
 800739e:	b2d0      	uxtb	r0, r2
 80073a0:	d146      	bne.n	8007430 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80073a2:	2200      	movs	r2, #0
 80073a4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	d03d      	beq.n	8007426 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80073aa:	2222      	movs	r2, #34	; 0x22
 80073ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80073b0:	692a      	ldr	r2, [r5, #16]
 80073b2:	3201      	adds	r2, #1
 80073b4:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80073b6:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80073b8:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80073ba:	3201      	adds	r2, #1
 80073bc:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80073be:	6969      	ldr	r1, [r5, #20]
 80073c0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80073c4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80073c8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80073ca:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80073ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80073d0:	b9a2      	cbnz	r2, 80073fc <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80073d2:	2201      	movs	r2, #1
 80073d4:	2102      	movs	r1, #2
 80073d6:	4620      	mov	r0, r4
 80073d8:	9600      	str	r6, [sp, #0]
 80073da:	f7ff fdc3 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80073de:	b928      	cbnz	r0, 80073ec <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80073e4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073e6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80073e8:	f7ff ff1f 	bl	800722a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80073f2:	2300      	movs	r3, #0
 80073f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80073f8:	b005      	add	sp, #20
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80073fc:	2201      	movs	r2, #1
 80073fe:	2106      	movs	r1, #6
 8007400:	4620      	mov	r0, r4
 8007402:	9600      	str	r6, [sp, #0]
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	f7ff fdad 	bl	8006f64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800740a:	2800      	cmp	r0, #0
 800740c:	d1ee      	bne.n	80073ec <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800740e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8007412:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8007414:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007416:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8007418:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800741a:	3201      	adds	r2, #1
 800741c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800741e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007420:	3a01      	subs	r2, #1
 8007422:	63a2      	str	r2, [r4, #56]	; 0x38
 8007424:	e7d3      	b.n	80073ce <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800742e:	e7e0      	b.n	80073f2 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8007430:	2002      	movs	r0, #2
 8007432:	e7de      	b.n	80073f2 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8007434:	2002      	movs	r0, #2
 8007436:	e7df      	b.n	80073f8 <HAL_QSPI_Receive+0x84>

08007438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800743c:	4604      	mov	r4, r0
 800743e:	b340      	cbz	r0, 8007492 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007440:	6803      	ldr	r3, [r0, #0]
 8007442:	07db      	lsls	r3, r3, #31
 8007444:	d410      	bmi.n	8007468 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	079f      	lsls	r7, r3, #30
 800744a:	d464      	bmi.n	8007516 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	0719      	lsls	r1, r3, #28
 8007450:	f100 80aa 	bmi.w	80075a8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	075a      	lsls	r2, r3, #29
 8007458:	f100 80cb 	bmi.w	80075f2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745c:	69a2      	ldr	r2, [r4, #24]
 800745e:	2a00      	cmp	r2, #0
 8007460:	f040 8134 	bne.w	80076cc <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007464:	2000      	movs	r0, #0
 8007466:	e02b      	b.n	80074c0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007468:	4b96      	ldr	r3, [pc, #600]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	f002 020c 	and.w	r2, r2, #12
 8007470:	2a04      	cmp	r2, #4
 8007472:	d007      	beq.n	8007484 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	f002 020c 	and.w	r2, r2, #12
 800747a:	2a08      	cmp	r2, #8
 800747c:	d10b      	bne.n	8007496 <HAL_RCC_OscConfig+0x5e>
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	0256      	lsls	r6, r2, #9
 8007482:	d508      	bpl.n	8007496 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007484:	4b8f      	ldr	r3, [pc, #572]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	039d      	lsls	r5, r3, #14
 800748a:	d5dc      	bpl.n	8007446 <HAL_RCC_OscConfig+0xe>
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1d9      	bne.n	8007446 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8007492:	2001      	movs	r0, #1
 8007494:	e014      	b.n	80074c0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800749c:	d113      	bne.n	80074c6 <HAL_RCC_OscConfig+0x8e>
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80074a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80074a6:	f7fe fb51 	bl	8005b4c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074aa:	4e86      	ldr	r6, [pc, #536]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80074ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ae:	6833      	ldr	r3, [r6, #0]
 80074b0:	0398      	lsls	r0, r3, #14
 80074b2:	d4c8      	bmi.n	8007446 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b4:	f7fe fb4a 	bl	8005b4c <HAL_GetTick>
 80074b8:	1b40      	subs	r0, r0, r5
 80074ba:	2864      	cmp	r0, #100	; 0x64
 80074bc:	d9f7      	bls.n	80074ae <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80074be:	2003      	movs	r0, #3
}
 80074c0:	b002      	add	sp, #8
 80074c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c6:	4d7f      	ldr	r5, [pc, #508]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b992      	cbnz	r2, 80074f2 <HAL_RCC_OscConfig+0xba>
 80074cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074da:	f7fe fb37 	bl	8005b4c <HAL_GetTick>
 80074de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	0399      	lsls	r1, r3, #14
 80074e4:	d5af      	bpl.n	8007446 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074e6:	f7fe fb31 	bl	8005b4c <HAL_GetTick>
 80074ea:	1b80      	subs	r0, r0, r6
 80074ec:	2864      	cmp	r0, #100	; 0x64
 80074ee:	d9f7      	bls.n	80074e0 <HAL_RCC_OscConfig+0xa8>
 80074f0:	e7e5      	b.n	80074be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074f2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80074f6:	d107      	bne.n	8007508 <HAL_RCC_OscConfig+0xd0>
 80074f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	e7ce      	b.n	80074a6 <HAL_RCC_OscConfig+0x6e>
 8007508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007514:	e7f6      	b.n	8007504 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007516:	4b6b      	ldr	r3, [pc, #428]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	f012 0f0c 	tst.w	r2, #12
 800751e:	d007      	beq.n	8007530 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	f002 020c 	and.w	r2, r2, #12
 8007526:	2a08      	cmp	r2, #8
 8007528:	d111      	bne.n	800754e <HAL_RCC_OscConfig+0x116>
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	0252      	lsls	r2, r2, #9
 800752e:	d40e      	bmi.n	800754e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007530:	4a64      	ldr	r2, [pc, #400]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	079b      	lsls	r3, r3, #30
 8007536:	d502      	bpl.n	800753e <HAL_RCC_OscConfig+0x106>
 8007538:	68e3      	ldr	r3, [r4, #12]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d1a9      	bne.n	8007492 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	6921      	ldr	r1, [r4, #16]
 8007542:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007546:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800754a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800754c:	e77e      	b.n	800744c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800754e:	68e2      	ldr	r2, [r4, #12]
 8007550:	b1c2      	cbz	r2, 8007584 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8007552:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007554:	4d5b      	ldr	r5, [pc, #364]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800755c:	f7fe faf6 	bl	8005b4c <HAL_GetTick>
 8007560:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	079f      	lsls	r7, r3, #30
 8007566:	d507      	bpl.n	8007578 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	6922      	ldr	r2, [r4, #16]
 800756c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007570:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	e769      	b.n	800744c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007578:	f7fe fae8 	bl	8005b4c <HAL_GetTick>
 800757c:	1b80      	subs	r0, r0, r6
 800757e:	2802      	cmp	r0, #2
 8007580:	d9ef      	bls.n	8007562 <HAL_RCC_OscConfig+0x12a>
 8007582:	e79c      	b.n	80074be <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8007584:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007586:	4e4f      	ldr	r6, [pc, #316]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800758e:	f7fe fadd 	bl	8005b4c <HAL_GetTick>
 8007592:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	0798      	lsls	r0, r3, #30
 8007598:	f57f af58 	bpl.w	800744c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800759c:	f7fe fad6 	bl	8005b4c <HAL_GetTick>
 80075a0:	1b40      	subs	r0, r0, r5
 80075a2:	2802      	cmp	r0, #2
 80075a4:	d9f6      	bls.n	8007594 <HAL_RCC_OscConfig+0x15c>
 80075a6:	e78a      	b.n	80074be <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075a8:	6963      	ldr	r3, [r4, #20]
 80075aa:	4d46      	ldr	r5, [pc, #280]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 80075ac:	b183      	cbz	r3, 80075d0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80075ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80075b6:	f7fe fac9 	bl	8005b4c <HAL_GetTick>
 80075ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075be:	079b      	lsls	r3, r3, #30
 80075c0:	f53f af48 	bmi.w	8007454 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c4:	f7fe fac2 	bl	8005b4c <HAL_GetTick>
 80075c8:	1b80      	subs	r0, r0, r6
 80075ca:	2802      	cmp	r0, #2
 80075cc:	d9f6      	bls.n	80075bc <HAL_RCC_OscConfig+0x184>
 80075ce:	e776      	b.n	80074be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80075d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80075d8:	f7fe fab8 	bl	8005b4c <HAL_GetTick>
 80075dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075e0:	079f      	lsls	r7, r3, #30
 80075e2:	f57f af37 	bpl.w	8007454 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e6:	f7fe fab1 	bl	8005b4c <HAL_GetTick>
 80075ea:	1b80      	subs	r0, r0, r6
 80075ec:	2802      	cmp	r0, #2
 80075ee:	d9f6      	bls.n	80075de <HAL_RCC_OscConfig+0x1a6>
 80075f0:	e765      	b.n	80074be <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075f2:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 80075f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f6:	00d0      	lsls	r0, r2, #3
 80075f8:	d427      	bmi.n	800764a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80075fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80075fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80075fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007602:	641a      	str	r2, [r3, #64]	; 0x40
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800760e:	4d2e      	ldr	r5, [pc, #184]	; (80076c8 <HAL_RCC_OscConfig+0x290>)
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	05d9      	lsls	r1, r3, #23
 8007614:	d51b      	bpl.n	800764e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007616:	68a3      	ldr	r3, [r4, #8]
 8007618:	4d2a      	ldr	r5, [pc, #168]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 800761a:	2b01      	cmp	r3, #1
 800761c:	d127      	bne.n	800766e <HAL_RCC_OscConfig+0x236>
 800761e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800762a:	f7fe fa8f 	bl	8005b4c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800762e:	4e25      	ldr	r6, [pc, #148]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8007630:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007632:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007634:	079b      	lsls	r3, r3, #30
 8007636:	d53f      	bpl.n	80076b8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8007638:	2f00      	cmp	r7, #0
 800763a:	f43f af0f 	beq.w	800745c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800763e:	4a21      	ldr	r2, [pc, #132]	; (80076c4 <HAL_RCC_OscConfig+0x28c>)
 8007640:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007646:	6413      	str	r3, [r2, #64]	; 0x40
 8007648:	e708      	b.n	800745c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800764a:	2700      	movs	r7, #0
 800764c:	e7df      	b.n	800760e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007654:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007656:	f7fe fa79 	bl	8005b4c <HAL_GetTick>
 800765a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	05da      	lsls	r2, r3, #23
 8007660:	d4d9      	bmi.n	8007616 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007662:	f7fe fa73 	bl	8005b4c <HAL_GetTick>
 8007666:	1b80      	subs	r0, r0, r6
 8007668:	2864      	cmp	r0, #100	; 0x64
 800766a:	d9f7      	bls.n	800765c <HAL_RCC_OscConfig+0x224>
 800766c:	e727      	b.n	80074be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800766e:	b9ab      	cbnz	r3, 800769c <HAL_RCC_OscConfig+0x264>
 8007670:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007672:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	672b      	str	r3, [r5, #112]	; 0x70
 800767c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800767e:	f023 0304 	bic.w	r3, r3, #4
 8007682:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007684:	f7fe fa62 	bl	8005b4c <HAL_GetTick>
 8007688:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800768c:	0798      	lsls	r0, r3, #30
 800768e:	d5d3      	bpl.n	8007638 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007690:	f7fe fa5c 	bl	8005b4c <HAL_GetTick>
 8007694:	1b80      	subs	r0, r0, r6
 8007696:	4540      	cmp	r0, r8
 8007698:	d9f7      	bls.n	800768a <HAL_RCC_OscConfig+0x252>
 800769a:	e710      	b.n	80074be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800769c:	2b05      	cmp	r3, #5
 800769e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80076a0:	d103      	bne.n	80076aa <HAL_RCC_OscConfig+0x272>
 80076a2:	f043 0304 	orr.w	r3, r3, #4
 80076a6:	672b      	str	r3, [r5, #112]	; 0x70
 80076a8:	e7b9      	b.n	800761e <HAL_RCC_OscConfig+0x1e6>
 80076aa:	f023 0301 	bic.w	r3, r3, #1
 80076ae:	672b      	str	r3, [r5, #112]	; 0x70
 80076b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80076b2:	f023 0304 	bic.w	r3, r3, #4
 80076b6:	e7b5      	b.n	8007624 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f7fe fa48 	bl	8005b4c <HAL_GetTick>
 80076bc:	1b40      	subs	r0, r0, r5
 80076be:	4540      	cmp	r0, r8
 80076c0:	d9b7      	bls.n	8007632 <HAL_RCC_OscConfig+0x1fa>
 80076c2:	e6fc      	b.n	80074be <HAL_RCC_OscConfig+0x86>
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076cc:	4d38      	ldr	r5, [pc, #224]	; (80077b0 <HAL_RCC_OscConfig+0x378>)
 80076ce:	68ab      	ldr	r3, [r5, #8]
 80076d0:	f003 030c 	and.w	r3, r3, #12
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d041      	beq.n	800775c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80076d8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076da:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80076dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076e2:	d12e      	bne.n	8007742 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80076e4:	f7fe fa32 	bl	8005b4c <HAL_GetTick>
 80076e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	0199      	lsls	r1, r3, #6
 80076ee:	d422      	bmi.n	8007736 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80076fa:	430b      	orrs	r3, r1
 80076fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007702:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800770c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007710:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800771a:	f7fe fa17 	bl	8005b4c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800771e:	4d24      	ldr	r5, [pc, #144]	; (80077b0 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8007720:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	019a      	lsls	r2, r3, #6
 8007726:	f53f ae9d 	bmi.w	8007464 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772a:	f7fe fa0f 	bl	8005b4c <HAL_GetTick>
 800772e:	1b00      	subs	r0, r0, r4
 8007730:	2802      	cmp	r0, #2
 8007732:	d9f6      	bls.n	8007722 <HAL_RCC_OscConfig+0x2ea>
 8007734:	e6c3      	b.n	80074be <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007736:	f7fe fa09 	bl	8005b4c <HAL_GetTick>
 800773a:	1b80      	subs	r0, r0, r6
 800773c:	2802      	cmp	r0, #2
 800773e:	d9d4      	bls.n	80076ea <HAL_RCC_OscConfig+0x2b2>
 8007740:	e6bd      	b.n	80074be <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8007742:	f7fe fa03 	bl	8005b4c <HAL_GetTick>
 8007746:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	019b      	lsls	r3, r3, #6
 800774c:	f57f ae8a 	bpl.w	8007464 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007750:	f7fe f9fc 	bl	8005b4c <HAL_GetTick>
 8007754:	1b00      	subs	r0, r0, r4
 8007756:	2802      	cmp	r0, #2
 8007758:	d9f6      	bls.n	8007748 <HAL_RCC_OscConfig+0x310>
 800775a:	e6b0      	b.n	80074be <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800775e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007760:	f43f ae97 	beq.w	8007492 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007768:	69e1      	ldr	r1, [r4, #28]
 800776a:	428a      	cmp	r2, r1
 800776c:	f47f ae91 	bne.w	8007492 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	428a      	cmp	r2, r1
 8007778:	f47f ae8b 	bne.w	8007492 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800777c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007780:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007782:	401a      	ands	r2, r3
 8007784:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007788:	f47f ae83 	bne.w	8007492 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800778c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800778e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8007792:	0852      	lsrs	r2, r2, #1
 8007794:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007796:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800779a:	f47f ae7a 	bne.w	8007492 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800779e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80077a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80077a8:	f43f ae5c 	beq.w	8007464 <HAL_RCC_OscConfig+0x2c>
 80077ac:	e671      	b.n	8007492 <HAL_RCC_OscConfig+0x5a>
 80077ae:	bf00      	nop
 80077b0:	40023800 	.word	0x40023800

080077b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b4:	4913      	ldr	r1, [pc, #76]	; (8007804 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80077b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b8:	688b      	ldr	r3, [r1, #8]
 80077ba:	f003 030c 	and.w	r3, r3, #12
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d01b      	beq.n	80077fa <HAL_RCC_GetSysClockFreq+0x46>
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d11b      	bne.n	80077fe <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077c8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ca:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80077d8:	bf1a      	itte	ne
 80077da:	480b      	ldrne	r0, [pc, #44]	; (8007808 <HAL_RCC_GetSysClockFreq+0x54>)
 80077dc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077de:	480b      	ldreq	r0, [pc, #44]	; (800780c <HAL_RCC_GetSysClockFreq+0x58>)
 80077e0:	fba1 0100 	umull	r0, r1, r1, r0
 80077e4:	f7f9 f982 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077e8:	4b06      	ldr	r3, [pc, #24]	; (8007804 <HAL_RCC_GetSysClockFreq+0x50>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80077f0:	3301      	adds	r3, #1
 80077f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80077f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80077f8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077fa:	4803      	ldr	r0, [pc, #12]	; (8007808 <HAL_RCC_GetSysClockFreq+0x54>)
 80077fc:	e7fc      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80077fe:	4803      	ldr	r0, [pc, #12]	; (800780c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8007800:	e7fa      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x44>
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800
 8007808:	017d7840 	.word	0x017d7840
 800780c:	00f42400 	.word	0x00f42400

08007810 <HAL_RCC_ClockConfig>:
{
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007816:	4604      	mov	r4, r0
 8007818:	b910      	cbnz	r0, 8007820 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800781a:	2001      	movs	r0, #1
}
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007820:	4a46      	ldr	r2, [pc, #280]	; (800793c <HAL_RCC_ClockConfig+0x12c>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	428b      	cmp	r3, r1
 800782a:	d328      	bcc.n	800787e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	0797      	lsls	r7, r2, #30
 8007830:	d430      	bmi.n	8007894 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007832:	07d0      	lsls	r0, r2, #31
 8007834:	d444      	bmi.n	80078c0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007836:	4a41      	ldr	r2, [pc, #260]	; (800793c <HAL_RCC_ClockConfig+0x12c>)
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	42ab      	cmp	r3, r5
 8007840:	d867      	bhi.n	8007912 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	0751      	lsls	r1, r2, #29
 8007846:	d470      	bmi.n	800792a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007848:	0713      	lsls	r3, r2, #28
 800784a:	d507      	bpl.n	800785c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800784c:	4a3c      	ldr	r2, [pc, #240]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 800784e:	6921      	ldr	r1, [r4, #16]
 8007850:	6893      	ldr	r3, [r2, #8]
 8007852:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800785a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800785c:	f7ff ffaa 	bl	80077b4 <HAL_RCC_GetSysClockFreq>
 8007860:	4b37      	ldr	r3, [pc, #220]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 8007862:	4a38      	ldr	r2, [pc, #224]	; (8007944 <HAL_RCC_ClockConfig+0x134>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800786a:	5cd3      	ldrb	r3, [r2, r3]
 800786c:	40d8      	lsrs	r0, r3
 800786e:	4b36      	ldr	r3, [pc, #216]	; (8007948 <HAL_RCC_ClockConfig+0x138>)
 8007870:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <HAL_RCC_ClockConfig+0x13c>)
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f7f9 ffdd 	bl	8001834 <HAL_InitTick>
  return HAL_OK;
 800787a:	2000      	movs	r0, #0
 800787c:	e7ce      	b.n	800781c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	f023 030f 	bic.w	r3, r3, #15
 8007884:	430b      	orrs	r3, r1
 8007886:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	428b      	cmp	r3, r1
 8007890:	d1c3      	bne.n	800781a <HAL_RCC_ClockConfig+0xa>
 8007892:	e7cb      	b.n	800782c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007894:	f012 0f04 	tst.w	r2, #4
 8007898:	4b29      	ldr	r3, [pc, #164]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 800789a:	d003      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800789c:	6899      	ldr	r1, [r3, #8]
 800789e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80078a2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a4:	0716      	lsls	r6, r2, #28
 80078a6:	d503      	bpl.n	80078b0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078a8:	6899      	ldr	r1, [r3, #8]
 80078aa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80078ae:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b0:	4923      	ldr	r1, [pc, #140]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 80078b2:	68a0      	ldr	r0, [r4, #8]
 80078b4:	688b      	ldr	r3, [r1, #8]
 80078b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ba:	4303      	orrs	r3, r0
 80078bc:	608b      	str	r3, [r1, #8]
 80078be:	e7b8      	b.n	8007832 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 80078c4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078c6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c8:	d11b      	bne.n	8007902 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ce:	d0a4      	beq.n	800781a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078d0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d6:	4f1a      	ldr	r7, [pc, #104]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078d8:	f022 0203 	bic.w	r2, r2, #3
 80078dc:	430a      	orrs	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80078e0:	f7fe f934 	bl	8005b4c <HAL_GetTick>
 80078e4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6862      	ldr	r2, [r4, #4]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80078f2:	d0a0      	beq.n	8007836 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078f4:	f7fe f92a 	bl	8005b4c <HAL_GetTick>
 80078f8:	1b80      	subs	r0, r0, r6
 80078fa:	4540      	cmp	r0, r8
 80078fc:	d9f3      	bls.n	80078e6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80078fe:	2003      	movs	r0, #3
 8007900:	e78c      	b.n	800781c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007902:	2902      	cmp	r1, #2
 8007904:	d102      	bne.n	800790c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007906:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800790a:	e7e0      	b.n	80078ce <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800790c:	f012 0f02 	tst.w	r2, #2
 8007910:	e7dd      	b.n	80078ce <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	f023 030f 	bic.w	r3, r3, #15
 8007918:	432b      	orrs	r3, r5
 800791a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	42ab      	cmp	r3, r5
 8007924:	f47f af79 	bne.w	800781a <HAL_RCC_ClockConfig+0xa>
 8007928:	e78b      	b.n	8007842 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800792a:	4905      	ldr	r1, [pc, #20]	; (8007940 <HAL_RCC_ClockConfig+0x130>)
 800792c:	68e0      	ldr	r0, [r4, #12]
 800792e:	688b      	ldr	r3, [r1, #8]
 8007930:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007934:	4303      	orrs	r3, r0
 8007936:	608b      	str	r3, [r1, #8]
 8007938:	e786      	b.n	8007848 <HAL_RCC_ClockConfig+0x38>
 800793a:	bf00      	nop
 800793c:	40023c00 	.word	0x40023c00
 8007940:	40023800 	.word	0x40023800
 8007944:	0802e7b8 	.word	0x0802e7b8
 8007948:	2000000c 	.word	0x2000000c
 800794c:	2000003c 	.word	0x2000003c

08007950 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007952:	4a05      	ldr	r2, [pc, #20]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800795a:	5cd3      	ldrb	r3, [r2, r3]
 800795c:	4a03      	ldr	r2, [pc, #12]	; (800796c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800795e:	6810      	ldr	r0, [r2, #0]
}
 8007960:	40d8      	lsrs	r0, r3
 8007962:	4770      	bx	lr
 8007964:	40023800 	.word	0x40023800
 8007968:	0802e7c8 	.word	0x0802e7c8
 800796c:	2000000c 	.word	0x2000000c

08007970 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007970:	230f      	movs	r3, #15
 8007972:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_GetClockConfig+0x34>)
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	f002 0203 	and.w	r2, r2, #3
 800797c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007984:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800798c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	08db      	lsrs	r3, r3, #3
 8007992:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007996:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007998:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <HAL_RCC_GetClockConfig+0x38>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	600b      	str	r3, [r1, #0]
}
 80079a2:	4770      	bx	lr
 80079a4:	40023800 	.word	0x40023800
 80079a8:	40023c00 	.word	0x40023c00

080079ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079ac:	6803      	ldr	r3, [r0, #0]
{
 80079ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079b2:	f013 0601 	ands.w	r6, r3, #1
{
 80079b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079b8:	d00b      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079ba:	4aaa      	ldr	r2, [pc, #680]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80079bc:	6891      	ldr	r1, [r2, #8]
 80079be:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80079c2:	6091      	str	r1, [r2, #8]
 80079c4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80079c6:	6891      	ldr	r1, [r2, #8]
 80079c8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079ca:	fab6 f686 	clz	r6, r6
 80079ce:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079d0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079d2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80079d6:	d012      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079d8:	49a2      	ldr	r1, [pc, #648]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80079da:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80079dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80079e8:	bf08      	it	eq
 80079ea:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079ec:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079f0:	bf16      	itet	ne
 80079f2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80079f6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079f8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80079fe:	02d8      	lsls	r0, r3, #11
 8007a00:	d510      	bpl.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a02:	4898      	ldr	r0, [pc, #608]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a06:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a0a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a0e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007a12:	ea42 0201 	orr.w	r2, r2, r1
 8007a16:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a1a:	f000 8184 	beq.w	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	bf08      	it	eq
 8007a22:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8007a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007a28:	bf18      	it	ne
 8007a2a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a2c:	0699      	lsls	r1, r3, #26
 8007a2e:	d531      	bpl.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a30:	4b8c      	ldr	r3, [pc, #560]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a32:	4f8d      	ldr	r7, [pc, #564]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4e:	f7fe f87d 	bl	8005b4c <HAL_GetTick>
 8007a52:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	05da      	lsls	r2, r3, #23
 8007a58:	f140 8167 	bpl.w	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a5c:	4f81      	ldr	r7, [pc, #516]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a60:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007a64:	f040 816c 	bne.w	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a6a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a6e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007a72:	4a7c      	ldr	r2, [pc, #496]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a74:	f040 818a 	bne.w	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a78:	6891      	ldr	r1, [r2, #8]
 8007a7a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8007a7e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8007a82:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8007a86:	4301      	orrs	r1, r0
 8007a88:	6091      	str	r1, [r2, #8]
 8007a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a8e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	06d9      	lsls	r1, r3, #27
 8007a98:	d50c      	bpl.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a9a:	4a72      	ldr	r2, [pc, #456]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a9c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007aa0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007aa4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8007aa8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007aac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007aae:	4301      	orrs	r1, r0
 8007ab0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab4:	045a      	lsls	r2, r3, #17
 8007ab6:	d508      	bpl.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ab8:	496a      	ldr	r1, [pc, #424]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007aba:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007ac0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007ac4:	4302      	orrs	r2, r0
 8007ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aca:	041f      	lsls	r7, r3, #16
 8007acc:	d508      	bpl.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ace:	4965      	ldr	r1, [pc, #404]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007ad0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007ad2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007ad6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007ada:	4302      	orrs	r2, r0
 8007adc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ae0:	03d8      	lsls	r0, r3, #15
 8007ae2:	d508      	bpl.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ae4:	495f      	ldr	r1, [pc, #380]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007ae6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ae8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007aec:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007af0:	4302      	orrs	r2, r0
 8007af2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007af6:	0399      	lsls	r1, r3, #14
 8007af8:	d508      	bpl.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007afa:	495a      	ldr	r1, [pc, #360]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007afc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007afe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b02:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007b06:	4302      	orrs	r2, r0
 8007b08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b0c:	065a      	lsls	r2, r3, #25
 8007b0e:	d508      	bpl.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b10:	4954      	ldr	r1, [pc, #336]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b12:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007b14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b18:	f022 0203 	bic.w	r2, r2, #3
 8007b1c:	4302      	orrs	r2, r0
 8007b1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b22:	061f      	lsls	r7, r3, #24
 8007b24:	d508      	bpl.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b26:	494f      	ldr	r1, [pc, #316]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b2e:	f022 020c 	bic.w	r2, r2, #12
 8007b32:	4302      	orrs	r2, r0
 8007b34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b38:	05d8      	lsls	r0, r3, #23
 8007b3a:	d508      	bpl.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b3c:	4949      	ldr	r1, [pc, #292]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b3e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007b40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b44:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007b48:	4302      	orrs	r2, r0
 8007b4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b4e:	0599      	lsls	r1, r3, #22
 8007b50:	d508      	bpl.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b52:	4944      	ldr	r1, [pc, #272]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b54:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007b56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b5a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b5e:	4302      	orrs	r2, r0
 8007b60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b64:	055a      	lsls	r2, r3, #21
 8007b66:	d508      	bpl.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b68:	493e      	ldr	r1, [pc, #248]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b74:	4302      	orrs	r2, r0
 8007b76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b7a:	051f      	lsls	r7, r3, #20
 8007b7c:	d508      	bpl.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b7e:	4939      	ldr	r1, [pc, #228]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b8a:	4302      	orrs	r2, r0
 8007b8c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b90:	04d8      	lsls	r0, r3, #19
 8007b92:	d508      	bpl.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b94:	4933      	ldr	r1, [pc, #204]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b96:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007b98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007b9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007ba0:	4302      	orrs	r2, r0
 8007ba2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ba6:	0499      	lsls	r1, r3, #18
 8007ba8:	d508      	bpl.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007baa:	492e      	ldr	r1, [pc, #184]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007bac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007bae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007bb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007bb6:	4302      	orrs	r2, r0
 8007bb8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bbc:	025a      	lsls	r2, r3, #9
 8007bbe:	d508      	bpl.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bc0:	4928      	ldr	r1, [pc, #160]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007bc2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007bc4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007bc8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007bcc:	4302      	orrs	r2, r0
 8007bce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bd2:	029f      	lsls	r7, r3, #10
 8007bd4:	d50c      	bpl.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bd6:	4823      	ldr	r0, [pc, #140]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007bd8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007bda:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8007bde:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007be2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8007be6:	bf08      	it	eq
 8007be8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bea:	430a      	orrs	r2, r1
 8007bec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8007bf0:	f013 0f08 	tst.w	r3, #8
 8007bf4:	bf18      	it	ne
 8007bf6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bf8:	0358      	lsls	r0, r3, #13
 8007bfa:	d508      	bpl.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bfc:	4919      	ldr	r1, [pc, #100]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007bfe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007c00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c08:	4302      	orrs	r2, r0
 8007c0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c0e:	0219      	lsls	r1, r3, #8
 8007c10:	d509      	bpl.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c12:	4914      	ldr	r1, [pc, #80]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007c14:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007c18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007c1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007c20:	4302      	orrs	r2, r0
 8007c22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c26:	2e01      	cmp	r6, #1
 8007c28:	f000 80b4 	beq.w	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007c2c:	019a      	lsls	r2, r3, #6
 8007c2e:	f100 80b1 	bmi.w	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c32:	2d01      	cmp	r5, #1
 8007c34:	d175      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c36:	4d0b      	ldr	r5, [pc, #44]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c40:	f7fd ff84 	bl	8005b4c <HAL_GetTick>
 8007c44:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	009f      	lsls	r7, r3, #2
 8007c4a:	f100 8127 	bmi.w	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	0316      	lsls	r6, r2, #12
 8007c52:	d501      	bpl.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c56:	b14b      	cbz	r3, 8007c6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007c58:	02d0      	lsls	r0, r2, #11
 8007c5a:	d522      	bpl.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c5e:	bb03      	cbnz	r3, 8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8007c60:	e004      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007c62:	bf00      	nop
 8007c64:	40023800 	.word	0x40023800
 8007c68:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c6c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c70:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6961      	ldr	r1, [r4, #20]
 8007c80:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007c84:	69a1      	ldr	r1, [r4, #24]
 8007c86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007c8a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c8e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007c92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007c98:	3901      	subs	r1, #1
 8007c9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c9e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007ca2:	0291      	lsls	r1, r2, #10
 8007ca4:	d515      	bpl.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007ca6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cac:	d111      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cae:	4982      	ldr	r1, [pc, #520]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cb0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cb4:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007cb8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8007cbc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007cc0:	4303      	orrs	r3, r0
 8007cc2:	6960      	ldr	r0, [r4, #20]
 8007cc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007cc8:	6a20      	ldr	r0, [r4, #32]
 8007cca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007cd2:	0712      	lsls	r2, r2, #28
 8007cd4:	d519      	bpl.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cd6:	4a78      	ldr	r2, [pc, #480]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cd8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ce0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6961      	ldr	r1, [r4, #20]
 8007cec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007cf0:	69e1      	ldr	r1, [r4, #28]
 8007cf2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8007cf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007cfa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007cfe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d04:	430b      	orrs	r3, r1
 8007d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007d0a:	4c6b      	ldr	r4, [pc, #428]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d12:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d14:	f7fd ff1a 	bl	8005b4c <HAL_GetTick>
 8007d18:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	f140 80c4 	bpl.w	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007d22:	2000      	movs	r0, #0
 8007d24:	e009      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8007d26:	2601      	movs	r6, #1
 8007d28:	e67c      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d2a:	f7fd ff0f 	bl	8005b4c <HAL_GetTick>
 8007d2e:	eba0 0008 	sub.w	r0, r0, r8
 8007d32:	2864      	cmp	r0, #100	; 0x64
 8007d34:	f67f ae8e 	bls.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8007d38:	2003      	movs	r0, #3
}
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007d42:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007d46:	4293      	cmp	r3, r2
 8007d48:	f43f ae8e 	beq.w	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d58:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d60:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8007d62:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	f57f ae7e 	bpl.w	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8007d6c:	f7fd feee 	bl	8005b4c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d70:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007d74:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d78:	0798      	lsls	r0, r3, #30
 8007d7a:	f53f ae75 	bmi.w	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d7e:	f7fd fee5 	bl	8005b4c <HAL_GetTick>
 8007d82:	eba0 0008 	sub.w	r0, r0, r8
 8007d86:	4548      	cmp	r0, r9
 8007d88:	d9f5      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007d8a:	e7d5      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d8c:	6891      	ldr	r1, [r2, #8]
 8007d8e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8007d92:	e679      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8007d94:	4e48      	ldr	r6, [pc, #288]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d96:	6833      	ldr	r3, [r6, #0]
 8007d98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d9c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007d9e:	f7fd fed5 	bl	8005b4c <HAL_GetTick>
 8007da2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007da4:	6833      	ldr	r3, [r6, #0]
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	d472      	bmi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	07d7      	lsls	r7, r2, #31
 8007dae:	d512      	bpl.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8007db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007db2:	b983      	cbnz	r3, 8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007db4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007db8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dc0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	6861      	ldr	r1, [r4, #4]
 8007dc8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007dcc:	68a1      	ldr	r1, [r4, #8]
 8007dce:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8007dd2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dd6:	0316      	lsls	r6, r2, #12
 8007dd8:	d503      	bpl.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de0:	d005      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007de2:	02d0      	lsls	r0, r2, #11
 8007de4:	d51e      	bpl.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dec:	d11a      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dee:	4932      	ldr	r1, [pc, #200]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007df0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007df4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dfc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007e00:	4303      	orrs	r3, r0
 8007e02:	6860      	ldr	r0, [r4, #4]
 8007e04:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007e08:	68e0      	ldr	r0, [r4, #12]
 8007e0a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e12:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8007e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e18:	f020 001f 	bic.w	r0, r0, #31
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4303      	orrs	r3, r0
 8007e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e24:	01d1      	lsls	r1, r2, #7
 8007e26:	d511      	bpl.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e28:	4923      	ldr	r1, [pc, #140]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e2a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e2e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e32:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8007e36:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007e3a:	4303      	orrs	r3, r0
 8007e3c:	6860      	ldr	r0, [r4, #4]
 8007e3e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007e42:	6920      	ldr	r0, [r4, #16]
 8007e44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e4c:	0192      	lsls	r2, r2, #6
 8007e4e:	d50d      	bpl.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	041b      	lsls	r3, r3, #16
 8007e56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007e5a:	68e2      	ldr	r2, [r4, #12]
 8007e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007e60:	68a2      	ldr	r2, [r4, #8]
 8007e62:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007e6c:	4e12      	ldr	r6, [pc, #72]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e6e:	6833      	ldr	r3, [r6, #0]
 8007e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e74:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007e76:	f7fd fe69 	bl	8005b4c <HAL_GetTick>
 8007e7a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e7c:	6833      	ldr	r3, [r6, #0]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	f53f aed7 	bmi.w	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e84:	f7fd fe62 	bl	8005b4c <HAL_GetTick>
 8007e88:	1bc0      	subs	r0, r0, r7
 8007e8a:	2864      	cmp	r0, #100	; 0x64
 8007e8c:	d9f6      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007e8e:	e753      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e90:	f7fd fe5c 	bl	8005b4c <HAL_GetTick>
 8007e94:	1bc0      	subs	r0, r0, r7
 8007e96:	2864      	cmp	r0, #100	; 0x64
 8007e98:	d984      	bls.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e9a:	e74d      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e9c:	f7fd fe56 	bl	8005b4c <HAL_GetTick>
 8007ea0:	1b80      	subs	r0, r0, r6
 8007ea2:	2864      	cmp	r0, #100	; 0x64
 8007ea4:	f67f aecf 	bls.w	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007ea8:	e746      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eaa:	f7fd fe4f 	bl	8005b4c <HAL_GetTick>
 8007eae:	1b40      	subs	r0, r0, r5
 8007eb0:	2864      	cmp	r0, #100	; 0x64
 8007eb2:	f67f af32 	bls.w	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007eb6:	e73f      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8007eb8:	40023800 	.word	0x40023800

08007ebc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	b1c8      	cbz	r0, 8007ef8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ec4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007ece:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007ed2:	f7f9 fc47 	bl	8001764 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ed6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ed8:	1d21      	adds	r1, r4, #4
 8007eda:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007edc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ee0:	f000 f9cf 	bl	8008282 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007ee4:	6862      	ldr	r2, [r4, #4]
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	f000 fa05 	bl	80082f8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007eee:	2301      	movs	r3, #1

  return HAL_OK;
 8007ef0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ef2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007ef8:	2001      	movs	r0, #1
 8007efa:	e7fc      	b.n	8007ef6 <HAL_SDRAM_Init+0x3a>

08007efc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007efc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007efe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007f02:	4605      	mov	r5, r0
 8007f04:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007f06:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007f08:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8007f0a:	d010      	beq.n	8007f2e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007f0c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8007f10:	2c01      	cmp	r4, #1
 8007f12:	d110      	bne.n	8007f36 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f14:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f16:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f18:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f1c:	f000 fa22 	bl	8008364 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d104      	bne.n	8007f30 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007f26:	2305      	movs	r3, #5
 8007f28:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007f2c:	2000      	movs	r0, #0
}
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007f30:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8007f34:	e7fa      	b.n	8007f2c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7f9      	b.n	8007f2e <HAL_SDRAM_SendCommand+0x32>

08007f3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007f3a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007f40:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	b2d8      	uxtb	r0, r3
 8007f46:	d00d      	beq.n	8007f64 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007f48:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	b2dd      	uxtb	r5, r3
 8007f50:	d109      	bne.n	8007f66 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f52:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f54:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f5a:	f000 fa15 	bl	8008388 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007f5e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007f60:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f66:	2001      	movs	r0, #1
 8007f68:	e7fc      	b.n	8007f64 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007f6a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d133      	bne.n	8007fdc <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	2302      	movs	r3, #2
 8007f76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f84:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <HAL_TIM_Base_Start_IT+0x74>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01a      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d017      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007f90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d013      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00f      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007fa8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007fb0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x54>
 8007fb8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d107      	bne.n	8007fd0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc0:	6899      	ldr	r1, [r3, #8]
 8007fc2:	4a08      	ldr	r2, [pc, #32]	; (8007fe4 <HAL_TIM_Base_Start_IT+0x78>)
 8007fc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc6:	2a06      	cmp	r2, #6
 8007fc8:	d006      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007fce:	d003      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fd8:	2000      	movs	r0, #0
}
 8007fda:	4770      	bx	lr
    return HAL_ERROR;
 8007fdc:	2001      	movs	r0, #1
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	00010007 	.word	0x00010007

08007fe8 <HAL_TIM_OC_DelayElapsedCallback>:
 8007fe8:	4770      	bx	lr

08007fea <HAL_TIM_IC_CaptureCallback>:
 8007fea:	4770      	bx	lr

08007fec <HAL_TIM_PWM_PulseFinishedCallback>:
 8007fec:	4770      	bx	lr

08007fee <HAL_TIM_TriggerCallback>:
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ff0:	6803      	ldr	r3, [r0, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	0791      	lsls	r1, r2, #30
{
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ffa:	d50f      	bpl.n	800801c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	0792      	lsls	r2, r2, #30
 8008000:	d50c      	bpl.n	800801c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008002:	f06f 0202 	mvn.w	r2, #2
 8008006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008008:	2201      	movs	r2, #1
 800800a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	0799      	lsls	r1, r3, #30
 8008010:	f000 8085 	beq.w	800811e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008014:	f7ff ffe9 	bl	8007fea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008018:	2300      	movs	r3, #0
 800801a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	0752      	lsls	r2, r2, #29
 8008022:	d510      	bpl.n	8008046 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	0750      	lsls	r0, r2, #29
 8008028:	d50d      	bpl.n	8008046 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800802a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008032:	2202      	movs	r2, #2
 8008034:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f413 7f40 	tst.w	r3, #768	; 0x300
 800803c:	d075      	beq.n	800812a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800803e:	f7ff ffd4 	bl	8007fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	2300      	movs	r3, #0
 8008044:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	0711      	lsls	r1, r2, #28
 800804c:	d50f      	bpl.n	800806e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	0712      	lsls	r2, r2, #28
 8008052:	d50c      	bpl.n	800806e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008054:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008058:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800805a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800805c:	2204      	movs	r2, #4
 800805e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	d067      	beq.n	8008136 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	f7ff ffc0 	bl	8007fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	2300      	movs	r3, #0
 800806c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	06d0      	lsls	r0, r2, #27
 8008074:	d510      	bpl.n	8008098 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	06d1      	lsls	r1, r2, #27
 800807a:	d50d      	bpl.n	8008098 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800807c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008080:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008084:	2208      	movs	r2, #8
 8008086:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800808e:	d058      	beq.n	8008142 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8008090:	f7ff ffab 	bl	8007fea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008094:	2300      	movs	r3, #0
 8008096:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	07d2      	lsls	r2, r2, #31
 800809e:	d508      	bpl.n	80080b2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	07d0      	lsls	r0, r2, #31
 80080a4:	d505      	bpl.n	80080b2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080a6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ae:	f7f9 f959 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	0611      	lsls	r1, r2, #24
 80080b8:	d508      	bpl.n	80080cc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	0612      	lsls	r2, r2, #24
 80080be:	d505      	bpl.n	80080cc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80080c8:	f000 f8d9 	bl	800827e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	05d0      	lsls	r0, r2, #23
 80080d2:	d508      	bpl.n	80080e6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	0611      	lsls	r1, r2, #24
 80080d8:	d505      	bpl.n	80080e6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080da:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80080e2:	f000 f8cd 	bl	8008280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	0652      	lsls	r2, r2, #25
 80080ec:	d508      	bpl.n	8008100 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	0650      	lsls	r0, r2, #25
 80080f2:	d505      	bpl.n	8008100 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80080fc:	f7ff ff77 	bl	8007fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	0691      	lsls	r1, r2, #26
 8008106:	d522      	bpl.n	800814e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	0692      	lsls	r2, r2, #26
 800810c:	d51f      	bpl.n	800814e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800810e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008112:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008114:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800811a:	f000 b8af 	b.w	800827c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	f7ff ff63 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ff62 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
 8008128:	e776      	b.n	8008018 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	f7ff ff5d 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff ff5c 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
 8008134:	e785      	b.n	8008042 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008136:	f7ff ff57 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff ff56 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
 8008140:	e793      	b.n	800806a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008142:	f7ff ff51 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff ff50 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
 800814c:	e7a2      	b.n	8008094 <HAL_TIM_IRQHandler+0xa4>
}
 800814e:	bd10      	pop	{r4, pc}

08008150 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008150:	4a30      	ldr	r2, [pc, #192]	; (8008214 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8008152:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008154:	4290      	cmp	r0, r2
 8008156:	d012      	beq.n	800817e <TIM_Base_SetConfig+0x2e>
 8008158:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800815c:	d00f      	beq.n	800817e <TIM_Base_SetConfig+0x2e>
 800815e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008162:	4290      	cmp	r0, r2
 8008164:	d00b      	beq.n	800817e <TIM_Base_SetConfig+0x2e>
 8008166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800816a:	4290      	cmp	r0, r2
 800816c:	d007      	beq.n	800817e <TIM_Base_SetConfig+0x2e>
 800816e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008172:	4290      	cmp	r0, r2
 8008174:	d003      	beq.n	800817e <TIM_Base_SetConfig+0x2e>
 8008176:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800817a:	4290      	cmp	r0, r2
 800817c:	d119      	bne.n	80081b2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800817e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008184:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008186:	4a23      	ldr	r2, [pc, #140]	; (8008214 <TIM_Base_SetConfig+0xc4>)
 8008188:	4290      	cmp	r0, r2
 800818a:	d029      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 800818c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008190:	d026      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 8008192:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008196:	4290      	cmp	r0, r2
 8008198:	d022      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 800819a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800819e:	4290      	cmp	r0, r2
 80081a0:	d01e      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081a6:	4290      	cmp	r0, r2
 80081a8:	d01a      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081ae:	4290      	cmp	r0, r2
 80081b0:	d016      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081b2:	4a19      	ldr	r2, [pc, #100]	; (8008218 <TIM_Base_SetConfig+0xc8>)
 80081b4:	4290      	cmp	r0, r2
 80081b6:	d013      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081bc:	4290      	cmp	r0, r2
 80081be:	d00f      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c4:	4290      	cmp	r0, r2
 80081c6:	d00b      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081c8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80081cc:	4290      	cmp	r0, r2
 80081ce:	d007      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081d4:	4290      	cmp	r0, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_Base_SetConfig+0x90>
 80081d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081dc:	4290      	cmp	r0, r2
 80081de:	d103      	bne.n	80081e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081e4:	68ca      	ldr	r2, [r1, #12]
 80081e6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e8:	694a      	ldr	r2, [r1, #20]
 80081ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ee:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80081f0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f2:	688b      	ldr	r3, [r1, #8]
 80081f4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f6:	680b      	ldr	r3, [r1, #0]
 80081f8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fa:	4b06      	ldr	r3, [pc, #24]	; (8008214 <TIM_Base_SetConfig+0xc4>)
 80081fc:	4298      	cmp	r0, r3
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0xb8>
 8008200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008204:	4298      	cmp	r0, r3
 8008206:	d101      	bne.n	800820c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008208:	690b      	ldr	r3, [r1, #16]
 800820a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820c:	2301      	movs	r3, #1
 800820e:	6143      	str	r3, [r0, #20]
}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000
 8008218:	40014000 	.word	0x40014000

0800821c <HAL_TIM_Base_Init>:
{
 800821c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800821e:	4604      	mov	r4, r0
 8008220:	b350      	cbz	r0, 8008278 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008226:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800822a:	b91b      	cbnz	r3, 8008234 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800822c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008230:	f7ff fe9b 	bl	8007f6a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800823a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800823e:	f7ff ff87 	bl	8008150 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008242:	2301      	movs	r3, #1
  return HAL_OK;
 8008244:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008246:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800824e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008256:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800825a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800825e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008262:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800826a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800826e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008276:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008278:	2001      	movs	r0, #1
 800827a:	e7fc      	b.n	8008276 <HAL_TIM_Base_Init+0x5a>

0800827c <HAL_TIMEx_CommutCallback>:
 800827c:	4770      	bx	lr

0800827e <HAL_TIMEx_BreakCallback>:
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_Break2Callback>:
 8008280:	4770      	bx	lr

08008282 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008286:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008288:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800828c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8008290:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8008294:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8008298:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800829c:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800829e:	b9a2      	cbnz	r2, 80082ca <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082a0:	ea43 0209 	orr.w	r2, r3, r9
 80082a4:	6801      	ldr	r1, [r0, #0]
 80082a6:	432a      	orrs	r2, r5
 80082a8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80082ac:	ea42 0308 	orr.w	r3, r2, r8
 80082b0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80082b4:	ea43 030e 	orr.w	r3, r3, lr
 80082b8:	ea43 030c 	orr.w	r3, r3, ip
 80082bc:	433b      	orrs	r3, r7
 80082be:	4333      	orrs	r3, r6
 80082c0:	430b      	orrs	r3, r1
 80082c2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80082c4:	2000      	movs	r0, #0
 80082c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082ca:	6802      	ldr	r2, [r0, #0]
 80082cc:	ea43 0309 	orr.w	r3, r3, r9
 80082d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80082d4:	4313      	orrs	r3, r2
 80082d6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80082d8:	ea45 0308 	orr.w	r3, r5, r8
 80082dc:	6842      	ldr	r2, [r0, #4]
 80082de:	ea43 030e 	orr.w	r3, r3, lr
 80082e2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80082e6:	ea43 030c 	orr.w	r3, r3, ip
 80082ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80082ee:	433b      	orrs	r3, r7
 80082f0:	4333      	orrs	r3, r6
 80082f2:	4313      	orrs	r3, r2
 80082f4:	6043      	str	r3, [r0, #4]
 80082f6:	e7e5      	b.n	80082c4 <FMC_SDRAM_Init+0x42>

080082f8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80082f8:	68cb      	ldr	r3, [r1, #12]
 80082fa:	f103 3cff 	add.w	ip, r3, #4294967295
 80082fe:	694b      	ldr	r3, [r1, #20]
{
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008302:	3b01      	subs	r3, #1
 8008304:	680f      	ldr	r7, [r1, #0]
 8008306:	684c      	ldr	r4, [r1, #4]
 8008308:	688e      	ldr	r6, [r1, #8]
 800830a:	051b      	lsls	r3, r3, #20
 800830c:	690d      	ldr	r5, [r1, #16]
 800830e:	3c01      	subs	r4, #1
 8008310:	6989      	ldr	r1, [r1, #24]
 8008312:	3e01      	subs	r6, #1
 8008314:	3d01      	subs	r5, #1
 8008316:	3f01      	subs	r7, #1
 8008318:	3901      	subs	r1, #1
 800831a:	0124      	lsls	r4, r4, #4
 800831c:	0236      	lsls	r6, r6, #8
 800831e:	042d      	lsls	r5, r5, #16
 8008320:	0609      	lsls	r1, r1, #24
 8008322:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8008326:	b95a      	cbnz	r2, 8008340 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008328:	433b      	orrs	r3, r7
 800832a:	6882      	ldr	r2, [r0, #8]
 800832c:	4323      	orrs	r3, r4
 800832e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008332:	4333      	orrs	r3, r6
 8008334:	432b      	orrs	r3, r5
 8008336:	430b      	orrs	r3, r1
 8008338:	4313      	orrs	r3, r2
 800833a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800833c:	2000      	movs	r0, #0
 800833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008340:	6882      	ldr	r2, [r0, #8]
 8008342:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008346:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800834a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800834c:	ea44 0306 	orr.w	r3, r4, r6
 8008350:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008352:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008354:	68c2      	ldr	r2, [r0, #12]
 8008356:	432b      	orrs	r3, r5
 8008358:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800835c:	430b      	orrs	r3, r1
 800835e:	4313      	orrs	r3, r2
 8008360:	60c3      	str	r3, [r0, #12]
 8008362:	e7eb      	b.n	800833c <FMC_SDRAM_Timing_Init+0x44>

08008364 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008364:	6902      	ldr	r2, [r0, #16]
{
 8008366:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008368:	e9d1 3400 	ldrd	r3, r4, [r1]
 800836c:	0d92      	lsrs	r2, r2, #22
 800836e:	4323      	orrs	r3, r4
 8008370:	68cc      	ldr	r4, [r1, #12]
 8008372:	0592      	lsls	r2, r2, #22
 8008374:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8008378:	4313      	orrs	r3, r2
 800837a:	688a      	ldr	r2, [r1, #8]
 800837c:	3a01      	subs	r2, #1
 800837e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008382:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8008384:	2000      	movs	r0, #0
 8008386:	bd10      	pop	{r4, pc}

08008388 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008388:	6943      	ldr	r3, [r0, #20]
 800838a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800838e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008392:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008396:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8008398:	2000      	movs	r0, #0
 800839a:	4770      	bx	lr

0800839c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a0:	b113      	cbz	r3, 80083a8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80083a2:	f06f 0005 	mvn.w	r0, #5
 80083a6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 80083ae:	b912      	cbnz	r2, 80083b6 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083b0:	f3ef 8211 	mrs	r2, BASEPRI
 80083b4:	b112      	cbz	r2, 80083bc <osKernelInitialize+0x20>
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	2a02      	cmp	r2, #2
 80083ba:	d0f2      	beq.n	80083a2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	b910      	cbnz	r0, 80083c6 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083c4:	4770      	bx	lr
    } else {
      stat = osError;
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80083ca:	4770      	bx	lr
 80083cc:	20002598 	.word	0x20002598

080083d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083d0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083d2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80083d6:	b113      	cbz	r3, 80083de <osKernelStart+0xe>
    stat = osErrorISR;
 80083d8:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80083dc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083de:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80083e4:	b912      	cbnz	r2, 80083ec <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083e6:	f3ef 8211 	mrs	r2, BASEPRI
 80083ea:	b112      	cbz	r2, 80083f2 <osKernelStart+0x22>
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	2a02      	cmp	r2, #2
 80083f0:	d0f2      	beq.n	80083d8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	2a01      	cmp	r2, #1
 80083f6:	d105      	bne.n	8008404 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80083f8:	2202      	movs	r2, #2
 80083fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80083fc:	f001 fe8e 	bl	800a11c <vTaskStartScheduler>
      stat = osOK;
 8008400:	2000      	movs	r0, #0
 8008402:	e7eb      	b.n	80083dc <osKernelStart+0xc>
      stat = osError;
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008408:	e7e8      	b.n	80083dc <osKernelStart+0xc>
 800840a:	bf00      	nop
 800840c:	20002598 	.word	0x20002598

08008410 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	4614      	mov	r4, r2
 8008414:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008416:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008418:	460b      	mov	r3, r1
  hTask = NULL;
 800841a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800841c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008420:	bb22      	cbnz	r2, 800846c <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008422:	f3ef 8210 	mrs	r2, PRIMASK
 8008426:	b912      	cbnz	r2, 800842e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008428:	f3ef 8211 	mrs	r2, BASEPRI
 800842c:	b11a      	cbz	r2, 8008436 <osThreadNew+0x26>
 800842e:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <osThreadNew+0xa8>)
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	2a02      	cmp	r2, #2
 8008434:	d01a      	beq.n	800846c <osThreadNew+0x5c>
 8008436:	b1c8      	cbz	r0, 800846c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008438:	2c00      	cmp	r4, #0
 800843a:	d02f      	beq.n	800849c <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800843c:	69a5      	ldr	r5, [r4, #24]
 800843e:	2d00      	cmp	r5, #0
 8008440:	bf08      	it	eq
 8008442:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008444:	1e6a      	subs	r2, r5, #1
 8008446:	46ac      	mov	ip, r5
 8008448:	2a37      	cmp	r2, #55	; 0x37
 800844a:	d82b      	bhi.n	80084a4 <osThreadNew+0x94>
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	07d2      	lsls	r2, r2, #31
 8008450:	d428      	bmi.n	80084a4 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008452:	6966      	ldr	r6, [r4, #20]
 8008454:	b16e      	cbz	r6, 8008472 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008456:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008458:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800845a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800845e:	b157      	cbz	r7, 8008476 <osThreadNew+0x66>
 8008460:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 8008464:	d902      	bls.n	800846c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008466:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008468:	b104      	cbz	r4, 800846c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800846a:	b9ee      	cbnz	r6, 80084a8 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800846c:	9805      	ldr	r0, [sp, #20]
}
 800846e:	b007      	add	sp, #28
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008472:	2280      	movs	r2, #128	; 0x80
 8008474:	e7f0      	b.n	8008458 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008476:	f1be 0f00 	cmp.w	lr, #0
 800847a:	d1f7      	bne.n	800846c <osThreadNew+0x5c>
      if (mem == 0) {
 800847c:	6924      	ldr	r4, [r4, #16]
 800847e:	2c00      	cmp	r4, #0
 8008480:	d1f4      	bne.n	800846c <osThreadNew+0x5c>
 8008482:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008484:	a905      	add	r1, sp, #20
 8008486:	b292      	uxth	r2, r2
 8008488:	e9cd c100 	strd	ip, r1, [sp]
 800848c:	4621      	mov	r1, r4
 800848e:	f001 fcb9 	bl	8009e04 <xTaskCreate>
 8008492:	2801      	cmp	r0, #1
          hTask = NULL;
 8008494:	bf1c      	itt	ne
 8008496:	2300      	movne	r3, #0
 8008498:	9305      	strne	r3, [sp, #20]
 800849a:	e7e7      	b.n	800846c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800849c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80084a0:	2280      	movs	r2, #128	; 0x80
 80084a2:	e7ef      	b.n	8008484 <osThreadNew+0x74>
        return (NULL);
 80084a4:	2000      	movs	r0, #0
 80084a6:	e7e2      	b.n	800846e <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084a8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80084ac:	9500      	str	r5, [sp, #0]
 80084ae:	f001 fc6b 	bl	8009d88 <xTaskCreateStatic>
 80084b2:	9005      	str	r0, [sp, #20]
 80084b4:	e7da      	b.n	800846c <osThreadNew+0x5c>
 80084b6:	bf00      	nop
 80084b8:	20002598 	.word	0x20002598

080084bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80084bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084be:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80084c2:	b113      	cbz	r3, 80084ca <osDelay+0xe>
    stat = osErrorISR;
 80084c4:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80084c8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ca:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80084ce:	b913      	cbnz	r3, 80084d6 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084d0:	f3ef 8311 	mrs	r3, BASEPRI
 80084d4:	b11b      	cbz	r3, 80084de <osDelay+0x22>
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <osDelay+0x30>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d0f2      	beq.n	80084c4 <osDelay+0x8>
    if (ticks != 0U) {
 80084de:	2800      	cmp	r0, #0
 80084e0:	d0f2      	beq.n	80084c8 <osDelay+0xc>
      vTaskDelay(ticks);
 80084e2:	f001 fdd9 	bl	800a098 <vTaskDelay>
    stat = osOK;
 80084e6:	2000      	movs	r0, #0
 80084e8:	e7ee      	b.n	80084c8 <osDelay+0xc>
 80084ea:	bf00      	nop
 80084ec:	20002598 	.word	0x20002598

080084f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80084f8:	b116      	cbz	r6, 8008500 <osMutexNew+0x10>
  hMutex = NULL;
 80084fa:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008500:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8008504:	b912      	cbnz	r2, 800850c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008506:	f3ef 8211 	mrs	r2, BASEPRI
 800850a:	b11a      	cbz	r2, 8008514 <osMutexNew+0x24>
 800850c:	4a18      	ldr	r2, [pc, #96]	; (8008570 <osMutexNew+0x80>)
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	2a02      	cmp	r2, #2
 8008512:	d0f2      	beq.n	80084fa <osMutexNew+0xa>
    if (attr != NULL) {
 8008514:	b115      	cbz	r5, 800851c <osMutexNew+0x2c>
      type = attr->attr_bits;
 8008516:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8008518:	0733      	lsls	r3, r6, #28
 800851a:	d4ee      	bmi.n	80084fa <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800851c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8008520:	b17d      	cbz	r5, 8008542 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008522:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008526:	b151      	cbz	r1, 800853e <osMutexNew+0x4e>
 8008528:	2b4f      	cmp	r3, #79	; 0x4f
 800852a:	d9e6      	bls.n	80084fa <osMutexNew+0xa>
        if (rmtx != 0U) {
 800852c:	b1de      	cbz	r6, 8008566 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800852e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008530:	f000 ff4c 	bl	80093cc <xQueueCreateMutexStatic>
 8008534:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008536:	2800      	cmp	r0, #0
 8008538:	d0df      	beq.n	80084fa <osMutexNew+0xa>
          name = attr->name;
 800853a:	682d      	ldr	r5, [r5, #0]
 800853c:	e00a      	b.n	8008554 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1db      	bne.n	80084fa <osMutexNew+0xa>
          if (rmtx != 0U) {
 8008542:	b196      	cbz	r6, 800856a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008544:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8008546:	f000 ff76 	bl	8009436 <xQueueCreateMutex>
 800854a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800854c:	2800      	cmp	r0, #0
 800854e:	d0d4      	beq.n	80084fa <osMutexNew+0xa>
        if (attr != NULL) {
 8008550:	2d00      	cmp	r5, #0
 8008552:	d1f2      	bne.n	800853a <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8008554:	4629      	mov	r1, r5
 8008556:	4620      	mov	r0, r4
 8008558:	f001 fa38 	bl	80099cc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800855c:	2e00      	cmp	r6, #0
 800855e:	d0cd      	beq.n	80084fc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008560:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8008564:	e7ca      	b.n	80084fc <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008566:	2001      	movs	r0, #1
 8008568:	e7e2      	b.n	8008530 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800856a:	2001      	movs	r0, #1
 800856c:	e7eb      	b.n	8008546 <osMutexNew+0x56>
 800856e:	bf00      	nop
 8008570:	20002598 	.word	0x20002598

08008574 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008574:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008576:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800857a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800857c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008580:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008582:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008586:	b112      	cbz	r2, 800858e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8008588:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800858c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800858e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8008592:	b912      	cbnz	r2, 800859a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008594:	f3ef 8211 	mrs	r2, BASEPRI
 8008598:	b11a      	cbz	r2, 80085a2 <osMutexAcquire+0x2e>
 800859a:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <osMutexAcquire+0x5c>)
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	2a02      	cmp	r2, #2
 80085a0:	d0f2      	beq.n	8008588 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 80085a2:	b188      	cbz	r0, 80085c8 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80085a4:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 80085a6:	b163      	cbz	r3, 80085c2 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80085a8:	f001 f997 	bl	80098da <xQueueTakeMutexRecursive>
 80085ac:	2801      	cmp	r0, #1
 80085ae:	d101      	bne.n	80085b4 <osMutexAcquire+0x40>
  stat = osOK;
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7eb      	b.n	800858c <osMutexAcquire+0x18>
          stat = osErrorResource;
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	bf14      	ite	ne
 80085b8:	f06f 0001 	mvnne.w	r0, #1
 80085bc:	f06f 0002 	mvneq.w	r0, #2
 80085c0:	e7e4      	b.n	800858c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80085c2:	f001 f8bf 	bl	8009744 <xQueueSemaphoreTake>
 80085c6:	e7f1      	b.n	80085ac <osMutexAcquire+0x38>
    stat = osErrorParameter;
 80085c8:	f06f 0003 	mvn.w	r0, #3
 80085cc:	e7de      	b.n	800858c <osMutexAcquire+0x18>
 80085ce:	bf00      	nop
 80085d0:	20002598 	.word	0x20002598

080085d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80085d4:	b508      	push	{r3, lr}
 80085d6:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085d8:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80085dc:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e0:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80085e4:	b112      	cbz	r2, 80085ec <osMutexRelease+0x18>
    stat = osErrorISR;
 80085e6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80085ea:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ec:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80085f0:	b912      	cbnz	r2, 80085f8 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085f2:	f3ef 8211 	mrs	r2, BASEPRI
 80085f6:	b11a      	cbz	r2, 8008600 <osMutexRelease+0x2c>
 80085f8:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <osMutexRelease+0x50>)
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	2a02      	cmp	r2, #2
 80085fe:	d0f2      	beq.n	80085e6 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8008600:	b168      	cbz	r0, 800861e <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8008602:	b13b      	cbz	r3, 8008614 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008604:	f000 fef7 	bl	80093f6 <xQueueGiveMutexRecursive>
 8008608:	2801      	cmp	r0, #1
  stat = osOK;
 800860a:	bf0c      	ite	eq
 800860c:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800860e:	f06f 0002 	mvnne.w	r0, #2
 8008612:	e7ea      	b.n	80085ea <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008614:	461a      	mov	r2, r3
 8008616:	4619      	mov	r1, r3
 8008618:	f000 fe1d 	bl	8009256 <xQueueGenericSend>
 800861c:	e7f4      	b.n	8008608 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800861e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008622:	e7e2      	b.n	80085ea <osMutexRelease+0x16>
 8008624:	20002598 	.word	0x20002598

08008628 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008628:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800862e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008632:	b11b      	cbz	r3, 800863c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8008634:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008636:	4620      	mov	r0, r4
 8008638:	b002      	add	sp, #8
 800863a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008640:	b913      	cbnz	r3, 8008648 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008642:	f3ef 8311 	mrs	r3, BASEPRI
 8008646:	b11b      	cbz	r3, 8008650 <osSemaphoreNew+0x28>
 8008648:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <osSemaphoreNew+0xa8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d0f1      	beq.n	8008634 <osSemaphoreNew+0xc>
 8008650:	2800      	cmp	r0, #0
 8008652:	d0ef      	beq.n	8008634 <osSemaphoreNew+0xc>
 8008654:	42b0      	cmp	r0, r6
 8008656:	d3ed      	bcc.n	8008634 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8008658:	b1ed      	cbz	r5, 8008696 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800865a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800865e:	b1c3      	cbz	r3, 8008692 <osSemaphoreNew+0x6a>
 8008660:	2a4f      	cmp	r2, #79	; 0x4f
 8008662:	d9e7      	bls.n	8008634 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8008664:	2801      	cmp	r0, #1
 8008666:	d129      	bne.n	80086bc <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008668:	2203      	movs	r2, #3
 800866a:	9200      	str	r2, [sp, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	4611      	mov	r1, r2
 8008670:	f000 fd6c 	bl	800914c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8008674:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008676:	2800      	cmp	r0, #0
 8008678:	d0dc      	beq.n	8008634 <osSemaphoreNew+0xc>
 800867a:	b1ce      	cbz	r6, 80086b0 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800867c:	2300      	movs	r3, #0
 800867e:	461a      	mov	r2, r3
 8008680:	4619      	mov	r1, r3
 8008682:	f000 fde8 	bl	8009256 <xQueueGenericSend>
 8008686:	2801      	cmp	r0, #1
 8008688:	d012      	beq.n	80086b0 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800868a:	4620      	mov	r0, r4
 800868c:	f001 f9c4 	bl	8009a18 <vQueueDelete>
 8008690:	e7d0      	b.n	8008634 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008692:	2a00      	cmp	r2, #0
 8008694:	d1ce      	bne.n	8008634 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8008696:	2801      	cmp	r0, #1
 8008698:	d104      	bne.n	80086a4 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800869a:	2203      	movs	r2, #3
 800869c:	2100      	movs	r1, #0
 800869e:	f000 fd69 	bl	8009174 <xQueueGenericCreate>
 80086a2:	e7e7      	b.n	8008674 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80086a4:	4631      	mov	r1, r6
 80086a6:	f000 fdb4 	bl	8009212 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80086aa:	4604      	mov	r4, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d0c1      	beq.n	8008634 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80086b0:	b95d      	cbnz	r5, 80086ca <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 80086b2:	4629      	mov	r1, r5
 80086b4:	4620      	mov	r0, r4
 80086b6:	f001 f989 	bl	80099cc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80086ba:	e7bc      	b.n	8008636 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80086bc:	461a      	mov	r2, r3
 80086be:	4631      	mov	r1, r6
 80086c0:	f000 fd81 	bl	80091c6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80086c4:	4604      	mov	r4, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0b4      	beq.n	8008634 <osSemaphoreNew+0xc>
          name = attr->name;
 80086ca:	682d      	ldr	r5, [r5, #0]
 80086cc:	e7f1      	b.n	80086b2 <osSemaphoreNew+0x8a>
 80086ce:	bf00      	nop
 80086d0:	20002598 	.word	0x20002598

080086d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80086d4:	b513      	push	{r0, r1, r4, lr}
 80086d6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80086d8:	b918      	cbnz	r0, 80086e2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80086da:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80086de:	b002      	add	sp, #8
 80086e0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086e2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80086e6:	b163      	cbz	r3, 8008702 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	d1f6      	bne.n	80086da <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80086ec:	aa01      	add	r2, sp, #4
 80086ee:	4621      	mov	r1, r4
      yield = pdFALSE;
 80086f0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80086f2:	f001 f916 	bl	8009922 <xQueueReceiveFromISR>
 80086f6:	2801      	cmp	r0, #1
 80086f8:	d113      	bne.n	8008722 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	b9a3      	cbnz	r3, 8008728 <osSemaphoreAcquire+0x54>
  stat = osOK;
 80086fe:	2000      	movs	r0, #0
 8008700:	e7ed      	b.n	80086de <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008702:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8008706:	b913      	cbnz	r3, 800870e <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008708:	f3ef 8311 	mrs	r3, BASEPRI
 800870c:	b11b      	cbz	r3, 8008716 <osSemaphoreAcquire+0x42>
 800870e:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <osSemaphoreAcquire+0x70>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d0e8      	beq.n	80086e8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008716:	4621      	mov	r1, r4
 8008718:	f001 f814 	bl	8009744 <xQueueSemaphoreTake>
 800871c:	2801      	cmp	r0, #1
 800871e:	d0ee      	beq.n	80086fe <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8008720:	b96c      	cbnz	r4, 800873e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8008722:	f06f 0002 	mvn.w	r0, #2
 8008726:	e7da      	b.n	80086de <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8008728:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008730:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	e7df      	b.n	80086fe <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800873e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008742:	e7cc      	b.n	80086de <osSemaphoreAcquire+0xa>
 8008744:	20002598 	.word	0x20002598

08008748 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008748:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800874a:	b370      	cbz	r0, 80087aa <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008750:	b14b      	cbz	r3, 8008766 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8008752:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008754:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8008756:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008758:	f000 fef3 	bl	8009542 <xQueueGiveFromISR>
 800875c:	2801      	cmp	r0, #1
 800875e:	d014      	beq.n	800878a <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8008760:	f06f 0002 	mvn.w	r0, #2
 8008764:	e014      	b.n	8008790 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008766:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800876a:	b913      	cbnz	r3, 8008772 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800876c:	f3ef 8311 	mrs	r3, BASEPRI
 8008770:	b11b      	cbz	r3, 800877a <osSemaphoreRelease+0x32>
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <osSemaphoreRelease+0x68>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d0eb      	beq.n	8008752 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800877a:	2300      	movs	r3, #0
 800877c:	461a      	mov	r2, r3
 800877e:	4619      	mov	r1, r3
 8008780:	f000 fd69 	bl	8009256 <xQueueGenericSend>
 8008784:	2801      	cmp	r0, #1
 8008786:	d002      	beq.n	800878e <osSemaphoreRelease+0x46>
 8008788:	e7ea      	b.n	8008760 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	b913      	cbnz	r3, 8008794 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800878e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8008790:	b002      	add	sp, #8
 8008792:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8008794:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	e7f1      	b.n	800878e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80087aa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80087ae:	e7ef      	b.n	8008790 <osSemaphoreRelease+0x48>
 80087b0:	20002598 	.word	0x20002598

080087b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087b6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80087bc:	b11b      	cbz	r3, 80087c6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80087be:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80087c0:	4628      	mov	r0, r5
 80087c2:	b002      	add	sp, #8
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80087ca:	b913      	cbnz	r3, 80087d2 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087cc:	f3ef 8311 	mrs	r3, BASEPRI
 80087d0:	b11b      	cbz	r3, 80087da <osMessageQueueNew+0x26>
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <osMessageQueueNew+0x88>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d0f1      	beq.n	80087be <osMessageQueueNew+0xa>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0ef      	beq.n	80087be <osMessageQueueNew+0xa>
 80087de:	2900      	cmp	r1, #0
 80087e0:	d0ed      	beq.n	80087be <osMessageQueueNew+0xa>
    if (attr != NULL) {
 80087e2:	b1ec      	cbz	r4, 8008820 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80087e8:	b193      	cbz	r3, 8008810 <osMessageQueueNew+0x5c>
 80087ea:	2a4f      	cmp	r2, #79	; 0x4f
 80087ec:	d9e7      	bls.n	80087be <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d0e4      	beq.n	80087be <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087f4:	fb01 f500 	mul.w	r5, r1, r0
 80087f8:	6966      	ldr	r6, [r4, #20]
 80087fa:	42ae      	cmp	r6, r5
 80087fc:	d3df      	bcc.n	80087be <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80087fe:	2500      	movs	r5, #0
 8008800:	9500      	str	r5, [sp, #0]
 8008802:	f000 fca3 	bl	800914c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008806:	4605      	mov	r5, r0
 8008808:	2800      	cmp	r0, #0
 800880a:	d0d8      	beq.n	80087be <osMessageQueueNew+0xa>
        name = attr->name;
 800880c:	6824      	ldr	r4, [r4, #0]
 800880e:	e00f      	b.n	8008830 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008810:	2a00      	cmp	r2, #0
 8008812:	d1d4      	bne.n	80087be <osMessageQueueNew+0xa>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1d1      	bne.n	80087be <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1ce      	bne.n	80087be <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008820:	2200      	movs	r2, #0
 8008822:	f000 fca7 	bl	8009174 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008826:	4605      	mov	r5, r0
 8008828:	2800      	cmp	r0, #0
 800882a:	d0c8      	beq.n	80087be <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800882c:	2c00      	cmp	r4, #0
 800882e:	d1ed      	bne.n	800880c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f001 f8ca 	bl	80099cc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8008838:	e7c2      	b.n	80087c0 <osMessageQueueNew+0xc>
 800883a:	bf00      	nop
 800883c:	20002598 	.word	0x20002598

08008840 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008840:	b513      	push	{r0, r1, r4, lr}
 8008842:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008844:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008848:	b123      	cbz	r3, 8008854 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800884a:	b9d8      	cbnz	r0, 8008884 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800884c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8008850:	b002      	add	sp, #8
 8008852:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008854:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008858:	b913      	cbnz	r3, 8008860 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800885a:	f3ef 8311 	mrs	r3, BASEPRI
 800885e:	b11b      	cbz	r3, 8008868 <osMessageQueuePut+0x28>
 8008860:	4b17      	ldr	r3, [pc, #92]	; (80088c0 <osMessageQueuePut+0x80>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d0f0      	beq.n	800884a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008868:	2800      	cmp	r0, #0
 800886a:	d0ef      	beq.n	800884c <osMessageQueuePut+0xc>
 800886c:	2900      	cmp	r1, #0
 800886e:	d0ed      	beq.n	800884c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008870:	2300      	movs	r3, #0
 8008872:	4622      	mov	r2, r4
 8008874:	f000 fcef 	bl	8009256 <xQueueGenericSend>
 8008878:	2801      	cmp	r0, #1
 800887a:	d010      	beq.n	800889e <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800887c:	b9e4      	cbnz	r4, 80088b8 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800887e:	f06f 0002 	mvn.w	r0, #2
 8008882:	e7e5      	b.n	8008850 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008884:	2900      	cmp	r1, #0
 8008886:	d0e1      	beq.n	800884c <osMessageQueuePut+0xc>
 8008888:	2c00      	cmp	r4, #0
 800888a:	d1df      	bne.n	800884c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800888c:	4623      	mov	r3, r4
 800888e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008890:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008892:	f000 fded 	bl	8009470 <xQueueGenericSendFromISR>
 8008896:	2801      	cmp	r0, #1
 8008898:	d1f1      	bne.n	800887e <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	b90b      	cbnz	r3, 80088a2 <osMessageQueuePut+0x62>
  stat = osOK;
 800889e:	2000      	movs	r0, #0
 80088a0:	e7d6      	b.n	8008850 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80088a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	e7f2      	b.n	800889e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 80088b8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80088bc:	e7c8      	b.n	8008850 <osMessageQueuePut+0x10>
 80088be:	bf00      	nop
 80088c0:	20002598 	.word	0x20002598

080088c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80088c4:	b513      	push	{r0, r1, r4, lr}
 80088c6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088c8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80088cc:	b123      	cbz	r3, 80088d8 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088ce:	b9d0      	cbnz	r0, 8008906 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 80088d0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80088d4:	b002      	add	sp, #8
 80088d6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80088dc:	b913      	cbnz	r3, 80088e4 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088de:	f3ef 8311 	mrs	r3, BASEPRI
 80088e2:	b11b      	cbz	r3, 80088ec <osMessageQueueGet+0x28>
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <osMessageQueueGet+0x7c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d0f0      	beq.n	80088ce <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d0ef      	beq.n	80088d0 <osMessageQueueGet+0xc>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	d0ed      	beq.n	80088d0 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088f4:	4622      	mov	r2, r4
 80088f6:	f000 fe80 	bl	80095fa <xQueueReceive>
 80088fa:	2801      	cmp	r0, #1
 80088fc:	d00f      	beq.n	800891e <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 80088fe:	b9dc      	cbnz	r4, 8008938 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8008900:	f06f 0002 	mvn.w	r0, #2
 8008904:	e7e6      	b.n	80088d4 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008906:	2900      	cmp	r1, #0
 8008908:	d0e2      	beq.n	80088d0 <osMessageQueueGet+0xc>
 800890a:	2c00      	cmp	r4, #0
 800890c:	d1e0      	bne.n	80088d0 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800890e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008910:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008912:	f001 f806 	bl	8009922 <xQueueReceiveFromISR>
 8008916:	2801      	cmp	r0, #1
 8008918:	d1f2      	bne.n	8008900 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	b90b      	cbnz	r3, 8008922 <osMessageQueueGet+0x5e>
  stat = osOK;
 800891e:	2000      	movs	r0, #0
 8008920:	e7d8      	b.n	80088d4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008922:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	e7f2      	b.n	800891e <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8008938:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800893c:	e7ca      	b.n	80088d4 <osMessageQueueGet+0x10>
 800893e:	bf00      	nop
 8008940:	20002598 	.word	0x20002598

08008944 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008944:	4b03      	ldr	r3, [pc, #12]	; (8008954 <vApplicationGetIdleTaskMemory+0x10>)
 8008946:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008948:	4b03      	ldr	r3, [pc, #12]	; (8008958 <vApplicationGetIdleTaskMemory+0x14>)
 800894a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800894c:	2380      	movs	r3, #128	; 0x80
 800894e:	6013      	str	r3, [r2, #0]
}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	200024d8 	.word	0x200024d8
 8008958:	200022d8 	.word	0x200022d8

0800895c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800895c:	4b03      	ldr	r3, [pc, #12]	; (800896c <vApplicationGetTimerTaskMemory+0x10>)
 800895e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008960:	4b03      	ldr	r3, [pc, #12]	; (8008970 <vApplicationGetTimerTaskMemory+0x14>)
 8008962:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008968:	6013      	str	r3, [r2, #0]
}
 800896a:	4770      	bx	lr
 800896c:	2000299c 	.word	0x2000299c
 8008970:	2000259c 	.word	0x2000259c

08008974 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <prvInsertBlockIntoFreeList+0x40>)
{
 8008976:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008978:	461a      	mov	r2, r3
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4283      	cmp	r3, r0
 800897e:	d3fb      	bcc.n	8008978 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008980:	6854      	ldr	r4, [r2, #4]
 8008982:	1911      	adds	r1, r2, r4
 8008984:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008986:	bf01      	itttt	eq
 8008988:	6841      	ldreq	r1, [r0, #4]
 800898a:	4610      	moveq	r0, r2
 800898c:	1909      	addeq	r1, r1, r4
 800898e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008990:	6844      	ldr	r4, [r0, #4]
 8008992:	1901      	adds	r1, r0, r4
 8008994:	428b      	cmp	r3, r1
 8008996:	d107      	bne.n	80089a8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008998:	4907      	ldr	r1, [pc, #28]	; (80089b8 <prvInsertBlockIntoFreeList+0x44>)
 800899a:	6809      	ldr	r1, [r1, #0]
 800899c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800899e:	bf1f      	itttt	ne
 80089a0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089a2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089a4:	1909      	addne	r1, r1, r4
 80089a6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089a8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089aa:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089ac:	bf18      	it	ne
 80089ae:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	bf00      	nop
 80089b4:	20014f64 	.word	0x20014f64
 80089b8:	20002a5c 	.word	0x20002a5c

080089bc <pvPortMalloc>:
{
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80089c0:	4f41      	ldr	r7, [pc, #260]	; (8008ac8 <pvPortMalloc+0x10c>)
{
 80089c2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80089c4:	f001 fa4c 	bl	8009e60 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80089c8:	4840      	ldr	r0, [pc, #256]	; (8008acc <pvPortMalloc+0x110>)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	b9f3      	cbnz	r3, 8008a0c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80089ce:	4940      	ldr	r1, [pc, #256]	; (8008ad0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 80089d0:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089d2:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089d4:	4d3f      	ldr	r5, [pc, #252]	; (8008ad4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089d6:	bf1b      	ittet	ne
 80089d8:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089da:	4a3f      	ldrne	r2, [pc, #252]	; (8008ad8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089dc:	4a3f      	ldreq	r2, [pc, #252]	; (8008adc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089de:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 80089e2:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089e4:	bf18      	it	ne
 80089e6:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089e8:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089ea:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 80089ec:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089ee:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80089f2:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089f6:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80089f8:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089fa:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089fe:	4a38      	ldr	r2, [pc, #224]	; (8008ae0 <pvPortMalloc+0x124>)
 8008a00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a02:	4a38      	ldr	r2, [pc, #224]	; (8008ae4 <pvPortMalloc+0x128>)
 8008a04:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a0a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a0c:	f8d0 8000 	ldr.w	r8, [r0]
 8008a10:	ea18 0f04 	tst.w	r8, r4
 8008a14:	d152      	bne.n	8008abc <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d041      	beq.n	8008a9e <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8008a1a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a1e:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a20:	bf1c      	itt	ne
 8008a22:	f023 0307 	bicne.w	r3, r3, #7
 8008a26:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d047      	beq.n	8008abc <pvPortMalloc+0x100>
 8008a2c:	4c2d      	ldr	r4, [pc, #180]	; (8008ae4 <pvPortMalloc+0x128>)
 8008a2e:	6826      	ldr	r6, [r4, #0]
 8008a30:	429e      	cmp	r6, r3
 8008a32:	d343      	bcc.n	8008abc <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8008a34:	4a27      	ldr	r2, [pc, #156]	; (8008ad4 <pvPortMalloc+0x118>)
 8008a36:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a38:	6869      	ldr	r1, [r5, #4]
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	d201      	bcs.n	8008a42 <pvPortMalloc+0x86>
 8008a3e:	6828      	ldr	r0, [r5, #0]
 8008a40:	b9b0      	cbnz	r0, 8008a70 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8008a42:	6838      	ldr	r0, [r7, #0]
 8008a44:	42a8      	cmp	r0, r5
 8008a46:	d039      	beq.n	8008abc <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a48:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a4a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a4c:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a4e:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a50:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a52:	d914      	bls.n	8008a7e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a54:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	0742      	lsls	r2, r0, #29
 8008a58:	d00d      	beq.n	8008a76 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	b672      	cpsid	i
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	b662      	cpsie	i
 8008a6e:	e7fe      	b.n	8008a6e <pvPortMalloc+0xb2>
 8008a70:	462a      	mov	r2, r5
 8008a72:	4605      	mov	r5, r0
 8008a74:	e7e0      	b.n	8008a38 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a76:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a78:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a7a:	f7ff ff7b 	bl	8008974 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a7e:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a80:	4917      	ldr	r1, [pc, #92]	; (8008ae0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a82:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a84:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a88:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a8a:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a8c:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a90:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a92:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a94:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a98:	bf38      	it	cc
 8008a9a:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008a9e:	f001 fa85 	bl	8009fac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa2:	0763      	lsls	r3, r4, #29
 8008aa4:	d00c      	beq.n	8008ac0 <pvPortMalloc+0x104>
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	b672      	cpsid	i
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	b662      	cpsie	i
 8008aba:	e7fe      	b.n	8008aba <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8008abc:	2400      	movs	r4, #0
 8008abe:	e7ee      	b.n	8008a9e <pvPortMalloc+0xe2>
}
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20002a5c 	.word	0x20002a5c
 8008acc:	20014f58 	.word	0x20014f58
 8008ad0:	20002a60 	.word	0x20002a60
 8008ad4:	20014f64 	.word	0x20014f64
 8008ad8:	20014f58 	.word	0x20014f58
 8008adc:	000124f8 	.word	0x000124f8
 8008ae0:	20014f60 	.word	0x20014f60
 8008ae4:	20014f5c 	.word	0x20014f5c

08008ae8 <vPortFree>:
{
 8008ae8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008aea:	4604      	mov	r4, r0
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d032      	beq.n	8008b56 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af0:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <vPortFree+0x70>)
 8008af2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	4213      	tst	r3, r2
 8008afa:	d10a      	bne.n	8008b12 <vPortFree+0x2a>
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	b672      	cpsid	i
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	b662      	cpsie	i
 8008b10:	e7fe      	b.n	8008b10 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b12:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008b16:	b151      	cbz	r1, 8008b2e <vPortFree+0x46>
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	b672      	cpsid	i
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	b662      	cpsie	i
 8008b2c:	e7fe      	b.n	8008b2c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b2e:	ea23 0302 	bic.w	r3, r3, r2
 8008b32:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008b36:	f001 f993 	bl	8009e60 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b3a:	4a08      	ldr	r2, [pc, #32]	; (8008b5c <vPortFree+0x74>)
 8008b3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b40:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b44:	6811      	ldr	r1, [r2, #0]
 8008b46:	440b      	add	r3, r1
 8008b48:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b4a:	f7ff ff13 	bl	8008974 <prvInsertBlockIntoFreeList>
}
 8008b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008b52:	f001 ba2b 	b.w	8009fac <xTaskResumeAll>
}
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	20014f58 	.word	0x20014f58
 8008b5c:	20014f5c 	.word	0x20014f5c

08008b60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b60:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b64:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b68:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b6a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b6c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b74:	4770      	bx	lr

08008b76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b7a:	4770      	bx	lr

08008b7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b7c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b7e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008b80:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008b8a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008b8c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6003      	str	r3, [r0, #0]
}
 8008b92:	4770      	bx	lr

08008b94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b94:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b96:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b98:	1c63      	adds	r3, r4, #1
 8008b9a:	d10a      	bne.n	8008bb2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b9c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ba2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ba4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ba6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008ba8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008baa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008bac:	3301      	adds	r3, #1
 8008bae:	6003      	str	r3, [r0, #0]
}
 8008bb0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bb2:	f100 0208 	add.w	r2, r0, #8
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	6852      	ldr	r2, [r2, #4]
 8008bba:	6815      	ldr	r5, [r2, #0]
 8008bbc:	42a5      	cmp	r5, r4
 8008bbe:	d9fa      	bls.n	8008bb6 <vListInsert+0x22>
 8008bc0:	e7ed      	b.n	8008b9e <vListInsert+0xa>

08008bc2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bc2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bc4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008bc8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bcc:	6859      	ldr	r1, [r3, #4]
 8008bce:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bd0:	bf08      	it	eq
 8008bd2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	3a01      	subs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bde:	6818      	ldr	r0, [r3, #0]
}
 8008be0:	4770      	bx	lr
	...

08008be4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008be4:	4808      	ldr	r0, [pc, #32]	; (8008c08 <prvPortStartFirstTask+0x24>)
 8008be6:	6800      	ldr	r0, [r0, #0]
 8008be8:	6800      	ldr	r0, [r0, #0]
 8008bea:	f380 8808 	msr	MSP, r0
 8008bee:	f04f 0000 	mov.w	r0, #0
 8008bf2:	f380 8814 	msr	CONTROL, r0
 8008bf6:	b662      	cpsie	i
 8008bf8:	b661      	cpsie	f
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	df00      	svc	0
 8008c04:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c06:	0000      	.short	0x0000
 8008c08:	e000ed08 	.word	0xe000ed08

08008c0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c0c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c1c <vPortEnableVFP+0x10>
 8008c10:	6801      	ldr	r1, [r0, #0]
 8008c12:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c16:	6001      	str	r1, [r0, #0]
 8008c18:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c1a:	0000      	.short	0x0000
 8008c1c:	e000ed88 	.word	0xe000ed88

08008c20 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8008c20:	2300      	movs	r3, #0
{
 8008c22:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008c24:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008c26:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <prvTaskExitError+0x44>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	d00a      	beq.n	8008c44 <prvTaskExitError+0x24>
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	b672      	cpsid	i
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	b662      	cpsie	i
 8008c42:	e7fe      	b.n	8008c42 <prvTaskExitError+0x22>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
	while( ulDummy == 0 )
 8008c58:	9b01      	ldr	r3, [sp, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0fc      	beq.n	8008c58 <prvTaskExitError+0x38>
}
 8008c5e:	b002      	add	sp, #8
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000040 	.word	0x20000040

08008c68 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c6c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c70:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008c74:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c76:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c78:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c7a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c7c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c7e:	f06f 0302 	mvn.w	r3, #2
 8008c82:	6203      	str	r3, [r0, #32]
}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	00000000 	.word	0x00000000

08008c90 <SVC_Handler>:
	__asm volatile (
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <pxCurrentTCBConst2>)
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	6808      	ldr	r0, [r1, #0]
 8008c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	f380 8809 	msr	PSP, r0
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8811 	msr	BASEPRI, r0
 8008caa:	4770      	bx	lr
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst2>:
 8008cb0:	20014fb4 	.word	0x20014fb4

08008cb4 <vPortEnterCritical>:
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	b672      	cpsid	i
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	b662      	cpsie	i
	uxCriticalNesting++;
 8008cc8:	4a0b      	ldr	r2, [pc, #44]	; (8008cf8 <vPortEnterCritical+0x44>)
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008cce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008cd2:	d110      	bne.n	8008cf6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cd8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	b153      	cbz	r3, 8008cf6 <vPortEnterCritical+0x42>
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	b672      	cpsid	i
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	b662      	cpsie	i
 8008cf4:	e7fe      	b.n	8008cf4 <vPortEnterCritical+0x40>
}
 8008cf6:	4770      	bx	lr
 8008cf8:	20000040 	.word	0x20000040

08008cfc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vPortExitCritical+0x28>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	b953      	cbnz	r3, 8008d18 <vPortExitCritical+0x1c>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	e7fe      	b.n	8008d16 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d1c:	b90b      	cbnz	r3, 8008d22 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d1e:	f383 8811 	msr	BASEPRI, r3
}
 8008d22:	4770      	bx	lr
 8008d24:	20000040 	.word	0x20000040
	...

08008d30 <PendSV_Handler>:
	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f380 8811 	msr	BASEPRI, r0
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	b662      	cpsie	i
 8008d64:	f001 fa32 	bl	800a1cc <vTaskSwitchContext>
 8008d68:	f04f 0000 	mov.w	r0, #0
 8008d6c:	f380 8811 	msr	BASEPRI, r0
 8008d70:	bc09      	pop	{r0, r3}
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f01e 0f10 	tst.w	lr, #16
 8008d7e:	bf08      	it	eq
 8008d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d84:	f380 8809 	msr	PSP, r0
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <pxCurrentTCBConst>:
 8008d90:	20014fb4 	.word	0x20014fb4

08008d94 <SysTick_Handler>:
{
 8008d94:	b508      	push	{r3, lr}
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	b672      	cpsid	i
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8008daa:	f001 f867 	bl	8009e7c <xTaskIncrementTick>
 8008dae:	b128      	cbz	r0, 8008dbc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f383 8811 	msr	BASEPRI, r3
}
 8008dc2:	bd08      	pop	{r3, pc}

08008dc4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dc4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008dc8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dce:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dd0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dd2:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <vPortSetupTimerInterrupt+0x20>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dde:	2307      	movs	r3, #7
 8008de0:	6113      	str	r3, [r2, #16]
}
 8008de2:	4770      	bx	lr
 8008de4:	2000000c 	.word	0x2000000c

08008de8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008de8:	4b2e      	ldr	r3, [pc, #184]	; (8008ea4 <xPortStartScheduler+0xbc>)
{
 8008dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dec:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dfa:	4a2b      	ldr	r2, [pc, #172]	; (8008ea8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0c:	2307      	movs	r3, #7
 8008e0e:	4a27      	ldr	r2, [pc, #156]	; (8008eac <xPortStartScheduler+0xc4>)
 8008e10:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008e16:	1e5c      	subs	r4, r3, #1
 8008e18:	0600      	lsls	r0, r0, #24
 8008e1a:	d40e      	bmi.n	8008e3a <xPortStartScheduler+0x52>
 8008e1c:	b111      	cbz	r1, 8008e24 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	d013      	beq.n	8008e4c <xPortStartScheduler+0x64>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	e7fe      	b.n	8008e38 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e3e:	2101      	movs	r1, #1
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f88d 3003 	strb.w	r3, [sp, #3]
 8008e48:	4623      	mov	r3, r4
 8008e4a:	e7e2      	b.n	8008e12 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e50:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8008e54:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e56:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <xPortStartScheduler+0xbc>)
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e6c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008e70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e74:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008e78:	f7ff ffa4 	bl	8008dc4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <xPortStartScheduler+0xc8>)
 8008e7e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008e80:	f7ff fec4 	bl	8008c0c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e84:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008e88:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e8c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008e90:	f7ff fea8 	bl	8008be4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008e94:	f001 f99a 	bl	800a1cc <vTaskSwitchContext>
}
 8008e98:	4628      	mov	r0, r5
	prvTaskExitError();
 8008e9a:	f7ff fec1 	bl	8008c20 <prvTaskExitError>
}
 8008e9e:	b003      	add	sp, #12
 8008ea0:	bd30      	pop	{r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	e000e400 	.word	0xe000e400
 8008ea8:	20014f6c 	.word	0x20014f6c
 8008eac:	20014f70 	.word	0x20014f70
 8008eb0:	20000040 	.word	0x20000040

08008eb4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008eb4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008eb8:	2b0f      	cmp	r3, #15
 8008eba:	d910      	bls.n	8008ede <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ebc:	4a13      	ldr	r2, [pc, #76]	; (8008f0c <vPortValidateInterruptPriority+0x58>)
 8008ebe:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ec0:	4a13      	ldr	r2, [pc, #76]	; (8008f10 <vPortValidateInterruptPriority+0x5c>)
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d90a      	bls.n	8008ede <vPortValidateInterruptPriority+0x2a>
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	e7fe      	b.n	8008edc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ede:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ee2:	4a0c      	ldr	r2, [pc, #48]	; (8008f14 <vPortValidateInterruptPriority+0x60>)
 8008ee4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008ee8:	6812      	ldr	r2, [r2, #0]
 8008eea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d90a      	bls.n	8008f08 <vPortValidateInterruptPriority+0x54>
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	b672      	cpsid	i
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	b662      	cpsie	i
 8008f06:	e7fe      	b.n	8008f06 <vPortValidateInterruptPriority+0x52>
	}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	e000e3f0 	.word	0xe000e3f0
 8008f10:	20014f6c 	.word	0x20014f6c
 8008f14:	20014f70 	.word	0x20014f70

08008f18 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f1c:	f7ff feca 	bl	8008cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008f22:	f7ff feeb 	bl	8008cfc <vPortExitCritical>

	return xReturn;
}
 8008f26:	fab4 f084 	clz	r0, r4
 8008f2a:	0940      	lsrs	r0, r0, #5
 8008f2c:	bd10      	pop	{r4, pc}

08008f2e <prvCopyDataToQueue>:
{
 8008f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f30:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f32:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8008f34:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f36:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f38:	b952      	cbnz	r2, 8008f50 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f3a:	6807      	ldr	r7, [r0, #0]
 8008f3c:	bb47      	cbnz	r7, 8008f90 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f3e:	6880      	ldr	r0, [r0, #8]
 8008f40:	f001 fab8 	bl	800a4b4 <xTaskPriorityDisinherit>
 8008f44:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f46:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f48:	3601      	adds	r6, #1
}
 8008f4a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f4c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008f50:	b965      	cbnz	r5, 8008f6c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f52:	6840      	ldr	r0, [r0, #4]
 8008f54:	f021 fddc 	bl	802ab10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f58:	6863      	ldr	r3, [r4, #4]
 8008f5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f5c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f5e:	68a2      	ldr	r2, [r4, #8]
 8008f60:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f62:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f64:	d3f0      	bcc.n	8008f48 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	e7ed      	b.n	8008f48 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f6c:	68c0      	ldr	r0, [r0, #12]
 8008f6e:	f021 fdcf 	bl	802ab10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f74:	68e3      	ldr	r3, [r4, #12]
 8008f76:	4251      	negs	r1, r2
 8008f78:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f7e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f80:	bf3e      	ittt	cc
 8008f82:	68a3      	ldrcc	r3, [r4, #8]
 8008f84:	185b      	addcc	r3, r3, r1
 8008f86:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008f88:	2d02      	cmp	r5, #2
 8008f8a:	d101      	bne.n	8008f90 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f8c:	b116      	cbz	r6, 8008f94 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8008f8e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008f90:	2500      	movs	r5, #0
 8008f92:	e7d9      	b.n	8008f48 <prvCopyDataToQueue+0x1a>
 8008f94:	4635      	mov	r5, r6
 8008f96:	e7d7      	b.n	8008f48 <prvCopyDataToQueue+0x1a>

08008f98 <prvCopyDataFromQueue>:
{
 8008f98:	4603      	mov	r3, r0
 8008f9a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008f9e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fa0:	b162      	cbz	r2, 8008fbc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008faa:	60dc      	str	r4, [r3, #12]
}
 8008fac:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb0:	bf24      	itt	cs
 8008fb2:	6819      	ldrcs	r1, [r3, #0]
 8008fb4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	f021 bdaa 	b.w	802ab10 <memcpy>
}
 8008fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <prvUnlockQueue>:
{
 8008fc2:	b570      	push	{r4, r5, r6, lr}
 8008fc4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008fc6:	f7ff fe75 	bl	8008cb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008fca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008fd2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	dc14      	bgt.n	8009002 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008fd8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fda:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008fe2:	f7ff fe8b 	bl	8008cfc <vPortExitCritical>
	taskENTER_CRITICAL();
 8008fe6:	f7ff fe65 	bl	8008cb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008fea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008fee:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	dc12      	bgt.n	800901a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008ff4:	23ff      	movs	r3, #255	; 0xff
 8008ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008ffe:	f7ff be7d 	b.w	8008cfc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0e7      	beq.n	8008fd8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009008:	4630      	mov	r0, r6
 800900a:	f001 f965 	bl	800a2d8 <xTaskRemoveFromEventList>
 800900e:	b108      	cbz	r0, 8009014 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009010:	f001 f9f4 	bl	800a3fc <vTaskMissedYield>
			--cTxLock;
 8009014:	3d01      	subs	r5, #1
 8009016:	b26d      	sxtb	r5, r5
 8009018:	e7dc      	b.n	8008fd4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0e9      	beq.n	8008ff4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009020:	4630      	mov	r0, r6
 8009022:	f001 f959 	bl	800a2d8 <xTaskRemoveFromEventList>
 8009026:	b108      	cbz	r0, 800902c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009028:	f001 f9e8 	bl	800a3fc <vTaskMissedYield>
				--cRxLock;
 800902c:	3d01      	subs	r5, #1
 800902e:	b26d      	sxtb	r5, r5
 8009030:	e7de      	b.n	8008ff0 <prvUnlockQueue+0x2e>

08009032 <xQueueGenericReset>:
{
 8009032:	b538      	push	{r3, r4, r5, lr}
 8009034:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009036:	4604      	mov	r4, r0
 8009038:	b950      	cbnz	r0, 8009050 <xQueueGenericReset+0x1e>
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	b672      	cpsid	i
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	b662      	cpsie	i
 800904e:	e7fe      	b.n	800904e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8009050:	f7ff fe30 	bl	8008cb4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009054:	6822      	ldr	r2, [r4, #0]
 8009056:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800905a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905c:	434b      	muls	r3, r1
 800905e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009060:	1a5b      	subs	r3, r3, r1
 8009062:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009064:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009066:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009068:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800906a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800906c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800906e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009076:	b9a5      	cbnz	r5, 80090a2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b173      	cbz	r3, 800909a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907c:	f104 0010 	add.w	r0, r4, #16
 8009080:	f001 f92a 	bl	800a2d8 <xTaskRemoveFromEventList>
 8009084:	b148      	cbz	r0, 800909a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8009086:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800909a:	f7ff fe2f 	bl	8008cfc <vPortExitCritical>
}
 800909e:	2001      	movs	r0, #1
 80090a0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090a2:	f104 0010 	add.w	r0, r4, #16
 80090a6:	f7ff fd5b 	bl	8008b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090ae:	f7ff fd57 	bl	8008b60 <vListInitialise>
 80090b2:	e7f2      	b.n	800909a <xQueueGenericReset+0x68>

080090b4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 80090b4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 80090b6:	461c      	mov	r4, r3
 80090b8:	b953      	cbnz	r3, 80090d0 <xQueueGenericCreateStatic.part.0+0x1c>
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	b672      	cpsid	i
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	b662      	cpsie	i
 80090ce:	e7fe      	b.n	80090ce <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090d0:	b15a      	cbz	r2, 80090ea <xQueueGenericCreateStatic.part.0+0x36>
 80090d2:	b9b1      	cbnz	r1, 8009102 <xQueueGenericCreateStatic.part.0+0x4e>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	b672      	cpsid	i
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	b662      	cpsie	i
 80090e8:	e7fe      	b.n	80090e8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090ea:	b151      	cbz	r1, 8009102 <xQueueGenericCreateStatic.part.0+0x4e>
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	b672      	cpsid	i
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	b662      	cpsie	i
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009102:	2350      	movs	r3, #80	; 0x50
 8009104:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	2b50      	cmp	r3, #80	; 0x50
 800910a:	d00a      	beq.n	8009122 <xQueueGenericCreateStatic.part.0+0x6e>
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	b672      	cpsid	i
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	b662      	cpsie	i
 8009120:	e7fe      	b.n	8009120 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009122:	2900      	cmp	r1, #0
 8009124:	bf08      	it	eq
 8009126:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009128:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800912a:	2301      	movs	r3, #1
 800912c:	6022      	str	r2, [r4, #0]
 800912e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009132:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009136:	4619      	mov	r1, r3
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff ff7a 	bl	8009032 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800913e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8009142:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009144:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8009148:	b002      	add	sp, #8
 800914a:	bd10      	pop	{r4, pc}

0800914c <xQueueGenericCreateStatic>:
	{
 800914c:	b410      	push	{r4}
 800914e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009152:	b950      	cbnz	r0, 800916a <xQueueGenericCreateStatic+0x1e>
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	b672      	cpsid	i
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	b662      	cpsie	i
 8009168:	e7fe      	b.n	8009168 <xQueueGenericCreateStatic+0x1c>
 800916a:	9401      	str	r4, [sp, #4]
	}
 800916c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009170:	f7ff bfa0 	b.w	80090b4 <xQueueGenericCreateStatic.part.0>

08009174 <xQueueGenericCreate>:
	{
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	460d      	mov	r5, r1
 8009178:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800917a:	4606      	mov	r6, r0
 800917c:	b950      	cbnz	r0, 8009194 <xQueueGenericCreate+0x20>
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	b672      	cpsid	i
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	b662      	cpsie	i
 8009192:	e7fe      	b.n	8009192 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009194:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009196:	3050      	adds	r0, #80	; 0x50
 8009198:	f7ff fc10 	bl	80089bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800919c:	4604      	mov	r4, r0
 800919e:	b170      	cbz	r0, 80091be <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091a6:	b165      	cbz	r5, 80091c2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091a8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091ac:	2101      	movs	r1, #1
 80091ae:	4620      	mov	r0, r4
 80091b0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80091b2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091b6:	f7ff ff3c 	bl	8009032 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80091ba:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80091be:	4620      	mov	r0, r4
 80091c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c2:	4603      	mov	r3, r0
 80091c4:	e7f2      	b.n	80091ac <xQueueGenericCreate+0x38>

080091c6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80091c6:	b513      	push	{r0, r1, r4, lr}
 80091c8:	4613      	mov	r3, r2
 80091ca:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80091cc:	b950      	cbnz	r0, 80091e4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	b672      	cpsid	i
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	b662      	cpsie	i
 80091e2:	e7fe      	b.n	80091e2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091e4:	4288      	cmp	r0, r1
 80091e6:	d20a      	bcs.n	80091fe <xQueueCreateCountingSemaphoreStatic+0x38>
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	b672      	cpsid	i
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	b662      	cpsie	i
 80091fc:	e7fe      	b.n	80091fc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091fe:	2202      	movs	r2, #2
 8009200:	9200      	str	r2, [sp, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	4611      	mov	r1, r2
 8009206:	f7ff ffa1 	bl	800914c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800920a:	b100      	cbz	r0, 800920e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800920c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800920e:	b002      	add	sp, #8
 8009210:	bd10      	pop	{r4, pc}

08009212 <xQueueCreateCountingSemaphore>:
	{
 8009212:	b510      	push	{r4, lr}
 8009214:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009216:	b950      	cbnz	r0, 800922e <xQueueCreateCountingSemaphore+0x1c>
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	b672      	cpsid	i
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	b662      	cpsie	i
 800922c:	e7fe      	b.n	800922c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800922e:	4288      	cmp	r0, r1
 8009230:	d20a      	bcs.n	8009248 <xQueueCreateCountingSemaphore+0x36>
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	b672      	cpsid	i
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	b662      	cpsie	i
 8009246:	e7fe      	b.n	8009246 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009248:	2202      	movs	r2, #2
 800924a:	2100      	movs	r1, #0
 800924c:	f7ff ff92 	bl	8009174 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009250:	b100      	cbz	r0, 8009254 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009252:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009254:	bd10      	pop	{r4, pc}

08009256 <xQueueGenericSend>:
{
 8009256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800925a:	b085      	sub	sp, #20
 800925c:	4688      	mov	r8, r1
 800925e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009260:	4604      	mov	r4, r0
{
 8009262:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009264:	b950      	cbnz	r0, 800927c <xQueueGenericSend+0x26>
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	e7fe      	b.n	800927a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800927c:	b961      	cbnz	r1, 8009298 <xQueueGenericSend+0x42>
 800927e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009280:	b153      	cbz	r3, 8009298 <xQueueGenericSend+0x42>
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	e7fe      	b.n	8009296 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009298:	2f02      	cmp	r7, #2
 800929a:	d10d      	bne.n	80092b8 <xQueueGenericSend+0x62>
 800929c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d00a      	beq.n	80092b8 <xQueueGenericSend+0x62>
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	b672      	cpsid	i
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	b662      	cpsie	i
 80092b6:	e7fe      	b.n	80092b6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b8:	f001 f8ac 	bl	800a414 <xTaskGetSchedulerState>
 80092bc:	4606      	mov	r6, r0
 80092be:	b960      	cbnz	r0, 80092da <xQueueGenericSend+0x84>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	b15b      	cbz	r3, 80092dc <xQueueGenericSend+0x86>
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	b672      	cpsid	i
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	b662      	cpsie	i
 80092d8:	e7fe      	b.n	80092d8 <xQueueGenericSend+0x82>
 80092da:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80092dc:	f04f 0900 	mov.w	r9, #0
 80092e0:	e037      	b.n	8009352 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80092e2:	9d01      	ldr	r5, [sp, #4]
 80092e4:	b91d      	cbnz	r5, 80092ee <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80092e6:	f7ff fd09 	bl	8008cfc <vPortExitCritical>
			return errQUEUE_FULL;
 80092ea:	2000      	movs	r0, #0
 80092ec:	e052      	b.n	8009394 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80092ee:	b916      	cbnz	r6, 80092f6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092f0:	a802      	add	r0, sp, #8
 80092f2:	f001 f837 	bl	800a364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80092f6:	f7ff fd01 	bl	8008cfc <vPortExitCritical>
		vTaskSuspendAll();
 80092fa:	f000 fdb1 	bl	8009e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092fe:	f7ff fcd9 	bl	8008cb4 <vPortEnterCritical>
 8009302:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009306:	2bff      	cmp	r3, #255	; 0xff
 8009308:	d101      	bne.n	800930e <xQueueGenericSend+0xb8>
 800930a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800930e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009312:	2bff      	cmp	r3, #255	; 0xff
 8009314:	d101      	bne.n	800931a <xQueueGenericSend+0xc4>
 8009316:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800931a:	f7ff fcef 	bl	8008cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800931e:	a901      	add	r1, sp, #4
 8009320:	a802      	add	r0, sp, #8
 8009322:	f001 f82b 	bl	800a37c <xTaskCheckForTimeOut>
 8009326:	2800      	cmp	r0, #0
 8009328:	d14a      	bne.n	80093c0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800932a:	f7ff fcc3 	bl	8008cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800932e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009332:	429a      	cmp	r2, r3
 8009334:	d131      	bne.n	800939a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009336:	f7ff fce1 	bl	8008cfc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800933a:	9901      	ldr	r1, [sp, #4]
 800933c:	f104 0010 	add.w	r0, r4, #16
 8009340:	f000 ff8e 	bl	800a260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009344:	4620      	mov	r0, r4
 8009346:	f7ff fe3c 	bl	8008fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800934a:	f000 fe2f 	bl	8009fac <xTaskResumeAll>
 800934e:	b360      	cbz	r0, 80093aa <xQueueGenericSend+0x154>
 8009350:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009352:	f7ff fcaf 	bl	8008cb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009356:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800935a:	429a      	cmp	r2, r3
 800935c:	d301      	bcc.n	8009362 <xQueueGenericSend+0x10c>
 800935e:	2f02      	cmp	r7, #2
 8009360:	d1bf      	bne.n	80092e2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009362:	463a      	mov	r2, r7
 8009364:	4641      	mov	r1, r8
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff fde1 	bl	8008f2e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800936c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800936e:	b11b      	cbz	r3, 8009378 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009370:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009374:	f000 ffb0 	bl	800a2d8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009378:	b148      	cbz	r0, 800938e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800937a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800937e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009382:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800938e:	f7ff fcb5 	bl	8008cfc <vPortExitCritical>
				return pdPASS;
 8009392:	2001      	movs	r0, #1
}
 8009394:	b005      	add	sp, #20
 8009396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800939a:	f7ff fcaf 	bl	8008cfc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff fe0f 	bl	8008fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093a4:	f000 fe02 	bl	8009fac <xTaskResumeAll>
 80093a8:	e7d2      	b.n	8009350 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 80093aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	e7c7      	b.n	8009350 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff fdfe 	bl	8008fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093c6:	f000 fdf1 	bl	8009fac <xTaskResumeAll>
 80093ca:	e78e      	b.n	80092ea <xQueueGenericSend+0x94>

080093cc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093cc:	2200      	movs	r2, #0
	{
 80093ce:	460b      	mov	r3, r1
 80093d0:	b513      	push	{r0, r1, r4, lr}
 80093d2:	4611      	mov	r1, r2
 80093d4:	9000      	str	r0, [sp, #0]
 80093d6:	2001      	movs	r0, #1
 80093d8:	f7ff fe6c 	bl	80090b4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 80093dc:	4604      	mov	r4, r0
 80093de:	b138      	cbz	r0, 80093f0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093e0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093e2:	461a      	mov	r2, r3
 80093e4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093e6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80093e8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80093ea:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093ec:	f7ff ff33 	bl	8009256 <xQueueGenericSend>
	}
 80093f0:	4620      	mov	r0, r4
 80093f2:	b002      	add	sp, #8
 80093f4:	bd10      	pop	{r4, pc}

080093f6 <xQueueGiveMutexRecursive>:
	{
 80093f6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80093f8:	4604      	mov	r4, r0
 80093fa:	b950      	cbnz	r0, 8009412 <xQueueGiveMutexRecursive+0x1c>
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	e7fe      	b.n	8009410 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009412:	6885      	ldr	r5, [r0, #8]
 8009414:	f000 fff8 	bl	800a408 <xTaskGetCurrentTaskHandle>
 8009418:	4285      	cmp	r5, r0
 800941a:	d10a      	bne.n	8009432 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800941c:	68e3      	ldr	r3, [r4, #12]
 800941e:	3b01      	subs	r3, #1
 8009420:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009422:	b923      	cbnz	r3, 800942e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009424:	461a      	mov	r2, r3
 8009426:	4619      	mov	r1, r3
 8009428:	4620      	mov	r0, r4
 800942a:	f7ff ff14 	bl	8009256 <xQueueGenericSend>
			xReturn = pdPASS;
 800942e:	2001      	movs	r0, #1
		return xReturn;
 8009430:	e000      	b.n	8009434 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8009432:	2000      	movs	r0, #0
	}
 8009434:	bd38      	pop	{r3, r4, r5, pc}

08009436 <xQueueCreateMutex>:
	{
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800943a:	2050      	movs	r0, #80	; 0x50
 800943c:	f7ff fabe 	bl	80089bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009440:	4604      	mov	r4, r0
 8009442:	b198      	cbz	r0, 800946c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009444:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8009446:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009448:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800944a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800944e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009452:	f7ff fdee 	bl	8009032 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009456:	462b      	mov	r3, r5
 8009458:	462a      	mov	r2, r5
 800945a:	4629      	mov	r1, r5
 800945c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800945e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009462:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009464:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009466:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009468:	f7ff fef5 	bl	8009256 <xQueueGenericSend>
	}
 800946c:	4620      	mov	r0, r4
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <xQueueGenericSendFromISR>:
{
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	4689      	mov	r9, r1
 8009476:	4690      	mov	r8, r2
 8009478:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800947a:	4604      	mov	r4, r0
 800947c:	b950      	cbnz	r0, 8009494 <xQueueGenericSendFromISR+0x24>
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	b672      	cpsid	i
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	b662      	cpsie	i
 8009492:	e7fe      	b.n	8009492 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009494:	b961      	cbnz	r1, 80094b0 <xQueueGenericSendFromISR+0x40>
 8009496:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009498:	b153      	cbz	r3, 80094b0 <xQueueGenericSendFromISR+0x40>
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	b672      	cpsid	i
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	b662      	cpsie	i
 80094ae:	e7fe      	b.n	80094ae <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b0:	2f02      	cmp	r7, #2
 80094b2:	d10d      	bne.n	80094d0 <xQueueGenericSendFromISR+0x60>
 80094b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d00a      	beq.n	80094d0 <xQueueGenericSendFromISR+0x60>
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	e7fe      	b.n	80094ce <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094d0:	f7ff fcf0 	bl	8008eb4 <vPortValidateInterruptPriority>
	__asm volatile
 80094d4:	f3ef 8611 	mrs	r6, BASEPRI
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80094ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d301      	bcc.n	80094f8 <xQueueGenericSendFromISR+0x88>
 80094f4:	2f02      	cmp	r7, #2
 80094f6:	d122      	bne.n	800953e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094fc:	463a      	mov	r2, r7
 80094fe:	4649      	mov	r1, r9
 8009500:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009502:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009504:	f7ff fd13 	bl	8008f2e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009508:	1c6b      	adds	r3, r5, #1
 800950a:	d113      	bne.n	8009534 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800950c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950e:	b90b      	cbnz	r3, 8009514 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8009510:	2001      	movs	r0, #1
 8009512:	e00b      	b.n	800952c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009514:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009518:	f000 fede 	bl	800a2d8 <xTaskRemoveFromEventList>
 800951c:	2800      	cmp	r0, #0
 800951e:	d0f7      	beq.n	8009510 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8009520:	f1b8 0f00 	cmp.w	r8, #0
 8009524:	d0f4      	beq.n	8009510 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009526:	2001      	movs	r0, #1
 8009528:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800952c:	f386 8811 	msr	BASEPRI, r6
}
 8009530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009534:	3501      	adds	r5, #1
 8009536:	b26d      	sxtb	r5, r5
 8009538:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800953c:	e7e8      	b.n	8009510 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800953e:	2000      	movs	r0, #0
 8009540:	e7f4      	b.n	800952c <xQueueGenericSendFromISR+0xbc>

08009542 <xQueueGiveFromISR>:
{
 8009542:	b570      	push	{r4, r5, r6, lr}
 8009544:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009546:	4604      	mov	r4, r0
 8009548:	b950      	cbnz	r0, 8009560 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	b672      	cpsid	i
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	b662      	cpsie	i
 800955e:	e7fe      	b.n	800955e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009560:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009562:	b153      	cbz	r3, 800957a <xQueueGiveFromISR+0x38>
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	b672      	cpsid	i
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	b662      	cpsie	i
 8009578:	e7fe      	b.n	8009578 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800957a:	6803      	ldr	r3, [r0, #0]
 800957c:	b963      	cbnz	r3, 8009598 <xQueueGiveFromISR+0x56>
 800957e:	6883      	ldr	r3, [r0, #8]
 8009580:	b153      	cbz	r3, 8009598 <xQueueGiveFromISR+0x56>
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	b672      	cpsid	i
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	b662      	cpsie	i
 8009596:	e7fe      	b.n	8009596 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009598:	f7ff fc8c 	bl	8008eb4 <vPortValidateInterruptPriority>
	__asm volatile
 800959c:	f3ef 8611 	mrs	r6, BASEPRI
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	b672      	cpsid	i
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80095b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d91c      	bls.n	80095f6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80095bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095c0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80095c2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80095c4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095c6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80095c8:	d110      	bne.n	80095ec <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095cc:	b90b      	cbnz	r3, 80095d2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80095ce:	2001      	movs	r0, #1
 80095d0:	e009      	b.n	80095e6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095d6:	f000 fe7f 	bl	800a2d8 <xTaskRemoveFromEventList>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d0f7      	beq.n	80095ce <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80095de:	2d00      	cmp	r5, #0
 80095e0:	d0f5      	beq.n	80095ce <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095e2:	2001      	movs	r0, #1
 80095e4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80095e6:	f386 8811 	msr	BASEPRI, r6
}
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095ec:	3301      	adds	r3, #1
 80095ee:	b25b      	sxtb	r3, r3
 80095f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095f4:	e7eb      	b.n	80095ce <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80095f6:	2000      	movs	r0, #0
 80095f8:	e7f5      	b.n	80095e6 <xQueueGiveFromISR+0xa4>

080095fa <xQueueReceive>:
{
 80095fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80095fe:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8009600:	4604      	mov	r4, r0
{
 8009602:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009604:	b950      	cbnz	r0, 800961c <xQueueReceive+0x22>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	b672      	cpsid	i
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	b662      	cpsie	i
 800961a:	e7fe      	b.n	800961a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800961c:	b961      	cbnz	r1, 8009638 <xQueueReceive+0x3e>
 800961e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009620:	b153      	cbz	r3, 8009638 <xQueueReceive+0x3e>
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	b672      	cpsid	i
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	b662      	cpsie	i
 8009636:	e7fe      	b.n	8009636 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009638:	f000 feec 	bl	800a414 <xTaskGetSchedulerState>
 800963c:	4606      	mov	r6, r0
 800963e:	b960      	cbnz	r0, 800965a <xQueueReceive+0x60>
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	b15b      	cbz	r3, 800965c <xQueueReceive+0x62>
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	b672      	cpsid	i
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	b662      	cpsie	i
 8009658:	e7fe      	b.n	8009658 <xQueueReceive+0x5e>
 800965a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800965c:	f04f 0800 	mov.w	r8, #0
 8009660:	e03d      	b.n	80096de <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009662:	9d01      	ldr	r5, [sp, #4]
 8009664:	b91d      	cbnz	r5, 800966e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8009666:	f7ff fb49 	bl	8008cfc <vPortExitCritical>
				return errQUEUE_EMPTY;
 800966a:	2000      	movs	r0, #0
 800966c:	e056      	b.n	800971c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800966e:	b916      	cbnz	r6, 8009676 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009670:	a802      	add	r0, sp, #8
 8009672:	f000 fe77 	bl	800a364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009676:	f7ff fb41 	bl	8008cfc <vPortExitCritical>
		vTaskSuspendAll();
 800967a:	f000 fbf1 	bl	8009e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967e:	f7ff fb19 	bl	8008cb4 <vPortEnterCritical>
 8009682:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009686:	2bff      	cmp	r3, #255	; 0xff
 8009688:	d101      	bne.n	800968e <xQueueReceive+0x94>
 800968a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800968e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009692:	2bff      	cmp	r3, #255	; 0xff
 8009694:	d101      	bne.n	800969a <xQueueReceive+0xa0>
 8009696:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800969a:	f7ff fb2f 	bl	8008cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969e:	a901      	add	r1, sp, #4
 80096a0:	a802      	add	r0, sp, #8
 80096a2:	f000 fe6b 	bl	800a37c <xTaskCheckForTimeOut>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d141      	bne.n	800972e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096aa:	4620      	mov	r0, r4
 80096ac:	f7ff fc34 	bl	8008f18 <prvIsQueueEmpty>
 80096b0:	b3b8      	cbz	r0, 8009722 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096b2:	9901      	ldr	r1, [sp, #4]
 80096b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096b8:	f000 fdd2 	bl	800a260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096bc:	4620      	mov	r0, r4
 80096be:	f7ff fc80 	bl	8008fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096c2:	f000 fc73 	bl	8009fac <xTaskResumeAll>
 80096c6:	b948      	cbnz	r0, 80096dc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80096c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80096de:	f7ff fae9 	bl	8008cb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	d0bc      	beq.n	8009662 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096e8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096ea:	4639      	mov	r1, r7
 80096ec:	4620      	mov	r0, r4
 80096ee:	f7ff fc53 	bl	8008f98 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096f2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	b173      	cbz	r3, 8009716 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f8:	f104 0010 	add.w	r0, r4, #16
 80096fc:	f000 fdec 	bl	800a2d8 <xTaskRemoveFromEventList>
 8009700:	b148      	cbz	r0, 8009716 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8009702:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009716:	f7ff faf1 	bl	8008cfc <vPortExitCritical>
				return pdPASS;
 800971a:	2001      	movs	r0, #1
}
 800971c:	b004      	add	sp, #16
 800971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8009722:	4620      	mov	r0, r4
 8009724:	f7ff fc4d 	bl	8008fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009728:	f000 fc40 	bl	8009fac <xTaskResumeAll>
 800972c:	e7d6      	b.n	80096dc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff fc47 	bl	8008fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009734:	f000 fc3a 	bl	8009fac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009738:	4620      	mov	r0, r4
 800973a:	f7ff fbed 	bl	8008f18 <prvIsQueueEmpty>
 800973e:	2800      	cmp	r0, #0
 8009740:	d0cc      	beq.n	80096dc <xQueueReceive+0xe2>
 8009742:	e792      	b.n	800966a <xQueueReceive+0x70>

08009744 <xQueueSemaphoreTake>:
{
 8009744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009746:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8009748:	4604      	mov	r4, r0
{
 800974a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800974c:	b950      	cbnz	r0, 8009764 <xQueueSemaphoreTake+0x20>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	e7fe      	b.n	8009762 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009764:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8009766:	b155      	cbz	r5, 800977e <xQueueSemaphoreTake+0x3a>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	b672      	cpsid	i
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	b662      	cpsie	i
 800977c:	e7fe      	b.n	800977c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800977e:	f000 fe49 	bl	800a414 <xTaskGetSchedulerState>
 8009782:	4606      	mov	r6, r0
 8009784:	b960      	cbnz	r0, 80097a0 <xQueueSemaphoreTake+0x5c>
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	b16b      	cbz	r3, 80097a6 <xQueueSemaphoreTake+0x62>
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	b672      	cpsid	i
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	b662      	cpsie	i
 800979e:	e7fe      	b.n	800979e <xQueueSemaphoreTake+0x5a>
 80097a0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80097a2:	2700      	movs	r7, #0
 80097a4:	e055      	b.n	8009852 <xQueueSemaphoreTake+0x10e>
 80097a6:	4605      	mov	r5, r0
 80097a8:	e7fb      	b.n	80097a2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	b973      	cbnz	r3, 80097cc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097ae:	b155      	cbz	r5, 80097c6 <xQueueSemaphoreTake+0x82>
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	b672      	cpsid	i
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	b662      	cpsie	i
 80097c4:	e7fe      	b.n	80097c4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80097c6:	f7ff fa99 	bl	8008cfc <vPortExitCritical>
					return errQUEUE_EMPTY;
 80097ca:	e062      	b.n	8009892 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80097cc:	b916      	cbnz	r6, 80097d4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ce:	a802      	add	r0, sp, #8
 80097d0:	f000 fdc8 	bl	800a364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80097d4:	f7ff fa92 	bl	8008cfc <vPortExitCritical>
		vTaskSuspendAll();
 80097d8:	f000 fb42 	bl	8009e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097dc:	f7ff fa6a 	bl	8008cb4 <vPortEnterCritical>
 80097e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80097e4:	2bff      	cmp	r3, #255	; 0xff
 80097e6:	d101      	bne.n	80097ec <xQueueSemaphoreTake+0xa8>
 80097e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80097ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80097f0:	2bff      	cmp	r3, #255	; 0xff
 80097f2:	d101      	bne.n	80097f8 <xQueueSemaphoreTake+0xb4>
 80097f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097f8:	f7ff fa80 	bl	8008cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097fc:	a901      	add	r1, sp, #4
 80097fe:	a802      	add	r0, sp, #8
 8009800:	f000 fdbc 	bl	800a37c <xTaskCheckForTimeOut>
 8009804:	2800      	cmp	r0, #0
 8009806:	d14d      	bne.n	80098a4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009808:	4620      	mov	r0, r4
 800980a:	f7ff fb85 	bl	8008f18 <prvIsQueueEmpty>
 800980e:	2800      	cmp	r0, #0
 8009810:	d042      	beq.n	8009898 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	b93b      	cbnz	r3, 8009826 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8009816:	f7ff fa4d 	bl	8008cb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800981a:	68a0      	ldr	r0, [r4, #8]
 800981c:	f000 fe0a 	bl	800a434 <xTaskPriorityInherit>
 8009820:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009822:	f7ff fa6b 	bl	8008cfc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009826:	9901      	ldr	r1, [sp, #4]
 8009828:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800982c:	f000 fd18 	bl	800a260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009830:	4620      	mov	r0, r4
 8009832:	f7ff fbc6 	bl	8008fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009836:	f000 fbb9 	bl	8009fac <xTaskResumeAll>
 800983a:	b948      	cbnz	r0, 8009850 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800983c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009844:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009852:	f7ff fa2f 	bl	8008cb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0a6      	beq.n	80097aa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800985c:	3b01      	subs	r3, #1
 800985e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	b913      	cbnz	r3, 800986a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009864:	f000 fec4 	bl	800a5f0 <pvTaskIncrementMutexHeldCount>
 8009868:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	b173      	cbz	r3, 800988c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800986e:	f104 0010 	add.w	r0, r4, #16
 8009872:	f000 fd31 	bl	800a2d8 <xTaskRemoveFromEventList>
 8009876:	b148      	cbz	r0, 800988c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8009878:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800987c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009880:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800988c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800988e:	f7ff fa35 	bl	8008cfc <vPortExitCritical>
}
 8009892:	4628      	mov	r0, r5
 8009894:	b005      	add	sp, #20
 8009896:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8009898:	4620      	mov	r0, r4
 800989a:	f7ff fb92 	bl	8008fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800989e:	f000 fb85 	bl	8009fac <xTaskResumeAll>
 80098a2:	e7d5      	b.n	8009850 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7ff fb8c 	bl	8008fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098aa:	f000 fb7f 	bl	8009fac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff fb32 	bl	8008f18 <prvIsQueueEmpty>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0cb      	beq.n	8009850 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	d0ea      	beq.n	8009892 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 80098bc:	f7ff f9fa 	bl	8008cb4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80098c2:	b119      	cbz	r1, 80098cc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098c6:	6819      	ldr	r1, [r3, #0]
 80098c8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80098cc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80098ce:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80098d0:	f000 fe38 	bl	800a544 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80098d4:	f7ff fa12 	bl	8008cfc <vPortExitCritical>
 80098d8:	e7db      	b.n	8009892 <xQueueSemaphoreTake+0x14e>

080098da <xQueueTakeMutexRecursive>:
	{
 80098da:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 80098dc:	4604      	mov	r4, r0
 80098de:	b950      	cbnz	r0, 80098f6 <xQueueTakeMutexRecursive+0x1c>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	b672      	cpsid	i
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	b662      	cpsie	i
 80098f4:	e7fe      	b.n	80098f4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098f6:	6885      	ldr	r5, [r0, #8]
 80098f8:	9101      	str	r1, [sp, #4]
 80098fa:	f000 fd85 	bl	800a408 <xTaskGetCurrentTaskHandle>
 80098fe:	4285      	cmp	r5, r0
 8009900:	9901      	ldr	r1, [sp, #4]
 8009902:	d105      	bne.n	8009910 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009904:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8009906:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009908:	3301      	adds	r3, #1
 800990a:	60e3      	str	r3, [r4, #12]
	}
 800990c:	b003      	add	sp, #12
 800990e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff ff17 	bl	8009744 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8009916:	2800      	cmp	r0, #0
 8009918:	d0f8      	beq.n	800990c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8009920:	e7f4      	b.n	800990c <xQueueTakeMutexRecursive+0x32>

08009922 <xQueueReceiveFromISR>:
{
 8009922:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009926:	4689      	mov	r9, r1
 8009928:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800992a:	4605      	mov	r5, r0
 800992c:	b950      	cbnz	r0, 8009944 <xQueueReceiveFromISR+0x22>
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	b672      	cpsid	i
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	b662      	cpsie	i
 8009942:	e7fe      	b.n	8009942 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009944:	b961      	cbnz	r1, 8009960 <xQueueReceiveFromISR+0x3e>
 8009946:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009948:	b153      	cbz	r3, 8009960 <xQueueReceiveFromISR+0x3e>
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	b672      	cpsid	i
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	b662      	cpsie	i
 800995e:	e7fe      	b.n	800995e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009960:	f7ff faa8 	bl	8008eb4 <vPortValidateInterruptPriority>
	__asm volatile
 8009964:	f3ef 8711 	mrs	r7, BASEPRI
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	b672      	cpsid	i
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800997c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800997e:	b31c      	cbz	r4, 80099c8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009980:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009984:	4649      	mov	r1, r9
 8009986:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009988:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800998a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800998c:	f7ff fb04 	bl	8008f98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009990:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009992:	1c73      	adds	r3, r6, #1
 8009994:	d113      	bne.n	80099be <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009996:	692b      	ldr	r3, [r5, #16]
 8009998:	b90b      	cbnz	r3, 800999e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800999a:	2001      	movs	r0, #1
 800999c:	e00b      	b.n	80099b6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800999e:	f105 0010 	add.w	r0, r5, #16
 80099a2:	f000 fc99 	bl	800a2d8 <xTaskRemoveFromEventList>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0f7      	beq.n	800999a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80099aa:	f1b8 0f00 	cmp.w	r8, #0
 80099ae:	d0f4      	beq.n	800999a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099b0:	2001      	movs	r0, #1
 80099b2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80099b6:	f387 8811 	msr	BASEPRI, r7
}
 80099ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099be:	3601      	adds	r6, #1
 80099c0:	b276      	sxtb	r6, r6
 80099c2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80099c6:	e7e8      	b.n	800999a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80099c8:	4620      	mov	r0, r4
 80099ca:	e7f4      	b.n	80099b6 <xQueueReceiveFromISR+0x94>

080099cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099cc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099ce:	4a07      	ldr	r2, [pc, #28]	; (80099ec <vQueueAddToRegistry+0x20>)
	{
 80099d0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80099d6:	b92c      	cbnz	r4, 80099e4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099e0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099e2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099e4:	3301      	adds	r3, #1
 80099e6:	2b08      	cmp	r3, #8
 80099e8:	d1f3      	bne.n	80099d2 <vQueueAddToRegistry+0x6>
 80099ea:	e7fa      	b.n	80099e2 <vQueueAddToRegistry+0x16>
 80099ec:	20014f74 	.word	0x20014f74

080099f0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099f2:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <vQueueUnregisterQueue+0x24>)
	{
 80099f4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80099fa:	684c      	ldr	r4, [r1, #4]
 80099fc:	4284      	cmp	r4, r0
 80099fe:	d104      	bne.n	8009a0a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a00:	2000      	movs	r0, #0
 8009a02:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a06:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a08:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d1f2      	bne.n	80099f6 <vQueueUnregisterQueue+0x6>
 8009a10:	e7fa      	b.n	8009a08 <vQueueUnregisterQueue+0x18>
 8009a12:	bf00      	nop
 8009a14:	20014f74 	.word	0x20014f74

08009a18 <vQueueDelete>:
{
 8009a18:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	b950      	cbnz	r0, 8009a34 <vQueueDelete+0x1c>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	b672      	cpsid	i
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	b662      	cpsie	i
 8009a32:	e7fe      	b.n	8009a32 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8009a34:	f7ff ffdc 	bl	80099f0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a3c:	b923      	cbnz	r3, 8009a48 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8009a3e:	4620      	mov	r0, r4
}
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8009a44:	f7ff b850 	b.w	8008ae8 <vPortFree>
}
 8009a48:	bd10      	pop	{r4, pc}

08009a4a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a4a:	b570      	push	{r4, r5, r6, lr}
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	460d      	mov	r5, r1
 8009a50:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a52:	f7ff f92f 	bl	8008cb4 <vPortEnterCritical>
 8009a56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a5a:	2bff      	cmp	r3, #255	; 0xff
 8009a5c:	d102      	bne.n	8009a64 <vQueueWaitForMessageRestricted+0x1a>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009a64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009a68:	2bff      	cmp	r3, #255	; 0xff
 8009a6a:	d102      	bne.n	8009a72 <vQueueWaitForMessageRestricted+0x28>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a72:	f7ff f943 	bl	8008cfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a78:	b92b      	cbnz	r3, 8009a86 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a82:	f000 fc09 	bl	800a298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a86:	4620      	mov	r0, r4
	}
 8009a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009a8c:	f7ff ba99 	b.w	8008fc2 <prvUnlockQueue>

08009a90 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a94:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a96:	f7ff f90d 	bl	8008cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	; (8009b58 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8009a9c:	4e2f      	ldr	r6, [pc, #188]	; (8009b5c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	4f2f      	ldr	r7, [pc, #188]	; (8009b60 <prvAddNewTaskToReadyList+0xd0>)
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009aa6:	6835      	ldr	r5, [r6, #0]
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	d14a      	bne.n	8009b42 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009aac:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d11f      	bne.n	8009af4 <prvAddNewTaskToReadyList+0x64>
 8009ab4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ab6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ab8:	4640      	mov	r0, r8
 8009aba:	f7ff f851 	bl	8008b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009abe:	f108 0814 	add.w	r8, r8, #20
 8009ac2:	2d38      	cmp	r5, #56	; 0x38
 8009ac4:	d1f7      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ac6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009b88 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8009aca:	4d26      	ldr	r5, [pc, #152]	; (8009b64 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8009acc:	4640      	mov	r0, r8
 8009ace:	f7ff f847 	bl	8008b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7ff f844 	bl	8008b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ad8:	4823      	ldr	r0, [pc, #140]	; (8009b68 <prvAddNewTaskToReadyList+0xd8>)
 8009ada:	f7ff f841 	bl	8008b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ade:	4823      	ldr	r0, [pc, #140]	; (8009b6c <prvAddNewTaskToReadyList+0xdc>)
 8009ae0:	f7ff f83e 	bl	8008b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ae4:	4822      	ldr	r0, [pc, #136]	; (8009b70 <prvAddNewTaskToReadyList+0xe0>)
 8009ae6:	f7ff f83b 	bl	8008b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aea:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <prvAddNewTaskToReadyList+0xe4>)
 8009aec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009af0:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <prvAddNewTaskToReadyList+0xe8>)
 8009af2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8009af4:	4a21      	ldr	r2, [pc, #132]	; (8009b7c <prvAddNewTaskToReadyList+0xec>)
 8009af6:	6813      	ldr	r3, [r2, #0]
 8009af8:	3301      	adds	r3, #1
 8009afa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009afc:	4a20      	ldr	r2, [pc, #128]	; (8009b80 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009afe:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009b00:	6811      	ldr	r1, [r2, #0]
 8009b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b04:	428b      	cmp	r3, r1
 8009b06:	d900      	bls.n	8009b0a <prvAddNewTaskToReadyList+0x7a>
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	2014      	movs	r0, #20
 8009b0c:	1d21      	adds	r1, r4, #4
 8009b0e:	fb00 7003 	mla	r0, r0, r3, r7
 8009b12:	f7ff f833 	bl	8008b7c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009b16:	f7ff f8f1 	bl	8008cfc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <prvAddNewTaskToReadyList+0xf4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	b173      	cbz	r3, 8009b3e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b20:	6833      	ldr	r3, [r6, #0]
 8009b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d209      	bcs.n	8009b3e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009b2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
}
 8009b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009b42:	4b10      	ldr	r3, [pc, #64]	; (8009b84 <prvAddNewTaskToReadyList+0xf4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1d4      	bne.n	8009af4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b4a:	6833      	ldr	r3, [r6, #0]
 8009b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d8cf      	bhi.n	8009af4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009b54:	6034      	str	r4, [r6, #0]
 8009b56:	e7cd      	b.n	8009af4 <prvAddNewTaskToReadyList+0x64>
 8009b58:	20015420 	.word	0x20015420
 8009b5c:	20014fb4 	.word	0x20014fb4
 8009b60:	20014fc0 	.word	0x20014fc0
 8009b64:	2001544c 	.word	0x2001544c
 8009b68:	20015468 	.word	0x20015468
 8009b6c:	20015494 	.word	0x20015494
 8009b70:	20015480 	.word	0x20015480
 8009b74:	20014fb8 	.word	0x20014fb8
 8009b78:	20014fbc 	.word	0x20014fbc
 8009b7c:	20015430 	.word	0x20015430
 8009b80:	20015434 	.word	0x20015434
 8009b84:	2001547c 	.word	0x2001547c
 8009b88:	20015438 	.word	0x20015438

08009b8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b8e:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009b90:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b92:	4e15      	ldr	r6, [pc, #84]	; (8009be8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009b94:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009b96:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b98:	6830      	ldr	r0, [r6, #0]
 8009b9a:	3004      	adds	r0, #4
 8009b9c:	f7ff f811 	bl	8008bc2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ba0:	1c63      	adds	r3, r4, #1
 8009ba2:	d107      	bne.n	8009bb4 <prvAddCurrentTaskToDelayedList+0x28>
 8009ba4:	b137      	cbz	r7, 8009bb4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ba6:	6831      	ldr	r1, [r6, #0]
 8009ba8:	4810      	ldr	r0, [pc, #64]	; (8009bec <prvAddCurrentTaskToDelayedList+0x60>)
 8009baa:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bb0:	f7fe bfe4 	b.w	8008b7c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bb4:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bb6:	6833      	ldr	r3, [r6, #0]
 8009bb8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bba:	d307      	bcc.n	8009bcc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bbc:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x64>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	6831      	ldr	r1, [r6, #0]
}
 8009bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc6:	3104      	adds	r1, #4
 8009bc8:	f7fe bfe4 	b.w	8008b94 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	6831      	ldr	r1, [r6, #0]
 8009bd2:	3104      	adds	r1, #4
 8009bd4:	f7fe ffde 	bl	8008b94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	42a2      	cmp	r2, r4
 8009bde:	d900      	bls.n	8009be2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8009be0:	601c      	str	r4, [r3, #0]
}
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be4:	200154a8 	.word	0x200154a8
 8009be8:	20014fb4 	.word	0x20014fb4
 8009bec:	20015480 	.word	0x20015480
 8009bf0:	20014fbc 	.word	0x20014fbc
 8009bf4:	20014fb8 	.word	0x20014fb8
 8009bf8:	20015460 	.word	0x20015460

08009bfc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfc:	4a06      	ldr	r2, [pc, #24]	; (8009c18 <prvResetNextTaskUnblockTime+0x1c>)
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	6819      	ldr	r1, [r3, #0]
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <prvResetNextTaskUnblockTime+0x20>)
 8009c04:	b919      	cbnz	r1, 8009c0e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c0a:	601a      	str	r2, [r3, #0]
}
 8009c0c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c12:	68d2      	ldr	r2, [r2, #12]
 8009c14:	6852      	ldr	r2, [r2, #4]
 8009c16:	e7f8      	b.n	8009c0a <prvResetNextTaskUnblockTime+0xe>
 8009c18:	20014fb8 	.word	0x20014fb8
 8009c1c:	20015460 	.word	0x20015460

08009c20 <prvDeleteTCB>:
	{
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c24:	3058      	adds	r0, #88	; 0x58
 8009c26:	f021 fb65 	bl	802b2f4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c2a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 8009c2e:	b93b      	cbnz	r3, 8009c40 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8009c30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009c32:	f7fe ff59 	bl	8008ae8 <vPortFree>
				vPortFree( pxTCB );
 8009c36:	4620      	mov	r0, r4
	}
 8009c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009c3c:	f7fe bf54 	b.w	8008ae8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d0f8      	beq.n	8009c36 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d00a      	beq.n	8009c5e <prvDeleteTCB+0x3e>
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	b672      	cpsid	i
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	b662      	cpsie	i
 8009c5c:	e7fe      	b.n	8009c5c <prvDeleteTCB+0x3c>
	}
 8009c5e:	bd10      	pop	{r4, pc}

08009c60 <prvIdleTask>:
{
 8009c60:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c62:	4c14      	ldr	r4, [pc, #80]	; (8009cb4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c64:	4f14      	ldr	r7, [pc, #80]	; (8009cb8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009c66:	4d15      	ldr	r5, [pc, #84]	; (8009cbc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	b983      	cbnz	r3, 8009c8e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c6c:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <prvIdleTask+0x60>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d909      	bls.n	8009c88 <prvIdleTask+0x28>
				taskYIELD();
 8009c74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009c88:	f7f7 f8b2 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009c8c:	e7eb      	b.n	8009c66 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8009c8e:	f7ff f811 	bl	8008cb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c96:	1d30      	adds	r0, r6, #4
 8009c98:	f7fe ff93 	bl	8008bc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009ca8:	f7ff f828 	bl	8008cfc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff ffb7 	bl	8009c20 <prvDeleteTCB>
 8009cb2:	e7d9      	b.n	8009c68 <prvIdleTask+0x8>
 8009cb4:	20015424 	.word	0x20015424
 8009cb8:	20015494 	.word	0x20015494
 8009cbc:	20015420 	.word	0x20015420
 8009cc0:	20014fc0 	.word	0x20014fc0

08009cc4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cc8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009ccc:	4606      	mov	r6, r0
 8009cce:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cd0:	21a5      	movs	r1, #165	; 0xa5
 8009cd2:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009cd4:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cd6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009cda:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cde:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009ce0:	f020 ff24 	bl	802ab2c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ce4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ce6:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ce8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	d042      	beq.n	8009d76 <prvInitialiseNewTask.constprop.0+0xb2>
 8009cf0:	1e6b      	subs	r3, r5, #1
 8009cf2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009cf6:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cf8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009cfc:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8009d00:	b108      	cbz	r0, 8009d06 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d02:	42ab      	cmp	r3, r5
 8009d04:	d1f8      	bne.n	8009cf8 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d0c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8009d0e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d12:	1d20      	adds	r0, r4, #4
 8009d14:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009d16:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8009d1a:	bf28      	it	cs
 8009d1c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009d1e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009d20:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d22:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d26:	f7fe ff26 	bl	8008b76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d2a:	f104 0018 	add.w	r0, r4, #24
 8009d2e:	f7fe ff22 	bl	8008b76 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d32:	2260      	movs	r2, #96	; 0x60
 8009d34:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8009d36:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d3e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d40:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d42:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8009d44:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d48:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d4c:	f020 feee 	bl	802ab2c <memset>
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d52:	463a      	mov	r2, r7
 8009d54:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d56:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d58:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d5a:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <prvInitialiseNewTask.constprop.0+0xbc>)
 8009d5c:	6623      	str	r3, [r4, #96]	; 0x60
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <prvInitialiseNewTask.constprop.0+0xc0>)
 8009d60:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d62:	f7fe ff81 	bl	8008c68 <pxPortInitialiseStack>
 8009d66:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009d68:	f1b8 0f00 	cmp.w	r8, #0
 8009d6c:	d001      	beq.n	8009d72 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d6e:	f8c8 4000 	str.w	r4, [r8]
}
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d76:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009d7a:	e7c7      	b.n	8009d0c <prvInitialiseNewTask.constprop.0+0x48>
 8009d7c:	08031208 	.word	0x08031208
 8009d80:	08031228 	.word	0x08031228
 8009d84:	080311e8 	.word	0x080311e8

08009d88 <xTaskCreateStatic>:
	{
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009d90:	b955      	cbnz	r5, 8009da8 <xTaskCreateStatic+0x20>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	b672      	cpsid	i
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	b662      	cpsie	i
 8009da6:	e7fe      	b.n	8009da6 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8009da8:	b954      	cbnz	r4, 8009dc0 <xTaskCreateStatic+0x38>
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	b672      	cpsid	i
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	b662      	cpsie	i
 8009dbe:	e7fe      	b.n	8009dbe <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dc0:	26c0      	movs	r6, #192	; 0xc0
 8009dc2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dc4:	9e05      	ldr	r6, [sp, #20]
 8009dc6:	2ec0      	cmp	r6, #192	; 0xc0
 8009dc8:	d00a      	beq.n	8009de0 <xTaskCreateStatic+0x58>
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	b672      	cpsid	i
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	b662      	cpsie	i
 8009dde:	e7fe      	b.n	8009dde <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009de0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009de2:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009de4:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009de6:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dea:	ad04      	add	r5, sp, #16
 8009dec:	9402      	str	r4, [sp, #8]
 8009dee:	9501      	str	r5, [sp, #4]
 8009df0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009df2:	9500      	str	r5, [sp, #0]
 8009df4:	f7ff ff66 	bl	8009cc4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff fe49 	bl	8009a90 <prvAddNewTaskToReadyList>
	}
 8009dfe:	9804      	ldr	r0, [sp, #16]
 8009e00:	b006      	add	sp, #24
 8009e02:	bd70      	pop	{r4, r5, r6, pc}

08009e04 <xTaskCreate>:
	{
 8009e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e08:	4607      	mov	r7, r0
 8009e0a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e0c:	0090      	lsls	r0, r2, #2
	{
 8009e0e:	4688      	mov	r8, r1
 8009e10:	4616      	mov	r6, r2
 8009e12:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e14:	f7fe fdd2 	bl	80089bc <pvPortMalloc>
			if( pxStack != NULL )
 8009e18:	4605      	mov	r5, r0
 8009e1a:	b1e8      	cbz	r0, 8009e58 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e1c:	20c0      	movs	r0, #192	; 0xc0
 8009e1e:	f7fe fdcd 	bl	80089bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009e22:	4604      	mov	r4, r0
 8009e24:	b1a8      	cbz	r0, 8009e52 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e26:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009e28:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e2e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e34:	9002      	str	r0, [sp, #8]
 8009e36:	4638      	mov	r0, r7
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	464b      	mov	r3, r9
 8009e40:	f7ff ff40 	bl	8009cc4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff fe23 	bl	8009a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e4a:	2001      	movs	r0, #1
	}
 8009e4c:	b005      	add	sp, #20
 8009e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7fe fe48 	bl	8008ae8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009e5c:	e7f6      	b.n	8009e4c <xTaskCreate+0x48>
	...

08009e60 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009e60:	4a02      	ldr	r2, [pc, #8]	; (8009e6c <vTaskSuspendAll+0xc>)
 8009e62:	6813      	ldr	r3, [r2, #0]
 8009e64:	3301      	adds	r3, #1
 8009e66:	6013      	str	r3, [r2, #0]
}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	2001542c 	.word	0x2001542c

08009e70 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009e70:	4b01      	ldr	r3, [pc, #4]	; (8009e78 <xTaskGetTickCount+0x8>)
 8009e72:	6818      	ldr	r0, [r3, #0]
}
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	200154a8 	.word	0x200154a8

08009e7c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e7c:	4b40      	ldr	r3, [pc, #256]	; (8009f80 <xTaskIncrementTick+0x104>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
{
 8009e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d174      	bne.n	8009f72 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e88:	4b3e      	ldr	r3, [pc, #248]	; (8009f84 <xTaskIncrementTick+0x108>)
 8009e8a:	681d      	ldr	r5, [r3, #0]
 8009e8c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009e8e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e90:	b9cd      	cbnz	r5, 8009ec6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8009e92:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <xTaskIncrementTick+0x10c>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	b152      	cbz	r2, 8009eb0 <xTaskIncrementTick+0x34>
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	b672      	cpsid	i
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	b662      	cpsie	i
 8009eae:	e7fe      	b.n	8009eae <xTaskIncrementTick+0x32>
 8009eb0:	4a36      	ldr	r2, [pc, #216]	; (8009f8c <xTaskIncrementTick+0x110>)
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	6810      	ldr	r0, [r2, #0]
 8009eb6:	6018      	str	r0, [r3, #0]
 8009eb8:	6011      	str	r1, [r2, #0]
 8009eba:	4a35      	ldr	r2, [pc, #212]	; (8009f90 <xTaskIncrementTick+0x114>)
 8009ebc:	6813      	ldr	r3, [r2, #0]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	f7ff fe9b 	bl	8009bfc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ec6:	4e33      	ldr	r6, [pc, #204]	; (8009f94 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8009ec8:	2400      	movs	r4, #0
 8009eca:	4f33      	ldr	r7, [pc, #204]	; (8009f98 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ecc:	6833      	ldr	r3, [r6, #0]
 8009ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009fa4 <xTaskIncrementTick+0x128>
 8009ed2:	42ab      	cmp	r3, r5
 8009ed4:	d911      	bls.n	8009efa <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eda:	2214      	movs	r2, #20
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	4353      	muls	r3, r2
 8009ee0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	bf28      	it	cs
 8009ee6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8009ee8:	4b2c      	ldr	r3, [pc, #176]	; (8009f9c <xTaskIncrementTick+0x120>)
 8009eea:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009eec:	2b00      	cmp	r3, #0
}
 8009eee:	bf0c      	ite	eq
 8009ef0:	4620      	moveq	r0, r4
 8009ef2:	2001      	movne	r0, #1
 8009ef4:	b003      	add	sp, #12
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009f88 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8009efe:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009fa8 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f02:	f8d9 3000 	ldr.w	r3, [r9]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	b91b      	cbnz	r3, 8009f12 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0e:	6033      	str	r3, [r6, #0]
					break;
 8009f10:	e7e1      	b.n	8009ed6 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f12:	f8d9 3000 	ldr.w	r3, [r9]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f1c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8009f20:	4295      	cmp	r5, r2
 8009f22:	d201      	bcs.n	8009f28 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8009f24:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f26:	e7d6      	b.n	8009ed6 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f28:	f10b 0104 	add.w	r1, fp, #4
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	9101      	str	r1, [sp, #4]
 8009f30:	f7fe fe47 	bl	8008bc2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f34:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8009f38:	9901      	ldr	r1, [sp, #4]
 8009f3a:	b122      	cbz	r2, 8009f46 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f3c:	f10b 0018 	add.w	r0, fp, #24
 8009f40:	f7fe fe3f 	bl	8008bc2 <uxListRemove>
 8009f44:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8009f46:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8009f4a:	f8da 2000 	ldr.w	r2, [sl]
 8009f4e:	4290      	cmp	r0, r2
 8009f50:	d901      	bls.n	8009f56 <xTaskIncrementTick+0xda>
 8009f52:	f8ca 0000 	str.w	r0, [sl]
 8009f56:	2314      	movs	r3, #20
 8009f58:	fb03 7000 	mla	r0, r3, r0, r7
 8009f5c:	f7fe fe0e 	bl	8008b7c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f60:	f8d8 1000 	ldr.w	r1, [r8]
 8009f64:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8009f68:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	bf28      	it	cs
 8009f6e:	2401      	movcs	r4, #1
 8009f70:	e7c7      	b.n	8009f02 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8009f72:	4a0b      	ldr	r2, [pc, #44]	; (8009fa0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009f74:	2400      	movs	r4, #0
		++uxPendedTicks;
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	e7b4      	b.n	8009ee8 <xTaskIncrementTick+0x6c>
 8009f7e:	bf00      	nop
 8009f80:	2001542c 	.word	0x2001542c
 8009f84:	200154a8 	.word	0x200154a8
 8009f88:	20014fb8 	.word	0x20014fb8
 8009f8c:	20014fbc 	.word	0x20014fbc
 8009f90:	20015464 	.word	0x20015464
 8009f94:	20015460 	.word	0x20015460
 8009f98:	20014fc0 	.word	0x20014fc0
 8009f9c:	200154ac 	.word	0x200154ac
 8009fa0:	20015428 	.word	0x20015428
 8009fa4:	20014fb4 	.word	0x20014fb4
 8009fa8:	20015434 	.word	0x20015434

08009fac <xTaskResumeAll>:
{
 8009fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8009fae:	4c32      	ldr	r4, [pc, #200]	; (800a078 <xTaskResumeAll+0xcc>)
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	b953      	cbnz	r3, 8009fca <xTaskResumeAll+0x1e>
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	b672      	cpsid	i
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	b662      	cpsie	i
 8009fc8:	e7fe      	b.n	8009fc8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8009fca:	f7fe fe73 	bl	8008cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd4:	6824      	ldr	r4, [r4, #0]
 8009fd6:	b12c      	cbz	r4, 8009fe4 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8009fd8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009fda:	f7fe fe8f 	bl	8008cfc <vPortExitCritical>
}
 8009fde:	4620      	mov	r0, r4
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fe4:	4b25      	ldr	r3, [pc, #148]	; (800a07c <xTaskResumeAll+0xd0>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0f5      	beq.n	8009fd8 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fec:	4d24      	ldr	r5, [pc, #144]	; (800a080 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009fee:	4e25      	ldr	r6, [pc, #148]	; (800a084 <xTaskResumeAll+0xd8>)
 8009ff0:	4f25      	ldr	r7, [pc, #148]	; (800a088 <xTaskResumeAll+0xdc>)
 8009ff2:	e01e      	b.n	800a032 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff4:	68eb      	ldr	r3, [r5, #12]
 8009ff6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ff8:	f104 0018 	add.w	r0, r4, #24
 8009ffc:	f7fe fde1 	bl	8008bc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a000:	1d21      	adds	r1, r4, #4
 800a002:	4608      	mov	r0, r1
 800a004:	9101      	str	r1, [sp, #4]
 800a006:	f7fe fddc 	bl	8008bc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a00a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a00c:	6832      	ldr	r2, [r6, #0]
 800a00e:	9901      	ldr	r1, [sp, #4]
 800a010:	4293      	cmp	r3, r2
 800a012:	d900      	bls.n	800a016 <xTaskResumeAll+0x6a>
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	2014      	movs	r0, #20
 800a018:	fb00 7003 	mla	r0, r0, r3, r7
 800a01c:	f7fe fdae 	bl	8008b7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a020:	4b1a      	ldr	r3, [pc, #104]	; (800a08c <xTaskResumeAll+0xe0>)
 800a022:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	429a      	cmp	r2, r3
 800a02a:	d302      	bcc.n	800a032 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800a02c:	4b18      	ldr	r3, [pc, #96]	; (800a090 <xTaskResumeAll+0xe4>)
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1dd      	bne.n	8009ff4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800a038:	b10c      	cbz	r4, 800a03e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800a03a:	f7ff fddf 	bl	8009bfc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a03e:	4d15      	ldr	r5, [pc, #84]	; (800a094 <xTaskResumeAll+0xe8>)
 800a040:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a042:	b144      	cbz	r4, 800a056 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800a044:	4e12      	ldr	r6, [pc, #72]	; (800a090 <xTaskResumeAll+0xe4>)
 800a046:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a048:	f7ff ff18 	bl	8009e7c <xTaskIncrementTick>
 800a04c:	b100      	cbz	r0, 800a050 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800a04e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a050:	3c01      	subs	r4, #1
 800a052:	d1f9      	bne.n	800a048 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800a054:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <xTaskResumeAll+0xe4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0bc      	beq.n	8009fd8 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800a05e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a066:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a072:	2401      	movs	r4, #1
 800a074:	e7b1      	b.n	8009fda <xTaskResumeAll+0x2e>
 800a076:	bf00      	nop
 800a078:	2001542c 	.word	0x2001542c
 800a07c:	20015420 	.word	0x20015420
 800a080:	20015468 	.word	0x20015468
 800a084:	20015434 	.word	0x20015434
 800a088:	20014fc0 	.word	0x20014fc0
 800a08c:	20014fb4 	.word	0x20014fb4
 800a090:	200154ac 	.word	0x200154ac
 800a094:	20015428 	.word	0x20015428

0800a098 <vTaskDelay>:
	{
 800a098:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a09a:	b950      	cbnz	r0, 800a0b2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a09c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
	}
 800a0b0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <vTaskDelay+0x48>)
 800a0b4:	6819      	ldr	r1, [r3, #0]
 800a0b6:	b151      	cbz	r1, 800a0ce <vTaskDelay+0x36>
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	e7fe      	b.n	800a0cc <vTaskDelay+0x34>
			vTaskSuspendAll();
 800a0ce:	f7ff fec7 	bl	8009e60 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0d2:	f7ff fd5b 	bl	8009b8c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a0d6:	f7ff ff69 	bl	8009fac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0de      	beq.n	800a09c <vTaskDelay+0x4>
 800a0de:	e7e7      	b.n	800a0b0 <vTaskDelay+0x18>
 800a0e0:	2001542c 	.word	0x2001542c

0800a0e4 <vTaskSetApplicationTaskTag>:
	{
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	b908      	cbnz	r0, 800a0f0 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <vTaskSetApplicationTaskTag+0x1c>)
 800a0ee:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a0f0:	f7fe fde0 	bl	8008cb4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a0f4:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800a0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a0fa:	f7fe bdff 	b.w	8008cfc <vPortExitCritical>
 800a0fe:	bf00      	nop
 800a100:	20014fb4 	.word	0x20014fb4

0800a104 <xTaskCallApplicationTaskHook>:
	{
 800a104:	4603      	mov	r3, r0
 800a106:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a108:	b90b      	cbnz	r3, 800a10e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a10a:	4b03      	ldr	r3, [pc, #12]	; (800a118 <xTaskCallApplicationTaskHook+0x14>)
 800a10c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a110:	b103      	cbz	r3, 800a114 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a112:	4718      	bx	r3
	}
 800a114:	4618      	mov	r0, r3
 800a116:	4770      	bx	lr
 800a118:	20014fb4 	.word	0x20014fb4

0800a11c <vTaskStartScheduler>:
{
 800a11c:	b510      	push	{r4, lr}
 800a11e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a120:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a122:	aa07      	add	r2, sp, #28
 800a124:	a906      	add	r1, sp, #24
 800a126:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a128:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a12c:	f7fe fc0a 	bl	8008944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	9302      	str	r3, [sp, #8]
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	491d      	ldr	r1, [pc, #116]	; (800a1b0 <vTaskStartScheduler+0x94>)
 800a13a:	481e      	ldr	r0, [pc, #120]	; (800a1b4 <vTaskStartScheduler+0x98>)
 800a13c:	e9cd 4300 	strd	r4, r3, [sp]
 800a140:	4623      	mov	r3, r4
 800a142:	f7ff fe21 	bl	8009d88 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a146:	2800      	cmp	r0, #0
 800a148:	d030      	beq.n	800a1ac <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800a14a:	f000 faaf 	bl	800a6ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a14e:	2801      	cmp	r0, #1
 800a150:	d11f      	bne.n	800a192 <vTaskStartScheduler+0x76>
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	b672      	cpsid	i
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a166:	4a14      	ldr	r2, [pc, #80]	; (800a1b8 <vTaskStartScheduler+0x9c>)
 800a168:	4914      	ldr	r1, [pc, #80]	; (800a1bc <vTaskStartScheduler+0xa0>)
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	3358      	adds	r3, #88	; 0x58
 800a16e:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a170:	f04f 31ff 	mov.w	r1, #4294967295
 800a174:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <vTaskStartScheduler+0xa4>)
 800a176:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a178:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800a17a:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <vTaskStartScheduler+0xa8>)
 800a17c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <vTaskStartScheduler+0xac>)
 800a180:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a182:	6810      	ldr	r0, [r2, #0]
 800a184:	f7ff ffbe 	bl	800a104 <xTaskCallApplicationTaskHook>
}
 800a188:	b008      	add	sp, #32
 800a18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800a18e:	f7fe be2b 	b.w	8008de8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a192:	3001      	adds	r0, #1
 800a194:	d10a      	bne.n	800a1ac <vTaskStartScheduler+0x90>
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	b672      	cpsid	i
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	b662      	cpsie	i
 800a1aa:	e7fe      	b.n	800a1aa <vTaskStartScheduler+0x8e>
}
 800a1ac:	b008      	add	sp, #32
 800a1ae:	bd10      	pop	{r4, pc}
 800a1b0:	0802e7d0 	.word	0x0802e7d0
 800a1b4:	08009c61 	.word	0x08009c61
 800a1b8:	20014fb4 	.word	0x20014fb4
 800a1bc:	200000bc 	.word	0x200000bc
 800a1c0:	20015460 	.word	0x20015460
 800a1c4:	2001547c 	.word	0x2001547c
 800a1c8:	200154a8 	.word	0x200154a8

0800a1cc <vTaskSwitchContext>:
{
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1ce:	4b1e      	ldr	r3, [pc, #120]	; (800a248 <vTaskSwitchContext+0x7c>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b1e      	ldr	r3, [pc, #120]	; (800a24c <vTaskSwitchContext+0x80>)
 800a1d4:	b112      	cbz	r2, 800a1dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
}
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800a1dc:	4c1c      	ldr	r4, [pc, #112]	; (800a250 <vTaskSwitchContext+0x84>)
 800a1de:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e0:	4e1c      	ldr	r6, [pc, #112]	; (800a254 <vTaskSwitchContext+0x88>)
 800a1e2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800a1e4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	f7ff ff8c 	bl	800a104 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ec:	6832      	ldr	r2, [r6, #0]
 800a1ee:	491a      	ldr	r1, [pc, #104]	; (800a258 <vTaskSwitchContext+0x8c>)
 800a1f0:	fb07 f302 	mul.w	r3, r7, r2
 800a1f4:	58cd      	ldr	r5, [r1, r3]
 800a1f6:	18c8      	adds	r0, r1, r3
 800a1f8:	b1c5      	cbz	r5, 800a22c <vTaskSwitchContext+0x60>
 800a1fa:	6845      	ldr	r5, [r0, #4]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	686d      	ldr	r5, [r5, #4]
 800a200:	440b      	add	r3, r1
 800a202:	429d      	cmp	r5, r3
 800a204:	6045      	str	r5, [r0, #4]
 800a206:	bf04      	itt	eq
 800a208:	686b      	ldreq	r3, [r5, #4]
 800a20a:	6043      	streq	r3, [r0, #4]
 800a20c:	2314      	movs	r3, #20
 800a20e:	fb03 1102 	mla	r1, r3, r2, r1
 800a212:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800a214:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	f7ff ff71 	bl	800a104 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	4a0d      	ldr	r2, [pc, #52]	; (800a25c <vTaskSwitchContext+0x90>)
 800a226:	3358      	adds	r3, #88	; 0x58
 800a228:	6013      	str	r3, [r2, #0]
}
 800a22a:	e7d6      	b.n	800a1da <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22c:	b952      	cbnz	r2, 800a244 <vTaskSwitchContext+0x78>
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	b672      	cpsid	i
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	b662      	cpsie	i
 800a242:	e7fe      	b.n	800a242 <vTaskSwitchContext+0x76>
 800a244:	3a01      	subs	r2, #1
 800a246:	e7d3      	b.n	800a1f0 <vTaskSwitchContext+0x24>
 800a248:	2001542c 	.word	0x2001542c
 800a24c:	200154ac 	.word	0x200154ac
 800a250:	20014fb4 	.word	0x20014fb4
 800a254:	20015434 	.word	0x20015434
 800a258:	20014fc0 	.word	0x20014fc0
 800a25c:	200000bc 	.word	0x200000bc

0800a260 <vTaskPlaceOnEventList>:
{
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a264:	b950      	cbnz	r0, 800a27c <vTaskPlaceOnEventList+0x1c>
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	b672      	cpsid	i
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	b662      	cpsie	i
 800a27a:	e7fe      	b.n	800a27a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <vTaskPlaceOnEventList+0x34>)
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	3118      	adds	r1, #24
 800a282:	f7fe fc87 	bl	8008b94 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a286:	4620      	mov	r0, r4
 800a288:	2101      	movs	r1, #1
}
 800a28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a28e:	f7ff bc7d 	b.w	8009b8c <prvAddCurrentTaskToDelayedList>
 800a292:	bf00      	nop
 800a294:	20014fb4 	.word	0x20014fb4

0800a298 <vTaskPlaceOnEventListRestricted>:
	{
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	460d      	mov	r5, r1
 800a29c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800a29e:	b950      	cbnz	r0, 800a2b6 <vTaskPlaceOnEventListRestricted+0x1e>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	b672      	cpsid	i
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	b662      	cpsie	i
 800a2b4:	e7fe      	b.n	800a2b4 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <vTaskPlaceOnEventListRestricted+0x3c>)
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	3118      	adds	r1, #24
 800a2bc:	f7fe fc5e 	bl	8008b7c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800a2c0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	bf0c      	ite	eq
 800a2c6:	4628      	moveq	r0, r5
 800a2c8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800a2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2d0:	f7ff bc5c 	b.w	8009b8c <prvAddCurrentTaskToDelayedList>
 800a2d4:	20014fb4 	.word	0x20014fb4

0800a2d8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d8:	68c3      	ldr	r3, [r0, #12]
{
 800a2da:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a2de:	b954      	cbnz	r4, 800a2f6 <xTaskRemoveFromEventList+0x1e>
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	e7fe      	b.n	800a2f4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2f6:	f104 0118 	add.w	r1, r4, #24
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	9101      	str	r1, [sp, #4]
 800a2fe:	f7fe fc60 	bl	8008bc2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <xTaskRemoveFromEventList+0x74>)
 800a304:	9901      	ldr	r1, [sp, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	b9e3      	cbnz	r3, 800a344 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a30a:	1d21      	adds	r1, r4, #4
 800a30c:	4608      	mov	r0, r1
 800a30e:	9101      	str	r1, [sp, #4]
 800a310:	f7fe fc57 	bl	8008bc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a314:	4a0e      	ldr	r2, [pc, #56]	; (800a350 <xTaskRemoveFromEventList+0x78>)
 800a316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a318:	6810      	ldr	r0, [r2, #0]
 800a31a:	9901      	ldr	r1, [sp, #4]
 800a31c:	4283      	cmp	r3, r0
 800a31e:	d900      	bls.n	800a322 <xTaskRemoveFromEventList+0x4a>
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4a0c      	ldr	r2, [pc, #48]	; (800a354 <xTaskRemoveFromEventList+0x7c>)
 800a324:	2014      	movs	r0, #20
 800a326:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a32a:	f7fe fc27 	bl	8008b7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a32e:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <xTaskRemoveFromEventList+0x80>)
 800a330:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	429a      	cmp	r2, r3
 800a338:	d906      	bls.n	800a348 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800a33a:	2001      	movs	r0, #1
 800a33c:	4b07      	ldr	r3, [pc, #28]	; (800a35c <xTaskRemoveFromEventList+0x84>)
 800a33e:	6018      	str	r0, [r3, #0]
}
 800a340:	b002      	add	sp, #8
 800a342:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a344:	4806      	ldr	r0, [pc, #24]	; (800a360 <xTaskRemoveFromEventList+0x88>)
 800a346:	e7f0      	b.n	800a32a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800a348:	2000      	movs	r0, #0
	return xReturn;
 800a34a:	e7f9      	b.n	800a340 <xTaskRemoveFromEventList+0x68>
 800a34c:	2001542c 	.word	0x2001542c
 800a350:	20015434 	.word	0x20015434
 800a354:	20014fc0 	.word	0x20014fc0
 800a358:	20014fb4 	.word	0x20014fb4
 800a35c:	200154ac 	.word	0x200154ac
 800a360:	20015468 	.word	0x20015468

0800a364 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a364:	4b03      	ldr	r3, [pc, #12]	; (800a374 <vTaskInternalSetTimeOutState+0x10>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a36a:	4b03      	ldr	r3, [pc, #12]	; (800a378 <vTaskInternalSetTimeOutState+0x14>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6043      	str	r3, [r0, #4]
}
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20015464 	.word	0x20015464
 800a378:	200154a8 	.word	0x200154a8

0800a37c <xTaskCheckForTimeOut>:
{
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800a380:	4605      	mov	r5, r0
 800a382:	b950      	cbnz	r0, 800a39a <xTaskCheckForTimeOut+0x1e>
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	b672      	cpsid	i
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	b662      	cpsie	i
 800a398:	e7fe      	b.n	800a398 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800a39a:	b951      	cbnz	r1, 800a3b2 <xTaskCheckForTimeOut+0x36>
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	b672      	cpsid	i
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	b662      	cpsie	i
 800a3b0:	e7fe      	b.n	800a3b0 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800a3b2:	f7fe fc7f 	bl	8008cb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <xTaskCheckForTimeOut+0x78>)
 800a3b8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	d010      	beq.n	800a3e2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3c0:	480d      	ldr	r0, [pc, #52]	; (800a3f8 <xTaskCheckForTimeOut+0x7c>)
 800a3c2:	682e      	ldr	r6, [r5, #0]
 800a3c4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3c6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3c8:	4286      	cmp	r6, r0
 800a3ca:	d001      	beq.n	800a3d0 <xTaskCheckForTimeOut+0x54>
 800a3cc:	428a      	cmp	r2, r1
 800a3ce:	d90f      	bls.n	800a3f0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3d0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3d2:	4283      	cmp	r3, r0
 800a3d4:	d90a      	bls.n	800a3ec <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800a3d6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3d8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800a3da:	4413      	add	r3, r2
 800a3dc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3de:	f7ff ffc1 	bl	800a364 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800a3e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a3e4:	f7fe fc8a 	bl	8008cfc <vPortExitCritical>
}
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a3f0:	2401      	movs	r4, #1
 800a3f2:	e7f7      	b.n	800a3e4 <xTaskCheckForTimeOut+0x68>
 800a3f4:	200154a8 	.word	0x200154a8
 800a3f8:	20015464 	.word	0x20015464

0800a3fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a3fc:	4b01      	ldr	r3, [pc, #4]	; (800a404 <vTaskMissedYield+0x8>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]
}
 800a402:	4770      	bx	lr
 800a404:	200154ac 	.word	0x200154ac

0800a408 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a408:	4b01      	ldr	r3, [pc, #4]	; (800a410 <xTaskGetCurrentTaskHandle+0x8>)
 800a40a:	6818      	ldr	r0, [r3, #0]
	}
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20014fb4 	.word	0x20014fb4

0800a414 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <xTaskGetSchedulerState+0x18>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	b133      	cbz	r3, 800a428 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <xTaskGetSchedulerState+0x1c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bf0c      	ite	eq
 800a422:	2002      	moveq	r0, #2
 800a424:	2000      	movne	r0, #0
 800a426:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a428:	2001      	movs	r0, #1
	}
 800a42a:	4770      	bx	lr
 800a42c:	2001547c 	.word	0x2001547c
 800a430:	2001542c 	.word	0x2001542c

0800a434 <xTaskPriorityInherit>:
	{
 800a434:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800a436:	4604      	mov	r4, r0
 800a438:	b340      	cbz	r0, 800a48c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a43a:	4d1b      	ldr	r5, [pc, #108]	; (800a4a8 <xTaskPriorityInherit+0x74>)
 800a43c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a43e:	682a      	ldr	r2, [r5, #0]
 800a440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a442:	4293      	cmp	r3, r2
 800a444:	d228      	bcs.n	800a498 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a446:	6982      	ldr	r2, [r0, #24]
 800a448:	2a00      	cmp	r2, #0
 800a44a:	db04      	blt.n	800a456 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44c:	682a      	ldr	r2, [r5, #0]
 800a44e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a450:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a454:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a456:	2214      	movs	r2, #20
 800a458:	4e14      	ldr	r6, [pc, #80]	; (800a4ac <xTaskPriorityInherit+0x78>)
 800a45a:	fb02 6303 	mla	r3, r2, r3, r6
 800a45e:	6962      	ldr	r2, [r4, #20]
 800a460:	429a      	cmp	r2, r3
 800a462:	d115      	bne.n	800a490 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a464:	1d21      	adds	r1, r4, #4
 800a466:	4608      	mov	r0, r1
 800a468:	9101      	str	r1, [sp, #4]
 800a46a:	f7fe fbaa 	bl	8008bc2 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a46e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a470:	4a0f      	ldr	r2, [pc, #60]	; (800a4b0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a474:	6810      	ldr	r0, [r2, #0]
 800a476:	9901      	ldr	r1, [sp, #4]
 800a478:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a47a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a47c:	d900      	bls.n	800a480 <xTaskPriorityInherit+0x4c>
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	2014      	movs	r0, #20
 800a482:	fb00 6003 	mla	r0, r0, r3, r6
 800a486:	f7fe fb79 	bl	8008b7c <vListInsertEnd>
				xReturn = pdTRUE;
 800a48a:	2001      	movs	r0, #1
	}
 800a48c:	b002      	add	sp, #8
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a496:	e7f8      	b.n	800a48a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a49c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a49e:	42a0      	cmp	r0, r4
 800a4a0:	bf2c      	ite	cs
 800a4a2:	2000      	movcs	r0, #0
 800a4a4:	2001      	movcc	r0, #1
 800a4a6:	e7f1      	b.n	800a48c <xTaskPriorityInherit+0x58>
 800a4a8:	20014fb4 	.word	0x20014fb4
 800a4ac:	20014fc0 	.word	0x20014fc0
 800a4b0:	20015434 	.word	0x20015434

0800a4b4 <xTaskPriorityDisinherit>:
	{
 800a4b4:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800a4b6:	b910      	cbnz	r0, 800a4be <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800a4b8:	2000      	movs	r0, #0
	}
 800a4ba:	b002      	add	sp, #8
 800a4bc:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a4be:	4b1e      	ldr	r3, [pc, #120]	; (800a538 <xTaskPriorityDisinherit+0x84>)
 800a4c0:	681c      	ldr	r4, [r3, #0]
 800a4c2:	4284      	cmp	r4, r0
 800a4c4:	d00a      	beq.n	800a4dc <xTaskPriorityDisinherit+0x28>
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	b672      	cpsid	i
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	b662      	cpsie	i
 800a4da:	e7fe      	b.n	800a4da <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a4de:	b953      	cbnz	r3, 800a4f6 <xTaskPriorityDisinherit+0x42>
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	b672      	cpsid	i
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	b662      	cpsie	i
 800a4f4:	e7fe      	b.n	800a4f4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a4f8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800a4fc:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4fe:	4291      	cmp	r1, r2
 800a500:	d0da      	beq.n	800a4b8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1d8      	bne.n	800a4b8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a506:	1d21      	adds	r1, r4, #4
 800a508:	4608      	mov	r0, r1
 800a50a:	9101      	str	r1, [sp, #4]
 800a50c:	f7fe fb59 	bl	8008bc2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a510:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800a512:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a518:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a51c:	4a07      	ldr	r2, [pc, #28]	; (800a53c <xTaskPriorityDisinherit+0x88>)
 800a51e:	6810      	ldr	r0, [r2, #0]
 800a520:	4283      	cmp	r3, r0
 800a522:	d900      	bls.n	800a526 <xTaskPriorityDisinherit+0x72>
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	4a06      	ldr	r2, [pc, #24]	; (800a540 <xTaskPriorityDisinherit+0x8c>)
 800a528:	2014      	movs	r0, #20
 800a52a:	fb00 2003 	mla	r0, r0, r3, r2
 800a52e:	f7fe fb25 	bl	8008b7c <vListInsertEnd>
					xReturn = pdTRUE;
 800a532:	2001      	movs	r0, #1
		return xReturn;
 800a534:	e7c1      	b.n	800a4ba <xTaskPriorityDisinherit+0x6>
 800a536:	bf00      	nop
 800a538:	20014fb4 	.word	0x20014fb4
 800a53c:	20015434 	.word	0x20015434
 800a540:	20014fc0 	.word	0x20014fc0

0800a544 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a544:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800a546:	4604      	mov	r4, r0
 800a548:	2800      	cmp	r0, #0
 800a54a:	d048      	beq.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800a54c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a54e:	b952      	cbnz	r2, 800a566 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	b672      	cpsid	i
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	b662      	cpsie	i
 800a564:	e7fe      	b.n	800a564 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a566:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a568:	4299      	cmp	r1, r3
 800a56a:	bf38      	it	cc
 800a56c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a56e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a570:	428b      	cmp	r3, r1
 800a572:	d034      	beq.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a574:	2a01      	cmp	r2, #1
 800a576:	d132      	bne.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800a578:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	4282      	cmp	r2, r0
 800a57e:	d10a      	bne.n	800a596 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	b672      	cpsid	i
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	b662      	cpsie	i
 800a594:	e7fe      	b.n	800a594 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a596:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a598:	4d13      	ldr	r5, [pc, #76]	; (800a5e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a59a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a59c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800a5a0:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5a2:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a6:	bfa8      	it	ge
 800a5a8:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5ac:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ae:	bfa8      	it	ge
 800a5b0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d113      	bne.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b6:	1d01      	adds	r1, r0, #4
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	9101      	str	r1, [sp, #4]
 800a5bc:	f7fe fb01 	bl	8008bc2 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800a5c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5c4:	6810      	ldr	r0, [r2, #0]
 800a5c6:	9901      	ldr	r1, [sp, #4]
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	d900      	bls.n	800a5ce <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	2014      	movs	r0, #20
 800a5d0:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800a5d4:	b003      	add	sp, #12
 800a5d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800a5da:	f7fe bacf 	b.w	8008b7c <vListInsertEnd>
	}
 800a5de:	b003      	add	sp, #12
 800a5e0:	bd30      	pop	{r4, r5, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20014fb4 	.word	0x20014fb4
 800a5e8:	20014fc0 	.word	0x20014fc0
 800a5ec:	20015434 	.word	0x20015434

0800a5f0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a5f0:	4b04      	ldr	r3, [pc, #16]	; (800a604 <pvTaskIncrementMutexHeldCount+0x14>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	b11a      	cbz	r2, 800a5fe <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a5f6:	6819      	ldr	r1, [r3, #0]
 800a5f8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800a5fe:	6818      	ldr	r0, [r3, #0]
	}
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20014fb4 	.word	0x20014fb4

0800a608 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a60a:	4c11      	ldr	r4, [pc, #68]	; (800a650 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800a60c:	f7fe fb52 	bl	8008cb4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	b9bd      	cbnz	r5, 800a644 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a614:	4f0f      	ldr	r7, [pc, #60]	; (800a654 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800a616:	4e10      	ldr	r6, [pc, #64]	; (800a658 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800a618:	4638      	mov	r0, r7
 800a61a:	f7fe faa1 	bl	8008b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a61e:	4630      	mov	r0, r6
 800a620:	f7fe fa9e 	bl	8008b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a626:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <prvCheckForValidListAndQueue+0x58>)
 800a628:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800a62a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a62c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800a62e:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <prvCheckForValidListAndQueue+0x5c>)
 800a630:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <prvCheckForValidListAndQueue+0x60>)
 800a634:	9500      	str	r5, [sp, #0]
 800a636:	f7fe fd89 	bl	800914c <xQueueGenericCreateStatic>
 800a63a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a63c:	b110      	cbz	r0, 800a644 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a63e:	490b      	ldr	r1, [pc, #44]	; (800a66c <prvCheckForValidListAndQueue+0x64>)
 800a640:	f7ff f9c4 	bl	80099cc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800a644:	b003      	add	sp, #12
 800a646:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800a64a:	f7fe bb57 	b.w	8008cfc <vPortExitCritical>
 800a64e:	bf00      	nop
 800a650:	200155d4 	.word	0x200155d4
 800a654:	20015558 	.word	0x20015558
 800a658:	2001556c 	.word	0x2001556c
 800a65c:	200154b0 	.word	0x200154b0
 800a660:	200154b8 	.word	0x200154b8
 800a664:	200154b4 	.word	0x200154b4
 800a668:	20015584 	.word	0x20015584
 800a66c:	0802e7d5 	.word	0x0802e7d5

0800a670 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800a670:	4291      	cmp	r1, r2
{
 800a672:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a674:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a676:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a678:	d80a      	bhi.n	800a690 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a67a:	1ad2      	subs	r2, r2, r3
 800a67c:	6983      	ldr	r3, [r0, #24]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d20d      	bcs.n	800a69e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a682:	1d01      	adds	r1, r0, #4
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	f7fe fa84 	bl	8008b94 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a68c:	2000      	movs	r0, #0
}
 800a68e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a690:	429a      	cmp	r2, r3
 800a692:	d201      	bcs.n	800a698 <prvInsertTimerInActiveList+0x28>
 800a694:	4299      	cmp	r1, r3
 800a696:	d202      	bcs.n	800a69e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a698:	1d01      	adds	r1, r0, #4
 800a69a:	4b03      	ldr	r3, [pc, #12]	; (800a6a8 <prvInsertTimerInActiveList+0x38>)
 800a69c:	e7f3      	b.n	800a686 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800a69e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a6a0:	e7f5      	b.n	800a68e <prvInsertTimerInActiveList+0x1e>
 800a6a2:	bf00      	nop
 800a6a4:	200154b4 	.word	0x200154b4
 800a6a8:	200154b0 	.word	0x200154b0

0800a6ac <xTimerCreateTimerTask>:
{
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a6b0:	f7ff ffaa 	bl	800a608 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a6b4:	4b13      	ldr	r3, [pc, #76]	; (800a704 <xTimerCreateTimerTask+0x58>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	b1b3      	cbz	r3, 800a6e8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6ba:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6bc:	aa07      	add	r2, sp, #28
 800a6be:	a906      	add	r1, sp, #24
 800a6c0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6c2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6c6:	f7fe f949 	bl	800895c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	9a07      	ldr	r2, [sp, #28]
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	9b06      	ldr	r3, [sp, #24]
 800a6d2:	490d      	ldr	r1, [pc, #52]	; (800a708 <xTimerCreateTimerTask+0x5c>)
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	480c      	ldr	r0, [pc, #48]	; (800a70c <xTimerCreateTimerTask+0x60>)
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4623      	mov	r3, r4
 800a6de:	f7ff fb53 	bl	8009d88 <xTaskCreateStatic>
 800a6e2:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <xTimerCreateTimerTask+0x64>)
 800a6e4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a6e6:	b950      	cbnz	r0, 800a6fe <xTimerCreateTimerTask+0x52>
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	b672      	cpsid	i
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	b662      	cpsie	i
	configASSERT( xReturn );
 800a6fc:	e7fe      	b.n	800a6fc <xTimerCreateTimerTask+0x50>
}
 800a6fe:	2001      	movs	r0, #1
 800a700:	b008      	add	sp, #32
 800a702:	bd10      	pop	{r4, pc}
 800a704:	200155d4 	.word	0x200155d4
 800a708:	0802e7da 	.word	0x0802e7da
 800a70c:	0800a81d 	.word	0x0800a81d
 800a710:	200155d8 	.word	0x200155d8

0800a714 <xTimerGenericCommand>:
{
 800a714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a716:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800a718:	4604      	mov	r4, r0
{
 800a71a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800a71c:	b950      	cbnz	r0, 800a734 <xTimerGenericCommand+0x20>
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	b672      	cpsid	i
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	b662      	cpsie	i
 800a732:	e7fe      	b.n	800a732 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800a734:	4d0c      	ldr	r5, [pc, #48]	; (800a768 <xTimerGenericCommand+0x54>)
 800a736:	6828      	ldr	r0, [r5, #0]
 800a738:	b178      	cbz	r0, 800a75a <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a73a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a73c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a73e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a742:	dc0c      	bgt.n	800a75e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a744:	f7ff fe66 	bl	800a414 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a748:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a74a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a74c:	4669      	mov	r1, sp
 800a74e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a750:	bf0c      	ite	eq
 800a752:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a754:	461a      	movne	r2, r3
 800a756:	f7fe fd7e 	bl	8009256 <xQueueGenericSend>
}
 800a75a:	b004      	add	sp, #16
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a75e:	2300      	movs	r3, #0
 800a760:	4669      	mov	r1, sp
 800a762:	f7fe fe85 	bl	8009470 <xQueueGenericSendFromISR>
 800a766:	e7f8      	b.n	800a75a <xTimerGenericCommand+0x46>
 800a768:	200155d4 	.word	0x200155d4

0800a76c <prvSampleTimeNow>:
{
 800a76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800a770:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a818 <prvSampleTimeNow+0xac>
{
 800a774:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800a776:	f7ff fb7b 	bl	8009e70 <xTaskGetTickCount>
 800a77a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800a77c:	f8d8 3000 	ldr.w	r3, [r8]
 800a780:	4283      	cmp	r3, r0
 800a782:	d942      	bls.n	800a80a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a784:	4f22      	ldr	r7, [pc, #136]	; (800a810 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a786:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	b95a      	cbnz	r2, 800a7a8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800a790:	4a20      	ldr	r2, [pc, #128]	; (800a814 <prvSampleTimeNow+0xa8>)
 800a792:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a794:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800a796:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800a798:	6039      	str	r1, [r7, #0]
}
 800a79a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800a79c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800a79e:	f8c8 5000 	str.w	r5, [r8]
}
 800a7a2:	b004      	add	sp, #16
 800a7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7a8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7aa:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7ac:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b0:	1d21      	adds	r1, r4, #4
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	9103      	str	r1, [sp, #12]
 800a7b6:	f7fe fa04 	bl	8008bc2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ba:	6a23      	ldr	r3, [r4, #32]
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a7c4:	9903      	ldr	r1, [sp, #12]
 800a7c6:	f013 0f04 	tst.w	r3, #4
 800a7ca:	d0de      	beq.n	800a78a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7cc:	69a3      	ldr	r3, [r4, #24]
 800a7ce:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800a7d0:	459a      	cmp	sl, r3
 800a7d2:	d205      	bcs.n	800a7e0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7d4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7d6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7d8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7da:	f7fe f9db 	bl	8008b94 <vListInsert>
 800a7de:	e7d4      	b.n	800a78a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f8cd 9000 	str.w	r9, [sp]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	f7ff ff92 	bl	800a714 <xTimerGenericCommand>
				configASSERT( xResult );
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1ca      	bne.n	800a78a <prvSampleTimeNow+0x1e>
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	b672      	cpsid	i
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	b662      	cpsie	i
 800a808:	e7fe      	b.n	800a808 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	e7c5      	b.n	800a79a <prvSampleTimeNow+0x2e>
 800a80e:	bf00      	nop
 800a810:	200154b0 	.word	0x200154b0
 800a814:	200154b4 	.word	0x200154b4
 800a818:	20015580 	.word	0x20015580

0800a81c <prvTimerTask>:
{
 800a81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a820:	4d71      	ldr	r5, [pc, #452]	; (800a9e8 <prvTimerTask+0x1cc>)
{
 800a822:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a824:	4e71      	ldr	r6, [pc, #452]	; (800a9ec <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	f8d3 8000 	ldr.w	r8, [r3]
 800a82c:	f1b8 0f00 	cmp.w	r8, #0
 800a830:	d037      	beq.n	800a8a2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a832:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a834:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a836:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800a83a:	f7ff fb11 	bl	8009e60 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a83e:	a804      	add	r0, sp, #16
 800a840:	f7ff ff94 	bl	800a76c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a844:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a846:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d16b      	bne.n	800a924 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a84c:	2c00      	cmp	r4, #0
 800a84e:	d14e      	bne.n	800a8ee <prvTimerTask+0xd2>
 800a850:	4540      	cmp	r0, r8
 800a852:	d352      	bcc.n	800a8fa <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800a854:	f7ff fbaa 	bl	8009fac <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a85e:	1d38      	adds	r0, r7, #4
 800a860:	f7fe f9af 	bl	8008bc2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a868:	0758      	lsls	r0, r3, #29
 800a86a:	d51c      	bpl.n	800a8a6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	4643      	mov	r3, r8
 800a870:	464a      	mov	r2, r9
 800a872:	4638      	mov	r0, r7
 800a874:	4441      	add	r1, r8
 800a876:	f7ff fefb 	bl	800a670 <prvInsertTimerInActiveList>
 800a87a:	b1c0      	cbz	r0, 800a8ae <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a87c:	4623      	mov	r3, r4
 800a87e:	4642      	mov	r2, r8
 800a880:	4621      	mov	r1, r4
 800a882:	4638      	mov	r0, r7
 800a884:	9400      	str	r4, [sp, #0]
 800a886:	f7ff ff45 	bl	800a714 <xTimerGenericCommand>
			configASSERT( xResult );
 800a88a:	b980      	cbnz	r0, 800a8ae <prvTimerTask+0x92>
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	b672      	cpsid	i
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	b662      	cpsie	i
 800a8a0:	e7fe      	b.n	800a8a0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8a2:	2401      	movs	r4, #1
 800a8a4:	e7c9      	b.n	800a83a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8a6:	f023 0301 	bic.w	r3, r3, #1
 800a8aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	a904      	add	r1, sp, #16
 800a8b8:	6830      	ldr	r0, [r6, #0]
 800a8ba:	f7fe fe9e 	bl	80095fa <xQueueReceive>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0b1      	beq.n	800a826 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8c2:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8c4:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	db2f      	blt.n	800a92a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8ca:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8cc:	6963      	ldr	r3, [r4, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d132      	bne.n	800a938 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8d2:	a803      	add	r0, sp, #12
 800a8d4:	f7ff ff4a 	bl	800a76c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a8d8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8da:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d8e9      	bhi.n	800a8b4 <prvTimerTask+0x98>
 800a8e0:	e8df f003 	tbb	[pc, r3]
 800a8e4:	592e2e2e 	.word	0x592e2e2e
 800a8e8:	2e2e7a60 	.word	0x2e2e7a60
 800a8ec:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8ee:	4b40      	ldr	r3, [pc, #256]	; (800a9f0 <prvTimerTask+0x1d4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681c      	ldr	r4, [r3, #0]
 800a8f4:	fab4 f484 	clz	r4, r4
 800a8f8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	eba8 0109 	sub.w	r1, r8, r9
 800a900:	6830      	ldr	r0, [r6, #0]
 800a902:	f7ff f8a2 	bl	8009a4a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a906:	f7ff fb51 	bl	8009fac <xTaskResumeAll>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d1d2      	bne.n	800a8b4 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800a90e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a916:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	e7c7      	b.n	800a8b4 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800a924:	f7ff fb42 	bl	8009fac <xTaskResumeAll>
}
 800a928:	e7c4      	b.n	800a8b4 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a92a:	9b05      	ldr	r3, [sp, #20]
 800a92c:	9907      	ldr	r1, [sp, #28]
 800a92e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dbbe      	blt.n	800a8b4 <prvTimerTask+0x98>
 800a936:	e7c8      	b.n	800a8ca <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a938:	1d20      	adds	r0, r4, #4
 800a93a:	f7fe f942 	bl	8008bc2 <uxListRemove>
 800a93e:	e7c8      	b.n	800a8d2 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a940:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a944:	4620      	mov	r0, r4
 800a946:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a948:	f043 0301 	orr.w	r3, r3, #1
 800a94c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a950:	9b05      	ldr	r3, [sp, #20]
 800a952:	4419      	add	r1, r3
 800a954:	f7ff fe8c 	bl	800a670 <prvInsertTimerInActiveList>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d0ab      	beq.n	800a8b4 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a95c:	6a23      	ldr	r3, [r4, #32]
 800a95e:	4620      	mov	r0, r4
 800a960:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a962:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a966:	0759      	lsls	r1, r3, #29
 800a968:	d5a4      	bpl.n	800a8b4 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a96a:	69a2      	ldr	r2, [r4, #24]
 800a96c:	2300      	movs	r3, #0
 800a96e:	9905      	ldr	r1, [sp, #20]
 800a970:	4620      	mov	r0, r4
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	440a      	add	r2, r1
 800a976:	4619      	mov	r1, r3
 800a978:	f7ff fecc 	bl	800a714 <xTimerGenericCommand>
							configASSERT( xResult );
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d199      	bne.n	800a8b4 <prvTimerTask+0x98>
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	b672      	cpsid	i
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	b662      	cpsie	i
 800a994:	e7fe      	b.n	800a994 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a996:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a99a:	f023 0301 	bic.w	r3, r3, #1
 800a99e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a9a2:	e787      	b.n	800a8b4 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a9a8:	f043 0301 	orr.w	r3, r3, #1
 800a9ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9b0:	9905      	ldr	r1, [sp, #20]
 800a9b2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9b4:	b951      	cbnz	r1, 800a9cc <prvTimerTask+0x1b0>
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	b672      	cpsid	i
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	b662      	cpsie	i
 800a9ca:	e7fe      	b.n	800a9ca <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4401      	add	r1, r0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f7ff fe4d 	bl	800a670 <prvInsertTimerInActiveList>
					break;
 800a9d6:	e76d      	b.n	800a8b4 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a9dc:	079a      	lsls	r2, r3, #30
 800a9de:	d4dc      	bmi.n	800a99a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7fe f881 	bl	8008ae8 <vPortFree>
 800a9e6:	e765      	b.n	800a8b4 <prvTimerTask+0x98>
 800a9e8:	200154b0 	.word	0x200154b0
 800a9ec:	200155d4 	.word	0x200155d4
 800a9f0:	200154b4 	.word	0x200154b4

0800a9f4 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800a9f4:	6843      	ldr	r3, [r0, #4]
{
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800a9fa:	b14b      	cbz	r3, 800aa10 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b12b      	cbz	r3, 800aa12 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800aa06:	23c8      	movs	r3, #200	; 0xc8
 800aa08:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 800aa10:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800aa12:	2364      	movs	r3, #100	; 0x64
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	e7fb      	b.n	800aa10 <jpeg_abort+0x1c>

0800aa18 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800aa18:	6843      	ldr	r3, [r0, #4]
{
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800aa1e:	b10b      	cbz	r3, 800aa24 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 800aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa22:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800aa24:	2300      	movs	r3, #0
 800aa26:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800aa28:	6163      	str	r3, [r4, #20]
}
 800aa2a:	bd10      	pop	{r4, pc}

0800aa2c <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800aa2c:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800aa2e:	6843      	ldr	r3, [r0, #4]
 800aa30:	2284      	movs	r2, #132	; 0x84
 800aa32:	2100      	movs	r1, #0
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 800aa3e:	bd08      	pop	{r3, pc}

0800aa40 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800aa40:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800aa42:	6843      	ldr	r3, [r0, #4]
 800aa44:	f44f 728c 	mov.w	r2, #280	; 0x118
 800aa48:	2100      	movs	r1, #0
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 800aa54:	bd08      	pop	{r3, pc}

0800aa56 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800aa56:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 800aa58:	2950      	cmp	r1, #80	; 0x50
{
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800aa60:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800aa62:	d007      	beq.n	800aa74 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800aa64:	6803      	ldr	r3, [r0, #0]
 800aa66:	260d      	movs	r6, #13
 800aa68:	2250      	movs	r2, #80	; 0x50
 800aa6a:	61d9      	str	r1, [r3, #28]
 800aa6c:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800aa74:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 800aa78:	d009      	beq.n	800aa8e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	2116      	movs	r1, #22
 800aa7e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800aa82:	4620      	mov	r0, r4
 800aa84:	61dd      	str	r5, [r3, #28]
 800aa86:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800aa8e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800aa92:	2100      	movs	r1, #0
 800aa94:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800aa96:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800aa98:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800aa9a:	f020 f847 	bl	802ab2c <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800aa9e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800aaa0:	4620      	mov	r0, r4
    cinfo->err = err;
 800aaa2:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800aaa4:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800aaa6:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 800aaa8:	f00b feac 	bl	8016804 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800aaac:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800aaae:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 800aab0:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800aab2:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800aab4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800aab8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800aabc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800aac0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800aac4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800aac8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800aacc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800aad0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 800aad4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 800aad8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800aadc:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 800aae0:	f005 f8ba 	bl	800fc58 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800aae4:	4620      	mov	r0, r4
 800aae6:	f003 fdbd 	bl	800e664 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800aaea:	23c8      	movs	r3, #200	; 0xc8
 800aaec:	6163      	str	r3, [r4, #20]
}
 800aaee:	bd70      	pop	{r4, r5, r6, pc}

0800aaf0 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800aaf0:	f7ff bf92 	b.w	800aa18 <jpeg_destroy>

0800aaf4 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 800aaf4:	6942      	ldr	r2, [r0, #20]
 800aaf6:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800aafe:	2b0a      	cmp	r3, #10
 800ab00:	f200 80a5 	bhi.w	800ac4e <jpeg_consume_input+0x15a>
 800ab04:	e8df f003 	tbb	[pc, r3]
 800ab08:	9dab1006 	.word	0x9dab1006
 800ab0c:	9d9d9d9d 	.word	0x9d9d9d9d
 800ab10:	a39d      	.short	0xa39d
 800ab12:	9d          	.byte	0x9d
 800ab13:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 800ab14:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800ab1c:	69a3      	ldr	r3, [r4, #24]
 800ab1e:	4620      	mov	r0, r4
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800ab24:	23c9      	movs	r3, #201	; 0xc9
 800ab26:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ab28:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800ab32:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ab34:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800ab36:	d146      	bne.n	800abc6 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 800ab38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab3a:	2d03      	cmp	r5, #3
 800ab3c:	d007      	beq.n	800ab4e <jpeg_consume_input+0x5a>
 800ab3e:	2d04      	cmp	r5, #4
 800ab40:	d064      	beq.n	800ac0c <jpeg_consume_input+0x118>
 800ab42:	2d01      	cmp	r5, #1
 800ab44:	d17b      	bne.n	800ac3e <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800ab46:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800ab4a:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 800ab4c:	e01c      	b.n	800ab88 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 800ab4e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800ab52:	b10b      	cbz	r3, 800ab58 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800ab54:	2303      	movs	r3, #3
 800ab56:	e056      	b.n	800ac06 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 800ab58:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d034      	beq.n	800abca <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 800ab60:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	d04d      	beq.n	800ac04 <jpeg_consume_input+0x110>
 800ab68:	2a01      	cmp	r2, #1
 800ab6a:	d008      	beq.n	800ab7e <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	2174      	movs	r1, #116	; 0x74
 800ab70:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800ab72:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f04f 31ff 	mov.w	r1, #4294967295
 800ab7c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800ab7e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 800ab82:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 800ab84:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800ab88:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 800ab8c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800ab8e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 800ab90:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 800ab94:	4b33      	ldr	r3, [pc, #204]	; (800ac64 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 800ab96:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800ab9a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800ab9e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 800aba0:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800aba2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800aba6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800abaa:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 800abac:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 800abae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 800abb2:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 800abb4:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 800abb8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 800abbc:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 800abc0:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 800abc2:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 800abc4:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800abc6:	4630      	mov	r0, r6
 800abc8:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800abca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800abce:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 800abd0:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800abd2:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800abd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800abd8:	d10e      	bne.n	800abf8 <jpeg_consume_input+0x104>
 800abda:	2902      	cmp	r1, #2
 800abdc:	d101      	bne.n	800abe2 <jpeg_consume_input+0xee>
 800abde:	2a03      	cmp	r2, #3
 800abe0:	d0b8      	beq.n	800ab54 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	621a      	str	r2, [r3, #32]
 800abe6:	2271      	movs	r2, #113	; 0x71
 800abe8:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800abec:	615a      	str	r2, [r3, #20]
 800abee:	2101      	movs	r1, #1
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4620      	mov	r0, r4
 800abf4:	4798      	blx	r3
 800abf6:	e7ad      	b.n	800ab54 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800abf8:	2852      	cmp	r0, #82	; 0x52
 800abfa:	d1f2      	bne.n	800abe2 <jpeg_consume_input+0xee>
 800abfc:	2947      	cmp	r1, #71	; 0x47
 800abfe:	d1f0      	bne.n	800abe2 <jpeg_consume_input+0xee>
 800ac00:	2a42      	cmp	r2, #66	; 0x42
 800ac02:	d1ee      	bne.n	800abe2 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 800ac04:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800ac06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ac0a:	e7ba      	b.n	800ab82 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 800ac0c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800ac10:	b193      	cbz	r3, 800ac38 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 800ac12:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800ac16:	b17a      	cbz	r2, 800ac38 <jpeg_consume_input+0x144>
 800ac18:	2a02      	cmp	r2, #2
 800ac1a:	d008      	beq.n	800ac2e <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	2174      	movs	r1, #116	; 0x74
 800ac20:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800ac22:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f04f 31ff 	mov.w	r1, #4294967295
 800ac2c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 800ac2e:	2305      	movs	r3, #5
 800ac30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 800ac34:	2304      	movs	r3, #4
 800ac36:	e7a5      	b.n	800ab84 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 800ac38:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800ac3c:	e7fa      	b.n	800ac34 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e783      	b.n	800ab4a <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ac42:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 800ac46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ac4e:	6803      	ldr	r3, [r0, #0]
 800ac50:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 800ac52:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ac54:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4798      	blx	r3
 800ac5c:	e7b3      	b.n	800abc6 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 800ac5e:	2601      	movs	r6, #1
  return retcode;
 800ac60:	e7b1      	b.n	800abc6 <jpeg_consume_input+0xd2>
 800ac62:	bf00      	nop
 800ac64:	3ff00000 	.word	0x3ff00000

0800ac68 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800ac68:	6942      	ldr	r2, [r0, #20]
 800ac6a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800ac6e:	2b01      	cmp	r3, #1
{
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4604      	mov	r4, r0
 800ac74:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800ac76:	d905      	bls.n	800ac84 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ac78:	6803      	ldr	r3, [r0, #0]
 800ac7a:	2115      	movs	r1, #21
 800ac7c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800ac84:	4620      	mov	r0, r4
 800ac86:	f7ff ff35 	bl	800aaf4 <jpeg_consume_input>
  switch (retcode) {
 800ac8a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800ac8c:	4605      	mov	r5, r0
  switch (retcode) {
 800ac8e:	d00b      	beq.n	800aca8 <jpeg_read_header+0x40>
 800ac90:	2802      	cmp	r0, #2
 800ac92:	d109      	bne.n	800aca8 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800ac94:	b12e      	cbz	r6, 800aca2 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	2235      	movs	r2, #53	; 0x35
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	615a      	str	r2, [r3, #20]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fea6 	bl	800a9f4 <jpeg_abort>
}
 800aca8:	4628      	mov	r0, r5
 800acaa:	bd70      	pop	{r4, r5, r6, pc}

0800acac <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800acac:	6943      	ldr	r3, [r0, #20]
 800acae:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 800acb2:	2a01      	cmp	r2, #1
{
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800acb8:	d81f      	bhi.n	800acfa <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800acba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800acbc:	bb0a      	cbnz	r2, 800ad02 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800acbe:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800acc2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d204      	bcs.n	800acd2 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800acc8:	6803      	ldr	r3, [r0, #0]
 800acca:	2245      	movs	r2, #69	; 0x45
 800accc:	615a      	str	r2, [r3, #20]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800acd2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800acd6:	4620      	mov	r0, r4
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800acdc:	23d2      	movs	r3, #210	; 0xd2
 800acde:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800ace0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ace4:	695a      	ldr	r2, [r3, #20]
 800ace6:	b1a2      	cbz	r2, 800ad12 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800ace8:	69a3      	ldr	r3, [r4, #24]
 800acea:	4620      	mov	r0, r4
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff fe7f 	bl	800a9f4 <jpeg_abort>
  return TRUE;
 800acf6:	2001      	movs	r0, #1
 800acf8:	e010      	b.n	800ad1c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800acfa:	2bcf      	cmp	r3, #207	; 0xcf
 800acfc:	d0ee      	beq.n	800acdc <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800acfe:	2bd2      	cmp	r3, #210	; 0xd2
 800ad00:	d0ee      	beq.n	800ace0 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	2115      	movs	r1, #21
 800ad06:	4620      	mov	r0, r4
 800ad08:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ad0c:	6813      	ldr	r3, [r2, #0]
 800ad0e:	4798      	blx	r3
 800ad10:	e7e6      	b.n	800ace0 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4620      	mov	r0, r4
 800ad16:	4798      	blx	r3
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1e1      	bne.n	800ace0 <jpeg_finish_decompress+0x34>
}
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800ad1e:	6943      	ldr	r3, [r0, #20]
 800ad20:	2bcc      	cmp	r3, #204	; 0xcc
{
 800ad22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad26:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800ad28:	d008      	beq.n	800ad3c <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800ad2a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 800ad38:	23cc      	movs	r3, #204	; 0xcc
 800ad3a:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ad3c:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 800ad40:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 800ad42:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	b9f3      	cbnz	r3, 800ad88 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800ad4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 800ad4c:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bf14      	ite	ne
 800ad52:	23ce      	movne	r3, #206	; 0xce
 800ad54:	23cd      	moveq	r3, #205	; 0xcd
 800ad56:	6163      	str	r3, [r4, #20]
}
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	b123      	cbz	r3, 800ad6a <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ad60:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800ad62:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ad6a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ad6e:	462a      	mov	r2, r5
 800ad70:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800ad72:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800ad76:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 800ad80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ad84:	42bb      	cmp	r3, r7
 800ad86:	d011      	beq.n	800adac <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 800ad88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800ad8c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800ad8e:	4291      	cmp	r1, r2
 800ad90:	d3e4      	bcc.n	800ad5c <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 800ad92:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800ad96:	4620      	mov	r0, r4
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800ad9c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800ada0:	4620      	mov	r0, r4
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800ada6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800adaa:	e7ca      	b.n	800ad42 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 800adac:	2000      	movs	r0, #0
 800adae:	e7d3      	b.n	800ad58 <output_pass_setup+0x3a>

0800adb0 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 800adb0:	6943      	ldr	r3, [r0, #20]
 800adb2:	2bca      	cmp	r3, #202	; 0xca
{
 800adb4:	b510      	push	{r4, lr}
 800adb6:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800adb8:	d109      	bne.n	800adce <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800adba:	f005 f8f7 	bl	800ffac <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800adbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc0:	b11b      	cbz	r3, 800adca <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800adc2:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 800adc4:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800adc6:	6163      	str	r3, [r4, #20]
}
 800adc8:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800adca:	23cb      	movs	r3, #203	; 0xcb
 800adcc:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800adce:	6962      	ldr	r2, [r4, #20]
 800add0:	2acb      	cmp	r2, #203	; 0xcb
 800add2:	d12c      	bne.n	800ae2e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800add4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	b1fb      	cbz	r3, 800ae1c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	b113      	cbz	r3, 800ade6 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4620      	mov	r0, r4
 800ade4:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800ade6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800adea:	4620      	mov	r0, r4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d0e9      	beq.n	800adc8 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 800adf4:	2802      	cmp	r0, #2
 800adf6:	d011      	beq.n	800ae1c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0ee      	beq.n	800addc <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800adfe:	f020 0002 	bic.w	r0, r0, #2
 800ae02:	2801      	cmp	r0, #1
 800ae04:	d1ea      	bne.n	800addc <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	6899      	ldr	r1, [r3, #8]
 800ae0a:	3201      	adds	r2, #1
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	605a      	str	r2, [r3, #4]
 800ae10:	dbe4      	blt.n	800addc <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 800ae12:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800ae16:	440a      	add	r2, r1
 800ae18:	609a      	str	r2, [r3, #8]
 800ae1a:	e7df      	b.n	800addc <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800ae1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae20:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 800ae24:	4620      	mov	r0, r4
}
 800ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800ae2a:	f7ff bf78 	b.w	800ad1e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800ae2e:	2acc      	cmp	r2, #204	; 0xcc
 800ae30:	d0f8      	beq.n	800ae24 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	2115      	movs	r1, #21
 800ae36:	4620      	mov	r0, r4
 800ae38:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4798      	blx	r3
 800ae40:	e7f0      	b.n	800ae24 <jpeg_start_decompress+0x74>

0800ae42 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800ae42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae44:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800ae46:	6942      	ldr	r2, [r0, #20]
{
 800ae48:	4604      	mov	r4, r0
 800ae4a:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800ae4c:	2acd      	cmp	r2, #205	; 0xcd
 800ae4e:	d005      	beq.n	800ae5c <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ae50:	6803      	ldr	r3, [r0, #0]
 800ae52:	2115      	movs	r1, #21
 800ae54:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800ae5c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ae60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d30a      	bcc.n	800ae7c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	227e      	movs	r2, #126	; 0x7e
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f04f 31ff 	mov.w	r1, #4294967295
 800ae70:	615a      	str	r2, [r3, #20]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4798      	blx	r3
    return 0;
 800ae76:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800ae78:	b003      	add	sp, #12
 800ae7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800ae7c:	68a0      	ldr	r0, [r4, #8]
 800ae7e:	b120      	cbz	r0, 800ae8a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 800ae80:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800ae84:	6803      	ldr	r3, [r0, #0]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4798      	blx	r3
  row_ctr = 0;
 800ae8a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	aa01      	add	r2, sp, #4
 800ae90:	4629      	mov	r1, r5
  row_ctr = 0;
 800ae92:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800ae94:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ae98:	685f      	ldr	r7, [r3, #4]
 800ae9a:	4633      	mov	r3, r6
 800ae9c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800ae9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800aea2:	9801      	ldr	r0, [sp, #4]
 800aea4:	4403      	add	r3, r0
 800aea6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800aeaa:	e7e5      	b.n	800ae78 <jpeg_read_scanlines+0x36>

0800aeac <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800aeac:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800aeae:	6984      	ldr	r4, [r0, #24]
{
 800aeb0:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	b943      	cbnz	r3, 800aec8 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	4798      	blx	r3
 800aeba:	b928      	cbnz	r0, 800aec8 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	2219      	movs	r2, #25
 800aec0:	4628      	mov	r0, r5
 800aec2:	615a      	str	r2, [r3, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4798      	blx	r3
  src->bytes_in_buffer--;
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	6022      	str	r2, [r4, #0]
}
 800aed4:	7818      	ldrb	r0, [r3, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}

0800aed8 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	4680      	mov	r8, r0
 800aede:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800aee0:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800aee4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 800aee8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 800aeec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800aef0:	db20      	blt.n	800af34 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800aef2:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800aef4:	4b2e      	ldr	r3, [pc, #184]	; (800afb0 <arith_decode+0xd8>)
 800aef6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800aefa:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800aefe:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 800af00:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800af04:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 800af08:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800af0c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 800af10:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 800af12:	428d      	cmp	r5, r1
 800af14:	db3c      	blt.n	800af90 <arith_decode+0xb8>
    e->c -= temp;
 800af16:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800af18:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800af1a:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 800af1e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 800af22:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800af24:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 800af26:	dd2e      	ble.n	800af86 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800af28:	ea85 050e 	eor.w	r5, r5, lr
 800af2c:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800af2e:	09c0      	lsrs	r0, r0, #7
 800af30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 800af34:	3901      	subs	r1, #1
 800af36:	2900      	cmp	r1, #0
 800af38:	6121      	str	r1, [r4, #16]
 800af3a:	da1a      	bge.n	800af72 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 800af3c:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 800af40:	b96b      	cbnz	r3, 800af5e <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 800af42:	4640      	mov	r0, r8
 800af44:	f7ff ffb2 	bl	800aeac <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800af48:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800af4a:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800af4c:	d108      	bne.n	800af60 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 800af4e:	4640      	mov	r0, r8
 800af50:	f7ff ffac 	bl	800aeac <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800af54:	28ff      	cmp	r0, #255	; 0xff
 800af56:	d0fa      	beq.n	800af4e <arith_decode+0x76>
	  if (data == 0)
 800af58:	b110      	cbz	r0, 800af60 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 800af5a:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800af5e:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800af60:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800af62:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 800af64:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800af68:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800af6c:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800af6e:	d404      	bmi.n	800af7a <arith_decode+0xa2>
 800af70:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	60e3      	str	r3, [r4, #12]
 800af78:	e7b6      	b.n	800aee8 <arith_decode+0x10>
	if (++e->ct == 0)
 800af7a:	3309      	adds	r3, #9
 800af7c:	6123      	str	r3, [r4, #16]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f7      	bne.n	800af72 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800af82:	60e7      	str	r7, [r4, #12]
 800af84:	e7f5      	b.n	800af72 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800af86:	407d      	eors	r5, r7
 800af88:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800af8a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 800af8e:	e7ce      	b.n	800af2e <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 800af90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800af94:	dacb      	bge.n	800af2e <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800af96:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800af9a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800af9c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800af9e:	dd02      	ble.n	800afa6 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800afa0:	407b      	eors	r3, r7
 800afa2:	7033      	strb	r3, [r6, #0]
 800afa4:	e7f1      	b.n	800af8a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800afa6:	ea83 030e 	eor.w	r3, r3, lr
 800afaa:	7033      	strb	r3, [r6, #0]
 800afac:	e7bf      	b.n	800af2e <arith_decode+0x56>
 800afae:	bf00      	nop
 800afb0:	0802e7e4 	.word	0x0802e7e4

0800afb4 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800afb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800afb8:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800afbc:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 800afc0:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800afc2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800afc6:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800afca:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 808a 	beq.w	800b0e6 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 800afd2:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800afd6:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800afda:	b95a      	cbnz	r2, 800aff4 <start_pass+0x40>
      if (cinfo->Se != 0)
 800afdc:	b1a1      	cbz	r1, 800b008 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	2611      	movs	r6, #17
 800afe2:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800afe6:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800afea:	6258      	str	r0, [r3, #36]	; 0x24
 800afec:	4620      	mov	r0, r4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4798      	blx	r3
 800aff2:	e00f      	b.n	800b014 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800aff4:	428a      	cmp	r2, r1
 800aff6:	dcf2      	bgt.n	800afde <start_pass+0x2a>
 800aff8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800affc:	428b      	cmp	r3, r1
 800affe:	dbee      	blt.n	800afde <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800b000:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b004:	2b01      	cmp	r3, #1
 800b006:	d1ea      	bne.n	800afde <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 800b008:	b117      	cbz	r7, 800b010 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800b00a:	1e7b      	subs	r3, r7, #1
 800b00c:	4283      	cmp	r3, r0
 800b00e:	d1e6      	bne.n	800afde <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b010:	280d      	cmp	r0, #13
 800b012:	dce4      	bgt.n	800afde <start_pass+0x2a>
 800b014:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 800b018:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b01c:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b020:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b024:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b028:	454b      	cmp	r3, r9
 800b02a:	dc1d      	bgt.n	800b068 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b02c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d153      	bne.n	800b0dc <start_pass+0x128>
      if (cinfo->Ss == 0)
 800b034:	2a00      	cmp	r2, #0
 800b036:	d14f      	bne.n	800b0d8 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800b038:	4b63      	ldr	r3, [pc, #396]	; (800b1c8 <start_pass+0x214>)
{
 800b03a:	f04f 0800 	mov.w	r8, #0
 800b03e:	f105 0914 	add.w	r9, r5, #20
 800b042:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b044:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 800b046:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b048:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b04c:	4543      	cmp	r3, r8
 800b04e:	dc63      	bgt.n	800b118 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800b050:	2300      	movs	r3, #0
  entropy->a = 0;
 800b052:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b056:	f06f 030f 	mvn.w	r3, #15
 800b05a:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b05c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800b060:	636b      	str	r3, [r5, #52]	; 0x34
}
 800b062:	b003      	add	sp, #12
 800b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b068:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b06c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b070:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b072:	0230      	lsls	r0, r6, #8
 800b074:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b078:	b162      	cbz	r2, 800b094 <start_pass+0xe0>
 800b07a:	580a      	ldr	r2, [r1, r0]
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	da09      	bge.n	800b094 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	2300      	movs	r3, #0
 800b084:	f04f 31ff 	mov.w	r1, #4294967295
 800b088:	4620      	mov	r0, r4
 800b08a:	61d3      	str	r3, [r2, #28]
 800b08c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800b090:	6852      	ldr	r2, [r2, #4]
 800b092:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b094:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800b098:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800b09c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800b0a0:	42ba      	cmp	r2, r7
 800b0a2:	da02      	bge.n	800b0aa <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b0a4:	f109 0901 	add.w	r9, r9, #1
 800b0a8:	e7ba      	b.n	800b020 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b0aa:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 800b0ae:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b0b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	d008      	beq.n	800b0cc <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	61d7      	str	r7, [r2, #28]
 800b0c4:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800b0c8:	6852      	ldr	r2, [r2, #4]
 800b0ca:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800b0cc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b0d0:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800b0d2:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b0d6:	e7e1      	b.n	800b09c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800b0d8:	4b3c      	ldr	r3, [pc, #240]	; (800b1cc <start_pass+0x218>)
 800b0da:	e7ae      	b.n	800b03a <start_pass+0x86>
      if (cinfo->Ss == 0)
 800b0dc:	b90a      	cbnz	r2, 800b0e2 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800b0de:	4b3c      	ldr	r3, [pc, #240]	; (800b1d0 <start_pass+0x21c>)
 800b0e0:	e7ab      	b.n	800b03a <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800b0e2:	4b3c      	ldr	r3, [pc, #240]	; (800b1d4 <start_pass+0x220>)
 800b0e4:	e7a9      	b.n	800b03a <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b0e6:	b96a      	cbnz	r2, 800b104 <start_pass+0x150>
 800b0e8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800b0ec:	b953      	cbnz	r3, 800b104 <start_pass+0x150>
 800b0ee:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800b0f2:	b93b      	cbnz	r3, 800b104 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800b0f4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b0f8:	2b3f      	cmp	r3, #63	; 0x3f
 800b0fa:	dc0b      	bgt.n	800b114 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800b0fc:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800b100:	4293      	cmp	r3, r2
 800b102:	d007      	beq.n	800b114 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	227d      	movs	r2, #125	; 0x7d
 800b108:	f04f 31ff 	mov.w	r1, #4294967295
 800b10c:	4620      	mov	r0, r4
 800b10e:	615a      	str	r2, [r3, #20]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800b114:	4b30      	ldr	r3, [pc, #192]	; (800b1d8 <start_pass+0x224>)
 800b116:	e790      	b.n	800b03a <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b118:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800b11c:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b120:	b133      	cbz	r3, 800b130 <start_pass+0x17c>
 800b122:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800b126:	bb43      	cbnz	r3, 800b17a <start_pass+0x1c6>
 800b128:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d13a      	bne.n	800b1a6 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 800b130:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b134:	2f0f      	cmp	r7, #15
 800b136:	d906      	bls.n	800b146 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	2232      	movs	r2, #50	; 0x32
 800b13c:	4620      	mov	r0, r4
 800b13e:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800b146:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	b933      	cbnz	r3, 800b15c <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	2240      	movs	r2, #64	; 0x40
 800b152:	2101      	movs	r1, #1
 800b154:	4620      	mov	r0, r4
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4798      	blx	r3
 800b15a:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800b15c:	2240      	movs	r2, #64	; 0x40
 800b15e:	2100      	movs	r1, #0
 800b160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b162:	f01f fce3 	bl	802ab2c <memset>
      entropy->last_dc_val[ci] = 0;
 800b166:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800b16a:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b16e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b172:	b9eb      	cbnz	r3, 800b1b0 <start_pass+0x1fc>
 800b174:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b178:	b1ab      	cbz	r3, 800b1a6 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 800b17a:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800b17e:	2f0f      	cmp	r7, #15
 800b180:	d819      	bhi.n	800b1b6 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 800b182:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800b186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b188:	b93b      	cbnz	r3, 800b19a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800b18a:	6863      	ldr	r3, [r4, #4]
 800b18c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b190:	2101      	movs	r1, #1
 800b192:	4620      	mov	r0, r4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4798      	blx	r3
 800b198:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b19a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b1a2:	f01f fcc3 	bl	802ab2c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b1a6:	f108 0801 	add.w	r8, r8, #1
 800b1aa:	f109 0904 	add.w	r9, r9, #4
 800b1ae:	e74b      	b.n	800b048 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b1b0:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800b1b4:	e7e0      	b.n	800b178 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	2232      	movs	r2, #50	; 0x32
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4798      	blx	r3
 800b1c4:	e7dd      	b.n	800b182 <start_pass+0x1ce>
 800b1c6:	bf00      	nop
 800b1c8:	0800b77f 	.word	0x0800b77f
 800b1cc:	0800b64b 	.word	0x0800b64b
 800b1d0:	0800b5f9 	.word	0x0800b5f9
 800b1d4:	0800b4d3 	.word	0x0800b4d3
 800b1d8:	0800b27f 	.word	0x0800b27f

0800b1dc <process_restart>:
{
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b1e0:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800b1e4:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	4798      	blx	r3
 800b1ea:	b928      	cbnz	r0, 800b1f8 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	2219      	movs	r2, #25
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	615a      	str	r2, [r3, #20]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4798      	blx	r3
{
 800b1f8:	2600      	movs	r6, #0
 800b1fa:	f105 0714 	add.w	r7, r5, #20
 800b1fe:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b202:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b204:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b208:	42b3      	cmp	r3, r6
 800b20a:	dc0a      	bgt.n	800b222 <process_restart+0x46>
  entropy->c = 0;
 800b20c:	2300      	movs	r3, #0
  entropy->a = 0;
 800b20e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b212:	f06f 030f 	mvn.w	r3, #15
 800b216:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b218:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800b21c:	636b      	str	r3, [r5, #52]	; 0x34
}
 800b21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b222:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800b226:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800b22a:	b12b      	cbz	r3, 800b238 <process_restart+0x5c>
 800b22c:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800b230:	b9ab      	cbnz	r3, 800b25e <process_restart+0x82>
 800b232:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800b236:	b9e3      	cbnz	r3, 800b272 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800b238:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b23c:	2240      	movs	r2, #64	; 0x40
 800b23e:	2100      	movs	r1, #0
 800b240:	330e      	adds	r3, #14
 800b242:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b246:	f01f fc71 	bl	802ab2c <memset>
      entropy->last_dc_val[ci] = 0;
 800b24a:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800b24e:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800b252:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b256:	b97b      	cbnz	r3, 800b278 <process_restart+0x9c>
 800b258:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b25c:	b14b      	cbz	r3, 800b272 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800b25e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b262:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b266:	2100      	movs	r1, #0
 800b268:	331e      	adds	r3, #30
 800b26a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b26e:	f01f fc5d 	bl	802ab2c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b272:	3601      	adds	r6, #1
 800b274:	3704      	adds	r7, #4
 800b276:	e7c5      	b.n	800b204 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800b278:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800b27c:	e7ee      	b.n	800b25c <process_restart+0x80>

0800b27e <decode_mcu>:
{
 800b27e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800b282:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b286:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b288:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800b28c:	ed2d 8b02 	vpush	{d8}
 800b290:	b087      	sub	sp, #28
 800b292:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b294:	b133      	cbz	r3, 800b2a4 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800b296:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b298:	b90b      	cbnz	r3, 800b29e <decode_mcu+0x20>
      process_restart(cinfo);
 800b29a:	f7ff ff9f 	bl	800b1dc <process_restart>
    entropy->restarts_to_go--;
 800b29e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b2a4:	692b      	ldr	r3, [r5, #16]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	f000 809f 	beq.w	800b3ea <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800b2ac:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b2b0:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800b2b2:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b2b4:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800b2b8:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b2ba:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800b2be:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b2c2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b2c6:	42bb      	cmp	r3, r7
 800b2c8:	f340 808f 	ble.w	800b3ea <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800b2cc:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800b2ce:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800b2d0:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800b2d2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b2d6:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800b2d8:	f852 3b04 	ldr.w	r3, [r2], #4
 800b2dc:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800b2de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b2e2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800b2e6:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b2ea:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800b2ee:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800b2f0:	6952      	ldr	r2, [r2, #20]
 800b2f2:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800b2f6:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b2f8:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800b2fc:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800b2fe:	4631      	mov	r1, r6
 800b300:	f7ff fdea 	bl	800aed8 <arith_decode>
 800b304:	bb68      	cbnz	r0, 800b362 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800b306:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800b30a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b30e:	9a00      	ldr	r2, [sp, #0]
 800b310:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800b312:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 80c4 	beq.w	800b4a4 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800b31c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800b31e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800b320:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800b322:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b326:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800b32a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800b32e:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b332:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800b334:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b338:	4649      	mov	r1, r9
 800b33a:	f7ff fdcd 	bl	800aed8 <arith_decode>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f040 80b0 	bne.w	800b4a4 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800b344:	f109 0101 	add.w	r1, r9, #1
 800b348:	4620      	mov	r0, r4
	k++;
 800b34a:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800b34c:	f7ff fdc4 	bl	800aed8 <arith_decode>
 800b350:	2800      	cmp	r0, #0
 800b352:	d16e      	bne.n	800b432 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800b354:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800b358:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800b35c:	42b2      	cmp	r2, r6
 800b35e:	dcf1      	bgt.n	800b344 <decode_mcu+0xc6>
 800b360:	e038      	b.n	800b3d4 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800b362:	1c71      	adds	r1, r6, #1
 800b364:	4620      	mov	r0, r4
 800b366:	f7ff fdb7 	bl	800aed8 <arith_decode>
      st += 2; st += sign;
 800b36a:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800b36c:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b36e:	4620      	mov	r0, r4
      st += 2; st += sign;
 800b370:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b374:	4651      	mov	r1, sl
 800b376:	f7ff fdaf 	bl	800aed8 <arith_decode>
 800b37a:	4606      	mov	r6, r0
 800b37c:	b140      	cbz	r0, 800b390 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800b37e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800b382:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800b386:	4651      	mov	r1, sl
 800b388:	4620      	mov	r0, r4
 800b38a:	f7ff fda5 	bl	800aed8 <arith_decode>
 800b38e:	b9e8      	cbnz	r0, 800b3cc <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	4423      	add	r3, r4
 800b394:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800b398:	4699      	mov	r9, r3
 800b39a:	2301      	movs	r3, #1
 800b39c:	fa03 f202 	lsl.w	r2, r3, r2
 800b3a0:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800b3a4:	da2a      	bge.n	800b3fc <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800b3a6:	2200      	movs	r2, #0
      st += 14;
 800b3a8:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800b3ac:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b3ae:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800b3b2:	1076      	asrs	r6, r6, #1
 800b3b4:	d130      	bne.n	800b418 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800b3b6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ba:	d137      	bne.n	800b42c <decode_mcu+0x1ae>
 800b3bc:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800b3c0:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b3c4:	444a      	add	r2, r9
 800b3c6:	f8cb 2014 	str.w	r2, [fp, #20]
 800b3ca:	e79e      	b.n	800b30a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800b3cc:	0076      	lsls	r6, r6, #1
 800b3ce:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800b3d2:	d110      	bne.n	800b3f6 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	2275      	movs	r2, #117	; 0x75
 800b3d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3dc:	4620      	mov	r0, r4
 800b3de:	615a      	str	r2, [r3, #20]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800b3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e8:	612b      	str	r3, [r5, #16]
}
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	b007      	add	sp, #28
 800b3ee:	ecbd 8b02 	vpop	{d8}
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800b3f6:	f10a 0a01 	add.w	sl, sl, #1
 800b3fa:	e7c4      	b.n	800b386 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800b3fc:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800b400:	2301      	movs	r3, #1
 800b402:	fa03 f202 	lsl.w	r2, r3, r2
 800b406:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800b40a:	bfcc      	ite	gt
 800b40c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b410:	f108 0201 	addle.w	r2, r8, #1
 800b414:	0092      	lsls	r2, r2, #2
 800b416:	e7c7      	b.n	800b3a8 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800b418:	4620      	mov	r0, r4
 800b41a:	9102      	str	r1, [sp, #8]
 800b41c:	f7ff fd5c 	bl	800aed8 <arith_decode>
 800b420:	9902      	ldr	r1, [sp, #8]
 800b422:	2800      	cmp	r0, #0
 800b424:	d0c5      	beq.n	800b3b2 <decode_mcu+0x134>
 800b426:	ea49 0906 	orr.w	r9, r9, r6
 800b42a:	e7c2      	b.n	800b3b2 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800b42c:	ea6f 0909 	mvn.w	r9, r9
 800b430:	e7c6      	b.n	800b3c0 <decode_mcu+0x142>
      st += 2;
 800b432:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b436:	ee18 1a10 	vmov	r1, s16
 800b43a:	4620      	mov	r0, r4
 800b43c:	f7ff fd4c 	bl	800aed8 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b440:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800b442:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b444:	4620      	mov	r0, r4
 800b446:	f7ff fd47 	bl	800aed8 <arith_decode>
 800b44a:	4680      	mov	r8, r0
 800b44c:	b1a8      	cbz	r0, 800b47a <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800b44e:	4649      	mov	r1, r9
 800b450:	4620      	mov	r0, r4
 800b452:	f7ff fd41 	bl	800aed8 <arith_decode>
 800b456:	b180      	cbz	r0, 800b47a <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b458:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800b45c:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800b460:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b464:	42b1      	cmp	r1, r6
 800b466:	bfac      	ite	ge
 800b468:	21bd      	movge	r1, #189	; 0xbd
 800b46a:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800b46c:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800b470:	4649      	mov	r1, r9
 800b472:	4620      	mov	r0, r4
 800b474:	f7ff fd30 	bl	800aed8 <arith_decode>
 800b478:	b9b0      	cbnz	r0, 800b4a8 <decode_mcu+0x22a>
      st += 14;
 800b47a:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800b47e:	46c1      	mov	r9, r8
      while (m >>= 1)
 800b480:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b484:	d118      	bne.n	800b4b8 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	bb03      	cbnz	r3, 800b4cc <decode_mcu+0x24e>
 800b48a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800b48e:	9b04      	ldr	r3, [sp, #16]
 800b490:	9900      	ldr	r1, [sp, #0]
 800b492:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b496:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800b49a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b49e:	42b3      	cmp	r3, r6
 800b4a0:	f73f af43 	bgt.w	800b32a <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b4a4:	3701      	adds	r7, #1
 800b4a6:	e70c      	b.n	800b2c2 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800b4a8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b4ac:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800b4b0:	d090      	beq.n	800b3d4 <decode_mcu+0x156>
	    st += 1;
 800b4b2:	f109 0901 	add.w	r9, r9, #1
 800b4b6:	e7db      	b.n	800b470 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	9102      	str	r1, [sp, #8]
 800b4bc:	f7ff fd0c 	bl	800aed8 <arith_decode>
 800b4c0:	9902      	ldr	r1, [sp, #8]
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0dc      	beq.n	800b480 <decode_mcu+0x202>
 800b4c6:	ea49 0908 	orr.w	r9, r9, r8
 800b4ca:	e7d9      	b.n	800b480 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800b4cc:	ea6f 0209 	mvn.w	r2, r9
 800b4d0:	e7dd      	b.n	800b48e <decode_mcu+0x210>

0800b4d2 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800b4d2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b4d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b4de:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800b4e2:	ed2d 8b02 	vpush	{d8}
 800b4e6:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800b4e8:	b133      	cbz	r3, 800b4f8 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800b4ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b4ec:	b90b      	cbnz	r3, 800b4f2 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800b4ee:	f7ff fe75 	bl	800b1dc <process_restart>
    entropy->restarts_to_go--;
 800b4f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b4f8:	6933      	ldr	r3, [r6, #16]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	d076      	beq.n	800b5ec <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b4fe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b502:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b504:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800b508:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b50c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b50e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800b512:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b516:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800b518:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b51c:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b520:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b522:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800b524:	2f00      	cmp	r7, #0
 800b526:	dc37      	bgt.n	800b598 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b528:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b52c:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b530:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800b532:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800b536:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b53a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800b53e:	42ab      	cmp	r3, r5
 800b540:	db54      	blt.n	800b5ec <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b542:	1e6b      	subs	r3, r5, #1
 800b544:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800b546:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b54c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b550:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800b554:	dd05      	ble.n	800b562 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800b556:	4651      	mov	r1, sl
 800b558:	4620      	mov	r0, r4
 800b55a:	f7ff fcbd 	bl	800aed8 <arith_decode>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d144      	bne.n	800b5ec <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800b562:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800b566:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800b568:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800b56c:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800b570:	b1d1      	cbz	r1, 800b5a8 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800b572:	f10a 0102 	add.w	r1, sl, #2
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff fcae 	bl	800aed8 <arith_decode>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d0dc      	beq.n	800b53a <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800b580:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800b584:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800b588:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800b58a:	bfb4      	ite	lt
 800b58c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800b58e:	9a01      	ldrge	r2, [sp, #4]
 800b590:	4413      	add	r3, r2
 800b592:	f8a8 3000 	strh.w	r3, [r8]
 800b596:	e7d0      	b.n	800b53a <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800b598:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b59c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1c1      	bne.n	800b528 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800b5a4:	3f01      	subs	r7, #1
 800b5a6:	e7bd      	b.n	800b524 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800b5a8:	f10a 0101 	add.w	r1, sl, #1
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7ff fc93 	bl	800aed8 <arith_decode>
 800b5b2:	b150      	cbz	r0, 800b5ca <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800b5b4:	ee18 1a10 	vmov	r1, s16
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7ff fc8d 	bl	800aed8 <arith_decode>
	  *thiscoef = m1;
 800b5be:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	bf18      	it	ne
 800b5c6:	4613      	movne	r3, r2
 800b5c8:	e7e3      	b.n	800b592 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800b5ca:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800b5ce:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800b5d2:	42aa      	cmp	r2, r5
 800b5d4:	dac5      	bge.n	800b562 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	2275      	movs	r2, #117	; 0x75
 800b5da:	f04f 31ff 	mov.w	r1, #4294967295
 800b5de:	4620      	mov	r0, r4
 800b5e0:	615a      	str	r2, [r3, #20]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800b5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ea:	6133      	str	r3, [r6, #16]
}
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	b005      	add	sp, #20
 800b5f0:	ecbd 8b02 	vpop	{d8}
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5f8 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800b5f8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	4604      	mov	r4, r0
 800b602:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b604:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b608:	b133      	cbz	r3, 800b618 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800b60a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b60c:	b90b      	cbnz	r3, 800b612 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800b60e:	f7ff fde5 	bl	800b1dc <process_restart>
    entropy->restarts_to_go--;
 800b612:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b614:	3b01      	subs	r3, #1
 800b616:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b618:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800b61c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800b61e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b620:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800b622:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b624:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b628:	42ab      	cmp	r3, r5
 800b62a:	dc02      	bgt.n	800b632 <decode_mcu_DC_refine+0x3a>
}
 800b62c:	2001      	movs	r0, #1
 800b62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800b632:	4631      	mov	r1, r6
 800b634:	4620      	mov	r0, r4
 800b636:	f7ff fc4f 	bl	800aed8 <arith_decode>
 800b63a:	b120      	cbz	r0, 800b646 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800b63c:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800b640:	8813      	ldrh	r3, [r2, #0]
 800b642:	433b      	orrs	r3, r7
 800b644:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b646:	3501      	adds	r5, #1
 800b648:	e7ec      	b.n	800b624 <decode_mcu_DC_refine+0x2c>

0800b64a <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800b64a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b64e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b652:	4604      	mov	r4, r0
 800b654:	b087      	sub	sp, #28
 800b656:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b658:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b65c:	b133      	cbz	r3, 800b66c <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800b65e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b660:	b90b      	cbnz	r3, 800b666 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800b662:	f7ff fdbb 	bl	800b1dc <process_restart>
    entropy->restarts_to_go--;
 800b666:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b668:	3b01      	subs	r3, #1
 800b66a:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b66c:	6933      	ldr	r3, [r6, #16]
 800b66e:	3301      	adds	r3, #1
 800b670:	d01d      	beq.n	800b6ae <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800b672:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b674:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800b678:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800b67c:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b67e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b682:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800b68c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b68e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800b692:	42ab      	cmp	r3, r5
 800b694:	db0b      	blt.n	800b6ae <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b696:	1e69      	subs	r1, r5, #1
 800b698:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b69c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800b69e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6a2:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	f7ff fc16 	bl	800aed8 <arith_decode>
 800b6ac:	b1b0      	cbz	r0, 800b6dc <decode_mcu_AC_first+0x92>
}
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	b007      	add	sp, #28
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800b6b6:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800b6b8:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800b6bc:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800b6c0:	42aa      	cmp	r2, r5
 800b6c2:	da0b      	bge.n	800b6dc <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	2275      	movs	r2, #117	; 0x75
 800b6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	615a      	str	r2, [r3, #20]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800b6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d8:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800b6da:	e7e8      	b.n	800b6ae <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800b6dc:	f108 0101 	add.w	r1, r8, #1
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7ff fbf9 	bl	800aed8 <arith_decode>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0e5      	beq.n	800b6b6 <decode_mcu_AC_first+0x6c>
    st += 2;
 800b6ea:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b6ee:	4659      	mov	r1, fp
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7ff fbf1 	bl	800aed8 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b6f6:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800b6f8:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff fbec 	bl	800aed8 <arith_decode>
 800b700:	4607      	mov	r7, r0
 800b702:	b1b0      	cbz	r0, 800b732 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800b704:	4641      	mov	r1, r8
 800b706:	4620      	mov	r0, r4
 800b708:	f7ff fbe6 	bl	800aed8 <arith_decode>
 800b70c:	b188      	cbz	r0, 800b732 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b70e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800b710:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800b712:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800b716:	18e1      	adds	r1, r4, r3
 800b718:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800b71c:	42a9      	cmp	r1, r5
 800b71e:	bfac      	ite	ge
 800b720:	21bd      	movge	r1, #189	; 0xbd
 800b722:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800b724:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800b728:	4641      	mov	r1, r8
 800b72a:	4620      	mov	r0, r4
 800b72c:	f7ff fbd4 	bl	800aed8 <arith_decode>
 800b730:	b988      	cbnz	r0, 800b756 <decode_mcu_AC_first+0x10c>
    st += 14;
 800b732:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800b736:	463a      	mov	r2, r7
    while (m >>= 1)
 800b738:	107f      	asrs	r7, r7, #1
 800b73a:	d113      	bne.n	800b764 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	b9e3      	cbnz	r3, 800b77a <decode_mcu_AC_first+0x130>
 800b740:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800b742:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800b746:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b74a:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800b74c:	408a      	lsls	r2, r1
 800b74e:	9902      	ldr	r1, [sp, #8]
 800b750:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800b754:	e79b      	b.n	800b68e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800b756:	007f      	lsls	r7, r7, #1
 800b758:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800b75c:	d0b2      	beq.n	800b6c4 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800b75e:	f108 0801 	add.w	r8, r8, #1
 800b762:	e7e1      	b.n	800b728 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800b764:	4620      	mov	r0, r4
 800b766:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b76a:	f7ff fbb5 	bl	800aed8 <arith_decode>
 800b76e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800b772:	2800      	cmp	r0, #0
 800b774:	d0e0      	beq.n	800b738 <decode_mcu_AC_first+0xee>
 800b776:	433a      	orrs	r2, r7
 800b778:	e7de      	b.n	800b738 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800b77a:	43d2      	mvns	r2, r2
 800b77c:	e7e1      	b.n	800b742 <decode_mcu_AC_first+0xf8>

0800b77e <decode_mcu_DC_first>:
{
 800b77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800b782:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b786:	b085      	sub	sp, #20
 800b788:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b78a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800b78e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800b790:	b133      	cbz	r3, 800b7a0 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800b792:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b794:	b90b      	cbnz	r3, 800b79a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800b796:	f7ff fd21 	bl	800b1dc <process_restart>
    entropy->restarts_to_go--;
 800b79a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b79c:	3b01      	subs	r3, #1
 800b79e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800b7a0:	6933      	ldr	r3, [r6, #16]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	d073      	beq.n	800b88e <decode_mcu_DC_first+0x110>
 800b7a6:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b7aa:	f04f 0800 	mov.w	r8, #0
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b7b4:	4543      	cmp	r3, r8
 800b7b6:	dd6a      	ble.n	800b88e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800b7b8:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800b7ba:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800b7bc:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800b7be:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b7c2:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800b7c4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b7c8:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800b7ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b7ce:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800b7d2:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b7d6:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800b7da:	6952      	ldr	r2, [r2, #20]
 800b7dc:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800b7e0:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800b7e2:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800b7e6:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7ff fb75 	bl	800aed8 <arith_decode>
 800b7ee:	b958      	cbnz	r0, 800b808 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800b7f0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800b7f4:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b7f8:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800b7fc:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b800:	4093      	lsls	r3, r2
 800b802:	9a02      	ldr	r2, [sp, #8]
 800b804:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b806:	e7d3      	b.n	800b7b0 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800b808:	1c69      	adds	r1, r5, #1
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff fb64 	bl	800aed8 <arith_decode>
      st += 2; st += sign;
 800b810:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800b812:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b814:	4620      	mov	r0, r4
      st += 2; st += sign;
 800b816:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800b81a:	4659      	mov	r1, fp
 800b81c:	f7ff fb5c 	bl	800aed8 <arith_decode>
 800b820:	4605      	mov	r5, r0
 800b822:	b140      	cbz	r0, 800b836 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800b824:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800b828:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800b82c:	4659      	mov	r1, fp
 800b82e:	4620      	mov	r0, r4
 800b830:	f7ff fb52 	bl	800aed8 <arith_decode>
 800b834:	b9e0      	cbnz	r0, 800b870 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	4423      	add	r3, r4
 800b83a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800b83e:	4699      	mov	r9, r3
 800b840:	2301      	movs	r3, #1
 800b842:	fa03 f202 	lsl.w	r2, r3, r2
 800b846:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800b84a:	da27      	bge.n	800b89c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800b84c:	2300      	movs	r3, #0
 800b84e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800b852:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800b856:	46a9      	mov	r9, r5
 800b858:	106d      	asrs	r5, r5, #1
 800b85a:	d12d      	bne.n	800b8b8 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800b85c:	2f00      	cmp	r7, #0
 800b85e:	d135      	bne.n	800b8cc <decode_mcu_DC_first+0x14e>
 800b860:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800b864:	f8da 2014 	ldr.w	r2, [sl, #20]
 800b868:	444a      	add	r2, r9
 800b86a:	f8ca 2014 	str.w	r2, [sl, #20]
 800b86e:	e7c1      	b.n	800b7f4 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800b870:	006d      	lsls	r5, r5, #1
 800b872:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b876:	d10e      	bne.n	800b896 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	2275      	movs	r2, #117	; 0x75
 800b87c:	f04f 31ff 	mov.w	r1, #4294967295
 800b880:	4620      	mov	r0, r4
 800b882:	615a      	str	r2, [r3, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
 800b88c:	6133      	str	r3, [r6, #16]
}
 800b88e:	2001      	movs	r0, #1
 800b890:	b005      	add	sp, #20
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800b896:	f10b 0b01 	add.w	fp, fp, #1
 800b89a:	e7c7      	b.n	800b82c <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800b89c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	fa03 f202 	lsl.w	r2, r3, r2
 800b8a6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800b8aa:	bfcc      	ite	gt
 800b8ac:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800b8ae:	1c7a      	addle	r2, r7, #1
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800b8b6:	e7cc      	b.n	800b852 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	9100      	str	r1, [sp, #0]
 800b8bc:	f7ff fb0c 	bl	800aed8 <arith_decode>
 800b8c0:	9900      	ldr	r1, [sp, #0]
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0c8      	beq.n	800b858 <decode_mcu_DC_first+0xda>
 800b8c6:	ea49 0905 	orr.w	r9, r9, r5
 800b8ca:	e7c5      	b.n	800b858 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800b8cc:	ea6f 0909 	mvn.w	r9, r9
 800b8d0:	e7c8      	b.n	800b864 <decode_mcu_DC_first+0xe6>
	...

0800b8d4 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8d4:	6843      	ldr	r3, [r0, #4]
 800b8d6:	22bc      	movs	r2, #188	; 0xbc
 800b8d8:	2101      	movs	r1, #1
 800b8da:	681b      	ldr	r3, [r3, #0]
{
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8e0:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800b8e2:	4b14      	ldr	r3, [pc, #80]	; (800b934 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8e4:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800b8e6:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800b8ea:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800b8ec:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	f01f f91b 	bl	802ab2c <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800b8f6:	2371      	movs	r3, #113	; 0x71
 800b8f8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800b8fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b900:	b17b      	cbz	r3, 800b922 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b902:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b904:	2101      	movs	r1, #1
 800b906:	6863      	ldr	r3, [r4, #4]
 800b908:	4620      	mov	r0, r4
 800b90a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b90c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4798      	blx	r3
 800b912:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800b914:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b91a:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800b91e:	42ab      	cmp	r3, r5
 800b920:	dc00      	bgt.n	800b924 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800b922:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800b924:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b928:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b92a:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800b92c:	f01f f8fe 	bl	802ab2c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800b930:	e7f2      	b.n	800b918 <jinit_arith_decoder+0x44>
 800b932:	bf00      	nop
 800b934:	0800afb5 	.word	0x0800afb5

0800b938 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800b938:	4770      	bx	lr
	...

0800b93c <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800b93c:	6803      	ldr	r3, [r0, #0]
 800b93e:	227b      	movs	r2, #123	; 0x7b
 800b940:	f04f 31ff 	mov.w	r1, #4294967295
{
 800b944:	b510      	push	{r4, lr}
 800b946:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800b948:	615a      	str	r2, [r3, #20]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800b94e:	69a3      	ldr	r3, [r4, #24]
 800b950:	4a02      	ldr	r2, [pc, #8]	; (800b95c <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800b952:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800b954:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800b956:	2202      	movs	r2, #2
 800b958:	605a      	str	r2, [r3, #4]
}
 800b95a:	bd10      	pop	{r4, pc}
 800b95c:	0802e9ac 	.word	0x0802e9ac

0800b960 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800b960:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800b962:	1e0c      	subs	r4, r1, #0
{
 800b964:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800b966:	dd08      	ble.n	800b97a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800b968:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800b96a:	6869      	ldr	r1, [r5, #4]
 800b96c:	42a1      	cmp	r1, r4
 800b96e:	db05      	blt.n	800b97c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800b970:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800b972:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800b974:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800b976:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800b978:	602b      	str	r3, [r5, #0]
  }
}
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800b97c:	68eb      	ldr	r3, [r5, #12]
 800b97e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800b980:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800b982:	4798      	blx	r3
 800b984:	e7f1      	b.n	800b96a <skip_input_data+0xa>

0800b986 <term_source>:
 800b986:	4770      	bx	lr

0800b988 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	4604      	mov	r4, r0
 800b98c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800b98e:	460d      	mov	r5, r1
 800b990:	b101      	cbz	r1, 800b994 <jpeg_mem_src+0xc>
 800b992:	b92a      	cbnz	r2, 800b9a0 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	222b      	movs	r2, #43	; 0x2b
 800b998:	4620      	mov	r0, r4
 800b99a:	615a      	str	r2, [r3, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800b9a0:	69a1      	ldr	r1, [r4, #24]
 800b9a2:	b929      	cbnz	r1, 800b9b0 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	221c      	movs	r2, #28
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800b9ae:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800b9b0:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800b9b2:	4a06      	ldr	r2, [pc, #24]	; (800b9cc <jpeg_mem_src+0x44>)
 800b9b4:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800b9b6:	4a06      	ldr	r2, [pc, #24]	; (800b9d0 <jpeg_mem_src+0x48>)
 800b9b8:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800b9ba:	4a06      	ldr	r2, [pc, #24]	; (800b9d4 <jpeg_mem_src+0x4c>)
 800b9bc:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800b9be:	4a06      	ldr	r2, [pc, #24]	; (800b9d8 <jpeg_mem_src+0x50>)
 800b9c0:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800b9c2:	4a06      	ldr	r2, [pc, #24]	; (800b9dc <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800b9c4:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800b9c8:	619a      	str	r2, [r3, #24]
}
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	0800b939 	.word	0x0800b939
 800b9d0:	0800b93d 	.word	0x0800b93d
 800b9d4:	0800b961 	.word	0x0800b961
 800b9d8:	0800fbb9 	.word	0x0800fbb9
 800b9dc:	0800b987 	.word	0x0800b987

0800b9e0 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800b9e0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b9e4:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800b9e8:	2a01      	cmp	r2, #1
 800b9ea:	dd05      	ble.n	800b9f8 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800b9ec:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800b9ee:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800b9f0:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800b9f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800b9f6:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800b9f8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800b9fc:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800ba00:	3a01      	subs	r2, #1
 800ba02:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800ba06:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800ba08:	bf34      	ite	cc
 800ba0a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800ba0c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800ba0e:	e7ee      	b.n	800b9ee <start_iMCU_row+0xe>

0800ba10 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800ba16:	f7ff bfe3 	b.w	800b9e0 <start_iMCU_row>

0800ba1a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	4770      	bx	lr

0800ba1e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800ba1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba22:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800ba26:	b08f      	sub	sp, #60	; 0x3c
 800ba28:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ba2a:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ba2e:	465f      	mov	r7, fp
 800ba30:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800ba32:	f04f 0801 	mov.w	r8, #1
 800ba36:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ba3a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ba3e:	42b3      	cmp	r3, r6
 800ba40:	dc13      	bgt.n	800ba6a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ba42:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ba44:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ba48:	69eb      	ldr	r3, [r5, #28]
 800ba4a:	42b3      	cmp	r3, r6
 800ba4c:	dc22      	bgt.n	800ba94 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800ba4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ba52:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800ba56:	3301      	adds	r3, #1
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800ba5e:	d270      	bcs.n	800bb42 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7ff ffbd 	bl	800b9e0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800ba66:	2003      	movs	r0, #3
 800ba68:	e044      	b.n	800baf4 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800ba6a:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800ba6e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800ba70:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800ba72:	6849      	ldr	r1, [r1, #4]
 800ba74:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800ba78:	3112      	adds	r1, #18
 800ba7a:	f8cd 8000 	str.w	r8, [sp]
 800ba7e:	435a      	muls	r2, r3
 800ba80:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800ba84:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ba88:	4620      	mov	r0, r4
 800ba8a:	47d0      	blx	sl
 800ba8c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ba90:	3601      	adds	r6, #1
 800ba92:	e7d2      	b.n	800ba3a <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800ba94:	00b3      	lsls	r3, r6, #2
 800ba96:	696f      	ldr	r7, [r5, #20]
 800ba98:	9308      	str	r3, [sp, #32]
 800ba9a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800ba9e:	42bb      	cmp	r3, r7
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	d94a      	bls.n	800bb3c <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800baa6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800baaa:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800baac:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800baae:	9206      	str	r2, [sp, #24]
 800bab0:	e013      	b.n	800bada <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800bab2:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bab6:	f04f 0c00 	mov.w	ip, #0
 800baba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800babe:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800bac2:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bac4:	fb07 f20e 	mul.w	r2, r7, lr
 800bac8:	01d2      	lsls	r2, r2, #7
 800baca:	9204      	str	r2, [sp, #16]
 800bacc:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800bad0:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bad2:	9a05      	ldr	r2, [sp, #20]
 800bad4:	4562      	cmp	r2, ip
 800bad6:	dc10      	bgt.n	800bafa <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bad8:	3301      	adds	r3, #1
 800bada:	9a06      	ldr	r2, [sp, #24]
 800badc:	429a      	cmp	r2, r3
 800bade:	dce8      	bgt.n	800bab2 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bae0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800bae4:	f105 0120 	add.w	r1, r5, #32
 800bae8:	4620      	mov	r0, r4
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	4798      	blx	r3
 800baee:	bb18      	cbnz	r0, 800bb38 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800baf0:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800baf4:	b00f      	add	sp, #60	; 0x3c
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800bafa:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800bafe:	9904      	ldr	r1, [sp, #16]
 800bb00:	f852 2008 	ldr.w	r2, [r2, r8]
 800bb04:	440a      	add	r2, r1
 800bb06:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bb08:	9a03      	ldr	r2, [sp, #12]
 800bb0a:	f102 0108 	add.w	r1, r2, #8
 800bb0e:	2200      	movs	r2, #0
 800bb10:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800bb14:	9807      	ldr	r0, [sp, #28]
 800bb16:	4596      	cmp	lr, r2
 800bb18:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800bb1c:	dc08      	bgt.n	800bb30 <consume_data+0x112>
 800bb1e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bb20:	f10c 0c01 	add.w	ip, ip, #1
 800bb24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb26:	f108 0804 	add.w	r8, r8, #4
 800bb2a:	4411      	add	r1, r2
 800bb2c:	9103      	str	r1, [sp, #12]
 800bb2e:	e7d0      	b.n	800bad2 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bb30:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800bb32:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800bb36:	e7ed      	b.n	800bb14 <consume_data+0xf6>
	 MCU_col_num++) {
 800bb38:	3701      	adds	r7, #1
 800bb3a:	e7ae      	b.n	800ba9a <consume_data+0x7c>
       yoffset++) {
 800bb3c:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800bb3e:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800bb40:	e782      	b.n	800ba48 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800bb42:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800bb46:	4620      	mov	r0, r4
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800bb4c:	2004      	movs	r0, #4
 800bb4e:	e7d1      	b.n	800baf4 <consume_data+0xd6>

0800bb50 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	4604      	mov	r4, r0
 800bb56:	b089      	sub	sp, #36	; 0x24
 800bb58:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bb5a:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bb5e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800bb62:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800bb66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	db1d      	blt.n	800bbaa <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800bb6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800bb72:	d103      	bne.n	800bb7c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800bb74:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d916      	bls.n	800bbaa <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bb7c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb7e:	2600      	movs	r6, #0
 800bb80:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bb84:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800bb86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb8a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800bb8e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb92:	42b3      	cmp	r3, r6
 800bb94:	dc13      	bgt.n	800bbbe <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800bb96:	1c50      	adds	r0, r2, #1
 800bb98:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800bb9c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800bba0:	4290      	cmp	r0, r2
 800bba2:	bf2c      	ite	cs
 800bba4:	2004      	movcs	r0, #4
 800bba6:	2003      	movcc	r0, #3
 800bba8:	e006      	b.n	800bbb8 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800bbaa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800bbae:	4620      	mov	r0, r4
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4798      	blx	r3
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d1d4      	bne.n	800bb62 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800bbb8:	b009      	add	sp, #36	; 0x24
 800bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800bbbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbc0:	b913      	cbnz	r3, 800bbc8 <decompress_data+0x78>
       ci++, compptr++) {
 800bbc2:	3601      	adds	r6, #1
 800bbc4:	3558      	adds	r5, #88	; 0x58
 800bbc6:	e7e1      	b.n	800bb8c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800bbc8:	6861      	ldr	r1, [r4, #4]
 800bbca:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800bbcc:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800bbce:	9000      	str	r0, [sp, #0]
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	6a0f      	ldr	r7, [r1, #32]
 800bbd4:	435a      	muls	r2, r3
 800bbd6:	9906      	ldr	r1, [sp, #24]
 800bbd8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800bbdc:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800bbde:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bbe2:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800bbe4:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	68eb      	ldr	r3, [r5, #12]
 800bbea:	d221      	bcs.n	800bc30 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800bbec:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bbee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bbf2:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bbf4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800bbfc:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bc00:	9202      	str	r2, [sp, #8]
 800bc02:	9a02      	ldr	r2, [sp, #8]
 800bc04:	4552      	cmp	r2, sl
 800bc06:	dadc      	bge.n	800bbc2 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800bc08:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800bc0a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800bc0e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bc10:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800bc12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bc16:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bc18:	69e9      	ldr	r1, [r5, #28]
 800bc1a:	9a05      	ldr	r2, [sp, #20]
 800bc1c:	4541      	cmp	r1, r8
 800bc1e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800bc22:	d80f      	bhi.n	800bc44 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800bc24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bc26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bc2a:	9a02      	ldr	r2, [sp, #8]
 800bc2c:	3201      	adds	r2, #1
 800bc2e:	e7e7      	b.n	800bc00 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800bc30:	6a2a      	ldr	r2, [r5, #32]
 800bc32:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc36:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800bc3a:	f1ba 0f00 	cmp.w	sl, #0
 800bc3e:	bf08      	it	eq
 800bc40:	469a      	moveq	sl, r3
 800bc42:	e7d4      	b.n	800bbee <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800bc44:	f8cd 9000 	str.w	r9, [sp]
 800bc48:	4629      	mov	r1, r5
 800bc4a:	9307      	str	r3, [sp, #28]
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800bc50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bc52:	f108 0801 	add.w	r8, r8, #1
 800bc56:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800bc58:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800bc5a:	e7dd      	b.n	800bc18 <decompress_data+0xc8>

0800bc5c <start_output_pass>:
{
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bc60:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800bc64:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800bc66:	692b      	ldr	r3, [r5, #16]
 800bc68:	b323      	cbz	r3, 800bcb4 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800bc6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d04b      	beq.n	800bd08 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800bc70:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d047      	beq.n	800bd08 <start_output_pass+0xac>
 800bc78:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d043      	beq.n	800bd08 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800bc80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bc82:	b93b      	cbnz	r3, 800bc94 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc84:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800bc86:	2118      	movs	r1, #24
 800bc88:	6843      	ldr	r3, [r0, #4]
 800bc8a:	434a      	muls	r2, r1
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800bc92:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc94:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800bc96:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc9a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800bc9e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800bca2:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bca4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bca6:	fb0e c703 	mla	r7, lr, r3, ip
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	db07      	blt.n	800bcbe <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800bcae:	b359      	cbz	r1, 800bd08 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800bcb0:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800bcb2:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800bcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800bcbe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bcc0:	b312      	cbz	r2, 800bd08 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800bcc2:	8816      	ldrh	r6, [r2, #0]
 800bcc4:	b306      	cbz	r6, 800bd08 <start_output_pass+0xac>
 800bcc6:	8856      	ldrh	r6, [r2, #2]
 800bcc8:	b1f6      	cbz	r6, 800bd08 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800bcca:	8a16      	ldrh	r6, [r2, #16]
 800bccc:	b1e6      	cbz	r6, 800bd08 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800bcce:	8c16      	ldrh	r6, [r2, #32]
 800bcd0:	b1d6      	cbz	r6, 800bd08 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800bcd2:	8a56      	ldrh	r6, [r2, #18]
 800bcd4:	b1c6      	cbz	r6, 800bd08 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800bcd6:	8892      	ldrh	r2, [r2, #4]
 800bcd8:	b1b2      	cbz	r2, 800bd08 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800bcda:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800bcde:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800bce0:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800bce2:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800bce6:	2a00      	cmp	r2, #0
 800bce8:	db0e      	blt.n	800bd08 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800bcea:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bcec:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800bcf0:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800bcf2:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800bcf6:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800bcfa:	bf18      	it	ne
 800bcfc:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800bcfe:	2a06      	cmp	r2, #6
 800bd00:	d1f4      	bne.n	800bcec <start_output_pass+0x90>
       ci++, compptr++) {
 800bd02:	3301      	adds	r3, #1
 800bd04:	3058      	adds	r0, #88	; 0x58
 800bd06:	e7cd      	b.n	800bca4 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800bd08:	4b01      	ldr	r3, [pc, #4]	; (800bd10 <start_output_pass+0xb4>)
 800bd0a:	e7d2      	b.n	800bcb2 <start_output_pass+0x56>
 800bd0c:	0800be93 	.word	0x0800be93
 800bd10:	0800bb51 	.word	0x0800bb51

0800bd14 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bd14:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bd1c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bd1e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800bd22:	4604      	mov	r4, r0
 800bd24:	ed2d 8b02 	vpush	{d8}
 800bd28:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800bd2a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bd2c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800bd30:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bd32:	3b01      	subs	r3, #1
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bd36:	69ab      	ldr	r3, [r5, #24]
 800bd38:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bd3a:	f105 0320 	add.w	r3, r5, #32
 800bd3e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800bd42:	69eb      	ldr	r3, [r5, #28]
 800bd44:	9a03      	ldr	r2, [sp, #12]
 800bd46:	4293      	cmp	r3, r2
 800bd48:	dc13      	bgt.n	800bd72 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800bd4a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800bd4e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800bd52:	3301      	adds	r3, #1
 800bd54:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800bd58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800bd64:	f080 808e 	bcs.w	800be84 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f7ff fe39 	bl	800b9e0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800bd6e:	2003      	movs	r0, #3
 800bd70:	e02a      	b.n	800bdc8 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800bd72:	696f      	ldr	r7, [r5, #20]
 800bd74:	9b08      	ldr	r3, [sp, #32]
 800bd76:	429f      	cmp	r7, r3
 800bd78:	d905      	bls.n	800bd86 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	9303      	str	r3, [sp, #12]
 800bd84:	e7dd      	b.n	800bd42 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800bd86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800bd8a:	b133      	cbz	r3, 800bd9a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800bd8c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800bd90:	2100      	movs	r1, #0
 800bd92:	6a28      	ldr	r0, [r5, #32]
 800bd94:	01d2      	lsls	r2, r2, #7
 800bd96:	f01e fec9 	bl	802ab2c <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800bd9a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800bd9e:	ee18 1a10 	vmov	r1, s16
 800bda2:	4620      	mov	r0, r4
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	4798      	blx	r3
 800bda8:	b158      	cbz	r0, 800bdc2 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bdaa:	f04f 0b00 	mov.w	fp, #0
 800bdae:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800bdb2:	46da      	mov	sl, fp
 800bdb4:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bdb6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bdba:	455b      	cmp	r3, fp
 800bdbc:	dc09      	bgt.n	800bdd2 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800bdbe:	3701      	adds	r7, #1
 800bdc0:	e7d8      	b.n	800bd74 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800bdc2:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800bdc4:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800bdc8:	b00f      	add	sp, #60	; 0x3c
 800bdca:	ecbd 8b02 	vpop	{d8}
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800bdd2:	9b05      	ldr	r3, [sp, #20]
 800bdd4:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdd8:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800bdda:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bddc:	b923      	cbnz	r3, 800bde8 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800bdde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bde0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bde2:	f10b 0b01 	add.w	fp, fp, #1
 800bde6:	e7e6      	b.n	800bdb6 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bde8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800bdea:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bdee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800bdf2:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800bdf4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	429f      	cmp	r7, r3
 800be00:	bf34      	ite	cc
 800be02:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800be04:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800be06:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800be08:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800be0a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800be0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800be0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800be12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800be16:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800be18:	437a      	muls	r2, r7
 800be1a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800be1c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800be1e:	4542      	cmp	r2, r8
 800be20:	dddf      	ble.n	800bde2 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800be22:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800be26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be28:	4282      	cmp	r2, r0
 800be2a:	d304      	bcc.n	800be36 <decompress_onepass+0x122>
 800be2c:	9a03      	ldr	r2, [sp, #12]
 800be2e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800be30:	4442      	add	r2, r8
 800be32:	4290      	cmp	r0, r2
 800be34:	dd0b      	ble.n	800be4e <decompress_onepass+0x13a>
 800be36:	f10a 0908 	add.w	r9, sl, #8
 800be3a:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800be3e:	f04f 0900 	mov.w	r9, #0
 800be42:	9207      	str	r2, [sp, #28]
 800be44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be46:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800be48:	9a06      	ldr	r2, [sp, #24]
 800be4a:	4591      	cmp	r9, r2
 800be4c:	db07      	blt.n	800be5e <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800be4e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800be50:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800be54:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800be56:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800be58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800be5c:	e7de      	b.n	800be1c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800be5e:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800be60:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800be64:	f850 2b04 	ldr.w	r2, [r0], #4
 800be68:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800be6a:	9804      	ldr	r0, [sp, #16]
 800be6c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800be70:	9000      	str	r0, [sp, #0]
 800be72:	4620      	mov	r0, r4
 800be74:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800be76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be78:	9b04      	ldr	r3, [sp, #16]
 800be7a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800be7c:	4413      	add	r3, r2
 800be7e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800be80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be82:	e7e1      	b.n	800be48 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800be84:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800be88:	4620      	mov	r0, r4
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800be8e:	2004      	movs	r0, #4
 800be90:	e79a      	b.n	800bdc8 <decompress_onepass+0xb4>

0800be92 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800be92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800be96:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800be9a:	b0c5      	sub	sp, #276	; 0x114
 800be9c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800be9e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800bea2:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800bea4:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800bea6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800beaa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800beae:	428b      	cmp	r3, r1
 800beb0:	dc03      	bgt.n	800beba <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800beb2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800beb6:	6950      	ldr	r0, [r2, #20]
 800beb8:	b1a8      	cbz	r0, 800bee6 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800beba:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bebc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800bec0:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bec2:	2300      	movs	r3, #0
 800bec4:	9303      	str	r3, [sp, #12]
 800bec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bec8:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800beca:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bece:	428b      	cmp	r3, r1
 800bed0:	dc1e      	bgt.n	800bf10 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800bed2:	3201      	adds	r2, #1
 800bed4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800bed8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800bedc:	4282      	cmp	r2, r0
 800bede:	bf2c      	ite	cs
 800bee0:	2004      	movcs	r0, #4
 800bee2:	2003      	movcc	r0, #3
 800bee4:	e011      	b.n	800bf0a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800bee6:	428b      	cmp	r3, r1
 800bee8:	d10a      	bne.n	800bf00 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800beea:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800beee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bef2:	2900      	cmp	r1, #0
 800bef4:	bf08      	it	eq
 800bef6:	3301      	addeq	r3, #1
 800bef8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800befc:	4299      	cmp	r1, r3
 800befe:	d8dc      	bhi.n	800beba <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800bf00:	6813      	ldr	r3, [r2, #0]
 800bf02:	4620      	mov	r0, r4
 800bf04:	4798      	blx	r3
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d1cd      	bne.n	800bea6 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800bf0a:	b045      	add	sp, #276	; 0x114
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800bf10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf12:	b923      	cbnz	r3, 800bf1e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	3558      	adds	r5, #88	; 0x58
 800bf18:	3301      	adds	r3, #1
 800bf1a:	9303      	str	r3, [sp, #12]
 800bf1c:	e7d3      	b.n	800bec6 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800bf1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800bf20:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800bf22:	4293      	cmp	r3, r2
 800bf24:	f240 815a 	bls.w	800c1dc <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800bf28:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800bf2a:	4681      	mov	r9, r0
      last_row = FALSE;
 800bf2c:	2100      	movs	r1, #0
      last_row = TRUE;
 800bf2e:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800bf30:	6861      	ldr	r1, [r4, #4]
 800bf32:	9e03      	ldr	r6, [sp, #12]
 800bf34:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800bf38:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bf3a:	3148      	adds	r1, #72	; 0x48
 800bf3c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	f000 8159 	beq.w	800c1f8 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800bf46:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800bf48:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800bf4a:	4403      	add	r3, r0
 800bf4c:	4342      	muls	r2, r0
 800bf4e:	4620      	mov	r0, r4
 800bf50:	9600      	str	r6, [sp, #0]
 800bf52:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800bf54:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800bf56:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800bf58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800bf5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf5e:	2218      	movs	r2, #24
 800bf60:	9903      	ldr	r1, [sp, #12]
 800bf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bf64:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800bf66:	fb02 3301 	mla	r3, r2, r1, r3
 800bf6a:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800bf6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800bf6e:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800bf70:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800bf74:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800bf78:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800bf7a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800bf7c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800bf7e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800bf80:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800bf84:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800bf8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf8e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bf92:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800bf94:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800bf98:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf9a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800bf9e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800bfa0:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800bfa4:	9315      	str	r3, [sp, #84]	; 0x54
 800bfa6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800bfaa:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800bfac:	01f3      	lsls	r3, r6, #7
 800bfae:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfb0:	0233      	lsls	r3, r6, #8
 800bfb2:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800bfb4:	01cb      	lsls	r3, r1, #7
 800bfb6:	9319      	str	r3, [sp, #100]	; 0x64
 800bfb8:	020b      	lsls	r3, r1, #8
 800bfba:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800bfbc:	01d3      	lsls	r3, r2, #7
 800bfbe:	931b      	str	r3, [sp, #108]	; 0x6c
 800bfc0:	0213      	lsls	r3, r2, #8
 800bfc2:	931c      	str	r3, [sp, #112]	; 0x70
 800bfc4:	1f03      	subs	r3, r0, #4
 800bfc6:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800bfcc:	f109 33ff 	add.w	r3, r9, #4294967295
 800bfd0:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	454b      	cmp	r3, r9
 800bfd6:	da9d      	bge.n	800bf14 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800bfd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfda:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800bfde:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800bfe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfe2:	b11b      	cbz	r3, 800bfec <decompress_smooth_data+0x15a>
 800bfe4:	9b04      	ldr	r3, [sp, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 810c 	beq.w	800c204 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800bfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfee:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bff2:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800bff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bff6:	b123      	cbz	r3, 800c002 <decompress_smooth_data+0x170>
 800bff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bffa:	9a04      	ldr	r2, [sp, #16]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	f000 8104 	beq.w	800c20a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800c002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c008:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800c00a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800c00c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c00e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800c012:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c014:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c016:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800c01a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800c01c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c01e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c020:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c022:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c026:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c02a:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c02c:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c02e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800c032:	2201      	movs	r2, #1
 800c034:	a924      	add	r1, sp, #144	; 0x90
 800c036:	4640      	mov	r0, r8
 800c038:	930a      	str	r3, [sp, #40]	; 0x28
 800c03a:	f00b fe0e 	bl	8017c5a <jcopy_block_row>
	if (block_num < last_block_column) {
 800c03e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c042:	4293      	cmp	r3, r2
 800c044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c046:	f240 80ea 	bls.w	800c21e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800c04a:	9a07      	ldr	r2, [sp, #28]
 800c04c:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800c050:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800c052:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800c056:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800c058:	9a08      	ldr	r2, [sp, #32]
 800c05a:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800c05e:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800c060:	9a05      	ldr	r2, [sp, #20]
 800c062:	6851      	ldr	r1, [r2, #4]
 800c064:	b1c1      	cbz	r1, 800c098 <decompress_smooth_data+0x206>
 800c066:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800c06a:	b9aa      	cbnz	r2, 800c098 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800c06c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c06e:	1a3a      	subs	r2, r7, r0
 800c070:	9806      	ldr	r0, [sp, #24]
 800c072:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c074:	2024      	movs	r0, #36	; 0x24
 800c076:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c078:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800c07a:	f100 80d7 	bmi.w	800c22c <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c07e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c080:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c082:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c084:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c088:	dd04      	ble.n	800c094 <decompress_smooth_data+0x202>
 800c08a:	fa06 f101 	lsl.w	r1, r6, r1
 800c08e:	4291      	cmp	r1, r2
 800c090:	dc00      	bgt.n	800c094 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800c092:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800c094:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800c098:	9a05      	ldr	r2, [sp, #20]
 800c09a:	6891      	ldr	r1, [r2, #8]
 800c09c:	b1c9      	cbz	r1, 800c0d2 <decompress_smooth_data+0x240>
 800c09e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800c0a2:	b9b2      	cbnz	r2, 800c0d2 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800c0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a6:	9806      	ldr	r0, [sp, #24]
 800c0a8:	ebab 0202 	sub.w	r2, fp, r2
 800c0ac:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c0ae:	2024      	movs	r0, #36	; 0x24
 800c0b0:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c0b2:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800c0b4:	f100 80c8 	bmi.w	800c248 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c0b8:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0ba:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800c0bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c0be:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0c2:	dd04      	ble.n	800c0ce <decompress_smooth_data+0x23c>
 800c0c4:	fa06 f101 	lsl.w	r1, r6, r1
 800c0c8:	4291      	cmp	r1, r2
 800c0ca:	dc00      	bgt.n	800c0ce <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800c0cc:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800c0ce:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800c0d2:	9a05      	ldr	r2, [sp, #20]
 800c0d4:	68d1      	ldr	r1, [r2, #12]
 800c0d6:	b1d1      	cbz	r1, 800c10e <decompress_smooth_data+0x27c>
 800c0d8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800c0dc:	b9ba      	cbnz	r2, 800c10e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800c0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0e0:	9806      	ldr	r0, [sp, #24]
 800c0e2:	445a      	add	r2, fp
 800c0e4:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800c0e8:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c0ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800c0ec:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800c0f0:	f100 80b8 	bmi.w	800c264 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c0f4:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0f6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800c0f8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c0fa:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c0fe:	dd04      	ble.n	800c10a <decompress_smooth_data+0x278>
 800c100:	fa06 f101 	lsl.w	r1, r6, r1
 800c104:	4291      	cmp	r1, r2
 800c106:	dc00      	bgt.n	800c10a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800c108:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800c10a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800c10e:	9a05      	ldr	r2, [sp, #20]
 800c110:	6912      	ldr	r2, [r2, #16]
 800c112:	b1e2      	cbz	r2, 800c14e <decompress_smooth_data+0x2bc>
 800c114:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800c118:	b9c9      	cbnz	r1, 800c14e <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800c11a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c11c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c11e:	1a09      	subs	r1, r1, r0
 800c120:	1acb      	subs	r3, r1, r3
 800c122:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c124:	440b      	add	r3, r1
 800c126:	9906      	ldr	r1, [sp, #24]
 800c128:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c12a:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800c12c:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800c130:	f100 80a6 	bmi.w	800c280 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c134:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c136:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800c138:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c13a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c13e:	dd04      	ble.n	800c14a <decompress_smooth_data+0x2b8>
 800c140:	fa06 f202 	lsl.w	r2, r6, r2
 800c144:	429a      	cmp	r2, r3
 800c146:	dc00      	bgt.n	800c14a <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800c148:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800c14a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	695a      	ldr	r2, [r3, #20]
 800c152:	b1da      	cbz	r2, 800c18c <decompress_smooth_data+0x2fa>
 800c154:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c158:	b9c3      	cbnz	r3, 800c18c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800c15a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c15c:	463b      	mov	r3, r7
 800c15e:	440b      	add	r3, r1
 800c160:	9906      	ldr	r1, [sp, #24]
 800c162:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800c166:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c168:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800c16a:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800c16e:	f100 8095 	bmi.w	800c29c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c172:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c174:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800c176:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c178:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c17c:	dd04      	ble.n	800c188 <decompress_smooth_data+0x2f6>
 800c17e:	fa06 f202 	lsl.w	r2, r6, r2
 800c182:	429a      	cmp	r2, r3
 800c184:	dc00      	bgt.n	800c188 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800c186:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800c188:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800c18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c18e:	aa24      	add	r2, sp, #144	; 0x90
 800c190:	4629      	mov	r1, r5
 800c192:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	4620      	mov	r0, r4
 800c198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c19a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800c19e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c1a0:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800c1a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1a4:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800c1a6:	3380      	adds	r3, #128	; 0x80
 800c1a8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	9b08      	ldr	r3, [sp, #32]
 800c1b0:	3380      	adds	r3, #128	; 0x80
 800c1b2:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800c1b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1b6:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c1b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800c1ba:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1be:	3301      	adds	r3, #1
 800c1c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c1c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c6:	428a      	cmp	r2, r1
 800c1c8:	d222      	bcs.n	800c210 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800c1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c1ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1d2:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c1d4:	9b04      	ldr	r3, [sp, #16]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	e6fa      	b.n	800bfd2 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c1dc:	6a2b      	ldr	r3, [r5, #32]
 800c1de:	fbb3 f1f0 	udiv	r1, r3, r0
 800c1e2:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800c1e6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ea:	d103      	bne.n	800c1f4 <decompress_smooth_data+0x362>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4681      	mov	r9, r0
      last_row = TRUE;
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	e69c      	b.n	800bf2e <decompress_smooth_data+0x9c>
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	e7fb      	b.n	800c1f0 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	9200      	str	r2, [sp, #0]
 800c1fc:	47c0      	blx	r8
      first_row = TRUE;
 800c1fe:	2301      	movs	r3, #1
 800c200:	931d      	str	r3, [sp, #116]	; 0x74
 800c202:	e6ab      	b.n	800bf5c <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800c204:	f8cd 801c 	str.w	r8, [sp, #28]
 800c208:	e6f4      	b.n	800bff4 <decompress_smooth_data+0x162>
 800c20a:	f8cd 8020 	str.w	r8, [sp, #32]
 800c20e:	e6fb      	b.n	800c008 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800c210:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800c212:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800c216:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800c21a:	9209      	str	r2, [sp, #36]	; 0x24
 800c21c:	e709      	b.n	800c032 <decompress_smooth_data+0x1a0>
 800c21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c220:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c224:	9211      	str	r2, [sp, #68]	; 0x44
 800c226:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800c22a:	e719      	b.n	800c060 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c22c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c22e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c230:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c232:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c236:	dd05      	ble.n	800c244 <decompress_smooth_data+0x3b2>
 800c238:	fa06 f101 	lsl.w	r1, r6, r1
 800c23c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800c23e:	bfd8      	it	le
 800c240:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800c244:	4252      	negs	r2, r2
 800c246:	e725      	b.n	800c094 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c248:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c24a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c24c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c24e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c252:	dd05      	ble.n	800c260 <decompress_smooth_data+0x3ce>
 800c254:	fa06 f101 	lsl.w	r1, r6, r1
 800c258:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800c25a:	bfd8      	it	le
 800c25c:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800c260:	4252      	negs	r2, r2
 800c262:	e734      	b.n	800c0ce <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c264:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800c266:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c268:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c26a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c26e:	dd05      	ble.n	800c27c <decompress_smooth_data+0x3ea>
 800c270:	fa06 f101 	lsl.w	r1, r6, r1
 800c274:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800c276:	bfd8      	it	le
 800c278:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800c27c:	4252      	negs	r2, r2
 800c27e:	e744      	b.n	800c10a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c280:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c282:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c284:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c286:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c28a:	dd05      	ble.n	800c298 <decompress_smooth_data+0x406>
 800c28c:	fa06 f202 	lsl.w	r2, r6, r2
 800c290:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c292:	bfd8      	it	le
 800c294:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c298:	425b      	negs	r3, r3
 800c29a:	e756      	b.n	800c14a <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c29c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800c29e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c2a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2a2:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800c2a6:	dd05      	ble.n	800c2b4 <decompress_smooth_data+0x422>
 800c2a8:	fa06 f202 	lsl.w	r2, r6, r2
 800c2ac:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800c2ae:	bfd8      	it	le
 800c2b0:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800c2b4:	425b      	negs	r3, r3
 800c2b6:	e767      	b.n	800c188 <decompress_smooth_data+0x2f6>

0800c2b8 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2b8:	6843      	ldr	r3, [r0, #4]
 800c2ba:	2274      	movs	r2, #116	; 0x74
{
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2c0:	681b      	ldr	r3, [r3, #0]
{
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2c6:	2101      	movs	r1, #1
{
 800c2c8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2ca:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800c2cc:	4b2c      	ldr	r3, [pc, #176]	; (800c380 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800c2ce:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800c2d0:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2d4:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800c2d6:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800c2d8:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800c2dc:	4b29      	ldr	r3, [pc, #164]	; (800c384 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800c2de:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800c2e0:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800c2e2:	b37e      	cbz	r6, 800c344 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c2e4:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800c2e8:	46ca      	mov	sl, r9
 800c2ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2ec:	42bb      	cmp	r3, r7
 800c2ee:	dc07      	bgt.n	800c300 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800c2f0:	4b25      	ldr	r3, [pc, #148]	; (800c388 <jinit_d_coef_controller+0xd0>)
 800c2f2:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c2f6:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800c2fa:	b005      	add	sp, #20
 800c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800c300:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800c304:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800c308:	b10b      	cbz	r3, 800c30e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800c30a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c30e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800c310:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c312:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800c314:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c316:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c31a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c31e:	f00b fc82 	bl	8017c26 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c322:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800c326:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800c328:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800c32c:	f00b fc7b 	bl	8017c26 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800c330:	2201      	movs	r2, #1
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	4611      	mov	r1, r2
 800c336:	e9cd 0800 	strd	r0, r8, [sp]
 800c33a:	4628      	mov	r0, r5
 800c33c:	47d8      	blx	fp
 800c33e:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800c342:	e7d2      	b.n	800c2ea <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c344:	686b      	ldr	r3, [r5, #4]
 800c346:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c34a:	2101      	movs	r1, #1
 800c34c:	4628      	mov	r0, r5
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c352:	f104 0320 	add.w	r3, r4, #32
 800c356:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800c358:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c35c:	454b      	cmp	r3, r9
 800c35e:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800c362:	d1f9      	bne.n	800c358 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800c364:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800c368:	b919      	cbnz	r1, 800c372 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800c36a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c36e:	f01e fbdd 	bl	802ab2c <memset>
    coef->pub.consume_data = dummy_consume_data;
 800c372:	4b07      	ldr	r3, [pc, #28]	; (800c390 <jinit_d_coef_controller+0xd8>)
 800c374:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800c376:	4b07      	ldr	r3, [pc, #28]	; (800c394 <jinit_d_coef_controller+0xdc>)
 800c378:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800c37a:	2300      	movs	r3, #0
 800c37c:	6123      	str	r3, [r4, #16]
}
 800c37e:	e7bc      	b.n	800c2fa <jinit_d_coef_controller+0x42>
 800c380:	0800ba11 	.word	0x0800ba11
 800c384:	0800bc5d 	.word	0x0800bc5d
 800c388:	0800ba1f 	.word	0x0800ba1f
 800c38c:	0800bb51 	.word	0x0800bb51
 800c390:	0800ba1b 	.word	0x0800ba1b
 800c394:	0800bd15 	.word	0x0800bd15

0800c398 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c398:	6843      	ldr	r3, [r0, #4]
 800c39a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c39e:	2101      	movs	r1, #1
 800c3a0:	681b      	ldr	r3, [r3, #0]
{
 800c3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a6:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c3a8:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3ac:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800c3b6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3be:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800c3c0:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c3cc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800c44c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3d0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3d2:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800c3d4:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c3e0:	4f17      	ldr	r7, [pc, #92]	; (800c440 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3e2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c3e4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800c3e6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c3e8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c3ea:	f8df e064 	ldr.w	lr, [pc, #100]	; 800c450 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c3ee:	4915      	ldr	r1, [pc, #84]	; (800c444 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800c3f0:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c3f4:	4d14      	ldr	r5, [pc, #80]	; (800c448 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c3f6:	fb08 e203 	mla	r2, r8, r3, lr
 800c3fa:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800c3fc:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c400:	fb07 f203 	mul.w	r2, r7, r3
 800c404:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800c408:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800c40c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800c40e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c412:	fb05 f203 	mul.w	r2, r5, r3
 800c416:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800c41a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800c41e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c422:	fb01 f203 	mul.w	r2, r1, r3
 800c426:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800c42a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800c42e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c432:	3301      	adds	r3, #1
 800c434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c438:	d1dd      	bne.n	800c3f6 <build_ycc_rgb_table+0x5e>
  }
}
 800c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c43e:	bf00      	nop
 800c440:	0001c5a2 	.word	0x0001c5a2
 800c444:	ffffa7e6 	.word	0xffffa7e6
 800c448:	ffff492e 	.word	0xffff492e
 800c44c:	000166e9 	.word	0x000166e9
 800c450:	ff4d0b80 	.word	0xff4d0b80

0800c454 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c458:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800c45c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c45e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800c460:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c464:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c468:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c46c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800c46e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800c470:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c472:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800c476:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c478:	6920      	ldr	r0, [r4, #16]
 800c47a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c47c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c47e:	3a01      	subs	r2, #1
 800c480:	9210      	str	r2, [sp, #64]	; 0x40
 800c482:	d502      	bpl.n	800c48a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c484:	b007      	add	sp, #28
 800c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c48a:	9a05      	ldr	r2, [sp, #20]
 800c48c:	680c      	ldr	r4, [r1, #0]
 800c48e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800c490:	f853 0b04 	ldr.w	r0, [r3], #4
 800c494:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800c498:	684c      	ldr	r4, [r1, #4]
 800c49a:	5964      	ldr	r4, [r4, r5]
 800c49c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800c4a0:	688c      	ldr	r4, [r1, #8]
 800c4a2:	5967      	ldr	r7, [r4, r5]
 800c4a4:	9c01      	ldr	r4, [sp, #4]
 800c4a6:	3f01      	subs	r7, #1
 800c4a8:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800c4ac:	45d0      	cmp	r8, sl
 800c4ae:	f100 0003 	add.w	r0, r0, #3
 800c4b2:	d0e3      	beq.n	800c47c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c4b4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800c4b8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c4bc:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800c4be:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c4c2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800c4c6:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c4c8:	fa0f fb8b 	sxth.w	fp, fp
 800c4cc:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c4ce:	5d65      	ldrb	r5, [r4, r5]
 800c4d0:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c4d4:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800c4d8:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800c4dc:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c4de:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c4e0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800c4e2:	5d65      	ldrb	r5, [r4, r5]
 800c4e4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c4e8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800c4ec:	5d64      	ldrb	r4, [r4, r5]
 800c4ee:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800c4f2:	e7db      	b.n	800c4ac <ycc_rgb_convert+0x58>

0800c4f4 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c4f8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800c4fc:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800c500:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c502:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c504:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800c506:	3d01      	subs	r5, #1
 800c508:	d501      	bpl.n	800c50e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c50e:	189c      	adds	r4, r3, r2
 800c510:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800c512:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800c516:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800c51a:	6848      	ldr	r0, [r1, #4]
 800c51c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800c520:	6888      	ldr	r0, [r1, #8]
 800c522:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800c526:	2000      	movs	r0, #0
 800c528:	42b8      	cmp	r0, r7
 800c52a:	d0ec      	beq.n	800c506 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800c52c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800c530:	f81c b000 	ldrb.w	fp, [ip, r0]
 800c534:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800c538:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800c53c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800c540:	4454      	add	r4, sl
 800c542:	f818 a000 	ldrb.w	sl, [r8, r0]
 800c546:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800c54a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800c54e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800c550:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800c552:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800c556:	3001      	adds	r0, #1
 800c558:	e7e6      	b.n	800c528 <rgb_gray_convert+0x34>

0800c55a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	9d06      	ldr	r5, [sp, #24]
 800c560:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c564:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800c566:	3d01      	subs	r5, #1
 800c568:	d501      	bpl.n	800c56e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800c56e:	1898      	adds	r0, r3, r2
 800c570:	680c      	ldr	r4, [r1, #0]
 800c572:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800c574:	684c      	ldr	r4, [r1, #4]
 800c576:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800c57a:	688c      	ldr	r4, [r1, #8]
 800c57c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800c580:	2000      	movs	r0, #0
 800c582:	f853 4b04 	ldr.w	r4, [r3], #4
 800c586:	42b0      	cmp	r0, r6
 800c588:	f104 0403 	add.w	r4, r4, #3
 800c58c:	d0eb      	beq.n	800c566 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800c58e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800c592:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800c596:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800c59a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800c59e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800c5a2:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800c5a4:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800c5a8:	e7ed      	b.n	800c586 <rgb_convert+0x2c>

0800c5aa <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800c5aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5ae:	9e07      	ldr	r6, [sp, #28]
 800c5b0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800c5b4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800c5b6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800c5ba:	3e01      	subs	r6, #1
 800c5bc:	d418      	bmi.n	800c5f0 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800c5be:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e00a      	b.n	800c5dc <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800c5c6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800c5ca:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800c5ce:	681c      	ldr	r4, [r3, #0]
 800c5d0:	eb05 080e 	add.w	r8, r5, lr
 800c5d4:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800c5d6:	4545      	cmp	r5, r8
 800c5d8:	d104      	bne.n	800c5e4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800c5da:	3001      	adds	r0, #1
 800c5dc:	42b8      	cmp	r0, r7
 800c5de:	dbf2      	blt.n	800c5c6 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	e7ea      	b.n	800c5ba <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800c5e4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800c5e8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800c5ec:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800c5ee:	e7f2      	b.n	800c5d6 <null_convert+0x2c>
  }
}
 800c5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5f4 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f6:	9d05      	ldr	r5, [sp, #20]
 800c5f8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c5fc:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800c5fe:	3d01      	subs	r5, #1
 800c600:	d500      	bpl.n	800c604 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800c602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800c604:	6808      	ldr	r0, [r1, #0]
 800c606:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800c608:	f853 0b04 	ldr.w	r0, [r3], #4
 800c60c:	58a4      	ldr	r4, [r4, r2]
 800c60e:	eb04 0c07 	add.w	ip, r4, r7
 800c612:	4564      	cmp	r4, ip
 800c614:	f100 0003 	add.w	r0, r0, #3
 800c618:	d0f1      	beq.n	800c5fe <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800c61a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800c61e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800c622:	f800 6c02 	strb.w	r6, [r0, #-2]
 800c626:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800c62a:	e7f2      	b.n	800c612 <gray_rgb_convert+0x1e>

0800c62c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c630:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800c634:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c636:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800c638:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c63c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c640:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800c644:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c646:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800c64a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c64c:	6920      	ldr	r0, [r4, #16]
 800c64e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c650:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c652:	3a01      	subs	r2, #1
 800c654:	9210      	str	r2, [sp, #64]	; 0x40
 800c656:	d502      	bpl.n	800c65e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800c658:	b007      	add	sp, #28
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800c65e:	eb03 0008 	add.w	r0, r3, r8
 800c662:	680a      	ldr	r2, [r1, #0]
 800c664:	f853 5b04 	ldr.w	r5, [r3], #4
 800c668:	5812      	ldr	r2, [r2, r0]
 800c66a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800c66c:	684a      	ldr	r2, [r1, #4]
 800c66e:	5812      	ldr	r2, [r2, r0]
 800c670:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800c672:	688a      	ldr	r2, [r1, #8]
 800c674:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800c678:	68ca      	ldr	r2, [r1, #12]
 800c67a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800c67e:	2200      	movs	r2, #0
 800c680:	9800      	ldr	r0, [sp, #0]
 800c682:	3504      	adds	r5, #4
 800c684:	4282      	cmp	r2, r0
 800c686:	d0e3      	beq.n	800c650 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c688:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800c68c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800c68e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800c690:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800c694:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c696:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c69a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c69e:	4404      	add	r4, r0
 800c6a0:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800c6a4:	5d34      	ldrb	r4, [r6, r4]
 800c6a6:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c6aa:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800c6ae:	9405      	str	r4, [sp, #20]
 800c6b0:	9c02      	ldr	r4, [sp, #8]
 800c6b2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800c6b6:	9c05      	ldr	r4, [sp, #20]
 800c6b8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800c6ba:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800c6be:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800c6c2:	5d34      	ldrb	r4, [r6, r4]
 800c6c4:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800c6c8:	9c01      	ldr	r4, [sp, #4]
 800c6ca:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800c6ce:	4420      	add	r0, r4
 800c6d0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c6d4:	5c30      	ldrb	r0, [r6, r0]
 800c6d6:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c6da:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800c6de:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c6e0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800c6e4:	e7cc      	b.n	800c680 <ycck_cmyk_convert+0x54>

0800c6e6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800c6e6:	4770      	bx	lr

0800c6e8 <grayscale_convert>:
{
 800c6e8:	b513      	push	{r0, r1, r4, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800c6f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800c6f2:	6820      	ldr	r0, [r4, #0]
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	9b04      	ldr	r3, [sp, #16]
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f00b fa9b 	bl	8017c36 <jcopy_sample_rows>
}
 800c700:	b002      	add	sp, #8
 800c702:	bd10      	pop	{r4, pc}

0800c704 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c704:	6843      	ldr	r3, [r0, #4]
 800c706:	221c      	movs	r2, #28
 800c708:	2101      	movs	r1, #1
 800c70a:	681b      	ldr	r3, [r3, #0]
{
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c710:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800c712:	4b4a      	ldr	r3, [pc, #296]	; (800c83c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c714:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800c716:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800c71a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800c71c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c720:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c722:	2b03      	cmp	r3, #3
 800c724:	d821      	bhi.n	800c76a <jinit_color_deconverter+0x66>
 800c726:	2b01      	cmp	r3, #1
 800c728:	d82d      	bhi.n	800c786 <jinit_color_deconverter+0x82>
 800c72a:	d023      	beq.n	800c774 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	dd23      	ble.n	800c778 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800c730:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c734:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800c738:	2902      	cmp	r1, #2
 800c73a:	d055      	beq.n	800c7e8 <jinit_color_deconverter+0xe4>
 800c73c:	2904      	cmp	r1, #4
 800c73e:	d066      	beq.n	800c80e <jinit_color_deconverter+0x10a>
 800c740:	2901      	cmp	r1, #1
 800c742:	d16d      	bne.n	800c820 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c744:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800c748:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c74a:	2a01      	cmp	r2, #1
 800c74c:	d124      	bne.n	800c798 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800c74e:	4b3c      	ldr	r3, [pc, #240]	; (800c840 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800c750:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c752:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800c754:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c756:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800c758:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c75a:	4299      	cmp	r1, r3
 800c75c:	dc15      	bgt.n	800c78a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800c75e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c760:	2b00      	cmp	r3, #0
 800c762:	d169      	bne.n	800c838 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800c764:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c766:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800c768:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800c76a:	3b04      	subs	r3, #4
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d8dd      	bhi.n	800c72c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800c770:	2a04      	cmp	r2, #4
 800c772:	e000      	b.n	800c776 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800c774:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800c776:	d0db      	beq.n	800c730 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	220b      	movs	r2, #11
 800c77c:	4620      	mov	r0, r4
 800c77e:	615a      	str	r2, [r3, #20]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4798      	blx	r3
 800c784:	e7d4      	b.n	800c730 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800c786:	2a03      	cmp	r2, #3
 800c788:	e7f5      	b.n	800c776 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800c78a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800c78e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c792:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800c794:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c796:	e7e0      	b.n	800c75a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d146      	bne.n	800c82a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800c79c:	4b29      	ldr	r3, [pc, #164]	; (800c844 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c79e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800c7a2:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800c7a4:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800c7a8:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c7aa:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c7ac:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c7b4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800c7b6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c7b8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800c7bc:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800c7be:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800c7c2:	fb06 f203 	mul.w	r2, r6, r3
 800c7c6:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800c7ca:	fb05 f203 	mul.w	r2, r5, r3
 800c7ce:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c7d2:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c7d6:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c7d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c7e0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c7e4:	d1ed      	bne.n	800c7c2 <jinit_color_deconverter+0xbe>
 800c7e6:	e7ba      	b.n	800c75e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800c7e8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800c7ea:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800c7ec:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800c7ee:	d105      	bne.n	800c7fc <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800c7f0:	4b15      	ldr	r3, [pc, #84]	; (800c848 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800c7f2:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800c7f4:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800c7f6:	f7ff fdcf 	bl	800c398 <build_ycc_rgb_table>
 800c7fa:	e7b0      	b.n	800c75e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d102      	bne.n	800c806 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800c800:	4b12      	ldr	r3, [pc, #72]	; (800c84c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800c802:	606b      	str	r3, [r5, #4]
 800c804:	e7ab      	b.n	800c75e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c806:	2b02      	cmp	r3, #2
 800c808:	d10f      	bne.n	800c82a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800c80a:	4b11      	ldr	r3, [pc, #68]	; (800c850 <jinit_color_deconverter+0x14c>)
 800c80c:	e7f9      	b.n	800c802 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800c80e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800c810:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800c812:	d101      	bne.n	800c818 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800c814:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <jinit_color_deconverter+0x150>)
 800c816:	e7ec      	b.n	800c7f2 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d106      	bne.n	800c82a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800c81c:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <jinit_color_deconverter+0x154>)
 800c81e:	e7f0      	b.n	800c802 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800c820:	4299      	cmp	r1, r3
 800c822:	d102      	bne.n	800c82a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800c824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c826:	67a3      	str	r3, [r4, #120]	; 0x78
 800c828:	e7f8      	b.n	800c81c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	221c      	movs	r2, #28
 800c82e:	4620      	mov	r0, r4
 800c830:	615a      	str	r2, [r3, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4798      	blx	r3
 800c836:	e792      	b.n	800c75e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800c838:	2301      	movs	r3, #1
 800c83a:	e794      	b.n	800c766 <jinit_color_deconverter+0x62>
 800c83c:	0800c6e7 	.word	0x0800c6e7
 800c840:	0800c6e9 	.word	0x0800c6e9
 800c844:	0800c4f5 	.word	0x0800c4f5
 800c848:	0800c455 	.word	0x0800c455
 800c84c:	0800c5f5 	.word	0x0800c5f5
 800c850:	0800c55b 	.word	0x0800c55b
 800c854:	0800c62d 	.word	0x0800c62d
 800c858:	0800c5ab 	.word	0x0800c5ab

0800c85c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800c864:	2500      	movs	r5, #0
{
 800c866:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c868:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800c86c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800c870:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c872:	46ab      	mov	fp, r5
{
 800c874:	ed2d 8b04 	vpush	{d8-d9}
 800c878:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	455b      	cmp	r3, fp
 800c87e:	dc04      	bgt.n	800c88a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800c880:	b007      	add	sp, #28
 800c882:	ecbd 8b04 	vpop	{d8-d9}
 800c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c88a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800c88e:	f240 700e 	movw	r0, #1806	; 0x70e
 800c892:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800c896:	4283      	cmp	r3, r0
 800c898:	f000 80d9 	beq.w	800ca4e <start_pass+0x1f2>
 800c89c:	dc5a      	bgt.n	800c954 <start_pass+0xf8>
 800c89e:	f240 4004 	movw	r0, #1028	; 0x404
 800c8a2:	4283      	cmp	r3, r0
 800c8a4:	f000 80d6 	beq.w	800ca54 <start_pass+0x1f8>
 800c8a8:	dc2f      	bgt.n	800c90a <start_pass+0xae>
 800c8aa:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800c8ae:	f000 80d3 	beq.w	800ca58 <start_pass+0x1fc>
 800c8b2:	dc1a      	bgt.n	800c8ea <start_pass+0x8e>
 800c8b4:	f240 2001 	movw	r0, #513	; 0x201
 800c8b8:	4283      	cmp	r3, r0
 800c8ba:	f000 80cf 	beq.w	800ca5c <start_pass+0x200>
 800c8be:	dc0e      	bgt.n	800c8de <start_pass+0x82>
 800c8c0:	f240 1001 	movw	r0, #257	; 0x101
 800c8c4:	4283      	cmp	r3, r0
 800c8c6:	f000 80cb 	beq.w	800ca60 <start_pass+0x204>
 800c8ca:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800c8ce:	f000 80c9 	beq.w	800ca64 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2007      	movs	r0, #7
 800c8d6:	61da      	str	r2, [r3, #28]
 800c8d8:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800c8dc:	e0b3      	b.n	800ca46 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c8de:	f240 2002 	movw	r0, #514	; 0x202
 800c8e2:	4283      	cmp	r3, r0
 800c8e4:	d1f5      	bne.n	800c8d2 <start_pass+0x76>
 800c8e6:	4d9e      	ldr	r5, [pc, #632]	; (800cb60 <start_pass+0x304>)
 800c8e8:	e0b2      	b.n	800ca50 <start_pass+0x1f4>
 800c8ea:	f240 3006 	movw	r0, #774	; 0x306
 800c8ee:	4283      	cmp	r3, r0
 800c8f0:	f000 80ba 	beq.w	800ca68 <start_pass+0x20c>
 800c8f4:	f240 4002 	movw	r0, #1026	; 0x402
 800c8f8:	4283      	cmp	r3, r0
 800c8fa:	f000 80b7 	beq.w	800ca6c <start_pass+0x210>
 800c8fe:	f240 3003 	movw	r0, #771	; 0x303
 800c902:	4283      	cmp	r3, r0
 800c904:	d1e5      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800c906:	4d97      	ldr	r5, [pc, #604]	; (800cb64 <start_pass+0x308>)
 800c908:	e0a2      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c90a:	f240 6003 	movw	r0, #1539	; 0x603
 800c90e:	4283      	cmp	r3, r0
 800c910:	f000 80ae 	beq.w	800ca70 <start_pass+0x214>
 800c914:	dc0e      	bgt.n	800c934 <start_pass+0xd8>
 800c916:	f240 5005 	movw	r0, #1285	; 0x505
 800c91a:	4283      	cmp	r3, r0
 800c91c:	f000 80aa 	beq.w	800ca74 <start_pass+0x218>
 800c920:	f240 500a 	movw	r0, #1290	; 0x50a
 800c924:	4283      	cmp	r3, r0
 800c926:	f000 80a7 	beq.w	800ca78 <start_pass+0x21c>
 800c92a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800c92e:	d1d0      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800c930:	4d8d      	ldr	r5, [pc, #564]	; (800cb68 <start_pass+0x30c>)
 800c932:	e08d      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c934:	f240 600c 	movw	r0, #1548	; 0x60c
 800c938:	4283      	cmp	r3, r0
 800c93a:	f000 809f 	beq.w	800ca7c <start_pass+0x220>
 800c93e:	f240 7007 	movw	r0, #1799	; 0x707
 800c942:	4283      	cmp	r3, r0
 800c944:	f000 809c 	beq.w	800ca80 <start_pass+0x224>
 800c948:	f240 6006 	movw	r0, #1542	; 0x606
 800c94c:	4283      	cmp	r3, r0
 800c94e:	d1c0      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800c950:	4d86      	ldr	r5, [pc, #536]	; (800cb6c <start_pass+0x310>)
 800c952:	e07d      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c954:	f640 4006 	movw	r0, #3078	; 0xc06
 800c958:	4283      	cmp	r3, r0
 800c95a:	f000 8093 	beq.w	800ca84 <start_pass+0x228>
 800c95e:	dc21      	bgt.n	800c9a4 <start_pass+0x148>
 800c960:	f640 1009 	movw	r0, #2313	; 0x909
 800c964:	4283      	cmp	r3, r0
 800c966:	f000 808f 	beq.w	800ca88 <start_pass+0x22c>
 800c96a:	dc0d      	bgt.n	800c988 <start_pass+0x12c>
 800c96c:	f640 0008 	movw	r0, #2056	; 0x808
 800c970:	4283      	cmp	r3, r0
 800c972:	d039      	beq.n	800c9e8 <start_pass+0x18c>
 800c974:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800c978:	f000 8088 	beq.w	800ca8c <start_pass+0x230>
 800c97c:	f640 0004 	movw	r0, #2052	; 0x804
 800c980:	4283      	cmp	r3, r0
 800c982:	d1a6      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800c984:	4d7a      	ldr	r5, [pc, #488]	; (800cb70 <start_pass+0x314>)
 800c986:	e063      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c988:	f640 200a 	movw	r0, #2570	; 0xa0a
 800c98c:	4283      	cmp	r3, r0
 800c98e:	d07f      	beq.n	800ca90 <start_pass+0x234>
 800c990:	f640 300b 	movw	r0, #2827	; 0xb0b
 800c994:	4283      	cmp	r3, r0
 800c996:	d07d      	beq.n	800ca94 <start_pass+0x238>
 800c998:	f640 2005 	movw	r0, #2565	; 0xa05
 800c99c:	4283      	cmp	r3, r0
 800c99e:	d198      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800c9a0:	4d74      	ldr	r5, [pc, #464]	; (800cb74 <start_pass+0x318>)
 800c9a2:	e055      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c9a4:	f640 600e 	movw	r0, #3598	; 0xe0e
 800c9a8:	4283      	cmp	r3, r0
 800c9aa:	d075      	beq.n	800ca98 <start_pass+0x23c>
 800c9ac:	dc0d      	bgt.n	800c9ca <start_pass+0x16e>
 800c9ae:	f640 500d 	movw	r0, #3341	; 0xd0d
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	d072      	beq.n	800ca9c <start_pass+0x240>
 800c9b6:	f640 6007 	movw	r0, #3591	; 0xe07
 800c9ba:	4283      	cmp	r3, r0
 800c9bc:	d070      	beq.n	800caa0 <start_pass+0x244>
 800c9be:	f640 400c 	movw	r0, #3084	; 0xc0c
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	d185      	bne.n	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800c9c6:	4d6c      	ldr	r5, [pc, #432]	; (800cb78 <start_pass+0x31c>)
 800c9c8:	e042      	b.n	800ca50 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c9ca:	f241 0008 	movw	r0, #4104	; 0x1008
 800c9ce:	4283      	cmp	r3, r0
 800c9d0:	d068      	beq.n	800caa4 <start_pass+0x248>
 800c9d2:	f241 0010 	movw	r0, #4112	; 0x1010
 800c9d6:	4283      	cmp	r3, r0
 800c9d8:	d066      	beq.n	800caa8 <start_pass+0x24c>
 800c9da:	f640 700f 	movw	r0, #3855	; 0xf0f
 800c9de:	4283      	cmp	r3, r0
 800c9e0:	f47f af77 	bne.w	800c8d2 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800c9e4:	4d65      	ldr	r5, [pc, #404]	; (800cb7c <start_pass+0x320>)
 800c9e6:	e033      	b.n	800ca50 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800c9e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d827      	bhi.n	800ca40 <start_pass+0x1e4>
 800c9f0:	461c      	mov	r4, r3
 800c9f2:	4b63      	ldr	r3, [pc, #396]	; (800cb80 <start_pass+0x324>)
 800c9f4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800c9f8:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800c9fc:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800ca00:	b1cb      	cbz	r3, 800ca36 <start_pass+0x1da>
 800ca02:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ca06:	42a3      	cmp	r3, r4
 800ca08:	d015      	beq.n	800ca36 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800ca0a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800ca0e:	b196      	cbz	r6, 800ca36 <start_pass+0x1da>
    switch (method) {
 800ca10:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800ca12:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800ca16:	d049      	beq.n	800caac <start_pass+0x250>
 800ca18:	2c02      	cmp	r4, #2
 800ca1a:	d05a      	beq.n	800cad2 <start_pass+0x276>
 800ca1c:	2c00      	cmp	r4, #0
 800ca1e:	f040 8098 	bne.w	800cb52 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800ca22:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800ca26:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800ca28:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800ca2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800ca30:	3301      	adds	r3, #1
 800ca32:	2b40      	cmp	r3, #64	; 0x40
 800ca34:	d1f8      	bne.n	800ca28 <start_pass+0x1cc>
       ci++, compptr++) {
 800ca36:	f10b 0b01 	add.w	fp, fp, #1
 800ca3a:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800ca3e:	e71c      	b.n	800c87a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2231      	movs	r2, #49	; 0x31
 800ca44:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4638      	mov	r0, r7
 800ca4a:	4798      	blx	r3
      break;
 800ca4c:	e7d4      	b.n	800c9f8 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800ca4e:	4d4d      	ldr	r5, [pc, #308]	; (800cb84 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ca50:	2400      	movs	r4, #0
 800ca52:	e7d1      	b.n	800c9f8 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800ca54:	4d4c      	ldr	r5, [pc, #304]	; (800cb88 <start_pass+0x32c>)
 800ca56:	e7fb      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800ca58:	4d4c      	ldr	r5, [pc, #304]	; (800cb8c <start_pass+0x330>)
 800ca5a:	e7f9      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800ca5c:	4d4c      	ldr	r5, [pc, #304]	; (800cb90 <start_pass+0x334>)
 800ca5e:	e7f7      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800ca60:	4d4c      	ldr	r5, [pc, #304]	; (800cb94 <start_pass+0x338>)
 800ca62:	e7f5      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800ca64:	4d4c      	ldr	r5, [pc, #304]	; (800cb98 <start_pass+0x33c>)
 800ca66:	e7f3      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800ca68:	4d4c      	ldr	r5, [pc, #304]	; (800cb9c <start_pass+0x340>)
 800ca6a:	e7f1      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800ca6c:	4d4c      	ldr	r5, [pc, #304]	; (800cba0 <start_pass+0x344>)
 800ca6e:	e7ef      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800ca70:	4d4c      	ldr	r5, [pc, #304]	; (800cba4 <start_pass+0x348>)
 800ca72:	e7ed      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800ca74:	4d4c      	ldr	r5, [pc, #304]	; (800cba8 <start_pass+0x34c>)
 800ca76:	e7eb      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800ca78:	4d4c      	ldr	r5, [pc, #304]	; (800cbac <start_pass+0x350>)
 800ca7a:	e7e9      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800ca7c:	4d4c      	ldr	r5, [pc, #304]	; (800cbb0 <start_pass+0x354>)
 800ca7e:	e7e7      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800ca80:	4d4c      	ldr	r5, [pc, #304]	; (800cbb4 <start_pass+0x358>)
 800ca82:	e7e5      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800ca84:	4d4c      	ldr	r5, [pc, #304]	; (800cbb8 <start_pass+0x35c>)
 800ca86:	e7e3      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800ca88:	4d4c      	ldr	r5, [pc, #304]	; (800cbbc <start_pass+0x360>)
 800ca8a:	e7e1      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800ca8c:	4d4c      	ldr	r5, [pc, #304]	; (800cbc0 <start_pass+0x364>)
 800ca8e:	e7df      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800ca90:	4d4c      	ldr	r5, [pc, #304]	; (800cbc4 <start_pass+0x368>)
 800ca92:	e7dd      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800ca94:	4d4c      	ldr	r5, [pc, #304]	; (800cbc8 <start_pass+0x36c>)
 800ca96:	e7db      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800ca98:	4d4c      	ldr	r5, [pc, #304]	; (800cbcc <start_pass+0x370>)
 800ca9a:	e7d9      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800ca9c:	4d4c      	ldr	r5, [pc, #304]	; (800cbd0 <start_pass+0x374>)
 800ca9e:	e7d7      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800caa0:	4d4c      	ldr	r5, [pc, #304]	; (800cbd4 <start_pass+0x378>)
 800caa2:	e7d5      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800caa4:	4d4c      	ldr	r5, [pc, #304]	; (800cbd8 <start_pass+0x37c>)
 800caa6:	e7d3      	b.n	800ca50 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800caa8:	4d4c      	ldr	r5, [pc, #304]	; (800cbdc <start_pass+0x380>)
 800caaa:	e7d1      	b.n	800ca50 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800caac:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800cab0:	2200      	movs	r2, #0
 800cab2:	494b      	ldr	r1, [pc, #300]	; (800cbe0 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800cab4:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800cab8:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800cabc:	fb0c f303 	mul.w	r3, ip, r3
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800cac6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800caca:	3201      	adds	r2, #1
 800cacc:	2a40      	cmp	r2, #64	; 0x40
 800cace:	d1f1      	bne.n	800cab4 <start_pass+0x258>
 800cad0:	e7b1      	b.n	800ca36 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800cad2:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800cad6:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	4b41      	ldr	r3, [pc, #260]	; (800cbe4 <start_pass+0x388>)
 800cade:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cae0:	9b03      	ldr	r3, [sp, #12]
 800cae2:	ecb3 7b02 	vldmia	r3!, {d7}
 800cae6:	9303      	str	r3, [sp, #12]
 800cae8:	eeb0 8a47 	vmov.f32	s16, s14
 800caec:	eef0 8a67 	vmov.f32	s17, s15
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	4b3a      	ldr	r3, [pc, #232]	; (800cbe4 <start_pass+0x388>)
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	f106 0310 	add.w	r3, r6, #16
 800cb00:	9305      	str	r3, [sp, #20]
 800cb02:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800cb04:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cb08:	ecb3 7b02 	vldmia	r3!, {d7}
 800cb0c:	eeb0 9a47 	vmov.f32	s18, s14
 800cb10:	eef0 9a67 	vmov.f32	s19, s15
 800cb14:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800cb16:	f7f3 fd0d 	bl	8000534 <__aeabi_ui2d>
 800cb1a:	ec53 2b18 	vmov	r2, r3, d8
 800cb1e:	f7f3 fd83 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cb22:	ec53 2b19 	vmov	r2, r3, d9
 800cb26:	f7f3 fd7f 	bl	8000628 <__aeabi_dmul>
 800cb2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f7f3 fd7a 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800cb34:	f7f3 ff8a 	bl	8000a4c <__aeabi_d2f>
 800cb38:	9b01      	ldr	r3, [sp, #4]
 800cb3a:	f843 0b04 	str.w	r0, [r3], #4
 800cb3e:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800cb40:	9b05      	ldr	r3, [sp, #20]
 800cb42:	429e      	cmp	r6, r3
 800cb44:	d1dd      	bne.n	800cb02 <start_pass+0x2a6>
	    i++;
 800cb46:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800cb4a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800cb4e:	d1c7      	bne.n	800cae0 <start_pass+0x284>
 800cb50:	e771      	b.n	800ca36 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2231      	movs	r2, #49	; 0x31
 800cb56:	4638      	mov	r0, r7
 800cb58:	615a      	str	r2, [r3, #20]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4798      	blx	r3
      break;
 800cb5e:	e76a      	b.n	800ca36 <start_pass+0x1da>
 800cb60:	08011d19 	.word	0x08011d19
 800cb64:	08011c25 	.word	0x08011c25
 800cb68:	08015b95 	.word	0x08015b95
 800cb6c:	080117c5 	.word	0x080117c5
 800cb70:	08014aed 	.word	0x08014aed
 800cb74:	080148a5 	.word	0x080148a5
 800cb78:	08012771 	.word	0x08012771
 800cb7c:	08013445 	.word	0x08013445
 800cb80:	0802e9b0 	.word	0x0802e9b0
 800cb84:	08015329 	.word	0x08015329
 800cb88:	08011af9 	.word	0x08011af9
 800cb8c:	08015efd 	.word	0x08015efd
 800cb90:	08014f0d 	.word	0x08014f0d
 800cb94:	08011d91 	.word	0x08011d91
 800cb98:	08015fd5 	.word	0x08015fd5
 800cb9c:	08015db1 	.word	0x08015db1
 800cba0:	08014e3d 	.word	0x08014e3d
 800cba4:	08014ce1 	.word	0x08014ce1
 800cba8:	08011975 	.word	0x08011975
 800cbac:	08015961 	.word	0x08015961
 800cbb0:	080156a1 	.word	0x080156a1
 800cbb4:	0801151d 	.word	0x0801151d
 800cbb8:	080145d9 	.word	0x080145d9
 800cbbc:	08011db5 	.word	0x08011db5
 800cbc0:	08014f45 	.word	0x08014f45
 800cbc4:	08012081 	.word	0x08012081
 800cbc8:	08012379 	.word	0x08012379
 800cbcc:	08012ff1 	.word	0x08012ff1
 800cbd0:	08012b2d 	.word	0x08012b2d
 800cbd4:	08014259 	.word	0x08014259
 800cbd8:	08013e11 	.word	0x08013e11
 800cbdc:	080138d9 	.word	0x080138d9
 800cbe0:	0802ea00 	.word	0x0802ea00
 800cbe4:	0802e9c0 	.word	0x0802e9c0

0800cbe8 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbea:	6843      	ldr	r3, [r0, #4]
{
 800cbec:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbee:	2254      	movs	r2, #84	; 0x54
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cbf4:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbf6:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800cbf8:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <jinit_inverse_dct+0x50>)
 800cbfa:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cbfc:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800cc00:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800cc04:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc0a:	42b3      	cmp	r3, r6
 800cc0c:	dc00      	bgt.n	800cc10 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800cc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc10:	686b      	ldr	r3, [r5, #4]
 800cc12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc16:	2101      	movs	r1, #1
 800cc18:	4628      	mov	r0, r5
 800cc1a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800cc1c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc1e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800cc20:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800cc24:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800cc26:	2100      	movs	r1, #0
 800cc28:	f01d ff80 	bl	802ab2c <memset>
    idct->cur_method[ci] = -1;
 800cc2c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800cc30:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800cc32:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800cc36:	e7e7      	b.n	800cc08 <jinit_inverse_dct+0x20>
 800cc38:	0800c85d 	.word	0x0800c85d

0800cc3c <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800cc3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800cc40:	6905      	ldr	r5, [r0, #16]
{
 800cc42:	4607      	mov	r7, r0
 800cc44:	4688      	mov	r8, r1
 800cc46:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800cc48:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800cc4c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800cc4e:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800cc52:	f1bb 0f00 	cmp.w	fp, #0
 800cc56:	d042      	beq.n	800ccde <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800cc58:	454e      	cmp	r6, r9
 800cc5a:	da42      	bge.n	800cce2 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800cc5c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	b95b      	cbnz	r3, 800cc7c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	2278      	movs	r2, #120	; 0x78
 800cc68:	f04f 31ff 	mov.w	r1, #4294967295
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	615a      	str	r2, [r3, #20]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800cc74:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800cc78:	2201      	movs	r2, #1
 800cc7a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800cc7c:	f1c6 0619 	rsb	r6, r6, #25
 800cc80:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800cc84:	2619      	movs	r6, #25
 800cc86:	e02c      	b.n	800cce2 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800cc88:	f1ba 0f00 	cmp.w	sl, #0
 800cc8c:	d107      	bne.n	800cc9e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800cc8e:	69ab      	ldr	r3, [r5, #24]
 800cc90:	4628      	mov	r0, r5
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	4798      	blx	r3
 800cc96:	b350      	cbz	r0, 800ccee <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800cc98:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800cc9a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800cc9e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800cca2:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800cca6:	2aff      	cmp	r2, #255	; 0xff
 800cca8:	d116      	bne.n	800ccd8 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800ccaa:	f1ba 0f00 	cmp.w	sl, #0
 800ccae:	d109      	bne.n	800ccc4 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800ccb0:	69ab      	ldr	r3, [r5, #24]
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	9201      	str	r2, [sp, #4]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	4798      	blx	r3
 800ccba:	b1c0      	cbz	r0, 800ccee <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800ccbc:	69ab      	ldr	r3, [r5, #24]
 800ccbe:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800ccc0:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800ccc4:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800ccc8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800cccc:	2bff      	cmp	r3, #255	; 0xff
 800ccce:	d0ec      	beq.n	800ccaa <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800ccd0:	b113      	cbz	r3, 800ccd8 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800ccd2:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800ccd6:	e7bf      	b.n	800cc58 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800ccd8:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800ccdc:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800ccde:	2e18      	cmp	r6, #24
 800cce0:	ddd2      	ble.n	800cc88 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800cce2:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800cce6:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800ccea:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800ccee:	4658      	mov	r0, fp
 800ccf0:	b003      	add	sp, #12
 800ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ccf8 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	9d06      	ldr	r5, [sp, #24]
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	468c      	mov	ip, r1
 800cd00:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800cd02:	4295      	cmp	r5, r2
{
 800cd04:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cd06:	dd08      	ble.n	800cd1a <jpeg_huff_decode+0x22>
 800cd08:	462b      	mov	r3, r5
 800cd0a:	f7ff ff97 	bl	800cc3c <jpeg_fill_bit_buffer>
 800cd0e:	b910      	cbnz	r0, 800cd16 <jpeg_huff_decode+0x1e>
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800cd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800cd16:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800cd1a:	1b62      	subs	r2, r4, r5
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	; (800cd88 <jpeg_huff_decode+0x90>)
 800cd1e:	fa4c f002 	asr.w	r0, ip, r2
 800cd22:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cd26:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800cd28:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800cd2c:	4283      	cmp	r3, r0
 800cd2e:	db0d      	blt.n	800cd4c <jpeg_huff_decode+0x54>
  if (l > 16) {
 800cd30:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800cd32:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800cd36:	dd1e      	ble.n	800cd76 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800cd38:	6930      	ldr	r0, [r6, #16]
 800cd3a:	2279      	movs	r2, #121	; 0x79
 800cd3c:	f04f 31ff 	mov.w	r1, #4294967295
 800cd40:	6803      	ldr	r3, [r0, #0]
 800cd42:	615a      	str	r2, [r3, #20]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e7e3      	b.n	800cd14 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cd4c:	2a00      	cmp	r2, #0
    code <<= 1;
 800cd4e:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800cd52:	dc08      	bgt.n	800cd66 <jpeg_huff_decode+0x6e>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4661      	mov	r1, ip
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f7ff ff6f 	bl	800cc3c <jpeg_fill_bit_buffer>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0d6      	beq.n	800cd10 <jpeg_huff_decode+0x18>
 800cd62:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800cd66:	3a01      	subs	r2, #1
    l++;
 800cd68:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800cd6a:	fa4c f002 	asr.w	r0, ip, r2
 800cd6e:	f000 0001 	and.w	r0, r0, #1
 800cd72:	4320      	orrs	r0, r4
    l++;
 800cd74:	e7d8      	b.n	800cd28 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800cd76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd7a:	3512      	adds	r5, #18
 800cd7c:	4418      	add	r0, r3
 800cd7e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800cd82:	4410      	add	r0, r2
 800cd84:	7c40      	ldrb	r0, [r0, #17]
 800cd86:	e7c5      	b.n	800cd14 <jpeg_huff_decode+0x1c>
 800cd88:	0802ea80 	.word	0x0802ea80

0800cd8c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800cd8c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cd8e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800cd92:	2600      	movs	r6, #0
{
 800cd94:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800cd96:	68eb      	ldr	r3, [r5, #12]
 800cd98:	6991      	ldr	r1, [r2, #24]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	bfb8      	it	lt
 800cd9e:	3307      	addlt	r3, #7
 800cda0:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800cda4:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800cda6:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800cda8:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800cdaa:	4798      	blx	r3
 800cdac:	b190      	cbz	r0, 800cdd4 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800cdae:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	f105 0014 	add.w	r0, r5, #20
 800cdb8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800cdbc:	0092      	lsls	r2, r2, #2
 800cdbe:	f01d feb5 	bl	802ab2c <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800cdc2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800cdc6:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800cdc8:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800cdca:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800cdce:	b903      	cbnz	r3, 800cdd2 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800cdd0:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800cdd2:	2001      	movs	r0, #1
}
 800cdd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdd8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800cddc:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800cde0:	b091      	sub	sp, #68	; 0x44
 800cde2:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cde4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800cde8:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cdea:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800cdee:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800cdf0:	b933      	cbnz	r3, 800ce00 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800cdf2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cdf4:	b17e      	cbz	r6, 800ce16 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cdf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800cdf8:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800cdfe:	e007      	b.n	800ce10 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800ce00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1f5      	bne.n	800cdf2 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800ce06:	f7ff ffc1 	bl	800cd8c <process_restart>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d1f1      	bne.n	800cdf2 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800ce0e:	2000      	movs	r0, #0
}
 800ce10:	b011      	add	sp, #68	; 0x44
 800ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ce16:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800ce18:	f104 0810 	add.w	r8, r4, #16
 800ce1c:	af0b      	add	r7, sp, #44	; 0x2c
 800ce1e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	f104 0b10 	add.w	fp, r4, #16
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	9206      	str	r2, [sp, #24]
 800ce2c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800ce2e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800cf48 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ce32:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800ce34:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ce38:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800ce3c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ce3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce42:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ce44:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800ce48:	42b3      	cmp	r3, r6
 800ce4a:	dc0d      	bgt.n	800ce68 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ce4c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800ce4e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ce50:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800ce52:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	9a07      	ldr	r2, [sp, #28]
 800ce58:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800ce5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ce5c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800ce60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce62:	6833      	ldr	r3, [r6, #0]
 800ce64:	602b      	str	r3, [r5, #0]
 800ce66:	e7c6      	b.n	800cdf6 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800ce68:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800ce6a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800ce6e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800ce72:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800ce76:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800ce78:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800ce7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce86:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800ce8a:	dc0c      	bgt.n	800cea6 <decode_mcu_DC_first+0xce>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4662      	mov	r2, ip
 800ce90:	4671      	mov	r1, lr
 800ce92:	a806      	add	r0, sp, #24
 800ce94:	f7ff fed2 	bl	800cc3c <jpeg_fill_bit_buffer>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0b8      	beq.n	800ce0e <decode_mcu_DC_first+0x36>
 800ce9c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cea0:	f1bc 0f07 	cmp.w	ip, #7
 800cea4:	dd3e      	ble.n	800cf24 <decode_mcu_DC_first+0x14c>
 800cea6:	f1ac 0308 	sub.w	r3, ip, #8
 800ceaa:	fa4e f303 	asr.w	r3, lr, r3
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ceb4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ceb8:	2a00      	cmp	r2, #0
 800ceba:	d042      	beq.n	800cf42 <decode_mcu_DC_first+0x16a>
 800cebc:	4443      	add	r3, r8
 800cebe:	ebac 0c02 	sub.w	ip, ip, r2
 800cec2:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800cec6:	f1b8 0f00 	cmp.w	r8, #0
 800ceca:	d01b      	beq.n	800cf04 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cecc:	45e0      	cmp	r8, ip
 800cece:	dd09      	ble.n	800cee4 <decode_mcu_DC_first+0x10c>
 800ced0:	4643      	mov	r3, r8
 800ced2:	4662      	mov	r2, ip
 800ced4:	4671      	mov	r1, lr
 800ced6:	a806      	add	r0, sp, #24
 800ced8:	f7ff feb0 	bl	800cc3c <jpeg_fill_bit_buffer>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d096      	beq.n	800ce0e <decode_mcu_DC_first+0x36>
 800cee0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800cee4:	ebac 0c08 	sub.w	ip, ip, r8
 800cee8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800ceec:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800cef0:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800cef4:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800cef8:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800cefa:	4299      	cmp	r1, r3
 800cefc:	bfac      	ite	ge
 800cefe:	eba3 0802 	subge.w	r8, r3, r2
 800cf02:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800cf04:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cf06:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800cf08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800cf0c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800cf0e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800cf12:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800cf14:	fa00 f803 	lsl.w	r8, r0, r3
 800cf18:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800cf1a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800cf1e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cf22:	e78f      	b.n	800ce44 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800cf24:	2301      	movs	r3, #1
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	4662      	mov	r2, ip
 800cf2a:	4643      	mov	r3, r8
 800cf2c:	4671      	mov	r1, lr
 800cf2e:	a806      	add	r0, sp, #24
 800cf30:	f7ff fee2 	bl	800ccf8 <jpeg_huff_decode>
 800cf34:	f1b0 0800 	subs.w	r8, r0, #0
 800cf38:	f6ff af69 	blt.w	800ce0e <decode_mcu_DC_first+0x36>
 800cf3c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cf40:	e7c1      	b.n	800cec6 <decode_mcu_DC_first+0xee>
 800cf42:	2309      	movs	r3, #9
 800cf44:	e7ef      	b.n	800cf26 <decode_mcu_DC_first+0x14e>
 800cf46:	bf00      	nop
 800cf48:	0802ea80 	.word	0x0802ea80

0800cf4c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cf4c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800cf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	4607      	mov	r7, r0
 800cf56:	b08d      	sub	sp, #52	; 0x34
 800cf58:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cf5a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800cf5e:	b933      	cbnz	r3, 800cf6e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800cf60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf62:	b17b      	cbz	r3, 800cf84 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cf64:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800cf66:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800cf6c:	e007      	b.n	800cf7e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800cf6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1f5      	bne.n	800cf60 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800cf74:	f7ff ff0a 	bl	800cd8c <process_restart>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1f1      	bne.n	800cf60 <decode_mcu_AC_first+0x14>
	return FALSE;
 800cf7c:	2000      	movs	r0, #0
}
 800cf7e:	b00d      	add	sp, #52	; 0x34
 800cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800cf84:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800cf86:	b116      	cbz	r6, 800cf8e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800cf88:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800cf8a:	612e      	str	r6, [r5, #16]
 800cf8c:	e7ea      	b.n	800cf64 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800cf8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800cf92:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800cf96:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800cf98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800cf9c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800cfa0:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfa2:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800cfa4:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	9207      	str	r2, [sp, #28]
 800cfae:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800cfb0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800d0a8 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800cfb4:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfb6:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800cfb8:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cfba:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800cfbe:	9b03      	ldr	r3, [sp, #12]
 800cfc0:	4598      	cmp	r8, r3
 800cfc2:	dc69      	bgt.n	800d098 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800cfc4:	2a07      	cmp	r2, #7
 800cfc6:	dc09      	bgt.n	800cfdc <decode_mcu_AC_first+0x90>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	a807      	add	r0, sp, #28
 800cfcc:	f7ff fe36 	bl	800cc3c <jpeg_fill_bit_buffer>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d0d3      	beq.n	800cf7c <decode_mcu_AC_first+0x30>
 800cfd4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800cfd8:	2a07      	cmp	r2, #7
 800cfda:	dd33      	ble.n	800d044 <decode_mcu_AC_first+0xf8>
 800cfdc:	f1a2 0308 	sub.w	r3, r2, #8
 800cfe0:	fa41 f303 	asr.w	r3, r1, r3
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cfea:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800cfee:	b3a0      	cbz	r0, 800d05a <decode_mcu_AC_first+0x10e>
 800cff0:	444b      	add	r3, r9
 800cff2:	1a12      	subs	r2, r2, r0
 800cff4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800cff8:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800cffc:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d000:	d02d      	beq.n	800d05e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d002:	42a2      	cmp	r2, r4
	  k += r;
 800d004:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d006:	da07      	bge.n	800d018 <decode_mcu_AC_first+0xcc>
 800d008:	4623      	mov	r3, r4
 800d00a:	a807      	add	r0, sp, #28
 800d00c:	f7ff fe16 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d010:	2800      	cmp	r0, #0
 800d012:	d0b3      	beq.n	800cf7c <decode_mcu_AC_first+0x30>
 800d014:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800d018:	1b12      	subs	r2, r2, r4
 800d01a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d01e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d020:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800d024:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800d028:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800d02a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d02c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800d02e:	bfa8      	it	ge
 800d030:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d032:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800d036:	40a3      	lsls	r3, r4
 800d038:	9c05      	ldr	r4, [sp, #20]
 800d03a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d03e:	f108 0801 	add.w	r8, r8, #1
 800d042:	e7bc      	b.n	800cfbe <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d044:	2301      	movs	r3, #1
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	a807      	add	r0, sp, #28
 800d04a:	464b      	mov	r3, r9
 800d04c:	f7ff fe54 	bl	800ccf8 <jpeg_huff_decode>
 800d050:	2800      	cmp	r0, #0
 800d052:	db93      	blt.n	800cf7c <decode_mcu_AC_first+0x30>
 800d054:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800d058:	e7ce      	b.n	800cff8 <decode_mcu_AC_first+0xac>
 800d05a:	2309      	movs	r3, #9
 800d05c:	e7f3      	b.n	800d046 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800d05e:	2b0f      	cmp	r3, #15
 800d060:	d102      	bne.n	800d068 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800d062:	f108 080f 	add.w	r8, r8, #15
 800d066:	e7ea      	b.n	800d03e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800d068:	2601      	movs	r6, #1
 800d06a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800d06c:	b19b      	cbz	r3, 800d096 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800d06e:	429a      	cmp	r2, r3
 800d070:	da09      	bge.n	800d086 <decode_mcu_AC_first+0x13a>
 800d072:	a807      	add	r0, sp, #28
 800d074:	9303      	str	r3, [sp, #12]
 800d076:	f7ff fde1 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	f43f af7e 	beq.w	800cf7c <decode_mcu_AC_first+0x30>
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	4807      	ldr	r0, [pc, #28]	; (800d0a8 <decode_mcu_AC_first+0x15c>)
 800d08a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d08e:	fa41 f302 	asr.w	r3, r1, r2
 800d092:	4003      	ands	r3, r0
	      EOBRUN += r;
 800d094:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800d096:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	9807      	ldr	r0, [sp, #28]
 800d09c:	6018      	str	r0, [r3, #0]
 800d09e:	9808      	ldr	r0, [sp, #32]
 800d0a0:	6058      	str	r0, [r3, #4]
 800d0a2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800d0a6:	e770      	b.n	800cf8a <decode_mcu_AC_first+0x3e>
 800d0a8:	0802ea80 	.word	0x0802ea80

0800d0ac <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d0b0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800d0b4:	2701      	movs	r7, #1
{   
 800d0b6:	b087      	sub	sp, #28
 800d0b8:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d0ba:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d0bc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800d0c0:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d0c2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800d0c6:	b9c3      	cbnz	r3, 800d0fa <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d0c8:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d0ca:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d0cc:	9405      	str	r4, [sp, #20]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	9201      	str	r2, [sp, #4]
 800d0d4:	9302      	str	r3, [sp, #8]
 800d0d6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d0da:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d0de:	42b3      	cmp	r3, r6
 800d0e0:	dc16      	bgt.n	800d110 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0e2:	69a3      	ldr	r3, [r4, #24]
 800d0e4:	9801      	ldr	r0, [sp, #4]
 800d0e6:	6018      	str	r0, [r3, #0]
 800d0e8:	9802      	ldr	r0, [sp, #8]
 800d0ea:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800d0ec:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d0ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d0f0:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d0f2:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800d0f6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800d0f8:	e007      	b.n	800d10a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800d0fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1e3      	bne.n	800d0c8 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800d100:	f7ff fe44 	bl	800cd8c <process_restart>
 800d104:	2800      	cmp	r0, #0
 800d106:	d1df      	bne.n	800d0c8 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800d108:	2000      	movs	r0, #0
}
 800d10a:	b007      	add	sp, #28
 800d10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800d110:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800d112:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800d116:	dc07      	bgt.n	800d128 <decode_mcu_DC_refine+0x7c>
 800d118:	2301      	movs	r3, #1
 800d11a:	a801      	add	r0, sp, #4
 800d11c:	f7ff fd8e 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d120:	2800      	cmp	r0, #0
 800d122:	d0f1      	beq.n	800d108 <decode_mcu_DC_refine+0x5c>
 800d124:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800d128:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d12a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800d12c:	fa41 f302 	asr.w	r3, r1, r2
 800d130:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800d132:	bf42      	ittt	mi
 800d134:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800d138:	433b      	orrmi	r3, r7
 800d13a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d13e:	e7cc      	b.n	800d0da <decode_mcu_DC_refine+0x2e>

0800d140 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d140:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	4606      	mov	r6, r0
 800d14a:	b0d1      	sub	sp, #324	; 0x144
 800d14c:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d14e:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800d152:	b95b      	cbnz	r3, 800d16c <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800d154:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800d158:	f1bb 0f00 	cmp.w	fp, #0
 800d15c:	d012      	beq.n	800d184 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d15e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800d162:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d164:	3b01      	subs	r3, #1
 800d166:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800d16a:	e008      	b.n	800d17e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800d16c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1ef      	bne.n	800d154 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800d174:	f7ff fe0a 	bl	800cd8c <process_restart>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1eb      	bne.n	800d154 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800d17c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800d17e:	b051      	add	sp, #324	; 0x144
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800d184:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d188:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d18a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800d18c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800d190:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d192:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800d196:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d19a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d19c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800d19e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800d1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800d1aa:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800d1ae:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d1b0:	69b3      	ldr	r3, [r6, #24]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	602a      	str	r2, [r5, #0]
 800d1b8:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800d1ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d1be:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800d1c2:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f040 80bf 	bne.w	800d348 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800d1ca:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d1ce:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800d1d0:	9b06      	ldr	r3, [sp, #24]
 800d1d2:	429f      	cmp	r7, r3
 800d1d4:	dd0a      	ble.n	800d1ec <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d1d6:	69b3      	ldr	r3, [r6, #24]
 800d1d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1da:	6019      	str	r1, [r3, #0]
 800d1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d1de:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d1e0:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d1e2:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800d1e6:	f8c8 3010 	str.w	r3, [r8, #16]
 800d1ea:	e7b8      	b.n	800d15e <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d1ec:	2a07      	cmp	r2, #7
 800d1ee:	dc0a      	bgt.n	800d206 <decode_mcu_AC_refine+0xc6>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	f7ff fd21 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d06e      	beq.n	800d2dc <decode_mcu_AC_refine+0x19c>
 800d1fe:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800d202:	2a07      	cmp	r2, #7
 800d204:	dd61      	ble.n	800d2ca <decode_mcu_AC_refine+0x18a>
 800d206:	f1a2 0308 	sub.w	r3, r2, #8
 800d20a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d20c:	fa44 f303 	asr.w	r3, r4, r3
 800d210:	b2db      	uxtb	r3, r3
 800d212:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d216:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800d21a:	2900      	cmp	r1, #0
 800d21c:	d06b      	beq.n	800d2f6 <decode_mcu_AC_refine+0x1b6>
 800d21e:	4403      	add	r3, r0
 800d220:	1a52      	subs	r2, r2, r1
 800d222:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800d226:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800d22a:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	d066      	beq.n	800d300 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800d232:	2b01      	cmp	r3, #1
 800d234:	d009      	beq.n	800d24a <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800d236:	6833      	ldr	r3, [r6, #0]
 800d238:	2179      	movs	r1, #121	; 0x79
 800d23a:	4630      	mov	r0, r6
 800d23c:	9204      	str	r2, [sp, #16]
 800d23e:	6159      	str	r1, [r3, #20]
 800d240:	f04f 31ff 	mov.w	r1, #4294967295
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	4798      	blx	r3
 800d248:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	dc08      	bgt.n	800d260 <decode_mcu_AC_refine+0x120>
 800d24e:	2301      	movs	r3, #1
 800d250:	4621      	mov	r1, r4
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff fcf2 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d03f      	beq.n	800d2dc <decode_mcu_AC_refine+0x19c>
 800d25c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800d260:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800d262:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800d264:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800d268:	f013 0f01 	tst.w	r3, #1
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	bf08      	it	eq
 800d270:	460b      	moveq	r3, r1
 800d272:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800d274:	9b08      	ldr	r3, [sp, #32]
 800d276:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d27a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800d27c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d068      	beq.n	800d356 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d284:	2a00      	cmp	r2, #0
 800d286:	dc07      	bgt.n	800d298 <decode_mcu_AC_refine+0x158>
 800d288:	2301      	movs	r3, #1
 800d28a:	4621      	mov	r1, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f7ff fcd5 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d292:	b318      	cbz	r0, 800d2dc <decode_mcu_AC_refine+0x19c>
 800d294:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800d298:	3a01      	subs	r2, #1
 800d29a:	fa44 f302 	asr.w	r3, r4, r2
 800d29e:	07d9      	lsls	r1, r3, #31
 800d2a0:	d50e      	bpl.n	800d2c0 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800d2a2:	9b05      	ldr	r3, [sp, #20]
 800d2a4:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	4219      	tst	r1, r3
 800d2ac:	d108      	bne.n	800d2c0 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800d2ae:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800d2b0:	b28b      	uxth	r3, r1
 800d2b2:	bfac      	ite	ge
 800d2b4:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800d2b6:	9907      	ldrlt	r1, [sp, #28]
 800d2b8:	440b      	add	r3, r1
 800d2ba:	9905      	ldr	r1, [sp, #20]
 800d2bc:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800d2c0:	3701      	adds	r7, #1
	} while (k <= Se);
 800d2c2:	9b06      	ldr	r3, [sp, #24]
 800d2c4:	42bb      	cmp	r3, r7
 800d2c6:	dad5      	bge.n	800d274 <decode_mcu_AC_refine+0x134>
 800d2c8:	e048      	b.n	800d35c <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f7ff fd10 	bl	800ccf8 <jpeg_huff_decode>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	da0e      	bge.n	800d2fa <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d2dc:	ab10      	add	r3, sp, #64	; 0x40
 800d2de:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800d2e0:	f1bb 0f00 	cmp.w	fp, #0
 800d2e4:	f43f af4a 	beq.w	800d17c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800d2e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d2ec:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800d2f0:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800d2f4:	e7f4      	b.n	800d2e0 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800d2f6:	2309      	movs	r3, #9
 800d2f8:	e7e8      	b.n	800d2cc <decode_mcu_AC_refine+0x18c>
 800d2fa:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800d2fe:	e792      	b.n	800d226 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800d300:	f1ba 0f0f 	cmp.w	sl, #15
 800d304:	d0b6      	beq.n	800d274 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800d306:	2301      	movs	r3, #1
 800d308:	fa03 f30a 	lsl.w	r3, r3, sl
 800d30c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800d30e:	f1ba 0f00 	cmp.w	sl, #0
 800d312:	d015      	beq.n	800d340 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800d314:	4552      	cmp	r2, sl
 800d316:	da08      	bge.n	800d32a <decode_mcu_AC_refine+0x1ea>
 800d318:	4653      	mov	r3, sl
 800d31a:	4621      	mov	r1, r4
 800d31c:	a80b      	add	r0, sp, #44	; 0x2c
 800d31e:	f7ff fc8d 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d322:	2800      	cmp	r0, #0
 800d324:	d0da      	beq.n	800d2dc <decode_mcu_AC_refine+0x19c>
 800d326:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800d32a:	4b26      	ldr	r3, [pc, #152]	; (800d3c4 <decode_mcu_AC_refine+0x284>)
 800d32c:	eba2 020a 	sub.w	r2, r2, sl
 800d330:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d334:	fa44 f302 	asr.w	r3, r4, r2
 800d338:	400b      	ands	r3, r1
	      EOBRUN += r;
 800d33a:	9902      	ldr	r1, [sp, #8]
 800d33c:	4419      	add	r1, r3
 800d33e:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f43f af47 	beq.w	800d1d6 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800d348:	9b06      	ldr	r3, [sp, #24]
 800d34a:	429f      	cmp	r7, r3
 800d34c:	dd15      	ble.n	800d37a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800d34e:	9b02      	ldr	r3, [sp, #8]
 800d350:	3b01      	subs	r3, #1
 800d352:	9302      	str	r3, [sp, #8]
 800d354:	e73f      	b.n	800d1d6 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800d356:	f1ba 0a01 	subs.w	sl, sl, #1
 800d35a:	d2b1      	bcs.n	800d2c0 <decode_mcu_AC_refine+0x180>
	if (s) {
 800d35c:	9b04      	ldr	r3, [sp, #16]
 800d35e:	b153      	cbz	r3, 800d376 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800d360:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800d362:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800d364:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800d368:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800d36c:	a910      	add	r1, sp, #64	; 0x40
 800d36e:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800d372:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800d376:	3701      	adds	r7, #1
 800d378:	e72a      	b.n	800d1d0 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800d37a:	9b08      	ldr	r3, [sp, #32]
 800d37c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800d380:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800d384:	b1e3      	cbz	r3, 800d3c0 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800d386:	2a00      	cmp	r2, #0
 800d388:	dc08      	bgt.n	800d39c <decode_mcu_AC_refine+0x25c>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4621      	mov	r1, r4
 800d38e:	a80b      	add	r0, sp, #44	; 0x2c
 800d390:	f7ff fc54 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d394:	2800      	cmp	r0, #0
 800d396:	d0a1      	beq.n	800d2dc <decode_mcu_AC_refine+0x19c>
 800d398:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800d39c:	3a01      	subs	r2, #1
 800d39e:	fa44 f302 	asr.w	r3, r4, r2
 800d3a2:	07db      	lsls	r3, r3, #31
 800d3a4:	d50c      	bpl.n	800d3c0 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800d3a6:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	4219      	tst	r1, r3
 800d3ae:	d107      	bne.n	800d3c0 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800d3b0:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800d3b2:	b28b      	uxth	r3, r1
 800d3b4:	bfac      	ite	ge
 800d3b6:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800d3b8:	9907      	ldrlt	r1, [sp, #28]
 800d3ba:	440b      	add	r3, r1
 800d3bc:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800d3c0:	3701      	adds	r7, #1
 800d3c2:	e7c1      	b.n	800d348 <decode_mcu_AC_refine+0x208>
 800d3c4:	0802ea80 	.word	0x0802ea80

0800d3c8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d3cc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800d3d0:	b093      	sub	sp, #76	; 0x4c
 800d3d2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d3d4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800d3d8:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800d3da:	b933      	cbnz	r3, 800d3ea <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d3dc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d3de:	b17f      	cbz	r7, 800d400 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d3e0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800d3e2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800d3e8:	e007      	b.n	800d3fa <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800d3ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1f5      	bne.n	800d3dc <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800d3f0:	f7ff fccc 	bl	800cd8c <process_restart>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d1f1      	bne.n	800d3dc <decode_mcu_sub+0x14>
	return FALSE;
 800d3f8:	2000      	movs	r0, #0
}
 800d3fa:	b013      	add	sp, #76	; 0x4c
 800d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800d400:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800d404:	f105 0810 	add.w	r8, r5, #16
 800d408:	ac0d      	add	r4, sp, #52	; 0x34
 800d40a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800d40e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800d410:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800d414:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800d6b4 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800d418:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d41a:	69b3      	ldr	r3, [r6, #24]
 800d41c:	960c      	str	r6, [sp, #48]	; 0x30
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	9208      	str	r2, [sp, #32]
 800d424:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800d426:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d42a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d42e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d430:	f8d8 3000 	ldr.w	r3, [r8]
 800d434:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d436:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800d43a:	42bb      	cmp	r3, r7
 800d43c:	dc0e      	bgt.n	800d45c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d43e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d440:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d442:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800d444:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d44c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d44e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d450:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d456:	6833      	ldr	r3, [r6, #0]
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	e7c1      	b.n	800d3e0 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d45c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d45e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d462:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800d466:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d46a:	dc0c      	bgt.n	800d486 <decode_mcu_sub+0xbe>
 800d46c:	2300      	movs	r3, #0
 800d46e:	4662      	mov	r2, ip
 800d470:	4671      	mov	r1, lr
 800d472:	a808      	add	r0, sp, #32
 800d474:	f7ff fbe2 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d0bd      	beq.n	800d3f8 <decode_mcu_sub+0x30>
 800d47c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d480:	f1bc 0f07 	cmp.w	ip, #7
 800d484:	dd4a      	ble.n	800d51c <decode_mcu_sub+0x154>
 800d486:	f1ac 0308 	sub.w	r3, ip, #8
 800d48a:	fa4e f303 	asr.w	r3, lr, r3
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d494:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d498:	2a00      	cmp	r2, #0
 800d49a:	d04d      	beq.n	800d538 <decode_mcu_sub+0x170>
 800d49c:	4423      	add	r3, r4
 800d49e:	ebac 0c02 	sub.w	ip, ip, r2
 800d4a2:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d4a6:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800d4aa:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800d4ae:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80a0 	beq.w	800d5f6 <decode_mcu_sub+0x22e>
	if (s) {
 800d4b6:	b1cc      	cbz	r4, 800d4ec <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d4b8:	45a4      	cmp	ip, r4
 800d4ba:	da09      	bge.n	800d4d0 <decode_mcu_sub+0x108>
 800d4bc:	4623      	mov	r3, r4
 800d4be:	4662      	mov	r2, ip
 800d4c0:	4671      	mov	r1, lr
 800d4c2:	a808      	add	r0, sp, #32
 800d4c4:	f7ff fbba 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d095      	beq.n	800d3f8 <decode_mcu_sub+0x30>
 800d4cc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800d4d0:	ebac 0c04 	sub.w	ip, ip, r4
 800d4d4:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d4d8:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d4da:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800d4de:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800d4e2:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800d4e4:	4299      	cmp	r1, r3
 800d4e6:	bfac      	ite	ge
 800d4e8:	1a9c      	subge	r4, r3, r2
 800d4ea:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800d4ec:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800d4f0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800d4f4:	ab12      	add	r3, sp, #72	; 0x48
 800d4f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d4fa:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800d4fe:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800d500:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800d504:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800d508:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800d50a:	9b03      	ldr	r3, [sp, #12]
 800d50c:	429c      	cmp	r4, r3
 800d50e:	db15      	blt.n	800d53c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800d510:	9b05      	ldr	r3, [sp, #20]
 800d512:	429c      	cmp	r4, r3
 800d514:	f340 8081 	ble.w	800d61a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d518:	3701      	adds	r7, #1
 800d51a:	e78c      	b.n	800d436 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d51c:	2301      	movs	r3, #1
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4662      	mov	r2, ip
 800d522:	4623      	mov	r3, r4
 800d524:	4671      	mov	r1, lr
 800d526:	a808      	add	r0, sp, #32
 800d528:	f7ff fbe6 	bl	800ccf8 <jpeg_huff_decode>
 800d52c:	1e04      	subs	r4, r0, #0
 800d52e:	f6ff af63 	blt.w	800d3f8 <decode_mcu_sub+0x30>
 800d532:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d536:	e7b6      	b.n	800d4a6 <decode_mcu_sub+0xde>
 800d538:	2309      	movs	r3, #9
 800d53a:	e7f0      	b.n	800d51e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d53c:	f1bc 0f07 	cmp.w	ip, #7
 800d540:	dc0d      	bgt.n	800d55e <decode_mcu_sub+0x196>
 800d542:	2300      	movs	r3, #0
 800d544:	4662      	mov	r2, ip
 800d546:	4671      	mov	r1, lr
 800d548:	a808      	add	r0, sp, #32
 800d54a:	f7ff fb77 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d54e:	2800      	cmp	r0, #0
 800d550:	f43f af52 	beq.w	800d3f8 <decode_mcu_sub+0x30>
 800d554:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d558:	f1bc 0f07 	cmp.w	ip, #7
 800d55c:	dd37      	ble.n	800d5ce <decode_mcu_sub+0x206>
 800d55e:	f1ac 0308 	sub.w	r3, ip, #8
 800d562:	fa4e f303 	asr.w	r3, lr, r3
 800d566:	b2db      	uxtb	r3, r3
 800d568:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d56c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d570:	2a00      	cmp	r2, #0
 800d572:	d03a      	beq.n	800d5ea <decode_mcu_sub+0x222>
 800d574:	4443      	add	r3, r8
 800d576:	ebac 0c02 	sub.w	ip, ip, r2
 800d57a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800d57e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800d582:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800d586:	d032      	beq.n	800d5ee <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d588:	459c      	cmp	ip, r3
	    k += r;
 800d58a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d58c:	da0b      	bge.n	800d5a6 <decode_mcu_sub+0x1de>
 800d58e:	4662      	mov	r2, ip
 800d590:	4671      	mov	r1, lr
 800d592:	a808      	add	r0, sp, #32
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	f7ff fb51 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f43f af2c 	beq.w	800d3f8 <decode_mcu_sub+0x30>
 800d5a0:	9b07      	ldr	r3, [sp, #28]
 800d5a2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800d5a6:	ebac 0c03 	sub.w	ip, ip, r3
 800d5aa:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d5ae:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800d5b0:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800d5b4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800d5b8:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800d5ba:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d5bc:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800d5be:	bfa8      	it	ge
 800d5c0:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800d5c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d5c6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800d5ca:	3401      	adds	r4, #1
 800d5cc:	e79d      	b.n	800d50a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4662      	mov	r2, ip
 800d5d4:	4643      	mov	r3, r8
 800d5d6:	4671      	mov	r1, lr
 800d5d8:	a808      	add	r0, sp, #32
 800d5da:	f7ff fb8d 	bl	800ccf8 <jpeg_huff_decode>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f6ff af0a 	blt.w	800d3f8 <decode_mcu_sub+0x30>
 800d5e4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d5e8:	e7c9      	b.n	800d57e <decode_mcu_sub+0x1b6>
 800d5ea:	2309      	movs	r3, #9
 800d5ec:	e7f0      	b.n	800d5d0 <decode_mcu_sub+0x208>
	    if (r != 15)
 800d5ee:	2a0f      	cmp	r2, #15
 800d5f0:	d192      	bne.n	800d518 <decode_mcu_sub+0x150>
	    k += 15;
 800d5f2:	340f      	adds	r4, #15
 800d5f4:	e7e9      	b.n	800d5ca <decode_mcu_sub+0x202>
	if (s) {
 800d5f6:	b174      	cbz	r4, 800d616 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d5f8:	45a4      	cmp	ip, r4
 800d5fa:	da0a      	bge.n	800d612 <decode_mcu_sub+0x24a>
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	4662      	mov	r2, ip
 800d600:	4671      	mov	r1, lr
 800d602:	a808      	add	r0, sp, #32
 800d604:	f7ff fb1a 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d608:	2800      	cmp	r0, #0
 800d60a:	f43f aef5 	beq.w	800d3f8 <decode_mcu_sub+0x30>
 800d60e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800d612:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800d616:	2401      	movs	r4, #1
 800d618:	e77a      	b.n	800d510 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d61a:	f1bc 0f07 	cmp.w	ip, #7
 800d61e:	dc0d      	bgt.n	800d63c <decode_mcu_sub+0x274>
 800d620:	2300      	movs	r3, #0
 800d622:	4662      	mov	r2, ip
 800d624:	4671      	mov	r1, lr
 800d626:	a808      	add	r0, sp, #32
 800d628:	f7ff fb08 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f43f aee3 	beq.w	800d3f8 <decode_mcu_sub+0x30>
 800d632:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d636:	f1bc 0f07 	cmp.w	ip, #7
 800d63a:	dd25      	ble.n	800d688 <decode_mcu_sub+0x2c0>
 800d63c:	f1ac 0308 	sub.w	r3, ip, #8
 800d640:	fa4e f303 	asr.w	r3, lr, r3
 800d644:	b2db      	uxtb	r3, r3
 800d646:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d64a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d64e:	b34a      	cbz	r2, 800d6a4 <decode_mcu_sub+0x2dc>
 800d650:	4443      	add	r3, r8
 800d652:	ebac 0c02 	sub.w	ip, ip, r2
 800d656:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800d65a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800d65e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d662:	d021      	beq.n	800d6a8 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d664:	45dc      	cmp	ip, fp
	  k += r;
 800d666:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d668:	da0a      	bge.n	800d680 <decode_mcu_sub+0x2b8>
 800d66a:	465b      	mov	r3, fp
 800d66c:	4662      	mov	r2, ip
 800d66e:	4671      	mov	r1, lr
 800d670:	a808      	add	r0, sp, #32
 800d672:	f7ff fae3 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d676:	2800      	cmp	r0, #0
 800d678:	f43f aebe 	beq.w	800d3f8 <decode_mcu_sub+0x30>
 800d67c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800d680:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800d684:	3401      	adds	r4, #1
 800d686:	e743      	b.n	800d510 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d688:	2301      	movs	r3, #1
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	4662      	mov	r2, ip
 800d68e:	4643      	mov	r3, r8
 800d690:	4671      	mov	r1, lr
 800d692:	a808      	add	r0, sp, #32
 800d694:	f7ff fb30 	bl	800ccf8 <jpeg_huff_decode>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f6ff aead 	blt.w	800d3f8 <decode_mcu_sub+0x30>
 800d69e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800d6a2:	e7da      	b.n	800d65a <decode_mcu_sub+0x292>
 800d6a4:	2309      	movs	r3, #9
 800d6a6:	e7f0      	b.n	800d68a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800d6a8:	2b0f      	cmp	r3, #15
 800d6aa:	f47f af35 	bne.w	800d518 <decode_mcu_sub+0x150>
	  k += 15;
 800d6ae:	340f      	adds	r4, #15
 800d6b0:	e7e8      	b.n	800d684 <decode_mcu_sub+0x2bc>
 800d6b2:	bf00      	nop
 800d6b4:	0802ea80 	.word	0x0802ea80

0800d6b8 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d6bc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800d6c0:	b091      	sub	sp, #68	; 0x44
 800d6c2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d6c4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800d6c8:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800d6ca:	b933      	cbnz	r3, 800d6da <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d6cc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d6ce:	b17f      	cbz	r7, 800d6f0 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d6d0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800d6d2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800d6d8:	e007      	b.n	800d6ea <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800d6da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1f5      	bne.n	800d6cc <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800d6e0:	f7ff fb54 	bl	800cd8c <process_restart>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d1f1      	bne.n	800d6cc <decode_mcu+0x14>
	return FALSE;
 800d6e8:	2000      	movs	r0, #0
}
 800d6ea:	b011      	add	sp, #68	; 0x44
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d6f0:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800d6f2:	f105 0810 	add.w	r8, r5, #16
 800d6f6:	ac0b      	add	r4, sp, #44	; 0x2c
 800d6f8:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	9206      	str	r2, [sp, #24]
 800d702:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800d704:	f8df a290 	ldr.w	sl, [pc, #656]	; 800d998 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d708:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800d70a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d70e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d714:	f8d8 3000 	ldr.w	r3, [r8]
 800d718:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d71a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800d71e:	42bb      	cmp	r3, r7
 800d720:	dc0e      	bgt.n	800d740 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d722:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d724:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d726:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d728:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	9a07      	ldr	r2, [sp, #28]
 800d730:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d732:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d734:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d73a:	6833      	ldr	r3, [r6, #0]
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	e7c7      	b.n	800d6d0 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800d740:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d742:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800d746:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800d74a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d74e:	dc0c      	bgt.n	800d76a <decode_mcu+0xb2>
 800d750:	2300      	movs	r3, #0
 800d752:	4662      	mov	r2, ip
 800d754:	4671      	mov	r1, lr
 800d756:	a806      	add	r0, sp, #24
 800d758:	f7ff fa70 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d0c3      	beq.n	800d6e8 <decode_mcu+0x30>
 800d760:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d764:	f1bc 0f07 	cmp.w	ip, #7
 800d768:	dd49      	ble.n	800d7fe <decode_mcu+0x146>
 800d76a:	f1ac 0308 	sub.w	r3, ip, #8
 800d76e:	fa4e f303 	asr.w	r3, lr, r3
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d778:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d77c:	2a00      	cmp	r2, #0
 800d77e:	d04c      	beq.n	800d81a <decode_mcu+0x162>
 800d780:	4423      	add	r3, r4
 800d782:	ebac 0c02 	sub.w	ip, ip, r2
 800d786:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800d78a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800d78e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800d792:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 809f 	beq.w	800d8d8 <decode_mcu+0x220>
	if (s) {
 800d79a:	b1cc      	cbz	r4, 800d7d0 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d79c:	45a4      	cmp	ip, r4
 800d79e:	da09      	bge.n	800d7b4 <decode_mcu+0xfc>
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	4662      	mov	r2, ip
 800d7a4:	4671      	mov	r1, lr
 800d7a6:	a806      	add	r0, sp, #24
 800d7a8:	f7ff fa48 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d09b      	beq.n	800d6e8 <decode_mcu+0x30>
 800d7b0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800d7b4:	ebac 0c04 	sub.w	ip, ip, r4
 800d7b8:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d7bc:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d7be:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800d7c2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800d7c6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800d7c8:	4299      	cmp	r1, r3
 800d7ca:	bfac      	ite	ge
 800d7cc:	1a9c      	subge	r4, r3, r2
 800d7ce:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800d7d0:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800d7d4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800d7d8:	ab10      	add	r3, sp, #64	; 0x40
 800d7da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d7de:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800d7e2:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800d7e4:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800d7e8:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800d7ec:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	429c      	cmp	r4, r3
 800d7f2:	db14      	blt.n	800d81e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800d7f4:	2c3f      	cmp	r4, #63	; 0x3f
 800d7f6:	f340 8081 	ble.w	800d8fc <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d7fa:	3701      	adds	r7, #1
 800d7fc:	e78d      	b.n	800d71a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800d7fe:	2301      	movs	r3, #1
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	4662      	mov	r2, ip
 800d804:	4623      	mov	r3, r4
 800d806:	4671      	mov	r1, lr
 800d808:	a806      	add	r0, sp, #24
 800d80a:	f7ff fa75 	bl	800ccf8 <jpeg_huff_decode>
 800d80e:	1e04      	subs	r4, r0, #0
 800d810:	f6ff af6a 	blt.w	800d6e8 <decode_mcu+0x30>
 800d814:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d818:	e7b7      	b.n	800d78a <decode_mcu+0xd2>
 800d81a:	2309      	movs	r3, #9
 800d81c:	e7f0      	b.n	800d800 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d81e:	f1bc 0f07 	cmp.w	ip, #7
 800d822:	dc0d      	bgt.n	800d840 <decode_mcu+0x188>
 800d824:	2300      	movs	r3, #0
 800d826:	4662      	mov	r2, ip
 800d828:	4671      	mov	r1, lr
 800d82a:	a806      	add	r0, sp, #24
 800d82c:	f7ff fa06 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d830:	2800      	cmp	r0, #0
 800d832:	f43f af59 	beq.w	800d6e8 <decode_mcu+0x30>
 800d836:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d83a:	f1bc 0f07 	cmp.w	ip, #7
 800d83e:	dd37      	ble.n	800d8b0 <decode_mcu+0x1f8>
 800d840:	f1ac 0308 	sub.w	r3, ip, #8
 800d844:	fa4e f303 	asr.w	r3, lr, r3
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d84e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d852:	2a00      	cmp	r2, #0
 800d854:	d03a      	beq.n	800d8cc <decode_mcu+0x214>
 800d856:	4443      	add	r3, r8
 800d858:	ebac 0c02 	sub.w	ip, ip, r2
 800d85c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800d860:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800d864:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800d868:	d032      	beq.n	800d8d0 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d86a:	459c      	cmp	ip, r3
	    k += r;
 800d86c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d86e:	da0b      	bge.n	800d888 <decode_mcu+0x1d0>
 800d870:	4662      	mov	r2, ip
 800d872:	4671      	mov	r1, lr
 800d874:	a806      	add	r0, sp, #24
 800d876:	9305      	str	r3, [sp, #20]
 800d878:	f7ff f9e0 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	f43f af33 	beq.w	800d6e8 <decode_mcu+0x30>
 800d882:	9b05      	ldr	r3, [sp, #20]
 800d884:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800d888:	ebac 0c03 	sub.w	ip, ip, r3
 800d88c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800d890:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800d892:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800d896:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800d89a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800d89c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800d89e:	4b3d      	ldr	r3, [pc, #244]	; (800d994 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800d8a0:	bfa8      	it	ge
 800d8a2:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800d8a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d8a8:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800d8ac:	3401      	adds	r4, #1
 800d8ae:	e79e      	b.n	800d7ee <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	4662      	mov	r2, ip
 800d8b6:	4643      	mov	r3, r8
 800d8b8:	4671      	mov	r1, lr
 800d8ba:	a806      	add	r0, sp, #24
 800d8bc:	f7ff fa1c 	bl	800ccf8 <jpeg_huff_decode>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	f6ff af11 	blt.w	800d6e8 <decode_mcu+0x30>
 800d8c6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d8ca:	e7c9      	b.n	800d860 <decode_mcu+0x1a8>
 800d8cc:	2309      	movs	r3, #9
 800d8ce:	e7f0      	b.n	800d8b2 <decode_mcu+0x1fa>
	    if (r != 15)
 800d8d0:	2a0f      	cmp	r2, #15
 800d8d2:	d192      	bne.n	800d7fa <decode_mcu+0x142>
	    k += 15;
 800d8d4:	340f      	adds	r4, #15
 800d8d6:	e7e9      	b.n	800d8ac <decode_mcu+0x1f4>
	if (s) {
 800d8d8:	b174      	cbz	r4, 800d8f8 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d8da:	45a4      	cmp	ip, r4
 800d8dc:	da0a      	bge.n	800d8f4 <decode_mcu+0x23c>
 800d8de:	4623      	mov	r3, r4
 800d8e0:	4662      	mov	r2, ip
 800d8e2:	4671      	mov	r1, lr
 800d8e4:	a806      	add	r0, sp, #24
 800d8e6:	f7ff f9a9 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f43f aefc 	beq.w	800d6e8 <decode_mcu+0x30>
 800d8f0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800d8f4:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800d8f8:	2401      	movs	r4, #1
 800d8fa:	e77b      	b.n	800d7f4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d8fc:	f1bc 0f07 	cmp.w	ip, #7
 800d900:	dc0d      	bgt.n	800d91e <decode_mcu+0x266>
 800d902:	2300      	movs	r3, #0
 800d904:	4662      	mov	r2, ip
 800d906:	4671      	mov	r1, lr
 800d908:	a806      	add	r0, sp, #24
 800d90a:	f7ff f997 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d90e:	2800      	cmp	r0, #0
 800d910:	f43f aeea 	beq.w	800d6e8 <decode_mcu+0x30>
 800d914:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d918:	f1bc 0f07 	cmp.w	ip, #7
 800d91c:	dd25      	ble.n	800d96a <decode_mcu+0x2b2>
 800d91e:	f1ac 0308 	sub.w	r3, ip, #8
 800d922:	fa4e f303 	asr.w	r3, lr, r3
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d92c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d930:	b34a      	cbz	r2, 800d986 <decode_mcu+0x2ce>
 800d932:	4443      	add	r3, r8
 800d934:	ebac 0c02 	sub.w	ip, ip, r2
 800d938:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800d93c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800d940:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d944:	d021      	beq.n	800d98a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d946:	45dc      	cmp	ip, fp
	  k += r;
 800d948:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d94a:	da0a      	bge.n	800d962 <decode_mcu+0x2aa>
 800d94c:	465b      	mov	r3, fp
 800d94e:	4662      	mov	r2, ip
 800d950:	4671      	mov	r1, lr
 800d952:	a806      	add	r0, sp, #24
 800d954:	f7ff f972 	bl	800cc3c <jpeg_fill_bit_buffer>
 800d958:	2800      	cmp	r0, #0
 800d95a:	f43f aec5 	beq.w	800d6e8 <decode_mcu+0x30>
 800d95e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800d962:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800d966:	3401      	adds	r4, #1
 800d968:	e744      	b.n	800d7f4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800d96a:	2301      	movs	r3, #1
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	4662      	mov	r2, ip
 800d970:	4643      	mov	r3, r8
 800d972:	4671      	mov	r1, lr
 800d974:	a806      	add	r0, sp, #24
 800d976:	f7ff f9bf 	bl	800ccf8 <jpeg_huff_decode>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f6ff aeb4 	blt.w	800d6e8 <decode_mcu+0x30>
 800d980:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d984:	e7da      	b.n	800d93c <decode_mcu+0x284>
 800d986:	2309      	movs	r3, #9
 800d988:	e7f0      	b.n	800d96c <decode_mcu+0x2b4>
	  if (r != 15)
 800d98a:	2b0f      	cmp	r3, #15
 800d98c:	f47f af35 	bne.w	800d7fa <decode_mcu+0x142>
	  k += 15;
 800d990:	340f      	adds	r4, #15
 800d992:	e7e8      	b.n	800d966 <decode_mcu+0x2ae>
 800d994:	08030358 	.word	0x08030358
 800d998:	0802ea80 	.word	0x0802ea80

0800d99c <jpeg_make_d_derived_tbl>:
{
 800d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800d9a0:	2a03      	cmp	r2, #3
{
 800d9a2:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	4616      	mov	r6, r2
 800d9aa:	461f      	mov	r7, r3
 800d9ac:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800d9ae:	d905      	bls.n	800d9bc <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d9b0:	6803      	ldr	r3, [r0, #0]
 800d9b2:	2234      	movs	r2, #52	; 0x34
 800d9b4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d044      	beq.n	800da4c <jpeg_make_d_derived_tbl+0xb0>
 800d9c2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d9c6:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800d9ca:	b935      	cbnz	r5, 800d9da <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	2234      	movs	r2, #52	; 0x34
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4798      	blx	r3
  if (*pdtbl == NULL)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	b93b      	cbnz	r3, 800d9ee <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9de:	6863      	ldr	r3, [r4, #4]
 800d9e0:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800d9ec:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800d9ee:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800d9f2:	2601      	movs	r6, #1
  p = 0;
 800d9f4:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d9f6:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800d9fa:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800d9fe:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800da02:	46ba      	mov	sl, r7
 800da04:	444f      	add	r7, r9
 800da06:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800da0a:	dd05      	ble.n	800da18 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	4620      	mov	r0, r4
 800da10:	f8c3 b014 	str.w	fp, [r3, #20]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4798      	blx	r3
 800da18:	f10a 0318 	add.w	r3, sl, #24
 800da1c:	446b      	add	r3, sp
    while (i--)
 800da1e:	f1b9 0901 	subs.w	r9, r9, #1
 800da22:	d218      	bcs.n	800da56 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800da24:	3601      	adds	r6, #1
 800da26:	2e11      	cmp	r6, #17
 800da28:	d1e9      	bne.n	800d9fe <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800da2a:	2200      	movs	r2, #0
 800da2c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800da2e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800da32:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800da36:	55da      	strb	r2, [r3, r7]
  p = 0;
 800da38:	4691      	mov	r9, r2
  si = huffsize[0];
 800da3a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800da3e:	ab06      	add	r3, sp, #24
 800da40:	f813 3009 	ldrb.w	r3, [r3, r9]
 800da44:	b313      	cbz	r3, 800da8c <jpeg_make_d_derived_tbl+0xf0>
 800da46:	4649      	mov	r1, r9
 800da48:	1a52      	subs	r2, r2, r1
 800da4a:	e00a      	b.n	800da62 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800da4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800da50:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800da54:	e7b9      	b.n	800d9ca <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800da56:	f803 6b01 	strb.w	r6, [r3], #1
 800da5a:	e7e0      	b.n	800da1e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800da5c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800da60:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800da62:	a806      	add	r0, sp, #24
 800da64:	1853      	adds	r3, r2, r1
 800da66:	4689      	mov	r9, r1
 800da68:	5c40      	ldrb	r0, [r0, r1]
 800da6a:	42b0      	cmp	r0, r6
 800da6c:	d0f6      	beq.n	800da5c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800da6e:	fa0b f206 	lsl.w	r2, fp, r6
 800da72:	429a      	cmp	r2, r3
 800da74:	dc07      	bgt.n	800da86 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	2109      	movs	r1, #9
 800da7a:	4620      	mov	r0, r4
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	6151      	str	r1, [r2, #20]
 800da80:	6812      	ldr	r2, [r2, #0]
 800da82:	4790      	blx	r2
 800da84:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800da86:	005a      	lsls	r2, r3, #1
    si++;
 800da88:	3601      	adds	r6, #1
 800da8a:	e7d8      	b.n	800da3e <jpeg_make_d_derived_tbl+0xa2>
 800da8c:	1c68      	adds	r0, r5, #1
 800da8e:	f108 0204 	add.w	r2, r8, #4
 800da92:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800da96:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800da9a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800da9c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800daa0:	f1b9 0f00 	cmp.w	r9, #0
 800daa4:	d029      	beq.n	800dafa <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800daa6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800daaa:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800daac:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800daae:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800dab0:	1e59      	subs	r1, r3, #1
 800dab2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800dab6:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800dab8:	3204      	adds	r2, #4
 800daba:	4594      	cmp	ip, r2
 800dabc:	d1ee      	bne.n	800da9c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800dabe:	4b2d      	ldr	r3, [pc, #180]	; (800db74 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800dac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dac4:	2100      	movs	r1, #0
 800dac6:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800daca:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800dace:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800dad0:	f01d f82c 	bl	802ab2c <memset>
  p = 0;
 800dad4:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800dad8:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dada:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dadc:	2101      	movs	r1, #1
 800dade:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800dae0:	9201      	str	r2, [sp, #4]
 800dae2:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800dae6:	fa01 fb02 	lsl.w	fp, r1, r2
 800daea:	9202      	str	r2, [sp, #8]
 800daec:	9a01      	ldr	r2, [sp, #4]
 800daee:	4452      	add	r2, sl
 800daf0:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800daf2:	f105 0211 	add.w	r2, r5, #17
 800daf6:	9205      	str	r2, [sp, #20]
 800daf8:	e020      	b.n	800db3c <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800dafa:	f8c2 e000 	str.w	lr, [r2]
 800dafe:	e7db      	b.n	800dab8 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800db00:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800db02:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800db04:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800db08:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800db0a:	9a05      	ldr	r2, [sp, #20]
 800db0c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800db10:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800db14:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800db18:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800db1c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800db20:	d1fa      	bne.n	800db18 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800db22:	f1bb 0f00 	cmp.w	fp, #0
 800db26:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800db2a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800db2e:	bfcc      	ite	gt
 800db30:	465a      	movgt	r2, fp
 800db32:	2201      	movle	r2, #1
 800db34:	4440      	add	r0, r8
 800db36:	f01c fff9 	bl	802ab2c <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800db3a:	ab47      	add	r3, sp, #284	; 0x11c
 800db3c:	9a04      	ldr	r2, [sp, #16]
 800db3e:	4591      	cmp	r9, r2
 800db40:	d1de      	bne.n	800db00 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800db42:	3601      	adds	r6, #1
 800db44:	9a01      	ldr	r2, [sp, #4]
 800db46:	2e09      	cmp	r6, #9
 800db48:	4492      	add	sl, r2
 800db4a:	d1c6      	bne.n	800dada <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	b11b      	cbz	r3, 800db58 <jpeg_make_d_derived_tbl+0x1bc>
 800db50:	3511      	adds	r5, #17
 800db52:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800db54:	42af      	cmp	r7, r5
 800db56:	d103      	bne.n	800db60 <jpeg_make_d_derived_tbl+0x1c4>
}
 800db58:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800db60:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800db64:	2b0f      	cmp	r3, #15
 800db66:	d9f5      	bls.n	800db54 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	4620      	mov	r0, r4
 800db6c:	615e      	str	r6, [r3, #20]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800db72:	e7ef      	b.n	800db54 <jpeg_make_d_derived_tbl+0x1b8>
 800db74:	000fffff 	.word	0x000fffff

0800db78 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800db78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800db7c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800db80:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800db82:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800db86:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800db8a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800db8e:	2d00      	cmp	r5, #0
 800db90:	f000 80b1 	beq.w	800dcf6 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800db94:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800db98:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800db9c:	b962      	cbnz	r2, 800dbb8 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800db9e:	b1a9      	cbz	r1, 800dbcc <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800dba0:	f8da 3000 	ldr.w	r3, [sl]
 800dba4:	2711      	movs	r7, #17
 800dba6:	4650      	mov	r0, sl
 800dba8:	625d      	str	r5, [r3, #36]	; 0x24
 800dbaa:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800dbae:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4798      	blx	r3
 800dbb6:	e00f      	b.n	800dbd8 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800dbb8:	428a      	cmp	r2, r1
 800dbba:	dcf1      	bgt.n	800dba0 <start_pass_huff_decoder+0x28>
 800dbbc:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800dbc0:	428b      	cmp	r3, r1
 800dbc2:	dbed      	blt.n	800dba0 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800dbc4:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d1e9      	bne.n	800dba0 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800dbcc:	b116      	cbz	r6, 800dbd4 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800dbce:	1e73      	subs	r3, r6, #1
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	d1e5      	bne.n	800dba0 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800dbd4:	2d0d      	cmp	r5, #13
 800dbd6:	dce3      	bgt.n	800dba0 <start_pass_huff_decoder+0x28>
{
 800dbd8:	46a1      	mov	r9, r4
 800dbda:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dbdc:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800dbe0:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dbe4:	42ba      	cmp	r2, r7
 800dbe6:	dc1e      	bgt.n	800dc26 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800dbe8:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800dbec:	2a00      	cmp	r2, #0
 800dbee:	d158      	bne.n	800dca2 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d154      	bne.n	800dc9e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800dbf4:	4bbb      	ldr	r3, [pc, #748]	; (800dee4 <start_pass_huff_decoder+0x36c>)
{
 800dbf6:	2600      	movs	r6, #0
 800dbf8:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800dbfc:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dc00:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dc02:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800dc06:	42b3      	cmp	r3, r6
 800dc08:	dc50      	bgt.n	800dcac <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800dc10:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800dc12:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800dc16:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800dc1a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800dc1e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800dc22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800dc26:	f859 2b04 	ldr.w	r2, [r9], #4
 800dc2a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800dc2e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800dc32:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800dc36:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800dc3a:	b173      	cbz	r3, 800dc5a <start_pass_huff_decoder+0xe2>
 800dc3c:	5853      	ldr	r3, [r2, r1]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	da0b      	bge.n	800dc5a <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800dc42:	f8da 3000 	ldr.w	r3, [sl]
 800dc46:	2276      	movs	r2, #118	; 0x76
 800dc48:	f04f 31ff 	mov.w	r1, #4294967295
 800dc4c:	4650      	mov	r0, sl
 800dc4e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800dc52:	2200      	movs	r2, #0
 800dc54:	61da      	str	r2, [r3, #28]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dc5a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800dc5e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800dc62:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800dc66:	42ab      	cmp	r3, r5
 800dc68:	da01      	bge.n	800dc6e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dc6a:	3701      	adds	r7, #1
 800dc6c:	e7b6      	b.n	800dbdc <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800dc6e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800dc70:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800dc74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d00a      	beq.n	800dc92 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800dc7c:	f8da 3000 	ldr.w	r3, [sl]
 800dc80:	2276      	movs	r2, #118	; 0x76
 800dc82:	f04f 31ff 	mov.w	r1, #4294967295
 800dc86:	4650      	mov	r0, sl
 800dc88:	61dd      	str	r5, [r3, #28]
 800dc8a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800dc92:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dc96:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800dc98:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800dc9c:	e7e1      	b.n	800dc62 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800dc9e:	4b92      	ldr	r3, [pc, #584]	; (800dee8 <start_pass_huff_decoder+0x370>)
 800dca0:	e7a9      	b.n	800dbf6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800dca2:	b90b      	cbnz	r3, 800dca8 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800dca4:	4b91      	ldr	r3, [pc, #580]	; (800deec <start_pass_huff_decoder+0x374>)
 800dca6:	e7a6      	b.n	800dbf6 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800dca8:	4b91      	ldr	r3, [pc, #580]	; (800def0 <start_pass_huff_decoder+0x378>)
 800dcaa:	e7a4      	b.n	800dbf6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800dcac:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800dcb0:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800dcb4:	b97a      	cbnz	r2, 800dcd6 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800dcb6:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800dcba:	b942      	cbnz	r2, 800dcce <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800dcbc:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	4650      	mov	r0, sl
 800dcc2:	f102 030b 	add.w	r3, r2, #11
 800dcc6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800dcca:	f7ff fe67 	bl	800d99c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dcce:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800dcd0:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dcd4:	e795      	b.n	800dc02 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800dcd6:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dcd8:	2100      	movs	r1, #0
 800dcda:	4650      	mov	r0, sl
 800dcdc:	f105 030b 	add.w	r3, r5, #11
 800dce0:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800dce2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dce6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800dcea:	f7ff fe57 	bl	800d99c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800dcee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dcf0:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800dcf4:	e7eb      	b.n	800dcce <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800dcf6:	b982      	cbnz	r2, 800dd1a <start_pass_huff_decoder+0x1a2>
 800dcf8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800dcfc:	b96b      	cbnz	r3, 800dd1a <start_pass_huff_decoder+0x1a2>
 800dcfe:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800dd02:	b953      	cbnz	r3, 800dd1a <start_pass_huff_decoder+0x1a2>
 800dd04:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800dd08:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800dd0c:	b90a      	cbnz	r2, 800dd12 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800dd0e:	2b3f      	cmp	r3, #63	; 0x3f
 800dd10:	dc0c      	bgt.n	800dd2c <start_pass_huff_decoder+0x1b4>
 800dd12:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d008      	beq.n	800dd2c <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800dd1a:	f8da 3000 	ldr.w	r3, [sl]
 800dd1e:	227d      	movs	r2, #125	; 0x7d
 800dd20:	f04f 31ff 	mov.w	r1, #4294967295
 800dd24:	4650      	mov	r0, sl
 800dd26:	615a      	str	r2, [r3, #20]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800dd2c:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800dd30:	2600      	movs	r6, #0
 800dd32:	4b70      	ldr	r3, [pc, #448]	; (800def4 <start_pass_huff_decoder+0x37c>)
 800dd34:	f10b 0714 	add.w	r7, fp, #20
 800dd38:	4a6f      	ldr	r2, [pc, #444]	; (800def8 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800dd3a:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800dd3c:	293f      	cmp	r1, #63	; 0x3f
 800dd3e:	bf08      	it	eq
 800dd40:	4613      	moveq	r3, r2
 800dd42:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800dd46:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800dd4a:	42b3      	cmp	r3, r6
 800dd4c:	dc3c      	bgt.n	800ddc8 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dd4e:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800dd52:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800dd56:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800dd5a:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800dd5e:	4f67      	ldr	r7, [pc, #412]	; (800defc <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800dd60:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dd64:	42a8      	cmp	r0, r5
 800dd66:	f77f af53 	ble.w	800dc10 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800dd6a:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800dd6e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800dd72:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800dd76:	6953      	ldr	r3, [r2, #20]
 800dd78:	3310      	adds	r3, #16
 800dd7a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800dd7e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800dd82:	6993      	ldr	r3, [r2, #24]
 800dd84:	3314      	adds	r3, #20
 800dd86:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800dd8a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800dd8c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d052      	beq.n	800de38 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800dd92:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800dd96:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800dd98:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800dd9c:	d075      	beq.n	800de8a <start_pass_huff_decoder+0x312>
 800dd9e:	dc30      	bgt.n	800de02 <start_pass_huff_decoder+0x28a>
 800dda0:	2c03      	cmp	r4, #3
 800dda2:	d04f      	beq.n	800de44 <start_pass_huff_decoder+0x2cc>
 800dda4:	2c08      	cmp	r4, #8
 800dda6:	d05d      	beq.n	800de64 <start_pass_huff_decoder+0x2ec>
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	d047      	beq.n	800de3c <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800ddac:	1e5c      	subs	r4, r3, #1
 800ddae:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800ddb0:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800ddb4:	bf28      	it	cs
 800ddb6:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800ddb8:	2c08      	cmp	r4, #8
 800ddba:	bf28      	it	cs
 800ddbc:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ddbe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ddc2:	4b4f      	ldr	r3, [pc, #316]	; (800df00 <start_pass_huff_decoder+0x388>)
 800ddc4:	3a09      	subs	r2, #9
 800ddc6:	e04a      	b.n	800de5e <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800ddc8:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ddcc:	2101      	movs	r1, #1
 800ddce:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800ddd0:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ddd4:	f102 0310 	add.w	r3, r2, #16
 800ddd8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800dddc:	f7ff fdde 	bl	800d99c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800dde0:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800dde4:	b14b      	cbz	r3, 800ddfa <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800dde6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ddea:	2100      	movs	r1, #0
 800ddec:	4650      	mov	r0, sl
 800ddee:	f102 0314 	add.w	r3, r2, #20
 800ddf2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800ddf6:	f7ff fdd1 	bl	800d99c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ddfa:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800ddfc:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800de00:	e7a1      	b.n	800dd46 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800de02:	2c23      	cmp	r4, #35	; 0x23
 800de04:	f103 3eff 	add.w	lr, r3, #4294967295
 800de08:	f102 39ff 	add.w	r9, r2, #4294967295
 800de0c:	d04b      	beq.n	800dea6 <start_pass_huff_decoder+0x32e>
 800de0e:	2c30      	cmp	r4, #48	; 0x30
 800de10:	d057      	beq.n	800dec2 <start_pass_huff_decoder+0x34a>
 800de12:	2c18      	cmp	r4, #24
 800de14:	d1ca      	bne.n	800ddac <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800de16:	f1be 0f05 	cmp.w	lr, #5
 800de1a:	bf28      	it	cs
 800de1c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800de1e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800de22:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800de26:	bf28      	it	cs
 800de28:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800de2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800de2e:	3a01      	subs	r2, #1
 800de30:	4413      	add	r3, r2
 800de32:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800de36:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800de38:	64cb      	str	r3, [r1, #76]	; 0x4c
 800de3a:	e001      	b.n	800de40 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800de3c:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800de40:	3501      	adds	r5, #1
 800de42:	e78f      	b.n	800dd64 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800de44:	1e5c      	subs	r4, r3, #1
 800de46:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800de48:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800de4c:	bf28      	it	cs
 800de4e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800de50:	2c02      	cmp	r4, #2
 800de52:	bf28      	it	cs
 800de54:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800de56:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800de5a:	4b2a      	ldr	r3, [pc, #168]	; (800df04 <start_pass_huff_decoder+0x38c>)
 800de5c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800de5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de62:	e7e8      	b.n	800de36 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800de64:	1e5c      	subs	r4, r3, #1
 800de66:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800de68:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800de6c:	bf28      	it	cs
 800de6e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800de70:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800de72:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800de76:	bf28      	it	cs
 800de78:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800de7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800de7e:	3a01      	subs	r2, #1
 800de80:	4413      	add	r3, r2
 800de82:	4a21      	ldr	r2, [pc, #132]	; (800df08 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800de84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de88:	e7d5      	b.n	800de36 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800de8a:	1e5c      	subs	r4, r3, #1
 800de8c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800de8e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800de92:	bf28      	it	cs
 800de94:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800de96:	2c04      	cmp	r4, #4
 800de98:	bf28      	it	cs
 800de9a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800de9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dea0:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <start_pass_huff_decoder+0x394>)
 800dea2:	3a05      	subs	r2, #5
 800dea4:	e7db      	b.n	800de5e <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800dea6:	f1be 0f06 	cmp.w	lr, #6
 800deaa:	bf28      	it	cs
 800deac:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800deae:	f1b9 0f06 	cmp.w	r9, #6
 800deb2:	bf28      	it	cs
 800deb4:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800deb6:	3b01      	subs	r3, #1
 800deb8:	3a01      	subs	r2, #1
 800deba:	fb0c 2303 	mla	r3, ip, r3, r2
 800debe:	4a14      	ldr	r2, [pc, #80]	; (800df10 <start_pass_huff_decoder+0x398>)
 800dec0:	e7e0      	b.n	800de84 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800dec2:	f1be 0f07 	cmp.w	lr, #7
 800dec6:	bf28      	it	cs
 800dec8:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800deca:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800dece:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800ded2:	bf28      	it	cs
 800ded4:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800ded6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800deda:	3a01      	subs	r2, #1
 800dedc:	4413      	add	r3, r2
 800dede:	4a0d      	ldr	r2, [pc, #52]	; (800df14 <start_pass_huff_decoder+0x39c>)
 800dee0:	e7d0      	b.n	800de84 <start_pass_huff_decoder+0x30c>
 800dee2:	bf00      	nop
 800dee4:	0800cdd9 	.word	0x0800cdd9
 800dee8:	0800cf4d 	.word	0x0800cf4d
 800deec:	0800d0ad 	.word	0x0800d0ad
 800def0:	0800d141 	.word	0x0800d141
 800def4:	0800d3c9 	.word	0x0800d3c9
 800def8:	0800d6b9 	.word	0x0800d6b9
 800defc:	0802ec34 	.word	0x0802ec34
 800df00:	0802eac0 	.word	0x0802eac0
 800df04:	0802ebc0 	.word	0x0802ebc0
 800df08:	0802ebd0 	.word	0x0802ebd0
 800df0c:	0802ebf4 	.word	0x0802ebf4
 800df10:	0802ec98 	.word	0x0802ec98
 800df14:	0802ed28 	.word	0x0802ed28

0800df18 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df1a:	6843      	ldr	r3, [r0, #4]
 800df1c:	22d8      	movs	r2, #216	; 0xd8
 800df1e:	2101      	movs	r1, #1
{
 800df20:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800df26:	4b17      	ldr	r3, [pc, #92]	; (800df84 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800df28:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df2c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800df2e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800df30:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800df34:	b943      	cbnz	r3, 800df48 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800df36:	6503      	str	r3, [r0, #80]	; 0x50
 800df38:	6403      	str	r3, [r0, #64]	; 0x40
 800df3a:	6543      	str	r3, [r0, #84]	; 0x54
 800df3c:	6443      	str	r3, [r0, #68]	; 0x44
 800df3e:	6583      	str	r3, [r0, #88]	; 0x58
 800df40:	6483      	str	r3, [r0, #72]	; 0x48
 800df42:	65c3      	str	r3, [r0, #92]	; 0x5c
 800df44:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800df46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df48:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800df4a:	2101      	movs	r1, #1
 800df4c:	686b      	ldr	r3, [r5, #4]
 800df4e:	4628      	mov	r0, r5
 800df50:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800df52:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4798      	blx	r3
 800df58:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800df5a:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800df5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df60:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800df64:	42b3      	cmp	r3, r6
 800df66:	dc05      	bgt.n	800df74 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800df68:	2300      	movs	r3, #0
 800df6a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800df6e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800df72:	e7e8      	b.n	800df46 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800df74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df78:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800df7a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800df7c:	f01c fdd6 	bl	802ab2c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800df80:	e7ed      	b.n	800df5e <jinit_huff_decoder+0x46>
 800df82:	bf00      	nop
 800df84:	0800db79 	.word	0x0800db79

0800df88 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800df88:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800df8c:	4a01      	ldr	r2, [pc, #4]	; (800df94 <finish_input_pass+0xc>)
 800df8e:	601a      	str	r2, [r3, #0]
}
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	0800e151 	.word	0x0800e151

0800df98 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800df98:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800df9a:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800df9c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800df9e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800dfa2:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800dfa4:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800dfa6:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800dfa8:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800dfac:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800dfae:	6803      	ldr	r3, [r0, #0]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800dfb4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dfb8:	4620      	mov	r0, r4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800dfbe:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	0800e151 	.word	0x0800e151

0800dfc8 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800dfc8:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800dfcc:	2a01      	cmp	r2, #1
{
 800dfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800dfd8:	d135      	bne.n	800e046 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800dfda:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800dfde:	69d9      	ldr	r1, [r3, #28]
 800dfe0:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800dfe4:	6a19      	ldr	r1, [r3, #32]
 800dfe6:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800dfea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800dfec:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800dfee:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800dff2:	68d8      	ldr	r0, [r3, #12]
 800dff4:	fbb1 f5f0 	udiv	r5, r1, r0
 800dff8:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800dffc:	2900      	cmp	r1, #0
 800dffe:	bf08      	it	eq
 800e000:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800e002:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800e006:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800e008:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800e00a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800e00e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800e012:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e014:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800e016:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e01a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e01e:	429f      	cmp	r7, r3
 800e020:	db71      	blt.n	800e106 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800e022:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800e026:	4620      	mov	r0, r4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800e02c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e030:	4620      	mov	r0, r4
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800e036:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800e03a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e03e:	6852      	ldr	r2, [r2, #4]
 800e040:	601a      	str	r2, [r3, #0]
}
 800e042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800e046:	1e53      	subs	r3, r2, #1
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d907      	bls.n	800e05c <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800e04c:	6803      	ldr	r3, [r0, #0]
 800e04e:	211b      	movs	r1, #27
 800e050:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e054:	2204      	movs	r2, #4
 800e056:	61da      	str	r2, [r3, #28]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e05c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800e060:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e062:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e066:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800e068:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800e06a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800e06e:	4359      	muls	r1, r3
 800e070:	f009 fdd4 	bl	8017c1c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e074:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800e078:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800e07c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800e080:	4359      	muls	r1, r3
 800e082:	6a20      	ldr	r0, [r4, #32]
 800e084:	f009 fdca 	bl	8017c1c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800e088:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800e08c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e090:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e094:	429d      	cmp	r5, r3
 800e096:	dabc      	bge.n	800e012 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800e098:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800e09c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e09e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800e0a0:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e0a2:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800e0a4:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e0a8:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800e0aa:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800e0ac:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800e0ae:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800e0b0:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800e0b2:	fbb2 fcf1 	udiv	ip, r2, r1
 800e0b6:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800e0ba:	2a00      	cmp	r2, #0
 800e0bc:	bf08      	it	eq
 800e0be:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800e0c0:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800e0c2:	6a1a      	ldr	r2, [r3, #32]
 800e0c4:	fbb2 f1f0 	udiv	r1, r2, r0
 800e0c8:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	bf08      	it	eq
 800e0d0:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800e0d2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800e0d4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800e0d8:	443b      	add	r3, r7
 800e0da:	2b0a      	cmp	r3, #10
 800e0dc:	dd05      	ble.n	800e0ea <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f8c3 9014 	str.w	r9, [r3, #20]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4798      	blx	r3
      while (mcublks-- > 0) {
 800e0ea:	2f00      	cmp	r7, #0
 800e0ec:	dc01      	bgt.n	800e0f2 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e0ee:	3501      	adds	r5, #1
 800e0f0:	e7ce      	b.n	800e090 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800e0f2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800e0f6:	3f01      	subs	r7, #1
 800e0f8:	1c5a      	adds	r2, r3, #1
 800e0fa:	335c      	adds	r3, #92	; 0x5c
 800e0fc:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800e100:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800e104:	e7f1      	b.n	800e0ea <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800e106:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800e10a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e10c:	b9eb      	cbnz	r3, 800e14a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800e10e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800e110:	2a03      	cmp	r2, #3
 800e112:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800e116:	d803      	bhi.n	800e120 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800e118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	b92b      	cbnz	r3, 800e12c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	4620      	mov	r0, r4
 800e124:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e12c:	6863      	ldr	r3, [r4, #4]
 800e12e:	2284      	movs	r2, #132	; 0x84
 800e130:	2101      	movs	r1, #1
 800e132:	4620      	mov	r0, r4
 800e134:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800e136:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e13a:	4798      	blx	r3
 800e13c:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800e13e:	2284      	movs	r2, #132	; 0x84
 800e140:	6869      	ldr	r1, [r5, #4]
 800e142:	f01c fce5 	bl	802ab10 <memcpy>
    compptr->quant_table = qtbl;
 800e146:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e14a:	3701      	adds	r7, #1
 800e14c:	e765      	b.n	800e01a <start_input_pass+0x52>
	...

0800e150 <consume_markers>:
{
 800e150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800e154:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800e158:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800e15a:	6973      	ldr	r3, [r6, #20]
 800e15c:	b9eb      	cbnz	r3, 800e19a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800e15e:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800e162:	4db0      	ldr	r5, [pc, #704]	; (800e424 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800e164:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e168:	4620      	mov	r0, r4
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	4798      	blx	r3
    switch (val) {
 800e16e:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800e170:	4607      	mov	r7, r0
    switch (val) {
 800e172:	d016      	beq.n	800e1a2 <consume_markers+0x52>
 800e174:	2802      	cmp	r0, #2
 800e176:	d111      	bne.n	800e19c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800e17c:	69b3      	ldr	r3, [r6, #24]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 8174 	beq.w	800e46c <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800e184:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	b133      	cbz	r3, 800e19a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	223d      	movs	r2, #61	; 0x3d
 800e190:	4620      	mov	r0, r4
 800e192:	615a      	str	r2, [r3, #20]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4798      	blx	r3
 800e198:	e000      	b.n	800e19c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800e19a:	2702      	movs	r7, #2
}
 800e19c:	4638      	mov	r0, r7
 800e19e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800e1a2:	69b3      	ldr	r3, [r6, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 8150 	beq.w	800e44a <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	f040 80d8 	bne.w	800e360 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800e1b0:	6a22      	ldr	r2, [r4, #32]
 800e1b2:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	dc02      	bgt.n	800e1c0 <consume_markers+0x70>
 800e1ba:	69e2      	ldr	r2, [r4, #28]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	dd08      	ble.n	800e1d2 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800e1c0:	6823      	ldr	r3, [r4, #0]
 800e1c2:	212a      	movs	r1, #42	; 0x2a
 800e1c4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800e1d2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800e1d6:	2a08      	cmp	r2, #8
 800e1d8:	d006      	beq.n	800e1e8 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	2110      	movs	r1, #16
 800e1de:	4620      	mov	r0, r4
 800e1e0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800e1e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e1ea:	2a0a      	cmp	r2, #10
 800e1ec:	dd08      	ble.n	800e200 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	211b      	movs	r1, #27
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e1f8:	220a      	movs	r2, #10
 800e1fa:	61da      	str	r2, [r3, #28]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e200:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e204:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800e208:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800e20c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e212:	459a      	cmp	sl, r3
 800e214:	db0d      	blt.n	800e232 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800e216:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800e21a:	b92b      	cbnz	r3, 800e228 <consume_markers+0xd8>
 800e21c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e220:	b383      	cbz	r3, 800e284 <consume_markers+0x134>
 800e222:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e226:	b36b      	cbz	r3, 800e284 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800e228:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800e22a:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800e22e:	233f      	movs	r3, #63	; 0x3f
 800e230:	e071      	b.n	800e316 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800e232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e236:	3b01      	subs	r3, #1
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d804      	bhi.n	800e246 <consume_markers+0xf6>
 800e23c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e240:	3b01      	subs	r3, #1
 800e242:	2b03      	cmp	r3, #3
 800e244:	d905      	bls.n	800e252 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	4620      	mov	r0, r4
 800e24a:	f8c3 b014 	str.w	fp, [r3, #20]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e252:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800e256:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e25a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800e25e:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800e262:	429a      	cmp	r2, r3
 800e264:	bfac      	ite	ge
 800e266:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800e26a:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800e26e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800e272:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800e276:	429a      	cmp	r2, r3
 800e278:	bfac      	ite	ge
 800e27a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800e27e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800e282:	e7c5      	b.n	800e210 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800e284:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800e288:	2b50      	cmp	r3, #80	; 0x50
 800e28a:	f000 808a 	beq.w	800e3a2 <consume_markers+0x252>
 800e28e:	dc2b      	bgt.n	800e2e8 <consume_markers+0x198>
 800e290:	2b18      	cmp	r3, #24
 800e292:	d078      	beq.n	800e386 <consume_markers+0x236>
 800e294:	dc1d      	bgt.n	800e2d2 <consume_markers+0x182>
 800e296:	2b08      	cmp	r3, #8
 800e298:	d070      	beq.n	800e37c <consume_markers+0x22c>
 800e29a:	dc13      	bgt.n	800e2c4 <consume_markers+0x174>
 800e29c:	b3bb      	cbz	r3, 800e30e <consume_markers+0x1be>
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d065      	beq.n	800e36e <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800e2a2:	6822      	ldr	r2, [r4, #0]
 800e2a4:	2111      	movs	r1, #17
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	6151      	str	r1, [r2, #20]
 800e2aa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800e2ae:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800e2b2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800e2b6:	6213      	str	r3, [r2, #32]
 800e2b8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800e2bc:	6253      	str	r3, [r2, #36]	; 0x24
 800e2be:	6813      	ldr	r3, [r2, #0]
 800e2c0:	4798      	blx	r3
      break;
 800e2c2:	e02a      	b.n	800e31a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800e2c4:	2b0f      	cmp	r3, #15
 800e2c6:	d1ec      	bne.n	800e2a2 <consume_markers+0x152>
      cinfo->block_size = 4;
 800e2c8:	2204      	movs	r2, #4
 800e2ca:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800e2ce:	4a56      	ldr	r2, [pc, #344]	; (800e428 <consume_markers+0x2d8>)
 800e2d0:	e051      	b.n	800e376 <consume_markers+0x226>
    switch (cinfo->Se) {
 800e2d2:	2b30      	cmp	r3, #48	; 0x30
 800e2d4:	d05c      	beq.n	800e390 <consume_markers+0x240>
 800e2d6:	2b3f      	cmp	r3, #63	; 0x3f
 800e2d8:	d05f      	beq.n	800e39a <consume_markers+0x24a>
 800e2da:	2b23      	cmp	r3, #35	; 0x23
 800e2dc:	d1e1      	bne.n	800e2a2 <consume_markers+0x152>
      cinfo->block_size = 6;
 800e2de:	2206      	movs	r2, #6
 800e2e0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800e2e4:	4a51      	ldr	r2, [pc, #324]	; (800e42c <consume_markers+0x2dc>)
 800e2e6:	e046      	b.n	800e376 <consume_markers+0x226>
    switch (cinfo->Se) {
 800e2e8:	2ba8      	cmp	r3, #168	; 0xa8
 800e2ea:	d060      	beq.n	800e3ae <consume_markers+0x25e>
 800e2ec:	dc07      	bgt.n	800e2fe <consume_markers+0x1ae>
 800e2ee:	2b78      	cmp	r3, #120	; 0x78
 800e2f0:	d059      	beq.n	800e3a6 <consume_markers+0x256>
 800e2f2:	2b8f      	cmp	r3, #143	; 0x8f
 800e2f4:	d059      	beq.n	800e3aa <consume_markers+0x25a>
 800e2f6:	2b63      	cmp	r3, #99	; 0x63
 800e2f8:	d1d3      	bne.n	800e2a2 <consume_markers+0x152>
      cinfo->block_size = 10;
 800e2fa:	230a      	movs	r3, #10
 800e2fc:	e795      	b.n	800e22a <consume_markers+0xda>
    switch (cinfo->Se) {
 800e2fe:	2be0      	cmp	r3, #224	; 0xe0
 800e300:	d057      	beq.n	800e3b2 <consume_markers+0x262>
 800e302:	2bff      	cmp	r3, #255	; 0xff
 800e304:	d057      	beq.n	800e3b6 <consume_markers+0x266>
 800e306:	2bc3      	cmp	r3, #195	; 0xc3
 800e308:	d1cb      	bne.n	800e2a2 <consume_markers+0x152>
      cinfo->block_size = 14;
 800e30a:	230e      	movs	r3, #14
 800e30c:	e78d      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 1;
 800e30e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800e312:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800e316:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e31a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800e31e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e322:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800e326:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800e328:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e32c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800e32e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e332:	459a      	cmp	sl, r3
 800e334:	db41      	blt.n	800e3ba <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e336:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800e33a:	6a20      	ldr	r0, [r4, #32]
 800e33c:	4359      	muls	r1, r3
 800e33e:	f009 fc6d 	bl	8017c1c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e344:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800e348:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800e34c:	429a      	cmp	r2, r3
 800e34e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e352:	db03      	blt.n	800e35c <consume_markers+0x20c>
 800e354:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800e358:	2a00      	cmp	r2, #0
 800e35a:	d071      	beq.n	800e440 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800e35c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800e360:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e364:	2b00      	cmp	r3, #0
 800e366:	d16d      	bne.n	800e444 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800e368:	2302      	movs	r3, #2
 800e36a:	61b3      	str	r3, [r6, #24]
	  break;
 800e36c:	e6fa      	b.n	800e164 <consume_markers+0x14>
      cinfo->block_size = 2;
 800e36e:	2202      	movs	r2, #2
 800e370:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800e374:	4a2e      	ldr	r2, [pc, #184]	; (800e430 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800e376:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800e37a:	e7cc      	b.n	800e316 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800e37c:	2203      	movs	r2, #3
 800e37e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800e382:	4a2c      	ldr	r2, [pc, #176]	; (800e434 <consume_markers+0x2e4>)
 800e384:	e7f7      	b.n	800e376 <consume_markers+0x226>
      cinfo->block_size = 5;
 800e386:	2205      	movs	r2, #5
 800e388:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800e38c:	4a2a      	ldr	r2, [pc, #168]	; (800e438 <consume_markers+0x2e8>)
 800e38e:	e7f2      	b.n	800e376 <consume_markers+0x226>
      cinfo->block_size = 7;
 800e390:	2207      	movs	r2, #7
 800e392:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800e396:	4a29      	ldr	r2, [pc, #164]	; (800e43c <consume_markers+0x2ec>)
 800e398:	e7ed      	b.n	800e376 <consume_markers+0x226>
      cinfo->block_size = 8;
 800e39a:	2208      	movs	r2, #8
 800e39c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800e3a0:	e7b7      	b.n	800e312 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800e3a2:	2309      	movs	r3, #9
 800e3a4:	e741      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 11;
 800e3a6:	230b      	movs	r3, #11
 800e3a8:	e73f      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 12;
 800e3aa:	230c      	movs	r3, #12
 800e3ac:	e73d      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 13;
 800e3ae:	230d      	movs	r3, #13
 800e3b0:	e73b      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 15;
 800e3b2:	230f      	movs	r3, #15
 800e3b4:	e739      	b.n	800e22a <consume_markers+0xda>
      cinfo->block_size = 16;
 800e3b6:	2310      	movs	r3, #16
 800e3b8:	e737      	b.n	800e22a <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800e3ba:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e3be:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800e3c2:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e3c6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e3ca:	69e3      	ldr	r3, [r4, #28]
 800e3cc:	4351      	muls	r1, r2
 800e3ce:	4358      	muls	r0, r3
 800e3d0:	f009 fc24 	bl	8017c1c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800e3d4:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e3d8:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e3dc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e3e0:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e3e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e3e6:	4358      	muls	r0, r3
 800e3e8:	4351      	muls	r1, r2
 800e3ea:	f009 fc17 	bl	8017c1c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800e3ee:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800e3f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800e3f6:	69e3      	ldr	r3, [r4, #28]
 800e3f8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800e3fc:	4358      	muls	r0, r3
 800e3fe:	f009 fc0d 	bl	8017c1c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800e402:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800e406:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800e40a:	6a23      	ldr	r3, [r4, #32]
 800e40c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800e410:	4358      	muls	r0, r3
 800e412:	f009 fc03 	bl	8017c1c <jdiv_round_up>
    compptr->quant_table = NULL;
 800e416:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800e41a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800e41e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e422:	e783      	b.n	800e32c <consume_markers+0x1dc>
 800e424:	08030358 	.word	0x08030358
 800e428:	0803054c 	.word	0x0803054c
 800e42c:	08030670 	.word	0x08030670
 800e430:	08030498 	.word	0x08030498
 800e434:	080304e8 	.word	0x080304e8
 800e438:	080305cc 	.word	0x080305cc
 800e43c:	08030740 	.word	0x08030740
    cinfo->inputctl->has_multiple_scans = FALSE;
 800e440:	611a      	str	r2, [r3, #16]
 800e442:	e78d      	b.n	800e360 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	61b3      	str	r3, [r6, #24]
 800e448:	e6a8      	b.n	800e19c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800e44a:	6933      	ldr	r3, [r6, #16]
 800e44c:	b92b      	cbnz	r3, 800e45a <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	2224      	movs	r2, #36	; 0x24
 800e452:	4620      	mov	r0, r4
 800e454:	615a      	str	r2, [r3, #20]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800e45a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f43f ae80 	beq.w	800e164 <consume_markers+0x14>
	start_input_pass(cinfo);
 800e464:	4620      	mov	r0, r4
 800e466:	f7ff fdaf 	bl	800dfc8 <start_input_pass>
 800e46a:	e697      	b.n	800e19c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800e46c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e470:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800e474:	429a      	cmp	r2, r3
 800e476:	f77f ae90 	ble.w	800e19a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800e47a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800e47e:	e68d      	b.n	800e19c <consume_markers+0x4c>

0800e480 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e480:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800e484:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e486:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e488:	434a      	muls	r2, r1
 800e48a:	429a      	cmp	r2, r3
{
 800e48c:	b570      	push	{r4, r5, r6, lr}
 800e48e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e490:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800e492:	d80c      	bhi.n	800e4ae <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800e494:	f009 fbc2 	bl	8017c1c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e498:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800e49c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800e49e:	6a20      	ldr	r0, [r4, #32]
 800e4a0:	f009 fbbc 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800e4a4:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800e4a6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800e4a8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800e4ac:	e059      	b.n	800e562 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800e4ae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800e4b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e4b6:	d80c      	bhi.n	800e4d2 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800e4b8:	0040      	lsls	r0, r0, #1
 800e4ba:	f009 fbaf 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e4be:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800e4c0:	6a20      	ldr	r0, [r4, #32]
 800e4c2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e4c6:	0040      	lsls	r0, r0, #1
 800e4c8:	f009 fba8 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800e4cc:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800e4ce:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800e4d0:	e7ea      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800e4d2:	441d      	add	r5, r3
 800e4d4:	42aa      	cmp	r2, r5
 800e4d6:	d80e      	bhi.n	800e4f6 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800e4d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e4dc:	f009 fb9e 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e4e0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800e4e2:	6a20      	ldr	r0, [r4, #32]
 800e4e4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e4e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e4ec:	f009 fb96 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800e4f0:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800e4f2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800e4f4:	e7d8      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800e4f6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800e4fa:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800e4fe:	d80c      	bhi.n	800e51a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800e500:	0080      	lsls	r0, r0, #2
 800e502:	f009 fb8b 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e506:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800e508:	6a20      	ldr	r0, [r4, #32]
 800e50a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e50e:	0080      	lsls	r0, r0, #2
 800e510:	f009 fb84 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800e514:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800e516:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800e518:	e7c6      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800e51a:	441d      	add	r5, r3
 800e51c:	42aa      	cmp	r2, r5
 800e51e:	d80e      	bhi.n	800e53e <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800e520:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e524:	f009 fb7a 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e528:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800e52a:	6a20      	ldr	r0, [r4, #32]
 800e52c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e534:	f009 fb72 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800e538:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800e53a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800e53c:	e7b4      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800e53e:	2506      	movs	r5, #6
 800e540:	fb05 f603 	mul.w	r6, r5, r3
 800e544:	42b2      	cmp	r2, r6
 800e546:	d813      	bhi.n	800e570 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800e548:	4368      	muls	r0, r5
 800e54a:	f009 fb67 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e54e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800e550:	6a20      	ldr	r0, [r4, #32]
 800e552:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e556:	4368      	muls	r0, r5
 800e558:	f009 fb60 	bl	8017c1c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800e55c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800e55e:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e562:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800e566:	2200      	movs	r2, #0
 800e568:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e56a:	4291      	cmp	r1, r2
 800e56c:	dc6f      	bgt.n	800e64e <jpeg_core_output_dimensions+0x1ce>
}
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800e570:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800e574:	00dd      	lsls	r5, r3, #3
 800e576:	42b2      	cmp	r2, r6
 800e578:	d80e      	bhi.n	800e598 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800e57a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e57e:	f009 fb4d 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e582:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800e584:	6a20      	ldr	r0, [r4, #32]
 800e586:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e58a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800e58e:	f009 fb45 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800e592:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800e594:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800e596:	e787      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800e598:	42aa      	cmp	r2, r5
 800e59a:	d80c      	bhi.n	800e5b6 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800e59c:	00c0      	lsls	r0, r0, #3
 800e59e:	f009 fb3d 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e5a2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800e5a4:	6a20      	ldr	r0, [r4, #32]
 800e5a6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e5aa:	00c0      	lsls	r0, r0, #3
 800e5ac:	f009 fb36 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800e5b0:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800e5b2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800e5b4:	e778      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800e5b6:	441d      	add	r5, r3
 800e5b8:	42aa      	cmp	r2, r5
 800e5ba:	d80e      	bhi.n	800e5da <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800e5bc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e5c0:	f009 fb2c 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e5c4:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800e5c6:	6a20      	ldr	r0, [r4, #32]
 800e5c8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e5cc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800e5d0:	f009 fb24 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800e5d4:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800e5d6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800e5d8:	e766      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800e5da:	250a      	movs	r5, #10
 800e5dc:	fb05 f603 	mul.w	r6, r5, r3
 800e5e0:	42b2      	cmp	r2, r6
 800e5e2:	d9b1      	bls.n	800e548 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800e5e4:	250b      	movs	r5, #11
 800e5e6:	fb05 f603 	mul.w	r6, r5, r3
 800e5ea:	42b2      	cmp	r2, r6
 800e5ec:	d9ac      	bls.n	800e548 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800e5ee:	250c      	movs	r5, #12
 800e5f0:	fb05 f603 	mul.w	r6, r5, r3
 800e5f4:	42b2      	cmp	r2, r6
 800e5f6:	d9a7      	bls.n	800e548 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800e5f8:	250d      	movs	r5, #13
 800e5fa:	fb05 f603 	mul.w	r6, r5, r3
 800e5fe:	42b2      	cmp	r2, r6
 800e600:	d9a2      	bls.n	800e548 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800e602:	250e      	movs	r5, #14
 800e604:	fb05 f603 	mul.w	r6, r5, r3
 800e608:	42b2      	cmp	r2, r6
 800e60a:	d99d      	bls.n	800e548 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800e60c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800e610:	429a      	cmp	r2, r3
 800e612:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800e616:	d80d      	bhi.n	800e634 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800e618:	1a18      	subs	r0, r3, r0
 800e61a:	f009 faff 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e61e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800e620:	6a20      	ldr	r0, [r4, #32]
 800e622:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e626:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800e62a:	f009 faf7 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800e62e:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800e630:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800e632:	e739      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800e634:	4618      	mov	r0, r3
 800e636:	f009 faf1 	bl	8017c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800e63a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800e63c:	6a20      	ldr	r0, [r4, #32]
 800e63e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e642:	0100      	lsls	r0, r0, #4
 800e644:	f009 faea 	bl	8017c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800e648:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800e64a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800e64c:	e72c      	b.n	800e4a8 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e64e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800e652:	3201      	adds	r2, #1
 800e654:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800e656:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800e65a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800e65e:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800e662:	e782      	b.n	800e56a <jpeg_core_output_dimensions+0xea>

0800e664 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e664:	6843      	ldr	r3, [r0, #4]
 800e666:	221c      	movs	r2, #28
 800e668:	2100      	movs	r1, #0
 800e66a:	681b      	ldr	r3, [r3, #0]
{
 800e66c:	b510      	push	{r4, lr}
 800e66e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e670:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800e672:	4b08      	ldr	r3, [pc, #32]	; (800e694 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800e674:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800e678:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800e67a:	4b07      	ldr	r3, [pc, #28]	; (800e698 <jinit_input_controller+0x34>)
 800e67c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800e67e:	4b07      	ldr	r3, [pc, #28]	; (800e69c <jinit_input_controller+0x38>)
 800e680:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800e682:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <jinit_input_controller+0x3c>)
 800e684:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800e686:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800e688:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800e68c:	2301      	movs	r3, #1
 800e68e:	6183      	str	r3, [r0, #24]
}
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	0800e151 	.word	0x0800e151
 800e698:	0800df99 	.word	0x0800df99
 800e69c:	0800dfc9 	.word	0x0800dfc9
 800e6a0:	0800df89 	.word	0x0800df89

0800e6a4 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800e6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e6a8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800e6ac:	4602      	mov	r2, r0

  switch (pass_mode) {
 800e6ae:	b149      	cbz	r1, 800e6c4 <start_pass_main+0x20>
 800e6b0:	2902      	cmp	r1, #2
 800e6b2:	d070      	beq.n	800e796 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e6b4:	6803      	ldr	r3, [r0, #0]
 800e6b6:	2203      	movs	r2, #3
 800e6b8:	615a      	str	r2, [r3, #20]
 800e6ba:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800e6bc:	b003      	add	sp, #12
 800e6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e6c2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800e6c4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800e6c8:	6880      	ldr	r0, [r0, #8]
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d060      	beq.n	800e790 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800e6ce:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800e6d2:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e6d6:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800e6da:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800e6dc:	482f      	ldr	r0, [pc, #188]	; (800e79c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e6de:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e6e0:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800e6e2:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e6e4:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e6e6:	9a00      	ldr	r2, [sp, #0]
 800e6e8:	4291      	cmp	r1, r2
 800e6ea:	db09      	blt.n	800e700 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800e6ec:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800e6ee:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800e6f2:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800e6f4:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800e6f6:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800e6fa:	b003      	add	sp, #12
 800e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e700:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800e702:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e704:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e706:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800e708:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800e70a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800e70e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800e712:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e714:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800e718:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e71c:	fb02 f905 	mul.w	r9, r2, r5
 800e720:	2500      	movs	r5, #0
 800e722:	454d      	cmp	r5, r9
 800e724:	db1c      	blt.n	800e760 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e726:	fb02 fb07 	mul.w	fp, r2, r7
 800e72a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800e72e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e732:	fb05 b502 	mla	r5, r5, r2, fp
 800e736:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800e73a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800e73e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800e742:	2400      	movs	r4, #0
 800e744:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800e748:	4554      	cmp	r4, sl
 800e74a:	db11      	blt.n	800e770 <start_pass_main+0xcc>
 800e74c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800e750:	2400      	movs	r4, #0
 800e752:	fb00 c502 	mla	r5, r0, r2, ip
 800e756:	42a2      	cmp	r2, r4
 800e758:	dc14      	bgt.n	800e784 <start_pass_main+0xe0>
       ci++, compptr++) {
 800e75a:	3101      	adds	r1, #1
 800e75c:	3658      	adds	r6, #88	; 0x58
 800e75e:	e7c2      	b.n	800e6e6 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800e760:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800e764:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800e768:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800e76c:	3501      	adds	r5, #1
 800e76e:	e7d8      	b.n	800e722 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e770:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e774:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800e776:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800e77a:	f855 bb04 	ldr.w	fp, [r5], #4
 800e77e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e782:	e7e1      	b.n	800e748 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800e784:	f8dc 0000 	ldr.w	r0, [ip]
 800e788:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800e78c:	3401      	adds	r4, #1
 800e78e:	e7e2      	b.n	800e756 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800e790:	4a03      	ldr	r2, [pc, #12]	; (800e7a0 <start_pass_main+0xfc>)
 800e792:	605a      	str	r2, [r3, #4]
 800e794:	e7ae      	b.n	800e6f4 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800e796:	4a03      	ldr	r2, [pc, #12]	; (800e7a4 <start_pass_main+0x100>)
 800e798:	605a      	str	r2, [r3, #4]
    break;
 800e79a:	e7ae      	b.n	800e6fa <start_pass_main+0x56>
 800e79c:	0800e801 	.word	0x0800e801
 800e7a0:	0800e7a9 	.word	0x0800e7a9
 800e7a4:	0800e9f5 	.word	0x0800e9f5

0800e7a8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800e7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e7ac:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800e7b0:	4698      	mov	r8, r3
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e7b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e7bc:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800e7c0:	b943      	cbnz	r3, 800e7d4 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800e7c2:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800e7c6:	9105      	str	r1, [sp, #20]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	4798      	blx	r3
 800e7cc:	b1a8      	cbz	r0, 800e7fa <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	9905      	ldr	r1, [sp, #20]
 800e7d2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800e7d4:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800e7d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e7dc:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	9600      	str	r6, [sp, #0]
 800e7e4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e7e8:	685e      	ldr	r6, [r3, #4]
 800e7ea:	464b      	mov	r3, r9
 800e7ec:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800e7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7f0:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800e7f2:	bf24      	itt	cs
 800e7f4:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800e7f6:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800e7fa:	b007      	add	sp, #28
 800e7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e800 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e804:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800e808:	4698      	mov	r8, r3
 800e80a:	b08b      	sub	sp, #44	; 0x2c
 800e80c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800e80e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800e810:	4689      	mov	r9, r1
 800e812:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800e814:	b973      	cbnz	r3, 800e834 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800e816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e818:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800e81c:	330e      	adds	r3, #14
 800e81e:	68d2      	ldr	r2, [r2, #12]
 800e820:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800e824:	4790      	blx	r2
 800e826:	2800      	cmp	r0, #0
 800e828:	d05a      	beq.n	800e8e0 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800e82a:	2301      	movs	r3, #1
 800e82c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800e82e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e830:	3301      	adds	r3, #1
 800e832:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800e834:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e836:	2b01      	cmp	r3, #1
 800e838:	d011      	beq.n	800e85e <process_data_context_main+0x5e>
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d036      	beq.n	800e8ac <process_data_context_main+0xac>
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d14e      	bne.n	800e8e0 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e842:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800e846:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e848:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e84a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800e84e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800e850:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800e852:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800e856:	429a      	cmp	r2, r3
 800e858:	d045      	beq.n	800e8e6 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800e85a:	2301      	movs	r3, #1
 800e85c:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e85e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e860:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e864:	4628      	mov	r0, r5
 800e866:	f103 010e 	add.w	r1, r3, #14
 800e86a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800e86e:	f8cd 9000 	str.w	r9, [sp]
 800e872:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e876:	685e      	ldr	r6, [r3, #4]
 800e878:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e87c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e87e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e880:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e882:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e884:	429a      	cmp	r2, r3
 800e886:	d32b      	bcc.n	800e8e0 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800e888:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800e88a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d063      	beq.n	800e95a <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800e892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e894:	f083 0301 	eor.w	r3, r3, #1
 800e898:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800e89a:	2300      	movs	r3, #0
 800e89c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e89e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e8a0:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e8a2:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800e8a4:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800e8a6:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800e8a8:	6463      	str	r3, [r4, #68]	; 0x44
 800e8aa:	e019      	b.n	800e8e0 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800e8ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8ae:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f103 010e 	add.w	r1, r3, #14
 800e8b8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800e8bc:	f8cd 9000 	str.w	r9, [sp]
 800e8c0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800e8c4:	685e      	ldr	r6, [r3, #4]
 800e8c6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e8ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8cc:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800e8ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e8d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d304      	bcc.n	800e8e0 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	4543      	cmp	r3, r8
 800e8de:	d3b0      	bcc.n	800e842 <process_data_context_main+0x42>
  }
}
 800e8e0:	b00b      	add	sp, #44	; 0x2c
 800e8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e8e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e8e8:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e8ec:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e8f0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800e8f4:	9206      	str	r2, [sp, #24]
 800e8f6:	9a06      	ldr	r2, [sp, #24]
 800e8f8:	4296      	cmp	r6, r2
 800e8fa:	daae      	bge.n	800e85a <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800e8fc:	68d8      	ldr	r0, [r3, #12]
 800e8fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e900:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800e902:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e904:	fbb0 fbf2 	udiv	fp, r0, r2
 800e908:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800e90c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800e910:	2800      	cmp	r0, #0
 800e912:	bf08      	it	eq
 800e914:	4610      	moveq	r0, r2
    if (ci == 0) {
 800e916:	b926      	cbnz	r6, 800e922 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800e918:	1e42      	subs	r2, r0, #1
 800e91a:	fb92 f2fa 	sdiv	r2, r2, sl
 800e91e:	3201      	adds	r2, #1
 800e920:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800e922:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e924:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800e926:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800e92a:	320e      	adds	r2, #14
 800e92c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e930:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e934:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800e938:	2200      	movs	r2, #0
 800e93a:	4658      	mov	r0, fp
 800e93c:	3004      	adds	r0, #4
 800e93e:	9205      	str	r2, [sp, #20]
 800e940:	9a05      	ldr	r2, [sp, #20]
 800e942:	4552      	cmp	r2, sl
 800e944:	db02      	blt.n	800e94c <process_data_context_main+0x14c>
       ci++, compptr++) {
 800e946:	3601      	adds	r6, #1
 800e948:	3358      	adds	r3, #88	; 0x58
 800e94a:	e7d4      	b.n	800e8f6 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800e94c:	f8db 2000 	ldr.w	r2, [fp]
 800e950:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800e954:	9a05      	ldr	r2, [sp, #20]
 800e956:	3201      	adds	r2, #1
 800e958:	e7f1      	b.n	800e93e <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e95a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e95e:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e962:	9305      	str	r3, [sp, #20]
 800e964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e966:	2500      	movs	r5, #0
 800e968:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e96e:	9b08      	ldr	r3, [sp, #32]
 800e970:	429d      	cmp	r5, r3
 800e972:	da8e      	bge.n	800e892 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e974:	9b05      	ldr	r3, [sp, #20]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e97a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800e97c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e980:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800e984:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800e988:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800e98c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800e990:	9b07      	ldr	r3, [sp, #28]
 800e992:	4353      	muls	r3, r2
 800e994:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800e998:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800e99c:	4413      	add	r3, r2
 800e99e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800e9a6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800e9aa:	461e      	mov	r6, r3
 800e9ac:	f06f 0303 	mvn.w	r3, #3
 800e9b0:	fb03 fe02 	mul.w	lr, r3, r2
 800e9b4:	eb07 030e 	add.w	r3, r7, lr
 800e9b8:	44e6      	add	lr, ip
 800e9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e9bc:	428a      	cmp	r2, r1
 800e9be:	dc04      	bgt.n	800e9ca <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800e9c0:	9b05      	ldr	r3, [sp, #20]
 800e9c2:	3501      	adds	r5, #1
 800e9c4:	3358      	adds	r3, #88	; 0x58
 800e9c6:	9305      	str	r3, [sp, #20]
 800e9c8:	e7d1      	b.n	800e96e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800e9ca:	9b06      	ldr	r3, [sp, #24]
 800e9cc:	f853 bb04 	ldr.w	fp, [r3], #4
 800e9d0:	9306      	str	r3, [sp, #24]
 800e9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d4:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800e9d8:	f85a bb04 	ldr.w	fp, [sl], #4
 800e9dc:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800e9e0:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800e9e4:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800e9e8:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800e9ec:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800e9ee:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800e9f2:	e7e3      	b.n	800e9bc <process_data_context_main+0x1bc>

0800e9f4 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800e9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800e9f6:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800e9fa:	9100      	str	r1, [sp, #0]
 800e9fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ea00:	2300      	movs	r3, #0
 800ea02:	6864      	ldr	r4, [r4, #4]
 800ea04:	461a      	mov	r2, r3
 800ea06:	4619      	mov	r1, r3
 800ea08:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800ea0a:	b004      	add	sp, #16
 800ea0c:	bd10      	pop	{r4, pc}
	...

0800ea10 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800ea10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea14:	6843      	ldr	r3, [r0, #4]
{
 800ea16:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea18:	2250      	movs	r2, #80	; 0x50
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	681b      	ldr	r3, [r3, #0]
{
 800ea1e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea20:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800ea22:	4b3a      	ldr	r3, [pc, #232]	; (800eb0c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800ea24:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea28:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800ea2a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800ea2c:	b12d      	cbz	r5, 800ea3a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	2203      	movs	r2, #3
 800ea32:	4620      	mov	r0, r4
 800ea34:	615a      	str	r2, [r3, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800ea3a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800ea3e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	b31b      	cbz	r3, 800ea8e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800ea46:	2d01      	cmp	r5, #1
 800ea48:	dc05      	bgt.n	800ea56 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	2230      	movs	r2, #48	; 0x30
 800ea4e:	4620      	mov	r0, r4
 800ea50:	615a      	str	r2, [r3, #20]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ea58:	2101      	movs	r1, #1
 800ea5a:	6863      	ldr	r3, [r4, #4]
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ea60:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea64:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea66:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800ea6a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea6e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ea70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800ea72:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800ea74:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ea78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea7c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ea80:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea82:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800ea84:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea88:	4598      	cmp	r8, r3
 800ea8a:	db0a      	blt.n	800eaa2 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800ea8c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea8e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800ea92:	3608      	adds	r6, #8
 800ea94:	f04f 0800 	mov.w	r8, #0
 800ea98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea9a:	4543      	cmp	r3, r8
 800ea9c:	dc1d      	bgt.n	800eada <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800ea9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eaa2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eaa4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eaa6:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800eaa8:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eaaa:	4353      	muls	r3, r2
 800eaac:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eab0:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800eab2:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eab6:	4620      	mov	r0, r4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eabe:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800eac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800eac2:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800eac6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800eaca:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800eace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800ead4:	f108 0801 	add.w	r8, r8, #1
 800ead8:	e7d3      	b.n	800ea82 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eada:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800eadc:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eae0:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800eae2:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800eae4:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eae8:	4353      	muls	r3, r2
 800eaea:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800eaee:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800eaf0:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800eaf4:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800eaf8:	436b      	muls	r3, r5
 800eafa:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800eafe:	4620      	mov	r0, r4
 800eb00:	434a      	muls	r2, r1
 800eb02:	2101      	movs	r1, #1
 800eb04:	47c8      	blx	r9
 800eb06:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800eb0a:	e7c5      	b.n	800ea98 <jinit_d_main_controller+0x88>
 800eb0c:	0800e6a5 	.word	0x0800e6a5

0800eb10 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800eb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800eb14:	6986      	ldr	r6, [r0, #24]
{
 800eb16:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800eb18:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800eb1c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800eb20:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb24:	b93d      	cbnz	r5, 800eb36 <get_sof+0x26>
 800eb26:	68f3      	ldr	r3, [r6, #12]
 800eb28:	4798      	blx	r3
 800eb2a:	b910      	cbnz	r0, 800eb32 <get_sof+0x22>
 800eb2c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800eb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb32:	e9d6 c500 	ldrd	ip, r5, [r6]
 800eb36:	1e6b      	subs	r3, r5, #1
 800eb38:	f89c 7000 	ldrb.w	r7, [ip]
 800eb3c:	f000 8088 	beq.w	800ec50 <get_sof+0x140>
 800eb40:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800eb44:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb46:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800eb4a:	f000 808a 	beq.w	800ec62 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb4e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800eb50:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800eb52:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800eb54:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800eb58:	f000 808c 	beq.w	800ec74 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800eb5c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800eb5e:	782a      	ldrb	r2, [r5, #0]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800eb66:	6222      	str	r2, [r4, #32]
 800eb68:	f000 808d 	beq.w	800ec86 <get_sof+0x176>
 800eb6c:	3501      	adds	r5, #1
 800eb6e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eb70:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800eb72:	6a22      	ldr	r2, [r4, #32]
 800eb74:	440a      	add	r2, r1
 800eb76:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eb78:	f000 808e 	beq.w	800ec98 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800eb7c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eb7e:	782a      	ldrb	r2, [r5, #0]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800eb86:	61e2      	str	r2, [r4, #28]
 800eb88:	f000 808f 	beq.w	800ecaa <get_sof+0x19a>
 800eb8c:	3501      	adds	r5, #1
 800eb8e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800eb90:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eb92:	69e2      	ldr	r2, [r4, #28]
 800eb94:	440a      	add	r2, r1
 800eb96:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800eb98:	f000 8090 	beq.w	800ecbc <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800eb9c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800eb9e:	f103 39ff 	add.w	r9, r3, #4294967295
 800eba2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800eba6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800ebaa:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800ebac:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800ebae:	4620      	mov	r0, r4
 800ebb0:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ebb2:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800ebb6:	619a      	str	r2, [r3, #24]
  length -= 8;
 800ebb8:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800ebbc:	69e2      	ldr	r2, [r4, #28]
 800ebbe:	61da      	str	r2, [r3, #28]
 800ebc0:	6a22      	ldr	r2, [r4, #32]
 800ebc2:	621a      	str	r2, [r3, #32]
 800ebc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ebc6:	625a      	str	r2, [r3, #36]	; 0x24
 800ebc8:	2266      	movs	r2, #102	; 0x66
 800ebca:	615a      	str	r2, [r3, #20]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800ebd0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	b12b      	cbz	r3, 800ebe4 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800ebd8:	6823      	ldr	r3, [r4, #0]
 800ebda:	223c      	movs	r2, #60	; 0x3c
 800ebdc:	4620      	mov	r0, r4
 800ebde:	615a      	str	r2, [r3, #20]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800ebe4:	6a23      	ldr	r3, [r4, #32]
 800ebe6:	b123      	cbz	r3, 800ebf2 <get_sof+0xe2>
 800ebe8:	69e3      	ldr	r3, [r4, #28]
 800ebea:	b113      	cbz	r3, 800ebf2 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800ebec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dc05      	bgt.n	800ebfe <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	2221      	movs	r2, #33	; 0x21
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	615a      	str	r2, [r3, #20]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800ebfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec04:	4543      	cmp	r3, r8
 800ec06:	d005      	beq.n	800ec14 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	220c      	movs	r2, #12
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	615a      	str	r2, [r3, #20]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800ec14:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800ec18:	b94b      	cbnz	r3, 800ec2e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800ec1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ec1c:	2158      	movs	r1, #88	; 0x58
 800ec1e:	6863      	ldr	r3, [r4, #4]
 800ec20:	4620      	mov	r0, r4
 800ec22:	434a      	muls	r2, r1
 800ec24:	2101      	movs	r1, #1
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4798      	blx	r3
 800ec2a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec2e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800ec32:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ec36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ec3a:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec3e:	4543      	cmp	r3, r8
 800ec40:	dc45      	bgt.n	800ecce <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800ec42:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ec46:	2001      	movs	r0, #1
 800ec48:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800ec4a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800ec4e:	e76e      	b.n	800eb2e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ec50:	68f3      	ldr	r3, [r6, #12]
 800ec52:	4620      	mov	r0, r4
 800ec54:	4798      	blx	r3
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f af68 	beq.w	800eb2c <get_sof+0x1c>
 800ec5c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ec60:	e770      	b.n	800eb44 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800ec62:	68f3      	ldr	r3, [r6, #12]
 800ec64:	4620      	mov	r0, r4
 800ec66:	4798      	blx	r3
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f43f af5f 	beq.w	800eb2c <get_sof+0x1c>
 800ec6e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ec72:	e76d      	b.n	800eb50 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800ec74:	68f3      	ldr	r3, [r6, #12]
 800ec76:	4620      	mov	r0, r4
 800ec78:	4798      	blx	r3
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	f43f af56 	beq.w	800eb2c <get_sof+0x1c>
 800ec80:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ec84:	e76b      	b.n	800eb5e <get_sof+0x4e>
 800ec86:	68f3      	ldr	r3, [r6, #12]
 800ec88:	4620      	mov	r0, r4
 800ec8a:	4798      	blx	r3
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f43f af4d 	beq.w	800eb2c <get_sof+0x1c>
 800ec92:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ec96:	e76a      	b.n	800eb6e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ec98:	68f3      	ldr	r3, [r6, #12]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4798      	blx	r3
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	f43f af44 	beq.w	800eb2c <get_sof+0x1c>
 800eca4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eca8:	e769      	b.n	800eb7e <get_sof+0x6e>
 800ecaa:	68f3      	ldr	r3, [r6, #12]
 800ecac:	4620      	mov	r0, r4
 800ecae:	4798      	blx	r3
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	f43f af3b 	beq.w	800eb2c <get_sof+0x1c>
 800ecb6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ecba:	e768      	b.n	800eb8e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800ecbc:	68f3      	ldr	r3, [r6, #12]
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	4798      	blx	r3
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	f43f af32 	beq.w	800eb2c <get_sof+0x1c>
 800ecc8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eccc:	e767      	b.n	800eb9e <get_sof+0x8e>
    compptr->component_index = ci;
 800ecce:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800ecd2:	f1b9 0f00 	cmp.w	r9, #0
 800ecd6:	d107      	bne.n	800ece8 <get_sof+0x1d8>
 800ecd8:	68f3      	ldr	r3, [r6, #12]
 800ecda:	4620      	mov	r0, r4
 800ecdc:	4798      	blx	r3
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f43f af24 	beq.w	800eb2c <get_sof+0x1c>
 800ece4:	e9d6 5900 	ldrd	r5, r9, [r6]
 800ece8:	782b      	ldrb	r3, [r5, #0]
 800ecea:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ecee:	f1b9 0301 	subs.w	r3, r9, #1
 800ecf2:	d029      	beq.n	800ed48 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800ecf4:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800ecf6:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ecf8:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800ecfa:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800ecfe:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800ed02:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800ed06:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ed0a:	d026      	beq.n	800ed5a <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ed0c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ed0e:	f103 39ff 	add.w	r9, r3, #4294967295
 800ed12:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ed16:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800ed1a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ed1c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ed20:	4620      	mov	r0, r4
 800ed22:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800ed24:	f108 0801 	add.w	r8, r8, #1
 800ed28:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ed2a:	619a      	str	r2, [r3, #24]
 800ed2c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800ed30:	61da      	str	r2, [r3, #28]
 800ed32:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800ed36:	621a      	str	r2, [r3, #32]
 800ed38:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800ed3c:	f8c3 a014 	str.w	sl, [r3, #20]
 800ed40:	625a      	str	r2, [r3, #36]	; 0x24
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	4798      	blx	r3
       ci++, compptr++) {
 800ed46:	e779      	b.n	800ec3c <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ed48:	68f3      	ldr	r3, [r6, #12]
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	4798      	blx	r3
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	f43f aeec 	beq.w	800eb2c <get_sof+0x1c>
 800ed54:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ed58:	e7cd      	b.n	800ecf6 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ed5a:	68f3      	ldr	r3, [r6, #12]
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4798      	blx	r3
 800ed60:	2800      	cmp	r0, #0
 800ed62:	f43f aee3 	beq.w	800eb2c <get_sof+0x1c>
 800ed66:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ed6a:	e7d0      	b.n	800ed0e <get_sof+0x1fe>

0800ed6c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800ed70:	2a0d      	cmp	r2, #13
{
 800ed72:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ed74:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800ed76:	eb02 0603 	add.w	r6, r2, r3
{
 800ed7a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ed7c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800ed7e:	d96d      	bls.n	800ee5c <examine_app0+0xf0>
 800ed80:	7822      	ldrb	r2, [r4, #0]
 800ed82:	2a4a      	cmp	r2, #74	; 0x4a
 800ed84:	f040 808f 	bne.w	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800ed88:	7862      	ldrb	r2, [r4, #1]
 800ed8a:	2a46      	cmp	r2, #70	; 0x46
 800ed8c:	f040 808b 	bne.w	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800ed90:	78a2      	ldrb	r2, [r4, #2]
 800ed92:	2a49      	cmp	r2, #73	; 0x49
 800ed94:	d16a      	bne.n	800ee6c <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800ed96:	78e2      	ldrb	r2, [r4, #3]
 800ed98:	2a46      	cmp	r2, #70	; 0x46
 800ed9a:	d167      	bne.n	800ee6c <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800ed9c:	7922      	ldrb	r2, [r4, #4]
 800ed9e:	2a00      	cmp	r2, #0
 800eda0:	d164      	bne.n	800ee6c <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800eda2:	2201      	movs	r2, #1
 800eda4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800eda8:	7962      	ldrb	r2, [r4, #5]
 800edaa:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800edae:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800edb0:	f894 c006 	ldrb.w	ip, [r4, #6]
 800edb4:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800edb8:	79e7      	ldrb	r7, [r4, #7]
 800edba:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800edbe:	f894 e008 	ldrb.w	lr, [r4, #8]
 800edc2:	7a67      	ldrb	r7, [r4, #9]
 800edc4:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800edc8:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800edcc:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800edd0:	7ae7      	ldrb	r7, [r4, #11]
 800edd2:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800edd6:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800edda:	d007      	beq.n	800edec <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800eddc:	277a      	movs	r7, #122	; 0x7a
 800edde:	f8c1 c01c 	str.w	ip, [r1, #28]
 800ede2:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800ede6:	f04f 31ff 	mov.w	r1, #4294967295
 800edea:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800edec:	682b      	ldr	r3, [r5, #0]
 800edee:	2101      	movs	r1, #1
 800edf0:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800edf4:	4628      	mov	r0, r5
 800edf6:	619a      	str	r2, [r3, #24]
 800edf8:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800edfc:	61da      	str	r2, [r3, #28]
 800edfe:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800ee02:	621a      	str	r2, [r3, #32]
 800ee04:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800ee08:	625a      	str	r2, [r3, #36]	; 0x24
 800ee0a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800ee0e:	629a      	str	r2, [r3, #40]	; 0x28
 800ee10:	2259      	movs	r2, #89	; 0x59
 800ee12:	615a      	str	r2, [r3, #20]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800ee18:	7b22      	ldrb	r2, [r4, #12]
 800ee1a:	7b63      	ldrb	r3, [r4, #13]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	d00a      	beq.n	800ee36 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	225c      	movs	r2, #92	; 0x5c
 800ee24:	2101      	movs	r1, #1
 800ee26:	4628      	mov	r0, r5
 800ee28:	615a      	str	r2, [r3, #20]
 800ee2a:	7b22      	ldrb	r2, [r4, #12]
 800ee2c:	619a      	str	r2, [r3, #24]
 800ee2e:	7b62      	ldrb	r2, [r4, #13]
 800ee30:	61da      	str	r2, [r3, #28]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ee36:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800ee38:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ee3a:	7b63      	ldrb	r3, [r4, #13]
 800ee3c:	fb12 f203 	smulbb	r2, r2, r3
 800ee40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800ee44:	42b2      	cmp	r2, r6
 800ee46:	d030      	beq.n	800eeaa <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800ee48:	682a      	ldr	r2, [r5, #0]
 800ee4a:	235a      	movs	r3, #90	; 0x5a
 800ee4c:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800ee50:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ee52:	4628      	mov	r0, r5
 800ee54:	2101      	movs	r1, #1
  }
}
 800ee56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ee5a:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800ee5c:	2a05      	cmp	r2, #5
 800ee5e:	d922      	bls.n	800eea6 <examine_app0+0x13a>
 800ee60:	7822      	ldrb	r2, [r4, #0]
 800ee62:	2a4a      	cmp	r2, #74	; 0x4a
 800ee64:	d11f      	bne.n	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800ee66:	7862      	ldrb	r2, [r4, #1]
 800ee68:	2a46      	cmp	r2, #70	; 0x46
 800ee6a:	d11c      	bne.n	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800ee6c:	78a2      	ldrb	r2, [r4, #2]
 800ee6e:	2a58      	cmp	r2, #88	; 0x58
 800ee70:	d119      	bne.n	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800ee72:	78e2      	ldrb	r2, [r4, #3]
 800ee74:	2a58      	cmp	r2, #88	; 0x58
 800ee76:	d116      	bne.n	800eea6 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800ee78:	7922      	ldrb	r2, [r4, #4]
 800ee7a:	b9a2      	cbnz	r2, 800eea6 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800ee7c:	7962      	ldrb	r2, [r4, #5]
 800ee7e:	2a11      	cmp	r2, #17
 800ee80:	d007      	beq.n	800ee92 <examine_app0+0x126>
 800ee82:	2a13      	cmp	r2, #19
 800ee84:	d007      	beq.n	800ee96 <examine_app0+0x12a>
 800ee86:	2a10      	cmp	r2, #16
 800ee88:	d107      	bne.n	800ee9a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800ee8a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ee8c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800ee90:	e7df      	b.n	800ee52 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800ee92:	226f      	movs	r2, #111	; 0x6f
 800ee94:	e7fa      	b.n	800ee8c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800ee96:	2270      	movs	r2, #112	; 0x70
 800ee98:	e7f8      	b.n	800ee8c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800ee9a:	225b      	movs	r2, #91	; 0x5b
 800ee9c:	614a      	str	r2, [r1, #20]
 800ee9e:	7962      	ldrb	r2, [r4, #5]
 800eea0:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800eea4:	e7d5      	b.n	800ee52 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800eea6:	224f      	movs	r2, #79	; 0x4f
 800eea8:	e7f0      	b.n	800ee8c <examine_app0+0x120>
}
 800eeaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eeae <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800eeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800eeb2:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800eeb4:	6804      	ldr	r4, [r0, #0]
{
 800eeb6:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800eeb8:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800eeba:	d92b      	bls.n	800ef14 <examine_app14+0x66>
 800eebc:	780f      	ldrb	r7, [r1, #0]
 800eebe:	2f41      	cmp	r7, #65	; 0x41
 800eec0:	d128      	bne.n	800ef14 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800eec2:	784f      	ldrb	r7, [r1, #1]
 800eec4:	2f64      	cmp	r7, #100	; 0x64
 800eec6:	d125      	bne.n	800ef14 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800eec8:	788f      	ldrb	r7, [r1, #2]
 800eeca:	2f6f      	cmp	r7, #111	; 0x6f
 800eecc:	d122      	bne.n	800ef14 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800eece:	78cf      	ldrb	r7, [r1, #3]
 800eed0:	2f62      	cmp	r7, #98	; 0x62
 800eed2:	d11f      	bne.n	800ef14 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800eed4:	790f      	ldrb	r7, [r1, #4]
 800eed6:	2f65      	cmp	r7, #101	; 0x65
 800eed8:	d11c      	bne.n	800ef14 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800eeda:	79cb      	ldrb	r3, [r1, #7]
 800eedc:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800eede:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800eee0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800eee4:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800eee6:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800eeea:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800eeee:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800eef0:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800eef2:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800eef6:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800eefa:	234e      	movs	r3, #78	; 0x4e
 800eefc:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800ef00:	6163      	str	r3, [r4, #20]
 800ef02:	2101      	movs	r1, #1
 800ef04:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800ef06:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800ef08:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800ef0c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ef14:	2150      	movs	r1, #80	; 0x50
 800ef16:	4413      	add	r3, r2
 800ef18:	4628      	mov	r0, r5
 800ef1a:	6161      	str	r1, [r4, #20]
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	61a3      	str	r3, [r4, #24]
 800ef20:	4633      	mov	r3, r6
}
 800ef22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ef26:	4718      	bx	r3

0800ef28 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800ef28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800ef2c:	6986      	ldr	r6, [r0, #24]
{
 800ef2e:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800ef30:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef32:	b39f      	cbz	r7, 800ef9c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800ef34:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef36:	7825      	ldrb	r5, [r4, #0]
 800ef38:	3f01      	subs	r7, #1
 800ef3a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800ef3e:	d037      	beq.n	800efb0 <get_interesting_appn+0x88>
 800ef40:	3401      	adds	r4, #1
 800ef42:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ef46:	3f01      	subs	r7, #1
 800ef48:	444d      	add	r5, r9
  length -= 2;
 800ef4a:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800ef4c:	2d0d      	cmp	r5, #13
 800ef4e:	dc37      	bgt.n	800efc0 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800ef50:	2d00      	cmp	r5, #0
 800ef52:	dd38      	ble.n	800efc6 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800ef54:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800ef56:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ef5a:	b92f      	cbnz	r7, 800ef68 <get_interesting_appn+0x40>
 800ef5c:	68f3      	ldr	r3, [r6, #12]
 800ef5e:	4640      	mov	r0, r8
 800ef60:	4798      	blx	r3
 800ef62:	b1f0      	cbz	r0, 800efa2 <get_interesting_appn+0x7a>
 800ef64:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ef68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef6c:	3f01      	subs	r7, #1
 800ef6e:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800ef72:	f10a 0a01 	add.w	sl, sl, #1
 800ef76:	45d1      	cmp	r9, sl
 800ef78:	d1ef      	bne.n	800ef5a <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800ef7a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800ef7e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800ef82:	2ae0      	cmp	r2, #224	; 0xe0
 800ef84:	d022      	beq.n	800efcc <get_interesting_appn+0xa4>
 800ef86:	2aee      	cmp	r2, #238	; 0xee
 800ef88:	d032      	beq.n	800eff0 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ef8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef8e:	2146      	movs	r1, #70	; 0x46
 800ef90:	4640      	mov	r0, r8
 800ef92:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4798      	blx	r3
    break;
 800ef9a:	e01d      	b.n	800efd8 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ef9c:	68f3      	ldr	r3, [r6, #12]
 800ef9e:	4798      	blx	r3
 800efa0:	b918      	cbnz	r0, 800efaa <get_interesting_appn+0x82>
 800efa2:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800efa4:	b004      	add	sp, #16
 800efa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800efaa:	e9d6 4700 	ldrd	r4, r7, [r6]
 800efae:	e7c2      	b.n	800ef36 <get_interesting_appn+0xe>
 800efb0:	68f3      	ldr	r3, [r6, #12]
 800efb2:	4640      	mov	r0, r8
 800efb4:	4798      	blx	r3
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d0f3      	beq.n	800efa2 <get_interesting_appn+0x7a>
 800efba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800efbe:	e7c0      	b.n	800ef42 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800efc0:	f04f 090e 	mov.w	r9, #14
 800efc4:	e7c7      	b.n	800ef56 <get_interesting_appn+0x2e>
    numtoread = 0;
 800efc6:	f04f 0900 	mov.w	r9, #0
 800efca:	e7d6      	b.n	800ef7a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800efcc:	462b      	mov	r3, r5
 800efce:	464a      	mov	r2, r9
 800efd0:	4669      	mov	r1, sp
 800efd2:	4640      	mov	r0, r8
 800efd4:	f7ff feca 	bl	800ed6c <examine_app0>
  if (length > 0)
 800efd8:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800efda:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800efde:	dd05      	ble.n	800efec <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800efe0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800efe4:	4629      	mov	r1, r5
 800efe6:	4640      	mov	r0, r8
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	4798      	blx	r3
  return TRUE;
 800efec:	2001      	movs	r0, #1
 800efee:	e7d9      	b.n	800efa4 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800eff0:	462b      	mov	r3, r5
 800eff2:	464a      	mov	r2, r9
 800eff4:	4669      	mov	r1, sp
 800eff6:	4640      	mov	r0, r8
 800eff8:	f7ff ff59 	bl	800eeae <examine_app14>
    break;
 800effc:	e7ec      	b.n	800efd8 <get_interesting_appn+0xb0>

0800effe <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800effe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800f002:	6984      	ldr	r4, [r0, #24]
{
 800f004:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800f006:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f008:	b31b      	cbz	r3, 800f052 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800f00a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f00c:	782e      	ldrb	r6, [r5, #0]
 800f00e:	f1b3 0801 	subs.w	r8, r3, #1
 800f012:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800f016:	d025      	beq.n	800f064 <skip_variable+0x66>
 800f018:	3501      	adds	r5, #1
 800f01a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f01e:	235d      	movs	r3, #93	; 0x5d
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f024:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f026:	4638      	mov	r0, r7
 800f028:	6153      	str	r3, [r2, #20]
  length -= 2;
 800f02a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f02c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800f030:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800f034:	6853      	ldr	r3, [r2, #4]
 800f036:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f038:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800f03c:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800f03e:	6025      	str	r5, [r4, #0]
 800f040:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800f042:	dd04      	ble.n	800f04e <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	4631      	mov	r1, r6
 800f048:	4638      	mov	r0, r7
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	4798      	blx	r3

  return TRUE;
 800f04e:	2001      	movs	r0, #1
 800f050:	e003      	b.n	800f05a <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f052:	68e3      	ldr	r3, [r4, #12]
 800f054:	4798      	blx	r3
 800f056:	b910      	cbnz	r0, 800f05e <skip_variable+0x60>
 800f058:	2000      	movs	r0, #0
}
 800f05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f05e:	e9d4 5300 	ldrd	r5, r3, [r4]
 800f062:	e7d3      	b.n	800f00c <skip_variable+0xe>
 800f064:	68e3      	ldr	r3, [r4, #12]
 800f066:	4638      	mov	r0, r7
 800f068:	4798      	blx	r3
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d0f4      	beq.n	800f058 <skip_variable+0x5a>
 800f06e:	e9d4 5800 	ldrd	r5, r8, [r4]
 800f072:	e7d2      	b.n	800f01a <skip_variable+0x1c>

0800f074 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800f078:	6986      	ldr	r6, [r0, #24]
{
 800f07a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800f07c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800f080:	b987      	cbnz	r7, 800f0a4 <next_marker+0x30>
 800f082:	68f3      	ldr	r3, [r6, #12]
 800f084:	4640      	mov	r0, r8
 800f086:	4798      	blx	r3
 800f088:	b950      	cbnz	r0, 800f0a0 <next_marker+0x2c>
 800f08a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800f090:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800f094:	6993      	ldr	r3, [r2, #24]
 800f096:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800f098:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800f09a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f09e:	e7ef      	b.n	800f080 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f0a0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f0a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f0a8:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800f0aa:	2bff      	cmp	r3, #255	; 0xff
 800f0ac:	d1f0      	bne.n	800f090 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f0ae:	b937      	cbnz	r7, 800f0be <next_marker+0x4a>
 800f0b0:	68f3      	ldr	r3, [r6, #12]
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	4798      	blx	r3
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d0e7      	beq.n	800f08a <next_marker+0x16>
 800f0ba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f0be:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f0c2:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800f0c4:	2dff      	cmp	r5, #255	; 0xff
 800f0c6:	d0f2      	beq.n	800f0ae <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800f0c8:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800f0cc:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800f0ce:	b90d      	cbnz	r5, 800f0d4 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	e7e1      	b.n	800f098 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800f0d4:	b173      	cbz	r3, 800f0f4 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800f0d6:	f8d8 2000 	ldr.w	r2, [r8]
 800f0da:	2177      	movs	r1, #119	; 0x77
 800f0dc:	4640      	mov	r0, r8
 800f0de:	61d5      	str	r5, [r2, #28]
 800f0e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f0e4:	6853      	ldr	r3, [r2, #4]
 800f0e6:	f04f 31ff 	mov.w	r1, #4294967295
 800f0ea:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800f0ec:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800f0f4:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800f0f8:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f0fa:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800f0fe:	e7c5      	b.n	800f08c <next_marker+0x18>

0800f100 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800f100:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800f104:	b510      	push	{r4, lr}
 800f106:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800f108:	b1e3      	cbz	r3, 800f144 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800f10a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800f10e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800f112:	6959      	ldr	r1, [r3, #20]
 800f114:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800f118:	429a      	cmp	r2, r3
 800f11a:	d119      	bne.n	800f150 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	2264      	movs	r2, #100	; 0x64
 800f120:	4620      	mov	r0, r4
 800f122:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	2103      	movs	r1, #3
 800f12a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800f132:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800f136:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800f138:	6953      	ldr	r3, [r2, #20]
 800f13a:	3301      	adds	r3, #1
 800f13c:	f003 0307 	and.w	r3, r3, #7
 800f140:	6153      	str	r3, [r2, #20]
  return TRUE;
 800f142:	e004      	b.n	800f14e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800f144:	f7ff ff96 	bl	800f074 <next_marker>
 800f148:	2800      	cmp	r0, #0
 800f14a:	d1de      	bne.n	800f10a <read_restart_marker+0xa>
      return FALSE;
 800f14c:	2000      	movs	r0, #0
}
 800f14e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800f150:	69a3      	ldr	r3, [r4, #24]
 800f152:	4620      	mov	r0, r4
 800f154:	695b      	ldr	r3, [r3, #20]
 800f156:	4798      	blx	r3
 800f158:	2800      	cmp	r0, #0
 800f15a:	d1ea      	bne.n	800f132 <read_restart_marker+0x32>
 800f15c:	e7f6      	b.n	800f14c <read_restart_marker+0x4c>

0800f15e <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800f15e:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800f160:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800f164:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800f168:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800f16c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800f170:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800f172:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800f176:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800f17a:	4770      	bx	lr

0800f17c <get_dht>:
{
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800f180:	6987      	ldr	r7, [r0, #24]
{
 800f182:	b0c9      	sub	sp, #292	; 0x124
 800f184:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800f186:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f188:	b1fe      	cbz	r6, 800f1ca <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800f18a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f18c:	f894 9000 	ldrb.w	r9, [r4]
 800f190:	3e01      	subs	r6, #1
 800f192:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800f196:	d022      	beq.n	800f1de <get_dht+0x62>
 800f198:	3401      	adds	r4, #1
 800f19a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800f19e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800f1a0:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f1a4:	44c1      	add	r9, r8
  length -= 2;
 800f1a6:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800f1aa:	f1b9 0f10 	cmp.w	r9, #16
 800f1ae:	dc1e      	bgt.n	800f1ee <get_dht+0x72>
  if (length != 0)
 800f1b0:	f1b9 0f00 	cmp.w	r9, #0
 800f1b4:	d005      	beq.n	800f1c2 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f1b6:	682b      	ldr	r3, [r5, #0]
 800f1b8:	220c      	movs	r2, #12
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	615a      	str	r2, [r3, #20]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4798      	blx	r3
  return TRUE;
 800f1c2:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f1c4:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800f1c8:	e003      	b.n	800f1d2 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	4798      	blx	r3
 800f1ce:	b918      	cbnz	r0, 800f1d8 <get_dht+0x5c>
 800f1d0:	2000      	movs	r0, #0
}
 800f1d2:	b049      	add	sp, #292	; 0x124
 800f1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f1d8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f1dc:	e7d6      	b.n	800f18c <get_dht+0x10>
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	4798      	blx	r3
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d0f3      	beq.n	800f1d0 <get_dht+0x54>
 800f1e8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f1ec:	e7d5      	b.n	800f19a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f1ee:	b936      	cbnz	r6, 800f1fe <get_dht+0x82>
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	4790      	blx	r2
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d0ea      	beq.n	800f1d0 <get_dht+0x54>
 800f1fa:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f1fe:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800f202:	2152      	movs	r1, #82	; 0x52
 800f204:	682a      	ldr	r2, [r5, #0]
 800f206:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800f208:	f8cd 8000 	str.w	r8, [sp]
 800f20c:	3e01      	subs	r6, #1
    count = 0;
 800f20e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800f212:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800f216:	6852      	ldr	r2, [r2, #4]
 800f218:	2101      	movs	r1, #1
 800f21a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800f21c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800f21e:	b946      	cbnz	r6, 800f232 <get_dht+0xb6>
 800f220:	68f9      	ldr	r1, [r7, #12]
 800f222:	4628      	mov	r0, r5
 800f224:	9201      	str	r2, [sp, #4]
 800f226:	4788      	blx	r1
 800f228:	2800      	cmp	r0, #0
 800f22a:	d0d1      	beq.n	800f1d0 <get_dht+0x54>
 800f22c:	9a01      	ldr	r2, [sp, #4]
 800f22e:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f236:	3e01      	subs	r6, #1
 800f238:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800f23c:	3201      	adds	r2, #1
      count += bits[i];
 800f23e:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800f240:	2a11      	cmp	r2, #17
 800f242:	d1ec      	bne.n	800f21e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f244:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800f246:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f24a:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800f24e:	f04f 0958 	mov.w	r9, #88	; 0x58
 800f252:	4628      	mov	r0, r5
    length -= 1 + 16;
 800f254:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f256:	6191      	str	r1, [r2, #24]
 800f258:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800f25c:	f8c2 9014 	str.w	r9, [r2, #20]
 800f260:	61d1      	str	r1, [r2, #28]
 800f262:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800f266:	6211      	str	r1, [r2, #32]
 800f268:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800f26c:	6251      	str	r1, [r2, #36]	; 0x24
 800f26e:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800f272:	6291      	str	r1, [r2, #40]	; 0x28
 800f274:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800f278:	62d1      	str	r1, [r2, #44]	; 0x2c
 800f27a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800f27e:	6311      	str	r1, [r2, #48]	; 0x30
 800f280:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800f284:	6351      	str	r1, [r2, #52]	; 0x34
 800f286:	2102      	movs	r1, #2
 800f288:	6852      	ldr	r2, [r2, #4]
 800f28a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800f28c:	682a      	ldr	r2, [r5, #0]
 800f28e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800f292:	4628      	mov	r0, r5
 800f294:	f8c2 9014 	str.w	r9, [r2, #20]
 800f298:	6191      	str	r1, [r2, #24]
 800f29a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800f29e:	61d1      	str	r1, [r2, #28]
 800f2a0:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800f2a4:	6211      	str	r1, [r2, #32]
 800f2a6:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800f2aa:	6251      	str	r1, [r2, #36]	; 0x24
 800f2ac:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800f2b0:	6291      	str	r1, [r2, #40]	; 0x28
 800f2b2:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800f2b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800f2b8:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800f2bc:	6311      	str	r1, [r2, #48]	; 0x30
 800f2be:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800f2c2:	6351      	str	r1, [r2, #52]	; 0x34
 800f2c4:	2102      	movs	r1, #2
 800f2c6:	6852      	ldr	r2, [r2, #4]
 800f2c8:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800f2ca:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800f2ce:	dc02      	bgt.n	800f2d6 <get_dht+0x15a>
 800f2d0:	9b01      	ldr	r3, [sp, #4]
 800f2d2:	4553      	cmp	r3, sl
 800f2d4:	da05      	bge.n	800f2e2 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800f2d6:	682a      	ldr	r2, [r5, #0]
 800f2d8:	2109      	movs	r1, #9
 800f2da:	4628      	mov	r0, r5
 800f2dc:	6151      	str	r1, [r2, #20]
 800f2de:	6812      	ldr	r2, [r2, #0]
 800f2e0:	4790      	blx	r2
 800f2e2:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f2e6:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800f2e8:	45d1      	cmp	r9, sl
 800f2ea:	d13f      	bne.n	800f36c <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800f2ec:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800f2f0:	9b01      	ldr	r3, [sp, #4]
 800f2f2:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800f2f6:	bf17      	itett	ne
 800f2f8:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f2fc:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800f300:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800f304:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f306:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800f308:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d906      	bls.n	800f31e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800f310:	682a      	ldr	r2, [r5, #0]
 800f312:	211f      	movs	r1, #31
 800f314:	4628      	mov	r0, r5
 800f316:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f31a:	6812      	ldr	r2, [r2, #0]
 800f31c:	4790      	blx	r2
    if (*htblptr == NULL)
 800f31e:	f8d8 2000 	ldr.w	r2, [r8]
 800f322:	b922      	cbnz	r2, 800f32e <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800f324:	4628      	mov	r0, r5
 800f326:	f7fb fb8b 	bl	800aa40 <jpeg_alloc_huff_table>
 800f32a:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800f32e:	2200      	movs	r2, #0
 800f330:	46de      	mov	lr, fp
 800f332:	f10d 0a1c 	add.w	sl, sp, #28
 800f336:	f88b 2000 	strb.w	r2, [fp]
 800f33a:	f8d8 2000 	ldr.w	r2, [r8]
 800f33e:	46f4      	mov	ip, lr
 800f340:	3208      	adds	r2, #8
 800f342:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800f346:	45d4      	cmp	ip, sl
 800f348:	f842 0c08 	str.w	r0, [r2, #-8]
 800f34c:	f842 1c04 	str.w	r1, [r2, #-4]
 800f350:	46e6      	mov	lr, ip
 800f352:	d1f4      	bne.n	800f33e <get_dht+0x1c2>
 800f354:	f89c 1000 	ldrb.w	r1, [ip]
 800f358:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800f35a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f35e:	f8d8 0000 	ldr.w	r0, [r8]
 800f362:	a908      	add	r1, sp, #32
 800f364:	3011      	adds	r0, #17
 800f366:	f01b fbd3 	bl	802ab10 <memcpy>
 800f36a:	e71e      	b.n	800f1aa <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800f36c:	b946      	cbnz	r6, 800f380 <get_dht+0x204>
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	4628      	mov	r0, r5
 800f372:	4790      	blx	r2
 800f374:	2800      	cmp	r0, #0
 800f376:	f43f af2b 	beq.w	800f1d0 <get_dht+0x54>
 800f37a:	a908      	add	r1, sp, #32
 800f37c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800f380:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f384:	3e01      	subs	r6, #1
 800f386:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800f38a:	f109 0901 	add.w	r9, r9, #1
 800f38e:	e7ab      	b.n	800f2e8 <get_dht+0x16c>

0800f390 <read_markers>:
{
 800f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	4604      	mov	r4, r0
 800f396:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800f398:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800f39c:	bb2b      	cbnz	r3, 800f3ea <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800f39e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d17c      	bne.n	800f4a2 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800f3a8:	69a7      	ldr	r7, [r4, #24]
 800f3aa:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d06a      	beq.n	800f486 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800f3b0:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f3b2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3b4:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f3b8:	d06c      	beq.n	800f494 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f3ba:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f3bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f3c0:	f103 36ff 	add.w	r6, r3, #4294967295
 800f3c4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800f3c8:	d102      	bne.n	800f3d0 <read_markers+0x40>
 800f3ca:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800f3ce:	d008      	beq.n	800f3e2 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	2237      	movs	r2, #55	; 0x37
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f8c3 901c 	str.w	r9, [r3, #28]
 800f3da:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800f3e2:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800f3e6:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800f3ea:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	f000 83c3 	beq.w	800fb7a <read_markers+0x7ea>
 800f3f4:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800f3f8:	2a3e      	cmp	r2, #62	; 0x3e
 800f3fa:	f200 83cb 	bhi.w	800fb94 <read_markers+0x804>
 800f3fe:	2a3e      	cmp	r2, #62	; 0x3e
 800f400:	f200 83c8 	bhi.w	800fb94 <read_markers+0x804>
 800f404:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f408:	009b0092 	.word	0x009b0092
 800f40c:	00a7009e 	.word	0x00a7009e
 800f410:	00a70239 	.word	0x00a70239
 800f414:	00a700a7 	.word	0x00a700a7
 800f418:	00a200a7 	.word	0x00a200a7
 800f41c:	00a700a4 	.word	0x00a700a4
 800f420:	00a701bf 	.word	0x00a701bf
 800f424:	00a700a7 	.word	0x00a700a7
 800f428:	03b903b9 	.word	0x03b903b9
 800f42c:	03b903b9 	.word	0x03b903b9
 800f430:	03b903b9 	.word	0x03b903b9
 800f434:	03b903b9 	.word	0x03b903b9
 800f438:	01b30054 	.word	0x01b30054
 800f43c:	023d00af 	.word	0x023d00af
 800f440:	035b03c2 	.word	0x035b03c2
 800f444:	03c603c6 	.word	0x03c603c6
 800f448:	03ad03ad 	.word	0x03ad03ad
 800f44c:	03ad03ad 	.word	0x03ad03ad
 800f450:	03ad03ad 	.word	0x03ad03ad
 800f454:	03ad03ad 	.word	0x03ad03ad
 800f458:	03ad03ad 	.word	0x03ad03ad
 800f45c:	03ad03ad 	.word	0x03ad03ad
 800f460:	03ad03ad 	.word	0x03ad03ad
 800f464:	03ad03ad 	.word	0x03ad03ad
 800f468:	03c603c6 	.word	0x03c603c6
 800f46c:	03c603c6 	.word	0x03c603c6
 800f470:	03c603c6 	.word	0x03c603c6
 800f474:	03c603c6 	.word	0x03c603c6
 800f478:	03c603c6 	.word	0x03c603c6
 800f47c:	03c603c6 	.word	0x03c603c6
 800f480:	03c603c6 	.word	0x03c603c6
 800f484:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4620      	mov	r0, r4
 800f48a:	4798      	blx	r3
 800f48c:	b170      	cbz	r0, 800f4ac <read_markers+0x11c>
 800f48e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800f492:	e78e      	b.n	800f3b2 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	4620      	mov	r0, r4
 800f498:	4798      	blx	r3
 800f49a:	b138      	cbz	r0, 800f4ac <read_markers+0x11c>
 800f49c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800f4a0:	e78c      	b.n	800f3bc <read_markers+0x2c>
	if (! next_marker(cinfo))
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f7ff fde6 	bl	800f074 <next_marker>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d19e      	bne.n	800f3ea <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	e0e9      	b.n	800f684 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	2268      	movs	r2, #104	; 0x68
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	615a      	str	r2, [r3, #20]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800f4be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	b12b      	cbz	r3, 800f4d2 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	223f      	movs	r2, #63	; 0x3f
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	615a      	str	r2, [r3, #20]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800f4d2:	2210      	movs	r2, #16
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800f4da:	f01b fb27 	bl	802ab2c <memset>
    cinfo->arith_dc_U[i] = 1;
 800f4de:	2210      	movs	r2, #16
 800f4e0:	2101      	movs	r1, #1
 800f4e2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800f4e6:	f01b fb21 	bl	802ab2c <memset>
    cinfo->arith_ac_K[i] = 5;
 800f4ea:	2210      	movs	r2, #16
 800f4ec:	2105      	movs	r1, #5
 800f4ee:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800f4f2:	f01b fb1b 	bl	802ab2c <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f4f6:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f4fa:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800f4fc:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800f500:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800f504:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800f508:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800f50c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800f510:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800f514:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800f518:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800f51c:	2201      	movs	r2, #1
 800f51e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f522:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800f52a:	e735      	b.n	800f398 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800f52c:	2300      	movs	r3, #0
 800f52e:	2101      	movs	r1, #1
 800f530:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f532:	4620      	mov	r0, r4
 800f534:	f7ff faec 	bl	800eb10 <get_sof>
      if (! skip_variable(cinfo))
 800f538:	2800      	cmp	r0, #0
 800f53a:	d1f3      	bne.n	800f524 <read_markers+0x194>
 800f53c:	e7b6      	b.n	800f4ac <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800f53e:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f540:	2200      	movs	r2, #0
 800f542:	e001      	b.n	800f548 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800f544:	2300      	movs	r3, #0
 800f546:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f548:	2100      	movs	r1, #0
 800f54a:	e7f2      	b.n	800f532 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f54c:	2301      	movs	r3, #1
 800f54e:	e7f7      	b.n	800f540 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f550:	2301      	movs	r3, #1
 800f552:	461a      	mov	r2, r3
 800f554:	e7f8      	b.n	800f548 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800f556:	6822      	ldr	r2, [r4, #0]
 800f558:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f55a:	4620      	mov	r0, r4
 800f55c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f560:	6813      	ldr	r3, [r2, #0]
 800f562:	4798      	blx	r3
      break;
 800f564:	e7de      	b.n	800f524 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800f566:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800f56a:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800f56c:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800f56e:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800f572:	b92b      	cbnz	r3, 800f580 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	2240      	movs	r2, #64	; 0x40
 800f578:	4620      	mov	r0, r4
 800f57a:	615a      	str	r2, [r3, #20]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f580:	b936      	cbnz	r6, 800f590 <read_markers+0x200>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	4620      	mov	r0, r4
 800f586:	4798      	blx	r3
 800f588:	2800      	cmp	r0, #0
 800f58a:	d08f      	beq.n	800f4ac <read_markers+0x11c>
 800f58c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f590:	f895 8000 	ldrb.w	r8, [r5]
 800f594:	3e01      	subs	r6, #1
 800f596:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800f59a:	d076      	beq.n	800f68a <read_markers+0x2fa>
 800f59c:	3501      	adds	r5, #1
 800f59e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f5a0:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f5a2:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f5a4:	d07a      	beq.n	800f69c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f5a6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f5a8:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f5ac:	2269      	movs	r2, #105	; 0x69
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	2101      	movs	r1, #1
 800f5b2:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f5b4:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800f5b6:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800f5be:	f109 0303 	add.w	r3, r9, #3
 800f5c2:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800f5c6:	d108      	bne.n	800f5da <read_markers+0x24a>
 800f5c8:	f1b9 0f04 	cmp.w	r9, #4
 800f5cc:	dc05      	bgt.n	800f5da <read_markers+0x24a>
 800f5ce:	f1b9 0f00 	cmp.w	r9, #0
 800f5d2:	d108      	bne.n	800f5e6 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800f5d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800f5d8:	b92b      	cbnz	r3, 800f5e6 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	220c      	movs	r2, #12
 800f5de:	4620      	mov	r0, r4
 800f5e0:	615a      	str	r2, [r3, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800f5e6:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800f5ea:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800f5ee:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	45d1      	cmp	r9, sl
 800f5f6:	dc5a      	bgt.n	800f6ae <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f5f8:	b93e      	cbnz	r6, 800f60a <read_markers+0x27a>
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4798      	blx	r3
 800f600:	2800      	cmp	r0, #0
 800f602:	f43f af53 	beq.w	800f4ac <read_markers+0x11c>
 800f606:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f60a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f60c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f60e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800f612:	f000 809a 	beq.w	800f74a <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f616:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f618:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800f61a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f61c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800f620:	f000 809c 	beq.w	800f75c <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f624:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800f626:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f62a:	2101      	movs	r1, #1
 800f62c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800f62e:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800f630:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800f632:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800f636:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800f63a:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800f63e:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	619a      	str	r2, [r3, #24]
 800f646:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800f64a:	61da      	str	r2, [r3, #28]
 800f64c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800f650:	621a      	str	r2, [r3, #32]
 800f652:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800f656:	625a      	str	r2, [r3, #36]	; 0x24
 800f658:	226b      	movs	r2, #107	; 0x6b
 800f65a:	615a      	str	r2, [r3, #20]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800f660:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f664:	2200      	movs	r2, #0
 800f666:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800f668:	f1b9 0f00 	cmp.w	r9, #0
 800f66c:	d004      	beq.n	800f678 <read_markers+0x2e8>
 800f66e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f672:	3301      	adds	r3, #1
 800f674:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800f678:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800f67a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800f67c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800f680:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800f684:	b005      	add	sp, #20
 800f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4620      	mov	r0, r4
 800f68e:	4798      	blx	r3
 800f690:	2800      	cmp	r0, #0
 800f692:	f43f af0b 	beq.w	800f4ac <read_markers+0x11c>
 800f696:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f69a:	e780      	b.n	800f59e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	4798      	blx	r3
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f43f af02 	beq.w	800f4ac <read_markers+0x11c>
 800f6a8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f6ac:	e77c      	b.n	800f5a8 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f6ae:	b93e      	cbnz	r6, 800f6c0 <read_markers+0x330>
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	4798      	blx	r3
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f43f aef8 	beq.w	800f4ac <read_markers+0x11c>
 800f6bc:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f6c0:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f6c2:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f6c6:	d02f      	beq.n	800f728 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800f6c8:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800f6ca:	3e01      	subs	r6, #1
 800f6cc:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f6d0:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f6d8:	4290      	cmp	r0, r2
 800f6da:	db2e      	blt.n	800f73a <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800f6dc:	6821      	ldr	r1, [r4, #0]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	9302      	str	r3, [sp, #8]
 800f6e2:	2304      	movs	r3, #4
 800f6e4:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800f6e8:	6809      	ldr	r1, [r1, #0]
 800f6ea:	4788      	blx	r1
 800f6ec:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800f6ee:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f6f0:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800f6f2:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f6f6:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800f6f8:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800f6fc:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800f700:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f704:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800f706:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f70a:	f8c1 b018 	str.w	fp, [r1, #24]
 800f70e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800f712:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800f714:	61cb      	str	r3, [r1, #28]
 800f716:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f71a:	620b      	str	r3, [r1, #32]
 800f71c:	236a      	movs	r3, #106	; 0x6a
 800f71e:	614b      	str	r3, [r1, #20]
 800f720:	684b      	ldr	r3, [r1, #4]
 800f722:	2101      	movs	r1, #1
 800f724:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800f726:	e765      	b.n	800f5f4 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	4620      	mov	r0, r4
 800f72c:	4798      	blx	r3
 800f72e:	2800      	cmp	r0, #0
 800f730:	f43f aebc 	beq.w	800f4ac <read_markers+0x11c>
 800f734:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f738:	e7c7      	b.n	800f6ca <read_markers+0x33a>
      if (cc == compptr->component_id)
 800f73a:	f8d8 1000 	ldr.w	r1, [r8]
 800f73e:	458b      	cmp	fp, r1
 800f740:	d0d5      	beq.n	800f6ee <read_markers+0x35e>
	 ci++, compptr++) {
 800f742:	3001      	adds	r0, #1
 800f744:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800f748:	e7c6      	b.n	800f6d8 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	4620      	mov	r0, r4
 800f74e:	4798      	blx	r3
 800f750:	2800      	cmp	r0, #0
 800f752:	f43f aeab 	beq.w	800f4ac <read_markers+0x11c>
 800f756:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f75a:	e75d      	b.n	800f618 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4620      	mov	r0, r4
 800f760:	4798      	blx	r3
 800f762:	2800      	cmp	r0, #0
 800f764:	f43f aea2 	beq.w	800f4ac <read_markers+0x11c>
 800f768:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f76c:	e75b      	b.n	800f626 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	2257      	movs	r2, #87	; 0x57
 800f772:	4620      	mov	r0, r4
 800f774:	2101      	movs	r1, #1
 800f776:	615a      	str	r2, [r3, #20]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800f77c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800f77e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800f780:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800f784:	e77e      	b.n	800f684 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800f786:	69a7      	ldr	r7, [r4, #24]
 800f788:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f78a:	b1e6      	cbz	r6, 800f7c6 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800f78c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f78e:	f895 9000 	ldrb.w	r9, [r5]
 800f792:	3e01      	subs	r6, #1
 800f794:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800f798:	d01e      	beq.n	800f7d8 <read_markers+0x448>
 800f79a:	3501      	adds	r5, #1
 800f79c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f7a0:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800f7a2:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f7a6:	4499      	add	r9, r3
  length -= 2;
 800f7a8:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800f7ac:	f1b9 0f00 	cmp.w	r9, #0
 800f7b0:	dc1b      	bgt.n	800f7ea <read_markers+0x45a>
  if (length != 0)
 800f7b2:	d005      	beq.n	800f7c0 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	220c      	movs	r2, #12
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	615a      	str	r2, [r3, #20]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800f7c0:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800f7c2:	607e      	str	r6, [r7, #4]
  return TRUE;
 800f7c4:	e6ae      	b.n	800f524 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	4798      	blx	r3
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	f43f ae6d 	beq.w	800f4ac <read_markers+0x11c>
 800f7d2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f7d6:	e7da      	b.n	800f78e <read_markers+0x3fe>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4620      	mov	r0, r4
 800f7dc:	4798      	blx	r3
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f ae64 	beq.w	800f4ac <read_markers+0x11c>
 800f7e4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f7e8:	e7d8      	b.n	800f79c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f7ea:	b93e      	cbnz	r6, 800f7fc <read_markers+0x46c>
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	4798      	blx	r3
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	f43f ae5a 	beq.w	800f4ac <read_markers+0x11c>
 800f7f8:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800f7fc:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800f7fe:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800f802:	d01f      	beq.n	800f844 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800f804:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f806:	6822      	ldr	r2, [r4, #0]
 800f808:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800f80a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f80e:	2101      	movs	r1, #1
 800f810:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800f812:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f814:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800f818:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800f81c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800f820:	6852      	ldr	r2, [r2, #4]
 800f822:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800f824:	f1b8 0f1f 	cmp.w	r8, #31
 800f828:	d905      	bls.n	800f836 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800f82a:	6822      	ldr	r2, [r4, #0]
 800f82c:	4620      	mov	r0, r4
 800f82e:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800f832:	6812      	ldr	r2, [r2, #0]
 800f834:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800f836:	f1b8 0f0f 	cmp.w	r8, #15
 800f83a:	44a0      	add	r8, r4
 800f83c:	dd0b      	ble.n	800f856 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800f83e:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800f842:	e7b3      	b.n	800f7ac <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4620      	mov	r0, r4
 800f848:	4798      	blx	r3
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f43f ae2e 	beq.w	800f4ac <read_markers+0x11c>
 800f850:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f854:	e7d7      	b.n	800f806 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800f856:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800f85a:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800f85e:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800f860:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800f864:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800f868:	d9a0      	bls.n	800f7ac <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800f86a:	6822      	ldr	r2, [r4, #0]
 800f86c:	211e      	movs	r1, #30
 800f86e:	4620      	mov	r0, r4
 800f870:	6813      	ldr	r3, [r2, #0]
 800f872:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800f876:	4798      	blx	r3
 800f878:	e798      	b.n	800f7ac <read_markers+0x41c>
      if (! get_dht(cinfo))
 800f87a:	4620      	mov	r0, r4
 800f87c:	f7ff fc7e 	bl	800f17c <get_dht>
 800f880:	e65a      	b.n	800f538 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800f882:	69a6      	ldr	r6, [r4, #24]
 800f884:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f886:	b1db      	cbz	r3, 800f8c0 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800f888:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f88a:	f895 8000 	ldrb.w	r8, [r5]
 800f88e:	3b01      	subs	r3, #1
 800f890:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800f894:	d01d      	beq.n	800f8d2 <read_markers+0x542>
 800f896:	3501      	adds	r5, #1
 800f898:	f815 8b01 	ldrb.w	r8, [r5], #1
 800f89c:	f103 3aff 	add.w	sl, r3, #4294967295
 800f8a0:	44b8      	add	r8, r7
  length -= 2;
 800f8a2:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800f8a6:	f1b8 0f00 	cmp.w	r8, #0
 800f8aa:	dc1b      	bgt.n	800f8e4 <read_markers+0x554>
  if (length != 0)
 800f8ac:	d005      	beq.n	800f8ba <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f8ae:	6822      	ldr	r2, [r4, #0]
 800f8b0:	210c      	movs	r1, #12
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	6151      	str	r1, [r2, #20]
 800f8b6:	6812      	ldr	r2, [r2, #0]
 800f8b8:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800f8ba:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800f8be:	e631      	b.n	800f524 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f8c0:	68f3      	ldr	r3, [r6, #12]
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4798      	blx	r3
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f43f adf0 	beq.w	800f4ac <read_markers+0x11c>
 800f8cc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f8d0:	e7db      	b.n	800f88a <read_markers+0x4fa>
 800f8d2:	68f3      	ldr	r3, [r6, #12]
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4798      	blx	r3
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f43f ade7 	beq.w	800f4ac <read_markers+0x11c>
 800f8de:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f8e2:	e7d9      	b.n	800f898 <read_markers+0x508>
    length--;
 800f8e4:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800f8e8:	f1ba 0f00 	cmp.w	sl, #0
 800f8ec:	d107      	bne.n	800f8fe <read_markers+0x56e>
 800f8ee:	68f3      	ldr	r3, [r6, #12]
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4798      	blx	r3
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	f43f add9 	beq.w	800f4ac <read_markers+0x11c>
 800f8fa:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800f8fe:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800f902:	2153      	movs	r1, #83	; 0x53
 800f904:	6822      	ldr	r2, [r4, #0]
 800f906:	4620      	mov	r0, r4
    prec = n >> 4;
 800f908:	ea4f 1329 	mov.w	r3, r9, asr #4
 800f90c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800f910:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800f914:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800f916:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800f918:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800f91c:	6852      	ldr	r2, [r2, #4]
 800f91e:	2101      	movs	r1, #1
 800f920:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800f922:	f019 0f0c 	tst.w	r9, #12
 800f926:	d006      	beq.n	800f936 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800f928:	6822      	ldr	r2, [r4, #0]
 800f92a:	2120      	movs	r1, #32
 800f92c:	4620      	mov	r0, r4
 800f92e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800f932:	6812      	ldr	r2, [r2, #0]
 800f934:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800f936:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f93a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f93e:	b922      	cbnz	r2, 800f94a <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800f940:	4620      	mov	r0, r4
 800f942:	f7fb f873 	bl	800aa2c <jpeg_alloc_quant_table>
 800f946:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800f94a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800f94c:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800f950:	2b00      	cmp	r3, #0
 800f952:	d057      	beq.n	800fa04 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800f954:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800f958:	dc6c      	bgt.n	800fa34 <read_markers+0x6a4>
 800f95a:	f1ab 0202 	sub.w	r2, fp, #2
 800f95e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800f962:	2001      	movs	r0, #1
 800f964:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800f968:	4291      	cmp	r1, r2
 800f96a:	d1fb      	bne.n	800f964 <read_markers+0x5d4>
	count = length >> 1;
 800f96c:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800f970:	f1b9 0f19 	cmp.w	r9, #25
 800f974:	d062      	beq.n	800fa3c <read_markers+0x6ac>
 800f976:	dc53      	bgt.n	800fa20 <read_markers+0x690>
 800f978:	f1b9 0f09 	cmp.w	r9, #9
 800f97c:	d060      	beq.n	800fa40 <read_markers+0x6b0>
 800f97e:	f1b9 0f10 	cmp.w	r9, #16
 800f982:	d05f      	beq.n	800fa44 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800f984:	4f85      	ldr	r7, [pc, #532]	; (800fb9c <read_markers+0x80c>)
 800f986:	4a86      	ldr	r2, [pc, #536]	; (800fba0 <read_markers+0x810>)
 800f988:	f1b9 0f04 	cmp.w	r9, #4
 800f98c:	bf18      	it	ne
 800f98e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800f990:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800f994:	9302      	str	r3, [sp, #8]
 800f996:	9b02      	ldr	r3, [sp, #8]
 800f998:	42bb      	cmp	r3, r7
 800f99a:	d157      	bne.n	800fa4c <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800f99c:	6822      	ldr	r2, [r4, #0]
 800f99e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f9a0:	2a01      	cmp	r2, #1
 800f9a2:	dd26      	ble.n	800f9f2 <read_markers+0x662>
 800f9a4:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800f9a8:	275f      	movs	r7, #95	; 0x5f
 800f9aa:	f8bb 1000 	ldrh.w	r1, [fp]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800f9b2:	f10b 0b10 	add.w	fp, fp, #16
 800f9b6:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800f9b8:	6191      	str	r1, [r2, #24]
 800f9ba:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800f9be:	61d1      	str	r1, [r2, #28]
 800f9c0:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800f9c4:	6211      	str	r1, [r2, #32]
 800f9c6:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800f9ca:	6251      	str	r1, [r2, #36]	; 0x24
 800f9cc:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800f9d0:	6291      	str	r1, [r2, #40]	; 0x28
 800f9d2:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800f9d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800f9d8:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800f9dc:	6311      	str	r1, [r2, #48]	; 0x30
 800f9de:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800f9e2:	6157      	str	r7, [r2, #20]
 800f9e4:	6351      	str	r1, [r2, #52]	; 0x34
 800f9e6:	2102      	movs	r1, #2
 800f9e8:	6852      	ldr	r2, [r2, #4]
 800f9ea:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800f9ec:	9b02      	ldr	r3, [sp, #8]
 800f9ee:	459b      	cmp	fp, r3
 800f9f0:	d1db      	bne.n	800f9aa <read_markers+0x61a>
    if (prec) length -= count;
 800f9f2:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800f9f4:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f43f af54 	beq.w	800f8a6 <read_markers+0x516>
 800f9fe:	eba8 0809 	sub.w	r8, r8, r9
 800fa02:	e750      	b.n	800f8a6 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800fa04:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800fa08:	dc14      	bgt.n	800fa34 <read_markers+0x6a4>
 800fa0a:	f1ab 0202 	sub.w	r2, fp, #2
 800fa0e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800fa12:	2001      	movs	r0, #1
 800fa14:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800fa18:	4291      	cmp	r1, r2
 800fa1a:	d1fb      	bne.n	800fa14 <read_markers+0x684>
 800fa1c:	46c1      	mov	r9, r8
 800fa1e:	e7a7      	b.n	800f970 <read_markers+0x5e0>
    switch (count) {
 800fa20:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800fa24:	d010      	beq.n	800fa48 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800fa26:	4f5e      	ldr	r7, [pc, #376]	; (800fba0 <read_markers+0x810>)
 800fa28:	4b5e      	ldr	r3, [pc, #376]	; (800fba4 <read_markers+0x814>)
 800fa2a:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800fa2e:	bf08      	it	eq
 800fa30:	461f      	moveq	r7, r3
 800fa32:	e7ad      	b.n	800f990 <read_markers+0x600>
	count = DCTSIZE2;
 800fa34:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800fa38:	4f59      	ldr	r7, [pc, #356]	; (800fba0 <read_markers+0x810>)
 800fa3a:	e7a9      	b.n	800f990 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800fa3c:	4f5a      	ldr	r7, [pc, #360]	; (800fba8 <read_markers+0x818>)
 800fa3e:	e7a7      	b.n	800f990 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800fa40:	4f5a      	ldr	r7, [pc, #360]	; (800fbac <read_markers+0x81c>)
 800fa42:	e7a5      	b.n	800f990 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800fa44:	4f5a      	ldr	r7, [pc, #360]	; (800fbb0 <read_markers+0x820>)
 800fa46:	e7a3      	b.n	800f990 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800fa48:	4f5a      	ldr	r7, [pc, #360]	; (800fbb4 <read_markers+0x824>)
 800fa4a:	e7a1      	b.n	800f990 <read_markers+0x600>
      if (prec)
 800fa4c:	9b01      	ldr	r3, [sp, #4]
 800fa4e:	b333      	cbz	r3, 800fa9e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fa50:	f1ba 0f00 	cmp.w	sl, #0
 800fa54:	d107      	bne.n	800fa66 <read_markers+0x6d6>
 800fa56:	68f3      	ldr	r3, [r6, #12]
 800fa58:	4620      	mov	r0, r4
 800fa5a:	4798      	blx	r3
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	f43f ad25 	beq.w	800f4ac <read_markers+0x11c>
 800fa62:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800fa66:	782a      	ldrb	r2, [r5, #0]
 800fa68:	f1ba 0301 	subs.w	r3, sl, #1
 800fa6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800fa70:	d00a      	beq.n	800fa88 <read_markers+0x6f8>
 800fa72:	3501      	adds	r5, #1
 800fa74:	f815 1b01 	ldrb.w	r1, [r5], #1
 800fa78:	f103 3aff 	add.w	sl, r3, #4294967295
 800fa7c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800fa7e:	f857 1b04 	ldr.w	r1, [r7], #4
 800fa82:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800fa86:	e786      	b.n	800f996 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fa88:	68f3      	ldr	r3, [r6, #12]
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	9203      	str	r2, [sp, #12]
 800fa8e:	4798      	blx	r3
 800fa90:	2800      	cmp	r0, #0
 800fa92:	f43f ad0b 	beq.w	800f4ac <read_markers+0x11c>
 800fa96:	9a03      	ldr	r2, [sp, #12]
 800fa98:	e9d6 5300 	ldrd	r5, r3, [r6]
 800fa9c:	e7ea      	b.n	800fa74 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800fa9e:	f1ba 0f00 	cmp.w	sl, #0
 800faa2:	d107      	bne.n	800fab4 <read_markers+0x724>
 800faa4:	68f3      	ldr	r3, [r6, #12]
 800faa6:	4620      	mov	r0, r4
 800faa8:	4798      	blx	r3
 800faaa:	2800      	cmp	r0, #0
 800faac:	f43f acfe 	beq.w	800f4ac <read_markers+0x11c>
 800fab0:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800fab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fab8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800fabc:	e7df      	b.n	800fa7e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800fabe:	69a7      	ldr	r7, [r4, #24]
 800fac0:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fac2:	b353      	cbz	r3, 800fb1a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800fac4:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fac6:	782a      	ldrb	r2, [r5, #0]
 800fac8:	3b01      	subs	r3, #1
 800faca:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800face:	d02d      	beq.n	800fb2c <read_markers+0x79c>
 800fad0:	3501      	adds	r5, #1
 800fad2:	782a      	ldrb	r2, [r5, #0]
 800fad4:	1e5e      	subs	r6, r3, #1
 800fad6:	4442      	add	r2, r8
  if (length != 4)
 800fad8:	2a04      	cmp	r2, #4
 800fada:	d005      	beq.n	800fae8 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	220c      	movs	r2, #12
 800fae0:	4620      	mov	r0, r4
 800fae2:	615a      	str	r2, [r3, #20]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fae8:	b34e      	cbz	r6, 800fb3e <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800faea:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800faec:	f895 8000 	ldrb.w	r8, [r5]
 800faf0:	3e01      	subs	r6, #1
 800faf2:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800faf6:	d02b      	beq.n	800fb50 <read_markers+0x7c0>
 800faf8:	3501      	adds	r5, #1
 800fafa:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fafe:	2254      	movs	r2, #84	; 0x54
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fb04:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fb06:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fb08:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800fb0a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800fb12:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800fb16:	603d      	str	r5, [r7, #0]
 800fb18:	e653      	b.n	800f7c2 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	4798      	blx	r3
 800fb20:	2800      	cmp	r0, #0
 800fb22:	f43f acc3 	beq.w	800f4ac <read_markers+0x11c>
 800fb26:	e9d7 5300 	ldrd	r5, r3, [r7]
 800fb2a:	e7cc      	b.n	800fac6 <read_markers+0x736>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4620      	mov	r0, r4
 800fb30:	4798      	blx	r3
 800fb32:	2800      	cmp	r0, #0
 800fb34:	f43f acba 	beq.w	800f4ac <read_markers+0x11c>
 800fb38:	e9d7 5300 	ldrd	r5, r3, [r7]
 800fb3c:	e7c9      	b.n	800fad2 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	4620      	mov	r0, r4
 800fb42:	4798      	blx	r3
 800fb44:	2800      	cmp	r0, #0
 800fb46:	f43f acb1 	beq.w	800f4ac <read_markers+0x11c>
 800fb4a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fb4e:	e7cd      	b.n	800faec <read_markers+0x75c>
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	4620      	mov	r0, r4
 800fb54:	4798      	blx	r3
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f43f aca8 	beq.w	800f4ac <read_markers+0x11c>
 800fb5c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fb60:	e7cb      	b.n	800fafa <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800fb62:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800fb66:	3bd8      	subs	r3, #216	; 0xd8
 800fb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4798      	blx	r3
 800fb70:	e4e2      	b.n	800f538 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800fb72:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800fb76:	69db      	ldr	r3, [r3, #28]
 800fb78:	e7f8      	b.n	800fb6c <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800fb7a:	6822      	ldr	r2, [r4, #0]
 800fb7c:	215e      	movs	r1, #94	; 0x5e
 800fb7e:	4620      	mov	r0, r4
 800fb80:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800fb84:	6853      	ldr	r3, [r2, #4]
 800fb86:	2101      	movs	r1, #1
 800fb88:	4798      	blx	r3
      break;
 800fb8a:	e4cb      	b.n	800f524 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7ff fa36 	bl	800effe <skip_variable>
 800fb92:	e4d1      	b.n	800f538 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800fb94:	6822      	ldr	r2, [r4, #0]
 800fb96:	2146      	movs	r1, #70	; 0x46
 800fb98:	e4df      	b.n	800f55a <read_markers+0x1ca>
 800fb9a:	bf00      	nop
 800fb9c:	08030498 	.word	0x08030498
 800fba0:	08030358 	.word	0x08030358
 800fba4:	08030740 	.word	0x08030740
 800fba8:	080305cc 	.word	0x080305cc
 800fbac:	080304e8 	.word	0x080304e8
 800fbb0:	0803054c 	.word	0x0803054c
 800fbb4:	08030670 	.word	0x08030670

0800fbb8 <jpeg_resync_to_restart>:
{
 800fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbc:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fbbe:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800fbc0:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fbc4:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fbc6:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fbca:	61d9      	str	r1, [r3, #28]
 800fbcc:	f04f 31ff 	mov.w	r1, #4294967295
{
 800fbd0:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fbd2:	f008 0807 	and.w	r8, r8, #7
 800fbd6:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800fbda:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800fbe2:	2dbf      	cmp	r5, #191	; 0xbf
 800fbe4:	dd2e      	ble.n	800fc44 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800fbe6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800fbea:	2b07      	cmp	r3, #7
 800fbec:	d828      	bhi.n	800fc40 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fbee:	4545      	cmp	r5, r8
 800fbf0:	d026      	beq.n	800fc40 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800fbf2:	1cbb      	adds	r3, r7, #2
 800fbf4:	f003 0307 	and.w	r3, r3, #7
 800fbf8:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800fbfa:	429d      	cmp	r5, r3
 800fbfc:	d020      	beq.n	800fc40 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800fbfe:	1e7b      	subs	r3, r7, #1
 800fc00:	f003 0307 	and.w	r3, r3, #7
 800fc04:	33d0      	adds	r3, #208	; 0xd0
 800fc06:	429d      	cmp	r5, r3
 800fc08:	d01c      	beq.n	800fc44 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800fc0a:	1ebc      	subs	r4, r7, #2
 800fc0c:	f004 0407 	and.w	r4, r4, #7
 800fc10:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800fc12:	42a5      	cmp	r5, r4
 800fc14:	bf14      	ite	ne
 800fc16:	2401      	movne	r4, #1
 800fc18:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800fc1a:	6833      	ldr	r3, [r6, #0]
 800fc1c:	2263      	movs	r2, #99	; 0x63
 800fc1e:	2104      	movs	r1, #4
 800fc20:	4630      	mov	r0, r6
 800fc22:	61dc      	str	r4, [r3, #28]
 800fc24:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	4798      	blx	r3
    switch (action) {
 800fc2c:	2c02      	cmp	r4, #2
 800fc2e:	d00b      	beq.n	800fc48 <jpeg_resync_to_restart+0x90>
 800fc30:	2c03      	cmp	r4, #3
 800fc32:	d002      	beq.n	800fc3a <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800fc34:	2300      	movs	r3, #0
 800fc36:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800fc3a:	2001      	movs	r0, #1
}
 800fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800fc40:	2403      	movs	r4, #3
 800fc42:	e7ea      	b.n	800fc1a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800fc44:	2402      	movs	r4, #2
 800fc46:	e7e8      	b.n	800fc1a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f7ff fa13 	bl	800f074 <next_marker>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d0f4      	beq.n	800fc3c <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800fc52:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800fc56:	e7c4      	b.n	800fbe2 <jpeg_resync_to_restart+0x2a>

0800fc58 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800fc58:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fc5a:	6843      	ldr	r3, [r0, #4]
 800fc5c:	22ac      	movs	r2, #172	; 0xac
 800fc5e:	2100      	movs	r1, #0
{
 800fc60:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fc66:	4b11      	ldr	r3, [pc, #68]	; (800fcac <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800fc68:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800fc6c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800fc6e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800fc70:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800fc74:	4b0e      	ldr	r3, [pc, #56]	; (800fcb0 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800fc76:	4a0f      	ldr	r2, [pc, #60]	; (800fcb4 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800fc78:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800fc7a:	4b0f      	ldr	r3, [pc, #60]	; (800fcb8 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800fc7c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800fc7e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800fc84:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800fc88:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800fc8c:	4299      	cmp	r1, r3
 800fc8e:	d1fb      	bne.n	800fc88 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800fc90:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800fc94:	2240      	movs	r2, #64	; 0x40
 800fc96:	2100      	movs	r1, #0
 800fc98:	f01a ff48 	bl	802ab2c <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800fc9c:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800fc9e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800fca0:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800fca2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800fca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800fca8:	f7ff ba59 	b.w	800f15e <reset_marker_reader>
 800fcac:	0800f15f 	.word	0x0800f15f
 800fcb0:	0800f391 	.word	0x0800f391
 800fcb4:	0800efff 	.word	0x0800efff
 800fcb8:	0800f101 	.word	0x0800f101
 800fcbc:	0800ef29 	.word	0x0800ef29

0800fcc0 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800fcc0:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800fcc2:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800fcc6:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800fcc8:	68ab      	ldr	r3, [r5, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d02a      	beq.n	800fd24 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800fcce:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fcd0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800fcd4:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fcda:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800fcde:	2102      	movs	r1, #2
 800fce0:	4620      	mov	r0, r4
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800fce6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800fcea:	2102      	movs	r1, #2
 800fcec:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800fcf2:	68a2      	ldr	r2, [r4, #8]
 800fcf4:	b1aa      	cbz	r2, 800fd22 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800fcf6:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800fcf8:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800fcfa:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800fcfc:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800fcfe:	bf14      	ite	ne
 800fd00:	2102      	movne	r1, #2
 800fd02:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800fd04:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800fd06:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800fd08:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800fd0a:	b151      	cbz	r1, 800fd22 <prepare_for_output_pass+0x62>
 800fd0c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800fd10:	6949      	ldr	r1, [r1, #20]
 800fd12:	b931      	cbnz	r1, 800fd22 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800fd14:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800fd16:	2900      	cmp	r1, #0
 800fd18:	bf14      	ite	ne
 800fd1a:	2102      	movne	r1, #2
 800fd1c:	2101      	moveq	r1, #1
 800fd1e:	440b      	add	r3, r1
 800fd20:	6113      	str	r3, [r2, #16]
    }
  }
}
 800fd22:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800fd24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800fd26:	b16b      	cbz	r3, 800fd44 <prepare_for_output_pass+0x84>
 800fd28:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fd2c:	b953      	cbnz	r3, 800fd44 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800fd2e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d037      	beq.n	800fda4 <prepare_for_output_pass+0xe4>
 800fd34:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d034      	beq.n	800fda4 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800fd3a:	69ab      	ldr	r3, [r5, #24]
 800fd3c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800fd40:	2301      	movs	r3, #1
 800fd42:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800fd44:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800fd48:	4620      	mov	r0, r4
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800fd4e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800fd52:	4620      	mov	r0, r4
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800fd58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1c9      	bne.n	800fcf2 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800fd5e:	692b      	ldr	r3, [r5, #16]
 800fd60:	b923      	cbnz	r3, 800fd6c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800fd62:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800fd66:	4620      	mov	r0, r4
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800fd6c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800fd70:	4620      	mov	r0, r4
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800fd76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fd78:	b12b      	cbz	r3, 800fd86 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800fd7a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800fd7e:	4620      	mov	r0, r4
 800fd80:	68a9      	ldr	r1, [r5, #8]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800fd86:	68aa      	ldr	r2, [r5, #8]
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	bf14      	ite	ne
 800fd94:	2103      	movne	r1, #3
 800fd96:	2100      	moveq	r1, #0
 800fd98:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800fd9a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800fd9e:	2100      	movs	r1, #0
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	e7a4      	b.n	800fcee <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800fda4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fda6:	b11b      	cbz	r3, 800fdb0 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800fda8:	696b      	ldr	r3, [r5, #20]
 800fdaa:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800fdae:	e7c9      	b.n	800fd44 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	222f      	movs	r2, #47	; 0x2f
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	615a      	str	r2, [r3, #20]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4798      	blx	r3
 800fdbc:	e7c2      	b.n	800fd44 <prepare_for_output_pass+0x84>

0800fdbe <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800fdbe:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800fdc0:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800fdc2:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800fdc6:	b11a      	cbz	r2, 800fdd0 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800fdc8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	4798      	blx	r3
  master->pass_number++;
 800fdd0:	68e3      	ldr	r3, [r4, #12]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	60e3      	str	r3, [r4, #12]
}
 800fdd6:	bd10      	pop	{r4, pc}

0800fdd8 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800fdd8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800fdda:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d143      	bne.n	800fe68 <use_merged_upsample+0x90>
 800fde0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	d141      	bne.n	800fe6c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800fde8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d139      	bne.n	800fe64 <use_merged_upsample+0x8c>
 800fdf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d136      	bne.n	800fe64 <use_merged_upsample+0x8c>
 800fdf6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d132      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800fdfe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800fe00:	2b03      	cmp	r3, #3
 800fe02:	d12f      	bne.n	800fe64 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800fe04:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800fe08:	6899      	ldr	r1, [r3, #8]
 800fe0a:	2902      	cmp	r1, #2
 800fe0c:	d12a      	bne.n	800fe64 <use_merged_upsample+0x8c>
 800fe0e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800fe10:	2901      	cmp	r1, #1
 800fe12:	d127      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800fe14:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800fe18:	2901      	cmp	r1, #1
 800fe1a:	d123      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800fe1c:	68d9      	ldr	r1, [r3, #12]
 800fe1e:	2902      	cmp	r1, #2
 800fe20:	dc20      	bgt.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800fe22:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800fe24:	2901      	cmp	r1, #1
 800fe26:	d11d      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800fe28:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800fe2c:	2901      	cmp	r1, #1
 800fe2e:	d119      	bne.n	800fe64 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fe30:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800fe34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fe36:	42a1      	cmp	r1, r4
 800fe38:	d114      	bne.n	800fe64 <use_merged_upsample+0x8c>
 800fe3a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800fe3c:	42a1      	cmp	r1, r4
 800fe3e:	d111      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fe40:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800fe44:	42a1      	cmp	r1, r4
 800fe46:	d10d      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fe48:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800fe4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800fe4e:	4281      	cmp	r1, r0
 800fe50:	d108      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fe52:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fe56:	4281      	cmp	r1, r0
 800fe58:	d104      	bne.n	800fe64 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800fe5a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800fe5e:	1a53      	subs	r3, r2, r1
 800fe60:	425a      	negs	r2, r3
 800fe62:	415a      	adcs	r2, r3
}
 800fe64:	4610      	mov	r0, r2
 800fe66:	bd10      	pop	{r4, pc}
    return FALSE;
 800fe68:	2200      	movs	r2, #0
 800fe6a:	e7fb      	b.n	800fe64 <use_merged_upsample+0x8c>
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	e7f9      	b.n	800fe64 <use_merged_upsample+0x8c>

0800fe70 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800fe70:	6942      	ldr	r2, [r0, #20]
 800fe72:	2aca      	cmp	r2, #202	; 0xca
{
 800fe74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe78:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800fe7a:	d005      	beq.n	800fe88 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800fe7c:	6803      	ldr	r3, [r0, #0]
 800fe7e:	2115      	movs	r1, #21
 800fe80:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800fe88:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fe8a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800fe8c:	f7fe faf8 	bl	800e480 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fe90:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800fe94:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800fe98:	462b      	mov	r3, r5
 800fe9a:	45b4      	cmp	ip, r6
 800fe9c:	dd6b      	ble.n	800ff76 <jpeg_calc_output_dimensions+0x106>
 800fe9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800fea0:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fea2:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800fea6:	2a00      	cmp	r2, #0
 800fea8:	bf14      	ite	ne
 800feaa:	2708      	movne	r7, #8
 800feac:	2704      	moveq	r7, #4
 800feae:	e00a      	b.n	800fec6 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800feb0:	689a      	ldr	r2, [r3, #8]
 800feb2:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800feb6:	434a      	muls	r2, r1
 800feb8:	0052      	lsls	r2, r2, #1
 800feba:	fb9e f9f2 	sdiv	r9, lr, r2
 800febe:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fec2:	b922      	cbnz	r2, 800fece <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800fec4:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fec6:	fb01 f008 	mul.w	r0, r1, r8
 800feca:	42b8      	cmp	r0, r7
 800fecc:	ddf0      	ble.n	800feb0 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800fece:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800fed0:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800fed4:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800fed8:	fb08 f109 	mul.w	r1, r8, r9
 800fedc:	42b9      	cmp	r1, r7
 800fede:	dd0b      	ble.n	800fef8 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800fee0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800fee4:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800fee6:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800feea:	dc14      	bgt.n	800ff16 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800feec:	0042      	lsls	r2, r0, #1
 800feee:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800fef2:	bfc8      	it	gt
 800fef4:	629a      	strgt	r2, [r3, #40]	; 0x28
 800fef6:	e00f      	b.n	800ff18 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800fef8:	68da      	ldr	r2, [r3, #12]
 800fefa:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800fefe:	fb02 f208 	mul.w	r2, r2, r8
 800ff02:	0052      	lsls	r2, r2, #1
 800ff04:	fb9e faf2 	sdiv	sl, lr, r2
 800ff08:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	d1e7      	bne.n	800fee0 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800ff10:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ff14:	e7e0      	b.n	800fed8 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800ff16:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800ff18:	3601      	adds	r6, #1
 800ff1a:	3358      	adds	r3, #88	; 0x58
 800ff1c:	e7bd      	b.n	800fe9a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ff1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800ff20:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ff22:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800ff24:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ff26:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800ff2a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ff2e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800ff30:	69e3      	ldr	r3, [r4, #28]
 800ff32:	4351      	muls	r1, r2
 800ff34:	4358      	muls	r0, r3
 800ff36:	f007 fe71 	bl	8017c1c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ff3a:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800ff3e:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ff42:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ff46:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800ff4a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ff4e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800ff50:	6a23      	ldr	r3, [r4, #32]
 800ff52:	4351      	muls	r1, r2
 800ff54:	4358      	muls	r0, r3
 800ff56:	f007 fe61 	bl	8017c1c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800ff5a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ff5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ff60:	42b2      	cmp	r2, r6
 800ff62:	dcdc      	bgt.n	800ff1e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800ff64:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d806      	bhi.n	800ff7a <jpeg_calc_output_dimensions+0x10a>
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d809      	bhi.n	800ff84 <jpeg_calc_output_dimensions+0x114>
 800ff70:	d009      	beq.n	800ff86 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800ff72:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800ff74:	e008      	b.n	800ff88 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ff76:	2600      	movs	r6, #0
 800ff78:	e7f1      	b.n	800ff5e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800ff7a:	3b04      	subs	r3, #4
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d8f8      	bhi.n	800ff72 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800ff80:	2304      	movs	r3, #4
 800ff82:	e000      	b.n	800ff86 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ff84:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800ff86:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ff88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ff8a:	b95b      	cbnz	r3, 800ffa4 <jpeg_calc_output_dimensions+0x134>
 800ff8c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800ff8e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ff90:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800ff92:	f7ff ff21 	bl	800fdd8 <use_merged_upsample>
 800ff96:	b138      	cbz	r0, 800ffa8 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800ff98:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ff9c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ffa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e7f2      	b.n	800ff8e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e7f7      	b.n	800ff9c <jpeg_calc_output_dimensions+0x12c>

0800ffac <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffae:	6843      	ldr	r3, [r0, #4]
 800ffb0:	221c      	movs	r2, #28
 800ffb2:	2101      	movs	r1, #1
{
 800ffb4:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffb6:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800ffb8:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffba:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ffbc:	4b6d      	ldr	r3, [pc, #436]	; (8010174 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800ffbe:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffc2:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ffc4:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800ffc6:	4b6c      	ldr	r3, [pc, #432]	; (8010178 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800ffc8:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800ffca:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f7ff ff4f 	bl	800fe70 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffd2:	6863      	ldr	r3, [r4, #4]
 800ffd4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800ffd8:	2101      	movs	r1, #1
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4620      	mov	r0, r4
 800ffde:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800ffe0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffe4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ffe6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800ffe8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ffec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fff0:	f01a fd9c 	bl	802ab2c <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fff4:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800fff8:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800fffa:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fffe:	3101      	adds	r1, #1
 8010000:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010004:	d1f9      	bne.n	800fffa <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 8010006:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801000a:	21ff      	movs	r1, #255	; 0xff
 801000c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 8010010:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 8010012:	f01a fd8b 	bl	802ab2c <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 8010016:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801001a:	2100      	movs	r1, #0
 801001c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 8010020:	f01a fd84 	bl	802ab2c <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 8010024:	2280      	movs	r2, #128	; 0x80
 8010026:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801002a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 801002e:	f01a fd6f 	bl	802ab10 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 8010032:	4620      	mov	r0, r4
  master->pass_number = 0;
 8010034:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 8010036:	f7ff fecf 	bl	800fdd8 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 801003a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 801003c:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 801003e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 8010042:	b1b3      	cbz	r3, 8010072 <jinit_master_decompress+0xc6>
 8010044:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010046:	b1a2      	cbz	r2, 8010072 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 8010048:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801004a:	2b00      	cmp	r3, #0
 801004c:	d166      	bne.n	801011c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 801004e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010050:	2b03      	cmp	r3, #3
 8010052:	f04f 0301 	mov.w	r3, #1
 8010056:	d068      	beq.n	801012a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 8010058:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 801005a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 801005c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 8010060:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 8010064:	4620      	mov	r0, r4
 8010066:	f006 fef1 	bl	8016e4c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 801006a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 801006e:	616b      	str	r3, [r5, #20]
 8010070:	e062      	b.n	8010138 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 8010072:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 8010076:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1e5      	bne.n	8010048 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 801007c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801007e:	b94b      	cbnz	r3, 8010094 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 8010080:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 8010082:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 8010084:	2b00      	cmp	r3, #0
 8010086:	d069      	beq.n	801015c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 8010088:	f000 fa1c 	bl	80104c4 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 801008c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801008e:	4620      	mov	r0, r4
 8010090:	f000 fb98 	bl	80107c4 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 8010094:	4620      	mov	r0, r4
 8010096:	f7fc fda7 	bl	800cbe8 <jinit_inverse_dct>
  if (cinfo->arith_code)
 801009a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 801009e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d061      	beq.n	8010168 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 80100a4:	f7fb fc16 	bl	800b8d4 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 80100a8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80100ac:	691b      	ldr	r3, [r3, #16]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d15d      	bne.n	801016e <jinit_master_decompress+0x1c2>
 80100b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80100b4:	3900      	subs	r1, #0
 80100b6:	bf18      	it	ne
 80100b8:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 80100ba:	4620      	mov	r0, r4
 80100bc:	f7fc f8fc 	bl	800c2b8 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 80100c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100c2:	b911      	cbnz	r1, 80100ca <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 80100c4:	4620      	mov	r0, r4
 80100c6:	f7fe fca3 	bl	800ea10 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 80100ca:	6863      	ldr	r3, [r4, #4]
 80100cc:	4620      	mov	r0, r4
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 80100d2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80100d6:	4620      	mov	r0, r4
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 80100dc:	68a2      	ldr	r2, [r4, #8]
 80100de:	b1e2      	cbz	r2, 801011a <jinit_master_decompress+0x16e>
 80100e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80100e2:	b9d3      	cbnz	r3, 801011a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 80100e4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 80100e8:	691b      	ldr	r3, [r3, #16]
 80100ea:	b1b3      	cbz	r3, 801011a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 80100ec:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 80100f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 80100f2:	b111      	cbz	r1, 80100fa <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 80100f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80100f8:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 80100fa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 80100fe:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 8010100:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 8010102:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 8010104:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 8010108:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801010a:	4283      	cmp	r3, r0
 801010c:	bf14      	ite	ne
 801010e:	2303      	movne	r3, #3
 8010110:	2302      	moveq	r3, #2
 8010112:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 8010114:	68eb      	ldr	r3, [r5, #12]
 8010116:	3301      	adds	r3, #1
 8010118:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 801011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	2230      	movs	r2, #48	; 0x30
 8010120:	4620      	mov	r0, r4
 8010122:	615a      	str	r2, [r3, #20]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4798      	blx	r3
 8010128:	e791      	b.n	801004e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 801012a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 801012e:	b17a      	cbz	r2, 8010150 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 8010130:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 8010132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010134:	2b00      	cmp	r3, #0
 8010136:	d195      	bne.n	8010064 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 8010138:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801013a:	b913      	cbnz	r3, 8010142 <jinit_master_decompress+0x196>
 801013c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801013e:	2b00      	cmp	r3, #0
 8010140:	d09c      	beq.n	801007c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 8010142:	4620      	mov	r0, r4
 8010144:	f007 fcfe 	bl	8017b44 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 8010148:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 801014c:	61ab      	str	r3, [r5, #24]
 801014e:	e795      	b.n	801007c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 8010150:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010152:	b10a      	cbz	r2, 8010158 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 8010154:	66e3      	str	r3, [r4, #108]	; 0x6c
 8010156:	e7ec      	b.n	8010132 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 8010158:	6663      	str	r3, [r4, #100]	; 0x64
 801015a:	e783      	b.n	8010064 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 801015c:	f7fc fad2 	bl	800c704 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 8010160:	4620      	mov	r0, r4
 8010162:	f000 fc4f 	bl	8010a04 <jinit_upsampler>
 8010166:	e791      	b.n	801008c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 8010168:	f7fd fed6 	bl	800df18 <jinit_huff_decoder>
 801016c:	e79c      	b.n	80100a8 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 801016e:	2101      	movs	r1, #1
 8010170:	e7a3      	b.n	80100ba <jinit_master_decompress+0x10e>
 8010172:	bf00      	nop
 8010174:	0800fcc1 	.word	0x0800fcc1
 8010178:	0800fdbf 	.word	0x0800fdbf

0801017c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 801017c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 8010180:	2200      	movs	r2, #0
 8010182:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 8010184:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8010186:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010188:	4770      	bx	lr

0801018a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 801018a:	b570      	push	{r4, r5, r6, lr}
 801018c:	9d05      	ldr	r5, [sp, #20]
 801018e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 8010190:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 8010194:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 8010196:	68de      	ldr	r6, [r3, #12]
 8010198:	9b04      	ldr	r3, [sp, #16]
 801019a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801019e:	6822      	ldr	r2, [r4, #0]
 80101a0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 80101a2:	682b      	ldr	r3, [r5, #0]
 80101a4:	3301      	adds	r3, #1
 80101a6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	3301      	adds	r3, #1
 80101ac:	6023      	str	r3, [r4, #0]
}
 80101ae:	bd70      	pop	{r4, r5, r6, pc}

080101b0 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80101b4:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 80101b8:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 80101ba:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 80101be:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 80101c0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80101c4:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 80101c6:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 80101c8:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 80101ca:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 80101ce:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80101d0:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 80101d2:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80101d4:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 80101d6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80101da:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 80101dc:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 80101de:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 80101e0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 80101e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80101e8:	9903      	ldr	r1, [sp, #12]
 80101ea:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80101ec:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 80101ee:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80101f2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80101f6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 80101fa:	9205      	str	r2, [sp, #20]
 80101fc:	9a05      	ldr	r2, [sp, #20]
 80101fe:	3306      	adds	r3, #6
 8010200:	3102      	adds	r1, #2
 8010202:	4295      	cmp	r5, r2
 8010204:	d128      	bne.n	8010258 <h2v1_merged_upsample+0xa8>
 8010206:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8010208:	6f02      	ldr	r2, [r0, #112]	; 0x70
 801020a:	fb03 f30e 	mul.w	r3, r3, lr
 801020e:	07d2      	lsls	r2, r2, #31
 8010210:	eb0c 0103 	add.w	r1, ip, r3
 8010214:	d51d      	bpl.n	8010252 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 8010216:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010218:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 801021a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801021e:	782a      	ldrb	r2, [r5, #0]
 8010220:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8010224:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 8010228:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801022a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 801022c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 801022e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 8010232:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010236:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 801023a:	9a03      	ldr	r2, [sp, #12]
 801023c:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010240:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010242:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 8010244:	5dbe      	ldrb	r6, [r7, r6]
 8010246:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010248:	5c80      	ldrb	r0, [r0, r2]
 801024a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 801024c:	5ca2      	ldrb	r2, [r4, r2]
 801024e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 8010252:	b007      	add	sp, #28
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 8010258:	f819 ab01 	ldrb.w	sl, [r9], #1
 801025c:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801025e:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 8010262:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010266:	9a02      	ldr	r2, [sp, #8]
 8010268:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 801026c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 8010270:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010274:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 8010276:	9f01      	ldr	r7, [sp, #4]
 8010278:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 801027c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010280:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 8010284:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010288:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 801028a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 801028e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 8010292:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010296:	f816 a00a 	ldrb.w	sl, [r6, sl]
 801029a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 801029e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 80102a2:	f817 700a 	ldrb.w	r7, [r7, sl]
 80102a6:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 80102aa:	f812 200a 	ldrb.w	r2, [r2, sl]
 80102ae:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 80102b2:	f816 200a 	ldrb.w	r2, [r6, sl]
 80102b6:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80102ba:	e79f      	b.n	80101fc <h2v1_merged_upsample+0x4c>

080102bc <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 80102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80102c0:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 80102c4:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 80102c6:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 80102ca:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 80102cc:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 80102d0:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 80102d2:	696e      	ldr	r6, [r5, #20]
 80102d4:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80102d6:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 80102d8:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 80102da:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 80102dc:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 80102e0:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80102e4:	686d      	ldr	r5, [r5, #4]
 80102e6:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 80102e8:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 80102ea:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 80102ec:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 80102ee:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 80102f0:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 80102f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80102f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 80102fa:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80102fc:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801030a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 801030c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 801030e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 8010310:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010312:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010316:	3206      	adds	r2, #6
 8010318:	3306      	adds	r3, #6
 801031a:	f10e 0e02 	add.w	lr, lr, #2
 801031e:	4588      	cmp	r8, r1
 8010320:	f10c 0c02 	add.w	ip, ip, #2
 8010324:	d13a      	bne.n	801039c <h2v2_merged_upsample+0xe0>
 8010326:	2306      	movs	r3, #6
 8010328:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 801032a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801032c:	437b      	muls	r3, r7
 801032e:	07c0      	lsls	r0, r0, #31
 8010330:	eb02 0103 	add.w	r1, r2, r3
 8010334:	9a01      	ldr	r2, [sp, #4]
 8010336:	441a      	add	r2, r3
 8010338:	d52d      	bpl.n	8010396 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 801033a:	9808      	ldr	r0, [sp, #32]
 801033c:	9d03      	ldr	r5, [sp, #12]
 801033e:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010340:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 8010344:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010348:	9d05      	ldr	r5, [sp, #20]
 801034a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 801034e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010352:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010356:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 8010358:	9804      	ldr	r0, [sp, #16]
 801035a:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 801035e:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 8010362:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010364:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 8010366:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 801036a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801036e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010372:	f81c e000 	ldrb.w	lr, [ip, r0]
 8010376:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801037a:	5c21      	ldrb	r1, [r4, r0]
 801037c:	9800      	ldr	r0, [sp, #0]
 801037e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 8010380:	9907      	ldr	r1, [sp, #28]
 8010382:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010386:	5c68      	ldrb	r0, [r5, r1]
 8010388:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 801038a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 801038e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010390:	5c62      	ldrb	r2, [r4, r1]
 8010392:	9901      	ldr	r1, [sp, #4]
 8010394:	54ca      	strb	r2, [r1, r3]
  }
}
 8010396:	b00b      	add	sp, #44	; 0x2c
 8010398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 801039c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801039e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 80103a2:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80103a6:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 80103aa:	9102      	str	r1, [sp, #8]
 80103ac:	9903      	ldr	r1, [sp, #12]
 80103ae:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80103b2:	9905      	ldr	r1, [sp, #20]
 80103b4:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 80103b8:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80103bc:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 80103be:	9e04      	ldr	r6, [sp, #16]
 80103c0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 80103c4:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80103c8:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 80103cc:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80103d0:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 80103d2:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80103d6:	f811 b009 	ldrb.w	fp, [r1, r9]
 80103da:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80103de:	f815 9009 	ldrb.w	r9, [r5, r9]
 80103e2:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 80103e6:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 80103ea:	f816 b009 	ldrb.w	fp, [r6, r9]
 80103ee:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 80103f2:	f811 b009 	ldrb.w	fp, [r1, r9]
 80103f6:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 80103fa:	f815 9009 	ldrb.w	r9, [r5, r9]
 80103fe:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 8010402:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010406:	f816 b009 	ldrb.w	fp, [r6, r9]
 801040a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 801040e:	f811 b009 	ldrb.w	fp, [r1, r9]
 8010412:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010416:	f815 9009 	ldrb.w	r9, [r5, r9]
 801041a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 801041e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010422:	f816 6009 	ldrb.w	r6, [r6, r9]
 8010426:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 801042a:	f811 1009 	ldrb.w	r1, [r1, r9]
 801042e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010432:	f815 1009 	ldrb.w	r1, [r5, r9]
 8010436:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 801043a:	e76b      	b.n	8010314 <h2v2_merged_upsample+0x58>

0801043c <merged_2v_upsample>:
{
 801043c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010440:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 8010444:	4616      	mov	r6, r2
 8010446:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 801044a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 801044c:	f8d8 3000 	ldr.w	r3, [r8]
 8010450:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 8010454:	b1dd      	cbz	r5, 801048e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8010456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010458:	2501      	movs	r5, #1
 801045a:	f104 0020 	add.w	r0, r4, #32
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	2300      	movs	r3, #0
 8010462:	9500      	str	r5, [sp, #0]
 8010464:	4619      	mov	r1, r3
 8010466:	f007 fbe6 	bl	8017c36 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 801046a:	2300      	movs	r3, #0
 801046c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 801046e:	f8d8 3000 	ldr.w	r3, [r8]
 8010472:	442b      	add	r3, r5
 8010474:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 8010478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801047a:	1b5b      	subs	r3, r3, r5
 801047c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 801047e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010480:	b913      	cbnz	r3, 8010488 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 8010482:	6833      	ldr	r3, [r6, #0]
 8010484:	3301      	adds	r3, #1
 8010486:	6033      	str	r3, [r6, #0]
}
 8010488:	b004      	add	sp, #16
 801048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 801048e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 8010490:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 8010492:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 8010494:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 8010498:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 801049c:	bf28      	it	cs
 801049e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 80104a0:	9302      	str	r3, [sp, #8]
 80104a2:	42bd      	cmp	r5, r7
 80104a4:	bf28      	it	cs
 80104a6:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 80104a8:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 80104aa:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 80104ac:	bf17      	itett	ne
 80104ae:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 80104b0:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 80104b2:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 80104b4:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 80104b6:	bf0c      	ite	eq
 80104b8:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 80104ba:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 80104bc:	ab02      	add	r3, sp, #8
 80104be:	6832      	ldr	r2, [r6, #0]
 80104c0:	47b8      	blx	r7
 80104c2:	e7d4      	b.n	801046e <merged_2v_upsample+0x32>

080104c4 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80104c4:	6843      	ldr	r3, [r0, #4]
 80104c6:	2230      	movs	r2, #48	; 0x30
 80104c8:	2101      	movs	r1, #1
 80104ca:	681b      	ldr	r3, [r3, #0]
{
 80104cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d0:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80104d2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 80104d4:	4b37      	ldr	r3, [pc, #220]	; (80105b4 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80104d6:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80104d8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80104da:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 80104dc:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80104e0:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 80104e2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 80104e6:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 80104e8:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 80104ea:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80104ec:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 80104ee:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 80104f0:	d15a      	bne.n	80105a8 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 80104f2:	4b31      	ldr	r3, [pc, #196]	; (80105b8 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80104f4:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 80104f6:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 80104f8:	4b30      	ldr	r3, [pc, #192]	; (80105bc <jinit_merged_upsampler+0xf8>)
 80104fa:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80104fc:	4620      	mov	r0, r4
 80104fe:	6863      	ldr	r3, [r4, #4]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 8010504:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010506:	6863      	ldr	r3, [r4, #4]
 8010508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801050c:	2101      	movs	r1, #1
 801050e:	4620      	mov	r0, r4
 8010510:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010512:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010516:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010518:	6863      	ldr	r3, [r4, #4]
 801051a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 801051e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010520:	2101      	movs	r1, #1
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4620      	mov	r0, r4
 8010526:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010528:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 801052a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801052c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2101      	movs	r1, #1
 8010534:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010536:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80105d4 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801053a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801053c:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 801053e:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010540:	2101      	movs	r1, #1
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4620      	mov	r0, r4
 8010546:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 801054a:	4f1d      	ldr	r7, [pc, #116]	; (80105c0 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801054c:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 801054e:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 8010550:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010552:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010554:	f8df e080 	ldr.w	lr, [pc, #128]	; 80105d8 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010558:	491a      	ldr	r1, [pc, #104]	; (80105c4 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 801055a:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 801055e:	4d1a      	ldr	r5, [pc, #104]	; (80105c8 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010560:	fb08 e203 	mla	r2, r8, r3, lr
 8010564:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 8010566:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 801056a:	fb07 f203 	mul.w	r2, r7, r3
 801056e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8010572:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 8010576:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8010578:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 801057c:	fb05 f203 	mul.w	r2, r5, r3
 8010580:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8010584:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 8010588:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 801058c:	fb01 f203 	mul.w	r2, r1, r3
 8010590:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 8010594:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 8010598:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 801059c:	3301      	adds	r3, #1
 801059e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105a2:	d1dd      	bne.n	8010560 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 80105a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 80105a8:	4a08      	ldr	r2, [pc, #32]	; (80105cc <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 80105aa:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 80105ac:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 80105ae:	4a08      	ldr	r2, [pc, #32]	; (80105d0 <jinit_merged_upsampler+0x10c>)
 80105b0:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 80105b2:	e7a8      	b.n	8010506 <jinit_merged_upsampler+0x42>
 80105b4:	0801017d 	.word	0x0801017d
 80105b8:	0801043d 	.word	0x0801043d
 80105bc:	080102bd 	.word	0x080102bd
 80105c0:	0001c5a2 	.word	0x0001c5a2
 80105c4:	ffffa7e6 	.word	0xffffa7e6
 80105c8:	ffff492e 	.word	0xffff492e
 80105cc:	0801018b 	.word	0x0801018b
 80105d0:	080101b1 	.word	0x080101b1
 80105d4:	000166e9 	.word	0x000166e9
 80105d8:	ff4d0b80 	.word	0xff4d0b80

080105dc <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 80105dc:	2902      	cmp	r1, #2
{
 80105de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80105e0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 80105e4:	d023      	beq.n	801062e <start_pass_dpost+0x52>
 80105e6:	2903      	cmp	r1, #3
 80105e8:	d019      	beq.n	801061e <start_pass_dpost+0x42>
 80105ea:	2900      	cmp	r1, #0
 80105ec:	d128      	bne.n	8010640 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 80105ee:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80105f0:	b182      	cbz	r2, 8010614 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 80105f2:	4a16      	ldr	r2, [pc, #88]	; (801064c <start_pass_dpost+0x70>)
 80105f4:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 80105f6:	68e2      	ldr	r2, [r4, #12]
 80105f8:	b93a      	cbnz	r2, 801060a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 80105fa:	6843      	ldr	r3, [r0, #4]
 80105fc:	2101      	movs	r1, #1
 80105fe:	9100      	str	r1, [sp, #0]
 8010600:	69dd      	ldr	r5, [r3, #28]
 8010602:	68a1      	ldr	r1, [r4, #8]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	47a8      	blx	r5
 8010608:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 801060a:	2300      	movs	r3, #0
 801060c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 8010610:	b003      	add	sp, #12
 8010612:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 8010614:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8010618:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 801061a:	6063      	str	r3, [r4, #4]
    break;
 801061c:	e7f5      	b.n	801060a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 801061e:	68a2      	ldr	r2, [r4, #8]
 8010620:	b91a      	cbnz	r2, 801062a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010622:	6803      	ldr	r3, [r0, #0]
 8010624:	6159      	str	r1, [r3, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 801062a:	4b09      	ldr	r3, [pc, #36]	; (8010650 <start_pass_dpost+0x74>)
 801062c:	e7f5      	b.n	801061a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 801062e:	68a2      	ldr	r2, [r4, #8]
 8010630:	b922      	cbnz	r2, 801063c <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010632:	6803      	ldr	r3, [r0, #0]
 8010634:	2203      	movs	r2, #3
 8010636:	615a      	str	r2, [r3, #20]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 801063c:	4b05      	ldr	r3, [pc, #20]	; (8010654 <start_pass_dpost+0x78>)
 801063e:	e7ec      	b.n	801061a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010640:	6803      	ldr	r3, [r0, #0]
 8010642:	2203      	movs	r2, #3
 8010644:	615a      	str	r2, [r3, #20]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4798      	blx	r3
    break;
 801064a:	e7de      	b.n	801060a <start_pass_dpost+0x2e>
 801064c:	08010659 	.word	0x08010659
 8010650:	080106b9 	.word	0x080106b9
 8010654:	08010747 	.word	0x08010747

08010658 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065c:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801065e:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 8010662:	4604      	mov	r4, r0
 8010664:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 8010666:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010668:	682f      	ldr	r7, [r5, #0]
 801066a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 801066c:	2700      	movs	r7, #0
 801066e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 8010670:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 8010674:	9705      	str	r7, [sp, #20]
 8010676:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801067a:	42be      	cmp	r6, r7
 801067c:	bf94      	ite	ls
 801067e:	9602      	strls	r6, [sp, #8]
 8010680:	9702      	strhi	r7, [sp, #8]
 8010682:	ae07      	add	r6, sp, #28
 8010684:	9601      	str	r6, [sp, #4]
 8010686:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801068a:	9600      	str	r6, [sp, #0]
 801068c:	9e05      	ldr	r6, [sp, #20]
 801068e:	6876      	ldr	r6, [r6, #4]
 8010690:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 8010692:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010694:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8010698:	4620      	mov	r0, r4
 801069a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801069c:	685e      	ldr	r6, [r3, #4]
 801069e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80106a2:	9b07      	ldr	r3, [sp, #28]
 80106a4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80106a8:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 80106aa:	682b      	ldr	r3, [r5, #0]
 80106ac:	9a07      	ldr	r2, [sp, #28]
 80106ae:	4413      	add	r3, r2
 80106b0:	602b      	str	r3, [r5, #0]
}
 80106b2:	b008      	add	sp, #32
 80106b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106b8 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 80106b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80106bc:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 80106c0:	b085      	sub	sp, #20
 80106c2:	469a      	mov	sl, r3
 80106c4:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 80106c6:	69a3      	ldr	r3, [r4, #24]
{
 80106c8:	460e      	mov	r6, r1
 80106ca:	4691      	mov	r9, r2
 80106cc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 80106d0:	b943      	cbnz	r3, 80106e4 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 80106d2:	6843      	ldr	r3, [r0, #4]
 80106d4:	2201      	movs	r2, #1
 80106d6:	9200      	str	r2, [sp, #0]
 80106d8:	69df      	ldr	r7, [r3, #28]
 80106da:	68a1      	ldr	r1, [r4, #8]
 80106dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80106e0:	47b8      	blx	r7
 80106e2:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 80106e4:	6922      	ldr	r2, [r4, #16]
 80106e6:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 80106e8:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 80106ea:	4628      	mov	r0, r5
 80106ec:	9202      	str	r2, [sp, #8]
 80106ee:	f104 0218 	add.w	r2, r4, #24
 80106f2:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 80106f6:	9201      	str	r2, [sp, #4]
 80106f8:	68e2      	ldr	r2, [r4, #12]
 80106fa:	9200      	str	r2, [sp, #0]
 80106fc:	464a      	mov	r2, r9
 80106fe:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8010702:	4653      	mov	r3, sl
 8010704:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 8010706:	69a6      	ldr	r6, [r4, #24]
 8010708:	42be      	cmp	r6, r7
 801070a:	d910      	bls.n	801072e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 801070c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 8010710:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 8010712:	68e1      	ldr	r1, [r4, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801071a:	4628      	mov	r0, r5
 801071c:	4633      	mov	r3, r6
 801071e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8010722:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 8010724:	f8d8 3000 	ldr.w	r3, [r8]
 8010728:	4433      	add	r3, r6
 801072a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 801072e:	6922      	ldr	r2, [r4, #16]
 8010730:	69a3      	ldr	r3, [r4, #24]
 8010732:	4293      	cmp	r3, r2
 8010734:	d304      	bcc.n	8010740 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 8010736:	6963      	ldr	r3, [r4, #20]
 8010738:	4413      	add	r3, r2
 801073a:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	61a3      	str	r3, [r4, #24]
  }
}
 8010740:	b005      	add	sp, #20
 8010742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010746 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010746:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801074a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 801074e:	4607      	mov	r7, r0
 8010750:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8010752:	69a3      	ldr	r3, [r4, #24]
 8010754:	b93b      	cbnz	r3, 8010766 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8010756:	6842      	ldr	r2, [r0, #4]
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	69d5      	ldr	r5, [r2, #28]
 801075c:	68a1      	ldr	r1, [r4, #8]
 801075e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010762:	47a8      	blx	r5
 8010764:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 8010766:	6963      	ldr	r3, [r4, #20]
 8010768:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 801076a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 801076c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 801076e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8010770:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8010772:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010774:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010776:	429d      	cmp	r5, r3
 8010778:	bf28      	it	cs
 801077a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 801077c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801077e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010780:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010784:	429d      	cmp	r5, r3
 8010786:	bf28      	it	cs
 8010788:	461d      	movcs	r5, r3
 801078a:	68e3      	ldr	r3, [r4, #12]
 801078c:	9303      	str	r3, [sp, #12]
 801078e:	9803      	ldr	r0, [sp, #12]
 8010790:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8010794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010798:	4638      	mov	r0, r7
 801079a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801079e:	462b      	mov	r3, r5
 80107a0:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 80107a2:	6833      	ldr	r3, [r6, #0]
 80107a4:	442b      	add	r3, r5
 80107a6:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 80107a8:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 80107aa:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 80107ac:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 80107ae:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 80107b0:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 80107b2:	d304      	bcc.n	80107be <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 80107b4:	6963      	ldr	r3, [r4, #20]
 80107b6:	4413      	add	r3, r2
 80107b8:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	61a3      	str	r3, [r4, #24]
  }
}
 80107be:	b004      	add	sp, #16
 80107c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107c4 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107c4:	6843      	ldr	r3, [r0, #4]
 80107c6:	221c      	movs	r2, #28
{
 80107c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107ca:	681b      	ldr	r3, [r3, #0]
{
 80107cc:	b085      	sub	sp, #20
 80107ce:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107d0:	2101      	movs	r1, #1
{
 80107d2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107d4:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 80107d6:	4b15      	ldr	r3, [pc, #84]	; (801082c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 80107d8:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 80107da:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107de:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 80107e0:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 80107e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 80107e4:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 80107e8:	b1bb      	cbz	r3, 801081a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80107ea:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80107ee:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80107f0:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80107f2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80107f4:	6861      	ldr	r1, [r4, #4]
 80107f6:	4342      	muls	r2, r0
    if (need_full_buffer) {
 80107f8:	b18f      	cbz	r7, 801081e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 80107fa:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 80107fc:	4619      	mov	r1, r3
 80107fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010800:	9203      	str	r2, [sp, #12]
 8010802:	f007 fa10 	bl	8017c26 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8010806:	692b      	ldr	r3, [r5, #16]
 8010808:	2101      	movs	r1, #1
 801080a:	9a03      	ldr	r2, [sp, #12]
 801080c:	e9cd 0300 	strd	r0, r3, [sp]
 8010810:	4613      	mov	r3, r2
 8010812:	4620      	mov	r0, r4
 8010814:	4632      	mov	r2, r6
 8010816:	47b8      	blx	r7
 8010818:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 801081a:	b005      	add	sp, #20
 801081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 801081e:	688e      	ldr	r6, [r1, #8]
 8010820:	4620      	mov	r0, r4
 8010822:	2101      	movs	r1, #1
 8010824:	47b0      	blx	r6
 8010826:	60e8      	str	r0, [r5, #12]
}
 8010828:	e7f7      	b.n	801081a <jinit_d_post_controller+0x56>
 801082a:	bf00      	nop
 801082c:	080105dd 	.word	0x080105dd

08010830 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8010830:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010834:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8010838:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 801083a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 801083c:	661a      	str	r2, [r3, #96]	; 0x60
}
 801083e:	4770      	bx	lr

08010840 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 8010840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010844:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 8010848:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 801084a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 801084e:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010850:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 8010852:	4683      	mov	fp, r0
 8010854:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010856:	429a      	cmp	r2, r3
 8010858:	db10      	blt.n	801087c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 801085a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 801085e:	2600      	movs	r6, #0
 8010860:	f04f 0a58 	mov.w	sl, #88	; 0x58
 8010864:	9303      	str	r3, [sp, #12]
 8010866:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801086a:	9a03      	ldr	r2, [sp, #12]
 801086c:	fb0a 2106 	mla	r1, sl, r6, r2
 8010870:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8010874:	42b2      	cmp	r2, r6
 8010876:	dc32      	bgt.n	80108de <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 801087c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 801087e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8010880:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010882:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 801088a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 801088e:	1ace      	subs	r6, r1, r3
 8010890:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8010892:	428e      	cmp	r6, r1
 8010894:	bf28      	it	cs
 8010896:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010898:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 801089c:	4566      	cmp	r6, ip
 801089e:	bf28      	it	cs
 80108a0:	4666      	movcs	r6, ip
 80108a2:	9600      	str	r6, [sp, #0]
 80108a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80108a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80108aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80108ae:	f104 010c 	add.w	r1, r4, #12
 80108b2:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 80108b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4433      	add	r3, r6
 80108bc:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 80108be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80108c0:	1b9b      	subs	r3, r3, r6
 80108c2:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 80108c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80108c6:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 80108c8:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 80108cc:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 80108ce:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 80108d0:	bfa2      	ittt	ge
 80108d2:	682b      	ldrge	r3, [r5, #0]
 80108d4:	3301      	addge	r3, #1
 80108d6:	602b      	strge	r3, [r5, #0]
}
 80108d8:	b005      	add	sp, #20
 80108da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 80108de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108e0:	f103 0904 	add.w	r9, r3, #4
 80108e4:	682a      	ldr	r2, [r5, #0]
 80108e6:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 80108e8:	f853 0928 	ldr.w	r0, [r3], #-40
 80108ec:	4607      	mov	r7, r0
 80108ee:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 80108f2:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 80108f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80108f8:	4658      	mov	r0, fp
 80108fa:	47b8      	blx	r7
	 ci++, compptr++) {
 80108fc:	464b      	mov	r3, r9
 80108fe:	e7b4      	b.n	801086a <sep_upsample+0x2a>

08010900 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 8010900:	601a      	str	r2, [r3, #0]
}
 8010902:	4770      	bx	lr

08010904 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 8010904:	2200      	movs	r2, #0
 8010906:	601a      	str	r2, [r3, #0]
}
 8010908:	4770      	bx	lr

0801090a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 801090a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 801090c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 801090e:	2300      	movs	r3, #0
 8010910:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 8010914:	4299      	cmp	r1, r3
 8010916:	dc00      	bgt.n	801091a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 8010918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 801091a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 801091e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 8010920:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 8010924:	440c      	add	r4, r1
    while (outptr < outend) {
 8010926:	42a1      	cmp	r1, r4
 8010928:	d301      	bcc.n	801092e <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 801092a:	3301      	adds	r3, #1
 801092c:	e7f0      	b.n	8010910 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 801092e:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 8010932:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 8010936:	f801 6c01 	strb.w	r6, [r1, #-1]
 801093a:	e7f4      	b.n	8010926 <h2v1_upsample+0x1c>

0801093c <int_upsample>:
{
 801093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010940:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 8010942:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010944:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 8010948:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 801094a:	684b      	ldr	r3, [r1, #4]
 801094c:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 801094e:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 8010950:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 8010952:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 8010956:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801095a:	f108 33ff 	add.w	r3, r8, #4294967295
 801095e:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 8010960:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 8010964:	42a3      	cmp	r3, r4
 8010966:	dc02      	bgt.n	801096e <int_upsample+0x32>
}
 8010968:	b005      	add	sp, #20
 801096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 801096e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8010972:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 8010974:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 8010978:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 801097c:	454b      	cmp	r3, r9
 801097e:	d30e      	bcc.n	801099e <int_upsample+0x62>
    if (v_expand > 1) {
 8010980:	f1b8 0f01 	cmp.w	r8, #1
 8010984:	dd09      	ble.n	801099a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010986:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010988:	463a      	mov	r2, r7
 801098a:	4621      	mov	r1, r4
 801098c:	4638      	mov	r0, r7
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	9b03      	ldr	r3, [sp, #12]
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	1c63      	adds	r3, r4, #1
 8010996:	f007 f94e 	bl	8017c36 <jcopy_sample_rows>
    outrow += v_expand;
 801099a:	4444      	add	r4, r8
 801099c:	e7e0      	b.n	8010960 <int_upsample+0x24>
	*outptr++ = invalue;
 801099e:	4618      	mov	r0, r3
 80109a0:	4652      	mov	r2, sl
 80109a2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80109a6:	f01a f8c1 	bl	802ab2c <memset>
 80109aa:	4603      	mov	r3, r0
 80109ac:	4453      	add	r3, sl
 80109ae:	e7e5      	b.n	801097c <int_upsample+0x40>

080109b0 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 80109b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80109b4:	4605      	mov	r5, r0
 80109b6:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 80109b8:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 80109ba:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80109bc:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 80109c0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	dc02      	bgt.n	80109ce <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 80109c8:	b002      	add	sp, #8
 80109ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 80109ce:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 80109d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 80109d4:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 80109d8:	441a      	add	r2, r3
    while (outptr < outend) {
 80109da:	4293      	cmp	r3, r2
 80109dc:	d30a      	bcc.n	80109f4 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80109de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80109e0:	4621      	mov	r1, r4
 80109e2:	4632      	mov	r2, r6
 80109e4:	4630      	mov	r0, r6
 80109e6:	e9cd 8300 	strd	r8, r3, [sp]
 80109ea:	1c63      	adds	r3, r4, #1
    outrow += 2;
 80109ec:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80109ee:	f007 f922 	bl	8017c36 <jcopy_sample_rows>
    outrow += 2;
 80109f2:	e7e5      	b.n	80109c0 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 80109f4:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 80109f8:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 80109fc:	f803 0c01 	strb.w	r0, [r3, #-1]
 8010a00:	e7eb      	b.n	80109da <h2v2_upsample+0x2a>
	...

08010a04 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 8010a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010a08:	6843      	ldr	r3, [r0, #4]
 8010a0a:	22a0      	movs	r2, #160	; 0xa0
 8010a0c:	2101      	movs	r1, #1
{
 8010a0e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 8010a14:	4b3f      	ldr	r3, [pc, #252]	; (8010b14 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8010a16:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010a1a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 8010a1c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 8010a1e:	4b3e      	ldr	r3, [pc, #248]	; (8010b18 <jinit_upsampler+0x114>)
 8010a20:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 8010a22:	2300      	movs	r3, #0
 8010a24:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 8010a26:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010a2a:	b12b      	cbz	r3, 8010a38 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	221a      	movs	r2, #26
 8010a30:	4620      	mov	r0, r4
 8010a32:	615a      	str	r2, [r3, #20]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010a38:	f105 060c 	add.w	r6, r5, #12
 8010a3c:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 8010a40:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 8010a44:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 8010a48:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8010b28 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010a4c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 8010a50:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010b2c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010a54:	3574      	adds	r5, #116	; 0x74
 8010a56:	eb05 0308 	add.w	r3, r5, r8
 8010a5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	dc01      	bgt.n	8010a64 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 8010a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a66:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010a68:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010a6c:	4343      	muls	r3, r0
 8010a6e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010a72:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 8010a76:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010a7a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 8010a7e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 8010a82:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 8010a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a86:	b932      	cbnz	r2, 8010a96 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 8010a88:	4b24      	ldr	r3, [pc, #144]	; (8010b1c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 8010a8a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 8010a8c:	3758      	adds	r7, #88	; 0x58
 8010a8e:	3604      	adds	r6, #4
 8010a90:	f108 0801 	add.w	r8, r8, #1
 8010a94:	e7df      	b.n	8010a56 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010a96:	fb0c f20e 	mul.w	r2, ip, lr
 8010a9a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 8010a9e:	4559      	cmp	r1, fp
 8010aa0:	d103      	bne.n	8010aaa <jinit_upsampler+0xa6>
 8010aa2:	4283      	cmp	r3, r0
 8010aa4:	d101      	bne.n	8010aaa <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 8010aa6:	4b1e      	ldr	r3, [pc, #120]	; (8010b20 <jinit_upsampler+0x11c>)
 8010aa8:	e7ef      	b.n	8010a8a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 8010aaa:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 8010aae:	d119      	bne.n	8010ae4 <jinit_upsampler+0xe0>
 8010ab0:	4283      	cmp	r3, r0
 8010ab2:	d111      	bne.n	8010ad8 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 8010ab4:	4b1b      	ldr	r3, [pc, #108]	; (8010b24 <jinit_upsampler+0x120>)
 8010ab6:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010ab8:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010aba:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8010abe:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010ac0:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010ac4:	f007 f8af 	bl	8017c26 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010ac8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010acc:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010ace:	2101      	movs	r1, #1
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	47d8      	blx	fp
 8010ad4:	6030      	str	r0, [r6, #0]
 8010ad6:	e7d9      	b.n	8010a8c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 8010ad8:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8010adc:	d102      	bne.n	8010ae4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 8010ade:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 8010ae2:	e7e9      	b.n	8010ab8 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 8010ae4:	fb9b f2f1 	sdiv	r2, fp, r1
 8010ae8:	fb01 b112 	mls	r1, r1, r2, fp
 8010aec:	b959      	cbnz	r1, 8010b06 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 8010aee:	fb90 f1f3 	sdiv	r1, r0, r3
 8010af2:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 8010af6:	b933      	cbnz	r3, 8010b06 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 8010af8:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 8010afc:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 8010b00:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 8010b04:	e7d8      	b.n	8010ab8 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 8010b06:	6823      	ldr	r3, [r4, #0]
 8010b08:	2227      	movs	r2, #39	; 0x27
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	615a      	str	r2, [r3, #20]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4798      	blx	r3
    if (need_buffer) {
 8010b12:	e7d1      	b.n	8010ab8 <jinit_upsampler+0xb4>
 8010b14:	08010831 	.word	0x08010831
 8010b18:	08010841 	.word	0x08010841
 8010b1c:	08010905 	.word	0x08010905
 8010b20:	08010901 	.word	0x08010901
 8010b24:	0801090b 	.word	0x0801090b
 8010b28:	0801093d 	.word	0x0801093d
 8010b2c:	080109b1 	.word	0x080109b1

08010b30 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 8010b30:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 8010b32:	6803      	ldr	r3, [r0, #0]
{
 8010b34:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	4669      	mov	r1, sp
 8010b3a:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 8010b3c:	b033      	add	sp, #204	; 0xcc
 8010b3e:	f85d fb04 	ldr.w	pc, [sp], #4

08010b42 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 8010b42:	2900      	cmp	r1, #0
{
 8010b44:	4603      	mov	r3, r0
 8010b46:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 8010b48:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 8010b4a:	da0b      	bge.n	8010b64 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 8010b4c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8010b4e:	b112      	cbz	r2, 8010b56 <emit_message+0x14>
 8010b50:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8010b52:	2a02      	cmp	r2, #2
 8010b54:	dd02      	ble.n	8010b5c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 8010b56:	68a2      	ldr	r2, [r4, #8]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 8010b5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010b5e:	3301      	adds	r3, #1
 8010b60:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 8010b62:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 8010b64:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010b66:	428b      	cmp	r3, r1
 8010b68:	dbfb      	blt.n	8010b62 <emit_message+0x20>
      (*err->output_message) (cinfo);
 8010b6a:	68a3      	ldr	r3, [r4, #8]
}
 8010b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 8010b70:	4718      	bx	r3

08010b72 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 8010b72:	6803      	ldr	r3, [r0, #0]
 8010b74:	2200      	movs	r2, #0
 8010b76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 8010b78:	615a      	str	r2, [r3, #20]
}
 8010b7a:	4770      	bx	lr

08010b7c <format_message>:
{
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 8010b80:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 8010b82:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010b84:	2b00      	cmp	r3, #0
{
 8010b86:	b530      	push	{r4, r5, lr}
 8010b88:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010b8a:	dd1f      	ble.n	8010bcc <format_message+0x50>
 8010b8c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8010b8e:	4299      	cmp	r1, r3
 8010b90:	db1c      	blt.n	8010bcc <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 8010b92:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8010b94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 8010b98:	b911      	cbnz	r1, 8010ba0 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 8010b9a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 8010b9c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8010b9e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 8010ba0:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 8010ba2:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010ba6:	b9fc      	cbnz	r4, 8010be8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 8010ba8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010baa:	9305      	str	r3, [sp, #20]
 8010bac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010bae:	9304      	str	r3, [sp, #16]
 8010bb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010bb2:	9303      	str	r3, [sp, #12]
 8010bb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010bb6:	9302      	str	r3, [sp, #8]
 8010bb8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010bba:	9301      	str	r3, [sp, #4]
 8010bbc:	6a13      	ldr	r3, [r2, #32]
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8010bc4:	f01a fc46 	bl	802b454 <siprintf>
}
 8010bc8:	b007      	add	sp, #28
 8010bca:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 8010bcc:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8010bce:	2c00      	cmp	r4, #0
 8010bd0:	d0e3      	beq.n	8010b9a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010bd2:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	dce0      	bgt.n	8010b9a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010bd8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 8010bdc:	429d      	cmp	r5, r3
 8010bde:	dbdc      	blt.n	8010b9a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8010be0:	1a59      	subs	r1, r3, r1
 8010be2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010be6:	e7d7      	b.n	8010b98 <format_message+0x1c>
    if (ch == '%') {
 8010be8:	2c25      	cmp	r4, #37	; 0x25
 8010bea:	d1da      	bne.n	8010ba2 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	2b73      	cmp	r3, #115	; 0x73
 8010bf0:	d1da      	bne.n	8010ba8 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 8010bf2:	3218      	adds	r2, #24
}
 8010bf4:	b007      	add	sp, #28
 8010bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 8010bfa:	f01a bc2b 	b.w	802b454 <siprintf>

08010bfe <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 8010bfe:	6803      	ldr	r3, [r0, #0]
{
 8010c00:	b510      	push	{r4, lr}
 8010c02:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	4798      	blx	r3
  jpeg_destroy(cinfo);
 8010c08:	4620      	mov	r0, r4
}
 8010c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 8010c0e:	f7f9 bf03 	b.w	800aa18 <jpeg_destroy>
	...

08010c14 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 8010c14:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 8010c16:	490b      	ldr	r1, [pc, #44]	; (8010c44 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 8010c18:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 8010c1a:	4a0b      	ldr	r2, [pc, #44]	; (8010c48 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 8010c1c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 8010c1e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 8010c20:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 8010c22:	4a0a      	ldr	r2, [pc, #40]	; (8010c4c <jpeg_std_error+0x38>)
 8010c24:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 8010c26:	4a0a      	ldr	r2, [pc, #40]	; (8010c50 <jpeg_std_error+0x3c>)
 8010c28:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 8010c2a:	4a0a      	ldr	r2, [pc, #40]	; (8010c54 <jpeg_std_error+0x40>)
 8010c2c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 8010c2e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 8010c30:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8010c34:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 8010c36:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 8010c3a:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 8010c3e:	4770      	bx	lr
 8010c40:	08010bff 	.word	0x08010bff
 8010c44:	0803003c 	.word	0x0803003c
 8010c48:	08010b43 	.word	0x08010b43
 8010c4c:	08010b31 	.word	0x08010b31
 8010c50:	08010b7d 	.word	0x08010b7d
 8010c54:	08010b73 	.word	0x08010b73

08010c58 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8010c5c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 8010c60:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8010c62:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010c66:	3a02      	subs	r2, #2
 8010c68:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 8010c6c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010c6e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8010f64 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010c72:	ed9f 4abd 	vldr	s8, [pc, #756]	; 8010f68 <jpeg_idct_float+0x310>
 8010c76:	eddf 4abd 	vldr	s9, [pc, #756]	; 8010f6c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010c7a:	eddf 3abd 	vldr	s7, [pc, #756]	; 8010f70 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010c7e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 8010c82:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010c84:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010c88:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 8010c8c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010c90:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8010c94:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8010c98:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c9c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 8010ca0:	ecbc 7a01 	vldmia	ip!, {s14}
 8010ca4:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010ca8:	ea4e 0b09 	orr.w	fp, lr, r9
 8010cac:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010cb4:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010cbc:	ea41 0b0b 	orr.w	fp, r1, fp
 8010cc0:	ea45 0b0b 	orr.w	fp, r5, fp
 8010cc4:	ea50 0b0b 	orrs.w	fp, r0, fp
 8010cc8:	f040 80c0 	bne.w	8010e4c <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 8010ccc:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010cd0:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010cd4:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010cd8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8010cdc:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010ce0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010ce4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010ce8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010cec:	45e2      	cmp	sl, ip
 8010cee:	d1c6      	bne.n	8010c7e <jpeg_idct_float+0x26>
 8010cf0:	1f1c      	subs	r4, r3, #4
 8010cf2:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8010cf6:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010cf8:	eddf 2a9e 	vldr	s5, [pc, #632]	; 8010f74 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010cfc:	eddf 4a99 	vldr	s9, [pc, #612]	; 8010f64 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010d00:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8010f68 <jpeg_idct_float+0x310>
 8010d04:	ed9f 4a99 	vldr	s8, [pc, #612]	; 8010f6c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010d08:	eddf 3a99 	vldr	s7, [pc, #612]	; 8010f70 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010d0c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010d10:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 8010d12:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010d16:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 8010d1a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 8010d1e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010d22:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 8010d26:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 8010d2a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 8010d2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 8010d30:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 8010d34:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010d36:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 8010d38:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010d3c:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d42:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 8010d46:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 8010d4a:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 8010d4e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8010d52:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 8010d56:	ed52 7a03 	vldr	s15, [r2, #-12]
 8010d5a:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 8010d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 8010d62:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 8010d66:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 8010d6a:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 8010d6e:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 8010d72:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 8010d76:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8010d7a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010d7e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010d82:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010d86:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010d8a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010d8e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 8010d92:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 8010d96:	eef0 1a67 	vmov.f32	s3, s15
 8010d9a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010d9e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010da2:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010da6:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010daa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 8010dae:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010db2:	ee12 3a10 	vmov	r3, s4
 8010db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010dba:	5cf3      	ldrb	r3, [r6, r3]
 8010dbc:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010dbe:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010dc2:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010dca:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010dce:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010dd2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010dd4:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010dd8:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010dda:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010dde:	ee16 3a10 	vmov	r3, s12
 8010de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010de6:	5cf3      	ldrb	r3, [r6, r3]
 8010de8:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010dea:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010dee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010df6:	5cf3      	ldrb	r3, [r6, r3]
 8010df8:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010dfa:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010dfe:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8010e0a:	5cf3      	ldrb	r3, [r6, r3]
 8010e0c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010e0e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010e12:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010e16:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010e22:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010e24:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8010e28:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8010e2a:	ee17 3a90 	vmov	r3, s15
 8010e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e32:	5cf3      	ldrb	r3, [r6, r3]
 8010e34:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8010e36:	ee17 3a10 	vmov	r3, s14
 8010e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e3e:	5cf3      	ldrb	r3, [r6, r3]
 8010e40:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010e42:	f47f af63 	bne.w	8010d0c <jpeg_idct_float+0xb4>
  }
}
 8010e46:	b041      	add	sp, #260	; 0x104
 8010e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e4c:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e50:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e54:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e5c:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e60:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e64:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e68:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e6c:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e74:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e78:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e7c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010e80:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 8010e84:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010e88:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010e8c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010e90:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010e94:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010e98:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8010e9c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 8010ea0:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010ea4:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010ea8:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 8010eac:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 8010eb0:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010eb4:	ee07 ea90 	vmov	s15, lr
 8010eb8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010ebc:	ee07 8a90 	vmov	s15, r8
 8010ec0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010ec4:	ee07 1a90 	vmov	s15, r1
 8010ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ed0:	ee07 0a10 	vmov	s14, r0
 8010ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010ed8:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010edc:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 8010ee0:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010ee4:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 8010ee8:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 8010eec:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 8010ef0:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010ef4:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010ef8:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 8010efc:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010f00:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010f04:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8010f08:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010f0c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010f10:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 8010f14:	eeb0 6a67 	vmov.f32	s12, s15
 8010f18:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8010f1c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8010f20:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8010f24:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8010f28:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8010f2c:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8010f30:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010f34:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 8010f38:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8010f3c:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8010f40:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8010f44:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010f48:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8010f4c:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8010f50:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8010f54:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8010f58:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8010f5c:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 8010f60:	e6c4      	b.n	8010cec <jpeg_idct_float+0x94>
 8010f62:	bf00      	nop
 8010f64:	3fb504f3 	.word	0x3fb504f3
 8010f68:	3f8a8bd4 	.word	0x3f8a8bd4
 8010f6c:	3fec835e 	.word	0x3fec835e
 8010f70:	40273d75 	.word	0x40273d75
 8010f74:	43008000 	.word	0x43008000

08010f78 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 8010f7e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010f80:	3a02      	subs	r2, #2
{
 8010f82:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f84:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010f88:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010f8c:	f105 0320 	add.w	r3, r5, #32
 8010f90:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010f92:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010f94:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8010f98:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010f9a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 8010f9e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010fa2:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 8010fa6:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010faa:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8010fae:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010fb2:	f855 0b04 	ldr.w	r0, [r5], #4
 8010fb6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010fba:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010fbc:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010fbe:	ea46 000c 	orr.w	r0, r6, ip
 8010fc2:	4338      	orrs	r0, r7
 8010fc4:	ea4a 0000 	orr.w	r0, sl, r0
 8010fc8:	4308      	orrs	r0, r1
 8010fca:	ea4e 0000 	orr.w	r0, lr, r0
 8010fce:	ea58 0100 	orrs.w	r1, r8, r0
 8010fd2:	d146      	bne.n	8011062 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 8010fd4:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010fd8:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010fda:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010fdc:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8010fde:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010fe0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010fe4:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010fe8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010fec:	9903      	ldr	r1, [sp, #12]
 8010fee:	42a9      	cmp	r1, r5
 8010ff0:	d1d0      	bne.n	8010f94 <jpeg_idct_ifast+0x1c>
 8010ff2:	9b02      	ldr	r3, [sp, #8]
 8010ff4:	f1a3 0b04 	sub.w	fp, r3, #4
 8010ff8:	331c      	adds	r3, #28
 8010ffa:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010ffc:	ab04      	add	r3, sp, #16
 8010ffe:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011000:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8011002:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011006:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 8011008:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801100c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801100e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011010:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 8011014:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011016:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801101a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801101e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8011022:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011024:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011026:	ea47 0708 	orr.w	r7, r7, r8
 801102a:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 801102e:	4327      	orrs	r7, r4
 8011030:	ea47 070c 	orr.w	r7, r7, ip
 8011034:	ea57 0502 	orrs.w	r5, r7, r2
 8011038:	d17e      	bne.n	8011138 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 801103a:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 801103e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011040:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 8011044:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 8011048:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 801104a:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 801104c:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 801104e:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 8011050:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 8011052:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 8011054:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011056:	9b02      	ldr	r3, [sp, #8]
 8011058:	455b      	cmp	r3, fp
 801105a:	d1d1      	bne.n	8011000 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 801105c:	b045      	add	sp, #276	; 0x114
 801105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011062:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011064:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011068:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801106c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 801106e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011072:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8011076:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 801107a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 801107e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8011082:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011086:	ebac 0000 	sub.w	r0, ip, r0
 801108a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801108c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011090:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 8011094:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 8011098:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 801109c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801109e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80110a0:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 80110a4:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110a6:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110a8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110aa:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110ac:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110ae:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80110b2:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110b4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 80110b8:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 80110bc:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 80110c0:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 80110c2:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 80110c6:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80110c8:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 80110ca:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80110ce:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80110d2:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80110d4:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 80110d8:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80110da:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 80110de:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80110e2:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80110e6:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80110e8:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80110ea:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80110ee:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80110f0:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80110f2:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80110f6:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 80110fa:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 80110fe:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8011102:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8011106:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 801110a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 801110e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8011110:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8011114:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8011118:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 801111a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 801111c:	4459      	add	r1, fp
 801111e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8011120:	9900      	ldr	r1, [sp, #0]
 8011122:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8011126:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 801112a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 801112e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8011132:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8011134:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 8011136:	e759      	b.n	8010fec <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 8011138:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 801113c:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 8011140:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 8011144:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011148:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 801114c:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011150:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011152:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 8011154:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8011156:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 801115a:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 801115e:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 8011162:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011164:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 8011166:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801116a:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 801116e:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 8011172:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011176:	f240 15d9 	movw	r5, #473	; 0x1d9
 801117a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801117e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 8011182:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011184:	9d01      	ldr	r5, [sp, #4]
 8011186:	1b64      	subs	r4, r4, r5
 8011188:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801118c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801118e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011190:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011194:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011198:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801119a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801119c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80111a0:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 80111a2:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80111a6:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80111aa:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80111ae:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 80111b2:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 80111b6:	44a6      	add	lr, r4
			    & RANGE_MASK];
 80111b8:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80111bc:	f819 2002 	ldrb.w	r2, [r9, r2]
 80111c0:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80111c4:	f819 200c 	ldrb.w	r2, [r9, ip]
 80111c8:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80111ca:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80111cc:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80111ce:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 80111d2:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80111d6:	f819 2002 	ldrb.w	r2, [r9, r2]
 80111da:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80111dc:	f819 3007 	ldrb.w	r3, [r9, r7]
 80111e0:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80111e2:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80111e4:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 80111e6:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 80111ea:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80111ee:	f819 3003 	ldrb.w	r3, [r9, r3]
 80111f2:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80111f4:	f819 3001 	ldrb.w	r3, [r9, r1]
 80111f8:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80111fa:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 80111fe:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 8011202:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8011206:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801120a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801120e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8011210:	f819 300e 	ldrb.w	r3, [r9, lr]
 8011214:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011216:	e71e      	b.n	8011056 <jpeg_idct_ifast+0xde>

08011218 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801121e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011220:	3a02      	subs	r2, #2
{
 8011222:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8011224:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011226:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801122a:	3380      	adds	r3, #128	; 0x80
 801122c:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801122e:	f105 0320 	add.w	r3, r5, #32
 8011232:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011234:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8011238:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801123a:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801123e:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8011242:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011246:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 801124a:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801124e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011252:	f855 3b04 	ldr.w	r3, [r5], #4
 8011256:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 801125a:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801125c:	ea4a 030b 	orr.w	r3, sl, fp
 8011260:	ea4e 0303 	orr.w	r3, lr, r3
 8011264:	433b      	orrs	r3, r7
 8011266:	ea48 0303 	orr.w	r3, r8, r3
 801126a:	4333      	orrs	r3, r6
 801126c:	ea59 0303 	orrs.w	r3, r9, r3
 8011270:	d145      	bne.n	80112fe <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011272:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8011274:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011278:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 801127a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801127c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801127e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8011280:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011284:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011288:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801128c:	9b05      	ldr	r3, [sp, #20]
 801128e:	42ab      	cmp	r3, r5
 8011290:	d1d0      	bne.n	8011234 <jpeg_idct_islow+0x1c>
 8011292:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8011294:	ad06      	add	r5, sp, #24
 8011296:	f1a3 0904 	sub.w	r9, r3, #4
 801129a:	331c      	adds	r3, #28
 801129c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801129e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80112a2:	9a50      	ldr	r2, [sp, #320]	; 0x140
 80112a4:	9302      	str	r3, [sp, #8]
 80112a6:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80112a8:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80112ac:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 80112b0:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80112b4:	ea4a 0200 	orr.w	r2, sl, r0
 80112b8:	ea42 020e 	orr.w	r2, r2, lr
 80112bc:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 80112c0:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80112c2:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80112c6:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80112ca:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80112cc:	430a      	orrs	r2, r1
 80112ce:	ea52 020c 	orrs.w	r2, r2, ip
 80112d2:	f040 8098 	bne.w	8011406 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80112d6:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 80112d8:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 80112dc:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80112de:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 80112e0:	9902      	ldr	r1, [sp, #8]
 80112e2:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 80112e4:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 80112e6:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 80112e8:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 80112ea:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 80112ec:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 80112ee:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 80112f0:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80112f2:	9b05      	ldr	r3, [sp, #20]
 80112f4:	454b      	cmp	r3, r9
 80112f6:	d1d2      	bne.n	801129e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80112f8:	b047      	add	sp, #284	; 0x11c
 80112fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112fe:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8011300:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011304:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8011308:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801130a:	f241 1651 	movw	r6, #4433	; 0x1151
 801130e:	eb0b 0300 	add.w	r3, fp, r0
 8011312:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8011314:	f641 067e 	movw	r6, #6270	; 0x187e
 8011318:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801131c:	4e7a      	ldr	r6, [pc, #488]	; (8011508 <jpeg_idct_islow+0x2f0>)
 801131e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8011322:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011324:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801132a:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 801132c:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8011330:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8011334:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8011338:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801133c:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 801133e:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 8011340:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 8011342:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011344:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011348:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 801134c:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801134e:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011352:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011356:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801135a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801135e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8011360:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8011364:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8011368:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801136c:	1930      	adds	r0, r6, r4
 801136e:	4358      	muls	r0, r3
    z2 += z1;
 8011370:	4b66      	ldr	r3, [pc, #408]	; (801150c <jpeg_idct_islow+0x2f4>)
 8011372:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8011376:	4b66      	ldr	r3, [pc, #408]	; (8011510 <jpeg_idct_islow+0x2f8>)
 8011378:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801137c:	eb09 040a 	add.w	r4, r9, sl
 8011380:	4b64      	ldr	r3, [pc, #400]	; (8011514 <jpeg_idct_islow+0x2fc>)
 8011382:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8011384:	f640 138e 	movw	r3, #2446	; 0x98e
 8011388:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801138c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801138e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8011392:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011396:	4b60      	ldr	r3, [pc, #384]	; (8011518 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8011398:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801139c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80113a0:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80113a4:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80113a8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 80113aa:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80113ac:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80113ae:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80113b2:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 80113b6:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80113ba:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80113be:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80113c2:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80113c4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80113c6:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80113ca:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80113ce:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80113d2:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80113d6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80113d8:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80113dc:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80113de:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80113e0:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80113e2:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80113e4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80113e6:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80113ea:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80113ec:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80113ee:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80113f0:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80113f2:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80113f6:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80113f8:	9b02      	ldr	r3, [sp, #8]
 80113fa:	eba3 0909 	sub.w	r9, r3, r9
 80113fe:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8011402:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8011404:	e742      	b.n	801128c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011406:	1842      	adds	r2, r0, r1
 8011408:	f241 1451 	movw	r4, #4433	; 0x1151
 801140c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801140e:	f641 047e 	movw	r4, #6270	; 0x187e
 8011412:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011416:	4c3c      	ldr	r4, [pc, #240]	; (8011508 <jpeg_idct_islow+0x2f0>)
 8011418:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 801141c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 801141e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 8011420:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8011424:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 8011428:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 801142c:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8011430:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 8011432:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 8011436:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 801143a:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801143c:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8011440:	1821      	adds	r1, r4, r0
 8011442:	4351      	muls	r1, r2
    z2 += z1;
 8011444:	4a31      	ldr	r2, [pc, #196]	; (801150c <jpeg_idct_islow+0x2f4>)
 8011446:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 801144a:	4a31      	ldr	r2, [pc, #196]	; (8011510 <jpeg_idct_islow+0x2f8>)
 801144c:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011450:	eb0a 000c 	add.w	r0, sl, ip
 8011454:	4a2f      	ldr	r2, [pc, #188]	; (8011514 <jpeg_idct_islow+0x2fc>)
 8011456:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 8011458:	f640 128e 	movw	r2, #2446	; 0x98e
 801145c:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 8011460:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8011462:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 8011466:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801146a:	4a2b      	ldr	r2, [pc, #172]	; (8011518 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 801146c:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011470:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8011474:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011478:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801147c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 801147e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8011480:	4454      	add	r4, sl
 8011482:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8011486:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801148a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 801148e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011492:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8011494:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011498:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801149a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801149e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 80114a2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80114a6:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 80114a8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80114ac:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80114b0:	9a01      	ldr	r2, [sp, #4]
 80114b2:	5dd0      	ldrb	r0, [r2, r7]
 80114b4:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80114b6:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 80114b8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80114bc:	5c10      	ldrb	r0, [r2, r0]
 80114be:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80114c0:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80114c4:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80114c6:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80114c8:	eb02 000b 	add.w	r0, r2, fp
 80114cc:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 80114ce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80114d2:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80114d4:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80114d6:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80114d8:	eba2 010b 	sub.w	r1, r2, fp
 80114dc:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 80114de:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80114e2:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80114e4:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80114e6:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80114e8:	9a03      	ldr	r2, [sp, #12]
 80114ea:	4462      	add	r2, ip
			    & RANGE_MASK];
 80114ec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80114f0:	5c8a      	ldrb	r2, [r1, r2]
 80114f2:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80114f4:	9a03      	ldr	r2, [sp, #12]
 80114f6:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 80114fa:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80114fe:	f811 200c 	ldrb.w	r2, [r1, ip]
 8011502:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011504:	e6f5      	b.n	80112f2 <jpeg_idct_islow+0xda>
 8011506:	bf00      	nop
 8011508:	ffffc4df 	.word	0xffffc4df
 801150c:	ffffc13b 	.word	0xffffc13b
 8011510:	fffff384 	.word	0xfffff384
 8011514:	ffffe333 	.word	0xffffe333
 8011518:	ffffadfd 	.word	0xffffadfd

0801151c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	b0b9      	sub	sp, #228	; 0xe4
 8011522:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011524:	1e96      	subs	r6, r2, #2
 8011526:	9304      	str	r3, [sp, #16]
 8011528:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801152a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801152e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011532:	3380      	adds	r3, #128	; 0x80
 8011534:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011536:	f102 030c 	add.w	r3, r2, #12
 801153a:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801153c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011540:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011544:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011548:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801154c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011550:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011552:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011556:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 801155a:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 801155c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011560:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011562:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8011564:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011566:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801156a:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801156e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8011572:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011574:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8011578:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801157c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011580:	eba4 010e 	sub.w	r1, r4, lr
 8011584:	f640 2212 	movw	r2, #2578	; 0xa12
 8011588:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801158c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801158e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011592:	eb09 0007 	add.w	r0, r9, r7
 8011596:	4410      	add	r0, r2
 8011598:	4a87      	ldr	r2, [pc, #540]	; (80117b8 <jpeg_idct_7x7+0x29c>)
 801159a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801159e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 80115a0:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80115a4:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80115a8:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80115ac:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80115b0:	fb02 1203 	mla	r2, r2, r3, r1
 80115b4:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80115b8:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80115bc:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80115c0:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80115c2:	4b7e      	ldr	r3, [pc, #504]	; (80117bc <jpeg_idct_7x7+0x2a0>)
 80115c4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80115c8:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 80115cc:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80115ce:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80115d0:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80115d4:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80115d6:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 80115d8:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80115da:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 80115de:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80115e2:	eb03 0904 	add.w	r9, r3, r4
 80115e6:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80115ea:	eba3 0904 	sub.w	r9, r3, r4
 80115ee:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80115f2:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80115f4:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80115f6:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80115fa:	4a71      	ldr	r2, [pc, #452]	; (80117c0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 80115fc:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8011600:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011602:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011606:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011608:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801160c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8011610:	44a1      	add	r9, r4
    tmp0 += z2;
 8011612:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011614:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011618:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801161a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801161c:	4453      	add	r3, sl
 801161e:	12db      	asrs	r3, r3, #11
 8011620:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801162a:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801162e:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011632:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011634:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011638:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801163c:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801163e:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011640:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011642:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011644:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011648:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801164a:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801164e:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011652:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011654:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011658:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 801165c:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8011660:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011664:	9b05      	ldr	r3, [sp, #20]
 8011666:	42b3      	cmp	r3, r6
 8011668:	f47f af68 	bne.w	801153c <jpeg_idct_7x7+0x20>
 801166c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 801166e:	ac07      	add	r4, sp, #28
 8011670:	f1a3 0904 	sub.w	r9, r3, #4
 8011674:	3318      	adds	r3, #24
 8011676:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011678:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801167c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 801167e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8011680:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8011684:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011686:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 801168a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801168c:	1b51      	subs	r1, r2, r5
 801168e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8011692:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011696:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801169a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801169e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 80116a2:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80116a6:	eba3 0c02 	sub.w	ip, r3, r2
 80116aa:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80116ae:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80116b0:	4941      	ldr	r1, [pc, #260]	; (80117b8 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80116b2:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80116b6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 80116ba:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80116be:	eb0e 000c 	add.w	r0, lr, ip
 80116c2:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 80116c6:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80116ca:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80116ce:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80116d2:	fb02 f208 	mul.w	r2, r2, r8
 80116d6:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80116da:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80116de:	4d37      	ldr	r5, [pc, #220]	; (80117bc <jpeg_idct_7x7+0x2a0>)
 80116e0:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 80116e4:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80116e8:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 80116ea:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80116ee:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80116f0:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80116f4:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80116f6:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80116f8:	f641 53ef 	movw	r3, #7663	; 0x1def
 80116fc:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011700:	eba2 050a 	sub.w	r5, r2, sl
 8011704:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011708:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801170a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801170c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801170e:	4b2c      	ldr	r3, [pc, #176]	; (80117c0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8011710:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8011714:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011716:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801171a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801171e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011720:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011724:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8011728:	4455      	add	r5, sl
    tmp0 += z2;
 801172a:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801172c:	fb0b 220e 	mla	r2, fp, lr, r2
 8011730:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011732:	eb01 020c 	add.w	r2, r1, ip
 8011736:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 8011738:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801173c:	5c9a      	ldrb	r2, [r3, r2]
 801173e:	9b04      	ldr	r3, [sp, #16]
 8011740:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011742:	9b02      	ldr	r3, [sp, #8]
 8011744:	eba3 0c0c 	sub.w	ip, r3, ip
 8011748:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801174a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801174e:	f813 200c 	ldrb.w	r2, [r3, ip]
 8011752:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011754:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011756:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8011758:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801175c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011760:	5c9a      	ldrb	r2, [r3, r2]
 8011762:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011764:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011766:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011768:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801176a:	eb03 020a 	add.w	r2, r3, sl
 801176e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8011770:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011774:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011776:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011778:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801177a:	eba3 0a0a 	sub.w	sl, r3, sl
 801177e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8011780:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011784:	f813 300a 	ldrb.w	r3, [r3, sl]
 8011788:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 801178a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801178e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011792:	f642 5341 	movw	r3, #11585	; 0x2d41
 8011796:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801179a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801179c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 80117a0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80117a4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80117a8:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 80117aa:	9b05      	ldr	r3, [sp, #20]
 80117ac:	454b      	cmp	r3, r9
 80117ae:	f47f af63 	bne.w	8011678 <jpeg_idct_7x7+0x15c>
  }
}
 80117b2:	b039      	add	sp, #228	; 0xe4
 80117b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b8:	ffffc515 	.word	0xffffc515
 80117bc:	ffffb0f1 	.word	0xffffb0f1
 80117c0:	ffffd3e1 	.word	0xffffd3e1

080117c4 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80117c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117c8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80117cc:	b0a7      	sub	sp, #156	; 0x9c
 80117ce:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80117d0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117d2:	3080      	adds	r0, #128	; 0x80
 80117d4:	320a      	adds	r2, #10
 80117d6:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80117d8:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117da:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80117dc:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80117de:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80117e2:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80117e6:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80117ea:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117ec:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80117f0:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117f2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80117f6:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117fa:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 80117fc:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80117fe:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011802:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011806:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801180a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801180e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8011810:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8011812:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011816:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8011818:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801181c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011820:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011822:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8011824:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011828:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 801182c:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801182e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011832:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011834:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011838:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801183c:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011840:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011844:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011848:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801184c:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011850:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8011854:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8011858:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801185c:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011860:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011864:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011868:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801186c:	12d2      	asrs	r2, r2, #11
 801186e:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011872:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011876:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8011878:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801187c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8011880:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011882:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011886:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801188a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801188c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801188e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011892:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011894:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011896:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8011898:	42b2      	cmp	r2, r6
 801189a:	d1a0      	bne.n	80117de <jpeg_idct_6x6+0x1a>
 801189c:	f1a3 0e04 	sub.w	lr, r3, #4
 80118a0:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 80118a4:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80118a6:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80118aa:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80118ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80118b0:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80118b2:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 80118b6:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 80118b8:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118bc:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80118c0:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80118c4:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118c8:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80118cc:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80118d0:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 80118d4:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80118d8:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80118dc:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80118e0:	f242 7231 	movw	r2, #10033	; 0x2731
 80118e4:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 80118e8:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 80118ec:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 80118f0:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80118f4:	eb04 0508 	add.w	r5, r4, r8
 80118f8:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80118fc:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8011900:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011904:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011908:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801190c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801190e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8011912:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8011916:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801191a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801191e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8011922:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8011926:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801192a:	5d04      	ldrb	r4, [r0, r4]
 801192c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801192e:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011932:	9800      	ldr	r0, [sp, #0]
 8011934:	5d84      	ldrb	r4, [r0, r6]
 8011936:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011938:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801193c:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8011940:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8011944:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011948:	5d04      	ldrb	r4, [r0, r4]
 801194a:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801194c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8011950:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011952:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011956:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 801195a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801195e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011962:	5cc3      	ldrb	r3, [r0, r3]
 8011964:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011966:	5d43      	ldrb	r3, [r0, r5]
 8011968:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 801196a:	d19c      	bne.n	80118a6 <jpeg_idct_6x6+0xe2>
  }
}
 801196c:	b027      	add	sp, #156	; 0x9c
 801196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011974 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011978:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801197c:	b09d      	sub	sp, #116	; 0x74
 801197e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011980:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011982:	3080      	adds	r0, #128	; 0x80
 8011984:	3208      	adds	r2, #8
 8011986:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011988:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801198a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801198e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011992:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011994:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011996:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801199a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801199c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119a0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119a4:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119a8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119ac:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119ae:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119b2:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 80119b4:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119b6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119ba:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80119be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119c2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80119c6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80119ca:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119ce:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119d2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80119d4:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80119d8:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119dc:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 80119e0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80119e2:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80119e6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80119ea:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80119ee:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80119f2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80119f6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80119f8:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80119fc:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8011a00:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011a02:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011a06:	483b      	ldr	r0, [pc, #236]	; (8011af4 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011a08:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011a0a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a0e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a12:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011a16:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011a18:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011a1c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a20:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a24:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011a28:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011a2c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011a30:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011a34:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011a38:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011a3c:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011a3e:	d1aa      	bne.n	8011996 <jpeg_idct_5x5+0x22>
 8011a40:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8011a44:	a903      	add	r1, sp, #12
 8011a46:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011a48:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011a4c:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8011a50:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8011a52:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011a56:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8011a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8011a5c:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 8011a5e:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8011a62:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a66:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 8011a6a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a6e:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8011a72:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8011a76:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011a7a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011a7c:	1b1b      	subs	r3, r3, r4
 8011a7e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011a82:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8011a86:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 8011a8a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 8011a8c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 8011a8e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011a90:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8011a94:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011a98:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011a9a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 8011a9e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011aa2:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011aa6:	4813      	ldr	r0, [pc, #76]	; (8011af4 <jpeg_idct_5x5+0x180>)
 8011aa8:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011aac:	eb05 0b06 	add.w	fp, r5, r6
 8011ab0:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011ab2:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8011ab4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8011ab8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011abc:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8011ac0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011ac2:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011ac6:	9800      	ldr	r0, [sp, #0]
 8011ac8:	5d45      	ldrb	r5, [r0, r5]
 8011aca:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011acc:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011ace:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8011ad0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8011ad4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011ad8:	5d45      	ldrb	r5, [r0, r5]
 8011ada:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8011adc:	5c82      	ldrb	r2, [r0, r2]
 8011ade:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8011ae0:	f810 300c 	ldrb.w	r3, [r0, ip]
 8011ae4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8011ae6:	9b01      	ldr	r3, [sp, #4]
 8011ae8:	4573      	cmp	r3, lr
 8011aea:	d1b2      	bne.n	8011a52 <jpeg_idct_5x5+0xde>
  }
}
 8011aec:	b01d      	add	sp, #116	; 0x74
 8011aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af2:	bf00      	nop
 8011af4:	ffffba5c 	.word	0xffffba5c

08011af8 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8011afe:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b00:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8011b04:	1e96      	subs	r6, r2, #2
 8011b06:	3c04      	subs	r4, #4
 8011b08:	1d97      	adds	r7, r2, #6
 8011b0a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011b0c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8011b0e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011b12:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011b16:	f8df c108 	ldr.w	ip, [pc, #264]	; 8011c20 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b1a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011b1e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b20:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b24:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011b28:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b2a:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b30:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b34:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b38:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8011b3c:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8011b40:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b44:	6a22      	ldr	r2, [r4, #32]
 8011b46:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011b4c:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8011b50:	eb0a 020b 	add.w	r2, sl, fp
 8011b54:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011b5c:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011b60:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011b64:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011b68:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011b6c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011b70:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011b74:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011b78:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011b7c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011b80:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011b84:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011b88:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8011b8a:	d1c6      	bne.n	8011b1a <jpeg_idct_4x4+0x22>
 8011b8c:	1f1e      	subs	r6, r3, #4
 8011b8e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8011b92:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011b94:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011b98:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011b9c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8011c20 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8011ba0:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8011ba4:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8011ba6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ba8:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8011bac:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 8011bae:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8011bb2:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8011bb6:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011bba:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8011bbe:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8011bc2:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8011bc6:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011bca:	eb01 020b 	add.w	r2, r1, fp
 8011bce:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011bd2:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011bd6:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011bda:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011bde:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011be2:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8011be4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011be8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 8011bea:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011bee:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8011bf2:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011bf6:	5c6b      	ldrb	r3, [r5, r1]
 8011bf8:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011bfa:	9b01      	ldr	r3, [sp, #4]
 8011bfc:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8011c00:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011c04:	5ceb      	ldrb	r3, [r5, r3]
 8011c06:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8011c0e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011c12:	5cab      	ldrb	r3, [r5, r2]
 8011c14:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8011c16:	d1c3      	bne.n	8011ba0 <jpeg_idct_4x4+0xa8>
  }
}
 8011c18:	b013      	add	sp, #76	; 0x4c
 8011c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1e:	bf00      	nop
 8011c20:	ffffc4df 	.word	0xffffc4df

08011c24 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c28:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011c2a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8011c2e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011c30:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011c34:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011c36:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011c3a:	f1a1 0c04 	sub.w	ip, r1, #4
 8011c3e:	1d10      	adds	r0, r2, #4
 8011c40:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011c42:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011c46:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c4a:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011c4e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c50:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c54:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011c58:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c5a:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c5e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c62:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c66:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 8011c6a:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c6e:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011c76:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c7a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 8011c7e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8011c82:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011c86:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011c8a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c8e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011c92:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011c96:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011c98:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011c9c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011ca0:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011ca4:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011ca6:	d1d0      	bne.n	8011c4a <jpeg_idct_3x3+0x26>
 8011ca8:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011caa:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8011cae:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011cb0:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8011cb4:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8011cb8:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8011cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011cbc:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8011cc0:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8011cc2:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cc6:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011cca:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011cce:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cd2:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011cd6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011cd8:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8011cdc:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8011ce0:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ce4:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011ce8:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8011cec:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8011cf0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8011cf4:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8011cf8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011cfc:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8011d00:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011d04:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8011d08:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8011d0a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8011d0e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8011d10:	d1d0      	bne.n	8011cb4 <jpeg_idct_3x3+0x90>
  }
}
 8011d12:	b00b      	add	sp, #44	; 0x2c
 8011d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d18 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011d1c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 8011d1e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011d20:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d24:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011d28:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011d2a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d2c:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d30:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d32:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011d34:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d36:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8011d38:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011d3a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 8011d3c:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8011d3e:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011d40:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011d44:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8011d48:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8011d4a:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011d4e:	437a      	muls	r2, r7
{
 8011d50:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 8011d52:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8011d54:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8011d56:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011d5a:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011d5c:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011d5e:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011d60:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011d62:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011d66:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011d6a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011d6e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011d72:	5d2c      	ldrb	r4, [r5, r4]
 8011d74:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011d78:	5c28      	ldrb	r0, [r5, r0]
 8011d7a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 8011d7e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011d82:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8011d84:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011d86:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011d88:	5c6b      	ldrb	r3, [r5, r1]
 8011d8a:	7063      	strb	r3, [r4, #1]
}
 8011d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d90 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8011d90:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011d92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011d96:	6809      	ldr	r1, [r1, #0]
 8011d98:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011d9a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8011d9e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011da0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8011da4:	440a      	add	r2, r1
 8011da6:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	9b00      	ldr	r3, [sp, #0]
 8011dae:	54d1      	strb	r1, [r2, r3]
}
 8011db0:	4770      	bx	lr
	...

08011db4 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	b0d1      	sub	sp, #324	; 0x144
 8011dba:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8011dbc:	1e96      	subs	r6, r2, #2
 8011dbe:	9306      	str	r3, [sp, #24]
 8011dc0:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011dc2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011dc6:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011dc8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011dcc:	f102 030e 	add.w	r3, r2, #14
 8011dd0:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011dd2:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011dd6:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011dd8:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ddc:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011de0:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011de4:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011de8:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011dea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011dee:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8011df2:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011df4:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011df6:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011dfe:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011e02:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011e04:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e08:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011e0c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 8011e0e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011e10:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011e14:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8011e18:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011e1a:	1a8b      	subs	r3, r1, r2
 8011e1c:	436b      	muls	r3, r5
 8011e1e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011e20:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8011e24:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011e26:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 8011e2a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011e2c:	188b      	adds	r3, r1, r2
 8011e2e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011e30:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8011e34:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011e36:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8011e3a:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8011e3c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8011e3e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8011e40:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8011e42:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8011e44:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011e46:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 8011e4a:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e4c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 8011e50:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8011e52:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e54:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011e56:	4b89      	ldr	r3, [pc, #548]	; (801207c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e58:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011e5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011e5c:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e5e:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8011e62:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e66:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011e6a:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011e6c:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e70:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011e74:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011e78:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011e7c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011e80:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011e84:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011e88:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011e8c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011e90:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011e94:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8011e98:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011e9c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8011ea0:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8011ea4:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8011ea8:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011eaa:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011eae:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8011eb2:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011eb4:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011eb6:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011eb8:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 8011eba:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011ebc:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011ec0:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011ec4:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011ec6:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011ec8:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011eca:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011ecc:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011ece:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011ed0:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011ed4:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011ed8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011eda:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011edc:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011ee0:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011ee4:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011ee8:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011eea:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8011eee:	9b05      	ldr	r3, [sp, #20]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	12db      	asrs	r3, r3, #11
 8011ef4:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8011ef6:	9b05      	ldr	r3, [sp, #20]
 8011ef8:	1a9a      	subs	r2, r3, r2
 8011efa:	12d2      	asrs	r2, r2, #11
 8011efc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8011f00:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8011f04:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8011f08:	12db      	asrs	r3, r3, #11
 8011f0a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f0c:	9b07      	ldr	r3, [sp, #28]
 8011f0e:	42b3      	cmp	r3, r6
 8011f10:	f47f af5f 	bne.w	8011dd2 <jpeg_idct_9x9+0x1e>
 8011f14:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8011f16:	aa08      	add	r2, sp, #32
 8011f18:	3b04      	subs	r3, #4
 8011f1a:	9301      	str	r3, [sp, #4]
 8011f1c:	9b06      	ldr	r3, [sp, #24]
 8011f1e:	3320      	adds	r3, #32
 8011f20:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011f22:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011f24:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8011f28:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011f2a:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011f2c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8011f30:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8011f34:	9106      	str	r1, [sp, #24]
 8011f36:	9301      	str	r3, [sp, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	995a      	ldr	r1, [sp, #360]	; 0x168
 8011f3c:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011f3e:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8011f42:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011f46:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011f4a:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8011f4e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011f52:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8011f56:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011f5a:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8011f5e:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011f60:	1a43      	subs	r3, r0, r1
 8011f62:	fb0c f303 	mul.w	r3, ip, r3
 8011f66:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011f68:	18f3      	adds	r3, r6, r3
 8011f6a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011f6c:	1843      	adds	r3, r0, r1
 8011f6e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011f70:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8011f74:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011f76:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8011f7a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8011f7c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8011f7e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8011f80:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8011f82:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8011f84:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011f86:	4f3d      	ldr	r7, [pc, #244]	; (801207c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8011f88:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8011f8a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 8011f8e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011f90:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8011f94:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011f96:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 8011f9a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011f9e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011fa0:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8011fa4:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011fa8:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011fac:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011fb0:	f640 737a 	movw	r3, #3962	; 0xf7a
 8011fb4:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011fb8:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8011fbc:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011fc0:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011fc4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8011fc8:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8011fcc:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011fd0:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8011fd2:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011fd4:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8011fd8:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011fda:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011fde:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011fe2:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8011fe6:	448e      	add	lr, r1
			    & RANGE_MASK];
 8011fe8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011fec:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ff0:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8011ff2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011ff6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8011ffa:	9b06      	ldr	r3, [sp, #24]
 8011ffc:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011ffe:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012000:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8012004:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012006:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801200a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801200e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8012010:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8012014:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012018:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801201c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801201e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8012022:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012024:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012026:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8012028:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 801202c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012030:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012034:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012036:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801203a:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801203c:	9b05      	ldr	r3, [sp, #20]
 801203e:	4473      	add	r3, lr
			    & RANGE_MASK];
 8012040:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8012044:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8012048:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 801204a:	9b05      	ldr	r3, [sp, #20]
 801204c:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 8012050:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8012054:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 8012058:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 801205a:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 801205c:	9b02      	ldr	r3, [sp, #8]
 801205e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 8012062:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8012066:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801206a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 801206c:	9b07      	ldr	r3, [sp, #28]
 801206e:	428b      	cmp	r3, r1
 8012070:	f47f af57 	bne.w	8011f22 <jpeg_idct_9x9+0x16e>
  }
}
 8012074:	b051      	add	sp, #324	; 0x144
 8012076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207a:	bf00      	nop
 801207c:	ffffd8cf 	.word	0xffffd8cf

08012080 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012084:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012088:	b0d7      	sub	sp, #348	; 0x15c
 801208a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801208c:	f1a2 0b02 	sub.w	fp, r2, #2
 8012090:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012092:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8012096:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012098:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801209a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801209c:	f102 030e 	add.w	r3, r2, #14
 80120a0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120a2:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80120a6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120aa:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120ae:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120b0:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120b4:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80120ba:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120be:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80120c0:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 80120c4:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80120c6:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80120ca:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80120ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80120d2:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 80120d4:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 80120d6:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80120d8:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120da:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80120de:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120e2:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80120e6:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120ea:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120ec:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80120f0:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80120f2:	19f3      	adds	r3, r6, r7
 80120f4:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80120f6:	f241 0071 	movw	r0, #4209	; 0x1071
 80120fa:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80120fe:	489d      	ldr	r0, [pc, #628]	; (8012374 <jpeg_idct_10x10+0x2f4>)
 8012100:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012104:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8012108:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801210a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 801210e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8012110:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012112:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8012116:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012118:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801211a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801211e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012120:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8012122:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012124:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012128:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801212a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 801212e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012132:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8012136:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8012138:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801213c:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801213e:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012142:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8012146:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801214a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 801214e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012152:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012156:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801215a:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801215e:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012160:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012162:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012166:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012168:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801216a:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801216e:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012172:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012174:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012178:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801217a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801217e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012182:	f241 468c 	movw	r6, #5260	; 0x148c
 8012186:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012188:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801218c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012190:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012194:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012198:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801219a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801219c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801219e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80121a2:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80121a6:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80121aa:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80121ac:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80121ae:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80121b0:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80121b2:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80121b6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80121b8:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80121ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 80121bc:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80121be:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 80121c2:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 80121c6:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80121ca:	9b02      	ldr	r3, [sp, #8]
 80121cc:	442b      	add	r3, r5
 80121ce:	12db      	asrs	r3, r3, #11
 80121d0:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80121d2:	9b02      	ldr	r3, [sp, #8]
 80121d4:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80121d6:	9b01      	ldr	r3, [sp, #4]
 80121d8:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80121da:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80121dc:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80121de:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80121e2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80121e4:	9b01      	ldr	r3, [sp, #4]
 80121e6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80121ea:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80121ec:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80121f0:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80121f2:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80121f6:	f47f af54 	bne.w	80120a2 <jpeg_idct_10x10+0x22>
 80121fa:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 80121fc:	a906      	add	r1, sp, #24
 80121fe:	f1a3 0b04 	sub.w	fp, r3, #4
 8012202:	3324      	adds	r3, #36	; 0x24
 8012204:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012206:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801220a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 801220e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012210:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8012212:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8012216:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012218:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801221c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801221e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012222:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012226:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801222a:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801222c:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 801222e:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012232:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8012234:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8012238:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801223c:	006d      	lsls	r5, r5, #1
 801223e:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8012242:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012246:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012248:	19eb      	adds	r3, r5, r7
 801224a:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801224c:	f241 0071 	movw	r0, #4209	; 0x1071
 8012250:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012254:	4847      	ldr	r0, [pc, #284]	; (8012374 <jpeg_idct_10x10+0x2f4>)
 8012256:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 801225a:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 801225e:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8012260:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8012264:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8012266:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8012268:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801226a:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 801226e:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8012270:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8012274:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8012278:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 801227c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801227e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012282:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8012286:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 801228a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801228e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012292:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8012296:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801229a:	f240 7014 	movw	r0, #1812	; 0x714
 801229e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80122a2:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80122a6:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80122a8:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80122ac:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80122b0:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80122b4:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80122b6:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80122b8:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80122bc:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80122be:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80122c2:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80122c6:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80122ca:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122ce:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80122d0:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80122d2:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122d4:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80122d6:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80122da:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122de:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122e2:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80122e6:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 80122e8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80122ec:	444d      	add	r5, r9
			    & RANGE_MASK];
 80122ee:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122f2:	5c82      	ldrb	r2, [r0, r2]
 80122f4:	9804      	ldr	r0, [sp, #16]
 80122f6:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122f8:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80122fa:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122fc:	f812 200c 	ldrb.w	r2, [r2, ip]
 8012300:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012302:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012304:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8012306:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801230a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801230e:	5c82      	ldrb	r2, [r0, r2]
 8012310:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012312:	5dc3      	ldrb	r3, [r0, r7]
 8012314:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012316:	9b01      	ldr	r3, [sp, #4]
 8012318:	4443      	add	r3, r8
			    & RANGE_MASK];
 801231a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801231e:	5cc3      	ldrb	r3, [r0, r3]
 8012320:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012322:	9b01      	ldr	r3, [sp, #4]
 8012324:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8012328:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801232c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8012330:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012332:	9b03      	ldr	r3, [sp, #12]
 8012334:	442b      	add	r3, r5
			    & RANGE_MASK];
 8012336:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801233a:	5cc3      	ldrb	r3, [r0, r3]
 801233c:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801233e:	9b03      	ldr	r3, [sp, #12]
 8012340:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8012342:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012346:	5d43      	ldrb	r3, [r0, r5]
 8012348:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801234a:	9b02      	ldr	r3, [sp, #8]
 801234c:	4453      	add	r3, sl
			    & RANGE_MASK];
 801234e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012352:	5cc3      	ldrb	r3, [r0, r3]
 8012354:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012356:	9b02      	ldr	r3, [sp, #8]
 8012358:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801235c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012360:	f810 300a 	ldrb.w	r3, [r0, sl]
 8012364:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8012366:	9b05      	ldr	r3, [sp, #20]
 8012368:	455b      	cmp	r3, fp
 801236a:	f47f af4c 	bne.w	8012206 <jpeg_idct_10x10+0x186>
  }
}
 801236e:	b057      	add	sp, #348	; 0x15c
 8012370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012374:	ffffba5c 	.word	0xffffba5c

08012378 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237c:	b0e5      	sub	sp, #404	; 0x194
 801237e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012380:	f1a2 0a02 	sub.w	sl, r2, #2
 8012384:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012386:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801238a:	3380      	adds	r3, #128	; 0x80
 801238c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801238e:	1f0b      	subs	r3, r1, #4
 8012390:	9302      	str	r3, [sp, #8]
 8012392:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8012396:	aa0c      	add	r2, sp, #48	; 0x30
 8012398:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801239a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801239c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123a0:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123a4:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123a6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80123aa:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123ae:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80123b0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80123b2:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80123b6:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80123b8:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80123bc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 80123c0:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80123c2:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80123c4:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123c8:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80123ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80123ce:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80123d0:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80123d4:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80123d6:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80123da:	eba4 0b06 	sub.w	fp, r4, r6
 80123de:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80123e2:	f640 55c9 	movw	r5, #3529	; 0xdc9
 80123e6:	436f      	muls	r7, r5
    z4 = z1 + z3;
 80123e8:	1985      	adds	r5, r0, r6
    z4 -= z2;
 80123ea:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80123ec:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80123f0:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 80123f4:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 80123f6:	449c      	add	ip, r3
 80123f8:	49d0      	ldr	r1, [pc, #832]	; (801273c <jpeg_idct_11x11+0x3c4>)
 80123fa:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80123fe:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012402:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012404:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012408:	49cd      	ldr	r1, [pc, #820]	; (8012740 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801240a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801240c:	fb01 3c00 	mla	ip, r1, r0, r3
 8012410:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012414:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012418:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801241c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 801241e:	49c9      	ldr	r1, [pc, #804]	; (8012744 <jpeg_idct_11x11+0x3cc>)
 8012420:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012424:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8012428:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801242c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012430:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8012432:	49c5      	ldr	r1, [pc, #788]	; (8012748 <jpeg_idct_11x11+0x3d0>)
 8012434:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012436:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801243a:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801243e:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012442:	1941      	adds	r1, r0, r5
 8012444:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012446:	9902      	ldr	r1, [sp, #8]
 8012448:	6a08      	ldr	r0, [r1, #32]
 801244a:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801244e:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012450:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012454:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012456:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 801245a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801245e:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8012462:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8012464:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012468:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801246c:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012470:	4435      	add	r5, r6
 8012472:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012474:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8012478:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801247a:	eb09 040c 	add.w	r4, r9, ip
 801247e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012482:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012486:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801248a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801248e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012490:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012494:	44c6      	add	lr, r8
 8012496:	49ad      	ldr	r1, [pc, #692]	; (801274c <jpeg_idct_11x11+0x3d4>)
 8012498:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 801249c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80124a0:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80124a4:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80124a8:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80124aa:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80124ae:	fb01 440c 	mla	r4, r1, ip, r4
 80124b2:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80124b4:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80124b6:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80124b8:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80124ba:	49a5      	ldr	r1, [pc, #660]	; (8012750 <jpeg_idct_11x11+0x3d8>)
 80124bc:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80124be:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 80124c2:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80124c4:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80124c8:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80124ca:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80124cc:	f242 000b 	movw	r0, #8203	; 0x200b
 80124d0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80124d4:	489f      	ldr	r0, [pc, #636]	; (8012754 <jpeg_idct_11x11+0x3dc>)
 80124d6:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80124da:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 80124de:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80124e2:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80124e6:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80124ea:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80124ec:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80124ee:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80124f2:	ea4f 20ee 	mov.w	r0, lr, asr #11
 80124f6:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80124fa:	eb01 0009 	add.w	r0, r1, r9
 80124fe:	12c0      	asrs	r0, r0, #11
 8012500:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012502:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012506:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012508:	12c0      	asrs	r0, r0, #11
 801250a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801250e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012510:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012512:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012514:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012516:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012518:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801251a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801251e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012522:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012526:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012528:	12c0      	asrs	r0, r0, #11
 801252a:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801252c:	ea4f 20e8 	mov.w	r0, r8, asr #11
 8012530:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012534:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012536:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012538:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801253a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801253c:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801253e:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012540:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012544:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012548:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 801254c:	12db      	asrs	r3, r3, #11
 801254e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012554:	4553      	cmp	r3, sl
 8012556:	f47f af20 	bne.w	801239a <jpeg_idct_11x11+0x22>
 801255a:	9b08      	ldr	r3, [sp, #32]
 801255c:	3b04      	subs	r3, #4
 801255e:	9303      	str	r3, [sp, #12]
 8012560:	9b08      	ldr	r3, [sp, #32]
 8012562:	3328      	adds	r3, #40	; 0x28
 8012564:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8012566:	ab0c      	add	r3, sp, #48	; 0x30
 8012568:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801256a:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801256c:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8012570:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012572:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8012576:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801257a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 801257e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8012580:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8012582:	9109      	str	r1, [sp, #36]	; 0x24
 8012584:	9303      	str	r3, [sp, #12]
 8012586:	460b      	mov	r3, r1
 8012588:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801258a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 801258c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801258e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012590:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8012592:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012594:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012598:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801259c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801259e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80125a2:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80125a4:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80125a6:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 80125aa:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 80125ac:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 80125ae:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80125b0:	f642 306c 	movw	r0, #11116	; 0x2b6c
 80125b4:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80125b8:	eb0e 000c 	add.w	r0, lr, ip
 80125bc:	4a5f      	ldr	r2, [pc, #380]	; (801273c <jpeg_idct_11x11+0x3c4>)
 80125be:	4418      	add	r0, r3
 80125c0:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125c4:	f244 30b5 	movw	r0, #17333	; 0x43b5
 80125c8:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80125cc:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125ce:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80125d2:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80125d4:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80125d6:	4a5a      	ldr	r2, [pc, #360]	; (8012740 <jpeg_idct_11x11+0x3c8>)
 80125d8:	fb02 3e04 	mla	lr, r2, r4, r3
 80125dc:	eb0e 020c 	add.w	r2, lr, ip
 80125e0:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 80125e2:	4a58      	ldr	r2, [pc, #352]	; (8012744 <jpeg_idct_11x11+0x3cc>)
 80125e4:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80125e8:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 80125ec:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80125f0:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80125f4:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80125f6:	4a54      	ldr	r2, [pc, #336]	; (8012748 <jpeg_idct_11x11+0x3d0>)
 80125f8:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80125fa:	fb07 4406 	mla	r4, r7, r6, r4
 80125fe:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012600:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012604:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8012606:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8012608:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 801260c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 801260e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8012612:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8012616:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801261a:	4a4c      	ldr	r2, [pc, #304]	; (801274c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801261c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012620:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012624:	4466      	add	r6, ip
 8012626:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012628:	f641 456a 	movw	r5, #7274	; 0x1c6a
 801262c:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801262e:	eb07 0508 	add.w	r5, r7, r8
 8012632:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012636:	f640 35b8 	movw	r5, #3000	; 0xbb8
 801263a:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 801263e:	eb04 050b 	add.w	r5, r4, fp
 8012642:	444d      	add	r5, r9
 8012644:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012648:	eb0e 0508 	add.w	r5, lr, r8
 801264c:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8012650:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012654:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012656:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801265a:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801265e:	4a3c      	ldr	r2, [pc, #240]	; (8012750 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012660:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012662:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012666:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012668:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801266c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801266e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8012670:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012672:	fb0b 440c 	mla	r4, fp, ip, r4
 8012676:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012678:	f242 040b 	movw	r4, #8203	; 0x200b
 801267c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012680:	4c34      	ldr	r4, [pc, #208]	; (8012754 <jpeg_idct_11x11+0x3dc>)
 8012682:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012686:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801268a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801268e:	19d4      	adds	r4, r2, r7
 8012690:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012692:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012696:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012698:	5d14      	ldrb	r4, [r2, r4]
 801269a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801269c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801269e:	9a05      	ldr	r2, [sp, #20]
 80126a0:	1bd0      	subs	r0, r2, r7
 80126a2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126a4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80126a8:	5c10      	ldrb	r0, [r2, r0]
 80126aa:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80126ac:	9a04      	ldr	r2, [sp, #16]
 80126ae:	eb02 000a 	add.w	r0, r2, sl
 80126b2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126b4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80126b8:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80126ba:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80126bc:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80126be:	eba2 0a0a 	sub.w	sl, r2, sl
 80126c2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126c4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80126c8:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80126cc:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80126ce:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80126d0:	1950      	adds	r0, r2, r5
 80126d2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126d4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80126d8:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80126da:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80126dc:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80126de:	1b55      	subs	r5, r2, r5
 80126e0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126e2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80126e6:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126e8:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80126ea:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126ec:	eb02 0009 	add.w	r0, r2, r9
 80126f0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126f2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126f6:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80126f8:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80126fa:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80126fc:	eba2 0909 	sub.w	r9, r2, r9
 8012700:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012702:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012706:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801270a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801270c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801270e:	1990      	adds	r0, r2, r6
 8012710:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012712:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012716:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012718:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801271a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801271c:	1b96      	subs	r6, r2, r6
 801271e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012720:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012724:	5d90      	ldrb	r0, [r2, r6]
 8012726:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012728:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801272c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801272e:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8012732:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012734:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8012738:	5cd3      	ldrb	r3, [r2, r3]
 801273a:	e00d      	b.n	8012758 <jpeg_idct_11x11+0x3e0>
 801273c:	ffffc5b4 	.word	0xffffc5b4
 8012740:	ffffcf91 	.word	0xffffcf91
 8012744:	ffffdb05 	.word	0xffffdb05
 8012748:	ffffd37d 	.word	0xffffd37d
 801274c:	ffffe276 	.word	0xffffe276
 8012750:	ffffc675 	.word	0xffffc675
 8012754:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8012758:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801275a:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 801275c:	9b02      	ldr	r3, [sp, #8]
 801275e:	3320      	adds	r3, #32
 8012760:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8012762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012764:	4293      	cmp	r3, r2
 8012766:	f47f af00 	bne.w	801256a <jpeg_idct_11x11+0x1f2>
  }
}
 801276a:	b065      	add	sp, #404	; 0x194
 801276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012770 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012774:	b0eb      	sub	sp, #428	; 0x1ac
 8012776:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012778:	f1a2 0902 	sub.w	r9, r2, #2
 801277c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801277e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012782:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012786:	1f0b      	subs	r3, r1, #4
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	f102 030e 	add.w	r3, r2, #14
 801278e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8012790:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012792:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012794:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012798:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801279c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80127a0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80127a4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127a6:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80127aa:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127ac:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80127b0:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80127b4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80127b6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80127ba:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80127bc:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80127be:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80127c0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80127c2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80127c6:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80127ca:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80127cc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80127d0:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80127d4:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 80127d6:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 80127d8:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80127da:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 80127de:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80127e2:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80127e4:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80127e8:	eb07 010c 	add.w	r1, r7, ip
 80127ec:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80127ee:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80127f2:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 80127f4:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80127f8:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 80127fa:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 80127fc:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80127fe:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8012802:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8012804:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012806:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801280a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801280c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801280e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012810:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012814:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8012818:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801281a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801281c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801281e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012822:	6a12      	ldr	r2, [r2, #32]
 8012824:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012826:	9a00      	ldr	r2, [sp, #0]
 8012828:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801282a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801282e:	9a00      	ldr	r2, [sp, #0]
 8012830:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012834:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012838:	49b6      	ldr	r1, [pc, #728]	; (8012b14 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801283a:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801283c:	9a00      	ldr	r2, [sp, #0]
 801283e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8012842:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012844:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012846:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801284a:	49b3      	ldr	r1, [pc, #716]	; (8012b18 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801284c:	eb02 0e06 	add.w	lr, r2, r6
 8012850:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012854:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012858:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801285c:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012860:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012864:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012868:	18ae      	adds	r6, r5, r2
 801286a:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801286c:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801286e:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012870:	49aa      	ldr	r1, [pc, #680]	; (8012b1c <jpeg_idct_12x12+0x3ac>)
 8012872:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012876:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8012878:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801287c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012880:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012882:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8012886:	fb0a 4402 	mla	r4, sl, r2, r4
 801288a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801288c:	49a4      	ldr	r1, [pc, #656]	; (8012b20 <jpeg_idct_12x12+0x3b0>)
 801288e:	fb01 0007 	mla	r0, r1, r7, r0
 8012892:	49a4      	ldr	r1, [pc, #656]	; (8012b24 <jpeg_idct_12x12+0x3b4>)
 8012894:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8012898:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801289a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801289e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80128a2:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80128a4:	eb02 0e05 	add.w	lr, r2, r5
 80128a8:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80128ac:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80128b0:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80128b2:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80128b6:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80128ba:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80128be:	12ff      	asrs	r7, r7, #11
 80128c0:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80128c4:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80128c8:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80128ca:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80128ce:	188f      	adds	r7, r1, r2
 80128d0:	12ff      	asrs	r7, r7, #11
 80128d2:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80128d4:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80128d6:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80128d8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80128da:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80128dc:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80128e0:	12d2      	asrs	r2, r2, #11
 80128e2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80128e4:	9a05      	ldr	r2, [sp, #20]
 80128e6:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80128e8:	9a06      	ldr	r2, [sp, #24]
 80128ea:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80128ec:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80128ee:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80128f0:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80128f4:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80128f6:	9a06      	ldr	r2, [sp, #24]
 80128f8:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80128fa:	9a02      	ldr	r2, [sp, #8]
 80128fc:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80128fe:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012900:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012902:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012906:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012908:	9a02      	ldr	r2, [sp, #8]
 801290a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801290c:	9a04      	ldr	r2, [sp, #16]
 801290e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012910:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012912:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012914:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801291c:	9a04      	ldr	r2, [sp, #16]
 801291e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012920:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012922:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012924:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012926:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801292a:	f47f af32 	bne.w	8012792 <jpeg_idct_12x12+0x22>
 801292e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8012930:	aa0a      	add	r2, sp, #40	; 0x28
 8012932:	f1a3 0a04 	sub.w	sl, r3, #4
 8012936:	332c      	adds	r3, #44	; 0x2c
 8012938:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801293a:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801293e:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8012942:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012944:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8012946:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 801294a:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 801294e:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8012950:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012952:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8012956:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8012958:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 801295c:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012960:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8012962:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012964:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012968:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801296c:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801296e:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8012972:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8012976:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801297a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801297c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8012980:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8012984:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8012988:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801298c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 801298e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8012990:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012994:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8012998:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 801299c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 801299e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 80129a0:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 80129a4:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 80129a6:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 80129a8:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80129ac:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80129ae:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80129b2:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80129b6:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80129ba:	4956      	ldr	r1, [pc, #344]	; (8012b14 <jpeg_idct_12x12+0x3a4>)
 80129bc:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 80129be:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80129c2:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80129c4:	eb04 0c06 	add.w	ip, r4, r6
 80129c8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80129cc:	f640 0e5b 	movw	lr, #2139	; 0x85b
 80129d0:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80129d4:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80129d8:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80129dc:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80129e0:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80129e4:	4b4c      	ldr	r3, [pc, #304]	; (8012b18 <jpeg_idct_12x12+0x3a8>)
 80129e6:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80129ea:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 80129ee:	eb01 0609 	add.w	r6, r1, r9
 80129f2:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80129f6:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80129fa:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80129fc:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8012a00:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012a04:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012a08:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012a0a:	4845      	ldr	r0, [pc, #276]	; (8012b20 <jpeg_idct_12x12+0x3b0>)
 8012a0c:	fb00 1103 	mla	r1, r0, r3, r1
 8012a10:	4b44      	ldr	r3, [pc, #272]	; (8012b24 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012a12:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012a14:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8012a18:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8012a1c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 8012a1e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012a22:	4461      	add	r1, ip
    z2 -= z3;
 8012a24:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012a26:	4b40      	ldr	r3, [pc, #256]	; (8012b28 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012a28:	eb04 0c05 	add.w	ip, r4, r5
 8012a2c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012a30:	f641 087e 	movw	r8, #6270	; 0x187e
 8012a34:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012a38:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012a3c:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012a40:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8012a44:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012a48:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012a4a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012a4e:	f81b c008 	ldrb.w	ip, [fp, r8]
 8012a52:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012a56:	9b00      	ldr	r3, [sp, #0]
 8012a58:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8012a5c:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012a5e:	9b01      	ldr	r3, [sp, #4]
 8012a60:	191f      	adds	r7, r3, r4
 8012a62:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012a64:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012a68:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8012a6c:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8012a74:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012a78:	f81b 4008 	ldrb.w	r4, [fp, r8]
 8012a7c:	9b00      	ldr	r3, [sp, #0]
 8012a7e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012a80:	9b04      	ldr	r3, [sp, #16]
 8012a82:	199c      	adds	r4, r3, r6
 8012a84:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012a86:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012a8a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8012a8e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012a90:	9b04      	ldr	r3, [sp, #16]
 8012a92:	1b9e      	subs	r6, r3, r6
 8012a94:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012a96:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012a9a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8012a9e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012aa0:	9b05      	ldr	r3, [sp, #20]
 8012aa2:	eb03 0409 	add.w	r4, r3, r9
 8012aa6:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012aa8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012aac:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8012ab0:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012ab2:	9b05      	ldr	r3, [sp, #20]
 8012ab4:	eba3 0009 	sub.w	r0, r3, r9
 8012ab8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012aba:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012abe:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012ac2:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	1958      	adds	r0, r3, r5
 8012ac8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012aca:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ace:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012ad2:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012ad4:	9b02      	ldr	r3, [sp, #8]
 8012ad6:	1b5d      	subs	r5, r3, r5
 8012ad8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012ada:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012ade:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8012ae2:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012ae4:	9b03      	ldr	r3, [sp, #12]
 8012ae6:	1858      	adds	r0, r3, r1
 8012ae8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012aea:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012aee:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012af2:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012af4:	9b03      	ldr	r3, [sp, #12]
 8012af6:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8012af8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012afc:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8012b00:	9b00      	ldr	r3, [sp, #0]
 8012b02:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8012b04:	9b07      	ldr	r3, [sp, #28]
 8012b06:	4553      	cmp	r3, sl
 8012b08:	f47f af17 	bne.w	801293a <jpeg_idct_12x12+0x1ca>
  }
}
 8012b0c:	b06b      	add	sp, #428	; 0x1ac
 8012b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b12:	bf00      	nop
 8012b14:	ffffeeaf 	.word	0xffffeeaf
 8012b18:	ffffde8b 	.word	0xffffde8b
 8012b1c:	ffffd0b0 	.word	0xffffd0b0
 8012b20:	ffffea5c 	.word	0xffffea5c
 8012b24:	ffffc08c 	.word	0xffffc08c
 8012b28:	ffffc4df 	.word	0xffffc4df

08012b2c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b30:	b0f9      	sub	sp, #484	; 0x1e4
 8012b32:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8012b34:	f1a2 0b02 	sub.w	fp, r2, #2
 8012b38:	930c      	str	r3, [sp, #48]	; 0x30
 8012b3a:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012b3c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012b40:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b44:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8012b48:	aa10      	add	r2, sp, #64	; 0x40
 8012b4a:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012b4c:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012b50:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012b54:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012b58:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012b5c:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b60:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012b62:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012b64:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012b68:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 8012b6c:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012b72:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b76:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b7c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012b82:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8012b84:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8012b86:	1a09      	subs	r1, r1, r0
 8012b88:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012b8a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012b8e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012b90:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8012b94:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012b98:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8012b9c:	fb00 5004 	mla	r0, r0, r4, r5
 8012ba0:	4408      	add	r0, r1
 8012ba2:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012ba4:	f241 000c 	movw	r0, #4108	; 0x100c
 8012ba8:	4360      	muls	r0, r4
 8012baa:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012bac:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012bb0:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012bb2:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012bb6:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012bba:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012bbc:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012bc0:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012bc2:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012bc4:	1a2d      	subs	r5, r5, r0
 8012bc6:	440d      	add	r5, r1
 8012bc8:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012bca:	4dd0      	ldr	r5, [pc, #832]	; (8012f0c <jpeg_idct_13x13+0x3e0>)
 8012bcc:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012bd0:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012bd4:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012bd6:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012bd8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8012bda:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8012bde:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012be0:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8012be4:	4371      	muls	r1, r6
 8012be6:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012be8:	48c9      	ldr	r0, [pc, #804]	; (8012f10 <jpeg_idct_13x13+0x3e4>)
 8012bea:	4360      	muls	r0, r4
 8012bec:	1ac0      	subs	r0, r0, r3
 8012bee:	1a40      	subs	r0, r0, r1
 8012bf0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012bf2:	48c8      	ldr	r0, [pc, #800]	; (8012f14 <jpeg_idct_13x13+0x3e8>)
 8012bf4:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012bf8:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012bfc:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012bfe:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012c02:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c04:	6a3b      	ldr	r3, [r7, #32]
 8012c06:	434b      	muls	r3, r1
 8012c08:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012c0c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c0e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c10:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8012c14:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012c16:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012c1a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c1c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012c1e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8012c22:	4368      	muls	r0, r5
 8012c24:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012c26:	f642 2050 	movw	r0, #10832	; 0x2a50
 8012c2a:	4370      	muls	r0, r6
 8012c2c:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012c2e:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8012c32:	4428      	add	r0, r5
 8012c34:	f242 553e 	movw	r5, #9534	; 0x253e
 8012c38:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8012c3a:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012c3e:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8012c42:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012c46:	48b4      	ldr	r0, [pc, #720]	; (8012f18 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012c48:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012c4c:	44d6      	add	lr, sl
 8012c4e:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012c52:	9801      	ldr	r0, [sp, #4]
 8012c54:	4eb1      	ldr	r6, [pc, #708]	; (8012f1c <jpeg_idct_13x13+0x3f0>)
 8012c56:	1818      	adds	r0, r3, r0
 8012c58:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012c5a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8012c5e:	fb06 0603 	mla	r6, r6, r3, r0
 8012c62:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012c64:	4eae      	ldr	r6, [pc, #696]	; (8012f20 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012c66:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012c68:	9901      	ldr	r1, [sp, #4]
 8012c6a:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 8012c6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012c70:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c72:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012c76:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012c78:	9903      	ldr	r1, [sp, #12]
 8012c7a:	185d      	adds	r5, r3, r1
 8012c7c:	49a9      	ldr	r1, [pc, #676]	; (8012f24 <jpeg_idct_13x13+0x3f8>)
 8012c7e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c80:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8012c82:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c84:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012c88:	9901      	ldr	r1, [sp, #4]
 8012c8a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012c8c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012c8e:	eb01 0a00 	add.w	sl, r1, r0
 8012c92:	49a5      	ldr	r1, [pc, #660]	; (8012f28 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8012c94:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012c96:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012c9a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 8012c9c:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012c9e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012ca0:	f640 25d5 	movw	r5, #2773	; 0xad5
 8012ca4:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012ca8:	f640 2533 	movw	r5, #2611	; 0xa33
 8012cac:	fb05 9101 	mla	r1, r5, r1, r9
 8012cb0:	4d9e      	ldr	r5, [pc, #632]	; (8012f2c <jpeg_idct_13x13+0x400>)
 8012cb2:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012cb6:	9d01      	ldr	r5, [sp, #4]
 8012cb8:	1aeb      	subs	r3, r5, r3
 8012cba:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012cbe:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8012cc2:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012cc4:	fb03 8805 	mla	r8, r3, r5, r8
 8012cc8:	9d03      	ldr	r5, [sp, #12]
 8012cca:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 8012cce:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cd2:	9b06      	ldr	r3, [sp, #24]
 8012cd4:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012cd6:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cd8:	12db      	asrs	r3, r3, #11
 8012cda:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012cde:	9b06      	ldr	r3, [sp, #24]
 8012ce0:	eba3 0e0e 	sub.w	lr, r3, lr
 8012ce4:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8012ce8:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012cec:	9b08      	ldr	r3, [sp, #32]
 8012cee:	4433      	add	r3, r6
 8012cf0:	12db      	asrs	r3, r3, #11
 8012cf2:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012cf4:	9b08      	ldr	r3, [sp, #32]
 8012cf6:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cf8:	9b07      	ldr	r3, [sp, #28]
 8012cfa:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012cfc:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cfe:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012d00:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012d04:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012d06:	9b07      	ldr	r3, [sp, #28]
 8012d08:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d0c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012d0e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012d10:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012d12:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012d16:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d1a:	eba3 0a0a 	sub.w	sl, r3, sl
 8012d1e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8012d22:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d28:	440b      	add	r3, r1
 8012d2a:	12db      	asrs	r3, r3, #11
 8012d2c:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d30:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d34:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012d36:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012d38:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012d3a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012d3e:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012d40:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d46:	eba3 0909 	sub.w	r9, r3, r9
 8012d4a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8012d4e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012d52:	9b04      	ldr	r3, [sp, #16]
 8012d54:	1b1c      	subs	r4, r3, r4
 8012d56:	f642 5341 	movw	r3, #11585	; 0x2d41
 8012d5a:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012d60:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d62:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012d64:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d68:	f47f aef0 	bne.w	8012b4c <jpeg_idct_13x13+0x20>
 8012d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8012d6e:	ac10      	add	r4, sp, #64	; 0x40
 8012d70:	3b04      	subs	r3, #4
 8012d72:	9303      	str	r3, [sp, #12]
 8012d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d76:	3330      	adds	r3, #48	; 0x30
 8012d78:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012d7a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012d7c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8012d80:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012d82:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8012d86:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012d8a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 8012d8e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012d90:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8012d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d94:	9303      	str	r3, [sp, #12]
 8012d96:	4613      	mov	r3, r2
 8012d98:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 8012d9a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8012d9e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012da0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8012da4:	3310      	adds	r3, #16
 8012da6:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8012da8:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8012daa:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8012dac:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8012dae:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012db0:	f240 3119 	movw	r1, #793	; 0x319
 8012db4:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012db6:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012db8:	4341      	muls	r1, r0
 8012dba:	9802      	ldr	r0, [sp, #8]
 8012dbc:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012dc0:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8012dc4:	fb00 500e 	mla	r0, r0, lr, r5
 8012dc8:	4408      	add	r0, r1
 8012dca:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012dcc:	f241 000c 	movw	r0, #4108	; 0x100c
 8012dd0:	fb00 f00e 	mul.w	r0, r0, lr
 8012dd4:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012dd6:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012dda:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012ddc:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012de0:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012de4:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012de6:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012dea:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012dee:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012df0:	1a2d      	subs	r5, r5, r0
 8012df2:	440d      	add	r5, r1
 8012df4:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012df6:	4d45      	ldr	r5, [pc, #276]	; (8012f0c <jpeg_idct_13x13+0x3e0>)
 8012df8:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012dfc:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012e00:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012e02:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012e04:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8012e06:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8012e0a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012e0c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8012e10:	4371      	muls	r1, r6
 8012e12:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012e16:	483e      	ldr	r0, [pc, #248]	; (8012f10 <jpeg_idct_13x13+0x3e4>)
 8012e18:	fb00 f00e 	mul.w	r0, r0, lr
 8012e1c:	1ac0      	subs	r0, r0, r3
 8012e1e:	1a40      	subs	r0, r0, r1
 8012e20:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012e22:	483c      	ldr	r0, [pc, #240]	; (8012f14 <jpeg_idct_13x13+0x3e8>)
 8012e24:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012e28:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012e2c:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8012e2e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012e32:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012e34:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8012e36:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8012e3a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8012e3c:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012e40:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8012e42:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012e46:	4834      	ldr	r0, [pc, #208]	; (8012f18 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012e48:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012e4c:	4e33      	ldr	r6, [pc, #204]	; (8012f1c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8012e4e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012e52:	eb0b 0705 	add.w	r7, fp, r5
 8012e56:	4457      	add	r7, sl
 8012e58:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e5c:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012e60:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012e62:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8012e66:	1818      	adds	r0, r3, r0
 8012e68:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012e6a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8012e6e:	fb06 0603 	mla	r6, r6, r3, r0
 8012e72:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e74:	4e2a      	ldr	r6, [pc, #168]	; (8012f20 <jpeg_idct_13x13+0x3f4>)
 8012e76:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012e7a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012e7e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e82:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012e84:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012e88:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012e8a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012e8c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 8012e8e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012e92:	f244 6b94 	movw	fp, #18068	; 0x4694
 8012e96:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012e9a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8012e9e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012ea2:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012ea4:	eb07 0a00 	add.w	sl, r7, r0
 8012ea8:	481f      	ldr	r0, [pc, #124]	; (8012f28 <jpeg_idct_13x13+0x3fc>)
 8012eaa:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 8012eae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012eb0:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012eb2:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012eb4:	f640 25d5 	movw	r5, #2773	; 0xad5
 8012eb8:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012ebc:	f640 2533 	movw	r5, #2611	; 0xa33
 8012ec0:	fb05 9101 	mla	r1, r5, r1, r9
 8012ec4:	4d19      	ldr	r5, [pc, #100]	; (8012f2c <jpeg_idct_13x13+0x400>)
 8012ec6:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012eca:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012ecc:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012ed0:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012ed4:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8012ed8:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012eda:	fb03 8807 	mla	r8, r3, r7, r8
 8012ede:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ee2:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012ee4:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ee8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012eea:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012eec:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012eee:	442b      	add	r3, r5
 8012ef0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8012ef2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ef6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012efa:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012f00:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8012f02:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012f06:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8012f0a:	e011      	b.n	8012f30 <jpeg_idct_13x13+0x404>
 8012f0c:	ffffd7ee 	.word	0xffffd7ee
 8012f10:	fffffa8c 	.word	0xfffffa8c
 8012f14:	ffffe64b 	.word	0xffffe64b
 8012f18:	ffffbf5b 	.word	0xffffbf5b
 8012f1c:	fffff52b 	.word	0xfffff52b
 8012f20:	ffffcdb1 	.word	0xffffcdb1
 8012f24:	ffffdac2 	.word	0xffffdac2
 8012f28:	ffffeaf8 	.word	0xffffeaf8
 8012f2c:	fffff116 	.word	0xfffff116
 8012f30:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f32:	9b06      	ldr	r3, [sp, #24]
 8012f34:	4433      	add	r3, r6
			     & RANGE_MASK];
 8012f36:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f3a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012f3e:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f40:	9b06      	ldr	r3, [sp, #24]
 8012f42:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8012f44:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f48:	f81c 3006 	ldrb.w	r3, [ip, r6]
 8012f4c:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f4e:	9b05      	ldr	r3, [sp, #20]
 8012f50:	4403      	add	r3, r0
			     & RANGE_MASK];
 8012f52:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f56:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012f5a:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f5c:	9b05      	ldr	r3, [sp, #20]
 8012f5e:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8012f60:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f64:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8012f68:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012f6a:	9b08      	ldr	r3, [sp, #32]
 8012f6c:	4453      	add	r3, sl
			     & RANGE_MASK];
 8012f6e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012f72:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012f76:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8012f7e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012f82:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8012f86:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f8a:	440b      	add	r3, r1
			     & RANGE_MASK];
 8012f8c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012f90:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012f94:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f98:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8012f9a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012f9e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012fa2:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012fa6:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012fa8:	9b07      	ldr	r3, [sp, #28]
 8012faa:	444b      	add	r3, r9
			     & RANGE_MASK];
 8012fac:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012fb0:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012fb4:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012fb6:	9b07      	ldr	r3, [sp, #28]
 8012fb8:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 8012fbc:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012fc0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8012fc4:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	eba3 030e 	sub.w	r3, r3, lr
 8012fcc:	434b      	muls	r3, r1
 8012fce:	9902      	ldr	r1, [sp, #8]
 8012fd0:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8012fd4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8012fd8:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012fdc:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8012fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fe0:	9a03      	ldr	r2, [sp, #12]
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	f47f aec9 	bne.w	8012d7a <jpeg_idct_13x13+0x24e>
  }
}
 8012fe8:	b079      	add	sp, #484	; 0x1e4
 8012fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fee:	bf00      	nop

08012ff0 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff4:	b0ff      	sub	sp, #508	; 0x1fc
 8012ff6:	f1a2 0a02 	sub.w	sl, r2, #2
 8012ffa:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ffc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013000:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013002:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013006:	1f03      	subs	r3, r0, #4
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	f102 030e 	add.w	r3, r2, #14
 801300e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8013010:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013012:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013014:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013018:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801301c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013020:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013024:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013026:	9101      	str	r1, [sp, #4]
 8013028:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801302a:	9a01      	ldr	r2, [sp, #4]
 801302c:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8013030:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8013034:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013036:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013038:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801303a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801303e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013042:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013046:	f640 2112 	movw	r1, #2578	; 0xa12
 801304a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801304e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8013052:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013054:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013056:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8013058:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801305c:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013060:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8013062:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013064:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013068:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801306c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013070:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013072:	9a01      	ldr	r2, [sp, #4]
 8013074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013076:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013078:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801307c:	48d2      	ldr	r0, [pc, #840]	; (80133c8 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801307e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013080:	1916      	adds	r6, r2, r4
 8013082:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013086:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 801308a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801308e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8013092:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8013096:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8013098:	eb07 000c 	add.w	r0, r7, ip
 801309c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 801309e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80130a2:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80130a6:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 80130aa:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80130ac:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80130ae:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 80130b2:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 80130b4:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80130b6:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 80130ba:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80130bc:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 80130be:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80130c0:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 80130c4:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 80130c6:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80130c8:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80130ca:	48c0      	ldr	r0, [pc, #768]	; (80133cc <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80130cc:	6a12      	ldr	r2, [r2, #32]
 80130ce:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80130d0:	9a01      	ldr	r2, [sp, #4]
 80130d2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80130d4:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80130d6:	9a01      	ldr	r2, [sp, #4]
 80130d8:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80130dc:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80130e0:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80130e2:	9a01      	ldr	r2, [sp, #4]
 80130e4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 80130e8:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80130ec:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80130ee:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 80130f2:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80130f6:	f242 6152 	movw	r1, #9810	; 0x2652
 80130fa:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80130fe:	49b4      	ldr	r1, [pc, #720]	; (80133d0 <jpeg_idct_14x14+0x3e0>)
 8013100:	eb09 0e05 	add.w	lr, r9, r5
 8013104:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8013108:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801310c:	f641 0114 	movw	r1, #6164	; 0x1814
 8013110:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013114:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013118:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801311a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 801311e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013120:	48ac      	ldr	r0, [pc, #688]	; (80133d4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013122:	fb08 f804 	mul.w	r8, r8, r4
 8013126:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 801312a:	4441      	add	r1, r8
 801312c:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801312e:	19b9      	adds	r1, r7, r6
 8013130:	fb0c f101 	mul.w	r1, ip, r1
 8013134:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013138:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801313c:	48a6      	ldr	r0, [pc, #664]	; (80133d8 <jpeg_idct_14x14+0x3e8>)
 801313e:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013142:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013144:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013148:	48a4      	ldr	r0, [pc, #656]	; (80133dc <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801314a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801314c:	1bf5      	subs	r5, r6, r7
 801314e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013152:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8013156:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013158:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 801315c:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801315e:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013160:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013162:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013164:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013166:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013168:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801316c:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801316e:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013172:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013176:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013178:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801317a:	eba2 0e0e 	sub.w	lr, r2, lr
 801317e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8013182:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013186:	9a04      	ldr	r2, [sp, #16]
 8013188:	444a      	add	r2, r9
 801318a:	12d2      	asrs	r2, r2, #11
 801318c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801318e:	9a04      	ldr	r2, [sp, #16]
 8013190:	eba2 0909 	sub.w	r9, r2, r9
 8013194:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8013198:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801319c:	9a06      	ldr	r2, [sp, #24]
 801319e:	440a      	add	r2, r1
 80131a0:	12d2      	asrs	r2, r2, #11
 80131a2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131a4:	9a06      	ldr	r2, [sp, #24]
 80131a6:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 80131a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131aa:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131ae:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 80131b0:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 80131b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131b4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 80131b8:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80131bc:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80131be:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80131c0:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 80131c2:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80131c6:	12d2      	asrs	r2, r2, #11
 80131c8:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80131ca:	9a07      	ldr	r2, [sp, #28]
 80131cc:	eba2 0c0c 	sub.w	ip, r2, ip
 80131d0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80131d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80131d8:	9a05      	ldr	r2, [sp, #20]
 80131da:	442a      	add	r2, r5
 80131dc:	12d2      	asrs	r2, r2, #11
 80131de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80131e2:	9a05      	ldr	r2, [sp, #20]
 80131e4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80131e6:	9a03      	ldr	r2, [sp, #12]
 80131e8:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80131ea:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80131ec:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80131ee:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80131f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80131f6:	9a03      	ldr	r2, [sp, #12]
 80131f8:	1a52      	subs	r2, r2, r1
 80131fa:	12d2      	asrs	r2, r2, #11
 80131fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013202:	4552      	cmp	r2, sl
 8013204:	f47f af05 	bne.w	8013012 <jpeg_idct_14x14+0x22>
 8013208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801320a:	3b04      	subs	r3, #4
 801320c:	9302      	str	r3, [sp, #8]
 801320e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013210:	3334      	adds	r3, #52	; 0x34
 8013212:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8013214:	ab0e      	add	r3, sp, #56	; 0x38
 8013216:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013218:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801321a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801321e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013222:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013226:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801322a:	920c      	str	r2, [sp, #48]	; 0x30
 801322c:	9302      	str	r3, [sp, #8]
 801322e:	4613      	mov	r3, r2
 8013230:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8013232:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013234:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8013236:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013238:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801323a:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801323e:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013242:	4861      	ldr	r0, [pc, #388]	; (80133c8 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013244:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013246:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013248:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 801324a:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801324e:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8013250:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013254:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8013256:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801325a:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801325e:	005b      	lsls	r3, r3, #1
 8013260:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8013264:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8013266:	9b01      	ldr	r3, [sp, #4]
 8013268:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 801326a:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801326c:	18f1      	adds	r1, r6, r3
 801326e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013270:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8013274:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013278:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801327c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8013280:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8013282:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013286:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 801328a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 801328e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8013290:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8013292:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013294:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8013298:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 801329a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 801329c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 801329e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80132a0:	484a      	ldr	r0, [pc, #296]	; (80133cc <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 80132a2:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 80132a4:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 80132a6:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 80132a8:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 80132aa:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 80132ae:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 80132b0:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 80132b4:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132b8:	eb03 0a08 	add.w	sl, r3, r8
 80132bc:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 80132c0:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80132c4:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80132c8:	f242 6152 	movw	r1, #9810	; 0x2652
 80132cc:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80132d0:	493f      	ldr	r1, [pc, #252]	; (80133d0 <jpeg_idct_14x14+0x3e0>)
 80132d2:	eb0a 0704 	add.w	r7, sl, r4
 80132d6:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 80132da:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80132de:	f641 0114 	movw	r1, #6164	; 0x1814
 80132e2:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80132e4:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80132e8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80132ea:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 80132ee:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80132f2:	4838      	ldr	r0, [pc, #224]	; (80133d4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80132f4:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80132f8:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80132fc:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013300:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8013302:	4471      	add	r1, lr
 8013304:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013306:	eb08 010c 	add.w	r1, r8, ip
 801330a:	4369      	muls	r1, r5
 801330c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013310:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013314:	4830      	ldr	r0, [pc, #192]	; (80133d8 <jpeg_idct_14x14+0x3e8>)
 8013316:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801331a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801331c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013320:	482e      	ldr	r0, [pc, #184]	; (80133dc <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013322:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013324:	ebac 0408 	sub.w	r4, ip, r8
 8013328:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801332a:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801332c:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013330:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013334:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013338:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801333a:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801333e:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013340:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8013342:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013346:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801334a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801334e:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013350:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013354:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013356:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013358:	980c      	ldr	r0, [sp, #48]	; 0x30
 801335a:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801335c:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8013360:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013362:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013364:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013366:	4453      	add	r3, sl
			     & RANGE_MASK];
 8013368:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801336c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013370:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013372:	9b05      	ldr	r3, [sp, #20]
 8013374:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8013378:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801337c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8013380:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013382:	9b07      	ldr	r3, [sp, #28]
 8013384:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013386:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801338a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801338e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013390:	9b07      	ldr	r3, [sp, #28]
 8013392:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013394:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013398:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801339c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801339e:	9b03      	ldr	r3, [sp, #12]
 80133a0:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80133a2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80133a6:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80133aa:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80133b2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80133b6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80133ba:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80133bc:	9b08      	ldr	r3, [sp, #32]
 80133be:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80133c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
 80133c4:	e00c      	b.n	80133e0 <jpeg_idct_14x14+0x3f0>
 80133c6:	bf00      	nop
 80133c8:	ffffc8fc 	.word	0xffffc8fc
 80133cc:	ffffde0b 	.word	0xffffde0b
 80133d0:	ffffdbf0 	.word	0xffffdbf0
 80133d4:	fffff26e 	.word	0xfffff26e
 80133d8:	ffffb409 	.word	0xffffb409
 80133dc:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80133e0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80133e4:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80133e6:	9b08      	ldr	r3, [sp, #32]
 80133e8:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80133ea:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80133ee:	f81b 3005 	ldrb.w	r3, [fp, r5]
 80133f2:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80133f4:	9b06      	ldr	r3, [sp, #24]
 80133f6:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80133f8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80133fc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013400:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013402:	9b06      	ldr	r3, [sp, #24]
 8013404:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013406:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801340a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801340e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013410:	9b04      	ldr	r3, [sp, #16]
 8013412:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013414:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013416:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801341a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801341e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013420:	9b04      	ldr	r3, [sp, #16]
 8013422:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013424:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013428:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801342c:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 801342e:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8013430:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 8013432:	3320      	adds	r3, #32
 8013434:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8013436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013438:	4293      	cmp	r3, r2
 801343a:	f47f aeed 	bne.w	8013218 <jpeg_idct_14x14+0x228>
  }
}
 801343e:	b07f      	add	sp, #508	; 0x1fc
 8013440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013444 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013448:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 801344c:	f1a2 0b02 	sub.w	fp, r2, #2
 8013450:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013452:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013456:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013458:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801345c:	1f03      	subs	r3, r0, #4
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	f102 030e 	add.w	r3, r2, #14
 8013464:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8013466:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013468:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801346a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801346e:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013472:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013476:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801347a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801347e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013482:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013484:	9100      	str	r1, [sp, #0]
 8013486:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013488:	9a00      	ldr	r2, [sp, #0]
 801348a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 801348e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8013490:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013492:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013494:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013496:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013498:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801349c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80134a0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80134a4:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80134a6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80134aa:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80134ae:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80134b0:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80134b4:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80134b8:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80134bc:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 80134be:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 80134c2:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80134c4:	eba4 040c 	sub.w	r4, r4, ip
 80134c8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 80134cc:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 80134ce:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80134d0:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80134d4:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80134d6:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80134da:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 80134de:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80134e2:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80134e6:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 80134e8:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80134ec:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80134ee:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 80134f2:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80134f4:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80134f6:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80134fa:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80134fe:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013500:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8013502:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013506:	443c      	add	r4, r7
 8013508:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801350c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013510:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013514:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8013516:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013518:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801351a:	f641 114c 	movw	r1, #6476	; 0x194c
 801351e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013520:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013524:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013526:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8013528:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801352a:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 801352e:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8013530:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8013532:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8013534:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8013536:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 801353a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801353c:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8013540:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8013542:	9908      	ldr	r1, [sp, #32]
 8013544:	9a01      	ldr	r2, [sp, #4]
 8013546:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013548:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801354c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801354e:	9a00      	ldr	r2, [sp, #0]
 8013550:	6a12      	ldr	r2, [r2, #32]
 8013552:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013554:	9900      	ldr	r1, [sp, #0]
 8013556:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8013558:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801355a:	9900      	ldr	r1, [sp, #0]
 801355c:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013560:	9800      	ldr	r0, [sp, #0]
 8013562:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013566:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013568:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801356c:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013570:	48d2      	ldr	r0, [pc, #840]	; (80138bc <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013572:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013576:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8013578:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801357c:	1917      	adds	r7, r2, r4
 801357e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8013582:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013586:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801358a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801358e:	48cc      	ldr	r0, [pc, #816]	; (80138c0 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013590:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013594:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013596:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801359a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801359c:	48c9      	ldr	r0, [pc, #804]	; (80138c4 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801359e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80135a2:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80135a6:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80135aa:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80135ac:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80135b0:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80135b4:	fb00 4402 	mla	r4, r0, r2, r4
 80135b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80135ba:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80135be:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80135c0:	f241 2068 	movw	r0, #4712	; 0x1268
 80135c4:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80135c6:	f640 7039 	movw	r0, #3897	; 0xf39
 80135ca:	fb00 1202 	mla	r2, r0, r2, r1
 80135ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80135d0:	1b92      	subs	r2, r2, r6
 80135d2:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80135d4:	48bc      	ldr	r0, [pc, #752]	; (80138c8 <jpeg_idct_15x15+0x484>)
 80135d6:	fb00 110e 	mla	r1, r0, lr, r1
 80135da:	4431      	add	r1, r6
 80135dc:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80135de:	9902      	ldr	r1, [sp, #8]
 80135e0:	4441      	add	r1, r8
 80135e2:	12c9      	asrs	r1, r1, #11
 80135e4:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80135e8:	9902      	ldr	r1, [sp, #8]
 80135ea:	eba1 0808 	sub.w	r8, r1, r8
 80135ee:	ea4f 21e8 	mov.w	r1, r8, asr #11
 80135f2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80135f6:	9906      	ldr	r1, [sp, #24]
 80135f8:	4449      	add	r1, r9
 80135fa:	12c9      	asrs	r1, r1, #11
 80135fc:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80135fe:	9906      	ldr	r1, [sp, #24]
 8013600:	eba1 0909 	sub.w	r9, r1, r9
 8013604:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8013608:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801360c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801360e:	4461      	add	r1, ip
 8013610:	12c9      	asrs	r1, r1, #11
 8013612:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013616:	eba1 0c0c 	sub.w	ip, r1, ip
 801361a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801361e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013622:	9903      	ldr	r1, [sp, #12]
 8013624:	4411      	add	r1, r2
 8013626:	12c9      	asrs	r1, r1, #11
 8013628:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801362a:	9903      	ldr	r1, [sp, #12]
 801362c:	1a8a      	subs	r2, r1, r2
 801362e:	12d2      	asrs	r2, r2, #11
 8013630:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013634:	9a07      	ldr	r2, [sp, #28]
 8013636:	443a      	add	r2, r7
 8013638:	12d2      	asrs	r2, r2, #11
 801363a:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801363c:	9a07      	ldr	r2, [sp, #28]
 801363e:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013640:	9a04      	ldr	r2, [sp, #16]
 8013642:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013644:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013646:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013648:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801364c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013650:	9a04      	ldr	r2, [sp, #16]
 8013652:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013654:	9a05      	ldr	r2, [sp, #20]
 8013656:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013658:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801365a:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801365c:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013660:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013664:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013666:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013668:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801366a:	9a01      	ldr	r2, [sp, #4]
 801366c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013670:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8013672:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013674:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8013678:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801367c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801367e:	455a      	cmp	r2, fp
 8013680:	f47f aef2 	bne.w	8013468 <jpeg_idct_15x15+0x24>
 8013684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013686:	f1a3 0904 	sub.w	r9, r3, #4
 801368a:	3338      	adds	r3, #56	; 0x38
 801368c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801368e:	ab0e      	add	r3, sp, #56	; 0x38
 8013690:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013692:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013696:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801369a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801369c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 80136a0:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80136a2:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 80136a6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136a8:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80136aa:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 80136ae:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 80136b0:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136b2:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 80136b4:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136b6:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80136b8:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80136bc:	f242 419d 	movw	r1, #9373	; 0x249d
 80136c0:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 80136c2:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 80136c6:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80136ca:	eba2 020c 	sub.w	r2, r2, ip
 80136ce:	0052      	lsls	r2, r2, #1
 80136d0:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 80136d4:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 80136d6:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80136d8:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80136dc:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80136de:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80136e2:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80136e6:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 80136e8:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80136ec:	1a8a      	subs	r2, r1, r2
 80136ee:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 80136f0:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80136f4:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80136f8:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 80136fa:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80136fc:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013700:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8013702:	f241 1282 	movw	r2, #4482	; 0x1182
 8013706:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8013708:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801370c:	440a      	add	r2, r1
 801370e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8013712:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013716:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8013718:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801371a:	4c68      	ldr	r4, [pc, #416]	; (80138bc <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801371c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801371e:	f641 124c 	movw	r2, #6476	; 0x194c
 8013722:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013724:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013728:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801372a:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 801372c:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 801372e:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8013730:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8013732:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8013734:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8013736:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 801373a:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 801373c:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801373e:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8013742:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8013744:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8013746:	9808      	ldr	r0, [sp, #32]
 8013748:	9a01      	ldr	r2, [sp, #4]
 801374a:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801374e:	6948      	ldr	r0, [r1, #20]
 8013750:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 8013754:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013756:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 801375a:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 801375c:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 801375e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8013762:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013766:	1950      	adds	r0, r2, r5
 8013768:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801376a:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801376e:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013772:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8013776:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801377a:	4c54      	ldr	r4, [pc, #336]	; (80138cc <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801377c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801377e:	4850      	ldr	r0, [pc, #320]	; (80138c0 <jpeg_idct_15x15+0x47c>)
 8013780:	4378      	muls	r0, r7
 8013782:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013784:	484f      	ldr	r0, [pc, #316]	; (80138c4 <jpeg_idct_15x15+0x480>)
 8013786:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013788:	f642 5002 	movw	r0, #11522	; 0x2d02
 801378c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013790:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013792:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013796:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801379a:	fb04 0002 	mla	r0, r4, r2, r0
 801379e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80137a0:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80137a2:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80137a6:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80137a8:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80137ac:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80137ae:	eb02 000e 	add.w	r0, r2, lr
 80137b2:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80137b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80137b6:	fb01 0202 	mla	r2, r1, r2, r0
 80137ba:	eba2 020c 	sub.w	r2, r2, ip
 80137be:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80137c0:	4c41      	ldr	r4, [pc, #260]	; (80138c8 <jpeg_idct_15x15+0x484>)
 80137c2:	fb04 000e 	mla	r0, r4, lr, r0
 80137c6:	4460      	add	r0, ip
 80137c8:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80137ca:	9802      	ldr	r0, [sp, #8]
 80137cc:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80137ce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80137d2:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80137d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80137d8:	9990      	ldr	r1, [sp, #576]	; 0x240
 80137da:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80137dc:	9902      	ldr	r1, [sp, #8]
 80137de:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80137e0:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 80137e2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80137e6:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80137ea:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80137ec:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80137f0:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 80137f4:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80137f8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80137fc:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8013800:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013802:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8013806:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013808:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801380c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8013810:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013814:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013818:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801381c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801381e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8013822:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013824:	9903      	ldr	r1, [sp, #12]
 8013826:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013828:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801382c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8013830:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013832:	9903      	ldr	r1, [sp, #12]
 8013834:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013836:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8013838:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801383c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8013840:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013842:	9a07      	ldr	r2, [sp, #28]
 8013844:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013846:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801384a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801384e:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013850:	9a07      	ldr	r2, [sp, #28]
 8013852:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013854:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013858:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801385c:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801385e:	9a04      	ldr	r2, [sp, #16]
 8013860:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013862:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013866:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801386a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801386c:	9a04      	ldr	r2, [sp, #16]
 801386e:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013870:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013874:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013878:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801387a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801387c:	9a05      	ldr	r2, [sp, #20]
 801387e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013880:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013884:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8013888:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801388a:	9a05      	ldr	r2, [sp, #20]
 801388c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801388e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013890:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013894:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8013898:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801389a:	9a01      	ldr	r2, [sp, #4]
 801389c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80138a0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 80138a4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80138a8:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 80138aa:	9b00      	ldr	r3, [sp, #0]
 80138ac:	3320      	adds	r3, #32
 80138ae:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 80138b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b2:	454b      	cmp	r3, r9
 80138b4:	f47f aeed 	bne.w	8013692 <jpeg_idct_15x15+0x24e>
 80138b8:	e00a      	b.n	80138d0 <jpeg_idct_15x15+0x48c>
 80138ba:	bf00      	nop
 80138bc:	ffffba5c 	.word	0xffffba5c
 80138c0:	ffffe566 	.word	0xffffe566
 80138c4:	ffffd4f6 	.word	0xffffd4f6
 80138c8:	ffffe42f 	.word	0xffffe42f
 80138cc:	ffffdc67 	.word	0xffffdc67
  }
}
 80138d0:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80138d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080138d8 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80138e0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80138e2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80138e6:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138ea:	1e93      	subs	r3, r2, #2
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80138f0:	f1a3 0904 	sub.w	r9, r3, #4
 80138f4:	f102 030e 	add.w	r3, r2, #14
 80138f8:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80138fa:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138fc:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80138fe:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013902:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013906:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801390a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801390e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013910:	9100      	str	r1, [sp, #0]
 8013912:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8013916:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013918:	9900      	ldr	r1, [sp, #0]
 801391a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801391e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013920:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8013924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013928:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801392a:	f642 10cf 	movw	r0, #10703	; 0x29cf
 801392e:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013930:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 8013932:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8013934:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013936:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013938:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801393c:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801393e:	4ad6      	ldr	r2, [pc, #856]	; (8013c98 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013940:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8013944:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8013948:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801394c:	9900      	ldr	r1, [sp, #0]
 801394e:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 8013952:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8013956:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8013958:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801395c:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013960:	f642 4563 	movw	r5, #11363	; 0x2c63
 8013964:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013966:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801396a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801396e:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013972:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013976:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801397a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 801397e:	eb07 020c 	add.w	r2, r7, ip
 8013982:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013984:	eba7 020c 	sub.w	r2, r7, ip
 8013988:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801398a:	1972      	adds	r2, r6, r5
 801398c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801398e:	1b72      	subs	r2, r6, r5
 8013990:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013992:	eb0b 0204 	add.w	r2, fp, r4
 8013996:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013998:	ebab 0204 	sub.w	r2, fp, r4
 801399c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801399e:	1842      	adds	r2, r0, r1
 80139a0:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80139a2:	1a42      	subs	r2, r0, r1
 80139a4:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139a6:	9a00      	ldr	r2, [sp, #0]
 80139a8:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 80139ac:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80139b0:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139b2:	9a00      	ldr	r2, [sp, #0]
 80139b4:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 80139b8:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 80139bc:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80139be:	9800      	ldr	r0, [sp, #0]
 80139c0:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80139c4:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80139c6:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80139ca:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80139ce:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80139d0:	9800      	ldr	r0, [sp, #0]
 80139d2:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 80139d6:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80139d8:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 80139dc:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80139de:	f642 344e 	movw	r4, #11086	; 0x2b4e
 80139e2:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80139e4:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80139e8:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139ec:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80139f0:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80139f4:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80139f8:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80139fc:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013a00:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013a04:	f241 5455 	movw	r4, #5461	; 0x1555
 8013a08:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013a0a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013a0e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013a10:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013a14:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013a16:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013a1a:	4ca0      	ldr	r4, [pc, #640]	; (8013c9c <jpeg_idct_16x16+0x3c4>)
 8013a1c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013a20:	4f9f      	ldr	r7, [pc, #636]	; (8013ca0 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013a22:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013a24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013a26:	4464      	add	r4, ip
 8013a28:	445c      	add	r4, fp
 8013a2a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013a2e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013a30:	4f9c      	ldr	r7, [pc, #624]	; (8013ca4 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013a32:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013a34:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8013a38:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013a3a:	f240 214d 	movw	r1, #589	; 0x24d
 8013a3e:	fb01 4102 	mla	r1, r1, r2, r4
 8013a42:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a44:	4998      	ldr	r1, [pc, #608]	; (8013ca8 <jpeg_idct_16x16+0x3d0>)
 8013a46:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a4a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013a4c:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013a4e:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8013a52:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013a56:	fb07 1a05 	mla	sl, r7, r5, r1
 8013a5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013a5c:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a5e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013a62:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013a66:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a68:	4990      	ldr	r1, [pc, #576]	; (8013cac <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013a6a:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a6c:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013a70:	4351      	muls	r1, r2
    tmp1  += z1;
 8013a72:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a74:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a78:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013a7c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013a7e:	498c      	ldr	r1, [pc, #560]	; (8013cb0 <jpeg_idct_16x16+0x3d8>)
 8013a80:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a82:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013a86:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a88:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013a8c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a8e:	eb05 0b00 	add.w	fp, r5, r0
 8013a92:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a94:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013a96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013a98:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013a9c:	f640 5123 	movw	r1, #3363	; 0xd23
 8013aa0:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013aa2:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013aa4:	445c      	add	r4, fp
    tmp3  += z2;
 8013aa6:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013aa8:	4429      	add	r1, r5
    tmp10 += z2;
 8013aaa:	4484      	add	ip, r0
    tmp11 += z2;
 8013aac:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013aae:	12c9      	asrs	r1, r1, #11
 8013ab0:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013ab4:	9901      	ldr	r1, [sp, #4]
 8013ab6:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013ab8:	9903      	ldr	r1, [sp, #12]
 8013aba:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013abc:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013abe:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013ac0:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013ac4:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013ac6:	9903      	ldr	r1, [sp, #12]
 8013ac8:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013aca:	9905      	ldr	r1, [sp, #20]
 8013acc:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013ace:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013ad0:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013ad2:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013ad6:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013ad8:	9905      	ldr	r1, [sp, #20]
 8013ada:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013adc:	9907      	ldr	r1, [sp, #28]
 8013ade:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013ae0:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013ae2:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013ae4:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013ae8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013aea:	9907      	ldr	r1, [sp, #28]
 8013aec:	eba1 0e0e 	sub.w	lr, r1, lr
 8013af0:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013af4:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013af8:	9908      	ldr	r1, [sp, #32]
 8013afa:	4461      	add	r1, ip
 8013afc:	12c9      	asrs	r1, r1, #11
 8013afe:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013b00:	9908      	ldr	r1, [sp, #32]
 8013b02:	eba1 0c0c 	sub.w	ip, r1, ip
 8013b06:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013b0a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013b0e:	9906      	ldr	r1, [sp, #24]
 8013b10:	4401      	add	r1, r0
 8013b12:	12c9      	asrs	r1, r1, #11
 8013b14:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013b18:	9906      	ldr	r1, [sp, #24]
 8013b1a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013b1c:	9904      	ldr	r1, [sp, #16]
 8013b1e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013b20:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013b22:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013b24:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013b28:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013b2c:	9904      	ldr	r1, [sp, #16]
 8013b2e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013b32:	12d2      	asrs	r2, r2, #11
 8013b34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013b38:	9a02      	ldr	r2, [sp, #8]
 8013b3a:	440a      	add	r2, r1
 8013b3c:	12d2      	asrs	r2, r2, #11
 8013b3e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b42:	9a02      	ldr	r2, [sp, #8]
 8013b44:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b48:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b4a:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b4c:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013b4e:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b52:	f47f aed3 	bne.w	80138fc <jpeg_idct_16x16+0x24>
 8013b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8013b58:	ad0e      	add	r5, sp, #56	; 0x38
 8013b5a:	3b04      	subs	r3, #4
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b60:	333c      	adds	r3, #60	; 0x3c
 8013b62:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013b64:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013b66:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013b6a:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8013b6e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8013b72:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013b76:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8013b7a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013b7e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8013b82:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013b84:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	4613      	mov	r3, r2
 8013b8a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8013b8c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8013b8e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b92:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013b96:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b98:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013b9a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013b9c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8013ba0:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013ba4:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8013ba8:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8013bac:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013bb0:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8013bb2:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013bb6:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013bb8:	4a37      	ldr	r2, [pc, #220]	; (8013c98 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013bba:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013bbe:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013bc2:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013bc6:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013bca:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013bce:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8013bd2:	eb0e 0207 	add.w	r2, lr, r7
 8013bd6:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013bd8:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8013bdc:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8013be0:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013be2:	eb0c 0206 	add.w	r2, ip, r6
 8013be6:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013be8:	ebac 0206 	sub.w	r2, ip, r6
 8013bec:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013bee:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8013bf2:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8013bf6:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013bf8:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013bfa:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8013bfc:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8013c00:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013c02:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013c04:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8013c08:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8013c0c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8013c0e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8013c12:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013c16:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013c1a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013c1e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013c20:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013c24:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013c26:	4e1d      	ldr	r6, [pc, #116]	; (8013c9c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013c28:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013c2a:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8013c2e:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013c32:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8013c36:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013c3a:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013c3e:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013c42:	f241 5455 	movw	r4, #5461	; 0x1555
 8013c46:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013c4a:	f640 5423 	movw	r4, #3363	; 0xd23
 8013c4e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013c54:	4454      	add	r4, sl
 8013c56:	4474      	add	r4, lr
 8013c58:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013c5c:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013c60:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013c62:	eb0c 0409 	add.w	r4, ip, r9
 8013c66:	445c      	add	r4, fp
 8013c68:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013c6c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013c6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013c70:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013c72:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8013c76:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013c78:	f240 224d 	movw	r2, #589	; 0x24d
 8013c7c:	fb02 4203 	mla	r2, r2, r3, r4
 8013c80:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013c82:	4a09      	ldr	r2, [pc, #36]	; (8013ca8 <jpeg_idct_16x16+0x3d0>)
 8013c84:	fb02 4407 	mla	r4, r2, r7, r4
 8013c88:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013c8c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013c90:	4c04      	ldr	r4, [pc, #16]	; (8013ca4 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013c92:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013c94:	1afa      	subs	r2, r7, r3
 8013c96:	e00d      	b.n	8013cb4 <jpeg_idct_16x16+0x3dc>
 8013c98:	ffffecc2 	.word	0xffffecc2
 8013c9c:	ffffb6d6 	.word	0xffffb6d6
 8013ca0:	ffffc542 	.word	0xffffc542
 8013ca4:	ffffe77a 	.word	0xffffe77a
 8013ca8:	ffffdbfa 	.word	0xffffdbfa
 8013cac:	ffffeaab 	.word	0xffffeaab
 8013cb0:	ffffd817 	.word	0xffffd817
 8013cb4:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013cb8:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8013cbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013cbe:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013cc0:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013cc4:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8013cc8:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013cca:	4a4f      	ldr	r2, [pc, #316]	; (8013e08 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013ccc:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013cce:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013cd2:	435a      	muls	r2, r3
    tmp1  += z1;
 8013cd4:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013cd6:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013cda:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013cde:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013ce0:	4a4a      	ldr	r2, [pc, #296]	; (8013e0c <jpeg_idct_16x16+0x534>)
 8013ce2:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013ce4:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8013ce8:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013cea:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013cee:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013cf0:	eb07 0b00 	add.w	fp, r7, r0
 8013cf4:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013cf6:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013cfa:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013cfe:	f640 5223 	movw	r2, #3363	; 0xd23
 8013d02:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d04:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8013d06:	445c      	add	r4, fp
    tmp3  += z2;
 8013d08:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d0a:	443a      	add	r2, r7
 8013d0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8013d0e:	4484      	add	ip, r0
    tmp11 += z2;
 8013d10:	4448      	add	r0, r9
			     & RANGE_MASK];
 8013d12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013d16:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d1a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8013d1c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013d1e:	9b01      	ldr	r3, [sp, #4]
 8013d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d22:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013d24:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8013d26:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013d2a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d2e:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013d30:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013d32:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013d34:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8013d36:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013d3a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013d3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d42:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013d44:	f818 2006 	ldrb.w	r2, [r8, r6]
 8013d48:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013d4a:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013d4c:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013d4e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013d50:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013d54:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013d58:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d5c:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013d5e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8013d62:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013d64:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013d68:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013d6c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013d6e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013d72:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013d76:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d7a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013d7c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8013d80:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013d82:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013d86:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013d8a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8013d8c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013d90:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013d94:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013d98:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013d9a:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013d9e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013da0:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013da2:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013da4:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8013da6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013daa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013dae:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013db2:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013db4:	f818 2000 	ldrb.w	r2, [r8, r0]
 8013db8:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013dba:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013dbe:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8013dc2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013dc6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013dca:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013dce:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013dd0:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013dd6:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013dd8:	9b02      	ldr	r3, [sp, #8]
 8013dda:	4413      	add	r3, r2
			     & RANGE_MASK];
 8013ddc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013de0:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013de4:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013de6:	9b02      	ldr	r3, [sp, #8]
 8013de8:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8013dec:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8013dee:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013df2:	f818 300e 	ldrb.w	r3, [r8, lr]
 8013df6:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8013df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	f47f aeb2 	bne.w	8013b64 <jpeg_idct_16x16+0x28c>
  }
}
 8013e00:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	ffffeaab 	.word	0xffffeaab
 8013e0c:	ffffd817 	.word	0xffffd817

08013e10 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013e16:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013e18:	3a02      	subs	r2, #2
{
 8013e1a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8013e1c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013e1e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013e22:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013e26:	f105 0320 	add.w	r3, r5, #32
 8013e2a:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013e2c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8013e30:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013e32:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8013e36:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8013e3a:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013e3e:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8013e42:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8013e46:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e4e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8013e52:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013e54:	ea4a 030b 	orr.w	r3, sl, fp
 8013e58:	ea4e 0303 	orr.w	r3, lr, r3
 8013e5c:	ea4c 0303 	orr.w	r3, ip, r3
 8013e60:	433b      	orrs	r3, r7
 8013e62:	4333      	orrs	r3, r6
 8013e64:	ea59 0303 	orrs.w	r3, r9, r3
 8013e68:	f040 8159 	bne.w	801411e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013e6c:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8013e6e:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8013e72:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8013e74:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8013e76:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8013e78:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8013e7a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8013e7e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8013e82:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013e86:	9b04      	ldr	r3, [sp, #16]
 8013e88:	42ab      	cmp	r3, r5
 8013e8a:	d1cf      	bne.n	8013e2c <jpeg_idct_16x8+0x1c>
 8013e8c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8013e8e:	ad0e      	add	r5, sp, #56	; 0x38
 8013e90:	3b04      	subs	r3, #4
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	9b03      	ldr	r3, [sp, #12]
 8013e96:	331c      	adds	r3, #28
 8013e98:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013e9a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013e9c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013ea0:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8013ea4:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8013ea8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013eac:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8013eb0:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013eb4:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8013eb8:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013eba:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8013ec2:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8013ec4:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ec8:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013ecc:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ece:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013ed0:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013ed2:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8013ed6:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013eda:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8013ede:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8013ee2:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013ee6:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8013ee8:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013eec:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013eee:	4acf      	ldr	r2, [pc, #828]	; (801422c <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013ef0:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013ef4:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013ef8:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013efc:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013f00:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013f04:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8013f08:	eb0e 0207 	add.w	r2, lr, r7
 8013f0c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013f0e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8013f12:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8013f16:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013f18:	eb0c 0206 	add.w	r2, ip, r6
 8013f1c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013f1e:	ebac 0206 	sub.w	r2, ip, r6
 8013f22:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013f24:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8013f28:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8013f2c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013f2e:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013f30:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8013f32:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8013f36:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013f38:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013f3a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8013f3e:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8013f42:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8013f44:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8013f48:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013f4c:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013f50:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013f54:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013f56:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013f5a:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013f5c:	4eb4      	ldr	r6, [pc, #720]	; (8014230 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013f5e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013f60:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8013f64:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013f68:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8013f6c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013f70:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013f74:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013f78:	f241 5455 	movw	r4, #5461	; 0x1555
 8013f7c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013f80:	f640 5423 	movw	r4, #3363	; 0xd23
 8013f84:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013f88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013f8a:	4454      	add	r4, sl
 8013f8c:	4474      	add	r4, lr
 8013f8e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013f92:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013f96:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013f98:	eb0c 0409 	add.w	r4, ip, r9
 8013f9c:	445c      	add	r4, fp
 8013f9e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013fa2:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013fa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013fa6:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013fa8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8013fac:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013fae:	f240 224d 	movw	r2, #589	; 0x24d
 8013fb2:	fb02 4203 	mla	r2, r2, r3, r4
 8013fb6:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013fb8:	4a9e      	ldr	r2, [pc, #632]	; (8014234 <jpeg_idct_16x8+0x424>)
 8013fba:	fb02 4407 	mla	r4, r2, r7, r4
 8013fbe:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013fc2:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013fc6:	4c9c      	ldr	r4, [pc, #624]	; (8014238 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013fc8:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013fca:	1afa      	subs	r2, r7, r3
 8013fcc:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013fd0:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8013fd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013fd6:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013fd8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013fdc:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8013fe0:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013fe2:	4a96      	ldr	r2, [pc, #600]	; (801423c <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013fe4:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013fe6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013fea:	435a      	muls	r2, r3
    tmp1  += z1;
 8013fec:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013fee:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013ff2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013ff6:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013ff8:	4a91      	ldr	r2, [pc, #580]	; (8014240 <jpeg_idct_16x8+0x430>)
 8013ffa:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013ffc:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8014000:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014002:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014006:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014008:	eb07 0b00 	add.w	fp, r7, r0
 801400c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801400e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014010:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014012:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014016:	f640 5223 	movw	r2, #3363	; 0xd23
 801401a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801401c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 801401e:	445c      	add	r4, fp
    tmp3  += z2;
 8014020:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014022:	443a      	add	r2, r7
 8014024:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8014026:	4484      	add	ip, r0
    tmp11 += z2;
 8014028:	4448      	add	r0, r9
			     & RANGE_MASK];
 801402a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801402e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014032:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8014034:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8014036:	9b01      	ldr	r3, [sp, #4]
 8014038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801403a:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801403c:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 801403e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8014042:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014046:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014048:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801404a:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801404c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 801404e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8014052:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014056:	f818 2002 	ldrb.w	r2, [r8, r2]
 801405a:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801405c:	f818 2006 	ldrb.w	r2, [r8, r6]
 8014060:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8014062:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8014064:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8014066:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8014068:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801406c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8014070:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014074:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8014076:	f818 2004 	ldrb.w	r2, [r8, r4]
 801407a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801407c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8014080:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8014084:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8014086:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801408a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801408e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014092:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8014094:	f818 200e 	ldrb.w	r2, [r8, lr]
 8014098:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801409a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801409e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80140a2:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80140a4:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80140a8:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80140ac:	f818 2002 	ldrb.w	r2, [r8, r2]
 80140b0:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80140b2:	f818 200c 	ldrb.w	r2, [r8, ip]
 80140b6:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80140b8:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80140ba:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80140bc:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80140be:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80140c2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80140c6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80140ca:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80140cc:	f818 2000 	ldrb.w	r2, [r8, r0]
 80140d0:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80140d2:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80140d6:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 80140da:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80140de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80140e2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80140e6:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80140e8:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80140ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80140ee:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80140f0:	9b02      	ldr	r3, [sp, #8]
 80140f2:	4413      	add	r3, r2
			     & RANGE_MASK];
 80140f4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80140f8:	f818 3003 	ldrb.w	r3, [r8, r3]
 80140fc:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80140fe:	9b02      	ldr	r3, [sp, #8]
 8014100:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8014104:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8014106:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801410a:	f818 300e 	ldrb.w	r3, [r8, lr]
 801410e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8014110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014112:	4293      	cmp	r3, r2
 8014114:	f47f aec1 	bne.w	8013e9a <jpeg_idct_16x8+0x8a>
  }
}
 8014118:	b04f      	add	sp, #316	; 0x13c
 801411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801411e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014120:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014124:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014128:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801412a:	f241 1651 	movw	r6, #4433	; 0x1151
 801412e:	eb0b 0300 	add.w	r3, fp, r0
 8014132:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014134:	f641 067e 	movw	r6, #6270	; 0x187e
 8014138:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801413c:	4e41      	ldr	r6, [pc, #260]	; (8014244 <jpeg_idct_16x8+0x434>)
 801413e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8014142:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014144:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801414a:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 801414e:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8014152:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8014156:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 801415a:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801415e:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8014160:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8014162:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014164:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8014168:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 801416a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801416c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8014170:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014172:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014176:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801417a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801417e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014180:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8014182:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014186:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 801418a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801418e:	1930      	adds	r0, r6, r4
 8014190:	4358      	muls	r0, r3
    z2 += z1;
 8014192:	4b2d      	ldr	r3, [pc, #180]	; (8014248 <jpeg_idct_16x8+0x438>)
 8014194:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014198:	4b2c      	ldr	r3, [pc, #176]	; (801424c <jpeg_idct_16x8+0x43c>)
 801419a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801419e:	eb09 040a 	add.w	r4, r9, sl
 80141a2:	4b2b      	ldr	r3, [pc, #172]	; (8014250 <jpeg_idct_16x8+0x440>)
 80141a4:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 80141a6:	f640 138e 	movw	r3, #2446	; 0x98e
 80141aa:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 80141ae:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 80141b0:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 80141b4:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141b8:	4b26      	ldr	r3, [pc, #152]	; (8014254 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 80141ba:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141be:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 80141c2:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141c6:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80141ca:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 80141cc:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80141ce:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80141d0:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80141d4:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 80141d8:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80141dc:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80141e0:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80141e4:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80141e6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80141e8:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80141ec:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80141f0:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80141f4:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80141f8:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80141fa:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80141fc:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014200:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014202:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014204:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014206:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014208:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801420a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801420e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014210:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014212:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014214:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014216:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801421a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801421c:	9b00      	ldr	r3, [sp, #0]
 801421e:	eba3 0909 	sub.w	r9, r3, r9
 8014222:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8014226:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8014228:	e62d      	b.n	8013e86 <jpeg_idct_16x8+0x76>
 801422a:	bf00      	nop
 801422c:	ffffecc2 	.word	0xffffecc2
 8014230:	ffffb6d6 	.word	0xffffb6d6
 8014234:	ffffdbfa 	.word	0xffffdbfa
 8014238:	ffffe77a 	.word	0xffffe77a
 801423c:	ffffeaab 	.word	0xffffeaab
 8014240:	ffffd817 	.word	0xffffd817
 8014244:	ffffc4df 	.word	0xffffc4df
 8014248:	ffffc13b 	.word	0xffffc13b
 801424c:	fffff384 	.word	0xfffff384
 8014250:	ffffe333 	.word	0xffffe333
 8014254:	ffffadfd 	.word	0xffffadfd

08014258 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425c:	b0c5      	sub	sp, #276	; 0x114
 801425e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8014260:	f1a2 0c02 	sub.w	ip, r2, #2
 8014264:	320e      	adds	r2, #14
 8014266:	9302      	str	r3, [sp, #8]
 8014268:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801426a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801426e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8014272:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014274:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014276:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801427a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801427e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014282:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014286:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801428a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801428e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014290:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014294:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8014298:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801429a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801429e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142a0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80142a2:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142a4:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 80142a8:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142ac:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 80142b0:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80142b2:	eba8 0102 	sub.w	r1, r8, r2
 80142b6:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80142ba:	eba5 0008 	sub.w	r0, r5, r8
 80142be:	f640 2112 	movw	r1, #2578	; 0xa12
 80142c2:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80142c6:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80142c8:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80142ca:	eb09 0407 	add.w	r4, r9, r7
 80142ce:	440c      	add	r4, r1
 80142d0:	49ba      	ldr	r1, [pc, #744]	; (80145bc <jpeg_idct_14x7+0x364>)
 80142d2:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 80142d6:	18a9      	adds	r1, r5, r2
 80142d8:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80142da:	9900      	ldr	r1, [sp, #0]
 80142dc:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80142e0:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 80142e4:	fb01 0102 	mla	r1, r1, r2, r0
 80142e8:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80142ec:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80142f0:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80142f4:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80142f6:	4ab2      	ldr	r2, [pc, #712]	; (80145c0 <jpeg_idct_14x7+0x368>)
 80142f8:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142fc:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8014300:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014302:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014304:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014308:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801430a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 801430c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801430e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8014312:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014316:	eb02 0905 	add.w	r9, r2, r5
 801431a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801431e:	eba2 0905 	sub.w	r9, r2, r5
 8014322:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014326:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014328:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801432a:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801432e:	49a5      	ldr	r1, [pc, #660]	; (80145c4 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8014330:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8014334:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014336:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801433a:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801433c:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014340:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8014344:	44a9      	add	r9, r5
    tmp10 += z2;
 8014346:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014348:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801434c:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801434e:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014350:	4452      	add	r2, sl
 8014352:	12d2      	asrs	r2, r2, #11
 8014354:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014358:	9a01      	ldr	r2, [sp, #4]
 801435a:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801435e:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014362:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014366:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014368:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801436c:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014370:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014372:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014376:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014378:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801437a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801437c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801437e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014382:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8014384:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014386:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 801438a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801438e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014392:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014396:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801439a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801439e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80143a2:	9a04      	ldr	r2, [sp, #16]
 80143a4:	4562      	cmp	r2, ip
 80143a6:	f47f af66 	bne.w	8014276 <jpeg_idct_14x7+0x1e>
 80143aa:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 80143ac:	ac0c      	add	r4, sp, #48	; 0x30
 80143ae:	3a04      	subs	r2, #4
 80143b0:	9200      	str	r2, [sp, #0]
 80143b2:	9a02      	ldr	r2, [sp, #8]
 80143b4:	3218      	adds	r2, #24
 80143b6:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80143b8:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80143ba:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 80143be:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80143c0:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 80143c4:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80143c8:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143cc:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80143ce:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 80143d2:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80143d4:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 80143d8:	9200      	str	r2, [sp, #0]
 80143da:	460a      	mov	r2, r1
 80143dc:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143de:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80143e0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 80143e2:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80143e4:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 80143e8:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80143ec:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80143ee:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80143f0:	4d75      	ldr	r5, [pc, #468]	; (80145c8 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 80143f2:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80143f6:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 80143f8:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 80143fc:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014400:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014402:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014406:	0052      	lsls	r2, r2, #1
 8014408:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 801440c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 801440e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014412:	eb0e 0002 	add.w	r0, lr, r2
 8014416:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014418:	f640 07bd 	movw	r7, #2237	; 0x8bd
 801441c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014420:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014424:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 8014428:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 801442a:	eb0c 0507 	add.w	r5, ip, r7
 801442e:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8014430:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014434:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 8014438:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 801443c:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 801443e:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8014440:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8014442:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8014446:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014448:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 801444c:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801444e:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8014452:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8014456:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 801445a:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801445c:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8014460:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8014462:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014466:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 801446a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801446e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8014472:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014476:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801447a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801447e:	4853      	ldr	r0, [pc, #332]	; (80145cc <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014480:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014484:	eb0a 0705 	add.w	r7, sl, r5
 8014488:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801448c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014490:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8014494:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8014498:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801449c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80144a0:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80144a4:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80144a8:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 80144aa:	4470      	add	r0, lr
 80144ac:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80144ae:	eb08 000c 	add.w	r0, r8, ip
 80144b2:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80144b4:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80144b8:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80144bc:	fb06 0608 	mla	r6, r6, r8, r0
 80144c0:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80144c2:	4e43      	ldr	r6, [pc, #268]	; (80145d0 <jpeg_idct_14x7+0x378>)
 80144c4:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80144c8:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80144cc:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80144ce:	ebac 0508 	sub.w	r5, ip, r8
 80144d2:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80144d4:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80144d6:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 80144da:	483e      	ldr	r0, [pc, #248]	; (80145d4 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80144dc:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80144e0:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80144e2:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80144e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144e8:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80144ea:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80144ec:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 80144f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80144f4:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80144f8:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80144fa:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80144fc:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 80144fe:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014500:	9a02      	ldr	r2, [sp, #8]
 8014502:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8014504:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014508:	5dda      	ldrb	r2, [r3, r7]
 801450a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801450c:	9a04      	ldr	r2, [sp, #16]
 801450e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8014510:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014514:	5c9a      	ldrb	r2, [r3, r2]
 8014516:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014518:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801451a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801451c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8014520:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014524:	f813 200a 	ldrb.w	r2, [r3, sl]
 8014528:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801452a:	9a06      	ldr	r2, [sp, #24]
 801452c:	4402      	add	r2, r0
			     & RANGE_MASK];
 801452e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014532:	5c9a      	ldrb	r2, [r3, r2]
 8014534:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014536:	9a06      	ldr	r2, [sp, #24]
 8014538:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 801453a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801453e:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014540:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014542:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014544:	9a01      	ldr	r2, [sp, #4]
 8014546:	444a      	add	r2, r9
			     & RANGE_MASK];
 8014548:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801454c:	5c9a      	ldrb	r2, [r3, r2]
 801454e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014550:	9a01      	ldr	r2, [sp, #4]
 8014552:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8014556:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801455a:	f813 2009 	ldrb.w	r2, [r3, r9]
 801455e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014560:	9a07      	ldr	r2, [sp, #28]
 8014562:	4432      	add	r2, r6
			     & RANGE_MASK];
 8014564:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014568:	5c9a      	ldrb	r2, [r3, r2]
 801456a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801456c:	9a07      	ldr	r2, [sp, #28]
 801456e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8014570:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014574:	5d9a      	ldrb	r2, [r3, r6]
 8014576:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014578:	9a05      	ldr	r2, [sp, #20]
 801457a:	4472      	add	r2, lr
			     & RANGE_MASK];
 801457c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014580:	5c9a      	ldrb	r2, [r3, r2]
 8014582:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014584:	9a05      	ldr	r2, [sp, #20]
 8014586:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 801458a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801458e:	5d5a      	ldrb	r2, [r3, r5]
 8014590:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014592:	9a03      	ldr	r2, [sp, #12]
 8014594:	4402      	add	r2, r0
			     & RANGE_MASK];
 8014596:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801459a:	5c9a      	ldrb	r2, [r3, r2]
 801459c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801459e:	9a03      	ldr	r2, [sp, #12]
 80145a0:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 80145a2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80145a6:	5c1a      	ldrb	r2, [r3, r0]
 80145a8:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 80145aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145ac:	9900      	ldr	r1, [sp, #0]
 80145ae:	428a      	cmp	r2, r1
 80145b0:	f47f af02 	bne.w	80143b8 <jpeg_idct_14x7+0x160>
  }
}
 80145b4:	b045      	add	sp, #276	; 0x114
 80145b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ba:	bf00      	nop
 80145bc:	ffffc515 	.word	0xffffc515
 80145c0:	ffffb0f1 	.word	0xffffb0f1
 80145c4:	ffffd3e1 	.word	0xffffd3e1
 80145c8:	ffffc8fc 	.word	0xffffc8fc
 80145cc:	ffffdbf0 	.word	0xffffdbf0
 80145d0:	ffffb409 	.word	0xffffb409
 80145d4:	ffffc9e6 	.word	0xffffc9e6

080145d8 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145dc:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80145e0:	b0bb      	sub	sp, #236	; 0xec
 80145e2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80145e4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145e6:	3080      	adds	r0, #128	; 0x80
 80145e8:	320e      	adds	r2, #14
 80145ea:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80145ec:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145ee:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80145f0:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80145f2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80145f6:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80145fa:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80145fe:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014600:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014604:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014606:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801460a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801460e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8014610:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014612:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014616:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801461a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801461e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014622:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8014624:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8014626:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801462a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801462c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014630:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014634:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014636:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8014638:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801463c:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8014640:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014642:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014646:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014648:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801464c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014650:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014654:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014658:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801465c:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014660:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014664:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014668:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801466c:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014670:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014674:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014678:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801467c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014680:	12d2      	asrs	r2, r2, #11
 8014682:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014686:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801468a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801468e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8014692:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8014696:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014698:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801469c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 80146a0:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80146a2:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80146a4:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80146a8:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80146aa:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80146ac:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80146ae:	42b2      	cmp	r2, r6
 80146b0:	d19f      	bne.n	80145f2 <jpeg_idct_12x6+0x1a>
 80146b2:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 80146b6:	aa0a      	add	r2, sp, #40	; 0x28
 80146b8:	3314      	adds	r3, #20
 80146ba:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80146bc:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80146c0:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 80146c4:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80146c6:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80146c8:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 80146ca:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 80146ce:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80146d0:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 80146d4:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 80146d8:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80146da:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 80146de:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80146e2:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 80146e6:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 80146ea:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80146ee:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80146f0:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 80146f4:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80146f8:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 80146fa:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 80146fe:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8014700:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8014704:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8014708:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801470c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8014710:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8014714:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8014716:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801471a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801471c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8014720:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8014722:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8014726:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8014728:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 801472c:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801472e:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 8014732:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8014734:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 8014736:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801473a:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801473c:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014740:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014744:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014748:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801474c:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014750:	484f      	ldr	r0, [pc, #316]	; (8014890 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014752:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014756:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801475a:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801475c:	484d      	ldr	r0, [pc, #308]	; (8014894 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801475e:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014762:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014766:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801476a:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801476e:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014772:	eb01 0709 	add.w	r7, r1, r9
 8014776:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801477a:	4847      	ldr	r0, [pc, #284]	; (8014898 <jpeg_idct_12x6+0x2c0>)
 801477c:	fb00 1108 	mla	r1, r0, r8, r1
 8014780:	4846      	ldr	r0, [pc, #280]	; (801489c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014782:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014784:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014788:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801478c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014790:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8014794:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8014798:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801479a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801479e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80147a0:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80147a4:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80147a8:	483d      	ldr	r0, [pc, #244]	; (80148a0 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147aa:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80147ac:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80147b0:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80147b4:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147b8:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80147ba:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147be:	eb00 080e 	add.w	r8, r0, lr
 80147c2:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 80147c4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80147c8:	f811 c008 	ldrb.w	ip, [r1, r8]
 80147cc:	9944      	ldr	r1, [sp, #272]	; 0x110
 80147ce:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147d2:	9904      	ldr	r1, [sp, #16]
 80147d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80147d8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80147da:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147de:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147e2:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80147e4:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147e8:	eb01 0c05 	add.w	ip, r1, r5
 80147ec:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80147ee:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80147f2:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80147f6:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80147fa:	9902      	ldr	r1, [sp, #8]
 80147fc:	eba1 0805 	sub.w	r8, r1, r5
 8014800:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8014802:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014806:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801480a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801480c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801480e:	19cd      	adds	r5, r1, r7
 8014810:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8014812:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014816:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014818:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801481a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801481c:	1bcf      	subs	r7, r1, r7
 801481e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8014820:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014824:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014826:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014828:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801482a:	190d      	adds	r5, r1, r4
 801482c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801482e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014832:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014834:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014836:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014838:	1b0c      	subs	r4, r1, r4
 801483a:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801483c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014840:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014842:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014844:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014846:	198c      	adds	r4, r1, r6
 8014848:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801484a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801484e:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014850:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014852:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014854:	1b8e      	subs	r6, r1, r6
 8014856:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8014858:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801485c:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801485e:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014860:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014862:	eb01 0409 	add.w	r4, r1, r9
 8014866:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8014868:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801486c:	5d0c      	ldrb	r4, [r1, r4]
 801486e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014870:	9905      	ldr	r1, [sp, #20]
 8014872:	9801      	ldr	r0, [sp, #4]
 8014874:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8014878:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801487c:	5c41      	ldrb	r1, [r0, r1]
 801487e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8014880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014882:	4553      	cmp	r3, sl
 8014884:	f47f af1a 	bne.w	80146bc <jpeg_idct_12x6+0xe4>
  }
}
 8014888:	b03b      	add	sp, #236	; 0xec
 801488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488e:	bf00      	nop
 8014890:	ffffeeaf 	.word	0xffffeeaf
 8014894:	ffffde8b 	.word	0xffffde8b
 8014898:	ffffea5c 	.word	0xffffea5c
 801489c:	ffffc08c 	.word	0xffffc08c
 80148a0:	ffffc4df 	.word	0xffffc4df

080148a4 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80148a8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80148ac:	b0af      	sub	sp, #188	; 0xbc
 80148ae:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80148b0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80148b2:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80148b4:	320e      	adds	r2, #14
 80148b6:	3d04      	subs	r5, #4
  wsptr = workspace;
 80148b8:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80148ba:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80148be:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 80148c2:	9300      	str	r3, [sp, #0]
 80148c4:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148c6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80148ca:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148d0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148d4:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148d8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148dc:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148de:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80148e2:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 80148e4:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148e6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80148ea:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80148ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80148f2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80148f6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80148fa:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80148fe:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014902:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014904:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014908:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801490c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8014910:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014912:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8014916:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801491a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801491e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014922:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014926:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014928:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801492c:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8014930:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014932:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014936:	4b6c      	ldr	r3, [pc, #432]	; (8014ae8 <jpeg_idct_10x5+0x244>)
 8014938:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801493c:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014940:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014942:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014946:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801494a:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801494e:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014952:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014954:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014958:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801495c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8014960:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8014964:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8014968:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801496c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801496e:	d1aa      	bne.n	80148c6 <jpeg_idct_10x5+0x22>
 8014970:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8014972:	a906      	add	r1, sp, #24
 8014974:	f1a3 0b04 	sub.w	fp, r3, #4
 8014978:	3310      	adds	r3, #16
 801497a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801497c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8014980:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8014982:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8014984:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8014988:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801498a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801498e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014990:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014994:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014998:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 801499c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80149a0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80149a2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80149a4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80149a8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80149aa:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80149ae:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80149b2:	006d      	lsls	r5, r5, #1
 80149b4:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80149b8:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80149bc:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80149be:	eb05 030c 	add.w	r3, r5, ip
 80149c2:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80149c4:	f241 0771 	movw	r7, #4209	; 0x1071
 80149c8:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80149cc:	4f46      	ldr	r7, [pc, #280]	; (8014ae8 <jpeg_idct_10x5+0x244>)
 80149ce:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 80149d2:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80149d6:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80149d8:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 80149dc:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80149de:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80149e0:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80149e2:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 80149e4:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 80149e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 80149ec:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 80149f0:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 80149f4:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80149f6:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80149fa:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 80149fe:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014a02:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8014a04:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014a08:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 8014a0c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014a10:	f240 7614 	movw	r6, #1812	; 0x714
 8014a14:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014a16:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014a18:	eba6 0608 	sub.w	r6, r6, r8
 8014a1c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014a1e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8014a22:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014a26:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 8014a2a:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 8014a2e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	035b      	lsls	r3, r3, #13
 8014a36:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a3a:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a3e:	f642 0353 	movw	r3, #10323	; 0x2853
 8014a42:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a44:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014a46:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a48:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a4c:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014a50:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a54:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014a56:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 8014a5a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a5e:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a60:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8014a62:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014a66:	5c82      	ldrb	r2, [r0, r2]
 8014a68:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014a6a:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014a6c:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014a6e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8014a72:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014a74:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014a76:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8014a78:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014a7c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014a80:	5c82      	ldrb	r2, [r0, r2]
 8014a82:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014a84:	5dc3      	ldrb	r3, [r0, r7]
 8014a86:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014a88:	9b00      	ldr	r3, [sp, #0]
 8014a8a:	4443      	add	r3, r8
			    & RANGE_MASK];
 8014a8c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014a90:	5cc3      	ldrb	r3, [r0, r3]
 8014a92:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014a94:	9b00      	ldr	r3, [sp, #0]
 8014a96:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8014a9a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014a9e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8014aa2:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014aa4:	9b02      	ldr	r3, [sp, #8]
 8014aa6:	442b      	add	r3, r5
			    & RANGE_MASK];
 8014aa8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014aac:	5cc3      	ldrb	r3, [r0, r3]
 8014aae:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014ab0:	9b02      	ldr	r3, [sp, #8]
 8014ab2:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8014ab4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014ab8:	5d43      	ldrb	r3, [r0, r5]
 8014aba:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014abc:	9b01      	ldr	r3, [sp, #4]
 8014abe:	4453      	add	r3, sl
			    & RANGE_MASK];
 8014ac0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014ac4:	5cc3      	ldrb	r3, [r0, r3]
 8014ac6:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014ac8:	9b01      	ldr	r3, [sp, #4]
 8014aca:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 8014ace:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014ad2:	f810 300a 	ldrb.w	r3, [r0, sl]
 8014ad6:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8014ad8:	9b05      	ldr	r3, [sp, #20]
 8014ada:	455b      	cmp	r3, fp
 8014adc:	f47f af4e 	bne.w	801497c <jpeg_idct_10x5+0xd8>
  }
}
 8014ae0:	b02f      	add	sp, #188	; 0xbc
 8014ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ae6:	bf00      	nop
 8014ae8:	ffffba5c 	.word	0xffffba5c

08014aec <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014af0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014af4:	b0a5      	sub	sp, #148	; 0x94
 8014af6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014af8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014afa:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014afe:	f102 070e 	add.w	r7, r2, #14
 8014b02:	3d04      	subs	r5, #4
  wsptr = workspace;
 8014b04:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8014b06:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014b0a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014b0e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014b12:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014b14:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014b18:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014b1c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014b1e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014b22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014b24:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014b28:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014b2c:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014b30:	4966      	ldr	r1, [pc, #408]	; (8014ccc <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8014b32:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8014b36:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014b3a:	6a2a      	ldr	r2, [r5, #32]
 8014b3c:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014b40:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8014b42:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8014b46:	eb0a 020b 	add.w	r2, sl, fp
 8014b4a:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014b52:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014b56:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8014b5a:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8014b5e:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8014b62:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014b66:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8014b6a:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 8014b6e:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8014b72:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014b76:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8014b7a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8014b7e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014b80:	d1c5      	bne.n	8014b0e <jpeg_idct_8x4+0x22>
 8014b82:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014b86:	a904      	add	r1, sp, #16
 8014b88:	330c      	adds	r3, #12
 8014b8a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014b8c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014b90:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014b94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014b96:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8014b98:	9302      	str	r3, [sp, #8]
 8014b9a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 8014b9c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8014ba0:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8014ba4:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014ba8:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 8014bac:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8014bb0:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014bb4:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014bb8:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 8014bbc:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014bc0:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014bc4:	4841      	ldr	r0, [pc, #260]	; (8014ccc <jpeg_idct_8x4+0x1e0>)
 8014bc6:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014bca:	f851 3c20 	ldr.w	r3, [r1, #-32]
 8014bce:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8014bd0:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8014bd2:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014bd4:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8014bd8:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8014bdc:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8014be0:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8014be2:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8014be6:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 8014bea:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 8014bee:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8014bf0:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8014bf4:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014bf6:	1883      	adds	r3, r0, r2
 8014bf8:	436b      	muls	r3, r5
    z2 += z1;
 8014bfa:	4d35      	ldr	r5, [pc, #212]	; (8014cd0 <jpeg_idct_8x4+0x1e4>)
 8014bfc:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8014c00:	4d34      	ldr	r5, [pc, #208]	; (8014cd4 <jpeg_idct_8x4+0x1e8>)
 8014c02:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014c06:	eb07 0209 	add.w	r2, r7, r9
 8014c0a:	4d33      	ldr	r5, [pc, #204]	; (8014cd8 <jpeg_idct_8x4+0x1ec>)
 8014c0c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8014c0e:	f640 158e 	movw	r5, #2446	; 0x98e
 8014c12:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8014c16:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8014c18:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014c1c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8014c20:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8014c24:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014c28:	eb0e 0905 	add.w	r9, lr, r5
 8014c2c:	4d2b      	ldr	r5, [pc, #172]	; (8014cdc <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 8014c2e:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014c32:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8014c36:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 8014c3a:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8014c3c:	4448      	add	r0, r9
 8014c3e:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014c42:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014c46:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014c4a:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 8014c4c:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8014c50:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014c54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c56:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8014c58:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014c5c:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8014c60:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014c64:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014c66:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014c6a:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014c6e:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014c70:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8014c72:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014c76:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 8014c7a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014c7e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014c82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014c86:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014c88:	f81c 2009 	ldrb.w	r2, [ip, r9]
 8014c8c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014c8e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8014c92:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014c96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014c9a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014c9c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8014ca0:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014ca2:	9b00      	ldr	r3, [sp, #0]
 8014ca4:	443b      	add	r3, r7
			    & RANGE_MASK];
 8014ca6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014caa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8014cae:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014cb0:	9b00      	ldr	r3, [sp, #0]
 8014cb2:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8014cb4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014cb8:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8014cbc:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014cbe:	9b03      	ldr	r3, [sp, #12]
 8014cc0:	4543      	cmp	r3, r8
 8014cc2:	f47f af63 	bne.w	8014b8c <jpeg_idct_8x4+0xa0>
  }
}
 8014cc6:	b025      	add	sp, #148	; 0x94
 8014cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ccc:	ffffc4df 	.word	0xffffc4df
 8014cd0:	ffffc13b 	.word	0xffffc13b
 8014cd4:	fffff384 	.word	0xfffff384
 8014cd8:	ffffe333 	.word	0xffffe333
 8014cdc:	ffffadfd 	.word	0xffffadfd

08014ce0 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce4:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ce6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8014cea:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014cec:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014cf0:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014cf2:	3080      	adds	r0, #128	; 0x80
 8014cf4:	f102 040a 	add.w	r4, r2, #10
 8014cf8:	f1a1 0c04 	sub.w	ip, r1, #4
 8014cfc:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014cfe:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014d02:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014d06:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014d08:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014d0c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014d0e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d12:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014d16:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014d18:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d1c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d20:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d24:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8014d28:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d2c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014d30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014d34:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d38:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 8014d3c:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8014d40:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014d44:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014d48:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014d4c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014d50:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8014d54:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014d56:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014d5a:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014d5e:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014d62:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014d64:	d1d0      	bne.n	8014d08 <jpeg_idct_6x3+0x28>
 8014d66:	f1a3 0e04 	sub.w	lr, r3, #4
 8014d6a:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014d6e:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014d72:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8014d76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014d78:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014d7a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8014d7e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8014d80:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d84:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014d88:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014d8c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d90:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014d94:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014d98:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8014d9c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8014da0:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8014da4:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014da8:	f242 7131 	movw	r1, #10033	; 0x2731
 8014dac:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8014db0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8014db4:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8014db8:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014dbc:	eb04 0508 	add.w	r5, r4, r8
 8014dc0:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014dc4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8014dc8:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014dcc:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014dd0:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014dd4:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014dd6:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8014dda:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014dde:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014de2:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014de6:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8014dea:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014dee:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014df2:	5d04      	ldrb	r4, [r0, r4]
 8014df4:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014df6:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014dfa:	9801      	ldr	r0, [sp, #4]
 8014dfc:	5d84      	ldrb	r4, [r0, r6]
 8014dfe:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014e00:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014e04:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8014e08:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014e0c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014e10:	5d04      	ldrb	r4, [r0, r4]
 8014e12:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014e14:	f810 3008 	ldrb.w	r3, [r0, r8]
 8014e18:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014e1a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014e1e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8014e22:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014e26:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014e2a:	5cc3      	ldrb	r3, [r0, r3]
 8014e2c:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014e2e:	5d43      	ldrb	r3, [r0, r5]
 8014e30:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8014e32:	d19c      	bne.n	8014d6e <jpeg_idct_6x3+0x8e>
  }
}
 8014e34:	b015      	add	sp, #84	; 0x54
 8014e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014e3c <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e40:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e42:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8014e46:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014e48:	1e96      	subs	r6, r2, #2
 8014e4a:	f10d 0c08 	add.w	ip, sp, #8
 8014e4e:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014e50:	3c04      	subs	r4, #4
 8014e52:	f102 0e06 	add.w	lr, r2, #6
 8014e56:	4660      	mov	r0, ip
{
 8014e58:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e5a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 8014e5e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014e62:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e64:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e68:	6a27      	ldr	r7, [r4, #32]
 8014e6a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8014e6e:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8014e72:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8014e76:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 8014e7a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8014e7e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014e82:	d1ea      	bne.n	8014e5a <jpeg_idct_4x2+0x1e>
 8014e84:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014e86:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014e8a:	f641 097e 	movw	r9, #6270	; 0x187e
 8014e8e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8014e92:	46e0      	mov	r8, ip
 8014e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e96:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8014e9a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8014e9c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8014ea0:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8014ea4:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8014ea8:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8014eac:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8014eae:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014eb2:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014eb6:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014eb8:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014eba:	4b13      	ldr	r3, [pc, #76]	; (8014f08 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014ebc:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014ec0:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014ec4:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014eca:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ece:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8014ed2:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8014ed6:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014eda:	5def      	ldrb	r7, [r5, r7]
 8014edc:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ee0:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8014ee2:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ee4:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014ee6:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014eea:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8014eee:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8014ef0:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8014ef4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014ef8:	5c69      	ldrb	r1, [r5, r1]
 8014efa:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014efc:	5caa      	ldrb	r2, [r5, r2]
 8014efe:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8014f00:	d1c7      	bne.n	8014e92 <jpeg_idct_4x2+0x56>
  }
}
 8014f02:	b00b      	add	sp, #44	; 0x2c
 8014f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f08:	ffffc4df 	.word	0xffffc4df

08014f0c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014f0c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f0e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014f12:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8014f14:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f16:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8014f18:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014f1c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8014f1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014f22:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8014f24:	437b      	muls	r3, r7
{
 8014f26:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8014f28:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8014f2a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8014f2c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014f2e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014f30:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014f32:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014f36:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8014f3a:	5c41      	ldrb	r1, [r0, r1]
 8014f3c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8014f3e:	5cc3      	ldrb	r3, [r0, r3]
 8014f40:	7073      	strb	r3, [r6, #1]
}
 8014f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f44 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f48:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8014f4c:	f1a2 0802 	sub.w	r8, r2, #2
 8014f50:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f52:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014f56:	3380      	adds	r3, #128	; 0x80
 8014f58:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014f5a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8014f5c:	f1a3 0904 	sub.w	r9, r3, #4
 8014f60:	f102 030e 	add.w	r3, r2, #14
 8014f64:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8014f66:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f68:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014f6c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f70:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014f74:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f78:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014f7c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f80:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f82:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014f86:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f88:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8014f8a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014f8c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014f94:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014f96:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f98:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 8014f9c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8014f9e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014fa0:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014fa2:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fa6:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014faa:	4ad3      	ldr	r2, [pc, #844]	; (80152f8 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fac:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014fb0:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8014fb4:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8014fb8:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8014fba:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014fbe:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014fc2:	f642 4563 	movw	r5, #11363	; 0x2c63
 8014fc6:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014fc8:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014fcc:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014fd0:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014fd4:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014fd8:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014fdc:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8014fe0:	eb07 020c 	add.w	r2, r7, ip
 8014fe4:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8014fe6:	eba7 020c 	sub.w	r2, r7, ip
 8014fea:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8014fec:	1972      	adds	r2, r6, r5
 8014fee:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8014ff0:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014ff2:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8014ff6:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8014ff8:	eb0b 0204 	add.w	r2, fp, r4
 8014ffc:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8014ffe:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015002:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8015006:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8015008:	1842      	adds	r2, r0, r1
 801500a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801500c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801500e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8015012:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015014:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015018:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801501c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801501e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8015022:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015024:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8015028:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801502a:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801502e:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015030:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015034:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8015036:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 801503a:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801503c:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801503e:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8015042:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8015046:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801504a:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801504e:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8015052:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8015056:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801505a:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801505e:	f241 5455 	movw	r4, #5461	; 0x1555
 8015062:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8015064:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8015068:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801506a:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 801506e:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015070:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8015074:	4ca1      	ldr	r4, [pc, #644]	; (80152fc <jpeg_idct_8x16+0x3b8>)
 8015076:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801507a:	4fa1      	ldr	r7, [pc, #644]	; (8015300 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801507c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801507e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015080:	4464      	add	r4, ip
 8015082:	445c      	add	r4, fp
 8015084:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8015088:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801508a:	4f9e      	ldr	r7, [pc, #632]	; (8015304 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801508c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801508e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8015092:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8015094:	f240 214d 	movw	r1, #589	; 0x24d
 8015098:	fb01 4102 	mla	r1, r1, r2, r4
 801509c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801509e:	499a      	ldr	r1, [pc, #616]	; (8015308 <jpeg_idct_8x16+0x3c4>)
 80150a0:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80150a4:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80150a6:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80150a8:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80150ac:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80150b0:	fb07 1a05 	mla	sl, r7, r5, r1
 80150b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80150b6:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80150b8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80150bc:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 80150c0:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80150c2:	4992      	ldr	r1, [pc, #584]	; (801530c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80150c4:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80150c6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80150ca:	4351      	muls	r1, r2
    tmp1  += z1;
 80150cc:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80150ce:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80150d2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80150d6:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80150d8:	498d      	ldr	r1, [pc, #564]	; (8015310 <jpeg_idct_8x16+0x3cc>)
 80150da:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80150dc:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80150e0:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80150e2:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80150e6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80150e8:	eb05 0b00 	add.w	fp, r5, r0
 80150ec:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80150ee:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80150f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80150f2:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80150f6:	f640 5123 	movw	r1, #3363	; 0xd23
 80150fa:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80150fc:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 80150fe:	445c      	add	r4, fp
    tmp3  += z2;
 8015100:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015102:	4429      	add	r1, r5
    tmp10 += z2;
 8015104:	4484      	add	ip, r0
    tmp11 += z2;
 8015106:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015108:	12c9      	asrs	r1, r1, #11
 801510a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801510e:	9901      	ldr	r1, [sp, #4]
 8015110:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8015112:	9903      	ldr	r1, [sp, #12]
 8015114:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8015116:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8015118:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801511a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801511e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8015120:	9903      	ldr	r1, [sp, #12]
 8015122:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8015124:	9905      	ldr	r1, [sp, #20]
 8015126:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8015128:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801512a:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801512c:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8015130:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8015132:	9905      	ldr	r1, [sp, #20]
 8015134:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8015136:	9907      	ldr	r1, [sp, #28]
 8015138:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801513a:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801513c:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801513e:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8015142:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8015144:	9907      	ldr	r1, [sp, #28]
 8015146:	eba1 0e0e 	sub.w	lr, r1, lr
 801514a:	ea4f 21ee 	mov.w	r1, lr, asr #11
 801514e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8015152:	9908      	ldr	r1, [sp, #32]
 8015154:	4461      	add	r1, ip
 8015156:	12c9      	asrs	r1, r1, #11
 8015158:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801515a:	9908      	ldr	r1, [sp, #32]
 801515c:	eba1 0c0c 	sub.w	ip, r1, ip
 8015160:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8015164:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8015168:	9906      	ldr	r1, [sp, #24]
 801516a:	4401      	add	r1, r0
 801516c:	12c9      	asrs	r1, r1, #11
 801516e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8015172:	9906      	ldr	r1, [sp, #24]
 8015174:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015176:	9904      	ldr	r1, [sp, #16]
 8015178:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801517a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801517c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801517e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015182:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8015186:	9904      	ldr	r1, [sp, #16]
 8015188:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801518a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801518c:	12d2      	asrs	r2, r2, #11
 801518e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8015192:	9a02      	ldr	r2, [sp, #8]
 8015194:	440a      	add	r2, r1
 8015196:	12d2      	asrs	r2, r2, #11
 8015198:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801519c:	9a02      	ldr	r2, [sp, #8]
 801519e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80151a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80151a2:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80151a4:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80151a6:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80151aa:	f47f aedd 	bne.w	8014f68 <jpeg_idct_8x16+0x24>
 80151ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80151b0:	a80e      	add	r0, sp, #56	; 0x38
 80151b2:	f1a3 0904 	sub.w	r9, r3, #4
 80151b6:	333c      	adds	r3, #60	; 0x3c
 80151b8:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80151ba:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80151be:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80151c2:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80151c4:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 80151c6:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 80151ca:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 80151cc:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 80151d0:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80151d2:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 80151d4:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 80151d8:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80151dc:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80151de:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 80151e2:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80151e6:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80151ea:	4c4a      	ldr	r4, [pc, #296]	; (8015314 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 80151ec:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80151f0:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80151f4:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 80151f8:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80151fc:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80151fe:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8015200:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8015202:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8015206:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 801520a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 801520e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8015212:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8015214:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8015218:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 801521c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801521e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8015222:	1862      	adds	r2, r4, r1
 8015224:	435a      	muls	r2, r3
    z2 += z1;
 8015226:	4b3c      	ldr	r3, [pc, #240]	; (8015318 <jpeg_idct_8x16+0x3d4>)
 8015228:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 801522c:	4b3b      	ldr	r3, [pc, #236]	; (801531c <jpeg_idct_8x16+0x3d8>)
 801522e:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015232:	eb0c 010a 	add.w	r1, ip, sl
 8015236:	4b3a      	ldr	r3, [pc, #232]	; (8015320 <jpeg_idct_8x16+0x3dc>)
 8015238:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 801523a:	f640 138e 	movw	r3, #2446	; 0x98e
 801523e:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8015242:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8015244:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8015248:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801524c:	4b35      	ldr	r3, [pc, #212]	; (8015324 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 801524e:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015252:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8015256:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801525a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801525e:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8015260:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8015262:	4454      	add	r4, sl
 8015264:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8015268:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801526c:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8015270:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015274:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8015276:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801527a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801527c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015280:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8015284:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015288:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 801528a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801528e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015292:	9b00      	ldr	r3, [sp, #0]
 8015294:	5dd9      	ldrb	r1, [r3, r7]
 8015296:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8015298:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 801529a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801529e:	5c59      	ldrb	r1, [r3, r1]
 80152a0:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80152a2:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80152a6:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80152a8:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80152aa:	eb03 010b 	add.w	r1, r3, fp
 80152ae:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80152b0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80152b4:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80152b6:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80152b8:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80152ba:	eba3 020b 	sub.w	r2, r3, fp
 80152be:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80152c0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80152c4:	5c9b      	ldrb	r3, [r3, r2]
 80152c6:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80152c8:	9b01      	ldr	r3, [sp, #4]
 80152ca:	9a00      	ldr	r2, [sp, #0]
 80152cc:	4463      	add	r3, ip
			    & RANGE_MASK];
 80152ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80152d2:	5cd3      	ldrb	r3, [r2, r3]
 80152d4:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80152d6:	9b01      	ldr	r3, [sp, #4]
 80152d8:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 80152dc:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80152e0:	f812 300c 	ldrb.w	r3, [r2, ip]
 80152e4:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 80152e6:	9b04      	ldr	r3, [sp, #16]
 80152e8:	454b      	cmp	r3, r9
 80152ea:	f47f af66 	bne.w	80151ba <jpeg_idct_8x16+0x276>
  }
}
 80152ee:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80152f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f6:	bf00      	nop
 80152f8:	ffffecc2 	.word	0xffffecc2
 80152fc:	ffffb6d6 	.word	0xffffb6d6
 8015300:	ffffc542 	.word	0xffffc542
 8015304:	ffffe77a 	.word	0xffffe77a
 8015308:	ffffdbfa 	.word	0xffffdbfa
 801530c:	ffffeaab 	.word	0xffffeaab
 8015310:	ffffd817 	.word	0xffffd817
 8015314:	ffffc4df 	.word	0xffffc4df
 8015318:	ffffc13b 	.word	0xffffc13b
 801531c:	fffff384 	.word	0xfffff384
 8015320:	ffffe333 	.word	0xffffe333
 8015324:	ffffadfd 	.word	0xffffadfd

08015328 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801532c:	b0ef      	sub	sp, #444	; 0x1bc
 801532e:	f1a2 0e02 	sub.w	lr, r2, #2
 8015332:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015334:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015338:	6d48      	ldr	r0, [r1, #84]	; 0x54
 801533a:	3380      	adds	r3, #128	; 0x80
 801533c:	3804      	subs	r0, #4
 801533e:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015340:	f102 030c 	add.w	r3, r2, #12
 8015344:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8015346:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015348:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801534c:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015350:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8015354:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015358:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801535c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801535e:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015360:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8015364:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8015366:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 801536a:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801536c:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8015370:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8015378:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801537c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8015380:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8015382:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015384:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8015386:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801538a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801538e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8015390:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015394:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015398:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801539c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80153a0:	49b7      	ldr	r1, [pc, #732]	; (8015680 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80153a2:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80153a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80153a6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80153a8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 80153ac:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80153ae:	1916      	adds	r6, r2, r4
 80153b0:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80153b4:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 80153b8:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80153bc:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80153c0:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 80153c4:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 80153c6:	eb07 010c 	add.w	r1, r7, ip
 80153ca:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 80153cc:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80153d0:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80153d4:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 80153d8:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 80153da:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80153dc:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 80153e0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 80153e2:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80153e4:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 80153e8:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 80153ea:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 80153ee:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80153f2:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 80153f6:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 80153f8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80153fa:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80153fc:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015400:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015402:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8015404:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015406:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 801540a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801540c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015410:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015414:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015416:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 801541a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801541e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8015422:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8015426:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801542a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801542e:	4995      	ldr	r1, [pc, #596]	; (8015684 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8015430:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8015434:	eb0a 0805 	add.w	r8, sl, r5
 8015438:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 801543c:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8015440:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8015444:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8015448:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801544a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 801544e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015450:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015454:	4c8c      	ldr	r4, [pc, #560]	; (8015688 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8015456:	4449      	add	r1, r9
 8015458:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801545a:	19b9      	adds	r1, r7, r6
 801545c:	fb0c f101 	mul.w	r1, ip, r1
 8015460:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015464:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8015468:	4c88      	ldr	r4, [pc, #544]	; (801568c <jpeg_idct_7x14+0x364>)
 801546a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801546e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8015470:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015474:	4c86      	ldr	r4, [pc, #536]	; (8015690 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8015476:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8015478:	1bf5      	subs	r5, r6, r7
 801547a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801547e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8015482:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8015486:	9c07      	ldr	r4, [sp, #28]
 8015488:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801548a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801548c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8015490:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015492:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015494:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015498:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 801549a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801549c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801549e:	12d2      	asrs	r2, r2, #11
 80154a0:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80154a4:	9a01      	ldr	r2, [sp, #4]
 80154a6:	eba2 0208 	sub.w	r2, r2, r8
 80154aa:	12d2      	asrs	r2, r2, #11
 80154ac:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80154b0:	9a03      	ldr	r2, [sp, #12]
 80154b2:	4452      	add	r2, sl
 80154b4:	12d2      	asrs	r2, r2, #11
 80154b6:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80154b8:	9a03      	ldr	r2, [sp, #12]
 80154ba:	eba2 0a0a 	sub.w	sl, r2, sl
 80154be:	ea4f 22ea 	mov.w	r2, sl, asr #11
 80154c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80154c6:	9a05      	ldr	r2, [sp, #20]
 80154c8:	440a      	add	r2, r1
 80154ca:	12d2      	asrs	r2, r2, #11
 80154cc:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80154ce:	9a05      	ldr	r2, [sp, #20]
 80154d0:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80154d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154d4:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80154d8:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80154da:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80154dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80154de:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80154e2:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80154e6:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80154e8:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80154ea:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80154ec:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80154f0:	12d2      	asrs	r2, r2, #11
 80154f2:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80154f4:	9a06      	ldr	r2, [sp, #24]
 80154f6:	eba2 0c0c 	sub.w	ip, r2, ip
 80154fa:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80154fe:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015502:	9a04      	ldr	r2, [sp, #16]
 8015504:	442a      	add	r2, r5
 8015506:	12d2      	asrs	r2, r2, #11
 8015508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801550c:	9a04      	ldr	r2, [sp, #16]
 801550e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015510:	9a02      	ldr	r2, [sp, #8]
 8015512:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015514:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015516:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015518:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801551c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8015520:	9a02      	ldr	r2, [sp, #8]
 8015522:	1a52      	subs	r2, r2, r1
 8015524:	12d2      	asrs	r2, r2, #11
 8015526:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801552a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801552c:	4572      	cmp	r2, lr
 801552e:	f47f af0b 	bne.w	8015348 <jpeg_idct_7x14+0x20>
 8015532:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8015534:	ac0c      	add	r4, sp, #48	; 0x30
 8015536:	f1a3 0904 	sub.w	r9, r3, #4
 801553a:	3334      	adds	r3, #52	; 0x34
 801553c:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801553e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8015542:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8015544:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8015546:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 801554a:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801554c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8015550:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8015552:	1b51      	subs	r1, r2, r5
 8015554:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8015558:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801555c:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015560:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015564:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8015568:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801556c:	eba3 0c02 	sub.w	ip, r3, r2
 8015570:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015574:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015576:	4947      	ldr	r1, [pc, #284]	; (8015694 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015578:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801557c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8015580:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015584:	eb0e 000c 	add.w	r0, lr, ip
 8015588:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 801558c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8015590:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8015594:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8015598:	fb02 f208 	mul.w	r2, r2, r8
 801559c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80155a0:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80155a4:	4d3c      	ldr	r5, [pc, #240]	; (8015698 <jpeg_idct_7x14+0x370>)
 80155a6:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 80155aa:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80155ae:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 80155b0:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80155b4:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80155b6:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80155ba:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80155bc:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80155be:	f641 53ef 	movw	r3, #7663	; 0x1def
 80155c2:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80155c6:	eba2 050a 	sub.w	r5, r2, sl
 80155ca:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80155ce:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80155d0:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80155d2:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80155d4:	4b31      	ldr	r3, [pc, #196]	; (801569c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 80155d6:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 80155da:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80155dc:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80155e0:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80155e4:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80155e6:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80155ea:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80155ee:	4455      	add	r5, sl
    tmp10 += z2;
 80155f0:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80155f2:	fb0b 220e 	mla	r2, fp, lr, r2
 80155f6:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80155f8:	eb01 020c 	add.w	r2, r1, ip
 80155fc:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 80155fe:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015602:	5c9a      	ldrb	r2, [r3, r2]
 8015604:	9b03      	ldr	r3, [sp, #12]
 8015606:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015608:	9b01      	ldr	r3, [sp, #4]
 801560a:	eba3 0c0c 	sub.w	ip, r3, ip
 801560e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015610:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015614:	f813 200c 	ldrb.w	r2, [r3, ip]
 8015618:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801561a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801561c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801561e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8015622:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015626:	5c9a      	ldrb	r2, [r3, r2]
 8015628:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801562a:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801562c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801562e:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015630:	eb03 020a 	add.w	r2, r3, sl
 8015634:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015636:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801563a:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801563c:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801563e:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015640:	eba3 0a0a 	sub.w	sl, r3, sl
 8015644:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015646:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801564a:	f813 300a 	ldrb.w	r3, [r3, sl]
 801564e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8015650:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8015654:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015658:	f642 5341 	movw	r3, #11585	; 0x2d41
 801565c:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8015660:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015662:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8015666:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801566a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801566e:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8015670:	9b04      	ldr	r3, [sp, #16]
 8015672:	454b      	cmp	r3, r9
 8015674:	f47f af63 	bne.w	801553e <jpeg_idct_7x14+0x216>
  }
}
 8015678:	b06f      	add	sp, #444	; 0x1bc
 801567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801567e:	bf00      	nop
 8015680:	ffffc8fc 	.word	0xffffc8fc
 8015684:	ffffdbf0 	.word	0xffffdbf0
 8015688:	fffff26e 	.word	0xfffff26e
 801568c:	ffffb409 	.word	0xffffb409
 8015690:	ffffc9e6 	.word	0xffffc9e6
 8015694:	ffffc515 	.word	0xffffc515
 8015698:	ffffb0f1 	.word	0xffffb0f1
 801569c:	ffffd3e1 	.word	0xffffd3e1

080156a0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80156a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a4:	b0d3      	sub	sp, #332	; 0x14c
 80156a6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80156a8:	f1a2 0a02 	sub.w	sl, r2, #2
 80156ac:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80156ae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80156b2:	3380      	adds	r3, #128	; 0x80
 80156b4:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80156b6:	1f0b      	subs	r3, r1, #4
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	f102 030a 	add.w	r3, r2, #10
 80156be:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 80156c0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156c2:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80156c4:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156c8:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80156cc:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80156d4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80156d6:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156da:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80156dc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80156e0:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80156e4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80156e6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80156ea:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80156ec:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80156ee:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80156f0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80156f2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80156f6:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80156fa:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80156fc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015700:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015704:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015708:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801570a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801570c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801570e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8015712:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8015716:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8015718:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801571c:	eb07 010c 	add.w	r1, r7, ip
 8015720:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8015722:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8015726:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 801572a:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 801572e:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8015730:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 8015732:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 8015736:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801573a:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 801573e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8015740:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8015742:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015744:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015748:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 801574c:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801574e:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8015750:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8015752:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015756:	6a12      	ldr	r2, [r2, #32]
 8015758:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801575c:	9a00      	ldr	r2, [sp, #0]
 801575e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8015760:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015764:	9a00      	ldr	r2, [sp, #0]
 8015766:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801576a:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801576e:	4977      	ldr	r1, [pc, #476]	; (801594c <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015770:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015772:	9a00      	ldr	r2, [sp, #0]
 8015774:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8015778:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801577c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801577e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8015782:	4973      	ldr	r1, [pc, #460]	; (8015950 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8015784:	eb02 0806 	add.w	r8, r2, r6
 8015788:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801578c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8015790:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8015794:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8015798:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801579c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80157a0:	18ae      	adds	r6, r5, r2
 80157a2:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80157a4:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80157a6:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80157a8:	496a      	ldr	r1, [pc, #424]	; (8015954 <jpeg_idct_6x12+0x2b4>)
 80157aa:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80157ae:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80157b0:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80157b4:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80157b8:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80157ba:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 80157be:	fb0b 4402 	mla	r4, fp, r2, r4
 80157c2:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80157c4:	4964      	ldr	r1, [pc, #400]	; (8015958 <jpeg_idct_6x12+0x2b8>)
 80157c6:	fb01 000c 	mla	r0, r1, ip, r0
 80157ca:	4964      	ldr	r1, [pc, #400]	; (801595c <jpeg_idct_6x12+0x2bc>)
 80157cc:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 80157d0:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80157d4:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80157d8:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80157dc:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80157de:	eb02 0805 	add.w	r8, r2, r5
 80157e2:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80157e6:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80157ea:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80157ee:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80157f2:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80157f6:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80157f8:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80157fa:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80157fe:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015802:	9902      	ldr	r1, [sp, #8]
 8015804:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015806:	1a8a      	subs	r2, r1, r2
 8015808:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801580a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801580c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015810:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015812:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015814:	4432      	add	r2, r6
 8015816:	12d2      	asrs	r2, r2, #11
 8015818:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801581a:	9a05      	ldr	r2, [sp, #20]
 801581c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801581e:	9a06      	ldr	r2, [sp, #24]
 8015820:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015822:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8015824:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015826:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801582a:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801582c:	9a06      	ldr	r2, [sp, #24]
 801582e:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015830:	9a03      	ldr	r2, [sp, #12]
 8015832:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015834:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015836:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015838:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801583c:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801583e:	9a03      	ldr	r2, [sp, #12]
 8015840:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015844:	9a04      	ldr	r2, [sp, #16]
 8015846:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015848:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801584a:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801584c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015850:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015852:	9a04      	ldr	r2, [sp, #16]
 8015854:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015856:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015858:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801585a:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801585c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015860:	f47f af2f 	bne.w	80156c2 <jpeg_idct_6x12+0x22>
 8015864:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8015866:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8015868:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 801586c:	f1a3 0c04 	sub.w	ip, r3, #4
 8015870:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8015874:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015878:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 801587c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801587e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8015880:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8015884:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8015886:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801588a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801588e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8015892:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015896:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801589a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801589e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80158a2:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80158a6:	eba3 0302 	sub.w	r3, r3, r2
 80158aa:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80158ac:	f242 7331 	movw	r3, #10033	; 0x2731
 80158b0:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 80158b4:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80158b8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 80158bc:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 80158c0:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80158c4:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80158c8:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80158cc:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80158d0:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80158d4:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80158d6:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80158da:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80158dc:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80158e0:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80158e4:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80158e8:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80158ec:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 80158f0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80158f4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80158f8:	5c18      	ldrb	r0, [r3, r0]
 80158fa:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80158fc:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015900:	9b01      	ldr	r3, [sp, #4]
 8015902:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015904:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015906:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015908:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801590c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801590e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015912:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015914:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015916:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015918:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801591c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801591e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8015920:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015924:	f813 300e 	ldrb.w	r3, [r3, lr]
 8015928:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801592a:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801592e:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8015932:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8015936:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801593a:	5cc3      	ldrb	r3, [r0, r3]
 801593c:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801593e:	5d03      	ldrb	r3, [r0, r4]
 8015940:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8015942:	d197      	bne.n	8015874 <jpeg_idct_6x12+0x1d4>
  }
}
 8015944:	b053      	add	sp, #332	; 0x14c
 8015946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594a:	bf00      	nop
 801594c:	ffffeeaf 	.word	0xffffeeaf
 8015950:	ffffde8b 	.word	0xffffde8b
 8015954:	ffffd0b0 	.word	0xffffd0b0
 8015958:	ffffea5c 	.word	0xffffea5c
 801595c:	ffffc08c 	.word	0xffffc08c

08015960 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	b0b9      	sub	sp, #228	; 0xe4
 8015966:	1e94      	subs	r4, r2, #2
 8015968:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801596a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801596e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8015970:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015972:	3380      	adds	r3, #128	; 0x80
 8015974:	3804      	subs	r0, #4
 8015976:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015978:	f102 0308 	add.w	r3, r2, #8
 801597c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801597e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015982:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015984:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015988:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801598c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801598e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8015992:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8015994:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8015998:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801599a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801599e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80159a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80159a6:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80159a8:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 80159ac:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 80159ae:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80159b2:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80159b4:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80159b8:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80159bc:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80159c0:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80159c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80159c4:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80159c6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80159ca:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80159cc:	19f3      	adds	r3, r6, r7
 80159ce:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80159d0:	f241 0271 	movw	r2, #4209	; 0x1071
 80159d4:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80159d8:	4a6d      	ldr	r2, [pc, #436]	; (8015b90 <jpeg_idct_5x10+0x230>)
 80159da:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 80159de:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 80159e0:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80159e4:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 80159e8:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 80159ec:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 80159f0:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80159f2:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80159f4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80159f8:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80159fa:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80159fe:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015a00:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015a02:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015a06:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015a08:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8015a0c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015a10:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8015a14:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015a16:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 8015a1a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8015a1e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015a20:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015a24:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015a28:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015a2c:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015a2e:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015a32:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8015a36:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015a3a:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015a3c:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015a40:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015a42:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015a46:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015a4a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015a4c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8015a4e:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015a52:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015a56:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8015a5a:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015a5e:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015a62:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015a64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015a68:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015a6a:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015a6e:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015a72:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015a76:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015a7a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015a7c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015a7e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015a80:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015a84:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8015a88:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015a8c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015a8e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015a90:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015a92:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015a94:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015a98:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015a9a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015a9c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8015a9e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015aa0:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8015aa4:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8015aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8015aac:	9b02      	ldr	r3, [sp, #8]
 8015aae:	442b      	add	r3, r5
 8015ab0:	12db      	asrs	r3, r3, #11
 8015ab2:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015ab4:	9b02      	ldr	r3, [sp, #8]
 8015ab6:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015ab8:	9b01      	ldr	r3, [sp, #4]
 8015aba:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015abc:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015abe:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015ac0:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015ac4:	9b01      	ldr	r3, [sp, #4]
 8015ac6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015aca:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015acc:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015ad0:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015ad2:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015ad4:	f47f af53 	bne.w	801597e <jpeg_idct_5x10+0x1e>
 8015ad8:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8015ada:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015adc:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015ae0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8015ae4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015ae8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8015aec:	3324      	adds	r3, #36	; 0x24
 8015aee:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8015af0:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8015af4:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8015af6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8015af8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8015afc:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8015b00:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015b04:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015b08:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015b0a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015b0c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8015b0e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015b12:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8015b16:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015b1a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8015b1e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015b22:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8015b24:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8015b28:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 8015b2a:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015b2c:	eb05 000b 	add.w	r0, r5, fp
 8015b30:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8015b34:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8015b38:	4b15      	ldr	r3, [pc, #84]	; (8015b90 <jpeg_idct_5x10+0x230>)
 8015b3a:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015b3e:	eb04 0b05 	add.w	fp, r4, r5
 8015b42:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8015b44:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8015b46:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8015b4a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8015b4e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8015b52:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015b54:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8015b58:	9b00      	ldr	r3, [sp, #0]
 8015b5a:	5d1c      	ldrb	r4, [r3, r4]
 8015b5c:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8015b5e:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015b60:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8015b62:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8015b66:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8015b6a:	5d1c      	ldrb	r4, [r3, r4]
 8015b6c:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015b6e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8015b70:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015b72:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8015b7a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015b7c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8015b80:	5ddb      	ldrb	r3, [r3, r7]
 8015b82:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8015b84:	9b02      	ldr	r3, [sp, #8]
 8015b86:	4563      	cmp	r3, ip
 8015b88:	d1b2      	bne.n	8015af0 <jpeg_idct_5x10+0x190>
  }
}
 8015b8a:	b039      	add	sp, #228	; 0xe4
 8015b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b90:	ffffba5c 	.word	0xffffba5c

08015b94 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b98:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015b9a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8015b9c:	3a02      	subs	r2, #2
{
 8015b9e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8015ba0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015ba2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015ba6:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 8015baa:	f105 0310 	add.w	r3, r5, #16
 8015bae:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015bb0:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8015bb4:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015bb6:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8015bba:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8015bbe:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015bc2:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8015bc6:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8015bca:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bd2:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8015bd6:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015bd8:	ea4a 030b 	orr.w	r3, sl, fp
 8015bdc:	ea4e 0303 	orr.w	r3, lr, r3
 8015be0:	433b      	orrs	r3, r7
 8015be2:	ea48 0303 	orr.w	r3, r8, r3
 8015be6:	4333      	orrs	r3, r6
 8015be8:	ea59 0303 	orrs.w	r3, r9, r3
 8015bec:	d154      	bne.n	8015c98 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015bee:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8015bf0:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8015bf4:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8015bf6:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8015bf8:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 8015bfa:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8015bfc:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8015bfe:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8015c00:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8015c02:	9b05      	ldr	r3, [sp, #20]
 8015c04:	42ab      	cmp	r3, r5
 8015c06:	d1d3      	bne.n	8015bb0 <jpeg_idct_4x8+0x1c>
 8015c08:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8015c0a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015c0c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015c10:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8015c14:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015c16:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015d9c <jpeg_idct_4x8+0x208>
 8015c1a:	331c      	adds	r3, #28
 8015c1c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8015c1e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8015c22:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8015c24:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015c26:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 8015c2a:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 8015c2c:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8015c30:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015c34:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8015c36:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015c3a:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015c3e:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015c40:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015c44:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015c46:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015c4a:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015c4e:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015c52:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015c56:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 8015c5a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8015c5e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015c62:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8015c66:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015c6a:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 8015c6e:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015c70:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015c72:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015c76:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 8015c7a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 8015c7c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8015c80:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015c84:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8015c88:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015c8a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015c8e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8015c90:	d1c5      	bne.n	8015c1e <jpeg_idct_4x8+0x8a>
  }
}
 8015c92:	b027      	add	sp, #156	; 0x9c
 8015c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015c98:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8015c9a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015c9e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8015ca2:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015ca4:	f241 1651 	movw	r6, #4433	; 0x1151
 8015ca8:	eb0b 0300 	add.w	r3, fp, r0
 8015cac:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015cae:	f641 067e 	movw	r6, #6270	; 0x187e
 8015cb2:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015cb6:	4e39      	ldr	r6, [pc, #228]	; (8015d9c <jpeg_idct_4x8+0x208>)
 8015cb8:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8015cbc:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015cbe:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015cc4:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8015cc6:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8015cca:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 8015cce:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8015cd2:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8015cd4:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8015cd6:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8015cd8:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015cdc:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8015cde:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015ce0:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015ce4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8015ce8:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015cea:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015cee:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015cf2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8015cf6:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015cfa:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8015cfc:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8015d00:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8015d04:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015d08:	1930      	adds	r0, r6, r4
 8015d0a:	4358      	muls	r0, r3
    z2 += z1;
 8015d0c:	4b24      	ldr	r3, [pc, #144]	; (8015da0 <jpeg_idct_4x8+0x20c>)
 8015d0e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8015d12:	4b24      	ldr	r3, [pc, #144]	; (8015da4 <jpeg_idct_4x8+0x210>)
 8015d14:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015d18:	eb09 040a 	add.w	r4, r9, sl
 8015d1c:	4b22      	ldr	r3, [pc, #136]	; (8015da8 <jpeg_idct_4x8+0x214>)
 8015d1e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8015d20:	f640 138e 	movw	r3, #2446	; 0x98e
 8015d24:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8015d28:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8015d2a:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8015d2e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015d32:	4b1e      	ldr	r3, [pc, #120]	; (8015dac <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8015d34:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015d38:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8015d3c:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015d40:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015d44:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8015d46:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8015d48:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8015d4a:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8015d4e:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8015d52:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015d56:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015d58:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015d5a:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015d5c:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015d5e:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015d60:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015d64:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015d66:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015d6a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015d6e:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015d70:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015d74:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015d76:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015d78:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015d7a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015d7c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015d7e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015d80:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015d82:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015d84:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015d86:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015d88:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015d8a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8015d8c:	9b02      	ldr	r3, [sp, #8]
 8015d8e:	eba3 0909 	sub.w	r9, r3, r9
 8015d92:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8015d96:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8015d98:	e733      	b.n	8015c02 <jpeg_idct_4x8+0x6e>
 8015d9a:	bf00      	nop
 8015d9c:	ffffc4df 	.word	0xffffc4df
 8015da0:	ffffc13b 	.word	0xffffc13b
 8015da4:	fffff384 	.word	0xfffff384
 8015da8:	ffffe333 	.word	0xffffe333
 8015dac:	ffffadfd 	.word	0xffffadfd

08015db0 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015db4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8015db8:	b095      	sub	sp, #84	; 0x54
 8015dba:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8015dbc:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015dbe:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015dc2:	3204      	adds	r2, #4
 8015dc4:	3c04      	subs	r4, #4
  wsptr = workspace;
 8015dc6:	ae02      	add	r6, sp, #8
{
 8015dc8:	9300      	str	r3, [sp, #0]
 8015dca:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015dcc:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015dd0:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015dd4:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015dd8:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015dda:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015dde:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015de0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015de4:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015de8:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8015dea:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015dec:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015df0:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015df4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015df8:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8015dfc:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8015dfe:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8015e00:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015e04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015e06:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8015e08:	f242 7731 	movw	r7, #10033	; 0x2731
 8015e0c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015e0e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8015e12:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8015e16:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015e18:	6a22      	ldr	r2, [r4, #32]
 8015e1a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015e1c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8015e1e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015e22:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8015e26:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015e2a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015e2e:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015e32:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015e36:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015e38:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015e3a:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015e3e:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015e40:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015e44:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015e48:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015e4c:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015e50:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015e54:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8015e58:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015e5c:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015e60:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8015e64:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015e66:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015e6a:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015e6e:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015e70:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015e74:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015e78:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015e7a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015e7e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015e82:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015e84:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015e86:	d1a1      	bne.n	8015dcc <jpeg_idct_3x6+0x1c>
 8015e88:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8015e8a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015e8c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015e90:	f242 7b31 	movw	fp, #10033	; 0x2731
 8015e94:	1f1d      	subs	r5, r3, #4
 8015e96:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8015e98:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8015e9c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8015e9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015ea0:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8015ea4:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8015ea6:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015eaa:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015eae:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015eb2:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015eb6:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015eba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015ebc:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8015ec0:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8015ec4:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015ec8:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015ecc:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8015ed0:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8015ed4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8015ed8:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8015edc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015ee0:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8015ee4:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015ee8:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8015eec:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8015eee:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015ef2:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8015ef4:	d1d0      	bne.n	8015e98 <jpeg_idct_3x6+0xe8>
  }
}
 8015ef6:	b015      	add	sp, #84	; 0x54
 8015ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015efc <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015f00:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8015f04:	b08b      	sub	sp, #44	; 0x2c
 8015f06:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8015f08:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015f0a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8015f0e:	ad02      	add	r5, sp, #8
 8015f10:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015f12:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015f16:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015f1a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015f1c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8015f20:	46b4      	mov	ip, r6
 8015f22:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015f26:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015f28:	4f29      	ldr	r7, [pc, #164]	; (8015fd0 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015f2a:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015f2c:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015f30:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8015f34:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015f36:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015f3a:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015f3e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015f42:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015f46:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015f4a:	6a21      	ldr	r1, [r4, #32]
 8015f4c:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015f50:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8015f52:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015f56:	eb0a 010b 	add.w	r1, sl, fp
 8015f5a:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015f5e:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015f62:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8015f66:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015f6a:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8015f6e:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8015f72:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8015f76:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015f7a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8015f7e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8015f82:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015f84:	d1ca      	bne.n	8015f1c <jpeg_idct_2x4+0x20>
 8015f86:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8015f88:	a902      	add	r1, sp, #8
 8015f8a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015f8c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8015f90:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8015f92:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8015f94:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8015f98:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8015f9a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015f9e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015fa2:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015fa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015fa8:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015fac:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8015fb0:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8015fb4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015fb8:	5d3c      	ldrb	r4, [r7, r4]
 8015fba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015fbc:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015fbe:	9c01      	ldr	r4, [sp, #4]
 8015fc0:	5ca2      	ldrb	r2, [r4, r2]
 8015fc2:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8015fc6:	d1e1      	bne.n	8015f8c <jpeg_idct_2x4+0x90>
  }
}
 8015fc8:	b00b      	add	sp, #44	; 0x2c
 8015fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fce:	bf00      	nop
 8015fd0:	ffffc4df 	.word	0xffffc4df

08015fd4 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015fd4:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015fd6:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015fd8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015fdc:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015fde:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8015fe2:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015fe4:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015fe6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015fea:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8015fec:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015fee:	3080      	adds	r0, #128	; 0x80
{
 8015ff0:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015ff2:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015ff4:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8015ff6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8015ffa:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015ffe:	5d06      	ldrb	r6, [r0, r4]
 8016000:	681c      	ldr	r4, [r3, #0]
 8016002:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8016004:	5c42      	ldrb	r2, [r0, r1]
 8016006:	685b      	ldr	r3, [r3, #4]
 8016008:	555a      	strb	r2, [r3, r5]
}
 801600a:	bd70      	pop	{r4, r5, r6, pc}

0801600c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	2238      	movs	r2, #56	; 0x38
 8016010:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	4718      	bx	r3

08016018 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8016018:	688b      	ldr	r3, [r1, #8]
{
 801601a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801601e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8016022:	698b      	ldr	r3, [r1, #24]
{
 8016024:	b085      	sub	sp, #20
 8016026:	4681      	mov	r9, r0
 8016028:	460c      	mov	r4, r1
 801602a:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 801602c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016030:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016032:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016036:	6922      	ldr	r2, [r4, #16]
 8016038:	42b2      	cmp	r2, r6
 801603a:	dc02      	bgt.n	8016042 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 801603c:	b005      	add	sp, #20
 801603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016042:	1b92      	subs	r2, r2, r6
 8016044:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8016046:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016048:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801604a:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 801604c:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016050:	bfa8      	it	ge
 8016052:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016054:	69e1      	ldr	r1, [r4, #28]
 8016056:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016058:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801605a:	428a      	cmp	r2, r1
 801605c:	bfa8      	it	ge
 801605e:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016060:	42aa      	cmp	r2, r5
 8016062:	bfa8      	it	ge
 8016064:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8016066:	2a00      	cmp	r2, #0
 8016068:	dde8      	ble.n	801603c <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 801606a:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801606e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8016070:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016072:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8016076:	f1ba 0f00 	cmp.w	sl, #0
 801607a:	d00a      	beq.n	8016092 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	4659      	mov	r1, fp
 8016080:	463b      	mov	r3, r7
 8016082:	4648      	mov	r0, r9
 8016084:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016086:	47a8      	blx	r5
    file_offset += byte_count;
 8016088:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801608a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801608c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801608e:	4416      	add	r6, r2
 8016090:	e7d1      	b.n	8016036 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016092:	9b03      	ldr	r3, [sp, #12]
 8016094:	4659      	mov	r1, fp
 8016096:	4648      	mov	r0, r9
 8016098:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801609a:	9300      	str	r3, [sp, #0]
 801609c:	463b      	mov	r3, r7
 801609e:	e7f2      	b.n	8016086 <do_barray_io+0x6e>

080160a0 <alloc_small>:
{
 80160a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80160a4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80160a8:	4606      	mov	r6, r0
 80160aa:	460d      	mov	r5, r1
 80160ac:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80160ae:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80160b0:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80160b2:	d902      	bls.n	80160ba <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 80160b4:	2101      	movs	r1, #1
 80160b6:	f7ff ffa9 	bl	801600c <out_of_memory>
  if (odd_bytes > 0)
 80160ba:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80160be:	bf1c      	itt	ne
 80160c0:	3408      	addne	r4, #8
 80160c2:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80160c4:	2d01      	cmp	r5, #1
 80160c6:	d906      	bls.n	80160d6 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80160c8:	6833      	ldr	r3, [r6, #0]
 80160ca:	220f      	movs	r2, #15
 80160cc:	4630      	mov	r0, r6
 80160ce:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 80160d6:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 80160da:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 80160de:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 80160e2:	b9e8      	cbnz	r0, 8016120 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 80160e4:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80160e8:	f1ba 0f00 	cmp.w	sl, #0
 80160ec:	d11e      	bne.n	801612c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 80160ee:	4b1d      	ldr	r3, [pc, #116]	; (8016164 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 80160f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 80160f4:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 80160f8:	429d      	cmp	r5, r3
 80160fa:	bf28      	it	cs
 80160fc:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80160fe:	eb05 0b09 	add.w	fp, r5, r9
 8016102:	4630      	mov	r0, r6
 8016104:	4659      	mov	r1, fp
 8016106:	f000 fbcf 	bl	80168a8 <jpeg_get_small>
      if (hdr_ptr != NULL)
 801610a:	b988      	cbnz	r0, 8016130 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801610c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 801610e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8016112:	d803      	bhi.n	801611c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8016114:	2102      	movs	r1, #2
 8016116:	4630      	mov	r0, r6
 8016118:	f7ff ff78 	bl	801600c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 801611c:	465d      	mov	r5, fp
 801611e:	e7ee      	b.n	80160fe <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8016120:	6883      	ldr	r3, [r0, #8]
 8016122:	42a3      	cmp	r3, r4
 8016124:	d211      	bcs.n	801614a <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8016126:	4682      	mov	sl, r0
 8016128:	6800      	ldr	r0, [r0, #0]
 801612a:	e7da      	b.n	80160e2 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 801612c:	4b0e      	ldr	r3, [pc, #56]	; (8016168 <alloc_small+0xc8>)
 801612e:	e7df      	b.n	80160f0 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8016130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8016132:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8016134:	445b      	add	r3, fp
 8016136:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8016138:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801613a:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 801613c:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8016140:	f1ba 0f00 	cmp.w	sl, #0
 8016144:	d10b      	bne.n	801615e <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8016146:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801614a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 801614c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801614e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8016150:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8016152:	6882      	ldr	r2, [r0, #8]
 8016154:	1b12      	subs	r2, r2, r4
 8016156:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8016158:	4418      	add	r0, r3
}
 801615a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 801615e:	f8ca 0000 	str.w	r0, [sl]
 8016162:	e7f2      	b.n	801614a <alloc_small+0xaa>
 8016164:	08030244 	.word	0x08030244
 8016168:	0803023c 	.word	0x0803023c

0801616c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 801616c:	2901      	cmp	r1, #1
{
 801616e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016172:	4604      	mov	r4, r0
 8016174:	460d      	mov	r5, r1
 8016176:	4616      	mov	r6, r2
 8016178:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801617a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 801617e:	d005      	beq.n	801618c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016180:	6803      	ldr	r3, [r0, #0]
 8016182:	220f      	movs	r2, #15
 8016184:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801618c:	223c      	movs	r2, #60	; 0x3c
 801618e:	4629      	mov	r1, r5
 8016190:	4620      	mov	r0, r4
 8016192:	f7ff ff85 	bl	80160a0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016196:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8016198:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801619a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801619c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801619e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 80161a2:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 80161a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 80161a6:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80161aa:	9a07      	ldr	r2, [sp, #28]
 80161ac:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 80161ae:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 80161b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161b6 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 80161b6:	2901      	cmp	r1, #1
{
 80161b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161bc:	4604      	mov	r4, r0
 80161be:	460d      	mov	r5, r1
 80161c0:	4616      	mov	r6, r2
 80161c2:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80161c4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80161c8:	d005      	beq.n	80161d6 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80161ca:	6803      	ldr	r3, [r0, #0]
 80161cc:	220f      	movs	r2, #15
 80161ce:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 80161d6:	223c      	movs	r2, #60	; 0x3c
 80161d8:	4629      	mov	r1, r5
 80161da:	4620      	mov	r0, r4
 80161dc:	f7ff ff60 	bl	80160a0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80161e0:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 80161e2:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80161e4:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 80161e6:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80161e8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 80161ec:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80161ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 80161f0:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80161f4:	9a07      	ldr	r2, [sp, #28]
 80161f6:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 80161f8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 80161fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016200 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016200:	2901      	cmp	r1, #1
{
 8016202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016206:	4606      	mov	r6, r0
 8016208:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801620a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801620c:	d910      	bls.n	8016230 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801620e:	6803      	ldr	r3, [r0, #0]
 8016210:	220f      	movs	r2, #15
 8016212:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801621a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 801621e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8016220:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8016222:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8016224:	bb0b      	cbnz	r3, 801626a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8016226:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8016228:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 801622a:	bb69      	cbnz	r1, 8016288 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 801622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8016230:	d1f3      	bne.n	801621a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016232:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8016234:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016236:	b924      	cbnz	r4, 8016242 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016238:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 801623a:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801623c:	b95f      	cbnz	r7, 8016256 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 801623e:	64af      	str	r7, [r5, #72]	; 0x48
 8016240:	e7eb      	b.n	801621a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8016242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016244:	b12b      	cbz	r3, 8016252 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8016246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016248:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801624c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801624e:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8016250:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016252:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8016254:	e7ef      	b.n	8016236 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	b12b      	cbz	r3, 8016266 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016260:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8016262:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8016264:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016266:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8016268:	e7e8      	b.n	801623c <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 801626a:	e9d3 8700 	ldrd	r8, r7, [r3]
 801626e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8016270:	4619      	mov	r1, r3
 8016272:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8016274:	4417      	add	r7, r2
 8016276:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8016278:	463a      	mov	r2, r7
 801627a:	f000 fb1e 	bl	80168ba <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801627e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016280:	1bdb      	subs	r3, r3, r7
 8016282:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8016284:	4643      	mov	r3, r8
 8016286:	e7cd      	b.n	8016224 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8016288:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801628a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 801628c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8016290:	4414      	add	r4, r2
 8016292:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8016294:	4622      	mov	r2, r4
 8016296:	f000 fb0a 	bl	80168ae <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801629a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801629c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801629e:	1b1b      	subs	r3, r3, r4
 80162a0:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 80162a2:	e7c2      	b.n	801622a <free_pool+0x2a>

080162a4 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 80162a4:	b510      	push	{r4, lr}
 80162a6:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 80162a8:	2101      	movs	r1, #1
 80162aa:	f7ff ffa9 	bl	8016200 <free_pool>
 80162ae:	2100      	movs	r1, #0
 80162b0:	4620      	mov	r0, r4
 80162b2:	f7ff ffa5 	bl	8016200 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 80162b6:	4620      	mov	r0, r4
 80162b8:	6861      	ldr	r1, [r4, #4]
 80162ba:	2254      	movs	r2, #84	; 0x54
 80162bc:	f000 faf7 	bl	80168ae <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80162c0:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80162c2:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80162c4:	6063      	str	r3, [r4, #4]
}
 80162c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80162ca:	f000 bb02 	b.w	80168d2 <jpeg_mem_term>

080162ce <access_virt_barray>:
{
 80162ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 80162d2:	18d7      	adds	r7, r2, r3
{
 80162d4:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80162d6:	684a      	ldr	r2, [r1, #4]
{
 80162d8:	460c      	mov	r4, r1
 80162da:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80162de:	42ba      	cmp	r2, r7
 80162e0:	d304      	bcc.n	80162ec <access_virt_barray+0x1e>
 80162e2:	68ca      	ldr	r2, [r1, #12]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d301      	bcc.n	80162ec <access_virt_barray+0x1e>
 80162e8:	680b      	ldr	r3, [r1, #0]
 80162ea:	b933      	cbnz	r3, 80162fa <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80162ec:	6803      	ldr	r3, [r0, #0]
 80162ee:	2217      	movs	r2, #23
 80162f0:	9001      	str	r0, [sp, #4]
 80162f2:	615a      	str	r2, [r3, #20]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4798      	blx	r3
 80162f8:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 80162fa:	69a3      	ldr	r3, [r4, #24]
 80162fc:	42ab      	cmp	r3, r5
 80162fe:	d803      	bhi.n	8016308 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8016300:	6922      	ldr	r2, [r4, #16]
 8016302:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8016304:	42bb      	cmp	r3, r7
 8016306:	d221      	bcs.n	801634c <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8016308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801630a:	b933      	cbnz	r3, 801631a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	2247      	movs	r2, #71	; 0x47
 8016310:	9001      	str	r0, [sp, #4]
 8016312:	615a      	str	r2, [r3, #20]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4798      	blx	r3
 8016318:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 801631a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801631c:	b13b      	cbz	r3, 801632e <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 801631e:	2201      	movs	r2, #1
 8016320:	4621      	mov	r1, r4
 8016322:	9001      	str	r0, [sp, #4]
 8016324:	f7ff fe78 	bl	8016018 <do_barray_io>
      ptr->dirty = FALSE;
 8016328:	2300      	movs	r3, #0
 801632a:	9801      	ldr	r0, [sp, #4]
 801632c:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801632e:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8016330:	2200      	movs	r2, #0
 8016332:	4621      	mov	r1, r4
 8016334:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8016336:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8016338:	bf29      	itett	cs
 801633a:	6923      	ldrcs	r3, [r4, #16]
 801633c:	462b      	movcc	r3, r5
 801633e:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8016340:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8016344:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8016346:	f7ff fe67 	bl	8016018 <do_barray_io>
 801634a:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 801634c:	69e6      	ldr	r6, [r4, #28]
 801634e:	42be      	cmp	r6, r7
 8016350:	d21c      	bcs.n	801638c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8016352:	42ae      	cmp	r6, r5
 8016354:	d20c      	bcs.n	8016370 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8016356:	f1b8 0f00 	cmp.w	r8, #0
 801635a:	d01b      	beq.n	8016394 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801635c:	6803      	ldr	r3, [r0, #0]
 801635e:	2217      	movs	r2, #23
 8016360:	9001      	str	r0, [sp, #4]
 8016362:	462e      	mov	r6, r5
 8016364:	615a      	str	r2, [r3, #20]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	4798      	blx	r3
    if (writable)
 801636a:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 801636c:	61e7      	str	r7, [r4, #28]
 801636e:	e002      	b.n	8016376 <access_virt_barray+0xa8>
    if (writable)
 8016370:	f1b8 0f00 	cmp.w	r8, #0
 8016374:	d1fa      	bne.n	801636c <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8016376:	6a22      	ldr	r2, [r4, #32]
 8016378:	b1b2      	cbz	r2, 80163a8 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801637a:	68a2      	ldr	r2, [r4, #8]
 801637c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8016380:	69a2      	ldr	r2, [r4, #24]
 8016382:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8016384:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8016386:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016388:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801638a:	d305      	bcc.n	8016398 <access_virt_barray+0xca>
  if (writable)
 801638c:	f1b8 0f00 	cmp.w	r8, #0
 8016390:	d10d      	bne.n	80163ae <access_virt_barray+0xe0>
 8016392:	e00e      	b.n	80163b2 <access_virt_barray+0xe4>
 8016394:	462e      	mov	r6, r5
 8016396:	e7ee      	b.n	8016376 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016398:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801639c:	464a      	mov	r2, r9
 801639e:	2100      	movs	r1, #0
	undef_row++;
 80163a0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80163a2:	f014 fbc3 	bl	802ab2c <memset>
	undef_row++;
 80163a6:	e7ee      	b.n	8016386 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 80163a8:	f1b8 0f00 	cmp.w	r8, #0
 80163ac:	d009      	beq.n	80163c2 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 80163ae:	2301      	movs	r3, #1
 80163b0:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80163b2:	69a0      	ldr	r0, [r4, #24]
 80163b4:	1a2d      	subs	r5, r5, r0
 80163b6:	6820      	ldr	r0, [r4, #0]
}
 80163b8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80163bc:	b003      	add	sp, #12
 80163be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80163c2:	6803      	ldr	r3, [r0, #0]
 80163c4:	2217      	movs	r2, #23
 80163c6:	615a      	str	r2, [r3, #20]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4798      	blx	r3
  if (writable)
 80163cc:	e7f1      	b.n	80163b2 <access_virt_barray+0xe4>

080163ce <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80163ce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80163d2:	429a      	cmp	r2, r3
{
 80163d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d8:	4606      	mov	r6, r0
 80163da:	4688      	mov	r8, r1
 80163dc:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80163de:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80163e0:	d902      	bls.n	80163e8 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 80163e2:	2103      	movs	r1, #3
 80163e4:	f7ff fe12 	bl	801600c <out_of_memory>
  if (odd_bytes > 0)
 80163e8:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80163ec:	bf1c      	itt	ne
 80163ee:	3408      	addne	r4, #8
 80163f0:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80163f2:	f1b8 0f01 	cmp.w	r8, #1
 80163f6:	d906      	bls.n	8016406 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80163f8:	6833      	ldr	r3, [r6, #0]
 80163fa:	220f      	movs	r2, #15
 80163fc:	4630      	mov	r0, r6
 80163fe:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8016406:	f104 0110 	add.w	r1, r4, #16
 801640a:	4630      	mov	r0, r6
 801640c:	f000 fa52 	bl	80168b4 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8016410:	4605      	mov	r5, r0
 8016412:	b918      	cbnz	r0, 801641c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8016414:	2104      	movs	r1, #4
 8016416:	4630      	mov	r0, r6
 8016418:	f7ff fdf8 	bl	801600c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801641e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8016422:	3310      	adds	r3, #16
 8016424:	4423      	add	r3, r4
 8016426:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8016428:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 801642e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8016436:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 8016438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801643c <alloc_barray>:
{
 801643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8016440:	01d7      	lsls	r7, r2, #7
{
 8016442:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016444:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8016448:	4680      	mov	r8, r0
 801644a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801644c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 801644e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016450:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8016454:	d904      	bls.n	8016460 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8016456:	6803      	ldr	r3, [r0, #0]
 8016458:	2248      	movs	r2, #72	; 0x48
 801645a:	615a      	str	r2, [r3, #20]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016460:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8016462:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8016466:	4651      	mov	r1, sl
 8016468:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 801646a:	bfa8      	it	ge
 801646c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801646e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8016470:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8016472:	f7ff fe15 	bl	80160a0 <alloc_small>
 8016476:	4681      	mov	r9, r0
  while (currow < numrows) {
 8016478:	42ae      	cmp	r6, r5
 801647a:	d302      	bcc.n	8016482 <alloc_barray+0x46>
}
 801647c:	4648      	mov	r0, r9
 801647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016482:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8016484:	4651      	mov	r1, sl
 8016486:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016488:	429c      	cmp	r4, r3
 801648a:	bf28      	it	cs
 801648c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801648e:	fb04 f207 	mul.w	r2, r4, r7
 8016492:	f7ff ff9c 	bl	80163ce <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8016496:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801649a:	4426      	add	r6, r4
 801649c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d0e9      	beq.n	8016478 <alloc_barray+0x3c>
      result[currow++] = workspace;
 80164a4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 80164a8:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 80164aa:	e7f9      	b.n	80164a0 <alloc_barray+0x64>

080164ac <alloc_sarray>:
{
 80164ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b0:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80164b2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80164b6:	4607      	mov	r7, r0
 80164b8:	468a      	mov	sl, r1
  if (ltemp <= 0)
 80164ba:	429a      	cmp	r2, r3
{
 80164bc:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80164be:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80164c0:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 80164c4:	d904      	bls.n	80164d0 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80164c6:	6803      	ldr	r3, [r0, #0]
 80164c8:	2248      	movs	r2, #72	; 0x48
 80164ca:	615a      	str	r2, [r3, #20]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80164d0:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80164d2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80164d6:	4651      	mov	r1, sl
 80164d8:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 80164da:	bfa8      	it	ge
 80164dc:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80164de:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 80164e0:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80164e2:	f7ff fddd 	bl	80160a0 <alloc_small>
 80164e6:	4681      	mov	r9, r0
  while (currow < numrows) {
 80164e8:	42ae      	cmp	r6, r5
 80164ea:	d302      	bcc.n	80164f2 <alloc_sarray+0x46>
}
 80164ec:	4648      	mov	r0, r9
 80164ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80164f2:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80164f4:	4651      	mov	r1, sl
 80164f6:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80164f8:	429c      	cmp	r4, r3
 80164fa:	bf28      	it	cs
 80164fc:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80164fe:	fb04 f208 	mul.w	r2, r4, r8
 8016502:	f7ff ff64 	bl	80163ce <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8016506:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801650a:	4426      	add	r6, r4
 801650c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016510:	4293      	cmp	r3, r2
 8016512:	d0e9      	beq.n	80164e8 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8016514:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8016518:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 801651a:	e7f9      	b.n	8016510 <alloc_sarray+0x64>

0801651c <realize_virt_arrays>:
{
 801651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016520:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8016524:	2500      	movs	r5, #0
{
 8016526:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016528:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 801652c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801652e:	bb03      	cbnz	r3, 8016572 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016530:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8016534:	bb43      	cbnz	r3, 8016588 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8016536:	2e00      	cmp	r6, #0
 8016538:	dd19      	ble.n	801656e <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801653a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801653e:	462a      	mov	r2, r5
 8016540:	4631      	mov	r1, r6
 8016542:	4638      	mov	r0, r7
 8016544:	f000 f9bc 	bl	80168c0 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8016548:	4285      	cmp	r5, r0
 801654a:	dd2a      	ble.n	80165a2 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 801654c:	fb90 f6f6 	sdiv	r6, r0, r6
 8016550:	2e01      	cmp	r6, #1
 8016552:	bfb8      	it	lt
 8016554:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016556:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801655a:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 801655e:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016560:	bb0c      	cbnz	r4, 80165a6 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016562:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016566:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801656a:	2d00      	cmp	r5, #0
 801656c:	d141      	bne.n	80165f2 <realize_virt_arrays+0xd6>
}
 801656e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	b932      	cbnz	r2, 8016584 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8016576:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 801657a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 801657e:	6859      	ldr	r1, [r3, #4]
 8016580:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016586:	e7d2      	b.n	801652e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	b942      	cbnz	r2, 801659e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 801658c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8016590:	4351      	muls	r1, r2
 8016592:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8016596:	6859      	ldr	r1, [r3, #4]
 8016598:	434a      	muls	r2, r1
 801659a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a0:	e7c8      	b.n	8016534 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 80165a2:	4e27      	ldr	r6, [pc, #156]	; (8016640 <realize_virt_arrays+0x124>)
 80165a4:	e7d7      	b.n	8016556 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 80165a6:	6823      	ldr	r3, [r4, #0]
 80165a8:	b9ab      	cbnz	r3, 80165d6 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 80165aa:	6862      	ldr	r2, [r4, #4]
 80165ac:	68e1      	ldr	r1, [r4, #12]
 80165ae:	1e53      	subs	r3, r2, #1
 80165b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80165b4:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 80165b6:	429e      	cmp	r6, r3
 80165b8:	db0f      	blt.n	80165da <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 80165ba:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80165bc:	6923      	ldr	r3, [r4, #16]
 80165be:	2101      	movs	r1, #1
 80165c0:	68a2      	ldr	r2, [r4, #8]
 80165c2:	4638      	mov	r0, r7
 80165c4:	f7ff ff72 	bl	80164ac <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 80165c8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80165cc:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 80165ce:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 80165d0:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 80165d2:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80165d6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80165d8:	e7c2      	b.n	8016560 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 80165da:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80165dc:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80165de:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80165e0:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80165e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80165e6:	435a      	muls	r2, r3
 80165e8:	f000 f96c 	bl	80168c4 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 80165ec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 80165f0:	e7e4      	b.n	80165bc <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 80165f2:	682b      	ldr	r3, [r5, #0]
 80165f4:	b9ab      	cbnz	r3, 8016622 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 80165f6:	6868      	ldr	r0, [r5, #4]
 80165f8:	68e9      	ldr	r1, [r5, #12]
 80165fa:	1e43      	subs	r3, r0, #1
 80165fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8016600:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8016602:	429e      	cmp	r6, r3
 8016604:	db0f      	blt.n	8016626 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8016606:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016608:	692b      	ldr	r3, [r5, #16]
 801660a:	2101      	movs	r1, #1
 801660c:	68aa      	ldr	r2, [r5, #8]
 801660e:	4638      	mov	r0, r7
 8016610:	f7ff ff14 	bl	801643c <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8016614:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016618:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 801661a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 801661c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 801661e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016622:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8016624:	e7a1      	b.n	801656a <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8016626:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016628:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 801662a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801662c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801662e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8016630:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8016634:	01d2      	lsls	r2, r2, #7
 8016636:	f000 f945 	bl	80168c4 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 801663a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801663e:	e7e3      	b.n	8016608 <realize_virt_arrays+0xec>
 8016640:	3b9aca00 	.word	0x3b9aca00

08016644 <access_virt_sarray>:
{
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8016648:	eb02 0803 	add.w	r8, r2, r3
{
 801664c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801664e:	684a      	ldr	r2, [r1, #4]
{
 8016650:	b087      	sub	sp, #28
 8016652:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016654:	4542      	cmp	r2, r8
{
 8016656:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801665a:	d304      	bcc.n	8016666 <access_virt_sarray+0x22>
 801665c:	68ca      	ldr	r2, [r1, #12]
 801665e:	429a      	cmp	r2, r3
 8016660:	d301      	bcc.n	8016666 <access_virt_sarray+0x22>
 8016662:	680b      	ldr	r3, [r1, #0]
 8016664:	b933      	cbnz	r3, 8016674 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016666:	6803      	ldr	r3, [r0, #0]
 8016668:	2217      	movs	r2, #23
 801666a:	9003      	str	r0, [sp, #12]
 801666c:	615a      	str	r2, [r3, #20]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	4798      	blx	r3
 8016672:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8016674:	69a3      	ldr	r3, [r4, #24]
 8016676:	42ab      	cmp	r3, r5
 8016678:	d80c      	bhi.n	8016694 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801667a:	6922      	ldr	r2, [r4, #16]
 801667c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801667e:	4543      	cmp	r3, r8
 8016680:	d308      	bcc.n	8016694 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8016682:	69e6      	ldr	r6, [r4, #28]
 8016684:	4546      	cmp	r6, r8
 8016686:	f0c0 8081 	bcc.w	801678c <access_virt_sarray+0x148>
  if (writable)
 801668a:	f1ba 0f00 	cmp.w	sl, #0
 801668e:	f040 80a8 	bne.w	80167e2 <access_virt_sarray+0x19e>
 8016692:	e0a8      	b.n	80167e6 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8016694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016696:	b933      	cbnz	r3, 80166a6 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	2247      	movs	r2, #71	; 0x47
 801669c:	9003      	str	r0, [sp, #12]
 801669e:	615a      	str	r2, [r3, #20]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	4798      	blx	r3
 80166a4:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 80166a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166a8:	b17b      	cbz	r3, 80166ca <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80166aa:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166ae:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 80166b2:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80166b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 80166b8:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166bc:	6922      	ldr	r2, [r4, #16]
 80166be:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80166c0:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166c4:	dc3c      	bgt.n	8016740 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 80166c6:	2300      	movs	r3, #0
 80166c8:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80166ca:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166cc:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80166d0:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80166d2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 80166d6:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80166d8:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80166dc:	bf2a      	itet	cs
 80166de:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80166e2:	462b      	movcc	r3, r5
 80166e4:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80166e8:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 80166ea:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166ee:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80166f0:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80166f2:	454a      	cmp	r2, r9
 80166f4:	ddc5      	ble.n	8016682 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80166f6:	eba2 0209 	sub.w	r2, r2, r9
 80166fa:	6967      	ldr	r7, [r4, #20]
 80166fc:	42ba      	cmp	r2, r7
 80166fe:	bfa8      	it	ge
 8016700:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8016702:	69a7      	ldr	r7, [r4, #24]
 8016704:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016706:	1bf6      	subs	r6, r6, r7
 8016708:	42b2      	cmp	r2, r6
 801670a:	bfa8      	it	ge
 801670c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801670e:	6866      	ldr	r6, [r4, #4]
 8016710:	1bf6      	subs	r6, r6, r7
 8016712:	42b2      	cmp	r2, r6
 8016714:	bfa8      	it	ge
 8016716:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8016718:	2a00      	cmp	r2, #0
 801671a:	ddb2      	ble.n	8016682 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801671c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8016720:	6822      	ldr	r2, [r4, #0]
 8016722:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8016724:	9600      	str	r6, [sp, #0]
 8016726:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801672a:	9305      	str	r3, [sp, #20]
 801672c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8016730:	47b8      	blx	r7
    file_offset += byte_count;
 8016732:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016734:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8016736:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016738:	4491      	add	r9, r2
 801673a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801673e:	e7d6      	b.n	80166ee <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016740:	eba2 0209 	sub.w	r2, r2, r9
 8016744:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8016746:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016748:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801674a:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801674e:	bfa8      	it	ge
 8016750:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8016752:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8016754:	42ba      	cmp	r2, r7
 8016756:	bfa8      	it	ge
 8016758:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801675a:	eba6 070c 	sub.w	r7, r6, ip
 801675e:	42ba      	cmp	r2, r7
 8016760:	bfa8      	it	ge
 8016762:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8016764:	2a00      	cmp	r2, #0
 8016766:	ddae      	ble.n	80166c6 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8016768:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801676c:	6822      	ldr	r2, [r4, #0]
 801676e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8016770:	9700      	str	r7, [sp, #0]
 8016772:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8016776:	9305      	str	r3, [sp, #20]
 8016778:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801677c:	47b0      	blx	r6
    file_offset += byte_count;
 801677e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016780:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8016782:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016784:	4491      	add	r9, r2
 8016786:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801678a:	e797      	b.n	80166bc <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801678c:	42ae      	cmp	r6, r5
 801678e:	d20d      	bcs.n	80167ac <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8016790:	f1ba 0f00 	cmp.w	sl, #0
 8016794:	d020      	beq.n	80167d8 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016796:	6803      	ldr	r3, [r0, #0]
 8016798:	2217      	movs	r2, #23
 801679a:	9003      	str	r0, [sp, #12]
 801679c:	462e      	mov	r6, r5
 801679e:	615a      	str	r2, [r3, #20]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4798      	blx	r3
    if (writable)
 80167a4:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 80167a6:	f8c4 801c 	str.w	r8, [r4, #28]
 80167aa:	e002      	b.n	80167b2 <access_virt_sarray+0x16e>
    if (writable)
 80167ac:	f1ba 0f00 	cmp.w	sl, #0
 80167b0:	d1f9      	bne.n	80167a6 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 80167b2:	6a22      	ldr	r2, [r4, #32]
 80167b4:	b192      	cbz	r2, 80167dc <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80167b6:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80167b8:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80167ba:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 80167bc:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 80167c0:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80167c2:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 80167c4:	f4bf af61 	bcs.w	801668a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80167c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80167cc:	463a      	mov	r2, r7
 80167ce:	2100      	movs	r1, #0
	undef_row++;
 80167d0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80167d2:	f014 f9ab 	bl	802ab2c <memset>
	undef_row++;
 80167d6:	e7f3      	b.n	80167c0 <access_virt_sarray+0x17c>
 80167d8:	462e      	mov	r6, r5
 80167da:	e7ea      	b.n	80167b2 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 80167dc:	f1ba 0f00 	cmp.w	sl, #0
 80167e0:	d009      	beq.n	80167f6 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 80167e2:	2301      	movs	r3, #1
 80167e4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80167e6:	69a0      	ldr	r0, [r4, #24]
 80167e8:	1a2d      	subs	r5, r5, r0
 80167ea:	6820      	ldr	r0, [r4, #0]
}
 80167ec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80167f0:	b007      	add	sp, #28
 80167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80167f6:	6803      	ldr	r3, [r0, #0]
 80167f8:	2217      	movs	r2, #23
 80167fa:	615a      	str	r2, [r3, #20]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	4798      	blx	r3
  if (writable)
 8016800:	e7f1      	b.n	80167e6 <access_virt_sarray+0x1a2>
	...

08016804 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8016804:	2300      	movs	r3, #0
{
 8016806:	b570      	push	{r4, r5, r6, lr}
 8016808:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801680a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801680c:	f000 f85f 	bl	80168ce <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8016810:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8016812:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8016814:	4628      	mov	r0, r5
 8016816:	f000 f847 	bl	80168a8 <jpeg_get_small>

  if (mem == NULL) {
 801681a:	4604      	mov	r4, r0
 801681c:	b948      	cbnz	r0, 8016832 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801681e:	4628      	mov	r0, r5
 8016820:	f000 f857 	bl	80168d2 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8016824:	682b      	ldr	r3, [r5, #0]
 8016826:	2238      	movs	r2, #56	; 0x38
 8016828:	4628      	mov	r0, r5
 801682a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8016832:	4b12      	ldr	r3, [pc, #72]	; (801687c <jinit_memory_mgr+0x78>)
 8016834:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8016836:	4b12      	ldr	r3, [pc, #72]	; (8016880 <jinit_memory_mgr+0x7c>)
 8016838:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801683a:	4b12      	ldr	r3, [pc, #72]	; (8016884 <jinit_memory_mgr+0x80>)
 801683c:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 801683e:	4b12      	ldr	r3, [pc, #72]	; (8016888 <jinit_memory_mgr+0x84>)
 8016840:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8016842:	4b12      	ldr	r3, [pc, #72]	; (801688c <jinit_memory_mgr+0x88>)
 8016844:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8016846:	4b12      	ldr	r3, [pc, #72]	; (8016890 <jinit_memory_mgr+0x8c>)
 8016848:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801684a:	4b12      	ldr	r3, [pc, #72]	; (8016894 <jinit_memory_mgr+0x90>)
 801684c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801684e:	4b12      	ldr	r3, [pc, #72]	; (8016898 <jinit_memory_mgr+0x94>)
 8016850:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8016852:	4b12      	ldr	r3, [pc, #72]	; (801689c <jinit_memory_mgr+0x98>)
 8016854:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8016856:	4b12      	ldr	r3, [pc, #72]	; (80168a0 <jinit_memory_mgr+0x9c>)
 8016858:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801685a:	4b12      	ldr	r3, [pc, #72]	; (80168a4 <jinit_memory_mgr+0xa0>)
 801685c:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801685e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8016862:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8016866:	2300      	movs	r3, #0
 8016868:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 801686a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 801686c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 801686e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8016870:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8016874:	2354      	movs	r3, #84	; 0x54
 8016876:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8016878:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	080160a1 	.word	0x080160a1
 8016880:	080163cf 	.word	0x080163cf
 8016884:	080164ad 	.word	0x080164ad
 8016888:	0801643d 	.word	0x0801643d
 801688c:	080161b7 	.word	0x080161b7
 8016890:	0801616d 	.word	0x0801616d
 8016894:	0801651d 	.word	0x0801651d
 8016898:	08016645 	.word	0x08016645
 801689c:	080162cf 	.word	0x080162cf
 80168a0:	08016201 	.word	0x08016201
 80168a4:	080162a5 	.word	0x080162a5

080168a8 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80168a8:	4608      	mov	r0, r1
 80168aa:	f7f2 b887 	b.w	80089bc <pvPortMalloc>

080168ae <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80168ae:	4608      	mov	r0, r1
 80168b0:	f7f2 b91a 	b.w	8008ae8 <vPortFree>

080168b4 <jpeg_get_large>:
 80168b4:	4608      	mov	r0, r1
 80168b6:	f7f2 b881 	b.w	80089bc <pvPortMalloc>

080168ba <jpeg_free_large>:
 80168ba:	4608      	mov	r0, r1
 80168bc:	f7f2 b914 	b.w	8008ae8 <vPortFree>

080168c0 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 80168c0:	4610      	mov	r0, r2
 80168c2:	4770      	bx	lr

080168c4 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	2233      	movs	r2, #51	; 0x33
 80168c8:	615a      	str	r2, [r3, #20]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4718      	bx	r3

080168ce <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 80168ce:	2000      	movs	r0, #0
 80168d0:	4770      	bx	lr

080168d2 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 80168d2:	4770      	bx	lr

080168d4 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 80168d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80168d8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80168dc:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80168de:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80168e2:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80168e4:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80168e6:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 80168ea:	bf16      	itet	ne
 80168ec:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 80168ee:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 80168f2:	461e      	movne	r6, r3
 80168f4:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80168f6:	6843      	ldr	r3, [r0, #4]
 80168f8:	f506 7280 	add.w	r2, r6, #256	; 0x100
 80168fc:	689f      	ldr	r7, [r3, #8]
 80168fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8016900:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8016902:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8016906:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801690a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801690c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801690e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8016910:	429a      	cmp	r2, r3
 8016912:	dc01      	bgt.n	8016918 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8016914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016918:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801691c:	009f      	lsls	r7, r3, #2
 801691e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8016920:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8016924:	b126      	cbz	r6, 8016930 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8016926:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801692a:	32ff      	adds	r2, #255	; 0xff
 801692c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8016930:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016934:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8016938:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 801693a:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801693c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016940:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016942:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8016946:	428f      	cmp	r7, r1
 8016948:	db0a      	blt.n	8016960 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801694a:	fb10 fb0c 	smulbb	fp, r0, ip
 801694e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8016952:	3101      	adds	r1, #1
 8016954:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8016958:	d1f5      	bne.n	8016946 <create_colorindex+0x72>
    if (pad)
 801695a:	b93e      	cbnz	r6, 801696c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801695c:	3301      	adds	r3, #1
 801695e:	e7d6      	b.n	801690e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8016960:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8016962:	fb08 a700 	mla	r7, r8, r0, sl
 8016966:	fb97 f7f9 	sdiv	r7, r7, r9
 801696a:	e7ec      	b.n	8016946 <create_colorindex+0x72>
 801696c:	4611      	mov	r1, r2
 801696e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8016972:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8016976:	f892 9000 	ldrb.w	r9, [r2]
 801697a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801697e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8016980:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8016984:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8016988:	d1f5      	bne.n	8016976 <create_colorindex+0xa2>
 801698a:	e7e7      	b.n	801695c <create_colorindex+0x88>

0801698c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801698c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8016990:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8016994:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8016996:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801699a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 801699e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80169a2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80169a4:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80169a6:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80169a8:	4540      	cmp	r0, r8
 80169aa:	db02      	blt.n	80169b2 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80169ac:	b003      	add	sp, #12
 80169ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80169b2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80169b6:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 80169b8:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80169bc:	eb04 0a03 	add.w	sl, r4, r3
 80169c0:	4554      	cmp	r4, sl
 80169c2:	d10f      	bne.n	80169e4 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 80169c4:	3001      	adds	r0, #1
 80169c6:	e7ef      	b.n	80169a8 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80169c8:	f815 b003 	ldrb.w	fp, [r5, r3]
 80169cc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 80169d0:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80169d2:	f817 700b 	ldrb.w	r7, [r7, fp]
 80169d6:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 80169d8:	4563      	cmp	r3, ip
 80169da:	dbf5      	blt.n	80169c8 <color_quantize+0x3c>
 80169dc:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 80169de:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 80169e2:	e7ed      	b.n	80169c0 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 80169e4:	2300      	movs	r3, #0
      pixcode = 0;
 80169e6:	461e      	mov	r6, r3
 80169e8:	e7f6      	b.n	80169d8 <color_quantize+0x4c>

080169ea <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 80169ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80169ee:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80169f2:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80169f6:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80169f8:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80169fa:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80169fe:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8016a02:	4298      	cmp	r0, r3
 8016a04:	db01      	blt.n	8016a0a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8016a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8016a0a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8016a0e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8016a12:	eb05 0a09 	add.w	sl, r5, r9
 8016a16:	4555      	cmp	r5, sl
 8016a18:	f104 0403 	add.w	r4, r4, #3
 8016a1c:	d101      	bne.n	8016a22 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8016a1e:	3001      	adds	r0, #1
 8016a20:	e7ef      	b.n	8016a02 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8016a22:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8016a26:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8016a2a:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8016a2e:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8016a32:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8016a34:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8016a38:	f818 6006 	ldrb.w	r6, [r8, r6]
 8016a3c:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8016a3e:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8016a42:	e7e8      	b.n	8016a16 <color_quantize3+0x2c>

08016a44 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8016a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a48:	469a      	mov	sl, r3
 8016a4a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016a4c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016a50:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8016a54:	699a      	ldr	r2, [r3, #24]
 8016a56:	6811      	ldr	r1, [r2, #0]
 8016a58:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016a5a:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016a5c:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8016a5e:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016a60:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016a62:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016a64:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8016a66:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8016a68:	4551      	cmp	r1, sl
 8016a6a:	db02      	blt.n	8016a72 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8016a6c:	b00b      	add	sp, #44	; 0x2c
 8016a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8016a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8016a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a76:	9c07      	ldr	r4, [sp, #28]
 8016a78:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 8016a7c:	0190      	lsls	r0, r2, #6
 8016a7e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8016a82:	9002      	str	r0, [sp, #8]
 8016a84:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8016a88:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 8016a8a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 8016a8c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8016a90:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8016a92:	9808      	ldr	r0, [sp, #32]
 8016a94:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8016a98:	4575      	cmp	r5, lr
 8016a9a:	f100 0003 	add.w	r0, r0, #3
 8016a9e:	d106      	bne.n	8016aae <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016aa0:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016aa2:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016aa4:	3201      	adds	r2, #1
 8016aa6:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 8016aaa:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8016aac:	e7dc      	b.n	8016a68 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016aae:	9e02      	ldr	r6, [sp, #8]
 8016ab0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8016ab4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016ab8:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8016aba:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016abc:	f858 7006 	ldr.w	r7, [r8, r6]
 8016ac0:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016ac2:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8016ac4:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016ac8:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016acc:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8016ad0:	f859 7006 	ldr.w	r7, [r9, r6]
 8016ad4:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016ad6:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016ad8:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016adc:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016ade:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016ae0:	9a06      	ldr	r2, [sp, #24]
 8016ae2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8016ae6:	4417      	add	r7, r2
 8016ae8:	5dbe      	ldrb	r6, [r7, r6]
 8016aea:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 8016aec:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8016af0:	e7d2      	b.n	8016a98 <quantize3_ord_dither+0x54>

08016af2 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016af2:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8016af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016af6:	3202      	adds	r2, #2
 8016af8:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 8016afc:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016afe:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016b00:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016b02:	3644      	adds	r6, #68	; 0x44
 8016b04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016b06:	42bb      	cmp	r3, r7
 8016b08:	dc00      	bgt.n	8016b0c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8016b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8016b0c:	6863      	ldr	r3, [r4, #4]
 8016b0e:	462a      	mov	r2, r5
 8016b10:	2101      	movs	r1, #1
 8016b12:	4620      	mov	r0, r4
 8016b14:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016b16:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8016b18:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8016b1a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016b1e:	e7f1      	b.n	8016b04 <alloc_fs_workspace+0x12>

08016b20 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8016b20:	4770      	bx	lr

08016b22 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8016b22:	6803      	ldr	r3, [r0, #0]
 8016b24:	222f      	movs	r2, #47	; 0x2f
 8016b26:	615a      	str	r2, [r3, #20]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4718      	bx	r3

08016b2c <start_pass_1_quant>:
{
 8016b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016b30:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8016b34:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8016b36:	692b      	ldr	r3, [r5, #16]
 8016b38:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8016b3c:	696b      	ldr	r3, [r5, #20]
 8016b3e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8016b42:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d00b      	beq.n	8016b62 <start_pass_1_quant+0x36>
 8016b4a:	2b02      	cmp	r3, #2
 8016b4c:	d05e      	beq.n	8016c0c <start_pass_1_quant+0xe0>
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d174      	bne.n	8016c3c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8016b52:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8016b54:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8016b56:	bf0c      	ite	eq
 8016b58:	4b3c      	ldreq	r3, [pc, #240]	; (8016c4c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8016b5a:	4b3d      	ldrne	r3, [pc, #244]	; (8016c50 <start_pass_1_quant+0x124>)
 8016b5c:	606b      	str	r3, [r5, #4]
}
 8016b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8016b62:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8016b64:	4b3b      	ldr	r3, [pc, #236]	; (8016c54 <start_pass_1_quant+0x128>)
 8016b66:	4a3c      	ldr	r2, [pc, #240]	; (8016c58 <start_pass_1_quant+0x12c>)
 8016b68:	2903      	cmp	r1, #3
 8016b6a:	bf18      	it	ne
 8016b6c:	4613      	movne	r3, r2
 8016b6e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8016b70:	2300      	movs	r3, #0
 8016b72:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8016b74:	69eb      	ldr	r3, [r5, #28]
 8016b76:	b90b      	cbnz	r3, 8016b7c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8016b78:	f7ff feac 	bl	80168d4 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8016b7c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8016b7e:	2d00      	cmp	r5, #0
 8016b80:	d1ed      	bne.n	8016b5e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016b82:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016b86:	f107 0820 	add.w	r8, r7, #32
 8016b8a:	4646      	mov	r6, r8
 8016b8c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016b8e:	429d      	cmp	r5, r3
 8016b90:	dae5      	bge.n	8016b5e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016b92:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8016b96:	4642      	mov	r2, r8
 8016b98:	2300      	movs	r3, #0
 8016b9a:	429d      	cmp	r5, r3
 8016b9c:	d007      	beq.n	8016bae <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8016b9e:	f852 1b04 	ldr.w	r1, [r2], #4
 8016ba2:	4589      	cmp	r9, r1
 8016ba4:	d130      	bne.n	8016c08 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8016ba6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016baa:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 8016bac:	bb48      	cbnz	r0, 8016c02 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016bae:	6863      	ldr	r3, [r4, #4]
 8016bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016bb4:	2101      	movs	r1, #1
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8016bbc:	f109 32ff 	add.w	r2, r9, #4294967295
 8016bc0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8016bc4:	f8df c098 	ldr.w	ip, [pc, #152]	; 8016c60 <start_pass_1_quant+0x134>
 8016bc8:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016bca:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8016bce:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8016bd2:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8016bd4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016bd8:	005b      	lsls	r3, r3, #1
 8016bda:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8016bde:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8016be2:	bf45      	ittet	mi
 8016be4:	425b      	negmi	r3, r3
 8016be6:	fb93 f3f2 	sdivmi	r3, r3, r2
 8016bea:	fb93 f3f2 	sdivpl	r3, r3, r2
 8016bee:	425b      	negmi	r3, r3
 8016bf0:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8016bf4:	458e      	cmp	lr, r1
 8016bf6:	d1ed      	bne.n	8016bd4 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016bf8:	3140      	adds	r1, #64	; 0x40
 8016bfa:	f10c 0c10 	add.w	ip, ip, #16
 8016bfe:	458a      	cmp	sl, r1
 8016c00:	d1e5      	bne.n	8016bce <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c02:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8016c04:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016c06:	e7c1      	b.n	8016b8c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8016c08:	3301      	adds	r3, #1
 8016c0a:	e7c6      	b.n	8016b9a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8016c0c:	4b13      	ldr	r3, [pc, #76]	; (8016c5c <start_pass_1_quant+0x130>)
 8016c0e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8016c10:	2300      	movs	r3, #0
 8016c12:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8016c14:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8016c16:	b90b      	cbnz	r3, 8016c1c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8016c18:	f7ff ff6b 	bl	8016af2 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016c1c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016c1e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8016c20:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016c22:	3202      	adds	r2, #2
 8016c24:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8016c26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016c28:	42bb      	cmp	r3, r7
 8016c2a:	dd98      	ble.n	8016b5e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8016c2c:	4632      	mov	r2, r6
 8016c2e:	2100      	movs	r1, #0
 8016c30:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8016c34:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8016c36:	f013 ff79 	bl	802ab2c <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8016c3a:	e7f4      	b.n	8016c26 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8016c3c:	6803      	ldr	r3, [r0, #0]
 8016c3e:	2231      	movs	r2, #49	; 0x31
}
 8016c40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8016c44:	615a      	str	r2, [r3, #20]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	4718      	bx	r3
 8016c4a:	bf00      	nop
 8016c4c:	080169eb 	.word	0x080169eb
 8016c50:	0801698d 	.word	0x0801698d
 8016c54:	08016a45 	.word	0x08016a45
 8016c58:	08016d9d 	.word	0x08016d9d
 8016c5c:	08016c65 	.word	0x08016c65
 8016c60:	08030258 	.word	0x08030258

08016c64 <quantize_fs_dither>:
{
 8016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c68:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8016c6a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8016c6c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8016c70:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016c74:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8016c78:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016c7c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016c80:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016c82:	1e6b      	subs	r3, r5, #1
 8016c84:	9304      	str	r3, [sp, #16]
 8016c86:	fb03 f309 	mul.w	r3, r3, r9
 8016c8a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016c8c:	1c6b      	adds	r3, r5, #1
 8016c8e:	005b      	lsls	r3, r3, #1
 8016c90:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8016c92:	2300      	movs	r3, #0
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	9a00      	ldr	r2, [sp, #0]
 8016c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	db02      	blt.n	8016ca4 <quantize_fs_dither+0x40>
}
 8016c9e:	b011      	add	sp, #68	; 0x44
 8016ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	462a      	mov	r2, r5
 8016ca8:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8016cac:	f013 ff3e 	bl	802ab2c <memset>
    for (ci = 0; ci < nc; ci++) {
 8016cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8016cb8:	f1c9 0300 	rsb	r3, r9, #0
 8016cbc:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8016cbe:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8016cc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8016cc2:	db06      	blt.n	8016cd2 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016cc4:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8016cc8:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016cca:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 8016ccc:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016cce:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8016cd0:	e7e0      	b.n	8016c94 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8016cd2:	9800      	ldr	r0, [sp, #0]
 8016cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8016cda:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8016cde:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016ce2:	9b05      	ldr	r3, [sp, #20]
 8016ce4:	f853 cb04 	ldr.w	ip, [r3], #4
 8016ce8:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 8016cea:	b312      	cbz	r2, 8016d32 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016cec:	9b08      	ldr	r3, [sp, #32]
 8016cee:	449e      	add	lr, r3
	output_ptr += width-1;
 8016cf0:	9b04      	ldr	r3, [sp, #16]
 8016cf2:	4418      	add	r0, r3
	dirnc = -nc;
 8016cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cf6:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cfa:	449c      	add	ip, r3
	dir = -1;
 8016cfc:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8016d00:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8016d02:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8016d04:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8016d06:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8016d08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d0c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8016d0e:	6923      	ldr	r3, [r4, #16]
 8016d10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d14:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016d16:	9b02      	ldr	r3, [sp, #8]
 8016d18:	005b      	lsls	r3, r3, #1
 8016d1a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8016d1c:	2300      	movs	r3, #0
      cur = 0;
 8016d1e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8016d20:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016d22:	9a03      	ldr	r2, [sp, #12]
 8016d24:	b94a      	cbnz	r2, 8016d3a <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016d26:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8016d28:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8016d2a:	436a      	muls	r2, r5
 8016d2c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8016d30:	e7c5      	b.n	8016cbe <quantize_fs_dither+0x5a>
	dir = 1;
 8016d32:	2301      	movs	r3, #1
 8016d34:	f8cd 901c 	str.w	r9, [sp, #28]
 8016d38:	e7e2      	b.n	8016d00 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016d3a:	9a01      	ldr	r2, [sp, #4]
 8016d3c:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8016d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016d42:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8016d44:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8016d48:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8016d4c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8016d52:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016d56:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016d5a:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8016d5e:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016d60:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8016d64:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016d68:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016d6c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016d6e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016d72:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8016d74:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8016d76:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8016d7a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8016d7c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016d7e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8016d80:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016d84:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016d86:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8016d88:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8016d8a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8016d8c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8016d8e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8016d90:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8016d94:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016d98:	4417      	add	r7, r2
 8016d9a:	e7c2      	b.n	8016d22 <quantize_fs_dither+0xbe>

08016d9c <quantize_ord_dither>:
{
 8016d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da0:	b089      	sub	sp, #36	; 0x24
 8016da2:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016da4:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8016da8:	1f14      	subs	r4, r2, #4
{
 8016daa:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8016dac:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 8016dae:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8016db0:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8016db4:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016db6:	9b07      	ldr	r3, [sp, #28]
 8016db8:	429f      	cmp	r7, r3
 8016dba:	db02      	blt.n	8016dc2 <quantize_ord_dither+0x26>
}
 8016dbc:	b009      	add	sp, #36	; 0x24
 8016dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016dc2:	4652      	mov	r2, sl
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8016dca:	f013 feaf 	bl	802ab2c <memset>
    row_index = cquantize->row_index;
 8016dce:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8016dd2:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8016dd6:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8016dd8:	019a      	lsls	r2, r3, #6
 8016dda:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8016ddc:	9a01      	ldr	r2, [sp, #4]
 8016dde:	4290      	cmp	r0, r2
 8016de0:	db06      	blt.n	8016df0 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016de2:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8016de4:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016de6:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8016dea:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8016dee:	e7e2      	b.n	8016db6 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8016df0:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8016df4:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8016df6:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8016dfa:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8016dfe:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8016e00:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8016e02:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8016e04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016e08:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8016e0a:	eb0a 0205 	add.w	r2, sl, r5
 8016e0e:	9206      	str	r2, [sp, #24]
 8016e10:	9a06      	ldr	r2, [sp, #24]
 8016e12:	4295      	cmp	r5, r2
 8016e14:	d101      	bne.n	8016e1a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8016e16:	3001      	adds	r0, #1
 8016e18:	e7e0      	b.n	8016ddc <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016e1a:	782a      	ldrb	r2, [r5, #0]
 8016e1c:	f891 e000 	ldrb.w	lr, [r1]
 8016e20:	9204      	str	r2, [sp, #16]
 8016e22:	9a02      	ldr	r2, [sp, #8]
 8016e24:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8016e28:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016e2a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016e2c:	f85b b002 	ldr.w	fp, [fp, r2]
 8016e30:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8016e32:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8016e36:	4496      	add	lr, r2
 8016e38:	9a04      	ldr	r2, [sp, #16]
 8016e3a:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8016e3e:	4472      	add	r2, lr
 8016e40:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8016e44:	9a01      	ldr	r2, [sp, #4]
 8016e46:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8016e48:	e7e2      	b.n	8016e10 <quantize_ord_dither+0x74>
	...

08016e4c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016e4c:	6843      	ldr	r3, [r0, #4]
 8016e4e:	2258      	movs	r2, #88	; 0x58
 8016e50:	2101      	movs	r1, #1
 8016e52:	681b      	ldr	r3, [r3, #0]
{
 8016e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e58:	b085      	sub	sp, #20
 8016e5a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016e5c:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8016e5e:	4b67      	ldr	r3, [pc, #412]	; (8016ffc <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016e60:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8016e64:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8016e66:	4b66      	ldr	r3, [pc, #408]	; (8017000 <jinit_1pass_quantizer+0x1b4>)
 8016e68:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8016e6a:	4b66      	ldr	r3, [pc, #408]	; (8017004 <jinit_1pass_quantizer+0x1b8>)
 8016e6c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8016e6e:	2300      	movs	r3, #0
 8016e70:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8016e72:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8016e74:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016e76:	2b04      	cmp	r3, #4
 8016e78:	dd07      	ble.n	8016e8a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	2039      	movs	r0, #57	; 0x39
 8016e7e:	2204      	movs	r2, #4
 8016e80:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4620      	mov	r0, r4
 8016e88:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8016e8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8016e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e90:	dd08      	ble.n	8016ea4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	213b      	movs	r1, #59	; 0x3b
 8016e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016ea4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8016ea8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8016eaa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8016eae:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8016eb2:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8016eb6:	469a      	mov	sl, r3
 8016eb8:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8016eba:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8016ebc:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8016ebe:	4588      	cmp	r8, r1
 8016ec0:	dc47      	bgt.n	8016f52 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8016ec2:	4591      	cmp	r9, r2
 8016ec4:	daf7      	bge.n	8016eb6 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8016ec6:	f1ba 0f01 	cmp.w	sl, #1
 8016eca:	d106      	bne.n	8016eda <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8016ecc:	6823      	ldr	r3, [r4, #0]
 8016ece:	213a      	movs	r1, #58	; 0x3a
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 8016eda:	463a      	mov	r2, r7
 8016edc:	2300      	movs	r3, #0
 8016ede:	2501      	movs	r5, #1
 8016ee0:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8016ee2:	4598      	cmp	r8, r3
 8016ee4:	dc38      	bgt.n	8016f58 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016ee6:	f8df c120 	ldr.w	ip, [pc, #288]	; 8017008 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 8016eea:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8016eec:	460b      	mov	r3, r1
 8016eee:	4598      	cmp	r8, r3
 8016ef0:	dc38      	bgt.n	8016f64 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8016ef2:	2900      	cmp	r1, #0
 8016ef4:	d1f9      	bne.n	8016eea <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8016ef6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016ef8:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8016efa:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016efc:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8016efe:	d148      	bne.n	8016f92 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016f00:	619d      	str	r5, [r3, #24]
 8016f02:	6a31      	ldr	r1, [r6, #32]
 8016f04:	61d9      	str	r1, [r3, #28]
 8016f06:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8016f08:	6219      	str	r1, [r3, #32]
 8016f0a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8016f0c:	6259      	str	r1, [r3, #36]	; 0x24
 8016f0e:	2160      	movs	r1, #96	; 0x60
 8016f10:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016f12:	2101      	movs	r1, #1
 8016f14:	4620      	mov	r0, r4
 8016f16:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8016f18:	6863      	ldr	r3, [r4, #4]
 8016f1a:	462a      	mov	r2, r5
 8016f1c:	2101      	movs	r1, #1
 8016f1e:	689f      	ldr	r7, [r3, #8]
 8016f20:	4620      	mov	r0, r4
 8016f22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016f24:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016f26:	46ae      	mov	lr, r5
 8016f28:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8016f2a:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016f2c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	db33      	blt.n	8016f9a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8016f32:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8016f34:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8016f36:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8016f3a:	f7ff fccb 	bl	80168d4 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8016f3e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016f42:	2b02      	cmp	r3, #2
 8016f44:	d156      	bne.n	8016ff4 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8016f46:	4620      	mov	r0, r4
}
 8016f48:	b005      	add	sp, #20
 8016f4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8016f4e:	f7ff bdd0 	b.w	8016af2 <alloc_fs_workspace>
      temp *= iroot;
 8016f52:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8016f54:	3101      	adds	r1, #1
 8016f56:	e7b2      	b.n	8016ebe <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8016f58:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8016f5c:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8016f5e:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8016f62:	e7be      	b.n	8016ee2 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016f64:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8016f68:	2a02      	cmp	r2, #2
 8016f6a:	bf0c      	ite	eq
 8016f6c:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8016f70:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8016f72:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8016f76:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8016f7a:	fb0a 2202 	mla	r2, sl, r2, r2
 8016f7e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8016f82:	4591      	cmp	r9, r2
 8016f84:	dbb5      	blt.n	8016ef2 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8016f86:	3301      	adds	r3, #1
 8016f88:	4615      	mov	r5, r2
      changed = TRUE;
 8016f8a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8016f8c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8016f90:	e7ad      	b.n	8016eee <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016f92:	2161      	movs	r1, #97	; 0x61
 8016f94:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8016f98:	e7bb      	b.n	8016f12 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016f9a:	9b01      	ldr	r3, [sp, #4]
 8016f9c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8016fa0:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016fa4:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016fa6:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 8016faa:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016fae:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	469a      	mov	sl, r3
 8016fb4:	4599      	cmp	r9, r3
 8016fb6:	dc02      	bgt.n	8016fbe <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016fb8:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8016fba:	46c6      	mov	lr, r8
 8016fbc:	e7b6      	b.n	8016f2c <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016fbe:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8016fc2:	9f03      	ldr	r7, [sp, #12]
 8016fc4:	4439      	add	r1, r7
 8016fc6:	fb91 f1fb 	sdiv	r1, r1, fp
 8016fca:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016fcc:	4651      	mov	r1, sl
 8016fce:	42a9      	cmp	r1, r5
 8016fd0:	db0d      	blt.n	8016fee <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8016fd2:	3301      	adds	r3, #1
 8016fd4:	44c2      	add	sl, r8
 8016fd6:	e7ed      	b.n	8016fb4 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016fd8:	9f02      	ldr	r7, [sp, #8]
 8016fda:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016fde:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8016fe0:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016fe4:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8016fe6:	45e0      	cmp	r8, ip
 8016fe8:	dcf6      	bgt.n	8016fd8 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016fea:	4471      	add	r1, lr
 8016fec:	e7ef      	b.n	8016fce <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 8016fee:	f04f 0c00 	mov.w	ip, #0
 8016ff2:	e7f8      	b.n	8016fe6 <jinit_1pass_quantizer+0x19a>
}
 8016ff4:	b005      	add	sp, #20
 8016ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ffa:	bf00      	nop
 8016ffc:	08016b2d 	.word	0x08016b2d
 8017000:	08016b21 	.word	0x08016b21
 8017004:	08016b23 	.word	0x08016b23
 8017008:	0803024c 	.word	0x0803024c

0801700c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801700c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8017010:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8017012:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8017016:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8017018:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 801701c:	429c      	cmp	r4, r3
 801701e:	db00      	blt.n	8017022 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8017020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8017022:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8017026:	4677      	mov	r7, lr
 8017028:	3203      	adds	r2, #3
 801702a:	b90f      	cbnz	r7, 8017030 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 801702c:	3401      	adds	r4, #1
 801702e:	e7f5      	b.n	801701c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8017030:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8017034:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8017038:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 801703a:	08a8      	lsrs	r0, r5, #2
 801703c:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8017040:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8017044:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8017048:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 801704a:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 801704e:	3001      	adds	r0, #1
 8017050:	b280      	uxth	r0, r0
 8017052:	b108      	cbz	r0, 8017058 <prescan_quantize+0x4c>
 8017054:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8017058:	3f01      	subs	r7, #1
 801705a:	3203      	adds	r2, #3
 801705c:	e7e5      	b.n	801702a <prescan_quantize+0x1e>

0801705e <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 801705e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017062:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8017066:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 801706a:	2500      	movs	r5, #0
{
 801706c:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801706e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8017072:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8017074:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8017076:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8017078:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 801707a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 801707c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801707e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8017082:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8017084:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8017086:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8017088:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 801708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8017090:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8017092:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8017096:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8017098:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 801709c:	341c      	adds	r4, #28
{
 801709e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 80170a2:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80170a4:	0149      	lsls	r1, r1, #5
 80170a6:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 80170aa:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 80170ac:	eb09 0301 	add.w	r3, r9, r1
 80170b0:	105b      	asrs	r3, r3, #1
 80170b2:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 80170b4:	eb08 0304 	add.w	r3, r8, r4
 80170b8:	105b      	asrs	r3, r3, #1
 80170ba:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 80170bc:	9b01      	ldr	r3, [sp, #4]
 80170be:	42ab      	cmp	r3, r5
 80170c0:	dc43      	bgt.n	801714a <fill_inverse_cmap+0xec>
  ncolors = 0;
 80170c2:	2200      	movs	r2, #0
 80170c4:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 80170c6:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 80170c8:	4613      	mov	r3, r2
 80170ca:	9c01      	ldr	r4, [sp, #4]
 80170cc:	429c      	cmp	r4, r3
 80170ce:	f300 809c 	bgt.w	801720a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80170d2:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 80170d4:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 80170d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80170da:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 80170dc:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80170e0:	d1fb      	bne.n	80170da <fill_inverse_cmap+0x7c>
 80170e2:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 80170e4:	469b      	mov	fp, r3
 80170e6:	9107      	str	r1, [sp, #28]
 80170e8:	4593      	cmp	fp, r2
 80170ea:	f040 8096 	bne.w	801721a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 80170ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 80170f0:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 80170f2:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80170f6:	9b08      	ldr	r3, [sp, #32]
 80170f8:	f023 0103 	bic.w	r1, r3, #3
 80170fc:	9b05      	ldr	r3, [sp, #20]
 80170fe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8017102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017104:	f023 0307 	bic.w	r3, r3, #7
 8017108:	4629      	mov	r1, r5
 801710a:	019b      	lsls	r3, r3, #6
 801710c:	3110      	adds	r1, #16
 801710e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8017112:	f855 4b04 	ldr.w	r4, [r5], #4
 8017116:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017118:	f102 0720 	add.w	r7, r2, #32
 801711c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 801711e:	4626      	mov	r6, r4
 8017120:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8017122:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8017126:	f812 0b01 	ldrb.w	r0, [r2], #1
 801712a:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801712c:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 801712e:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8017132:	d1f8      	bne.n	8017126 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017134:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8017136:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017138:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801713c:	d1ef      	bne.n	801711e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 801713e:	428d      	cmp	r5, r1
 8017140:	d1e7      	bne.n	8017112 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8017142:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8017146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 801714a:	9b00      	ldr	r3, [sp, #0]
 801714c:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8017154:	4591      	cmp	r9, r2
 8017156:	dd2a      	ble.n	80171ae <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8017158:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 801715c:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 801715e:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8017162:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8017168:	459a      	cmp	sl, r3
 801716a:	dd33      	ble.n	80171d4 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 801716c:	eba3 0e0a 	sub.w	lr, r3, sl
 8017170:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8017174:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8017178:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 801717a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 801717e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8017186:	4598      	cmp	r8, r3
 8017188:	dd32      	ble.n	80171f0 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 801718a:	eba3 0708 	sub.w	r7, r3, r8
 801718e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8017190:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8017194:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8017196:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8017198:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 801719c:	aa70      	add	r2, sp, #448	; 0x1c0
 801719e:	429e      	cmp	r6, r3
 80171a0:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 80171a4:	f105 0501 	add.w	r5, r5, #1
 80171a8:	bfa8      	it	ge
 80171aa:	461e      	movge	r6, r3
 80171ac:	e786      	b.n	80170bc <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 80171ae:	4291      	cmp	r1, r2
 80171b0:	da06      	bge.n	80171c0 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 80171b2:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 80171b6:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 80171ba:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 80171be:	e7d0      	b.n	8017162 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 80171c0:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 80171c2:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 80171c6:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 80171c8:	bfac      	ite	ge
 80171ca:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 80171cc:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 80171d0:	4352      	muls	r2, r2
 80171d2:	e7c7      	b.n	8017164 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 80171d4:	4298      	cmp	r0, r3
 80171d6:	da08      	bge.n	80171ea <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 80171d8:	eba3 0e00 	sub.w	lr, r3, r0
 80171dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 80171e0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 80171e4:	eba3 030a 	sub.w	r3, r3, sl
 80171e8:	e7c7      	b.n	801717a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 80171ea:	459b      	cmp	fp, r3
 80171ec:	dbfa      	blt.n	80171e4 <fill_inverse_cmap+0x186>
 80171ee:	e7c3      	b.n	8017178 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 80171f0:	429c      	cmp	r4, r3
 80171f2:	da06      	bge.n	8017202 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 80171f4:	1b1f      	subs	r7, r3, r4
 80171f6:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 80171f8:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 80171fc:	eba3 0308 	sub.w	r3, r3, r8
 8017200:	e7c9      	b.n	8017196 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8017202:	9f03      	ldr	r7, [sp, #12]
 8017204:	429f      	cmp	r7, r3
 8017206:	dbf9      	blt.n	80171fc <fill_inverse_cmap+0x19e>
 8017208:	e7c4      	b.n	8017194 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 801720a:	f851 4b04 	ldr.w	r4, [r1], #4
 801720e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8017210:	bfa4      	itt	ge
 8017212:	5483      	strbge	r3, [r0, r2]
 8017214:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8017216:	3301      	adds	r3, #1
 8017218:	e757      	b.n	80170ca <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 801721a:	9b07      	ldr	r3, [sp, #28]
 801721c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017220:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8017222:	9b00      	ldr	r3, [sp, #0]
 8017224:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8017228:	680b      	ldr	r3, [r1, #0]
 801722a:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 801722c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 801722e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8017230:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017234:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017236:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017238:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 801723c:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017240:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017244:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8017246:	4364      	muls	r4, r4
 8017248:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 801724c:	3004      	adds	r0, #4
 801724e:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8017250:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8017254:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8017256:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8017258:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 801725a:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 801725c:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 801725e:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8017260:	9106      	str	r1, [sp, #24]
 8017262:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8017264:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8017268:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 801726c:	930e      	str	r3, [sp, #56]	; 0x38
 801726e:	9b06      	ldr	r3, [sp, #24]
 8017270:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8017272:	a810      	add	r0, sp, #64	; 0x40
 8017274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017278:	9003      	str	r0, [sp, #12]
 801727a:	930d      	str	r3, [sp, #52]	; 0x34
 801727c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 801727e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017280:	eb03 0c01 	add.w	ip, r3, r1
 8017284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017286:	440b      	add	r3, r1
 8017288:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 801728a:	9b03      	ldr	r3, [sp, #12]
 801728c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 801728e:	9b02      	ldr	r3, [sp, #8]
 8017290:	9301      	str	r3, [sp, #4]
 8017292:	e01c      	b.n	80172ce <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8017294:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8017298:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 801729c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801729e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 80172a0:	bfc8      	it	gt
 80172a2:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 80172a4:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 80172a6:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 80172aa:	bfc8      	it	gt
 80172ac:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 80172b0:	42af      	cmp	r7, r5
 80172b2:	d1ef      	bne.n	8017294 <fill_inverse_cmap+0x236>
	  cptr++;
 80172b4:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 80172b6:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 80172ba:	3304      	adds	r3, #4
 80172bc:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 80172be:	9b01      	ldr	r3, [sp, #4]
 80172c0:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 80172c2:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 80172c6:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 80172c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172ca:	4298      	cmp	r0, r3
 80172cc:	d006      	beq.n	80172dc <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 80172ce:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 80172d2:	9d06      	ldr	r5, [sp, #24]
 80172d4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80172d8:	9c01      	ldr	r4, [sp, #4]
 80172da:	e7db      	b.n	8017294 <fill_inverse_cmap+0x236>
	  cptr++;
 80172dc:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80172de:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 80172e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 80172e2:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80172e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 80172e8:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 80172ea:	9b02      	ldr	r3, [sp, #8]
 80172ec:	4403      	add	r3, r0
 80172ee:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80172f0:	d1c4      	bne.n	801727c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 80172f2:	f10b 0b01 	add.w	fp, fp, #1
 80172f6:	e6f7      	b.n	80170e8 <fill_inverse_cmap+0x8a>

080172f8 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 80172f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80172fe:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8017302:	b085      	sub	sp, #20
 8017304:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8017306:	699b      	ldr	r3, [r3, #24]
{
 8017308:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 801730a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 801730c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 801730e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8017310:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8017312:	4555      	cmp	r5, sl
 8017314:	db02      	blt.n	801731c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8017316:	b005      	add	sp, #20
 8017318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 801731c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8017320:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8017324:	9b01      	ldr	r3, [sp, #4]
 8017326:	3403      	adds	r4, #3
 8017328:	eb06 0b03 	add.w	fp, r6, r3
 801732c:	455e      	cmp	r6, fp
 801732e:	d101      	bne.n	8017334 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8017330:	3501      	adds	r5, #1
 8017332:	e7ee      	b.n	8017312 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8017334:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8017338:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 801733c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8017340:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8017342:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8017346:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 801734a:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801734e:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8017350:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8017354:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8017358:	f1bc 0f00 	cmp.w	ip, #0
 801735c:	d106      	bne.n	801736c <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 801735e:	4672      	mov	r2, lr
 8017360:	9303      	str	r3, [sp, #12]
 8017362:	9002      	str	r0, [sp, #8]
 8017364:	f7ff fe7b 	bl	801705e <fill_inverse_cmap>
 8017368:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 801736c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017370:	3403      	adds	r4, #3
 8017372:	3b01      	subs	r3, #1
 8017374:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8017378:	e7d8      	b.n	801732c <pass2_no_dither+0x34>

0801737a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801737a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801737e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8017382:	b09f      	sub	sp, #124	; 0x7c
 8017384:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8017386:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801738a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801738c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801738e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8017390:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8017394:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8017396:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801739a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801739c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80173a0:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 80173a8:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 80173aa:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 80173ac:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 80173ae:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80173b0:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80173b2:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80173b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173b8:	3b03      	subs	r3, #3
 80173ba:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80173bc:	2306      	movs	r3, #6
 80173be:	fb02 3303 	mla	r3, r2, r3, r3
 80173c2:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 80173c4:	2300      	movs	r3, #0
 80173c6:	9304      	str	r3, [sp, #16]
 80173c8:	9b04      	ldr	r3, [sp, #16]
 80173ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80173cc:	4293      	cmp	r3, r2
 80173ce:	db02      	blt.n	80173d6 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 80173d0:	b01f      	add	sp, #124	; 0x7c
 80173d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 80173d6:	9a04      	ldr	r2, [sp, #16]
 80173d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80173da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173de:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 80173e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80173e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173e6:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80173e8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80173ec:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 80173ee:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d036      	beq.n	8017464 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80173f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173f8:	9a01      	ldr	r2, [sp, #4]
 80173fa:	441a      	add	r2, r3
      outptr += width-1;
 80173fc:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80173fe:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8017400:	3b01      	subs	r3, #1
 8017402:	9a03      	ldr	r2, [sp, #12]
 8017404:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017406:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8017408:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801740a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801740c:	4413      	add	r3, r2
      dir3 = -3;
 801740e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017412:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8017414:	2300      	movs	r3, #0
      dir3 = -3;
 8017416:	9208      	str	r2, [sp, #32]
      dir = -1;
 8017418:	f04f 32ff 	mov.w	r2, #4294967295
 801741c:	920f      	str	r2, [sp, #60]	; 0x3c
 801741e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8017422:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017424:	9b08      	ldr	r3, [sp, #32]
 8017426:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8017428:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801742a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 801742c:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 801742e:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017430:	1cab      	adds	r3, r5, #2
 8017432:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017434:	1d2b      	adds	r3, r5, #4
 8017436:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 8017438:	9b05      	ldr	r3, [sp, #20]
 801743a:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 801743c:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 801743e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8017442:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8017446:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017448:	b98f      	cbnz	r7, 801746e <pass2_fs_dither+0xf4>
 801744a:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 801744c:	9a02      	ldr	r2, [sp, #8]
 801744e:	435d      	muls	r5, r3
 8017450:	9906      	ldr	r1, [sp, #24]
 8017452:	9b02      	ldr	r3, [sp, #8]
 8017454:	5351      	strh	r1, [r2, r5]
 8017456:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8017458:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 801745a:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 801745c:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 801745e:	9b04      	ldr	r3, [sp, #16]
 8017460:	3301      	adds	r3, #1
 8017462:	e7b0      	b.n	80173c6 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8017464:	2301      	movs	r3, #1
      dir3 = 3;
 8017466:	2203      	movs	r2, #3
      dir = 1;
 8017468:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 801746a:	9208      	str	r2, [sp, #32]
 801746c:	e7d7      	b.n	801741e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801746e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8017472:	1977      	adds	r7, r6, r5
 8017474:	4463      	add	r3, ip
 8017476:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8017478:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801747a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801747e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017480:	5ef3      	ldrsh	r3, [r6, r3]
 8017482:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017486:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017488:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801748a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801748c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801748e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017492:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8017494:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8017498:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801749c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801749e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 80174a2:	9f01      	ldr	r7, [sp, #4]
 80174a4:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 80174a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80174aa:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80174ac:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80174ae:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 80174b0:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 80174b4:	9901      	ldr	r1, [sp, #4]
 80174b6:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80174b8:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 80174bc:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 80174c0:	9a01      	ldr	r2, [sp, #4]
 80174c2:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80174c4:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 80174c8:	ea4f 02aa 	mov.w	r2, sl, asr #2
 80174cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80174d2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80174d6:	461f      	mov	r7, r3
 80174d8:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 80174dc:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80174e0:	f1bc 0f00 	cmp.w	ip, #0
 80174e4:	d105      	bne.n	80174f2 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 80174e6:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 80174ea:	f7ff fdb8 	bl	801705e <fill_inverse_cmap>
 80174ee:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 80174f2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 80174f6:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 80174f8:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80174fa:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80174fc:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 80174fe:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8017500:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017502:	5cd2      	ldrb	r2, [r2, r3]
 8017504:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8017508:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801750a:	5cd2      	ldrb	r2, [r2, r3]
 801750c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017510:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017512:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017514:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017516:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 801751a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801751e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8017520:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017524:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8017526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8017528:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 801752c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 801752e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8017532:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8017534:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017538:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 801753a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801753e:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8017540:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017542:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8017544:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8017548:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 801754a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 801754e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8017550:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8017554:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017556:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8017558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 801755a:	4437      	add	r7, r6
      outptr += dir;
 801755c:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 801755e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8017560:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017564:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8017566:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017568:	443e      	add	r6, r7
 801756a:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 801756c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801756e:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8017570:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8017574:	9609      	str	r6, [sp, #36]	; 0x24
 8017576:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017578:	e765      	b.n	8017446 <pass2_fs_dither+0xcc>

0801757a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 801757a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801757c:	6843      	ldr	r3, [r0, #4]
 801757e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8017582:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017584:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801758c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8017590:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8017594:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8017598:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 801759a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 801759c:	425c      	negs	r4, r3
 801759e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80175a2:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 80175a4:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80175a8:	2b10      	cmp	r3, #16
 80175aa:	d1f7      	bne.n	801759c <init_error_limit+0x22>
 80175ac:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 80175b0:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 80175b4:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 80175b8:	425d      	negs	r5, r3
 80175ba:	f844 3f04 	str.w	r3, [r4, #4]!
 80175be:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 80175c2:	f002 0501 	and.w	r5, r2, #1
 80175c6:	3a01      	subs	r2, #1
 80175c8:	442b      	add	r3, r5
 80175ca:	f112 0f32 	cmn.w	r2, #50	; 0x32
 80175ce:	d1f3      	bne.n	80175b8 <init_error_limit+0x3e>
 80175d0:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 80175d4:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 80175d8:	425c      	negs	r4, r3
 80175da:	f841 3f04 	str.w	r3, [r1, #4]!
 80175de:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80175e2:	4282      	cmp	r2, r0
 80175e4:	d1f9      	bne.n	80175da <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80175e6:	bd38      	pop	{r3, r4, r5, pc}

080175e8 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80175e8:	4770      	bx	lr

080175ea <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80175ea:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80175ee:	2201      	movs	r2, #1
 80175f0:	61da      	str	r2, [r3, #28]
}
 80175f2:	4770      	bx	lr

080175f4 <start_pass_2_quant>:
{
 80175f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80175f6:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80175fa:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 80175fc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8017600:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8017602:	2b00      	cmp	r3, #0
 8017604:	d050      	beq.n	80176a8 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8017606:	2302      	movs	r3, #2
 8017608:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 801760c:	b189      	cbz	r1, 8017632 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801760e:	4b28      	ldr	r3, [pc, #160]	; (80176b0 <start_pass_2_quant+0xbc>)
 8017610:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8017612:	4b28      	ldr	r3, [pc, #160]	; (80176b4 <start_pass_2_quant+0xc0>)
 8017614:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8017616:	1f34      	subs	r4, r6, #4
 8017618:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 801761a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801761e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017622:	2100      	movs	r1, #0
 8017624:	f013 fa82 	bl	802ab2c <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017628:	42a6      	cmp	r6, r4
 801762a:	d1f6      	bne.n	801761a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 801762c:	2300      	movs	r3, #0
 801762e:	61eb      	str	r3, [r5, #28]
}
 8017630:	e02f      	b.n	8017692 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8017632:	4b21      	ldr	r3, [pc, #132]	; (80176b8 <start_pass_2_quant+0xc4>)
 8017634:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8017636:	4b21      	ldr	r3, [pc, #132]	; (80176bc <start_pass_2_quant+0xc8>)
 8017638:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 801763a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 801763e:	2b00      	cmp	r3, #0
 8017640:	dc29      	bgt.n	8017696 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8017642:	223a      	movs	r2, #58	; 0x3a
 8017644:	6823      	ldr	r3, [r4, #0]
 8017646:	615a      	str	r2, [r3, #20]
 8017648:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801764a:	619a      	str	r2, [r3, #24]
 801764c:	4620      	mov	r0, r4
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8017652:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8017656:	2b02      	cmp	r3, #2
 8017658:	d118      	bne.n	801768c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801765a:	2306      	movs	r3, #6
 801765c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801765e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8017660:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8017662:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8017664:	b93b      	cbnz	r3, 8017676 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017666:	6863      	ldr	r3, [r4, #4]
 8017668:	2101      	movs	r1, #1
 801766a:	4620      	mov	r0, r4
 801766c:	9201      	str	r2, [sp, #4]
 801766e:	685b      	ldr	r3, [r3, #4]
 8017670:	4798      	blx	r3
 8017672:	9a01      	ldr	r2, [sp, #4]
 8017674:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8017676:	2100      	movs	r1, #0
 8017678:	6a28      	ldr	r0, [r5, #32]
 801767a:	f013 fa57 	bl	802ab2c <memset>
      if (cquantize->error_limiter == NULL)
 801767e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017680:	b913      	cbnz	r3, 8017688 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8017682:	4620      	mov	r0, r4
 8017684:	f7ff ff79 	bl	801757a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8017688:	2300      	movs	r3, #0
 801768a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801768c:	69eb      	ldr	r3, [r5, #28]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1c1      	bne.n	8017616 <start_pass_2_quant+0x22>
}
 8017692:	b002      	add	sp, #8
 8017694:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8017696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801769a:	ddda      	ble.n	8017652 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801769c:	223b      	movs	r2, #59	; 0x3b
 801769e:	6823      	ldr	r3, [r4, #0]
 80176a0:	615a      	str	r2, [r3, #20]
 80176a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80176a6:	e7d0      	b.n	801764a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 80176a8:	2900      	cmp	r1, #0
 80176aa:	d1b0      	bne.n	801760e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 80176ac:	4b04      	ldr	r3, [pc, #16]	; (80176c0 <start_pass_2_quant+0xcc>)
 80176ae:	e7c1      	b.n	8017634 <start_pass_2_quant+0x40>
 80176b0:	0801700d 	.word	0x0801700d
 80176b4:	08017903 	.word	0x08017903
 80176b8:	0801737b 	.word	0x0801737b
 80176bc:	080175e9 	.word	0x080175e9
 80176c0:	080172f9 	.word	0x080172f9

080176c4 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80176c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80176c8:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 80176cc:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80176ce:	b085      	sub	sp, #20
  if (c0max > c0min)
 80176d0:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 80176d2:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80176d4:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80176d6:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80176da:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 80176de:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80176e2:	db24      	blt.n	801772e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 80176e4:	4584      	cmp	ip, r0
 80176e6:	4662      	mov	r2, ip
 80176e8:	db5d      	blt.n	80177a6 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 80176ea:	42a5      	cmp	r5, r4
 80176ec:	f280 80eb 	bge.w	80178c6 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 80176f0:	0196      	lsls	r6, r2, #6
 80176f2:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 80176f6:	46ac      	mov	ip, r5
 80176f8:	9602      	str	r6, [sp, #8]
 80176fa:	fb07 f602 	mul.w	r6, r7, r2
 80176fe:	9603      	str	r6, [sp, #12]
 8017700:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017702:	469e      	mov	lr, r3
 8017704:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8017708:	9e03      	ldr	r6, [sp, #12]
 801770a:	44b1      	add	r9, r6
 801770c:	e083      	b.n	8017816 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801770e:	9a01      	ldr	r2, [sp, #4]
 8017710:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8017714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017718:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801771a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801771c:	454c      	cmp	r4, r9
 801771e:	da08      	bge.n	8017732 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8017720:	f108 0801 	add.w	r8, r8, #1
 8017724:	4540      	cmp	r0, r8
 8017726:	daf2      	bge.n	801770e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8017728:	3301      	adds	r3, #1
 801772a:	459b      	cmp	fp, r3
 801772c:	db0f      	blt.n	801774e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801772e:	46e0      	mov	r8, ip
 8017730:	e7f8      	b.n	8017724 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8017732:	f832 ab02 	ldrh.w	sl, [r2], #2
 8017736:	f1ba 0f00 	cmp.w	sl, #0
 801773a:	d005      	beq.n	8017748 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801773c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801773e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8017740:	ddd0      	ble.n	80176e4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017742:	465f      	mov	r7, fp
 8017744:	46e0      	mov	r8, ip
 8017746:	e00f      	b.n	8017768 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8017748:	f109 0901 	add.w	r9, r9, #1
 801774c:	e7e6      	b.n	801771c <update_box.isra.0+0x58>
 have_c0min:
 801774e:	463b      	mov	r3, r7
 8017750:	e7f7      	b.n	8017742 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8017752:	9a01      	ldr	r2, [sp, #4]
 8017754:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8017758:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801775c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801775e:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8017760:	454c      	cmp	r4, r9
 8017762:	da07      	bge.n	8017774 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8017764:	f108 0801 	add.w	r8, r8, #1
 8017768:	4540      	cmp	r0, r8
 801776a:	daf2      	bge.n	8017752 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801776c:	3f01      	subs	r7, #1
 801776e:	429f      	cmp	r7, r3
 8017770:	dbb8      	blt.n	80176e4 <update_box.isra.0+0x20>
 8017772:	e7e7      	b.n	8017744 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8017774:	f832 ab02 	ldrh.w	sl, [r2], #2
 8017778:	f1ba 0f00 	cmp.w	sl, #0
 801777c:	d002      	beq.n	8017784 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801777e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8017780:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8017782:	e7af      	b.n	80176e4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8017784:	f109 0901 	add.w	r9, r9, #1
 8017788:	e7ea      	b.n	8017760 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801778a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801778c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801778e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8017792:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8017794:	454c      	cmp	r4, r9
 8017796:	da0a      	bge.n	80177ae <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017798:	f108 0801 	add.w	r8, r8, #1
 801779c:	45d8      	cmp	r8, fp
 801779e:	ddf4      	ble.n	801778a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 80177a0:	3201      	adds	r2, #1
 80177a2:	4290      	cmp	r0, r2
 80177a4:	db11      	blt.n	80177ca <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80177a6:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80177a8:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 80177ac:	e7f6      	b.n	801779c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 80177ae:	f837 6b02 	ldrh.w	r6, [r7], #2
 80177b2:	b13e      	cbz	r6, 80177c4 <update_box.isra.0+0x100>
  if (c1max > c1min)
 80177b4:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 80177b6:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80177b8:	dd97      	ble.n	80176ea <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80177ba:	4684      	mov	ip, r0
 80177bc:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80177be:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 80177c2:	e00d      	b.n	80177e0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 80177c4:	f109 0901 	add.w	r9, r9, #1
 80177c8:	e7e4      	b.n	8017794 <update_box.isra.0+0xd0>
 have_c1min:
 80177ca:	4662      	mov	r2, ip
 80177cc:	e7f5      	b.n	80177ba <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 80177ce:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80177d0:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 80177d2:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 80177d6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80177d8:	454c      	cmp	r4, r9
 80177da:	da09      	bge.n	80177f0 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80177dc:	f108 0801 	add.w	r8, r8, #1
 80177e0:	45c3      	cmp	fp, r8
 80177e2:	daf4      	bge.n	80177ce <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80177e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177e8:	4594      	cmp	ip, r2
 80177ea:	f6ff af7e 	blt.w	80176ea <update_box.isra.0+0x26>
 80177ee:	e7e5      	b.n	80177bc <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 80177f0:	f837 6b02 	ldrh.w	r6, [r7], #2
 80177f4:	b11e      	cbz	r6, 80177fe <update_box.isra.0+0x13a>
	    goto have_c1max;
 80177f6:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 80177f8:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 80177fc:	e775      	b.n	80176ea <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 80177fe:	f109 0901 	add.w	r9, r9, #1
 8017802:	e7e9      	b.n	80177d8 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017804:	9e01      	ldr	r6, [sp, #4]
 8017806:	4690      	mov	r8, r2
 8017808:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801780c:	444f      	add	r7, r9
 801780e:	4580      	cmp	r8, r0
 8017810:	dd11      	ble.n	8017836 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8017812:	f10e 0e01 	add.w	lr, lr, #1
 8017816:	45f3      	cmp	fp, lr
 8017818:	daf4      	bge.n	8017804 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801781a:	f10c 0c01 	add.w	ip, ip, #1
 801781e:	4564      	cmp	r4, ip
 8017820:	f6bf af6e 	bge.w	8017700 <update_box.isra.0+0x3c>
 have_c2min:
 8017824:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017826:	4627      	mov	r7, r4
 8017828:	9d02      	ldr	r5, [sp, #8]
 801782a:	469e      	mov	lr, r3
 801782c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8017830:	9d03      	ldr	r5, [sp, #12]
 8017832:	44a9      	add	r9, r5
 8017834:	e034      	b.n	80178a0 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 8017836:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801783a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801783e:	f1ba 0f00 	cmp.w	sl, #0
 8017842:	d021      	beq.n	8017888 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8017844:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8017846:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801784a:	dcec      	bgt.n	8017826 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801784c:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801784e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8017852:	eba4 070c 	sub.w	r7, r4, ip
 8017856:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801785a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801785e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8017862:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8017866:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8017868:	fb08 f808 	mul.w	r8, r8, r8
 801786c:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8017870:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8017874:	fb05 8505 	mla	r5, r5, r5, r8
 8017878:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801787a:	459b      	cmp	fp, r3
 801787c:	da3f      	bge.n	80178fe <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 801787e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8017882:	b005      	add	sp, #20
 8017884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8017888:	f108 0801 	add.w	r8, r8, #1
 801788c:	e7bf      	b.n	801780e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801788e:	9d01      	ldr	r5, [sp, #4]
 8017890:	4690      	mov	r8, r2
 8017892:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8017896:	444d      	add	r5, r9
 8017898:	4540      	cmp	r0, r8
 801789a:	da07      	bge.n	80178ac <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801789c:	f10e 0e01 	add.w	lr, lr, #1
 80178a0:	45f3      	cmp	fp, lr
 80178a2:	daf4      	bge.n	801788e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 80178a4:	3f01      	subs	r7, #1
 80178a6:	4567      	cmp	r7, ip
 80178a8:	dbd0      	blt.n	801784c <update_box.isra.0+0x188>
 80178aa:	e7bd      	b.n	8017828 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 80178ac:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80178b0:	f835 a00a 	ldrh.w	sl, [r5, sl]
 80178b4:	f1ba 0f00 	cmp.w	sl, #0
 80178b8:	d002      	beq.n	80178c0 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 80178ba:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 80178bc:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80178be:	e7c5      	b.n	801784c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80178c0:	f108 0801 	add.w	r8, r8, #1
 80178c4:	e7e8      	b.n	8017898 <update_box.isra.0+0x1d4>
 have_c2min:
 80178c6:	46ac      	mov	ip, r5
 80178c8:	e7c0      	b.n	801784c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80178ca:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 80178ce:	f1a5 0802 	sub.w	r8, r5, #2
 80178d2:	9d01      	ldr	r5, [sp, #4]
 80178d4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80178d8:	4445      	add	r5, r8
 80178da:	46e0      	mov	r8, ip
 80178dc:	4544      	cmp	r4, r8
 80178de:	da04      	bge.n	80178ea <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80178e0:	3701      	adds	r7, #1
 80178e2:	42b8      	cmp	r0, r7
 80178e4:	daf1      	bge.n	80178ca <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 80178e6:	3301      	adds	r3, #1
 80178e8:	e7c7      	b.n	801787a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 80178ea:	f835 af02 	ldrh.w	sl, [r5, #2]!
 80178ee:	f1ba 0f00 	cmp.w	sl, #0
 80178f2:	d001      	beq.n	80178f8 <update_box.isra.0+0x234>
	  ccount++;
 80178f4:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80178f8:	f108 0801 	add.w	r8, r8, #1
 80178fc:	e7ee      	b.n	80178dc <update_box.isra.0+0x218>
 80178fe:	4617      	mov	r7, r2
 8017900:	e7ef      	b.n	80178e2 <update_box.isra.0+0x21e>

08017902 <finish_pass1>:
{
 8017902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017906:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801790a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801790c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801790e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017912:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8017914:	691b      	ldr	r3, [r3, #16]
{
 8017916:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8017918:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801791c:	9b02      	ldr	r3, [sp, #8]
 801791e:	695b      	ldr	r3, [r3, #20]
 8017920:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017922:	9a01      	ldr	r2, [sp, #4]
 8017924:	6843      	ldr	r3, [r0, #4]
 8017926:	0152      	lsls	r2, r2, #5
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801792c:	2300      	movs	r3, #0
 801792e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8017930:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8017932:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8017934:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8017936:	6142      	str	r2, [r0, #20]
 8017938:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 801793a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801793e:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8017942:	9b00      	ldr	r3, [sp, #0]
 8017944:	4601      	mov	r1, r0
 8017946:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801794a:	f7ff febb 	bl	80176c4 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801794e:	9b01      	ldr	r3, [sp, #4]
 8017950:	455b      	cmp	r3, fp
 8017952:	dc24      	bgt.n	801799e <finish_pass1+0x9c>
 8017954:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 8017956:	9a00      	ldr	r2, [sp, #0]
 8017958:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 801795c:	6992      	ldr	r2, [r2, #24]
 801795e:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8017960:	e9d8 7200 	ldrd	r7, r2, [r8]
 8017964:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8017966:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801796a:	9205      	str	r2, [sp, #20]
 801796c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8017970:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8017972:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017976:	9201      	str	r2, [sp, #4]
 8017978:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801797c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801797e:	9a01      	ldr	r2, [sp, #4]
 8017980:	0052      	lsls	r2, r2, #1
 8017982:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8017984:	2200      	movs	r2, #0
  long c1total = 0;
 8017986:	4692      	mov	sl, r2
  long c0total = 0;
 8017988:	4691      	mov	r9, r2
  long total = 0;
 801798a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 801798c:	9804      	ldr	r0, [sp, #16]
 801798e:	42b8      	cmp	r0, r7
 8017990:	f2c0 8098 	blt.w	8017ac4 <finish_pass1+0x1c2>
 8017994:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017996:	9e05      	ldr	r6, [sp, #20]
 8017998:	3004      	adds	r0, #4
 801799a:	9008      	str	r0, [sp, #32]
 801799c:	e07c      	b.n	8017a98 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 801799e:	9b01      	ldr	r3, [sp, #4]
 80179a0:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80179a4:	db4f      	blt.n	8017a46 <finish_pass1+0x144>
  boxptr which = NULL;
 80179a6:	2300      	movs	r3, #0
 80179a8:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80179aa:	461e      	mov	r6, r3
  register long maxc = 0;
 80179ac:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80179ae:	69c2      	ldr	r2, [r0, #28]
 80179b0:	42ba      	cmp	r2, r7
 80179b2:	dd04      	ble.n	80179be <finish_pass1+0xbc>
 80179b4:	6984      	ldr	r4, [r0, #24]
 80179b6:	2c00      	cmp	r4, #0
 80179b8:	bfc4      	itt	gt
 80179ba:	4603      	movgt	r3, r0
 80179bc:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80179be:	3601      	adds	r6, #1
 80179c0:	3020      	adds	r0, #32
 80179c2:	45b3      	cmp	fp, r6
 80179c4:	d1f3      	bne.n	80179ae <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d0c5      	beq.n	8017956 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80179ca:	685a      	ldr	r2, [r3, #4]
 80179cc:	f101 0920 	add.w	r9, r1, #32
 80179d0:	624a      	str	r2, [r1, #36]	; 0x24
 80179d2:	68d8      	ldr	r0, [r3, #12]
 80179d4:	62c8      	str	r0, [r1, #44]	; 0x2c
 80179d6:	6958      	ldr	r0, [r3, #20]
 80179d8:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 80179da:	6818      	ldr	r0, [r3, #0]
 80179dc:	6208      	str	r0, [r1, #32]
 80179de:	6898      	ldr	r0, [r3, #8]
 80179e0:	6288      	str	r0, [r1, #40]	; 0x28
 80179e2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80179e6:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80179ea:	6818      	ldr	r0, [r3, #0]
 80179ec:	9003      	str	r0, [sp, #12]
 80179ee:	1a10      	subs	r0, r2, r0
 80179f0:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 80179f4:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 80179f8:	9004      	str	r0, [sp, #16]
 80179fa:	1a30      	subs	r0, r6, r0
 80179fc:	00c7      	lsls	r7, r0, #3
 80179fe:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017a02:	6958      	ldr	r0, [r3, #20]
 8017a04:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8017a08:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8017a0c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8017a10:	f2c0 808c 	blt.w	8017b2c <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8017a14:	45be      	cmp	lr, r7
 8017a16:	dd25      	ble.n	8017a64 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8017a18:	9803      	ldr	r0, [sp, #12]
 8017a1a:	4402      	add	r2, r0
 8017a1c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017a20:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8017a22:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8017a24:	3201      	adds	r2, #1
 8017a26:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8017a28:	4619      	mov	r1, r3
 8017a2a:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 8017a2c:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8017a30:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8017a34:	f7ff fe46 	bl	80176c4 <update_box.isra.0>
    update_box(cinfo, b2);
 8017a38:	9b00      	ldr	r3, [sp, #0]
 8017a3a:	4649      	mov	r1, r9
 8017a3c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8017a40:	f7ff fe40 	bl	80176c4 <update_box.isra.0>
    numboxes++;
 8017a44:	e783      	b.n	801794e <finish_pass1+0x4c>
  boxptr which = NULL;
 8017a46:	2300      	movs	r3, #0
 8017a48:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017a4a:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 8017a4c:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 8017a4e:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017a50:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8017a52:	42b7      	cmp	r7, r6
 8017a54:	bfc4      	itt	gt
 8017a56:	4613      	movgt	r3, r2
 8017a58:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8017a5a:	4583      	cmp	fp, r0
 8017a5c:	f102 0220 	add.w	r2, r2, #32
 8017a60:	d1f5      	bne.n	8017a4e <finish_pass1+0x14c>
 8017a62:	e7b0      	b.n	80179c6 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8017a64:	9a04      	ldr	r2, [sp, #16]
 8017a66:	4416      	add	r6, r2
 8017a68:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8017a6c:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 8017a6e:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8017a70:	3601      	adds	r6, #1
 8017a72:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8017a74:	e7d8      	b.n	8017a28 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8017a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a78:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8017a7c:	9c03      	ldr	r4, [sp, #12]
 8017a7e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8017a82:	f10e 0e02 	add.w	lr, lr, #2
 8017a86:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017a8a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8017a8e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017a90:	9c07      	ldr	r4, [sp, #28]
 8017a92:	4564      	cmp	r4, ip
 8017a94:	da05      	bge.n	8017aa2 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017a96:	3601      	adds	r6, #1
 8017a98:	9806      	ldr	r0, [sp, #24]
 8017a9a:	42b0      	cmp	r0, r6
 8017a9c:	daeb      	bge.n	8017a76 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 8017a9e:	3701      	adds	r7, #1
 8017aa0:	e774      	b.n	801798c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8017aa2:	f830 5b02 	ldrh.w	r5, [r0], #2
 8017aa6:	b155      	cbz	r5, 8017abe <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017aa8:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 8017aaa:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8017aac:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017ab0:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8017ab4:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8017ab8:	3404      	adds	r4, #4
 8017aba:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017abe:	f10c 0c01 	add.w	ip, ip, #1
 8017ac2:	e7e5      	b.n	8017a90 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017ac4:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8017ac8:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017aca:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 8017ace:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017ad2:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017ad6:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017ada:	fb99 f9f1 	sdiv	r9, r9, r1
 8017ade:	6800      	ldr	r0, [r0, #0]
 8017ae0:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017ae4:	9800      	ldr	r0, [sp, #0]
 8017ae6:	fb9a faf1 	sdiv	sl, sl, r1
 8017aea:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8017aee:	6840      	ldr	r0, [r0, #4]
 8017af0:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017af4:	9800      	ldr	r0, [sp, #0]
 8017af6:	fb92 f1f1 	sdiv	r1, r2, r1
 8017afa:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8017afe:	6880      	ldr	r0, [r0, #8]
 8017b00:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8017b02:	3301      	adds	r3, #1
 8017b04:	455b      	cmp	r3, fp
 8017b06:	f47f af26 	bne.w	8017956 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 8017b0a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8017b0c:	2162      	movs	r1, #98	; 0x62
 8017b0e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8017b10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8017b14:	6812      	ldr	r2, [r2, #0]
 8017b16:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8017b1a:	6853      	ldr	r3, [r2, #4]
 8017b1c:	2101      	movs	r1, #1
 8017b1e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8017b20:	2301      	movs	r3, #1
 8017b22:	9a02      	ldr	r2, [sp, #8]
 8017b24:	61d3      	str	r3, [r2, #28]
}
 8017b26:	b00b      	add	sp, #44	; 0x2c
 8017b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8017b2c:	45a6      	cmp	lr, r4
 8017b2e:	f73f af73 	bgt.w	8017a18 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 8017b32:	4460      	add	r0, ip
 8017b34:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8017b38:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 8017b3a:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8017b40:	e772      	b.n	8017a28 <finish_pass1+0x126>
	...

08017b44 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8017b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017b46:	6843      	ldr	r3, [r0, #4]
 8017b48:	222c      	movs	r2, #44	; 0x2c
 8017b4a:	2101      	movs	r1, #1
{
 8017b4c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8017b52:	4b30      	ldr	r3, [pc, #192]	; (8017c14 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8017b54:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8017b58:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8017b5a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8017b5c:	4b2e      	ldr	r3, [pc, #184]	; (8017c18 <jinit_2pass_quantizer+0xd4>)
 8017b5e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8017b60:	2300      	movs	r3, #0
 8017b62:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8017b64:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8017b66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017b68:	2b03      	cmp	r3, #3
 8017b6a:	d005      	beq.n	8017b78 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8017b6c:	6823      	ldr	r3, [r4, #0]
 8017b6e:	2230      	movs	r2, #48	; 0x30
 8017b70:	4620      	mov	r0, r4
 8017b72:	615a      	str	r2, [r3, #20]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8017b78:	6863      	ldr	r3, [r4, #4]
 8017b7a:	2600      	movs	r6, #0
 8017b7c:	2280      	movs	r2, #128	; 0x80
 8017b7e:	2101      	movs	r1, #1
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4620      	mov	r0, r4
 8017b84:	4798      	blx	r3
 8017b86:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8017b88:	6863      	ldr	r3, [r4, #4]
 8017b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017b8e:	69af      	ldr	r7, [r5, #24]
 8017b90:	2101      	movs	r1, #1
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	4620      	mov	r0, r4
 8017b96:	4798      	blx	r3
 8017b98:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017b9a:	3604      	adds	r6, #4
 8017b9c:	2e80      	cmp	r6, #128	; 0x80
 8017b9e:	d1f3      	bne.n	8017b88 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8017ba4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d031      	beq.n	8017c0e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8017baa:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8017bac:	2e07      	cmp	r6, #7
 8017bae:	dc25      	bgt.n	8017bfc <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8017bb0:	223a      	movs	r2, #58	; 0x3a
 8017bb2:	6823      	ldr	r3, [r4, #0]
 8017bb4:	615a      	str	r2, [r3, #20]
 8017bb6:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017bb8:	619a      	str	r2, [r3, #24]
 8017bba:	4620      	mov	r0, r4
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8017bc0:	6863      	ldr	r3, [r4, #4]
 8017bc2:	4632      	mov	r2, r6
 8017bc4:	2101      	movs	r1, #1
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	689f      	ldr	r7, [r3, #8]
 8017bca:	2303      	movs	r3, #3
 8017bcc:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8017bce:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8017bd2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8017bd6:	b1e3      	cbz	r3, 8017c12 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8017bd8:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017bda:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017bdc:	4620      	mov	r0, r4
 8017bde:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8017be0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017be4:	2306      	movs	r3, #6
 8017be6:	435a      	muls	r2, r3
 8017be8:	6863      	ldr	r3, [r4, #4]
 8017bea:	320c      	adds	r2, #12
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4798      	blx	r3
 8017bf0:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8017bf2:	4620      	mov	r0, r4
  }
}
 8017bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8017bf8:	f7ff bcbf 	b.w	801757a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8017bfc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8017c00:	ddde      	ble.n	8017bc0 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017c02:	223b      	movs	r2, #59	; 0x3b
 8017c04:	6823      	ldr	r3, [r4, #0]
 8017c06:	615a      	str	r2, [r3, #20]
 8017c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c0c:	e7d4      	b.n	8017bb8 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8017c0e:	612b      	str	r3, [r5, #16]
 8017c10:	e7df      	b.n	8017bd2 <jinit_2pass_quantizer+0x8e>
}
 8017c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c14:	080175f5 	.word	0x080175f5
 8017c18:	080175eb 	.word	0x080175eb

08017c1c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8017c1c:	4408      	add	r0, r1
 8017c1e:	3801      	subs	r0, #1
}
 8017c20:	fb90 f0f1 	sdiv	r0, r0, r1
 8017c24:	4770      	bx	lr

08017c26 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8017c26:	1e4b      	subs	r3, r1, #1
 8017c28:	4418      	add	r0, r3
  return a - (a % b);
 8017c2a:	fb90 f3f1 	sdiv	r3, r0, r1
 8017c2e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8017c32:	1a40      	subs	r0, r0, r1
 8017c34:	4770      	bx	lr

08017c36 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8017c36:	b570      	push	{r4, r5, r6, lr}
 8017c38:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8017c3a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8017c3e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8017c42:	2e00      	cmp	r6, #0
 8017c44:	dc00      	bgt.n	8017c48 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8017c46:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8017c48:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8017c4a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8017c4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017c50:	f855 0b04 	ldr.w	r0, [r5], #4
 8017c54:	f012 ff5c 	bl	802ab10 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8017c58:	e7f3      	b.n	8017c42 <jcopy_sample_rows+0xc>

08017c5a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8017c5a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8017c5c:	01d2      	lsls	r2, r2, #7
 8017c5e:	4601      	mov	r1, r0
 8017c60:	4618      	mov	r0, r3
 8017c62:	f012 bf55 	b.w	802ab10 <memcpy>

08017c66 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017c66:	8880      	ldrh	r0, [r0, #4]
 8017c68:	4770      	bx	lr

08017c6a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017c6a:	b570      	push	{r4, r5, r6, lr}
 8017c6c:	6803      	ldr	r3, [r0, #0]
 8017c6e:	460c      	mov	r4, r1
 8017c70:	2100      	movs	r1, #0
 8017c72:	4605      	mov	r5, r0
 8017c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c76:	4798      	blx	r3
 8017c78:	4606      	mov	r6, r0
 8017c7a:	682b      	ldr	r3, [r5, #0]
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	1ba4      	subs	r4, r4, r6
 8017c80:	6a1b      	ldr	r3, [r3, #32]
 8017c82:	b2a4      	uxth	r4, r4
 8017c84:	4798      	blx	r3
 8017c86:	fbb4 f0f0 	udiv	r0, r4, r0
 8017c8a:	bd70      	pop	{r4, r5, r6, pc}

08017c8c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	8083      	strh	r3, [r0, #4]
 8017c90:	4770      	bx	lr

08017c92 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017c92:	b510      	push	{r4, lr}
 8017c94:	6803      	ldr	r3, [r0, #0]
 8017c96:	4604      	mov	r4, r0
 8017c98:	8881      	ldrh	r1, [r0, #4]
 8017c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c9c:	4798      	blx	r3
 8017c9e:	88a3      	ldrh	r3, [r4, #4]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	80a3      	strh	r3, [r4, #4]
 8017ca4:	bd10      	pop	{r4, pc}

08017ca6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017caa:	4718      	bx	r3

08017cac <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017cac:	4770      	bx	lr
	...

08017cb0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017cb0:	4a02      	ldr	r2, [pc, #8]	; (8017cbc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017cb2:	6002      	str	r2, [r0, #0]
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	8082      	strh	r2, [r0, #4]
 8017cb8:	4770      	bx	lr
 8017cba:	bf00      	nop
 8017cbc:	0803084c 	.word	0x0803084c

08017cc0 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 8017cc0:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8017cc4:	4770      	bx	lr

08017cc6 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8017cc6:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8017cca:	4770      	bx	lr

08017ccc <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8017ccc:	b508      	push	{r3, lr}
 8017cce:	3034      	adds	r0, #52	; 0x34
 8017cd0:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8017cd4:	f7ec faf2 	bl	80042bc <_ZN8touchgfx8TextArea8setWidthEs>
 8017cd8:	bd08      	pop	{r3, pc}

08017cda <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8017cda:	b508      	push	{r3, lr}
 8017cdc:	3034      	adds	r0, #52	; 0x34
 8017cde:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8017ce2:	f7ec fafd 	bl	80042e0 <_ZN8touchgfx8TextArea9setHeightEs>
 8017ce6:	bd08      	pop	{r3, pc}

08017ce8 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8017ce8:	4a11      	ldr	r2, [pc, #68]	; (8017d30 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8017cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cee:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	8812      	ldrh	r2, [r2, #0]
 8017cf6:	460d      	mov	r5, r1
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d916      	bls.n	8017d2a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8017cfc:	6802      	ldr	r2, [r0, #0]
 8017cfe:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8017d02:	6d96      	ldr	r6, [r2, #88]	; 0x58
 8017d04:	4a0b      	ldr	r2, [pc, #44]	; (8017d34 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8017d06:	6812      	ldr	r2, [r2, #0]
 8017d08:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017d0c:	4b0a      	ldr	r3, [pc, #40]	; (8017d38 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017d14:	6803      	ldr	r3, [r0, #0]
 8017d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d18:	4798      	blx	r3
 8017d1a:	1a2a      	subs	r2, r5, r0
 8017d1c:	4639      	mov	r1, r7
 8017d1e:	4620      	mov	r0, r4
 8017d20:	4633      	mov	r3, r6
 8017d22:	b212      	sxth	r2, r2
 8017d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d28:	4718      	bx	r3
 8017d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d2e:	bf00      	nop
 8017d30:	2001563c 	.word	0x2001563c
 8017d34:	20015638 	.word	0x20015638
 8017d38:	20015640 	.word	0x20015640

08017d3c <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8017d3c:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8017d40:	4770      	bx	lr

08017d42 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8017d42:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017d46:	4770      	bx	lr

08017d48 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8017d48:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017d4a:	4770      	bx	lr

08017d4c <_ZN8touchgfx12DigitalClockD1Ev>:
 8017d4c:	4770      	bx	lr

08017d4e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8017d4e:	6641      	str	r1, [r0, #100]	; 0x64
 8017d50:	3034      	adds	r0, #52	; 0x34
 8017d52:	f002 b863 	b.w	8019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>

08017d56 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8017d56:	3034      	adds	r0, #52	; 0x34
 8017d58:	f001 bbb6 	b.w	80194c8 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08017d5c <_ZN8touchgfx12DigitalClockD0Ev>:
 8017d5c:	b510      	push	{r4, lr}
 8017d5e:	4604      	mov	r4, r0
 8017d60:	2198      	movs	r1, #152	; 0x98
 8017d62:	f012 fd2f 	bl	802a7c4 <_ZdlPvj>
 8017d66:	4620      	mov	r0, r4
 8017d68:	bd10      	pop	{r4, pc}

08017d6a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8017d6a:	b538      	push	{r3, r4, r5, lr}
 8017d6c:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8017d70:	460d      	mov	r5, r1
 8017d72:	4620      	mov	r0, r4
 8017d74:	f002 f852 	bl	8019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8017d78:	4620      	mov	r0, r4
 8017d7a:	4629      	mov	r1, r5
 8017d7c:	f001 fed6 	bl	8019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8017d80:	4620      	mov	r0, r4
 8017d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d86:	f002 b849 	b.w	8019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
	...

08017d8c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8017d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d90:	f100 0634 	add.w	r6, r0, #52	; 0x34
 8017d94:	4604      	mov	r4, r0
 8017d96:	4630      	mov	r0, r6
 8017d98:	f002 f840 	bl	8019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8017d9c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8017da0:	bb0b      	cbnz	r3, 8017de6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8017da2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017da6:	4620      	mov	r0, r4
 8017da8:	4a40      	ldr	r2, [pc, #256]	; (8017eac <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8017daa:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8017dae:	4d40      	ldr	r5, [pc, #256]	; (8017eb0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	bf08      	it	eq
 8017db4:	4615      	moveq	r5, r2
 8017db6:	f000 f936 	bl	8018026 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8017dba:	4680      	mov	r8, r0
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f000 f945 	bl	801804c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017dc2:	4681      	mov	r9, r0
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f000 f93a 	bl	801803e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	462a      	mov	r2, r5
 8017dce:	f04f 010c 	mov.w	r1, #12
 8017dd2:	bf14      	ite	ne
 8017dd4:	2341      	movne	r3, #65	; 0x41
 8017dd6:	2350      	moveq	r3, #80	; 0x50
 8017dd8:	4638      	mov	r0, r7
 8017dda:	e9cd 9300 	strd	r9, r3, [sp]
 8017dde:	4643      	mov	r3, r8
 8017de0:	f006 fe34 	bl	801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017de4:	e017      	b.n	8017e16 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d11b      	bne.n	8017e22 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8017dea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017dee:	4620      	mov	r0, r4
 8017df0:	4a30      	ldr	r2, [pc, #192]	; (8017eb4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8017df2:	4d31      	ldr	r5, [pc, #196]	; (8017eb8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	bf08      	it	eq
 8017df8:	4615      	moveq	r5, r2
 8017dfa:	f000 f911 	bl	8018020 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8017dfe:	4607      	mov	r7, r0
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 f923 	bl	801804c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017e06:	462a      	mov	r2, r5
 8017e08:	9000      	str	r0, [sp, #0]
 8017e0a:	463b      	mov	r3, r7
 8017e0c:	210c      	movs	r1, #12
 8017e0e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8017e12:	f006 fe1b 	bl	801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017e16:	4630      	mov	r0, r6
 8017e18:	b004      	add	sp, #16
 8017e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e1e:	f001 bffd 	b.w	8019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d126      	bne.n	8017e74 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8017e26:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	4a23      	ldr	r2, [pc, #140]	; (8017ebc <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8017e2e:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8017e32:	4d23      	ldr	r5, [pc, #140]	; (8017ec0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	bf08      	it	eq
 8017e38:	4615      	moveq	r5, r2
 8017e3a:	f000 f8f4 	bl	8018026 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8017e3e:	4680      	mov	r8, r0
 8017e40:	4620      	mov	r0, r4
 8017e42:	f000 f903 	bl	801804c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017e46:	4681      	mov	r9, r0
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f000 f902 	bl	8018052 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8017e4e:	4682      	mov	sl, r0
 8017e50:	4620      	mov	r0, r4
 8017e52:	f000 f8f4 	bl	801803e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	f8cd 9000 	str.w	r9, [sp]
 8017e5c:	462a      	mov	r2, r5
 8017e5e:	bf14      	ite	ne
 8017e60:	2341      	movne	r3, #65	; 0x41
 8017e62:	2350      	moveq	r3, #80	; 0x50
 8017e64:	210c      	movs	r1, #12
 8017e66:	4638      	mov	r0, r7
 8017e68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017e6c:	4643      	mov	r3, r8
 8017e6e:	f006 fded 	bl	801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017e72:	e7d0      	b.n	8017e16 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8017e74:	2b03      	cmp	r3, #3
 8017e76:	d1ce      	bne.n	8017e16 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8017e78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	4a11      	ldr	r2, [pc, #68]	; (8017ec4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8017e80:	4d11      	ldr	r5, [pc, #68]	; (8017ec8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	bf08      	it	eq
 8017e86:	4615      	moveq	r5, r2
 8017e88:	f000 f8ca 	bl	8018020 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8017e8c:	4607      	mov	r7, r0
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f000 f8dc 	bl	801804c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8017e94:	4680      	mov	r8, r0
 8017e96:	4620      	mov	r0, r4
 8017e98:	f000 f8db 	bl	8018052 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8017e9c:	463b      	mov	r3, r7
 8017e9e:	462a      	mov	r2, r5
 8017ea0:	210c      	movs	r1, #12
 8017ea2:	e9cd 8000 	strd	r8, r0, [sp]
 8017ea6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8017eaa:	e799      	b.n	8017de0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8017eac:	08030878 	.word	0x08030878
 8017eb0:	080308a2 	.word	0x080308a2
 8017eb4:	08030884 	.word	0x08030884
 8017eb8:	080308c2 	.word	0x080308c2
 8017ebc:	0803089f 	.word	0x0803089f
 8017ec0:	0803088c 	.word	0x0803088c
 8017ec4:	080308bf 	.word	0x080308bf
 8017ec8:	080308b0 	.word	0x080308b0

08017ecc <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8017ecc:	b510      	push	{r4, lr}
 8017ece:	6803      	ldr	r3, [r0, #0]
 8017ed0:	4604      	mov	r4, r0
 8017ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017ed6:	4798      	blx	r3
 8017ed8:	b120      	cbz	r0, 8017ee4 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x18>
 8017eda:	4620      	mov	r0, r4
 8017edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ee0:	f000 b8fd 	b.w	80180de <_ZNK8touchgfx9Container17invalidateContentEv>
 8017ee4:	bd10      	pop	{r4, pc}
	...

08017ee8 <_ZN8touchgfx12DigitalClockC1Ev>:
 8017ee8:	b510      	push	{r4, lr}
 8017eea:	4604      	mov	r4, r0
 8017eec:	f000 f87c 	bl	8017fe8 <_ZN8touchgfx13AbstractClockC1Ev>
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	4b21      	ldr	r3, [pc, #132]	; (8017f78 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8017ef4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017efe:	4a1f      	ldr	r2, [pc, #124]	; (8017f7c <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8017f00:	6023      	str	r3, [r4, #0]
 8017f02:	2303      	movs	r3, #3
 8017f04:	65e2      	str	r2, [r4, #92]	; 0x5c
 8017f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f0a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8017f0e:	2300      	movs	r3, #0
 8017f10:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8017f14:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
 8017f18:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 8017f1c:	4a18      	ldr	r2, [pc, #96]	; (8017f80 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8017f1e:	66a1      	str	r1, [r4, #104]	; 0x68
 8017f20:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8017f24:	6362      	str	r2, [r4, #52]	; 0x34
 8017f26:	4622      	mov	r2, r4
 8017f28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8017f2c:	8723      	strh	r3, [r4, #56]	; 0x38
 8017f2e:	8763      	strh	r3, [r4, #58]	; 0x3a
 8017f30:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8017f32:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8017f34:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8017f38:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8017f3c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8017f40:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8017f44:	6523      	str	r3, [r4, #80]	; 0x50
 8017f46:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8017f4a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8017f4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8017f52:	6663      	str	r3, [r4, #100]	; 0x64
 8017f54:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8017f58:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8017f5c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 8017f60:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8017f64:	67a3      	str	r3, [r4, #120]	; 0x78
 8017f66:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017f6a:	f822 3f80 	strh.w	r3, [r2, #128]!
 8017f6e:	67e2      	str	r2, [r4, #124]	; 0x7c
 8017f70:	f000 f87c 	bl	801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017f74:	4620      	mov	r0, r4
 8017f76:	bd10      	pop	{r4, pc}
 8017f78:	080308d4 	.word	0x080308d4
 8017f7c:	0802d828 	.word	0x0802d828
 8017f80:	0802e18c 	.word	0x0802e18c

08017f84 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8017f84:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 8017f88:	4770      	bx	lr

08017f8a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8017f8a:	b470      	push	{r4, r5, r6}
 8017f8c:	2518      	movs	r5, #24
 8017f8e:	fbb1 f6f5 	udiv	r6, r1, r5
 8017f92:	fb06 1115 	mls	r1, r6, r5, r1
 8017f96:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8017f9a:	213c      	movs	r1, #60	; 0x3c
 8017f9c:	fbb2 f5f1 	udiv	r5, r2, r1
 8017fa0:	fb05 2211 	mls	r2, r5, r1, r2
 8017fa4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8017fa8:	fbb3 f2f1 	udiv	r2, r3, r1
 8017fac:	fb02 3311 	mls	r3, r2, r1, r3
 8017fb0:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8017fb4:	6803      	ldr	r3, [r0, #0]
 8017fb6:	bc70      	pop	{r4, r5, r6}
 8017fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fbc:	4718      	bx	r3

08017fbe <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8017fbe:	b4f0      	push	{r4, r5, r6, r7}
 8017fc0:	6804      	ldr	r4, [r0, #0]
 8017fc2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8017fc6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8017fca:	240c      	movs	r4, #12
 8017fcc:	2e00      	cmp	r6, #0
 8017fce:	46ac      	mov	ip, r5
 8017fd0:	fbb1 f7f4 	udiv	r7, r1, r4
 8017fd4:	fb07 1114 	mls	r1, r7, r4, r1
 8017fd8:	bf18      	it	ne
 8017fda:	2400      	movne	r4, #0
 8017fdc:	fa54 f181 	uxtab	r1, r4, r1
 8017fe0:	bcf0      	pop	{r4, r5, r6, r7}
 8017fe2:	b2c9      	uxtb	r1, r1
 8017fe4:	4760      	bx	ip
	...

08017fe8 <_ZN8touchgfx13AbstractClockC1Ev>:
 8017fe8:	2101      	movs	r1, #1
 8017fea:	2200      	movs	r2, #0
 8017fec:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017ff0:	490a      	ldr	r1, [pc, #40]	; (801801c <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8017ff2:	8082      	strh	r2, [r0, #4]
 8017ff4:	80c2      	strh	r2, [r0, #6]
 8017ff6:	8102      	strh	r2, [r0, #8]
 8017ff8:	8142      	strh	r2, [r0, #10]
 8017ffa:	8182      	strh	r2, [r0, #12]
 8017ffc:	81c2      	strh	r2, [r0, #14]
 8017ffe:	8202      	strh	r2, [r0, #16]
 8018000:	8242      	strh	r2, [r0, #18]
 8018002:	61c2      	str	r2, [r0, #28]
 8018004:	8402      	strh	r2, [r0, #32]
 8018006:	8442      	strh	r2, [r0, #34]	; 0x22
 8018008:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801800c:	6001      	str	r1, [r0, #0]
 801800e:	6282      	str	r2, [r0, #40]	; 0x28
 8018010:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018012:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8018016:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801801a:	4770      	bx	lr
 801801c:	08030994 	.word	0x08030994

08018020 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8018020:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018024:	4770      	bx	lr

08018026 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8018026:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801802a:	220c      	movs	r2, #12
 801802c:	f100 030b 	add.w	r3, r0, #11
 8018030:	fb93 f0f2 	sdiv	r0, r3, r2
 8018034:	fb02 3010 	mls	r0, r2, r0, r3
 8018038:	3001      	adds	r0, #1
 801803a:	b2c0      	uxtb	r0, r0
 801803c:	4770      	bx	lr

0801803e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 801803e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018042:	280b      	cmp	r0, #11
 8018044:	bf8c      	ite	hi
 8018046:	2000      	movhi	r0, #0
 8018048:	2001      	movls	r0, #1
 801804a:	4770      	bx	lr

0801804c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 801804c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8018050:	4770      	bx	lr

08018052 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8018052:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8018056:	4770      	bx	lr

08018058 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018058:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801805a:	2000      	movs	r0, #0
 801805c:	b12b      	cbz	r3, 801806a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801805e:	b920      	cbnz	r0, 801806a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018060:	1a5a      	subs	r2, r3, r1
 8018062:	699b      	ldr	r3, [r3, #24]
 8018064:	4250      	negs	r0, r2
 8018066:	4150      	adcs	r0, r2
 8018068:	e7f8      	b.n	801805c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801806a:	4770      	bx	lr

0801806c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801806c:	2300      	movs	r3, #0
 801806e:	6148      	str	r0, [r1, #20]
 8018070:	618b      	str	r3, [r1, #24]
 8018072:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018074:	b913      	cbnz	r3, 801807c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8018076:	6281      	str	r1, [r0, #40]	; 0x28
 8018078:	4770      	bx	lr
 801807a:	4613      	mov	r3, r2
 801807c:	699a      	ldr	r2, [r3, #24]
 801807e:	2a00      	cmp	r2, #0
 8018080:	d1fb      	bne.n	801807a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8018082:	6199      	str	r1, [r3, #24]
 8018084:	4770      	bx	lr

08018086 <_ZN8touchgfx9Container9removeAllEv>:
 8018086:	2200      	movs	r2, #0
 8018088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801808a:	b123      	cbz	r3, 8018096 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801808c:	6999      	ldr	r1, [r3, #24]
 801808e:	6281      	str	r1, [r0, #40]	; 0x28
 8018090:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018094:	e7f8      	b.n	8018088 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018096:	4770      	bx	lr

08018098 <_ZN8touchgfx9Container6unlinkEv>:
 8018098:	2300      	movs	r3, #0
 801809a:	6283      	str	r3, [r0, #40]	; 0x28
 801809c:	4770      	bx	lr

0801809e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801809e:	2200      	movs	r2, #0
 80180a0:	8002      	strh	r2, [r0, #0]
 80180a2:	8042      	strh	r2, [r0, #2]
 80180a4:	8082      	strh	r2, [r0, #4]
 80180a6:	80c2      	strh	r2, [r0, #6]
 80180a8:	4770      	bx	lr

080180aa <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80180aa:	b570      	push	{r4, r5, r6, lr}
 80180ac:	460d      	mov	r5, r1
 80180ae:	4616      	mov	r6, r2
 80180b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80180b2:	b13c      	cbz	r4, 80180c4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80180b4:	6823      	ldr	r3, [r4, #0]
 80180b6:	4620      	mov	r0, r4
 80180b8:	4632      	mov	r2, r6
 80180ba:	4629      	mov	r1, r5
 80180bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80180be:	4798      	blx	r3
 80180c0:	69a4      	ldr	r4, [r4, #24]
 80180c2:	e7f6      	b.n	80180b2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80180c4:	bd70      	pop	{r4, r5, r6, pc}

080180c6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80180c6:	b538      	push	{r3, r4, r5, lr}
 80180c8:	460d      	mov	r5, r1
 80180ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80180cc:	b134      	cbz	r4, 80180dc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80180ce:	682b      	ldr	r3, [r5, #0]
 80180d0:	4621      	mov	r1, r4
 80180d2:	4628      	mov	r0, r5
 80180d4:	689b      	ldr	r3, [r3, #8]
 80180d6:	4798      	blx	r3
 80180d8:	69a4      	ldr	r4, [r4, #24]
 80180da:	e7f7      	b.n	80180cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80180dc:	bd38      	pop	{r3, r4, r5, pc}

080180de <_ZNK8touchgfx9Container17invalidateContentEv>:
 80180de:	b510      	push	{r4, lr}
 80180e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80180e2:	b12c      	cbz	r4, 80180f0 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 80180e4:	6823      	ldr	r3, [r4, #0]
 80180e6:	4620      	mov	r0, r4
 80180e8:	699b      	ldr	r3, [r3, #24]
 80180ea:	4798      	blx	r3
 80180ec:	69a4      	ldr	r4, [r4, #24]
 80180ee:	e7f8      	b.n	80180e2 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 80180f0:	bd10      	pop	{r4, pc}

080180f2 <_ZN8touchgfx9ContainerD1Ev>:
 80180f2:	4770      	bx	lr

080180f4 <_ZN8touchgfx9ContainerD0Ev>:
 80180f4:	b510      	push	{r4, lr}
 80180f6:	4604      	mov	r4, r0
 80180f8:	212c      	movs	r1, #44	; 0x2c
 80180fa:	f012 fb63 	bl	802a7c4 <_ZdlPvj>
 80180fe:	4620      	mov	r0, r4
 8018100:	bd10      	pop	{r4, pc}

08018102 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018102:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018104:	b19b      	cbz	r3, 801812e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018106:	428b      	cmp	r3, r1
 8018108:	d109      	bne.n	801811e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801810a:	699a      	ldr	r2, [r3, #24]
 801810c:	2100      	movs	r1, #0
 801810e:	6159      	str	r1, [r3, #20]
 8018110:	6282      	str	r2, [r0, #40]	; 0x28
 8018112:	b902      	cbnz	r2, 8018116 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018114:	4770      	bx	lr
 8018116:	6199      	str	r1, [r3, #24]
 8018118:	4770      	bx	lr
 801811a:	4613      	mov	r3, r2
 801811c:	b13a      	cbz	r2, 801812e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801811e:	699a      	ldr	r2, [r3, #24]
 8018120:	428a      	cmp	r2, r1
 8018122:	d1fa      	bne.n	801811a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018124:	698a      	ldr	r2, [r1, #24]
 8018126:	619a      	str	r2, [r3, #24]
 8018128:	2300      	movs	r3, #0
 801812a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801812e:	4770      	bx	lr

08018130 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018130:	b410      	push	{r4}
 8018132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018134:	4604      	mov	r4, r0
 8018136:	b92b      	cbnz	r3, 8018144 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018138:	6803      	ldr	r3, [r0, #0]
 801813a:	4611      	mov	r1, r2
 801813c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018142:	4718      	bx	r3
 8018144:	b941      	cbnz	r1, 8018158 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018146:	6193      	str	r3, [r2, #24]
 8018148:	6282      	str	r2, [r0, #40]	; 0x28
 801814a:	6154      	str	r4, [r2, #20]
 801814c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018150:	4770      	bx	lr
 8018152:	4603      	mov	r3, r0
 8018154:	2800      	cmp	r0, #0
 8018156:	d0f9      	beq.n	801814c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018158:	4299      	cmp	r1, r3
 801815a:	6998      	ldr	r0, [r3, #24]
 801815c:	d1f9      	bne.n	8018152 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801815e:	6190      	str	r0, [r2, #24]
 8018160:	618a      	str	r2, [r1, #24]
 8018162:	e7f2      	b.n	801814a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08018164 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018168:	461f      	mov	r7, r3
 801816a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801816e:	460d      	mov	r5, r1
 8018170:	4616      	mov	r6, r2
 8018172:	b103      	cbz	r3, 8018176 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018174:	6038      	str	r0, [r7, #0]
 8018176:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018178:	b314      	cbz	r4, 80181c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801817a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801817e:	b1eb      	cbz	r3, 80181bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018180:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018184:	428d      	cmp	r5, r1
 8018186:	db19      	blt.n	80181bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018188:	b289      	uxth	r1, r1
 801818a:	8923      	ldrh	r3, [r4, #8]
 801818c:	440b      	add	r3, r1
 801818e:	b21b      	sxth	r3, r3
 8018190:	429d      	cmp	r5, r3
 8018192:	da13      	bge.n	80181bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018194:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018198:	4296      	cmp	r6, r2
 801819a:	db0f      	blt.n	80181bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801819c:	b292      	uxth	r2, r2
 801819e:	8963      	ldrh	r3, [r4, #10]
 80181a0:	4413      	add	r3, r2
 80181a2:	b21b      	sxth	r3, r3
 80181a4:	429e      	cmp	r6, r3
 80181a6:	da09      	bge.n	80181bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	1ab2      	subs	r2, r6, r2
 80181ac:	1a69      	subs	r1, r5, r1
 80181ae:	4620      	mov	r0, r4
 80181b0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80181b4:	b212      	sxth	r2, r2
 80181b6:	463b      	mov	r3, r7
 80181b8:	b209      	sxth	r1, r1
 80181ba:	47c0      	blx	r8
 80181bc:	69a4      	ldr	r4, [r4, #24]
 80181be:	e7db      	b.n	8018178 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80181c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	4c6d      	ldr	r4, [pc, #436]	; (8018380 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80181ca:	b0a1      	sub	sp, #132	; 0x84
 80181cc:	4606      	mov	r6, r0
 80181ce:	6824      	ldr	r4, [r4, #0]
 80181d0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80181d2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80181d6:	2400      	movs	r4, #0
 80181d8:	9303      	str	r3, [sp, #12]
 80181da:	802c      	strh	r4, [r5, #0]
 80181dc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80181de:	802c      	strh	r4, [r5, #0]
 80181e0:	601c      	str	r4, [r3, #0]
 80181e2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80181e6:	f7ff ffbd 	bl	8018164 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80181ea:	f1b9 0f03 	cmp.w	r9, #3
 80181ee:	f340 80c1 	ble.w	8018374 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80181f2:	4631      	mov	r1, r6
 80181f4:	a80c      	add	r0, sp, #48	; 0x30
 80181f6:	f004 fd99 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181fa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80181fe:	9306      	str	r3, [sp, #24]
 8018200:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018204:	9307      	str	r3, [sp, #28]
 8018206:	9b03      	ldr	r3, [sp, #12]
 8018208:	f8d3 a000 	ldr.w	sl, [r3]
 801820c:	f1ba 0f00 	cmp.w	sl, #0
 8018210:	f000 80b3 	beq.w	801837a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8018214:	4651      	mov	r1, sl
 8018216:	a810      	add	r0, sp, #64	; 0x40
 8018218:	f004 fd88 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801821c:	2002      	movs	r0, #2
 801821e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8018222:	9b01      	ldr	r3, [sp, #4]
 8018224:	9a06      	ldr	r2, [sp, #24]
 8018226:	fb91 f1f0 	sdiv	r1, r1, r0
 801822a:	189d      	adds	r5, r3, r2
 801822c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8018230:	9a07      	ldr	r2, [sp, #28]
 8018232:	4419      	add	r1, r3
 8018234:	9b02      	ldr	r3, [sp, #8]
 8018236:	4413      	add	r3, r2
 8018238:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801823c:	1a6d      	subs	r5, r5, r1
 801823e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018242:	fb92 f2f0 	sdiv	r2, r2, r0
 8018246:	440a      	add	r2, r1
 8018248:	1a9b      	subs	r3, r3, r2
 801824a:	435b      	muls	r3, r3
 801824c:	fb05 3505 	mla	r5, r5, r5, r3
 8018250:	4f4c      	ldr	r7, [pc, #304]	; (8018384 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8018252:	ac10      	add	r4, sp, #64	; 0x40
 8018254:	f1b9 0f0c 	cmp.w	r9, #12
 8018258:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801825a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801825c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801825e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018260:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018264:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801826c:	f04f 0303 	mov.w	r3, #3
 8018270:	bfd8      	it	le
 8018272:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018276:	f04f 0400 	mov.w	r4, #0
 801827a:	f8cd 9000 	str.w	r9, [sp]
 801827e:	bfcc      	ite	gt
 8018280:	4698      	movgt	r8, r3
 8018282:	fb92 f8f3 	sdivle	r8, r2, r3
 8018286:	1c63      	adds	r3, r4, #1
 8018288:	aa10      	add	r2, sp, #64	; 0x40
 801828a:	f004 0401 	and.w	r4, r4, #1
 801828e:	f04f 0b00 	mov.w	fp, #0
 8018292:	9308      	str	r3, [sp, #32]
 8018294:	9b00      	ldr	r3, [sp, #0]
 8018296:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801829a:	fb93 f3f8 	sdiv	r3, r3, r8
 801829e:	3404      	adds	r4, #4
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	9304      	str	r3, [sp, #16]
 80182a4:	9a04      	ldr	r2, [sp, #16]
 80182a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80182aa:	fb13 f302 	smulbb	r3, r3, r2
 80182ae:	9a01      	ldr	r2, [sp, #4]
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	1899      	adds	r1, r3, r2
 80182b4:	9305      	str	r3, [sp, #20]
 80182b6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80182ba:	b209      	sxth	r1, r1
 80182bc:	4299      	cmp	r1, r3
 80182be:	db4d      	blt.n	801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80182c0:	8932      	ldrh	r2, [r6, #8]
 80182c2:	4413      	add	r3, r2
 80182c4:	b21b      	sxth	r3, r3
 80182c6:	4299      	cmp	r1, r3
 80182c8:	da48      	bge.n	801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80182ca:	9b04      	ldr	r3, [sp, #16]
 80182cc:	6827      	ldr	r7, [r4, #0]
 80182ce:	fb17 f703 	smulbb	r7, r7, r3
 80182d2:	9b02      	ldr	r3, [sp, #8]
 80182d4:	b2bf      	uxth	r7, r7
 80182d6:	18fa      	adds	r2, r7, r3
 80182d8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80182dc:	b212      	sxth	r2, r2
 80182de:	429a      	cmp	r2, r3
 80182e0:	db3c      	blt.n	801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80182e2:	8970      	ldrh	r0, [r6, #10]
 80182e4:	4403      	add	r3, r0
 80182e6:	b21b      	sxth	r3, r3
 80182e8:	429a      	cmp	r2, r3
 80182ea:	da37      	bge.n	801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80182ec:	2300      	movs	r3, #0
 80182ee:	4630      	mov	r0, r6
 80182f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80182f2:	ab0b      	add	r3, sp, #44	; 0x2c
 80182f4:	f7ff ff36 	bl	8018164 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80182f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182fa:	b37a      	cbz	r2, 801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80182fc:	4552      	cmp	r2, sl
 80182fe:	d02d      	beq.n	801835c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018300:	4611      	mov	r1, r2
 8018302:	a80e      	add	r0, sp, #56	; 0x38
 8018304:	9209      	str	r2, [sp, #36]	; 0x24
 8018306:	f004 fd11 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801830a:	f04f 0e02 	mov.w	lr, #2
 801830e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8018312:	9a06      	ldr	r2, [sp, #24]
 8018314:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8018318:	9b01      	ldr	r3, [sp, #4]
 801831a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801831e:	4413      	add	r3, r2
 8018320:	9a07      	ldr	r2, [sp, #28]
 8018322:	fb91 f1fe 	sdiv	r1, r1, lr
 8018326:	fb9c fcfe 	sdiv	ip, ip, lr
 801832a:	4401      	add	r1, r0
 801832c:	1a58      	subs	r0, r3, r1
 801832e:	9b02      	ldr	r3, [sp, #8]
 8018330:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8018334:	4413      	add	r3, r2
 8018336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018338:	448c      	add	ip, r1
 801833a:	eba3 030c 	sub.w	r3, r3, ip
 801833e:	435b      	muls	r3, r3
 8018340:	fb00 3300 	mla	r3, r0, r0, r3
 8018344:	42ab      	cmp	r3, r5
 8018346:	d208      	bcs.n	801835a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801834a:	461d      	mov	r5, r3
 801834c:	9803      	ldr	r0, [sp, #12]
 801834e:	6001      	str	r1, [r0, #0]
 8018350:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018352:	9805      	ldr	r0, [sp, #20]
 8018354:	8008      	strh	r0, [r1, #0]
 8018356:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018358:	800f      	strh	r7, [r1, #0]
 801835a:	4692      	mov	sl, r2
 801835c:	f10b 0b01 	add.w	fp, fp, #1
 8018360:	3408      	adds	r4, #8
 8018362:	f1bb 0f04 	cmp.w	fp, #4
 8018366:	d19d      	bne.n	80182a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018368:	9b00      	ldr	r3, [sp, #0]
 801836a:	9c08      	ldr	r4, [sp, #32]
 801836c:	444b      	add	r3, r9
 801836e:	4544      	cmp	r4, r8
 8018370:	9300      	str	r3, [sp, #0]
 8018372:	d188      	bne.n	8018286 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018374:	b021      	add	sp, #132	; 0x84
 8018376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801837a:	f04f 35ff 	mov.w	r5, #4294967295
 801837e:	e767      	b.n	8018250 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018380:	200155e8 	.word	0x200155e8
 8018384:	0802be30 	.word	0x0802be30

08018388 <_ZN8touchgfx4RectaNERKS0_>:
 8018388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801838c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018390:	888c      	ldrh	r4, [r1, #4]
 8018392:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018396:	443c      	add	r4, r7
 8018398:	b2a4      	uxth	r4, r4
 801839a:	fa0f f884 	sxth.w	r8, r4
 801839e:	45c1      	cmp	r9, r8
 80183a0:	da2f      	bge.n	8018402 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80183a2:	8882      	ldrh	r2, [r0, #4]
 80183a4:	444a      	add	r2, r9
 80183a6:	b292      	uxth	r2, r2
 80183a8:	fa0f fe82 	sxth.w	lr, r2
 80183ac:	4577      	cmp	r7, lr
 80183ae:	da28      	bge.n	8018402 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80183b0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80183b4:	88cb      	ldrh	r3, [r1, #6]
 80183b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80183ba:	442b      	add	r3, r5
 80183bc:	b21b      	sxth	r3, r3
 80183be:	429e      	cmp	r6, r3
 80183c0:	da1f      	bge.n	8018402 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80183c2:	88c3      	ldrh	r3, [r0, #6]
 80183c4:	4433      	add	r3, r6
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	fa0f fc83 	sxth.w	ip, r3
 80183cc:	4565      	cmp	r5, ip
 80183ce:	da18      	bge.n	8018402 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80183d0:	454f      	cmp	r7, r9
 80183d2:	bfb8      	it	lt
 80183d4:	464f      	movlt	r7, r9
 80183d6:	42b5      	cmp	r5, r6
 80183d8:	bfb8      	it	lt
 80183da:	4635      	movlt	r5, r6
 80183dc:	45f0      	cmp	r8, lr
 80183de:	bfd8      	it	le
 80183e0:	4622      	movle	r2, r4
 80183e2:	1bd2      	subs	r2, r2, r7
 80183e4:	8082      	strh	r2, [r0, #4]
 80183e6:	884a      	ldrh	r2, [r1, #2]
 80183e8:	88c9      	ldrh	r1, [r1, #6]
 80183ea:	8007      	strh	r7, [r0, #0]
 80183ec:	440a      	add	r2, r1
 80183ee:	8045      	strh	r5, [r0, #2]
 80183f0:	b292      	uxth	r2, r2
 80183f2:	b211      	sxth	r1, r2
 80183f4:	458c      	cmp	ip, r1
 80183f6:	bfa8      	it	ge
 80183f8:	4613      	movge	r3, r2
 80183fa:	1b5b      	subs	r3, r3, r5
 80183fc:	80c3      	strh	r3, [r0, #6]
 80183fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018402:	2300      	movs	r3, #0
 8018404:	8003      	strh	r3, [r0, #0]
 8018406:	8043      	strh	r3, [r0, #2]
 8018408:	8083      	strh	r3, [r0, #4]
 801840a:	80c3      	strh	r3, [r0, #6]
 801840c:	e7f7      	b.n	80183fe <_ZN8touchgfx4RectaNERKS0_+0x76>

0801840e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801840e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018412:	2b00      	cmp	r3, #0
 8018414:	dd06      	ble.n	8018424 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018416:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801841a:	2800      	cmp	r0, #0
 801841c:	bfcc      	ite	gt
 801841e:	2000      	movgt	r0, #0
 8018420:	2001      	movle	r0, #1
 8018422:	4770      	bx	lr
 8018424:	2001      	movs	r0, #1
 8018426:	4770      	bx	lr

08018428 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801842c:	2300      	movs	r3, #0
 801842e:	4604      	mov	r4, r0
 8018430:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018432:	8003      	strh	r3, [r0, #0]
 8018434:	8043      	strh	r3, [r0, #2]
 8018436:	8083      	strh	r3, [r0, #4]
 8018438:	80c3      	strh	r3, [r0, #6]
 801843a:	2d00      	cmp	r5, #0
 801843c:	d040      	beq.n	80184c0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801843e:	1d28      	adds	r0, r5, #4
 8018440:	f7ff ffe5 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018444:	b988      	cbnz	r0, 801846a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018446:	4620      	mov	r0, r4
 8018448:	f7ff ffe1 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801844c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018450:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018454:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018458:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801845c:	b138      	cbz	r0, 801846e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801845e:	8022      	strh	r2, [r4, #0]
 8018460:	8063      	strh	r3, [r4, #2]
 8018462:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018466:	f8a4 c006 	strh.w	ip, [r4, #6]
 801846a:	69ad      	ldr	r5, [r5, #24]
 801846c:	e7e5      	b.n	801843a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801846e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018472:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018476:	4290      	cmp	r0, r2
 8018478:	4607      	mov	r7, r0
 801847a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801847e:	460e      	mov	r6, r1
 8018480:	bfa8      	it	ge
 8018482:	4617      	movge	r7, r2
 8018484:	4299      	cmp	r1, r3
 8018486:	4472      	add	r2, lr
 8018488:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801848c:	bfa8      	it	ge
 801848e:	461e      	movge	r6, r3
 8018490:	4440      	add	r0, r8
 8018492:	4471      	add	r1, lr
 8018494:	4463      	add	r3, ip
 8018496:	b200      	sxth	r0, r0
 8018498:	8027      	strh	r7, [r4, #0]
 801849a:	b212      	sxth	r2, r2
 801849c:	8066      	strh	r6, [r4, #2]
 801849e:	b209      	sxth	r1, r1
 80184a0:	b21b      	sxth	r3, r3
 80184a2:	4290      	cmp	r0, r2
 80184a4:	bfac      	ite	ge
 80184a6:	ebc7 0200 	rsbge	r2, r7, r0
 80184aa:	ebc7 0202 	rsblt	r2, r7, r2
 80184ae:	4299      	cmp	r1, r3
 80184b0:	bfac      	ite	ge
 80184b2:	ebc6 0301 	rsbge	r3, r6, r1
 80184b6:	ebc6 0303 	rsblt	r3, r6, r3
 80184ba:	80a2      	strh	r2, [r4, #4]
 80184bc:	80e3      	strh	r3, [r4, #6]
 80184be:	e7d4      	b.n	801846a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80184c0:	4620      	mov	r0, r4
 80184c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080184c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80184c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80184ca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80184ce:	b383      	cbz	r3, 8018532 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80184d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80184d2:	b374      	cbz	r4, 8018532 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80184d4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80184d8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80184dc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80184e0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80184e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80184e8:	b303      	cbz	r3, 801852c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80184ea:	4668      	mov	r0, sp
 80184ec:	1d21      	adds	r1, r4, #4
 80184ee:	f8ad 5000 	strh.w	r5, [sp]
 80184f2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80184f6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80184fa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80184fe:	f7ff ff43 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8018502:	4668      	mov	r0, sp
 8018504:	f7ff ff83 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018508:	b980      	cbnz	r0, 801852c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801850a:	f8bd 3000 	ldrh.w	r3, [sp]
 801850e:	4669      	mov	r1, sp
 8018510:	88a2      	ldrh	r2, [r4, #4]
 8018512:	4620      	mov	r0, r4
 8018514:	1a9b      	subs	r3, r3, r2
 8018516:	88e2      	ldrh	r2, [r4, #6]
 8018518:	f8ad 3000 	strh.w	r3, [sp]
 801851c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018520:	1a9b      	subs	r3, r3, r2
 8018522:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018526:	6823      	ldr	r3, [r4, #0]
 8018528:	689b      	ldr	r3, [r3, #8]
 801852a:	4798      	blx	r3
 801852c:	69a4      	ldr	r4, [r4, #24]
 801852e:	2c00      	cmp	r4, #0
 8018530:	d1d8      	bne.n	80184e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018532:	b002      	add	sp, #8
 8018534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018538 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018538:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801853a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801853e:	460d      	mov	r5, r1
 8018540:	4616      	mov	r6, r2
 8018542:	b323      	cbz	r3, 801858e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018544:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018546:	b314      	cbz	r4, 801858e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018548:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801854c:	b1eb      	cbz	r3, 801858a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801854e:	6828      	ldr	r0, [r5, #0]
 8018550:	466b      	mov	r3, sp
 8018552:	6869      	ldr	r1, [r5, #4]
 8018554:	c303      	stmia	r3!, {r0, r1}
 8018556:	4668      	mov	r0, sp
 8018558:	1d21      	adds	r1, r4, #4
 801855a:	f7ff ff15 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801855e:	4668      	mov	r0, sp
 8018560:	f7ff ff55 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018564:	b988      	cbnz	r0, 801858a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018566:	f8bd 3000 	ldrh.w	r3, [sp]
 801856a:	4669      	mov	r1, sp
 801856c:	88a2      	ldrh	r2, [r4, #4]
 801856e:	4620      	mov	r0, r4
 8018570:	1a9b      	subs	r3, r3, r2
 8018572:	88e2      	ldrh	r2, [r4, #6]
 8018574:	f8ad 3000 	strh.w	r3, [sp]
 8018578:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801857c:	1a9b      	subs	r3, r3, r2
 801857e:	4632      	mov	r2, r6
 8018580:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018584:	6823      	ldr	r3, [r4, #0]
 8018586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018588:	4798      	blx	r3
 801858a:	69a4      	ldr	r4, [r4, #24]
 801858c:	e7db      	b.n	8018546 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801858e:	b002      	add	sp, #8
 8018590:	bd70      	pop	{r4, r5, r6, pc}

08018592 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018592:	6803      	ldr	r3, [r0, #0]
 8018594:	b513      	push	{r0, r1, r4, lr}
 8018596:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801859a:	2300      	movs	r3, #0
 801859c:	e9cd 3300 	strd	r3, r3, [sp]
 80185a0:	466b      	mov	r3, sp
 80185a2:	47a0      	blx	r4
 80185a4:	b002      	add	sp, #8
 80185a6:	bd10      	pop	{r4, pc}

080185a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80185a8:	2301      	movs	r3, #1
 80185aa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80185ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80185b2:	4770      	bx	lr

080185b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80185b4:	2301      	movs	r3, #1
 80185b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80185ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80185be:	4770      	bx	lr

080185c0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80185c0:	6843      	ldr	r3, [r0, #4]
 80185c2:	2201      	movs	r2, #1
 80185c4:	725a      	strb	r2, [r3, #9]
 80185c6:	6840      	ldr	r0, [r0, #4]
 80185c8:	6803      	ldr	r3, [r0, #0]
 80185ca:	691b      	ldr	r3, [r3, #16]
 80185cc:	4718      	bx	r3

080185ce <_ZN8touchgfx3HAL8flushDMAEv>:
 80185ce:	6840      	ldr	r0, [r0, #4]
 80185d0:	6803      	ldr	r3, [r0, #0]
 80185d2:	689b      	ldr	r3, [r3, #8]
 80185d4:	4718      	bx	r3

080185d6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80185d6:	b530      	push	{r4, r5, lr}
 80185d8:	b08b      	sub	sp, #44	; 0x2c
 80185da:	6804      	ldr	r4, [r0, #0]
 80185dc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80185e0:	9509      	str	r5, [sp, #36]	; 0x24
 80185e2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80185e6:	9508      	str	r5, [sp, #32]
 80185e8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80185ec:	9507      	str	r5, [sp, #28]
 80185ee:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80185f2:	9506      	str	r5, [sp, #24]
 80185f4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80185f8:	9505      	str	r5, [sp, #20]
 80185fa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80185fe:	9504      	str	r5, [sp, #16]
 8018600:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8018604:	9503      	str	r5, [sp, #12]
 8018606:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801860a:	9502      	str	r5, [sp, #8]
 801860c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018610:	e9cd 3500 	strd	r3, r5, [sp]
 8018614:	4613      	mov	r3, r2
 8018616:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018618:	2200      	movs	r2, #0
 801861a:	47a0      	blx	r4
 801861c:	b00b      	add	sp, #44	; 0x2c
 801861e:	bd30      	pop	{r4, r5, pc}

08018620 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018620:	4b04      	ldr	r3, [pc, #16]	; (8018634 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018622:	781b      	ldrb	r3, [r3, #0]
 8018624:	b123      	cbz	r3, 8018630 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018626:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801862a:	f080 0001 	eor.w	r0, r0, #1
 801862e:	4770      	bx	lr
 8018630:	2001      	movs	r0, #1
 8018632:	4770      	bx	lr
 8018634:	200155e6 	.word	0x200155e6

08018638 <_ZN8touchgfx3HAL8endFrameEv>:
 8018638:	b510      	push	{r4, lr}
 801863a:	4604      	mov	r4, r0
 801863c:	6840      	ldr	r0, [r0, #4]
 801863e:	6803      	ldr	r3, [r0, #0]
 8018640:	689b      	ldr	r3, [r3, #8]
 8018642:	4798      	blx	r3
 8018644:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018648:	b113      	cbz	r3, 8018650 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801864a:	2301      	movs	r3, #1
 801864c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018650:	bd10      	pop	{r4, pc}

08018652 <_ZN8touchgfx3HAL10initializeEv>:
 8018652:	b510      	push	{r4, lr}
 8018654:	4604      	mov	r4, r0
 8018656:	f7e9 fc03 	bl	8001e60 <_ZN8touchgfx10OSWrappers10initializeEv>
 801865a:	6860      	ldr	r0, [r4, #4]
 801865c:	6803      	ldr	r3, [r0, #0]
 801865e:	68db      	ldr	r3, [r3, #12]
 8018660:	4798      	blx	r3
 8018662:	68e0      	ldr	r0, [r4, #12]
 8018664:	6803      	ldr	r3, [r0, #0]
 8018666:	689b      	ldr	r3, [r3, #8]
 8018668:	4798      	blx	r3
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	4620      	mov	r0, r4
 801866e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018674:	4718      	bx	r3

08018676 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018676:	b508      	push	{r3, lr}
 8018678:	6803      	ldr	r3, [r0, #0]
 801867a:	4604      	mov	r4, r0
 801867c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018680:	4798      	blx	r3
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018686:	4620      	mov	r0, r4
 8018688:	4798      	blx	r3
 801868a:	f7e9 fc35 	bl	8001ef8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801868e:	6823      	ldr	r3, [r4, #0]
 8018690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018692:	e7f8      	b.n	8018686 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08018694 <_ZN8touchgfx3HAL4tickEv>:
 8018694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018696:	6803      	ldr	r3, [r0, #0]
 8018698:	4604      	mov	r4, r0
 801869a:	4d5b      	ldr	r5, [pc, #364]	; (8018808 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801869c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80186a0:	4798      	blx	r3
 80186a2:	2800      	cmp	r0, #0
 80186a4:	f000 8095 	beq.w	80187d2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80186a8:	2001      	movs	r0, #1
 80186aa:	2600      	movs	r6, #0
 80186ac:	f7e9 fa50 	bl	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80186b0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80186b4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80186b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80186bc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80186c0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80186c4:	b133      	cbz	r3, 80186d4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80186c6:	6823      	ldr	r3, [r4, #0]
 80186c8:	4620      	mov	r0, r4
 80186ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80186ce:	4798      	blx	r3
 80186d0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80186d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80186d8:	2601      	movs	r6, #1
 80186da:	6862      	ldr	r2, [r4, #4]
 80186dc:	f083 0301 	eor.w	r3, r3, #1
 80186e0:	702e      	strb	r6, [r5, #0]
 80186e2:	7253      	strb	r3, [r2, #9]
 80186e4:	f003 faee 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 80186e8:	6803      	ldr	r3, [r0, #0]
 80186ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186ec:	4798      	blx	r3
 80186ee:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80186f2:	b90b      	cbnz	r3, 80186f8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80186f4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80186f8:	f003 fae4 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 80186fc:	6803      	ldr	r3, [r0, #0]
 80186fe:	695b      	ldr	r3, [r3, #20]
 8018700:	4798      	blx	r3
 8018702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018704:	6803      	ldr	r3, [r0, #0]
 8018706:	691b      	ldr	r3, [r3, #16]
 8018708:	4798      	blx	r3
 801870a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801870e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018712:	3b01      	subs	r3, #1
 8018714:	b2db      	uxtb	r3, r3
 8018716:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801871a:	b10a      	cbz	r2, 8018720 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801871c:	2b00      	cmp	r3, #0
 801871e:	d1eb      	bne.n	80186f8 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018720:	4a3a      	ldr	r2, [pc, #232]	; (801880c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018722:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018726:	7813      	ldrb	r3, [r2, #0]
 8018728:	3301      	adds	r3, #1
 801872a:	b25b      	sxtb	r3, r3
 801872c:	4299      	cmp	r1, r3
 801872e:	7013      	strb	r3, [r2, #0]
 8018730:	dc10      	bgt.n	8018754 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018732:	2300      	movs	r3, #0
 8018734:	68e0      	ldr	r0, [r4, #12]
 8018736:	a902      	add	r1, sp, #8
 8018738:	7013      	strb	r3, [r2, #0]
 801873a:	aa03      	add	r2, sp, #12
 801873c:	6803      	ldr	r3, [r0, #0]
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	4798      	blx	r3
 8018742:	6823      	ldr	r3, [r4, #0]
 8018744:	2800      	cmp	r0, #0
 8018746:	d050      	beq.n	80187ea <_ZN8touchgfx3HAL4tickEv+0x156>
 8018748:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801874c:	4620      	mov	r0, r4
 801874e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018752:	4798      	blx	r3
 8018754:	2300      	movs	r3, #0
 8018756:	6960      	ldr	r0, [r4, #20]
 8018758:	f88d 3007 	strb.w	r3, [sp, #7]
 801875c:	b158      	cbz	r0, 8018776 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801875e:	6803      	ldr	r3, [r0, #0]
 8018760:	f10d 0107 	add.w	r1, sp, #7
 8018764:	68db      	ldr	r3, [r3, #12]
 8018766:	4798      	blx	r3
 8018768:	b128      	cbz	r0, 8018776 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801876a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801876c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018770:	6803      	ldr	r3, [r0, #0]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	4798      	blx	r3
 8018776:	f104 001c 	add.w	r0, r4, #28
 801877a:	f011 ff4f 	bl	802a61c <_ZN8touchgfx8Gestures4tickEv>
 801877e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018782:	b30b      	cbz	r3, 80187c8 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018784:	6920      	ldr	r0, [r4, #16]
 8018786:	6803      	ldr	r3, [r0, #0]
 8018788:	691b      	ldr	r3, [r3, #16]
 801878a:	4798      	blx	r3
 801878c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801878e:	4606      	mov	r6, r0
 8018790:	b903      	cbnz	r3, 8018794 <_ZN8touchgfx3HAL4tickEv+0x100>
 8018792:	6720      	str	r0, [r4, #112]	; 0x70
 8018794:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018796:	4a1e      	ldr	r2, [pc, #120]	; (8018810 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018798:	1af3      	subs	r3, r6, r3
 801879a:	4293      	cmp	r3, r2
 801879c:	d914      	bls.n	80187c8 <_ZN8touchgfx3HAL4tickEv+0x134>
 801879e:	6920      	ldr	r0, [r4, #16]
 80187a0:	6803      	ldr	r3, [r0, #0]
 80187a2:	699b      	ldr	r3, [r3, #24]
 80187a4:	4798      	blx	r3
 80187a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80187a8:	2264      	movs	r2, #100	; 0x64
 80187aa:	1af3      	subs	r3, r6, r3
 80187ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80187b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80187b4:	2800      	cmp	r0, #0
 80187b6:	dc1d      	bgt.n	80187f4 <_ZN8touchgfx3HAL4tickEv+0x160>
 80187b8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80187bc:	6920      	ldr	r0, [r4, #16]
 80187be:	2100      	movs	r1, #0
 80187c0:	6803      	ldr	r3, [r0, #0]
 80187c2:	69db      	ldr	r3, [r3, #28]
 80187c4:	4798      	blx	r3
 80187c6:	6726      	str	r6, [r4, #112]	; 0x70
 80187c8:	f003 fa7c 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 80187cc:	6803      	ldr	r3, [r0, #0]
 80187ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187d0:	4798      	blx	r3
 80187d2:	6823      	ldr	r3, [r4, #0]
 80187d4:	4620      	mov	r0, r4
 80187d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80187da:	4798      	blx	r3
 80187dc:	2001      	movs	r0, #1
 80187de:	f7e9 f9e7 	bl	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80187e2:	2300      	movs	r3, #0
 80187e4:	702b      	strb	r3, [r5, #0]
 80187e6:	b004      	add	sp, #16
 80187e8:	bd70      	pop	{r4, r5, r6, pc}
 80187ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80187ee:	4620      	mov	r0, r4
 80187f0:	4798      	blx	r3
 80187f2:	e7af      	b.n	8018754 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80187f4:	2863      	cmp	r0, #99	; 0x63
 80187f6:	bfcb      	itete	gt
 80187f8:	2300      	movgt	r3, #0
 80187fa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80187fe:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018802:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018806:	e7d9      	b.n	80187bc <_ZN8touchgfx3HAL4tickEv+0x128>
 8018808:	200155ec 	.word	0x200155ec
 801880c:	200155ed 	.word	0x200155ed
 8018810:	05f5e100 	.word	0x05f5e100

08018814 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018814:	f7e9 bb54 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018818 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018818:	6581      	str	r1, [r0, #88]	; 0x58
 801881a:	301c      	adds	r0, #28
 801881c:	f011 befc 	b.w	802a618 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018820 <_ZN8touchgfx3HAL5touchEll>:
 8018820:	b530      	push	{r4, r5, lr}
 8018822:	b087      	sub	sp, #28
 8018824:	4604      	mov	r4, r0
 8018826:	a804      	add	r0, sp, #16
 8018828:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801882c:	f002 ffc6 	bl	801b7bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018830:	9b04      	ldr	r3, [sp, #16]
 8018832:	a906      	add	r1, sp, #24
 8018834:	a803      	add	r0, sp, #12
 8018836:	f8ad 300c 	strh.w	r3, [sp, #12]
 801883a:	9b05      	ldr	r3, [sp, #20]
 801883c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018840:	f003 f80e 	bl	801b860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018844:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018848:	f104 001c 	add.w	r0, r4, #28
 801884c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018850:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018854:	b189      	cbz	r1, 801887a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018856:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801885a:	9300      	str	r3, [sp, #0]
 801885c:	4613      	mov	r3, r2
 801885e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018862:	462a      	mov	r2, r5
 8018864:	f011 fee8 	bl	802a638 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018868:	b128      	cbz	r0, 8018876 <_ZN8touchgfx3HAL5touchEll+0x56>
 801886a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801886e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018870:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018874:	6623      	str	r3, [r4, #96]	; 0x60
 8018876:	b007      	add	sp, #28
 8018878:	bd30      	pop	{r4, r5, pc}
 801887a:	f011 ff1d 	bl	802a6b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801887e:	2301      	movs	r3, #1
 8018880:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018884:	e7f1      	b.n	801886a <_ZN8touchgfx3HAL5touchEll+0x4a>

08018886 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018886:	b510      	push	{r4, lr}
 8018888:	2b00      	cmp	r3, #0
 801888a:	d046      	beq.n	801891a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801888c:	ea81 0002 	eor.w	r0, r1, r2
 8018890:	07c4      	lsls	r4, r0, #31
 8018892:	d508      	bpl.n	80188a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018894:	440b      	add	r3, r1
 8018896:	3a01      	subs	r2, #1
 8018898:	428b      	cmp	r3, r1
 801889a:	d93e      	bls.n	801891a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801889c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80188a0:	f801 0b01 	strb.w	r0, [r1], #1
 80188a4:	e7f8      	b.n	8018898 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80188a6:	07d0      	lsls	r0, r2, #31
 80188a8:	bf42      	ittt	mi
 80188aa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80188ae:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80188b2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80188b6:	2b01      	cmp	r3, #1
 80188b8:	d911      	bls.n	80188de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80188ba:	ea81 0402 	eor.w	r4, r1, r2
 80188be:	4610      	mov	r0, r2
 80188c0:	07a4      	lsls	r4, r4, #30
 80188c2:	d022      	beq.n	801890a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80188c4:	f023 0401 	bic.w	r4, r3, #1
 80188c8:	440c      	add	r4, r1
 80188ca:	428c      	cmp	r4, r1
 80188cc:	4602      	mov	r2, r0
 80188ce:	d904      	bls.n	80188da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80188d0:	8812      	ldrh	r2, [r2, #0]
 80188d2:	3002      	adds	r0, #2
 80188d4:	f821 2b02 	strh.w	r2, [r1], #2
 80188d8:	e7f7      	b.n	80188ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80188da:	f003 0301 	and.w	r3, r3, #1
 80188de:	f023 0003 	bic.w	r0, r3, #3
 80188e2:	4408      	add	r0, r1
 80188e4:	4288      	cmp	r0, r1
 80188e6:	4614      	mov	r4, r2
 80188e8:	d904      	bls.n	80188f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80188ea:	6824      	ldr	r4, [r4, #0]
 80188ec:	3204      	adds	r2, #4
 80188ee:	f841 4b04 	str.w	r4, [r1], #4
 80188f2:	e7f7      	b.n	80188e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80188f4:	f003 0303 	and.w	r3, r3, #3
 80188f8:	3a01      	subs	r2, #1
 80188fa:	440b      	add	r3, r1
 80188fc:	428b      	cmp	r3, r1
 80188fe:	d90c      	bls.n	801891a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018900:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018904:	f801 0b01 	strb.w	r0, [r1], #1
 8018908:	e7f8      	b.n	80188fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801890a:	0790      	lsls	r0, r2, #30
 801890c:	d0e7      	beq.n	80188de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801890e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018912:	3b02      	subs	r3, #2
 8018914:	f821 0b02 	strh.w	r0, [r1], #2
 8018918:	e7e1      	b.n	80188de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801891a:	2001      	movs	r0, #1
 801891c:	bd10      	pop	{r4, pc}

0801891e <_ZN8touchgfx3HAL7noTouchEv>:
 801891e:	b510      	push	{r4, lr}
 8018920:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018924:	4604      	mov	r4, r0
 8018926:	b153      	cbz	r3, 801893e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018928:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801892c:	2101      	movs	r1, #1
 801892e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018932:	301c      	adds	r0, #28
 8018934:	f011 fec0 	bl	802a6b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018938:	2300      	movs	r3, #0
 801893a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801893e:	bd10      	pop	{r4, pc}

08018940 <_ZN8touchgfx3HAL3lcdEv>:
 8018940:	4b04      	ldr	r3, [pc, #16]	; (8018954 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018948:	b10a      	cbz	r2, 801894e <_ZN8touchgfx3HAL3lcdEv+0xe>
 801894a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801894c:	b900      	cbnz	r0, 8018950 <_ZN8touchgfx3HAL3lcdEv+0x10>
 801894e:	6898      	ldr	r0, [r3, #8]
 8018950:	4770      	bx	lr
 8018952:	bf00      	nop
 8018954:	200155e8 	.word	0x200155e8

08018958 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801895c:	b085      	sub	sp, #20
 801895e:	4604      	mov	r4, r0
 8018960:	2000      	movs	r0, #0
 8018962:	4699      	mov	r9, r3
 8018964:	ad04      	add	r5, sp, #16
 8018966:	460f      	mov	r7, r1
 8018968:	4690      	mov	r8, r2
 801896a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801896e:	69a0      	ldr	r0, [r4, #24]
 8018970:	6806      	ldr	r6, [r0, #0]
 8018972:	9501      	str	r5, [sp, #4]
 8018974:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018978:	9500      	str	r5, [sp, #0]
 801897a:	6835      	ldr	r5, [r6, #0]
 801897c:	47a8      	blx	r5
 801897e:	4d10      	ldr	r5, [pc, #64]	; (80189c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018980:	4606      	mov	r6, r0
 8018982:	f8a5 9000 	strh.w	r9, [r5]
 8018986:	f7ff ffdb 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 801898a:	6803      	ldr	r3, [r0, #0]
 801898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801898e:	4798      	blx	r3
 8018990:	b128      	cbz	r0, 801899e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8018992:	2801      	cmp	r0, #1
 8018994:	d00b      	beq.n	80189ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8018996:	4630      	mov	r0, r6
 8018998:	b005      	add	sp, #20
 801899a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801899e:	882b      	ldrh	r3, [r5, #0]
 80189a0:	fb08 7203 	mla	r2, r8, r3, r7
 80189a4:	9b03      	ldr	r3, [sp, #12]
 80189a6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80189aa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80189ac:	e7f3      	b.n	8018996 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80189ae:	882a      	ldrh	r2, [r5, #0]
 80189b0:	9b03      	ldr	r3, [sp, #12]
 80189b2:	fb08 7202 	mla	r2, r8, r2, r7
 80189b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80189ba:	1a9a      	subs	r2, r3, r2
 80189bc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80189be:	e7ea      	b.n	8018996 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80189c0:	200155e2 	.word	0x200155e2

080189c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80189c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189c6:	b08b      	sub	sp, #44	; 0x2c
 80189c8:	4617      	mov	r7, r2
 80189ca:	4604      	mov	r4, r0
 80189cc:	460e      	mov	r6, r1
 80189ce:	461d      	mov	r5, r3
 80189d0:	f7ff ffb6 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 80189d4:	6803      	ldr	r3, [r0, #0]
 80189d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189d8:	4798      	blx	r3
 80189da:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80189de:	9007      	str	r0, [sp, #28]
 80189e0:	4631      	mov	r1, r6
 80189e2:	6822      	ldr	r2, [r4, #0]
 80189e4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80189e8:	4b0c      	ldr	r3, [pc, #48]	; (8018a1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80189ea:	4620      	mov	r0, r4
 80189ec:	881b      	ldrh	r3, [r3, #0]
 80189ee:	9306      	str	r3, [sp, #24]
 80189f0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80189f4:	9305      	str	r3, [sp, #20]
 80189f6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80189fa:	9304      	str	r3, [sp, #16]
 80189fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a00:	9303      	str	r3, [sp, #12]
 8018a02:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018a06:	9302      	str	r3, [sp, #8]
 8018a08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018a0c:	e9cd 5300 	strd	r5, r3, [sp]
 8018a10:	463b      	mov	r3, r7
 8018a12:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018a14:	2200      	movs	r2, #0
 8018a16:	47a8      	blx	r5
 8018a18:	b00b      	add	sp, #44	; 0x2c
 8018a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a1c:	200155e2 	.word	0x200155e2

08018a20 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a24:	4698      	mov	r8, r3
 8018a26:	6803      	ldr	r3, [r0, #0]
 8018a28:	b08b      	sub	sp, #44	; 0x2c
 8018a2a:	4617      	mov	r7, r2
 8018a2c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018a2e:	460e      	mov	r6, r1
 8018a30:	4b13      	ldr	r3, [pc, #76]	; (8018a80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018a32:	4604      	mov	r4, r0
 8018a34:	f8b3 9000 	ldrh.w	r9, [r3]
 8018a38:	f7ff ff82 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018a3c:	6803      	ldr	r3, [r0, #0]
 8018a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a40:	4798      	blx	r3
 8018a42:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018a46:	2200      	movs	r2, #0
 8018a48:	4631      	mov	r1, r6
 8018a4a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018a4e:	2302      	movs	r3, #2
 8018a50:	4620      	mov	r0, r4
 8018a52:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018a56:	2301      	movs	r3, #1
 8018a58:	9305      	str	r3, [sp, #20]
 8018a5a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018a5e:	9304      	str	r3, [sp, #16]
 8018a60:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018a64:	9303      	str	r3, [sp, #12]
 8018a66:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018a6a:	9302      	str	r3, [sp, #8]
 8018a6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a70:	e9cd 8300 	strd	r8, r3, [sp]
 8018a74:	463b      	mov	r3, r7
 8018a76:	47a8      	blx	r5
 8018a78:	b00b      	add	sp, #44	; 0x2c
 8018a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a7e:	bf00      	nop
 8018a80:	200155e2 	.word	0x200155e2

08018a84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a88:	4698      	mov	r8, r3
 8018a8a:	6803      	ldr	r3, [r0, #0]
 8018a8c:	b087      	sub	sp, #28
 8018a8e:	460e      	mov	r6, r1
 8018a90:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018a92:	4617      	mov	r7, r2
 8018a94:	4b0f      	ldr	r3, [pc, #60]	; (8018ad4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018a96:	4604      	mov	r4, r0
 8018a98:	f8b3 9000 	ldrh.w	r9, [r3]
 8018a9c:	f7ff ff50 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018aa0:	6803      	ldr	r3, [r0, #0]
 8018aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa4:	4798      	blx	r3
 8018aa6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018aaa:	463a      	mov	r2, r7
 8018aac:	4631      	mov	r1, r6
 8018aae:	f8cd 900c 	str.w	r9, [sp, #12]
 8018ab2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018ab6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018aba:	4620      	mov	r0, r4
 8018abc:	9302      	str	r3, [sp, #8]
 8018abe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018ac2:	9301      	str	r3, [sp, #4]
 8018ac4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018ac8:	9300      	str	r3, [sp, #0]
 8018aca:	4643      	mov	r3, r8
 8018acc:	47a8      	blx	r5
 8018ace:	b007      	add	sp, #28
 8018ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad4:	200155e2 	.word	0x200155e2

08018ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018adc:	4604      	mov	r4, r0
 8018ade:	b08f      	sub	sp, #60	; 0x3c
 8018ae0:	4610      	mov	r0, r2
 8018ae2:	460d      	mov	r5, r1
 8018ae4:	4691      	mov	r9, r2
 8018ae6:	461e      	mov	r6, r3
 8018ae8:	f005 ffd6 	bl	801ea98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	f000 809d 	beq.w	8018c2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8018af2:	6823      	ldr	r3, [r4, #0]
 8018af4:	4620      	mov	r0, r4
 8018af6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8018c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018afa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b00:	4798      	blx	r3
 8018b02:	6823      	ldr	r3, [r4, #0]
 8018b04:	4620      	mov	r0, r4
 8018b06:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8018c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b0c:	4798      	blx	r3
 8018b0e:	f8bb 3000 	ldrh.w	r3, [fp]
 8018b12:	4f5c      	ldr	r7, [pc, #368]	; (8018c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018b14:	9301      	str	r3, [sp, #4]
 8018b16:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b1a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018b1e:	4640      	mov	r0, r8
 8018b20:	9302      	str	r3, [sp, #8]
 8018b22:	883b      	ldrh	r3, [r7, #0]
 8018b24:	9303      	str	r3, [sp, #12]
 8018b26:	4b58      	ldr	r3, [pc, #352]	; (8018c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018b28:	881a      	ldrh	r2, [r3, #0]
 8018b2a:	9305      	str	r3, [sp, #20]
 8018b2c:	9204      	str	r2, [sp, #16]
 8018b2e:	f006 f847 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b32:	8038      	strh	r0, [r7, #0]
 8018b34:	4640      	mov	r0, r8
 8018b36:	f006 f877 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018b3a:	9b05      	ldr	r3, [sp, #20]
 8018b3c:	b280      	uxth	r0, r0
 8018b3e:	8018      	strh	r0, [r3, #0]
 8018b40:	4b52      	ldr	r3, [pc, #328]	; (8018c8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d174      	bne.n	8018c32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018b48:	883b      	ldrh	r3, [r7, #0]
 8018b4a:	f8aa 0000 	strh.w	r0, [sl]
 8018b4e:	f8ab 3000 	strh.w	r3, [fp]
 8018b52:	4648      	mov	r0, r9
 8018b54:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018b58:	f005 ff9e 	bl	801ea98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018b62:	4611      	mov	r1, r2
 8018b64:	4628      	mov	r0, r5
 8018b66:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018b6a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018b6e:	f7ea fc26 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8018b72:	2301      	movs	r3, #1
 8018b74:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018b78:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018b7c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	dd5c      	ble.n	8018c3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018b84:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	dd58      	ble.n	8018c3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018b8c:	462a      	mov	r2, r5
 8018b8e:	ab0a      	add	r3, sp, #40	; 0x28
 8018b90:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018b94:	6851      	ldr	r1, [r2, #4]
 8018b96:	c303      	stmia	r3!, {r0, r1}
 8018b98:	4631      	mov	r1, r6
 8018b9a:	a80a      	add	r0, sp, #40	; 0x28
 8018b9c:	f7ff fbf4 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8018ba0:	4b38      	ldr	r3, [pc, #224]	; (8018c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018ba2:	2100      	movs	r1, #0
 8018ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ba8:	4b37      	ldr	r3, [pc, #220]	; (8018c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018baa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018bae:	aa0a      	add	r2, sp, #40	; 0x28
 8018bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bb4:	910c      	str	r1, [sp, #48]	; 0x30
 8018bb6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018bba:	ab08      	add	r3, sp, #32
 8018bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	a90c      	add	r1, sp, #48	; 0x30
 8018bc8:	f7ff fbde 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8018bcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d13c      	bne.n	8018c4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018bd2:	2000      	movs	r0, #0
 8018bd4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018bd8:	2600      	movs	r6, #0
 8018bda:	696b      	ldr	r3, [r5, #20]
 8018bdc:	a908      	add	r1, sp, #32
 8018bde:	682a      	ldr	r2, [r5, #0]
 8018be0:	4628      	mov	r0, r5
 8018be2:	9305      	str	r3, [sp, #20]
 8018be4:	616e      	str	r6, [r5, #20]
 8018be6:	6892      	ldr	r2, [r2, #8]
 8018be8:	4790      	blx	r2
 8018bea:	9b05      	ldr	r3, [sp, #20]
 8018bec:	4652      	mov	r2, sl
 8018bee:	4649      	mov	r1, r9
 8018bf0:	616b      	str	r3, [r5, #20]
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018bf8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018bfc:	f7ea fbdf 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 8018c00:	9a01      	ldr	r2, [sp, #4]
 8018c02:	4b23      	ldr	r3, [pc, #140]	; (8018c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018c04:	4620      	mov	r0, r4
 8018c06:	801a      	strh	r2, [r3, #0]
 8018c08:	9a02      	ldr	r2, [sp, #8]
 8018c0a:	4b22      	ldr	r3, [pc, #136]	; (8018c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018c0c:	801a      	strh	r2, [r3, #0]
 8018c0e:	9a03      	ldr	r2, [sp, #12]
 8018c10:	4b1c      	ldr	r3, [pc, #112]	; (8018c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018c12:	801a      	strh	r2, [r3, #0]
 8018c14:	4b1c      	ldr	r3, [pc, #112]	; (8018c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018c16:	9a04      	ldr	r2, [sp, #16]
 8018c18:	801a      	strh	r2, [r3, #0]
 8018c1a:	6823      	ldr	r3, [r4, #0]
 8018c1c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c22:	4798      	blx	r3
 8018c24:	6823      	ldr	r3, [r4, #0]
 8018c26:	4620      	mov	r0, r4
 8018c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c2a:	4798      	blx	r3
 8018c2c:	b00f      	add	sp, #60	; 0x3c
 8018c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c32:	883b      	ldrh	r3, [r7, #0]
 8018c34:	f8ab 0000 	strh.w	r0, [fp]
 8018c38:	f8aa 3000 	strh.w	r3, [sl]
 8018c3c:	e789      	b.n	8018b52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8018c3e:	462a      	mov	r2, r5
 8018c40:	ab0a      	add	r3, sp, #40	; 0x28
 8018c42:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018c46:	6851      	ldr	r1, [r2, #4]
 8018c48:	c303      	stmia	r3!, {r0, r1}
 8018c4a:	e7a9      	b.n	8018ba0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8018c4c:	a807      	add	r0, sp, #28
 8018c4e:	f006 f927 	bl	801eea0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c52:	4606      	mov	r6, r0
 8018c54:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018c56:	6803      	ldr	r3, [r0, #0]
 8018c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c5a:	4798      	blx	r3
 8018c5c:	4286      	cmp	r6, r0
 8018c5e:	d1b8      	bne.n	8018bd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018c60:	f7ff fe6e 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018c64:	6803      	ldr	r3, [r0, #0]
 8018c66:	4606      	mov	r6, r0
 8018c68:	a807      	add	r0, sp, #28
 8018c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c6c:	9305      	str	r3, [sp, #20]
 8018c6e:	f006 f917 	bl	801eea0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c72:	9b05      	ldr	r3, [sp, #20]
 8018c74:	4601      	mov	r1, r0
 8018c76:	4630      	mov	r0, r6
 8018c78:	4798      	blx	r3
 8018c7a:	f080 0001 	eor.w	r0, r0, #1
 8018c7e:	b2c0      	uxtb	r0, r0
 8018c80:	e7a8      	b.n	8018bd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018c82:	bf00      	nop
 8018c84:	200155dc 	.word	0x200155dc
 8018c88:	200155de 	.word	0x200155de
 8018c8c:	200155e0 	.word	0x200155e0
 8018c90:	200155e2 	.word	0x200155e2
 8018c94:	200155e4 	.word	0x200155e4

08018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018c98:	4b07      	ldr	r3, [pc, #28]	; (8018cb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018c9a:	b510      	push	{r4, lr}
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	b13b      	cbz	r3, 8018cb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018ca2:	6803      	ldr	r3, [r0, #0]
 8018ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ca6:	4798      	blx	r3
 8018ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018caa:	4283      	cmp	r3, r0
 8018cac:	d101      	bne.n	8018cb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018cb0:	bd10      	pop	{r4, pc}
 8018cb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018cb4:	e7fc      	b.n	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018cb6:	bf00      	nop
 8018cb8:	200155e6 	.word	0x200155e6

08018cbc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc0:	461d      	mov	r5, r3
 8018cc2:	b08a      	sub	sp, #40	; 0x28
 8018cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018cc8:	4690      	mov	r8, r2
 8018cca:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018cce:	2400      	movs	r4, #0
 8018cd0:	4607      	mov	r7, r0
 8018cd2:	fb06 8505 	mla	r5, r6, r5, r8
 8018cd6:	9404      	str	r4, [sp, #16]
 8018cd8:	f88d 4020 	strb.w	r4, [sp, #32]
 8018cdc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018ce0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018ce4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ce8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018cec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018cf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018cf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018cf8:	f7ff ffce 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018cfc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018d06:	a901      	add	r1, sp, #4
 8018d08:	9505      	str	r5, [sp, #20]
 8018d0a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018d0e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8018d12:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018d16:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018d1a:	6803      	ldr	r3, [r0, #0]
 8018d1c:	685b      	ldr	r3, [r3, #4]
 8018d1e:	4798      	blx	r3
 8018d20:	b00a      	add	sp, #40	; 0x28
 8018d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d26 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d2a:	b08b      	sub	sp, #44	; 0x2c
 8018d2c:	2400      	movs	r4, #0
 8018d2e:	4691      	mov	r9, r2
 8018d30:	461d      	mov	r5, r3
 8018d32:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d3a:	4688      	mov	r8, r1
 8018d3c:	4607      	mov	r7, r0
 8018d3e:	9404      	str	r4, [sp, #16]
 8018d40:	fb06 9505 	mla	r5, r6, r5, r9
 8018d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d48:	f7ff ffa6 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018d50:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d54:	6878      	ldr	r0, [r7, #4]
 8018d56:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018d5a:	a901      	add	r1, sp, #4
 8018d5c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018d60:	9505      	str	r5, [sp, #20]
 8018d62:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018d66:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018d6a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018d6e:	f8cd 8010 	str.w	r8, [sp, #16]
 8018d72:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018d76:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018d7a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018d7e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018d82:	6803      	ldr	r3, [r0, #0]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	4798      	blx	r3
 8018d88:	b00b      	add	sp, #44	; 0x2c
 8018d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018d90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d94:	b08a      	sub	sp, #40	; 0x28
 8018d96:	4698      	mov	r8, r3
 8018d98:	2300      	movs	r3, #0
 8018d9a:	4606      	mov	r6, r0
 8018d9c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018da0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8018da4:	2d0b      	cmp	r5, #11
 8018da6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018daa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8018dae:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8018db2:	9304      	str	r3, [sp, #16]
 8018db4:	d137      	bne.n	8018e26 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8018db6:	2380      	movs	r3, #128	; 0x80
 8018db8:	f88d 0020 	strb.w	r0, [sp, #32]
 8018dbc:	4630      	mov	r0, r6
 8018dbe:	9203      	str	r2, [sp, #12]
 8018dc0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018dc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018dc8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018dcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018dd0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018dd4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ddc:	f7ff ff5c 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018de0:	2c0b      	cmp	r4, #11
 8018de2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018de6:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018dea:	bf94      	ite	ls
 8018dec:	4b19      	ldrls	r3, [pc, #100]	; (8018e54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018dee:	2100      	movhi	r1, #0
 8018df0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8018df4:	bf98      	it	ls
 8018df6:	5d19      	ldrbls	r1, [r3, r4]
 8018df8:	fb02 8307 	mla	r3, r2, r7, r8
 8018dfc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018e00:	10c9      	asrs	r1, r1, #3
 8018e02:	fb01 0003 	mla	r0, r1, r3, r0
 8018e06:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018e0a:	a901      	add	r1, sp, #4
 8018e0c:	9005      	str	r0, [sp, #20]
 8018e0e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018e12:	2300      	movs	r3, #0
 8018e14:	6870      	ldr	r0, [r6, #4]
 8018e16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018e1a:	6803      	ldr	r3, [r0, #0]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	4798      	blx	r3
 8018e20:	b00a      	add	sp, #40	; 0x28
 8018e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e26:	2d02      	cmp	r5, #2
 8018e28:	d109      	bne.n	8018e3e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018e2a:	28ff      	cmp	r0, #255	; 0xff
 8018e2c:	d105      	bne.n	8018e3a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018e2e:	f1bc 0f00 	cmp.w	ip, #0
 8018e32:	bf14      	ite	ne
 8018e34:	2340      	movne	r3, #64	; 0x40
 8018e36:	2320      	moveq	r3, #32
 8018e38:	e7be      	b.n	8018db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e3a:	2340      	movs	r3, #64	; 0x40
 8018e3c:	e7bc      	b.n	8018db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e3e:	28ff      	cmp	r0, #255	; 0xff
 8018e40:	d105      	bne.n	8018e4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8018e42:	f1bc 0f00 	cmp.w	ip, #0
 8018e46:	bf14      	ite	ne
 8018e48:	2304      	movne	r3, #4
 8018e4a:	2301      	moveq	r3, #1
 8018e4c:	e7b4      	b.n	8018db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e4e:	2304      	movs	r3, #4
 8018e50:	e7b2      	b.n	8018db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e52:	bf00      	nop
 8018e54:	08030ab8 	.word	0x08030ab8

08018e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e5c:	b08b      	sub	sp, #44	; 0x2c
 8018e5e:	461d      	mov	r5, r3
 8018e60:	2400      	movs	r4, #0
 8018e62:	4688      	mov	r8, r1
 8018e64:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018e68:	4693      	mov	fp, r2
 8018e6a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8018e6e:	4607      	mov	r7, r0
 8018e70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018e74:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018e78:	9404      	str	r4, [sp, #16]
 8018e7a:	bf14      	ite	ne
 8018e7c:	2308      	movne	r3, #8
 8018e7e:	2302      	moveq	r3, #2
 8018e80:	fb05 b50a 	mla	r5, r5, sl, fp
 8018e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018e88:	f7ff ff06 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e8c:	2e0b      	cmp	r6, #11
 8018e8e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018e92:	a901      	add	r1, sp, #4
 8018e94:	bf98      	it	ls
 8018e96:	4b13      	ldrls	r3, [pc, #76]	; (8018ee4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8018e98:	f8ad a01e 	strh.w	sl, [sp, #30]
 8018e9c:	bf98      	it	ls
 8018e9e:	5d9c      	ldrbls	r4, [r3, r6]
 8018ea0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018ea4:	10e4      	asrs	r4, r4, #3
 8018ea6:	f8cd 8010 	str.w	r8, [sp, #16]
 8018eaa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018eae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018eb2:	fb04 0405 	mla	r4, r4, r5, r0
 8018eb6:	6878      	ldr	r0, [r7, #4]
 8018eb8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	9405      	str	r4, [sp, #20]
 8018ec0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ec4:	f88d 9020 	strb.w	r9, [sp, #32]
 8018ec8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8018ecc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018ed0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8018ed4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8018ed8:	6803      	ldr	r3, [r0, #0]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	4798      	blx	r3
 8018ede:	b00b      	add	sp, #44	; 0x2c
 8018ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ee4:	08030ab8 	.word	0x08030ab8

08018ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eec:	461e      	mov	r6, r3
 8018eee:	4b0a      	ldr	r3, [pc, #40]	; (8018f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018ef0:	460f      	mov	r7, r1
 8018ef2:	4690      	mov	r8, r2
 8018ef4:	881d      	ldrh	r5, [r3, #0]
 8018ef6:	f7ff fd23 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018efa:	6803      	ldr	r3, [r0, #0]
 8018efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018efe:	4798      	blx	r3
 8018f00:	280b      	cmp	r0, #11
 8018f02:	bf96      	itet	ls
 8018f04:	4b05      	ldrls	r3, [pc, #20]	; (8018f1c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018f06:	2400      	movhi	r4, #0
 8018f08:	5c1c      	ldrbls	r4, [r3, r0]
 8018f0a:	fb08 7005 	mla	r0, r8, r5, r7
 8018f0e:	10e4      	asrs	r4, r4, #3
 8018f10:	fb04 6000 	mla	r0, r4, r0, r6
 8018f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f18:	200155e2 	.word	0x200155e2
 8018f1c:	08030ab8 	.word	0x08030ab8

08018f20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f22:	b08b      	sub	sp, #44	; 0x2c
 8018f24:	461f      	mov	r7, r3
 8018f26:	4604      	mov	r4, r0
 8018f28:	4616      	mov	r6, r2
 8018f2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018f2e:	2500      	movs	r5, #0
 8018f30:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018f34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f38:	9504      	str	r5, [sp, #16]
 8018f3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018f42:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018f46:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018f4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f4e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018f52:	f88d 3020 	strb.w	r3, [sp, #32]
 8018f56:	f7ff fe9f 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	4631      	mov	r1, r6
 8018f5e:	4603      	mov	r3, r0
 8018f60:	4620      	mov	r0, r4
 8018f62:	f7ff ffc1 	bl	8018ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f66:	4b0e      	ldr	r3, [pc, #56]	; (8018fa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018f68:	9005      	str	r0, [sp, #20]
 8018f6a:	881b      	ldrh	r3, [r3, #0]
 8018f6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f70:	f7ff fce6 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018f74:	6803      	ldr	r3, [r0, #0]
 8018f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f78:	4798      	blx	r3
 8018f7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f7c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018f80:	a901      	add	r1, sp, #4
 8018f82:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018f86:	9304      	str	r3, [sp, #16]
 8018f88:	6860      	ldr	r0, [r4, #4]
 8018f8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018f8e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8018f92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018f96:	6803      	ldr	r3, [r0, #0]
 8018f98:	685b      	ldr	r3, [r3, #4]
 8018f9a:	4798      	blx	r3
 8018f9c:	b00b      	add	sp, #44	; 0x2c
 8018f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa0:	200155e2 	.word	0x200155e2

08018fa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fa6:	b08d      	sub	sp, #52	; 0x34
 8018fa8:	2501      	movs	r5, #1
 8018faa:	4604      	mov	r4, r0
 8018fac:	466b      	mov	r3, sp
 8018fae:	9503      	str	r5, [sp, #12]
 8018fb0:	e883 0006 	stmia.w	r3, {r1, r2}
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	f8bd 6000 	ldrh.w	r6, [sp]
 8018fba:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018fbe:	9306      	str	r3, [sp, #24]
 8018fc0:	6803      	ldr	r3, [r0, #0]
 8018fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fc4:	4798      	blx	r3
 8018fc6:	463a      	mov	r2, r7
 8018fc8:	4631      	mov	r1, r6
 8018fca:	4603      	mov	r3, r0
 8018fcc:	4620      	mov	r0, r4
 8018fce:	f7ff ff8b 	bl	8018ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018fd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fd4:	9004      	str	r0, [sp, #16]
 8018fd6:	9307      	str	r3, [sp, #28]
 8018fd8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018fdc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018fe0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018fe4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018fe8:	4b0e      	ldr	r3, [pc, #56]	; (8019024 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018fea:	881b      	ldrh	r3, [r3, #0]
 8018fec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018ff0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018ff4:	f7ff fca4 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8018ff8:	6803      	ldr	r3, [r0, #0]
 8018ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ffc:	4798      	blx	r3
 8018ffe:	23ff      	movs	r3, #255	; 0xff
 8019000:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019004:	a903      	add	r1, sp, #12
 8019006:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801900a:	6860      	ldr	r0, [r4, #4]
 801900c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019010:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019014:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	4798      	blx	r3
 801901e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019020:	b00d      	add	sp, #52	; 0x34
 8019022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019024:	200155e2 	.word	0x200155e2

08019028 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801902c:	b08c      	sub	sp, #48	; 0x30
 801902e:	461e      	mov	r6, r3
 8019030:	2300      	movs	r3, #0
 8019032:	4604      	mov	r4, r0
 8019034:	466d      	mov	r5, sp
 8019036:	9306      	str	r3, [sp, #24]
 8019038:	6803      	ldr	r3, [r0, #0]
 801903a:	e885 0006 	stmia.w	r5, {r1, r2}
 801903e:	2501      	movs	r5, #1
 8019040:	f8bd 7000 	ldrh.w	r7, [sp]
 8019044:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8019048:	9503      	str	r5, [sp, #12]
 801904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801904c:	4798      	blx	r3
 801904e:	4642      	mov	r2, r8
 8019050:	4639      	mov	r1, r7
 8019052:	4603      	mov	r3, r0
 8019054:	4620      	mov	r0, r4
 8019056:	f7ff ff47 	bl	8018ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801905a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801905e:	9004      	str	r0, [sp, #16]
 8019060:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019064:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019068:	9607      	str	r6, [sp, #28]
 801906a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801906e:	4b10      	ldr	r3, [pc, #64]	; (80190b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8019070:	881b      	ldrh	r3, [r3, #0]
 8019072:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019078:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801907c:	f7ff fc60 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8019080:	6803      	ldr	r3, [r0, #0]
 8019082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019084:	4798      	blx	r3
 8019086:	23ff      	movs	r3, #255	; 0xff
 8019088:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801908c:	a903      	add	r1, sp, #12
 801908e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019092:	6860      	ldr	r0, [r4, #4]
 8019094:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019098:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801909c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80190a0:	6803      	ldr	r3, [r0, #0]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	4798      	blx	r3
 80190a6:	4630      	mov	r0, r6
 80190a8:	b00c      	add	sp, #48	; 0x30
 80190aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190ae:	bf00      	nop
 80190b0:	200155e2 	.word	0x200155e2

080190b4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80190b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190b6:	b085      	sub	sp, #20
 80190b8:	4605      	mov	r5, r0
 80190ba:	ac02      	add	r4, sp, #8
 80190bc:	e884 0006 	stmia.w	r4, {r1, r2}
 80190c0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80190c4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80190c8:	f7ff fde6 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80190cc:	4631      	mov	r1, r6
 80190ce:	4603      	mov	r3, r0
 80190d0:	463a      	mov	r2, r7
 80190d2:	4628      	mov	r0, r5
 80190d4:	f7ff ff08 	bl	8018ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80190d8:	4a05      	ldr	r2, [pc, #20]	; (80190f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80190da:	682b      	ldr	r3, [r5, #0]
 80190dc:	8812      	ldrh	r2, [r2, #0]
 80190de:	9200      	str	r2, [sp, #0]
 80190e0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80190e2:	4603      	mov	r3, r0
 80190e4:	4628      	mov	r0, r5
 80190e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80190ea:	47b0      	blx	r6
 80190ec:	b005      	add	sp, #20
 80190ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190f0:	200155e2 	.word	0x200155e2

080190f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80190f4:	b570      	push	{r4, r5, r6, lr}
 80190f6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80190fa:	4604      	mov	r4, r0
 80190fc:	b19b      	cbz	r3, 8019126 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80190fe:	2002      	movs	r0, #2
 8019100:	f7e8 fd86 	bl	8001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019104:	2300      	movs	r3, #0
 8019106:	4620      	mov	r0, r4
 8019108:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801910c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019110:	6823      	ldr	r3, [r4, #0]
 8019112:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8019116:	f7ff fdbf 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801911a:	4601      	mov	r1, r0
 801911c:	4620      	mov	r0, r4
 801911e:	462b      	mov	r3, r5
 8019120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019124:	4718      	bx	r3
 8019126:	bd70      	pop	{r4, r5, r6, pc}

08019128 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8019128:	b570      	push	{r4, r5, r6, lr}
 801912a:	4605      	mov	r5, r0
 801912c:	460c      	mov	r4, r1
 801912e:	2003      	movs	r0, #3
 8019130:	b149      	cbz	r1, 8019146 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8019132:	f7e8 fd0d 	bl	8001b50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019136:	6928      	ldr	r0, [r5, #16]
 8019138:	b168      	cbz	r0, 8019156 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801913a:	6803      	ldr	r3, [r0, #0]
 801913c:	2101      	movs	r1, #1
 801913e:	695b      	ldr	r3, [r3, #20]
 8019140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019144:	4718      	bx	r3
 8019146:	f7e8 fd33 	bl	8001bb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801914a:	6928      	ldr	r0, [r5, #16]
 801914c:	b118      	cbz	r0, 8019156 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	4621      	mov	r1, r4
 8019152:	695b      	ldr	r3, [r3, #20]
 8019154:	e7f4      	b.n	8019140 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019156:	bd70      	pop	{r4, r5, r6, pc}

08019158 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019158:	b538      	push	{r3, r4, r5, lr}
 801915a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801915e:	4604      	mov	r4, r0
 8019160:	460d      	mov	r5, r1
 8019162:	428b      	cmp	r3, r1
 8019164:	d006      	beq.n	8019174 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8019166:	6803      	ldr	r3, [r0, #0]
 8019168:	b929      	cbnz	r1, 8019176 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801916a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801916e:	4798      	blx	r3
 8019170:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019174:	bd38      	pop	{r3, r4, r5, pc}
 8019176:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801917a:	e7f8      	b.n	801916e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801917c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801917c:	4b0d      	ldr	r3, [pc, #52]	; (80191b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801917e:	b510      	push	{r4, lr}
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	4604      	mov	r4, r0
 8019184:	b95b      	cbnz	r3, 801919e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019186:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801918a:	2b02      	cmp	r3, #2
 801918c:	d007      	beq.n	801919e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801918e:	6840      	ldr	r0, [r0, #4]
 8019190:	f000 f912 	bl	80193b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019194:	b118      	cbz	r0, 801919e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019196:	6862      	ldr	r2, [r4, #4]
 8019198:	7a53      	ldrb	r3, [r2, #9]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d0fc      	beq.n	8019198 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801919e:	f7e8 fe87 	bl	8001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191a2:	4620      	mov	r0, r4
 80191a4:	2100      	movs	r1, #0
 80191a6:	f7ff ffd7 	bl	8019158 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80191aa:	4620      	mov	r0, r4
 80191ac:	f7ff fd74 	bl	8018c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191b0:	bd10      	pop	{r4, pc}
 80191b2:	bf00      	nop
 80191b4:	200155e6 	.word	0x200155e6

080191b8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80191b8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80191bc:	1a13      	subs	r3, r2, r0
 80191be:	4258      	negs	r0, r3
 80191c0:	4158      	adcs	r0, r3
 80191c2:	4770      	bx	lr

080191c4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80191c4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191c8:	1a9b      	subs	r3, r3, r2
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	bfdc      	itt	le
 80191ce:	6882      	ldrle	r2, [r0, #8]
 80191d0:	189b      	addle	r3, r3, r2
 80191d2:	2b01      	cmp	r3, #1
 80191d4:	bfcc      	ite	gt
 80191d6:	2000      	movgt	r0, #0
 80191d8:	2001      	movle	r0, #1
 80191da:	4770      	bx	lr

080191dc <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80191dc:	6902      	ldr	r2, [r0, #16]
 80191de:	6843      	ldr	r3, [r0, #4]
 80191e0:	2024      	movs	r0, #36	; 0x24
 80191e2:	fb00 3002 	mla	r0, r0, r2, r3
 80191e6:	4770      	bx	lr

080191e8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80191e8:	6803      	ldr	r3, [r0, #0]
 80191ea:	691b      	ldr	r3, [r3, #16]
 80191ec:	4718      	bx	r3

080191ee <_ZN8touchgfx13DMA_Interface7executeEv>:
 80191ee:	2301      	movs	r3, #1
 80191f0:	b570      	push	{r4, r5, r6, lr}
 80191f2:	7203      	strb	r3, [r0, #8]
 80191f4:	4604      	mov	r4, r0
 80191f6:	6840      	ldr	r0, [r0, #4]
 80191f8:	6803      	ldr	r3, [r0, #0]
 80191fa:	699b      	ldr	r3, [r3, #24]
 80191fc:	4798      	blx	r3
 80191fe:	6803      	ldr	r3, [r0, #0]
 8019200:	4605      	mov	r5, r0
 8019202:	2b40      	cmp	r3, #64	; 0x40
 8019204:	d00c      	beq.n	8019220 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019206:	d810      	bhi.n	801922a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019208:	2b04      	cmp	r3, #4
 801920a:	d01d      	beq.n	8019248 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801920c:	d804      	bhi.n	8019218 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801920e:	2b01      	cmp	r3, #1
 8019210:	d006      	beq.n	8019220 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019212:	2b02      	cmp	r3, #2
 8019214:	d02c      	beq.n	8019270 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019216:	bd70      	pop	{r4, r5, r6, pc}
 8019218:	2b08      	cmp	r3, #8
 801921a:	d01d      	beq.n	8019258 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801921c:	2b20      	cmp	r3, #32
 801921e:	d1fa      	bne.n	8019216 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8019220:	6823      	ldr	r3, [r4, #0]
 8019222:	4620      	mov	r0, r4
 8019224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019226:	4798      	blx	r3
 8019228:	e013      	b.n	8019252 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801922a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801922e:	d0f7      	beq.n	8019220 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019230:	d804      	bhi.n	801923c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8019232:	2b80      	cmp	r3, #128	; 0x80
 8019234:	d0f4      	beq.n	8019220 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801923a:	e7f0      	b.n	801921e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801923c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019240:	d0ee      	beq.n	8019220 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019246:	e7e5      	b.n	8019214 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019248:	6823      	ldr	r3, [r4, #0]
 801924a:	7f01      	ldrb	r1, [r0, #28]
 801924c:	4620      	mov	r0, r4
 801924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019250:	4798      	blx	r3
 8019252:	6823      	ldr	r3, [r4, #0]
 8019254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019256:	e006      	b.n	8019266 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019258:	6823      	ldr	r3, [r4, #0]
 801925a:	7f01      	ldrb	r1, [r0, #28]
 801925c:	4620      	mov	r0, r4
 801925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019260:	4798      	blx	r3
 8019262:	6823      	ldr	r3, [r4, #0]
 8019264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019266:	4629      	mov	r1, r5
 8019268:	4620      	mov	r0, r4
 801926a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801926e:	4718      	bx	r3
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	4620      	mov	r0, r4
 8019274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019276:	4798      	blx	r3
 8019278:	e7f3      	b.n	8019262 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801927a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801927a:	4770      	bx	lr

0801927c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801927c:	4770      	bx	lr

0801927e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801927e:	4770      	bx	lr

08019280 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019280:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8019284:	b510      	push	{r4, lr}
 8019286:	1ad2      	subs	r2, r2, r3
 8019288:	2a00      	cmp	r2, #0
 801928a:	bfdc      	itt	le
 801928c:	6884      	ldrle	r4, [r0, #8]
 801928e:	1912      	addle	r2, r2, r4
 8019290:	2a01      	cmp	r2, #1
 8019292:	dd16      	ble.n	80192c2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8019294:	6842      	ldr	r2, [r0, #4]
 8019296:	2424      	movs	r4, #36	; 0x24
 8019298:	fb04 2303 	mla	r3, r4, r3, r2
 801929c:	f101 0220 	add.w	r2, r1, #32
 80192a0:	f851 4b04 	ldr.w	r4, [r1], #4
 80192a4:	4291      	cmp	r1, r2
 80192a6:	f843 4b04 	str.w	r4, [r3], #4
 80192aa:	d1f9      	bne.n	80192a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80192ac:	780a      	ldrb	r2, [r1, #0]
 80192ae:	701a      	strb	r2, [r3, #0]
 80192b0:	68c3      	ldr	r3, [r0, #12]
 80192b2:	6882      	ldr	r2, [r0, #8]
 80192b4:	f3bf 8f5b 	dmb	ish
 80192b8:	3301      	adds	r3, #1
 80192ba:	429a      	cmp	r2, r3
 80192bc:	bfd8      	it	le
 80192be:	1a9b      	suble	r3, r3, r2
 80192c0:	60c3      	str	r3, [r0, #12]
 80192c2:	bd10      	pop	{r4, pc}

080192c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80192c4:	6903      	ldr	r3, [r0, #16]
 80192c6:	6882      	ldr	r2, [r0, #8]
 80192c8:	f3bf 8f5b 	dmb	ish
 80192cc:	3301      	adds	r3, #1
 80192ce:	429a      	cmp	r2, r3
 80192d0:	bfd8      	it	le
 80192d2:	1a9b      	suble	r3, r3, r2
 80192d4:	6103      	str	r3, [r0, #16]
 80192d6:	4770      	bx	lr

080192d8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80192d8:	b570      	push	{r4, r5, r6, lr}
 80192da:	4604      	mov	r4, r0
 80192dc:	460e      	mov	r6, r1
 80192de:	6860      	ldr	r0, [r4, #4]
 80192e0:	6803      	ldr	r3, [r0, #0]
 80192e2:	685b      	ldr	r3, [r3, #4]
 80192e4:	4798      	blx	r3
 80192e6:	2800      	cmp	r0, #0
 80192e8:	d1f9      	bne.n	80192de <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80192ea:	4d0d      	ldr	r5, [pc, #52]	; (8019320 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80192ec:	6828      	ldr	r0, [r5, #0]
 80192ee:	6803      	ldr	r3, [r0, #0]
 80192f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80192f2:	4798      	blx	r3
 80192f4:	f7e8 fdea 	bl	8001ecc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80192f8:	6828      	ldr	r0, [r5, #0]
 80192fa:	2101      	movs	r1, #1
 80192fc:	f7ff ff2c 	bl	8019158 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019300:	6860      	ldr	r0, [r4, #4]
 8019302:	4631      	mov	r1, r6
 8019304:	6803      	ldr	r3, [r0, #0]
 8019306:	689b      	ldr	r3, [r3, #8]
 8019308:	4798      	blx	r3
 801930a:	6823      	ldr	r3, [r4, #0]
 801930c:	4620      	mov	r0, r4
 801930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019310:	4798      	blx	r3
 8019312:	6828      	ldr	r0, [r5, #0]
 8019314:	6803      	ldr	r3, [r0, #0]
 8019316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801931a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801931c:	4718      	bx	r3
 801931e:	bf00      	nop
 8019320:	200155e8 	.word	0x200155e8

08019324 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019324:	b508      	push	{r3, lr}
 8019326:	f7e8 fdc3 	bl	8001eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801932a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801932e:	f7e8 bdc7 	b.w	8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019332 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8019332:	b510      	push	{r4, lr}
 8019334:	4604      	mov	r4, r0
 8019336:	2114      	movs	r1, #20
 8019338:	f011 fa44 	bl	802a7c4 <_ZdlPvj>
 801933c:	4620      	mov	r0, r4
 801933e:	bd10      	pop	{r4, pc}

08019340 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019340:	b510      	push	{r4, lr}
 8019342:	4604      	mov	r4, r0
 8019344:	6840      	ldr	r0, [r0, #4]
 8019346:	6803      	ldr	r3, [r0, #0]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	4798      	blx	r3
 801934c:	b948      	cbnz	r0, 8019362 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801934e:	7a63      	ldrb	r3, [r4, #9]
 8019350:	b13b      	cbz	r3, 8019362 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019352:	7a23      	ldrb	r3, [r4, #8]
 8019354:	b92b      	cbnz	r3, 8019362 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019356:	6823      	ldr	r3, [r4, #0]
 8019358:	4620      	mov	r0, r4
 801935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801935c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019360:	4718      	bx	r3
 8019362:	bd10      	pop	{r4, pc}

08019364 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019364:	b570      	push	{r4, r5, r6, lr}
 8019366:	4604      	mov	r4, r0
 8019368:	6840      	ldr	r0, [r0, #4]
 801936a:	6803      	ldr	r3, [r0, #0]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	4798      	blx	r3
 8019370:	4605      	mov	r5, r0
 8019372:	b930      	cbnz	r0, 8019382 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019374:	7a23      	ldrb	r3, [r4, #8]
 8019376:	b123      	cbz	r3, 8019382 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019378:	6860      	ldr	r0, [r4, #4]
 801937a:	6803      	ldr	r3, [r0, #0]
 801937c:	695b      	ldr	r3, [r3, #20]
 801937e:	4798      	blx	r3
 8019380:	7225      	strb	r5, [r4, #8]
 8019382:	6860      	ldr	r0, [r4, #4]
 8019384:	6803      	ldr	r3, [r0, #0]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	4798      	blx	r3
 801938a:	b928      	cbnz	r0, 8019398 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801938c:	6823      	ldr	r3, [r4, #0]
 801938e:	4620      	mov	r0, r4
 8019390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019396:	4718      	bx	r3
 8019398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801939c:	f7e8 bd9e 	b.w	8001edc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080193a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80193a0:	b510      	push	{r4, lr}
 80193a2:	6082      	str	r2, [r0, #8]
 80193a4:	2200      	movs	r2, #0
 80193a6:	4c03      	ldr	r4, [pc, #12]	; (80193b4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80193a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80193ac:	e9c0 4100 	strd	r4, r1, [r0]
 80193b0:	bd10      	pop	{r4, pc}
 80193b2:	bf00      	nop
 80193b4:	08030acc 	.word	0x08030acc

080193b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80193b8:	6840      	ldr	r0, [r0, #4]
 80193ba:	6803      	ldr	r3, [r0, #0]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	4718      	bx	r3

080193c0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80193c0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80193c4:	4770      	bx	lr

080193c6 <_ZN8touchgfx12ToggleButtonD1Ev>:
 80193c6:	4770      	bx	lr

080193c8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80193c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80193cc:	b133      	cbz	r3, 80193dc <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80193ce:	790b      	ldrb	r3, [r1, #4]
 80193d0:	2b01      	cmp	r3, #1
 80193d2:	bf01      	itttt	eq
 80193d4:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 80193d6:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80193d8:	8603      	strheq	r3, [r0, #48]	; 0x30
 80193da:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80193dc:	f011 b9ce 	b.w	802a77c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080193e0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 80193e0:	8813      	ldrh	r3, [r2, #0]
 80193e2:	8683      	strh	r3, [r0, #52]	; 0x34
 80193e4:	f000 bbfd 	b.w	8019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

080193e8 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80193e8:	b510      	push	{r4, lr}
 80193ea:	4604      	mov	r4, r0
 80193ec:	2138      	movs	r1, #56	; 0x38
 80193ee:	f011 f9e9 	bl	802a7c4 <_ZdlPvj>
 80193f2:	4620      	mov	r0, r4
 80193f4:	bd10      	pop	{r4, pc}

080193f6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80193f6:	b510      	push	{r4, lr}
 80193f8:	4604      	mov	r4, r0
 80193fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80193fc:	b150      	cbz	r0, 8019414 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80193fe:	6803      	ldr	r3, [r0, #0]
 8019400:	68db      	ldr	r3, [r3, #12]
 8019402:	4798      	blx	r3
 8019404:	b130      	cbz	r0, 8019414 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019406:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019408:	4621      	mov	r1, r4
 801940a:	6803      	ldr	r3, [r0, #0]
 801940c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019410:	689b      	ldr	r3, [r3, #8]
 8019412:	4718      	bx	r3
 8019414:	bd10      	pop	{r4, pc}

08019416 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8019416:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 801941a:	b12a      	cbz	r2, 8019428 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801941c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019420:	b112      	cbz	r2, 8019428 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019422:	6803      	ldr	r3, [r0, #0]
 8019424:	695b      	ldr	r3, [r3, #20]
 8019426:	4718      	bx	r3
 8019428:	4770      	bx	lr

0801942a <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801942a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 801942c:	b129      	cbz	r1, 801943a <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 801942e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8019430:	429a      	cmp	r2, r3
 8019432:	d007      	beq.n	8019444 <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 8019434:	8602      	strh	r2, [r0, #48]	; 0x30
 8019436:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019438:	4770      	bx	lr
 801943a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801943c:	429a      	cmp	r2, r3
 801943e:	bf1c      	itt	ne
 8019440:	85c2      	strhne	r2, [r0, #46]	; 0x2e
 8019442:	8603      	strhne	r3, [r0, #48]	; 0x30
 8019444:	4770      	bx	lr

08019446 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8019446:	2000      	movs	r0, #0
 8019448:	4770      	bx	lr
	...

0801944c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801944c:	4b07      	ldr	r3, [pc, #28]	; (801946c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801944e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019450:	881b      	ldrh	r3, [r3, #0]
 8019452:	4293      	cmp	r3, r2
 8019454:	bf81      	itttt	hi
 8019456:	4b06      	ldrhi	r3, [pc, #24]	; (8019470 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8019458:	681b      	ldrhi	r3, [r3, #0]
 801945a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801945e:	7858      	ldrbhi	r0, [r3, #1]
 8019460:	bf8c      	ite	hi
 8019462:	f000 0003 	andhi.w	r0, r0, #3
 8019466:	2000      	movls	r0, #0
 8019468:	4770      	bx	lr
 801946a:	bf00      	nop
 801946c:	2001563c 	.word	0x2001563c
 8019470:	20015638 	.word	0x20015638

08019474 <_ZN8touchgfx8TextAreaD1Ev>:
 8019474:	4770      	bx	lr
	...

08019478 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8019478:	4b11      	ldr	r3, [pc, #68]	; (80194c0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801947a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801947e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019480:	4604      	mov	r4, r0
 8019482:	881b      	ldrh	r3, [r3, #0]
 8019484:	428b      	cmp	r3, r1
 8019486:	d918      	bls.n	80194ba <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8019488:	6803      	ldr	r3, [r0, #0]
 801948a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801948c:	4b0d      	ldr	r3, [pc, #52]	; (80194c4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801948e:	6818      	ldr	r0, [r3, #0]
 8019490:	f7eb ff14 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019494:	6823      	ldr	r3, [r4, #0]
 8019496:	4606      	mov	r6, r0
 8019498:	4620      	mov	r0, r4
 801949a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801949c:	4798      	blx	r3
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	4607      	mov	r7, r0
 80194a2:	4620      	mov	r0, r4
 80194a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80194a8:	4798      	blx	r3
 80194aa:	463a      	mov	r2, r7
 80194ac:	4603      	mov	r3, r0
 80194ae:	4631      	mov	r1, r6
 80194b0:	4620      	mov	r0, r4
 80194b2:	46ac      	mov	ip, r5
 80194b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194b8:	4760      	bx	ip
 80194ba:	2000      	movs	r0, #0
 80194bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c0:	2001563c 	.word	0x2001563c
 80194c4:	20015644 	.word	0x20015644

080194c8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80194c8:	4b18      	ldr	r3, [pc, #96]	; (801952c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80194ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80194ce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80194d0:	4604      	mov	r4, r0
 80194d2:	881b      	ldrh	r3, [r3, #0]
 80194d4:	428b      	cmp	r3, r1
 80194d6:	d926      	bls.n	8019526 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80194d8:	4b15      	ldr	r3, [pc, #84]	; (8019530 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80194e0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80194e4:	4b13      	ldr	r3, [pc, #76]	; (8019534 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80194e6:	7855      	ldrb	r5, [r2, #1]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80194ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80194f2:	6833      	ldr	r3, [r6, #0]
 80194f4:	69df      	ldr	r7, [r3, #28]
 80194f6:	4b10      	ldr	r3, [pc, #64]	; (8019538 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80194f8:	6818      	ldr	r0, [r3, #0]
 80194fa:	f7eb fedf 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	4680      	mov	r8, r0
 8019502:	4620      	mov	r0, r4
 8019504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019506:	4798      	blx	r3
 8019508:	6823      	ldr	r3, [r4, #0]
 801950a:	4681      	mov	r9, r0
 801950c:	4620      	mov	r0, r4
 801950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019512:	4798      	blx	r3
 8019514:	464b      	mov	r3, r9
 8019516:	9000      	str	r0, [sp, #0]
 8019518:	4642      	mov	r2, r8
 801951a:	4629      	mov	r1, r5
 801951c:	4630      	mov	r0, r6
 801951e:	47b8      	blx	r7
 8019520:	b003      	add	sp, #12
 8019522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019526:	2000      	movs	r0, #0
 8019528:	e7fa      	b.n	8019520 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801952a:	bf00      	nop
 801952c:	2001563c 	.word	0x2001563c
 8019530:	20015638 	.word	0x20015638
 8019534:	20015640 	.word	0x20015640
 8019538:	20015644 	.word	0x20015644

0801953c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801953c:	b40e      	push	{r1, r2, r3}
 801953e:	4b30      	ldr	r3, [pc, #192]	; (8019600 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8019540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019544:	881a      	ldrh	r2, [r3, #0]
 8019546:	b09d      	sub	sp, #116	; 0x74
 8019548:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801954a:	4604      	mov	r4, r0
 801954c:	429a      	cmp	r2, r3
 801954e:	d954      	bls.n	80195fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8019550:	aa26      	add	r2, sp, #152	; 0x98
 8019552:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8019604 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8019556:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8019608 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801955a:	9202      	str	r2, [sp, #8]
 801955c:	f8d9 2000 	ldr.w	r2, [r9]
 8019560:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019564:	f8d8 3000 	ldr.w	r3, [r8]
 8019568:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801956c:	682b      	ldr	r3, [r5, #0]
 801956e:	4628      	mov	r0, r5
 8019570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019572:	4798      	blx	r3
 8019574:	4606      	mov	r6, r0
 8019576:	b207      	sxth	r7, r0
 8019578:	a803      	add	r0, sp, #12
 801957a:	f003 ff8f 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801957e:	682b      	ldr	r3, [r5, #0]
 8019580:	4628      	mov	r0, r5
 8019582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019584:	4798      	blx	r3
 8019586:	682b      	ldr	r3, [r5, #0]
 8019588:	4682      	mov	sl, r0
 801958a:	4628      	mov	r0, r5
 801958c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801958e:	4798      	blx	r3
 8019590:	4653      	mov	r3, sl
 8019592:	9000      	str	r0, [sp, #0]
 8019594:	a803      	add	r0, sp, #12
 8019596:	9a02      	ldr	r2, [sp, #8]
 8019598:	9925      	ldr	r1, [sp, #148]	; 0x94
 801959a:	f003 ffda 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801959e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80195a0:	f8d9 3000 	ldr.w	r3, [r9]
 80195a4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80195a8:	8925      	ldrh	r5, [r4, #8]
 80195aa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80195ae:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80195b2:	eba5 050c 	sub.w	r5, r5, ip
 80195b6:	784a      	ldrb	r2, [r1, #1]
 80195b8:	f8d8 3000 	ldr.w	r3, [r8]
 80195bc:	b22d      	sxth	r5, r5
 80195be:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80195c2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80195c6:	9500      	str	r5, [sp, #0]
 80195c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80195cc:	a803      	add	r0, sp, #12
 80195ce:	f001 fe8a 	bl	801b2e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80195d2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80195d6:	b203      	sxth	r3, r0
 80195d8:	18b9      	adds	r1, r7, r2
 80195da:	2900      	cmp	r1, #0
 80195dc:	dd0b      	ble.n	80195f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80195de:	3b01      	subs	r3, #1
 80195e0:	fb13 f302 	smulbb	r3, r3, r2
 80195e4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80195e8:	b21f      	sxth	r7, r3
 80195ea:	4638      	mov	r0, r7
 80195ec:	b01d      	add	sp, #116	; 0x74
 80195ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f2:	b003      	add	sp, #12
 80195f4:	4770      	bx	lr
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	dcf7      	bgt.n	80195ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80195fa:	2700      	movs	r7, #0
 80195fc:	e7f5      	b.n	80195ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80195fe:	bf00      	nop
 8019600:	2001563c 	.word	0x2001563c
 8019604:	20015638 	.word	0x20015638
 8019608:	20015640 	.word	0x20015640

0801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801960c:	4bbc      	ldr	r3, [pc, #752]	; (8019900 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 801960e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019612:	460c      	mov	r4, r1
 8019614:	881b      	ldrh	r3, [r3, #0]
 8019616:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8019618:	b0a9      	sub	sp, #164	; 0xa4
 801961a:	4681      	mov	r9, r0
 801961c:	428b      	cmp	r3, r1
 801961e:	d809      	bhi.n	8019634 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8019620:	2300      	movs	r3, #0
 8019622:	f04f 32ff 	mov.w	r2, #4294967295
 8019626:	6083      	str	r3, [r0, #8]
 8019628:	e9c0 3200 	strd	r3, r2, [r0]
 801962c:	4648      	mov	r0, r9
 801962e:	b029      	add	sp, #164	; 0xa4
 8019630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019634:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8019908 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8019638:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801963c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801990c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8019640:	f8db 3000 	ldr.w	r3, [fp]
 8019644:	f8d8 0000 	ldr.w	r0, [r8]
 8019648:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801964c:	4bad      	ldr	r3, [pc, #692]	; (8019904 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019654:	f7eb fe32 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019658:	4607      	mov	r7, r0
 801965a:	682b      	ldr	r3, [r5, #0]
 801965c:	4628      	mov	r0, r5
 801965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019660:	4798      	blx	r3
 8019662:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8019664:	f8cd 800c 	str.w	r8, [sp, #12]
 8019668:	4430      	add	r0, r6
 801966a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801966e:	b283      	uxth	r3, r0
 8019670:	4650      	mov	r0, sl
 8019672:	9302      	str	r3, [sp, #8]
 8019674:	2e00      	cmp	r6, #0
 8019676:	f040 8090 	bne.w	801979a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801967a:	f003 ff0f 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801967e:	682b      	ldr	r3, [r5, #0]
 8019680:	4628      	mov	r0, r5
 8019682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019684:	4798      	blx	r3
 8019686:	682b      	ldr	r3, [r5, #0]
 8019688:	9005      	str	r0, [sp, #20]
 801968a:	4628      	mov	r0, r5
 801968c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801968e:	4798      	blx	r3
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	4680      	mov	r8, r0
 8019694:	4620      	mov	r0, r4
 8019696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019698:	4798      	blx	r3
 801969a:	6822      	ldr	r2, [r4, #0]
 801969c:	9004      	str	r0, [sp, #16]
 801969e:	4620      	mov	r0, r4
 80196a0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80196a4:	4790      	blx	r2
 80196a6:	9905      	ldr	r1, [sp, #20]
 80196a8:	9b04      	ldr	r3, [sp, #16]
 80196aa:	460a      	mov	r2, r1
 80196ac:	4639      	mov	r1, r7
 80196ae:	4637      	mov	r7, r6
 80196b0:	9001      	str	r0, [sp, #4]
 80196b2:	9300      	str	r3, [sp, #0]
 80196b4:	4650      	mov	r0, sl
 80196b6:	4643      	mov	r3, r8
 80196b8:	f003 ff60 	bl	801d57c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80196bc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80196be:	4629      	mov	r1, r5
 80196c0:	f8db 3000 	ldr.w	r3, [fp]
 80196c4:	4650      	mov	r0, sl
 80196c6:	3601      	adds	r6, #1
 80196c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80196cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80196d0:	b2b6      	uxth	r6, r6
 80196d2:	785b      	ldrb	r3, [r3, #1]
 80196d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80196d8:	f001 fb56 	bl	801ad88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80196dc:	4287      	cmp	r7, r0
 80196de:	bfb8      	it	lt
 80196e0:	b207      	sxthlt	r7, r0
 80196e2:	4650      	mov	r0, sl
 80196e4:	f003 ff01 	bl	801d4ea <_ZN8touchgfx12TextProvider11endOfStringEv>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d0e7      	beq.n	80196bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80196ec:	9b02      	ldr	r3, [sp, #8]
 80196ee:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80196f2:	fb13 f606 	smulbb	r6, r3, r6
 80196f6:	eba6 0608 	sub.w	r6, r6, r8
 80196fa:	b2b6      	uxth	r6, r6
 80196fc:	fa0f f886 	sxth.w	r8, r6
 8019700:	f1b8 0f00 	cmp.w	r8, #0
 8019704:	dd06      	ble.n	8019714 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8019706:	682b      	ldr	r3, [r5, #0]
 8019708:	4628      	mov	r0, r5
 801970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801970c:	4798      	blx	r3
 801970e:	4430      	add	r0, r6
 8019710:	fa0f f880 	sxth.w	r8, r0
 8019714:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019718:	4620      	mov	r0, r4
 801971a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801971e:	6823      	ldr	r3, [r4, #0]
 8019720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019722:	bf0c      	ite	eq
 8019724:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8019728:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801972c:	4798      	blx	r3
 801972e:	2801      	cmp	r0, #1
 8019730:	b2ba      	uxth	r2, r7
 8019732:	f000 80d2 	beq.w	80198da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8019736:	2802      	cmp	r0, #2
 8019738:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801973c:	f000 80d3 	beq.w	80198e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8019740:	b21e      	sxth	r6, r3
 8019742:	7a29      	ldrb	r1, [r5, #8]
 8019744:	7a6d      	ldrb	r5, [r5, #9]
 8019746:	1a76      	subs	r6, r6, r1
 8019748:	4429      	add	r1, r5
 801974a:	b2b3      	uxth	r3, r6
 801974c:	440a      	add	r2, r1
 801974e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8019752:	b21f      	sxth	r7, r3
 8019754:	b292      	uxth	r2, r2
 8019756:	2902      	cmp	r1, #2
 8019758:	b216      	sxth	r6, r2
 801975a:	f000 80c7 	beq.w	80198ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801975e:	2903      	cmp	r1, #3
 8019760:	f000 80d6 	beq.w	8019910 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8019764:	2901      	cmp	r1, #1
 8019766:	f040 80dc 	bne.w	8019922 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801976a:	8923      	ldrh	r3, [r4, #8]
 801976c:	4632      	mov	r2, r6
 801976e:	463d      	mov	r5, r7
 8019770:	4646      	mov	r6, r8
 8019772:	eba3 0308 	sub.w	r3, r3, r8
 8019776:	4690      	mov	r8, r2
 8019778:	b21f      	sxth	r7, r3
 801977a:	9b03      	ldr	r3, [sp, #12]
 801977c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801977e:	6818      	ldr	r0, [r3, #0]
 8019780:	f7eb fd9c 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019784:	f8a9 7000 	strh.w	r7, [r9]
 8019788:	f8a9 5002 	strh.w	r5, [r9, #2]
 801978c:	f8a9 6004 	strh.w	r6, [r9, #4]
 8019790:	f8a9 8006 	strh.w	r8, [r9, #6]
 8019794:	f8c9 0008 	str.w	r0, [r9, #8]
 8019798:	e748      	b.n	801962c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801979a:	f003 fe7f 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801979e:	682b      	ldr	r3, [r5, #0]
 80197a0:	4628      	mov	r0, r5
 80197a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197a4:	4798      	blx	r3
 80197a6:	682b      	ldr	r3, [r5, #0]
 80197a8:	4606      	mov	r6, r0
 80197aa:	4628      	mov	r0, r5
 80197ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197ae:	4798      	blx	r3
 80197b0:	6823      	ldr	r3, [r4, #0]
 80197b2:	4680      	mov	r8, r0
 80197b4:	4620      	mov	r0, r4
 80197b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80197b8:	4798      	blx	r3
 80197ba:	6822      	ldr	r2, [r4, #0]
 80197bc:	9004      	str	r0, [sp, #16]
 80197be:	4620      	mov	r0, r4
 80197c0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80197c4:	4790      	blx	r2
 80197c6:	9b04      	ldr	r3, [sp, #16]
 80197c8:	4632      	mov	r2, r6
 80197ca:	9001      	str	r0, [sp, #4]
 80197cc:	9300      	str	r3, [sp, #0]
 80197ce:	4639      	mov	r1, r7
 80197d0:	4643      	mov	r3, r8
 80197d2:	4650      	mov	r0, sl
 80197d4:	f003 fed2 	bl	801d57c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80197d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80197dc:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80197e0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80197e4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80197e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80197ea:	bf0a      	itet	eq
 80197ec:	4642      	moveq	r2, r8
 80197ee:	461a      	movne	r2, r3
 80197f0:	4698      	moveq	r8, r3
 80197f2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80197f6:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80197fa:	1ad2      	subs	r2, r2, r3
 80197fc:	f8db 3000 	ldr.w	r3, [fp]
 8019800:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019804:	7859      	ldrb	r1, [r3, #1]
 8019806:	2300      	movs	r3, #0
 8019808:	f8cd a020 	str.w	sl, [sp, #32]
 801980c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8019810:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019814:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019818:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801981c:	950a      	str	r5, [sp, #40]	; 0x28
 801981e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019822:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019826:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801982a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801982e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019832:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019836:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801983a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801983e:	b350      	cbz	r0, 8019896 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8019840:	682b      	ldr	r3, [r5, #0]
 8019842:	4628      	mov	r0, r5
 8019844:	695b      	ldr	r3, [r3, #20]
 8019846:	4798      	blx	r3
 8019848:	4607      	mov	r7, r0
 801984a:	b320      	cbz	r0, 8019896 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801984c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801984e:	4639      	mov	r1, r7
 8019850:	6803      	ldr	r3, [r0, #0]
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	4798      	blx	r3
 8019856:	4606      	mov	r6, r0
 8019858:	b1e8      	cbz	r0, 8019896 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801985a:	7b43      	ldrb	r3, [r0, #13]
 801985c:	7a82      	ldrb	r2, [r0, #10]
 801985e:	005b      	lsls	r3, r3, #1
 8019860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019864:	4313      	orrs	r3, r2
 8019866:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801986a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801986e:	2b04      	cmp	r3, #4
 8019870:	d111      	bne.n	8019896 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8019872:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019874:	4632      	mov	r2, r6
 8019876:	4639      	mov	r1, r7
 8019878:	6803      	ldr	r3, [r0, #0]
 801987a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801987c:	4798      	blx	r3
 801987e:	7b73      	ldrb	r3, [r6, #13]
 8019880:	005b      	lsls	r3, r3, #1
 8019882:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019886:	7ab3      	ldrb	r3, [r6, #10]
 8019888:	4313      	orrs	r3, r2
 801988a:	4418      	add	r0, r3
 801988c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019890:	4418      	add	r0, r3
 8019892:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8019896:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801989a:	2600      	movs	r6, #0
 801989c:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80198a0:	4637      	mov	r7, r6
 80198a2:	45c3      	cmp	fp, r8
 80198a4:	a807      	add	r0, sp, #28
 80198a6:	f106 0601 	add.w	r6, r6, #1
 80198aa:	bfd4      	ite	le
 80198ac:	2100      	movle	r1, #0
 80198ae:	2101      	movgt	r1, #1
 80198b0:	f001 fc4a 	bl	801b148 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80198b4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80198b8:	b2b6      	uxth	r6, r6
 80198ba:	429f      	cmp	r7, r3
 80198bc:	bfb8      	it	lt
 80198be:	b21f      	sxthlt	r7, r3
 80198c0:	9b02      	ldr	r3, [sp, #8]
 80198c2:	eba8 0803 	sub.w	r8, r8, r3
 80198c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80198ca:	fa0f f888 	sxth.w	r8, r8
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f43f af0c 	beq.w	80196ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80198d4:	45c2      	cmp	sl, r8
 80198d6:	dbe4      	blt.n	80198a2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80198d8:	e708      	b.n	80196ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80198da:	1bf6      	subs	r6, r6, r7
 80198dc:	2702      	movs	r7, #2
 80198de:	fb96 f6f7 	sdiv	r6, r6, r7
 80198e2:	b236      	sxth	r6, r6
 80198e4:	e72d      	b.n	8019742 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80198e6:	4413      	add	r3, r2
 80198e8:	1af6      	subs	r6, r6, r3
 80198ea:	e7fa      	b.n	80198e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80198ec:	8925      	ldrh	r5, [r4, #8]
 80198ee:	1aad      	subs	r5, r5, r2
 80198f0:	1aed      	subs	r5, r5, r3
 80198f2:	b22f      	sxth	r7, r5
 80198f4:	8965      	ldrh	r5, [r4, #10]
 80198f6:	eba5 0508 	sub.w	r5, r5, r8
 80198fa:	b22d      	sxth	r5, r5
 80198fc:	e73d      	b.n	801977a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80198fe:	bf00      	nop
 8019900:	2001563c 	.word	0x2001563c
 8019904:	20015640 	.word	0x20015640
 8019908:	20015638 	.word	0x20015638
 801990c:	20015644 	.word	0x20015644
 8019910:	8965      	ldrh	r5, [r4, #10]
 8019912:	2700      	movs	r7, #0
 8019914:	1aad      	subs	r5, r5, r2
 8019916:	1aed      	subs	r5, r5, r3
 8019918:	4633      	mov	r3, r6
 801991a:	4646      	mov	r6, r8
 801991c:	b22d      	sxth	r5, r5
 801991e:	4698      	mov	r8, r3
 8019920:	e72b      	b.n	801977a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8019922:	2500      	movs	r5, #0
 8019924:	e729      	b.n	801977a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8019926:	bf00      	nop

08019928 <_ZN8touchgfx8TextAreaD0Ev>:
 8019928:	b510      	push	{r4, lr}
 801992a:	4604      	mov	r4, r0
 801992c:	2148      	movs	r1, #72	; 0x48
 801992e:	f010 ff49 	bl	802a7c4 <_ZdlPvj>
 8019932:	4620      	mov	r0, r4
 8019934:	bd10      	pop	{r4, pc}
	...

08019938 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8019938:	b513      	push	{r0, r1, r4, lr}
 801993a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801993e:	4604      	mov	r4, r0
 8019940:	b1fb      	cbz	r3, 8019982 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019942:	4b16      	ldr	r3, [pc, #88]	; (801999c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8019944:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019946:	881b      	ldrh	r3, [r3, #0]
 8019948:	428b      	cmp	r3, r1
 801994a:	d91a      	bls.n	8019982 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801994c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019950:	2b00      	cmp	r3, #0
 8019952:	dd16      	ble.n	8019982 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019954:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019958:	2b00      	cmp	r3, #0
 801995a:	dd12      	ble.n	8019982 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801995c:	4b10      	ldr	r3, [pc, #64]	; (80199a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801995e:	6818      	ldr	r0, [r3, #0]
 8019960:	f7eb fcac 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019964:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019968:	6822      	ldr	r2, [r4, #0]
 801996a:	2b00      	cmp	r3, #0
 801996c:	db06      	blt.n	801997c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801996e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019972:	2b00      	cmp	r3, #0
 8019974:	db02      	blt.n	801997c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8019976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019978:	4298      	cmp	r0, r3
 801997a:	d004      	beq.n	8019986 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801997c:	6953      	ldr	r3, [r2, #20]
 801997e:	4620      	mov	r0, r4
 8019980:	4798      	blx	r3
 8019982:	b002      	add	sp, #8
 8019984:	bd10      	pop	{r4, pc}
 8019986:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801998a:	466b      	mov	r3, sp
 801998c:	6912      	ldr	r2, [r2, #16]
 801998e:	c903      	ldmia	r1, {r0, r1}
 8019990:	e883 0003 	stmia.w	r3, {r0, r1}
 8019994:	4619      	mov	r1, r3
 8019996:	4620      	mov	r0, r4
 8019998:	4790      	blx	r2
 801999a:	e7f2      	b.n	8019982 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801999c:	2001563c 	.word	0x2001563c
 80199a0:	20015644 	.word	0x20015644

080199a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80199a4:	4b45      	ldr	r3, [pc, #276]	; (8019abc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80199a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199aa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80199ac:	b08e      	sub	sp, #56	; 0x38
 80199ae:	881b      	ldrh	r3, [r3, #0]
 80199b0:	4604      	mov	r4, r0
 80199b2:	4293      	cmp	r3, r2
 80199b4:	d97e      	bls.n	8019ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80199b6:	6808      	ldr	r0, [r1, #0]
 80199b8:	ab05      	add	r3, sp, #20
 80199ba:	6849      	ldr	r1, [r1, #4]
 80199bc:	4d40      	ldr	r5, [pc, #256]	; (8019ac0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80199be:	c303      	stmia	r3!, {r0, r1}
 80199c0:	4611      	mov	r1, r2
 80199c2:	6828      	ldr	r0, [r5, #0]
 80199c4:	f7eb fc7a 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 80199c8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	db11      	blt.n	80199f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199d0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	db0d      	blt.n	80199f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80199da:	4298      	cmp	r0, r3
 80199dc:	d10a      	bne.n	80199f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199de:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80199e2:	ab09      	add	r3, sp, #36	; 0x24
 80199e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80199e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80199ec:	4619      	mov	r1, r3
 80199ee:	a805      	add	r0, sp, #20
 80199f0:	f7fe fcca 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 80199f4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	dd5b      	ble.n	8019ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80199fc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	dd57      	ble.n	8019ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019a04:	4f2f      	ldr	r7, [pc, #188]	; (8019ac4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8019a06:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019a0e:	4b2e      	ldr	r3, [pc, #184]	; (8019ac8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019a16:	2e00      	cmp	r6, #0
 8019a18:	d04c      	beq.n	8019ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019a1a:	6823      	ldr	r3, [r4, #0]
 8019a1c:	4620      	mov	r0, r4
 8019a1e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8019a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a24:	4798      	blx	r3
 8019a26:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8019a2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019a32:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8019a36:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8019a3a:	785b      	ldrb	r3, [r3, #1]
 8019a3c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8019a40:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019a44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019a46:	9609      	str	r6, [sp, #36]	; 0x24
 8019a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a4c:	4b1f      	ldr	r3, [pc, #124]	; (8019acc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8019a4e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8019a58:	910b      	str	r1, [sp, #44]	; 0x2c
 8019a5a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8019a5e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8019a62:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8019a66:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019a6a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019a6e:	b10a      	cbz	r2, 8019a74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8019a70:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8019a72:	b906      	cbnz	r6, 8019a76 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8019a74:	689e      	ldr	r6, [r3, #8]
 8019a76:	af07      	add	r7, sp, #28
 8019a78:	4621      	mov	r1, r4
 8019a7a:	4638      	mov	r0, r7
 8019a7c:	f003 f956 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a80:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019a82:	6828      	ldr	r0, [r5, #0]
 8019a84:	f7eb fc1a 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	4605      	mov	r5, r0
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a90:	4798      	blx	r3
 8019a92:	6823      	ldr	r3, [r4, #0]
 8019a94:	4680      	mov	r8, r0
 8019a96:	4620      	mov	r0, r4
 8019a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019a9c:	4798      	blx	r3
 8019a9e:	ab09      	add	r3, sp, #36	; 0x24
 8019aa0:	9501      	str	r5, [sp, #4]
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	ab05      	add	r3, sp, #20
 8019aa6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8019aaa:	4630      	mov	r0, r6
 8019aac:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019ab0:	f7eb fbb6 	bl	8005220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019ab4:	b00e      	add	sp, #56	; 0x38
 8019ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aba:	bf00      	nop
 8019abc:	2001563c 	.word	0x2001563c
 8019ac0:	20015644 	.word	0x20015644
 8019ac4:	20015638 	.word	0x20015638
 8019ac8:	20015640 	.word	0x20015640
 8019acc:	200155e8 	.word	0x200155e8

08019ad0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8019ad0:	b570      	push	{r4, r5, r6, lr}
 8019ad2:	6803      	ldr	r3, [r0, #0]
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	4615      	mov	r5, r2
 8019ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ada:	4798      	blx	r3
 8019adc:	6823      	ldr	r3, [r4, #0]
 8019ade:	4629      	mov	r1, r5
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ae8:	4718      	bx	r3
	...

08019aec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019aec:	b538      	push	{r3, r4, r5, lr}
 8019aee:	4b0e      	ldr	r3, [pc, #56]	; (8019b28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8019af0:	4604      	mov	r4, r0
 8019af2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019af4:	881b      	ldrh	r3, [r3, #0]
 8019af6:	429a      	cmp	r2, r3
 8019af8:	d214      	bcs.n	8019b24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019afa:	6803      	ldr	r3, [r0, #0]
 8019afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019afe:	4798      	blx	r3
 8019b00:	6823      	ldr	r3, [r4, #0]
 8019b02:	4605      	mov	r5, r0
 8019b04:	4620      	mov	r0, r4
 8019b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b08:	4798      	blx	r3
 8019b0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019b0e:	b22d      	sxth	r5, r5
 8019b10:	4601      	mov	r1, r0
 8019b12:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019b16:	bf06      	itte	eq
 8019b18:	4602      	moveq	r2, r0
 8019b1a:	4629      	moveq	r1, r5
 8019b1c:	462a      	movne	r2, r5
 8019b1e:	4620      	mov	r0, r4
 8019b20:	f7ff ffd6 	bl	8019ad0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019b24:	bd38      	pop	{r3, r4, r5, pc}
 8019b26:	bf00      	nop
 8019b28:	2001563c 	.word	0x2001563c

08019b2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019b2c:	b530      	push	{r4, r5, lr}
 8019b2e:	888b      	ldrh	r3, [r1, #4]
 8019b30:	b085      	sub	sp, #20
 8019b32:	4604      	mov	r4, r0
 8019b34:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019b36:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019b3a:	b923      	cbnz	r3, 8019b46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019b3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019b40:	b90b      	cbnz	r3, 8019b46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019b42:	f7ff ffd3 	bl	8019aec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019b46:	6823      	ldr	r3, [r4, #0]
 8019b48:	466d      	mov	r5, sp
 8019b4a:	4621      	mov	r1, r4
 8019b4c:	343c      	adds	r4, #60	; 0x3c
 8019b4e:	4628      	mov	r0, r5
 8019b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b54:	4798      	blx	r3
 8019b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019b5e:	b005      	add	sp, #20
 8019b60:	bd30      	pop	{r4, r5, pc}

08019b62 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019b62:	2300      	movs	r3, #0
 8019b64:	8083      	strh	r3, [r0, #4]
 8019b66:	80c3      	strh	r3, [r0, #6]
 8019b68:	8003      	strh	r3, [r0, #0]
 8019b6a:	8043      	strh	r3, [r0, #2]
 8019b6c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019b70:	2bff      	cmp	r3, #255	; 0xff
 8019b72:	bf01      	itttt	eq
 8019b74:	890b      	ldrheq	r3, [r1, #8]
 8019b76:	8083      	strheq	r3, [r0, #4]
 8019b78:	894b      	ldrheq	r3, [r1, #10]
 8019b7a:	80c3      	strheq	r3, [r0, #6]
 8019b7c:	4770      	bx	lr
	...

08019b80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b82:	4604      	mov	r4, r0
 8019b84:	466b      	mov	r3, sp
 8019b86:	6808      	ldr	r0, [r1, #0]
 8019b88:	6849      	ldr	r1, [r1, #4]
 8019b8a:	c303      	stmia	r3!, {r0, r1}
 8019b8c:	6823      	ldr	r3, [r4, #0]
 8019b8e:	4669      	mov	r1, sp
 8019b90:	4620      	mov	r0, r4
 8019b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b94:	4798      	blx	r3
 8019b96:	4b08      	ldr	r3, [pc, #32]	; (8019bb8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019b9e:	b10a      	cbz	r2, 8019ba4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019ba0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019ba2:	b900      	cbnz	r0, 8019ba6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019ba4:	6898      	ldr	r0, [r3, #8]
 8019ba6:	6803      	ldr	r3, [r0, #0]
 8019ba8:	4669      	mov	r1, sp
 8019baa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019bac:	6a1d      	ldr	r5, [r3, #32]
 8019bae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019bb2:	47a8      	blx	r5
 8019bb4:	b003      	add	sp, #12
 8019bb6:	bd30      	pop	{r4, r5, pc}
 8019bb8:	200155e8 	.word	0x200155e8

08019bbc <_ZN8touchgfx3BoxD1Ev>:
 8019bbc:	4770      	bx	lr

08019bbe <_ZN8touchgfx3BoxD0Ev>:
 8019bbe:	b510      	push	{r4, lr}
 8019bc0:	4604      	mov	r4, r0
 8019bc2:	212c      	movs	r1, #44	; 0x2c
 8019bc4:	f010 fdfe 	bl	802a7c4 <_ZdlPvj>
 8019bc8:	4620      	mov	r0, r4
 8019bca:	bd10      	pop	{r4, pc}

08019bcc <_ZNK8touchgfx3Box17invalidateContentEv>:
 8019bcc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8019bd0:	b12a      	cbz	r2, 8019bde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019bd2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019bd6:	b112      	cbz	r2, 8019bde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019bd8:	6803      	ldr	r3, [r0, #0]
 8019bda:	695b      	ldr	r3, [r3, #20]
 8019bdc:	4718      	bx	r3
 8019bde:	4770      	bx	lr

08019be0 <_ZN8touchgfx6ButtonD1Ev>:
 8019be0:	4770      	bx	lr

08019be2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019be2:	b570      	push	{r4, r5, r6, lr}
 8019be4:	880b      	ldrh	r3, [r1, #0]
 8019be6:	4605      	mov	r5, r0
 8019be8:	4604      	mov	r4, r0
 8019bea:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019bec:	8813      	ldrh	r3, [r2, #0]
 8019bee:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019bf2:	4628      	mov	r0, r5
 8019bf4:	f004 ffe4 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019bf8:	4606      	mov	r6, r0
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	f005 f814 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c00:	6823      	ldr	r3, [r4, #0]
 8019c02:	4605      	mov	r5, r0
 8019c04:	4631      	mov	r1, r6
 8019c06:	4620      	mov	r0, r4
 8019c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c0a:	4798      	blx	r3
 8019c0c:	6823      	ldr	r3, [r4, #0]
 8019c0e:	4629      	mov	r1, r5
 8019c10:	4620      	mov	r0, r4
 8019c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c18:	4718      	bx	r3

08019c1a <_ZN8touchgfx6ButtonD0Ev>:
 8019c1a:	b510      	push	{r4, lr}
 8019c1c:	4604      	mov	r4, r0
 8019c1e:	2134      	movs	r1, #52	; 0x34
 8019c20:	f010 fdd0 	bl	802a7c4 <_ZdlPvj>
 8019c24:	4620      	mov	r0, r4
 8019c26:	bd10      	pop	{r4, pc}

08019c28 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019c28:	b510      	push	{r4, lr}
 8019c2a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019c2e:	4604      	mov	r4, r0
 8019c30:	2bff      	cmp	r3, #255	; 0xff
 8019c32:	d006      	beq.n	8019c42 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019c34:	2300      	movs	r3, #0
 8019c36:	8003      	strh	r3, [r0, #0]
 8019c38:	8043      	strh	r3, [r0, #2]
 8019c3a:	8083      	strh	r3, [r0, #4]
 8019c3c:	80c3      	strh	r3, [r0, #6]
 8019c3e:	4620      	mov	r0, r4
 8019c40:	bd10      	pop	{r4, pc}
 8019c42:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019c46:	b11b      	cbz	r3, 8019c50 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019c48:	3130      	adds	r1, #48	; 0x30
 8019c4a:	f005 f821 	bl	801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019c4e:	e7f6      	b.n	8019c3e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019c50:	312e      	adds	r1, #46	; 0x2e
 8019c52:	e7fa      	b.n	8019c4a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019c54 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019c5c:	b08a      	sub	sp, #40	; 0x28
 8019c5e:	4604      	mov	r4, r0
 8019c60:	4688      	mov	r8, r1
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d066      	beq.n	8019d34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019c66:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019c68:	a805      	add	r0, sp, #20
 8019c6a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019c6e:	f004 ffa7 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c72:	4607      	mov	r7, r0
 8019c74:	a805      	add	r0, sp, #20
 8019c76:	f004 ffd7 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c7a:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019c7e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019c82:	2300      	movs	r3, #0
 8019c84:	4432      	add	r2, r6
 8019c86:	9306      	str	r3, [sp, #24]
 8019c88:	b292      	uxth	r2, r2
 8019c8a:	fa0f fc82 	sxth.w	ip, r2
 8019c8e:	459c      	cmp	ip, r3
 8019c90:	dd52      	ble.n	8019d38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c92:	42b7      	cmp	r7, r6
 8019c94:	dd50      	ble.n	8019d38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c96:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8019c9a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019c9e:	442b      	add	r3, r5
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	b219      	sxth	r1, r3
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	dd47      	ble.n	8019d38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019ca8:	42a8      	cmp	r0, r5
 8019caa:	dd45      	ble.n	8019d38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019cac:	4567      	cmp	r7, ip
 8019cae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8019cb2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019cb6:	bfb8      	it	lt
 8019cb8:	b2ba      	uxthlt	r2, r7
 8019cba:	4288      	cmp	r0, r1
 8019cbc:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019cc0:	bfb8      	it	lt
 8019cc2:	b283      	uxthlt	r3, r0
 8019cc4:	1b92      	subs	r2, r2, r6
 8019cc6:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019cca:	1b5b      	subs	r3, r3, r5
 8019ccc:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019cd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019cd4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d026      	beq.n	8019d2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019ce0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	dd22      	ble.n	8019d2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019ce8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	dd1e      	ble.n	8019d2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	a908      	add	r1, sp, #32
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019cfa:	6823      	ldr	r3, [r4, #0]
 8019cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cfe:	4798      	blx	r3
 8019d00:	4b0f      	ldr	r3, [pc, #60]	; (8019d40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019d08:	b10a      	cbz	r2, 8019d0e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8019d0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019d0c:	b900      	cbnz	r0, 8019d10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8019d0e:	6898      	ldr	r0, [r3, #8]
 8019d10:	2501      	movs	r5, #1
 8019d12:	6801      	ldr	r1, [r0, #0]
 8019d14:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019d18:	9502      	str	r5, [sp, #8]
 8019d1a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019d1e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019d22:	9401      	str	r4, [sp, #4]
 8019d24:	ac06      	add	r4, sp, #24
 8019d26:	9400      	str	r4, [sp, #0]
 8019d28:	688c      	ldr	r4, [r1, #8]
 8019d2a:	a905      	add	r1, sp, #20
 8019d2c:	47a0      	blx	r4
 8019d2e:	b00a      	add	sp, #40	; 0x28
 8019d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d34:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019d36:	e797      	b.n	8019c68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	9307      	str	r3, [sp, #28]
 8019d3c:	e7ca      	b.n	8019cd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8019d3e:	bf00      	nop
 8019d40:	200155e8 	.word	0x200155e8

08019d44 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8019d44:	4b30      	ldr	r3, [pc, #192]	; (8019e08 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8019d46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d4a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019d4c:	b08d      	sub	sp, #52	; 0x34
 8019d4e:	881b      	ldrh	r3, [r3, #0]
 8019d50:	4604      	mov	r4, r0
 8019d52:	460f      	mov	r7, r1
 8019d54:	4293      	cmp	r3, r2
 8019d56:	d954      	bls.n	8019e02 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019d58:	4b2c      	ldr	r3, [pc, #176]	; (8019e0c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8019d5a:	6819      	ldr	r1, [r3, #0]
 8019d5c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8019d60:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8019d64:	4a2a      	ldr	r2, [pc, #168]	; (8019e10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8019d66:	6812      	ldr	r2, [r2, #0]
 8019d68:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019d6c:	2900      	cmp	r1, #0
 8019d6e:	d048      	beq.n	8019e02 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019d70:	785a      	ldrb	r2, [r3, #1]
 8019d72:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8019d76:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8019d7a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019d7e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019d82:	4b24      	ldr	r3, [pc, #144]	; (8019e14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8019d84:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8019d8e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8019d92:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8019d96:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8019d98:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8019d9c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8019da0:	9107      	str	r1, [sp, #28]
 8019da2:	f88d 8020 	strb.w	r8, [sp, #32]
 8019da6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8019daa:	9609      	str	r6, [sp, #36]	; 0x24
 8019dac:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8019db0:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8019db4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8019db8:	b10b      	cbz	r3, 8019dbe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8019dba:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8019dbc:	b905      	cbnz	r5, 8019dc0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8019dbe:	6895      	ldr	r5, [r2, #8]
 8019dc0:	ae05      	add	r6, sp, #20
 8019dc2:	4621      	mov	r1, r4
 8019dc4:	4630      	mov	r0, r6
 8019dc6:	f002 ffb1 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dca:	4b13      	ldr	r3, [pc, #76]	; (8019e18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8019dcc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019dce:	6818      	ldr	r0, [r3, #0]
 8019dd0:	f7eb fa74 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019dd4:	6823      	ldr	r3, [r4, #0]
 8019dd6:	4680      	mov	r8, r0
 8019dd8:	4620      	mov	r0, r4
 8019dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019ddc:	4798      	blx	r3
 8019dde:	6823      	ldr	r3, [r4, #0]
 8019de0:	4681      	mov	r9, r0
 8019de2:	4620      	mov	r0, r4
 8019de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019de8:	4798      	blx	r3
 8019dea:	ab07      	add	r3, sp, #28
 8019dec:	f8cd 8004 	str.w	r8, [sp, #4]
 8019df0:	9300      	str	r3, [sp, #0]
 8019df2:	463b      	mov	r3, r7
 8019df4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8019df8:	4628      	mov	r0, r5
 8019dfa:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019dfe:	f7eb fa0f 	bl	8005220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019e02:	b00d      	add	sp, #52	; 0x34
 8019e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e08:	2001563c 	.word	0x2001563c
 8019e0c:	20015638 	.word	0x20015638
 8019e10:	20015640 	.word	0x20015640
 8019e14:	200155e8 	.word	0x200155e8
 8019e18:	20015644 	.word	0x20015644

08019e1c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8019e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e20:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8019e24:	b0a0      	sub	sp, #128	; 0x80
 8019e26:	4604      	mov	r4, r0
 8019e28:	b193      	cbz	r3, 8019e50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8019e2a:	4b30      	ldr	r3, [pc, #192]	; (8019eec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8019e2c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019e2e:	881b      	ldrh	r3, [r3, #0]
 8019e30:	428b      	cmp	r3, r1
 8019e32:	d90d      	bls.n	8019e50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8019e34:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	dd09      	ble.n	8019e50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8019e3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	dd05      	ble.n	8019e50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8019e44:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8019e48:	b12b      	cbz	r3, 8019e56 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 8019e4a:	6803      	ldr	r3, [r0, #0]
 8019e4c:	695b      	ldr	r3, [r3, #20]
 8019e4e:	4798      	blx	r3
 8019e50:	b020      	add	sp, #128	; 0x80
 8019e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e56:	4b26      	ldr	r3, [pc, #152]	; (8019ef0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8019e5e:	4b25      	ldr	r3, [pc, #148]	; (8019ef4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019e66:	4b24      	ldr	r3, [pc, #144]	; (8019ef8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8019e68:	6818      	ldr	r0, [r3, #0]
 8019e6a:	f7eb fa27 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 8019e6e:	4606      	mov	r6, r0
 8019e70:	a807      	add	r0, sp, #28
 8019e72:	f003 fb13 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 8019e76:	682b      	ldr	r3, [r5, #0]
 8019e78:	4628      	mov	r0, r5
 8019e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e7c:	4798      	blx	r3
 8019e7e:	682b      	ldr	r3, [r5, #0]
 8019e80:	4607      	mov	r7, r0
 8019e82:	4628      	mov	r0, r5
 8019e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e86:	4798      	blx	r3
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	4605      	mov	r5, r0
 8019e8c:	4620      	mov	r0, r4
 8019e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019e90:	4798      	blx	r3
 8019e92:	6823      	ldr	r3, [r4, #0]
 8019e94:	4680      	mov	r8, r0
 8019e96:	4620      	mov	r0, r4
 8019e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019e9c:	4798      	blx	r3
 8019e9e:	462b      	mov	r3, r5
 8019ea0:	463a      	mov	r2, r7
 8019ea2:	4631      	mov	r1, r6
 8019ea4:	e9cd 8000 	strd	r8, r0, [sp]
 8019ea8:	a807      	add	r0, sp, #28
 8019eaa:	f003 fb67 	bl	801d57c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019eae:	a807      	add	r0, sp, #28
 8019eb0:	f003 ff20 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019eb4:	280a      	cmp	r0, #10
 8019eb6:	d103      	bne.n	8019ec0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8019eb8:	6823      	ldr	r3, [r4, #0]
 8019eba:	4620      	mov	r0, r4
 8019ebc:	695b      	ldr	r3, [r3, #20]
 8019ebe:	e7c6      	b.n	8019e4e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8019ec0:	a807      	add	r0, sp, #28
 8019ec2:	f003 ff17 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ec6:	2800      	cmp	r0, #0
 8019ec8:	d1f4      	bne.n	8019eb4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8019eca:	ad04      	add	r5, sp, #16
 8019ecc:	4621      	mov	r1, r4
 8019ece:	4628      	mov	r0, r5
 8019ed0:	f7ff fb9c 	bl	801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8019ed4:	ab02      	add	r3, sp, #8
 8019ed6:	6822      	ldr	r2, [r4, #0]
 8019ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019edc:	6912      	ldr	r2, [r2, #16]
 8019ede:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	4620      	mov	r0, r4
 8019ee6:	4790      	blx	r2
 8019ee8:	e7b2      	b.n	8019e50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8019eea:	bf00      	nop
 8019eec:	2001563c 	.word	0x2001563c
 8019ef0:	20015638 	.word	0x20015638
 8019ef4:	20015640 	.word	0x20015640
 8019ef8:	20015644 	.word	0x20015644

08019efc <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8019efc:	4770      	bx	lr

08019efe <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8019efe:	b510      	push	{r4, lr}
 8019f00:	4604      	mov	r4, r0
 8019f02:	2134      	movs	r1, #52	; 0x34
 8019f04:	f010 fc5e 	bl	802a7c4 <_ZdlPvj>
 8019f08:	4620      	mov	r0, r4
 8019f0a:	bd10      	pop	{r4, pc}

08019f0c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8019f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f10:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019f12:	4604      	mov	r4, r0
 8019f14:	460e      	mov	r6, r1
 8019f16:	b08e      	sub	sp, #56	; 0x38
 8019f18:	b218      	sxth	r0, r3
 8019f1a:	8921      	ldrh	r1, [r4, #8]
 8019f1c:	005b      	lsls	r3, r3, #1
 8019f1e:	8962      	ldrh	r2, [r4, #10]
 8019f20:	f8ad 0000 	strh.w	r0, [sp]
 8019f24:	b29b      	uxth	r3, r3
 8019f26:	f8ad 0002 	strh.w	r0, [sp, #2]
 8019f2a:	1ac9      	subs	r1, r1, r3
 8019f2c:	1ad3      	subs	r3, r2, r3
 8019f2e:	b209      	sxth	r1, r1
 8019f30:	b21b      	sxth	r3, r3
 8019f32:	2900      	cmp	r1, #0
 8019f34:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f3c:	dd5e      	ble.n	8019ffc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	dd5c      	ble.n	8019ffc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019f42:	6830      	ldr	r0, [r6, #0]
 8019f44:	ab02      	add	r3, sp, #8
 8019f46:	6871      	ldr	r1, [r6, #4]
 8019f48:	c303      	stmia	r3!, {r0, r1}
 8019f4a:	4669      	mov	r1, sp
 8019f4c:	a802      	add	r0, sp, #8
 8019f4e:	f7fe fa1b 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8019f52:	4620      	mov	r0, r4
 8019f54:	a902      	add	r1, sp, #8
 8019f56:	f7ff fe13 	bl	8019b80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019f5a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d05f      	beq.n	801a020 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019f60:	8963      	ldrh	r3, [r4, #10]
 8019f62:	b202      	sxth	r2, r0
 8019f64:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019f68:	2500      	movs	r5, #0
 8019f6a:	1a1f      	subs	r7, r3, r0
 8019f6c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019f70:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019f74:	b21b      	sxth	r3, r3
 8019f76:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019f7a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019f7e:	af04      	add	r7, sp, #16
 8019f80:	1a09      	subs	r1, r1, r0
 8019f82:	9506      	str	r5, [sp, #24]
 8019f84:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019f88:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019f8c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019f90:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8019f94:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019f98:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019f9c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019fa0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8019fa4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019fa8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019fac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019fb0:	ab06      	add	r3, sp, #24
 8019fb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019fba:	e887 0003 	stmia.w	r7, {r0, r1}
 8019fbe:	4631      	mov	r1, r6
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	f7fe f9e1 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8019fc6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	dd12      	ble.n	8019ff4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019fce:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	dd0e      	ble.n	8019ff4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019fd6:	6823      	ldr	r3, [r4, #0]
 8019fd8:	4639      	mov	r1, r7
 8019fda:	4620      	mov	r0, r4
 8019fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fde:	4798      	blx	r3
 8019fe0:	f7fe fcae 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 8019fe4:	6803      	ldr	r3, [r0, #0]
 8019fe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019fe8:	4639      	mov	r1, r7
 8019fea:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8019fee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019ff2:	47c0      	blx	r8
 8019ff4:	3501      	adds	r5, #1
 8019ff6:	2d04      	cmp	r5, #4
 8019ff8:	d1da      	bne.n	8019fb0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8019ffa:	e011      	b.n	801a020 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019ffc:	6830      	ldr	r0, [r6, #0]
 8019ffe:	ab06      	add	r3, sp, #24
 801a000:	6871      	ldr	r1, [r6, #4]
 801a002:	c303      	stmia	r3!, {r0, r1}
 801a004:	6823      	ldr	r3, [r4, #0]
 801a006:	a906      	add	r1, sp, #24
 801a008:	4620      	mov	r0, r4
 801a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a00c:	4798      	blx	r3
 801a00e:	f7fe fc97 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 801a012:	6803      	ldr	r3, [r0, #0]
 801a014:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a016:	a906      	add	r1, sp, #24
 801a018:	6a1d      	ldr	r5, [r3, #32]
 801a01a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a01e:	47a8      	blx	r5
 801a020:	b00e      	add	sp, #56	; 0x38
 801a022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a026 <_ZN8touchgfx5ImageD1Ev>:
 801a026:	4770      	bx	lr

0801a028 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a028:	b570      	push	{r4, r5, r6, lr}
 801a02a:	880b      	ldrh	r3, [r1, #0]
 801a02c:	460d      	mov	r5, r1
 801a02e:	4604      	mov	r4, r0
 801a030:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a032:	4608      	mov	r0, r1
 801a034:	f004 fdc4 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a038:	4606      	mov	r6, r0
 801a03a:	4628      	mov	r0, r5
 801a03c:	f004 fdf4 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a040:	6823      	ldr	r3, [r4, #0]
 801a042:	4605      	mov	r5, r0
 801a044:	4631      	mov	r1, r6
 801a046:	4620      	mov	r0, r4
 801a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a04a:	4798      	blx	r3
 801a04c:	6823      	ldr	r3, [r4, #0]
 801a04e:	4629      	mov	r1, r5
 801a050:	4620      	mov	r0, r4
 801a052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a058:	4718      	bx	r3

0801a05a <_ZN8touchgfx5ImageD0Ev>:
 801a05a:	b510      	push	{r4, lr}
 801a05c:	4604      	mov	r4, r0
 801a05e:	212c      	movs	r1, #44	; 0x2c
 801a060:	f010 fbb0 	bl	802a7c4 <_ZdlPvj>
 801a064:	4620      	mov	r0, r4
 801a066:	bd10      	pop	{r4, pc}

0801a068 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a068:	b510      	push	{r4, lr}
 801a06a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a06e:	4604      	mov	r4, r0
 801a070:	2bff      	cmp	r3, #255	; 0xff
 801a072:	d006      	beq.n	801a082 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a074:	2300      	movs	r3, #0
 801a076:	8003      	strh	r3, [r0, #0]
 801a078:	8043      	strh	r3, [r0, #2]
 801a07a:	8083      	strh	r3, [r0, #4]
 801a07c:	80c3      	strh	r3, [r0, #6]
 801a07e:	4620      	mov	r0, r4
 801a080:	bd10      	pop	{r4, pc}
 801a082:	3126      	adds	r1, #38	; 0x26
 801a084:	f004 fe04 	bl	801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a088:	e7f9      	b.n	801a07e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a08a <_ZNK8touchgfx5Image17invalidateContentEv>:
 801a08a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801a08e:	b12a      	cbz	r2, 801a09c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801a090:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801a094:	b112      	cbz	r2, 801a09c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801a096:	6803      	ldr	r3, [r0, #0]
 801a098:	695b      	ldr	r3, [r3, #20]
 801a09a:	4718      	bx	r3
 801a09c:	4770      	bx	lr
	...

0801a0a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a4:	4604      	mov	r4, r0
 801a0a6:	b088      	sub	sp, #32
 801a0a8:	2500      	movs	r5, #0
 801a0aa:	460f      	mov	r7, r1
 801a0ac:	f854 3b26 	ldr.w	r3, [r4], #38
 801a0b0:	a904      	add	r1, sp, #16
 801a0b2:	4606      	mov	r6, r0
 801a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a0ba:	4798      	blx	r3
 801a0bc:	4620      	mov	r0, r4
 801a0be:	f004 fd7f 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a0c2:	4680      	mov	r8, r0
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f004 fdaf 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a0ca:	9506      	str	r5, [sp, #24]
 801a0cc:	ad06      	add	r5, sp, #24
 801a0ce:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a0d2:	4639      	mov	r1, r7
 801a0d4:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a0d8:	4628      	mov	r0, r5
 801a0da:	f7fe f955 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801a0de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	dd19      	ble.n	801a11a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a0e6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	dd15      	ble.n	801a11a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a0ee:	4b0c      	ldr	r3, [pc, #48]	; (801a120 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a0f6:	b10a      	cbz	r2, 801a0fc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a0f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a0fa:	b900      	cbnz	r0, 801a0fe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a0fc:	6898      	ldr	r0, [r3, #8]
 801a0fe:	2701      	movs	r7, #1
 801a100:	6801      	ldr	r1, [r0, #0]
 801a102:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a106:	9702      	str	r7, [sp, #8]
 801a108:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a10c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a110:	e9cd 5600 	strd	r5, r6, [sp]
 801a114:	688d      	ldr	r5, [r1, #8]
 801a116:	4621      	mov	r1, r4
 801a118:	47a8      	blx	r5
 801a11a:	b008      	add	sp, #32
 801a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a120:	200155e8 	.word	0x200155e8

0801a124 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 801a124:	4770      	bx	lr

0801a126 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801a126:	b510      	push	{r4, lr}
 801a128:	4604      	mov	r4, r0
 801a12a:	2148      	movs	r1, #72	; 0x48
 801a12c:	f010 fb4a 	bl	802a7c4 <_ZdlPvj>
 801a130:	4620      	mov	r0, r4
 801a132:	bd10      	pop	{r4, pc}

0801a134 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801a134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a138:	b08d      	sub	sp, #52	; 0x34
 801a13a:	4604      	mov	r4, r0
 801a13c:	4688      	mov	r8, r1
 801a13e:	f7ff fd89 	bl	8019c54 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801a142:	4a4d      	ldr	r2, [pc, #308]	; (801a278 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x144>)
 801a144:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a146:	8812      	ldrh	r2, [r2, #0]
 801a148:	429a      	cmp	r2, r3
 801a14a:	f240 8081 	bls.w	801a250 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801a14e:	4e4b      	ldr	r6, [pc, #300]	; (801a27c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x148>)
 801a150:	6832      	ldr	r2, [r6, #0]
 801a152:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a156:	4b4a      	ldr	r3, [pc, #296]	; (801a280 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>)
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a15e:	2300      	movs	r3, #0
 801a160:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 801a164:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801a168:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a16c:	2b03      	cmp	r3, #3
 801a16e:	d811      	bhi.n	801a194 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801a170:	e8df f003 	tbb	[pc, r3]
 801a174:	71027102 	.word	0x71027102
 801a178:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a17c:	2002      	movs	r0, #2
 801a17e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801a182:	1a9b      	subs	r3, r3, r2
 801a184:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a188:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a18c:	fb93 f3f0 	sdiv	r3, r3, r0
 801a190:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a194:	ad03      	add	r5, sp, #12
 801a196:	f10d 0914 	add.w	r9, sp, #20
 801a19a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a19e:	e889 0003 	stmia.w	r9, {r0, r1}
 801a1a2:	4641      	mov	r1, r8
 801a1a4:	4648      	mov	r0, r9
 801a1a6:	f7fe f8ef 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801a1aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	dd4e      	ble.n	801a250 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801a1b2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	dd4a      	ble.n	801a250 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801a1ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a1be:	4629      	mov	r1, r5
 801a1c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	1a9b      	subs	r3, r3, r2
 801a1c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a1cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1da:	6823      	ldr	r3, [r4, #0]
 801a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1de:	4798      	blx	r3
 801a1e0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d045      	beq.n	801a274 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x140>
 801a1e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801a1ea:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801a1ec:	6833      	ldr	r3, [r6, #0]
 801a1ee:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801a1f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801a1f6:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801a1fa:	785b      	ldrb	r3, [r3, #1]
 801a1fc:	9209      	str	r2, [sp, #36]	; 0x24
 801a1fe:	f3c3 0601 	ubfx	r6, r3, #0, #2
 801a202:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a206:	9707      	str	r7, [sp, #28]
 801a208:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a20c:	2300      	movs	r3, #0
 801a20e:	f88d 6020 	strb.w	r6, [sp, #32]
 801a212:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a216:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a21a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a21e:	4b19      	ldr	r3, [pc, #100]	; (801a284 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x150>)
 801a220:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a22a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a22e:	b10a      	cbz	r2, 801a234 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x100>
 801a230:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a232:	b904      	cbnz	r4, 801a236 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801a234:	689c      	ldr	r4, [r3, #8]
 801a236:	4b14      	ldr	r3, [pc, #80]	; (801a288 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>)
 801a238:	6818      	ldr	r0, [r3, #0]
 801a23a:	f7eb f83f 	bl	80052bc <_ZNK8touchgfx5Texts7getTextEt>
 801a23e:	ab07      	add	r3, sp, #28
 801a240:	9001      	str	r0, [sp, #4]
 801a242:	4620      	mov	r0, r4
 801a244:	9300      	str	r3, [sp, #0]
 801a246:	464b      	mov	r3, r9
 801a248:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a24c:	f7ea ffe8 	bl	8005220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a250:	b00d      	add	sp, #52	; 0x34
 801a252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a256:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a25a:	2002      	movs	r0, #2
 801a25c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801a260:	1a9b      	subs	r3, r3, r2
 801a262:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a266:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a26a:	fb93 f3f0 	sdiv	r3, r3, r0
 801a26e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a272:	e78f      	b.n	801a194 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801a274:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a276:	e7b8      	b.n	801a1ea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb6>
 801a278:	2001563c 	.word	0x2001563c
 801a27c:	20015638 	.word	0x20015638
 801a280:	20015640 	.word	0x20015640
 801a284:	200155e8 	.word	0x200155e8
 801a288:	20015644 	.word	0x20015644

0801a28c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801a28c:	2101      	movs	r1, #1
 801a28e:	2200      	movs	r2, #0
 801a290:	b510      	push	{r4, lr}
 801a292:	4c13      	ldr	r4, [pc, #76]	; (801a2e0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801a294:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a298:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801a29c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a2a0:	6004      	str	r4, [r0, #0]
 801a2a2:	4c10      	ldr	r4, [pc, #64]	; (801a2e4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801a2a4:	8082      	strh	r2, [r0, #4]
 801a2a6:	80c2      	strh	r2, [r0, #6]
 801a2a8:	8102      	strh	r2, [r0, #8]
 801a2aa:	8142      	strh	r2, [r0, #10]
 801a2ac:	8182      	strh	r2, [r0, #12]
 801a2ae:	81c2      	strh	r2, [r0, #14]
 801a2b0:	8202      	strh	r2, [r0, #16]
 801a2b2:	8242      	strh	r2, [r0, #18]
 801a2b4:	61c2      	str	r2, [r0, #28]
 801a2b6:	8402      	strh	r2, [r0, #32]
 801a2b8:	8442      	strh	r2, [r0, #34]	; 0x22
 801a2ba:	6282      	str	r2, [r0, #40]	; 0x28
 801a2bc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801a2c0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a2c2:	8601      	strh	r1, [r0, #48]	; 0x30
 801a2c4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801a2c8:	6344      	str	r4, [r0, #52]	; 0x34
 801a2ca:	8701      	strh	r1, [r0, #56]	; 0x38
 801a2cc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801a2d0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801a2d4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a2d8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801a2dc:	bd10      	pop	{r4, pc}
 801a2de:	bf00      	nop
 801a2e0:	08030da4 	.word	0x08030da4
 801a2e4:	0802d828 	.word	0x0802d828

0801a2e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a2e8:	b510      	push	{r4, lr}
 801a2ea:	6803      	ldr	r3, [r0, #0]
 801a2ec:	460c      	mov	r4, r1
 801a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2f0:	4798      	blx	r3
 801a2f2:	1b03      	subs	r3, r0, r4
 801a2f4:	4258      	negs	r0, r3
 801a2f6:	4158      	adcs	r0, r3
 801a2f8:	bd10      	pop	{r4, pc}
	...

0801a2fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a2fc:	4b01      	ldr	r3, [pc, #4]	; (801a304 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a2fe:	6019      	str	r1, [r3, #0]
 801a300:	4770      	bx	lr
 801a302:	bf00      	nop
 801a304:	200155f0 	.word	0x200155f0

0801a308 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	4696      	mov	lr, r2
 801a30e:	b097      	sub	sp, #92	; 0x5c
 801a310:	4605      	mov	r5, r0
 801a312:	4614      	mov	r4, r2
 801a314:	460e      	mov	r6, r1
 801a316:	461f      	mov	r7, r3
 801a318:	f10d 0c1c 	add.w	ip, sp, #28
 801a31c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a320:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a324:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a328:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a32c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a330:	f8de 3000 	ldr.w	r3, [lr]
 801a334:	f104 0e14 	add.w	lr, r4, #20
 801a338:	f8cc 3000 	str.w	r3, [ip]
 801a33c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a340:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a348:	f8de 3000 	ldr.w	r3, [lr]
 801a34c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a350:	f8cc 3000 	str.w	r3, [ip]
 801a354:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a35c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a360:	f8de 3000 	ldr.w	r3, [lr]
 801a364:	4631      	mov	r1, r6
 801a366:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a368:	4628      	mov	r0, r5
 801a36a:	f8cc 3000 	str.w	r3, [ip]
 801a36e:	682b      	ldr	r3, [r5, #0]
 801a370:	9201      	str	r2, [sp, #4]
 801a372:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a374:	f8cd 8008 	str.w	r8, [sp, #8]
 801a378:	9200      	str	r2, [sp, #0]
 801a37a:	aa07      	add	r2, sp, #28
 801a37c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a380:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a384:	463b      	mov	r3, r7
 801a386:	47d8      	blx	fp
 801a388:	46a6      	mov	lr, r4
 801a38a:	f10d 0c1c 	add.w	ip, sp, #28
 801a38e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a396:	f8de 3000 	ldr.w	r3, [lr]
 801a39a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a39e:	343c      	adds	r4, #60	; 0x3c
 801a3a0:	f8cc 3000 	str.w	r3, [ip]
 801a3a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a3a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3b0:	f8de 3000 	ldr.w	r3, [lr]
 801a3b4:	f8cc 3000 	str.w	r3, [ip]
 801a3b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a3bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3c2:	6823      	ldr	r3, [r4, #0]
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f8cc 3000 	str.w	r3, [ip]
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a3d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a3d4:	f8cd 8008 	str.w	r8, [sp, #8]
 801a3d8:	9201      	str	r2, [sp, #4]
 801a3da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a3dc:	9200      	str	r2, [sp, #0]
 801a3de:	aa07      	add	r2, sp, #28
 801a3e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a3e2:	463b      	mov	r3, r7
 801a3e4:	47a0      	blx	r4
 801a3e6:	b017      	add	sp, #92	; 0x5c
 801a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f0:	b08d      	sub	sp, #52	; 0x34
 801a3f2:	4688      	mov	r8, r1
 801a3f4:	f8d3 c000 	ldr.w	ip, [r3]
 801a3f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a3fa:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a3fe:	680f      	ldr	r7, [r1, #0]
 801a400:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a404:	eba7 070c 	sub.w	r7, r7, ip
 801a408:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a40c:	edd3 6a07 	vldr	s13, [r3, #28]
 801a410:	42bc      	cmp	r4, r7
 801a412:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a414:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a418:	bfa8      	it	ge
 801a41a:	463c      	movge	r4, r7
 801a41c:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a420:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a424:	ee07 4a90 	vmov	s15, r4
 801a428:	eb09 0e0c 	add.w	lr, r9, ip
 801a42c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a430:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a434:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a438:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a43c:	4571      	cmp	r1, lr
 801a43e:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a442:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a446:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a44a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a44e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a452:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a456:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a45a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a45e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a462:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a466:	f340 808c 	ble.w	801a582 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a46a:	eba1 060e 	sub.w	r6, r1, lr
 801a46e:	fb96 f5f4 	sdiv	r5, r6, r4
 801a472:	ee07 5a10 	vmov	s14, r5
 801a476:	2d00      	cmp	r5, #0
 801a478:	fb04 6615 	mls	r6, r4, r5, r6
 801a47c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a480:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a484:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a488:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a48c:	dd12      	ble.n	801a4b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a48e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a492:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a496:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a49a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a2:	bf14      	ite	ne
 801a4a4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a4a8:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a4ac:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a4b0:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a4b4:	fb05 f204 	mul.w	r2, r5, r4
 801a4b8:	1abf      	subs	r7, r7, r2
 801a4ba:	4494      	add	ip, r2
 801a4bc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a4c0:	4411      	add	r1, r2
 801a4c2:	eb09 020c 	add.w	r2, r9, ip
 801a4c6:	b209      	sxth	r1, r1
 801a4c8:	443a      	add	r2, r7
 801a4ca:	428a      	cmp	r2, r1
 801a4cc:	bfc4      	itt	gt
 801a4ce:	eba1 0209 	subgt.w	r2, r1, r9
 801a4d2:	eba2 070c 	subgt.w	r7, r2, ip
 801a4d6:	2f00      	cmp	r7, #0
 801a4d8:	dd50      	ble.n	801a57c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a4da:	fb97 f1f4 	sdiv	r1, r7, r4
 801a4de:	fb04 7211 	mls	r2, r4, r1, r7
 801a4e2:	b90a      	cbnz	r2, 801a4e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a4e4:	3901      	subs	r1, #1
 801a4e6:	4622      	mov	r2, r4
 801a4e8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a4ec:	6840      	ldr	r0, [r0, #4]
 801a4ee:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a4f2:	44b6      	add	lr, r6
 801a4f4:	f8d0 a000 	ldr.w	sl, [r0]
 801a4f8:	2900      	cmp	r1, #0
 801a4fa:	bfcc      	ite	gt
 801a4fc:	46a1      	movgt	r9, r4
 801a4fe:	4691      	movle	r9, r2
 801a500:	900b      	str	r0, [sp, #44]	; 0x2c
 801a502:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a504:	fb04 e505 	mla	r5, r4, r5, lr
 801a508:	eef0 6a42 	vmov.f32	s13, s4
 801a50c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a510:	9008      	str	r0, [sp, #32]
 801a512:	eeb0 7a61 	vmov.f32	s14, s3
 801a516:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a518:	695b      	ldr	r3, [r3, #20]
 801a51a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a51e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a522:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a526:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a528:	445b      	add	r3, fp
 801a52a:	9307      	str	r3, [sp, #28]
 801a52c:	ee16 3a90 	vmov	r3, s13
 801a530:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a534:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a538:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a53c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a540:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a544:	ee17 7a90 	vmov	r7, s15
 801a548:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a54c:	fb97 f7f4 	sdiv	r7, r7, r4
 801a550:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a554:	ee17 ca90 	vmov	ip, s15
 801a558:	fb9c fcf4 	sdiv	ip, ip, r4
 801a55c:	fb0c 3306 	mla	r3, ip, r6, r3
 801a560:	9302      	str	r3, [sp, #8]
 801a562:	ee17 3a10 	vmov	r3, s14
 801a566:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a56a:	fb07 3706 	mla	r7, r7, r6, r3
 801a56e:	eba9 0306 	sub.w	r3, r9, r6
 801a572:	e9cd 4700 	strd	r4, r7, [sp]
 801a576:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a57a:	47a0      	blx	r4
 801a57c:	b00d      	add	sp, #52	; 0x34
 801a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a582:	2500      	movs	r5, #0
 801a584:	462e      	mov	r6, r5
 801a586:	e799      	b.n	801a4bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a58c:	b0db      	sub	sp, #364	; 0x16c
 801a58e:	461d      	mov	r5, r3
 801a590:	4614      	mov	r4, r2
 801a592:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a596:	910f      	str	r1, [sp, #60]	; 0x3c
 801a598:	4629      	mov	r1, r5
 801a59a:	930a      	str	r3, [sp, #40]	; 0x28
 801a59c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a5a0:	9009      	str	r0, [sp, #36]	; 0x24
 801a5a2:	930b      	str	r3, [sp, #44]	; 0x2c
 801a5a4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a5a8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a5ac:	9310      	str	r3, [sp, #64]	; 0x40
 801a5ae:	6803      	ldr	r3, [r0, #0]
 801a5b0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a5b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a5b6:	47b8      	blx	r7
 801a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5ba:	6058      	str	r0, [r3, #4]
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	f000 83a1 	beq.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5c2:	682b      	ldr	r3, [r5, #0]
 801a5c4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a5c8:	ed94 7a02 	vldr	s14, [r4, #8]
 801a5cc:	9314      	str	r3, [sp, #80]	; 0x50
 801a5ce:	686b      	ldr	r3, [r5, #4]
 801a5d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a5d4:	9315      	str	r3, [sp, #84]	; 0x54
 801a5d6:	4bc1      	ldr	r3, [pc, #772]	; (801a8dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a5d8:	7819      	ldrb	r1, [r3, #0]
 801a5da:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a5de:	2900      	cmp	r1, #0
 801a5e0:	bf16      	itet	ne
 801a5e2:	4619      	movne	r1, r3
 801a5e4:	4611      	moveq	r1, r2
 801a5e6:	4613      	movne	r3, r2
 801a5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ec:	9116      	str	r1, [sp, #88]	; 0x58
 801a5ee:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a5f2:	f240 8387 	bls.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5f6:	ed94 7a07 	vldr	s14, [r4, #28]
 801a5fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a602:	f240 837f 	bls.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a606:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a60a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a612:	f240 8377 	bls.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a616:	6822      	ldr	r2, [r4, #0]
 801a618:	4bb1      	ldr	r3, [pc, #708]	; (801a8e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a61a:	429a      	cmp	r2, r3
 801a61c:	f2c0 8372 	blt.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a620:	49b0      	ldr	r1, [pc, #704]	; (801a8e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a622:	6963      	ldr	r3, [r4, #20]
 801a624:	428a      	cmp	r2, r1
 801a626:	f300 836d 	bgt.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a62a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a62e:	48ae      	ldr	r0, [pc, #696]	; (801a8e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a630:	33ff      	adds	r3, #255	; 0xff
 801a632:	4283      	cmp	r3, r0
 801a634:	f200 8366 	bhi.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a63a:	4dac      	ldr	r5, [pc, #688]	; (801a8ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a63c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a640:	33ff      	adds	r3, #255	; 0xff
 801a642:	42ab      	cmp	r3, r5
 801a644:	f200 835e 	bhi.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a648:	6862      	ldr	r2, [r4, #4]
 801a64a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a64e:	33ff      	adds	r3, #255	; 0xff
 801a650:	4283      	cmp	r3, r0
 801a652:	f200 8357 	bhi.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a656:	69a1      	ldr	r1, [r4, #24]
 801a658:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a65c:	33ff      	adds	r3, #255	; 0xff
 801a65e:	4283      	cmp	r3, r0
 801a660:	f200 8350 	bhi.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a666:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a66a:	30ff      	adds	r0, #255	; 0xff
 801a66c:	42a8      	cmp	r0, r5
 801a66e:	f200 8349 	bhi.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a672:	428a      	cmp	r2, r1
 801a674:	f280 8110 	bge.w	801a898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a678:	429a      	cmp	r2, r3
 801a67a:	f300 8119 	bgt.w	801a8b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a67e:	4299      	cmp	r1, r3
 801a680:	f280 811d 	bge.w	801a8be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a684:	2502      	movs	r5, #2
 801a686:	2701      	movs	r7, #1
 801a688:	46a9      	mov	r9, r5
 801a68a:	46b8      	mov	r8, r7
 801a68c:	f04f 0a00 	mov.w	sl, #0
 801a690:	4621      	mov	r1, r4
 801a692:	a849      	add	r0, sp, #292	; 0x124
 801a694:	f003 fc4c 	bl	801df30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a698:	4622      	mov	r2, r4
 801a69a:	4653      	mov	r3, sl
 801a69c:	a949      	add	r1, sp, #292	; 0x124
 801a69e:	f8cd 9000 	str.w	r9, [sp]
 801a6a2:	a819      	add	r0, sp, #100	; 0x64
 801a6a4:	f003 fd74 	bl	801e190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6a8:	4622      	mov	r2, r4
 801a6aa:	4653      	mov	r3, sl
 801a6ac:	a949      	add	r1, sp, #292	; 0x124
 801a6ae:	f8cd 8000 	str.w	r8, [sp]
 801a6b2:	a829      	add	r0, sp, #164	; 0xa4
 801a6b4:	f003 fd6c 	bl	801e190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6b8:	4643      	mov	r3, r8
 801a6ba:	4622      	mov	r2, r4
 801a6bc:	a949      	add	r1, sp, #292	; 0x124
 801a6be:	f8cd 9000 	str.w	r9, [sp]
 801a6c2:	a839      	add	r0, sp, #228	; 0xe4
 801a6c4:	f003 fd64 	bl	801e190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6c8:	42af      	cmp	r7, r5
 801a6ca:	af12      	add	r7, sp, #72	; 0x48
 801a6cc:	bfb7      	itett	lt
 801a6ce:	2300      	movlt	r3, #0
 801a6d0:	2301      	movge	r3, #1
 801a6d2:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a6d4:	ac19      	addlt	r4, sp, #100	; 0x64
 801a6d6:	bfb1      	iteee	lt
 801a6d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a6da:	ad19      	addge	r5, sp, #100	; 0x64
 801a6dc:	930e      	strge	r3, [sp, #56]	; 0x38
 801a6de:	ac29      	addge	r4, sp, #164	; 0xa4
 801a6e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a6e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a6e6:	e887 0003 	stmia.w	r7, {r0, r1}
 801a6ea:	b928      	cbnz	r0, 801a6f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a6ec:	4b80      	ldr	r3, [pc, #512]	; (801a8f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a6ee:	6818      	ldr	r0, [r3, #0]
 801a6f0:	6803      	ldr	r3, [r0, #0]
 801a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6f4:	4798      	blx	r3
 801a6f6:	6038      	str	r0, [r7, #0]
 801a6f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a6fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a6fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a702:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a704:	930c      	str	r3, [sp, #48]	; 0x30
 801a706:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a708:	6963      	ldr	r3, [r4, #20]
 801a70a:	440b      	add	r3, r1
 801a70c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a710:	4408      	add	r0, r1
 801a712:	b200      	sxth	r0, r0
 801a714:	4283      	cmp	r3, r0
 801a716:	900d      	str	r0, [sp, #52]	; 0x34
 801a718:	f280 80dd 	bge.w	801a8d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a71c:	428b      	cmp	r3, r1
 801a71e:	da08      	bge.n	801a732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a720:	2a00      	cmp	r2, #0
 801a722:	dd06      	ble.n	801a732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a724:	1acb      	subs	r3, r1, r3
 801a726:	429a      	cmp	r2, r3
 801a728:	f2c0 80e4 	blt.w	801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	f300 80e2 	bgt.w	801a8f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a732:	6967      	ldr	r7, [r4, #20]
 801a734:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a73a:	443b      	add	r3, r7
 801a73c:	461f      	mov	r7, r3
 801a73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a740:	1bdf      	subs	r7, r3, r7
 801a742:	4297      	cmp	r7, r2
 801a744:	bfa8      	it	ge
 801a746:	4617      	movge	r7, r2
 801a748:	2f00      	cmp	r7, #0
 801a74a:	f340 8166 	ble.w	801aa1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a74e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a750:	6829      	ldr	r1, [r5, #0]
 801a752:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a756:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a75a:	4411      	add	r1, r2
 801a75c:	6820      	ldr	r0, [r4, #0]
 801a75e:	4299      	cmp	r1, r3
 801a760:	dd1a      	ble.n	801a798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a762:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a766:	4402      	add	r2, r0
 801a768:	440b      	add	r3, r1
 801a76a:	b21b      	sxth	r3, r3
 801a76c:	429a      	cmp	r2, r3
 801a76e:	dc13      	bgt.n	801a798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a770:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a772:	a912      	add	r1, sp, #72	; 0x48
 801a774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a776:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	9206      	str	r2, [sp, #24]
 801a77c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a77e:	9500      	str	r5, [sp, #0]
 801a780:	9205      	str	r2, [sp, #20]
 801a782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a784:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a788:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a78a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a78e:	aa49      	add	r2, sp, #292	; 0x124
 801a790:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a794:	4623      	mov	r3, r4
 801a796:	47c8      	blx	r9
 801a798:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a79c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a7a0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a7a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7a8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a7ac:	68a1      	ldr	r1, [r4, #8]
 801a7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a7b2:	ed94 6a08 	vldr	s12, [r4, #32]
 801a7b6:	edd4 6a07 	vldr	s13, [r4, #28]
 801a7ba:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a7be:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a7c2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a7c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a7ca:	edc4 6a07 	vstr	s13, [r4, #28]
 801a7ce:	441a      	add	r2, r3
 801a7d0:	6963      	ldr	r3, [r4, #20]
 801a7d2:	3301      	adds	r3, #1
 801a7d4:	6022      	str	r2, [r4, #0]
 801a7d6:	6163      	str	r3, [r4, #20]
 801a7d8:	69a3      	ldr	r3, [r4, #24]
 801a7da:	3b01      	subs	r3, #1
 801a7dc:	61a3      	str	r3, [r4, #24]
 801a7de:	6923      	ldr	r3, [r4, #16]
 801a7e0:	440b      	add	r3, r1
 801a7e2:	68e1      	ldr	r1, [r4, #12]
 801a7e4:	428b      	cmp	r3, r1
 801a7e6:	6123      	str	r3, [r4, #16]
 801a7e8:	db15      	blt.n	801a816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a7ea:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a7ee:	3201      	adds	r2, #1
 801a7f0:	1a5b      	subs	r3, r3, r1
 801a7f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a7f6:	6022      	str	r2, [r4, #0]
 801a7f8:	6123      	str	r3, [r4, #16]
 801a7fa:	edc4 6a07 	vstr	s13, [r4, #28]
 801a7fe:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a802:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a806:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a80a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a812:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a816:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a81a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a81e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a822:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a826:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a82a:	68a9      	ldr	r1, [r5, #8]
 801a82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a830:	ed95 6a08 	vldr	s12, [r5, #32]
 801a834:	edd5 6a07 	vldr	s13, [r5, #28]
 801a838:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a83c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a840:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a844:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a848:	edc5 6a07 	vstr	s13, [r5, #28]
 801a84c:	441a      	add	r2, r3
 801a84e:	696b      	ldr	r3, [r5, #20]
 801a850:	3301      	adds	r3, #1
 801a852:	602a      	str	r2, [r5, #0]
 801a854:	616b      	str	r3, [r5, #20]
 801a856:	69ab      	ldr	r3, [r5, #24]
 801a858:	3b01      	subs	r3, #1
 801a85a:	61ab      	str	r3, [r5, #24]
 801a85c:	692b      	ldr	r3, [r5, #16]
 801a85e:	440b      	add	r3, r1
 801a860:	68e9      	ldr	r1, [r5, #12]
 801a862:	428b      	cmp	r3, r1
 801a864:	612b      	str	r3, [r5, #16]
 801a866:	db15      	blt.n	801a894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a868:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a86c:	3201      	adds	r2, #1
 801a86e:	1a5b      	subs	r3, r3, r1
 801a870:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a874:	602a      	str	r2, [r5, #0]
 801a876:	612b      	str	r3, [r5, #16]
 801a878:	edc5 6a07 	vstr	s13, [r5, #28]
 801a87c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a880:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a884:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a888:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a890:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a894:	3f01      	subs	r7, #1
 801a896:	e757      	b.n	801a748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a898:	4299      	cmp	r1, r3
 801a89a:	dc13      	bgt.n	801a8c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a89c:	429a      	cmp	r2, r3
 801a89e:	da14      	bge.n	801a8ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a8a0:	2502      	movs	r5, #2
 801a8a2:	2703      	movs	r7, #3
 801a8a4:	f04f 0800 	mov.w	r8, #0
 801a8a8:	46a9      	mov	r9, r5
 801a8aa:	f04f 0a01 	mov.w	sl, #1
 801a8ae:	e6ef      	b.n	801a690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a8b0:	2501      	movs	r5, #1
 801a8b2:	2700      	movs	r7, #0
 801a8b4:	46a9      	mov	r9, r5
 801a8b6:	46b8      	mov	r8, r7
 801a8b8:	f04f 0a02 	mov.w	sl, #2
 801a8bc:	e6e8      	b.n	801a690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a8be:	2501      	movs	r5, #1
 801a8c0:	2702      	movs	r7, #2
 801a8c2:	e6e1      	b.n	801a688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a8c4:	2500      	movs	r5, #0
 801a8c6:	2701      	movs	r7, #1
 801a8c8:	e7f4      	b.n	801a8b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a8ca:	2702      	movs	r7, #2
 801a8cc:	2503      	movs	r5, #3
 801a8ce:	f04f 0900 	mov.w	r9, #0
 801a8d2:	46b8      	mov	r8, r7
 801a8d4:	e7e9      	b.n	801a8aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	e728      	b.n	801a72c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a8da:	bf00      	nop
 801a8dc:	200155e0 	.word	0x200155e0
 801a8e0:	fffd8f01 	.word	0xfffd8f01
 801a8e4:	00027100 	.word	0x00027100
 801a8e8:	0004e1ff 	.word	0x0004e1ff
 801a8ec:	0004e1fe 	.word	0x0004e1fe
 801a8f0:	200155e8 	.word	0x200155e8
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a8f8:	469e      	mov	lr, r3
 801a8fa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a8fc:	469c      	mov	ip, r3
 801a8fe:	9111      	str	r1, [sp, #68]	; 0x44
 801a900:	f04f 0900 	mov.w	r9, #0
 801a904:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a908:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a90c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a910:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a914:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a918:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a91c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a920:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a924:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a928:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a92c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a930:	f1bc 0f00 	cmp.w	ip, #0
 801a934:	d147      	bne.n	801a9c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a936:	eb03 0c07 	add.w	ip, r3, r7
 801a93a:	1ad7      	subs	r7, r2, r3
 801a93c:	f1b9 0f00 	cmp.w	r9, #0
 801a940:	d009      	beq.n	801a956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a942:	9029      	str	r0, [sp, #164]	; 0xa4
 801a944:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a948:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a94c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a950:	912d      	str	r1, [sp, #180]	; 0xb4
 801a952:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a956:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a958:	f04f 0800 	mov.w	r8, #0
 801a95c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a960:	9111      	str	r1, [sp, #68]	; 0x44
 801a962:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a966:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a96a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a96e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a972:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a976:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a97a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a97e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a982:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a986:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a98a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a98e:	f1be 0f00 	cmp.w	lr, #0
 801a992:	d031      	beq.n	801a9f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a994:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a996:	4450      	add	r0, sl
 801a998:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a99c:	4431      	add	r1, r6
 801a99e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a9a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a9a6:	4549      	cmp	r1, r9
 801a9a8:	db08      	blt.n	801a9bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a9aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a9ae:	3001      	adds	r0, #1
 801a9b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a9b4:	eba1 0109 	sub.w	r1, r1, r9
 801a9b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a9bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a9c0:	f04f 0801 	mov.w	r8, #1
 801a9c4:	e7e3      	b.n	801a98e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a9c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a9c8:	4450      	add	r0, sl
 801a9ca:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a9ce:	4431      	add	r1, r6
 801a9d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a9d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a9d8:	4541      	cmp	r1, r8
 801a9da:	db08      	blt.n	801a9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a9dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a9e0:	3001      	adds	r0, #1
 801a9e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a9e6:	eba1 0108 	sub.w	r1, r1, r8
 801a9ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a9ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a9f2:	f04f 0901 	mov.w	r9, #1
 801a9f6:	e79b      	b.n	801a930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a9f8:	449c      	add	ip, r3
 801a9fa:	1aff      	subs	r7, r7, r3
 801a9fc:	f1b8 0f00 	cmp.w	r8, #0
 801aa00:	d009      	beq.n	801aa16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801aa02:	9019      	str	r0, [sp, #100]	; 0x64
 801aa04:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801aa08:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801aa0c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801aa10:	911d      	str	r1, [sp, #116]	; 0x74
 801aa12:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801aa16:	1ad2      	subs	r2, r2, r3
 801aa18:	e68b      	b.n	801a732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aa1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa1c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	f000 80d1 	beq.w	801abc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801aa24:	ad19      	add	r5, sp, #100	; 0x64
 801aa26:	ac39      	add	r4, sp, #228	; 0xe4
 801aa28:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa2a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aa2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aa32:	930c      	str	r3, [sp, #48]	; 0x30
 801aa34:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa36:	6963      	ldr	r3, [r4, #20]
 801aa38:	440b      	add	r3, r1
 801aa3a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aa3e:	4408      	add	r0, r1
 801aa40:	b200      	sxth	r0, r0
 801aa42:	4283      	cmp	r3, r0
 801aa44:	900d      	str	r0, [sp, #52]	; 0x34
 801aa46:	f280 80c1 	bge.w	801abcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801aa4a:	428b      	cmp	r3, r1
 801aa4c:	da08      	bge.n	801aa60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa4e:	2a00      	cmp	r2, #0
 801aa50:	dd06      	ble.n	801aa60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa52:	1acb      	subs	r3, r1, r3
 801aa54:	429a      	cmp	r2, r3
 801aa56:	f2c0 80bb 	blt.w	801abd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f300 80b9 	bgt.w	801abd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801aa60:	6967      	ldr	r7, [r4, #20]
 801aa62:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801aa66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa68:	443b      	add	r3, r7
 801aa6a:	461f      	mov	r7, r3
 801aa6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa6e:	1bdf      	subs	r7, r3, r7
 801aa70:	4297      	cmp	r7, r2
 801aa72:	bfa8      	it	ge
 801aa74:	4617      	movge	r7, r2
 801aa76:	2f00      	cmp	r7, #0
 801aa78:	f340 813c 	ble.w	801acf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801aa7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa7e:	6829      	ldr	r1, [r5, #0]
 801aa80:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa84:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aa88:	4411      	add	r1, r2
 801aa8a:	6820      	ldr	r0, [r4, #0]
 801aa8c:	4299      	cmp	r1, r3
 801aa8e:	dd1a      	ble.n	801aac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aa90:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801aa94:	4402      	add	r2, r0
 801aa96:	440b      	add	r3, r1
 801aa98:	b21b      	sxth	r3, r3
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	dc13      	bgt.n	801aac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aa9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aaa0:	a912      	add	r1, sp, #72	; 0x48
 801aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	9206      	str	r2, [sp, #24]
 801aaaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aaac:	9500      	str	r5, [sp, #0]
 801aaae:	9205      	str	r2, [sp, #20]
 801aab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aab2:	e9cd b203 	strd	fp, r2, [sp, #12]
 801aab6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aab8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801aabc:	aa49      	add	r2, sp, #292	; 0x124
 801aabe:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801aac2:	4623      	mov	r3, r4
 801aac4:	47c8      	blx	r9
 801aac6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aaca:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aace:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aad6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aada:	68a1      	ldr	r1, [r4, #8]
 801aadc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aae0:	ed94 6a08 	vldr	s12, [r4, #32]
 801aae4:	edd4 6a07 	vldr	s13, [r4, #28]
 801aae8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aaec:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aaf0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aaf4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aaf8:	edc4 6a07 	vstr	s13, [r4, #28]
 801aafc:	441a      	add	r2, r3
 801aafe:	6963      	ldr	r3, [r4, #20]
 801ab00:	3301      	adds	r3, #1
 801ab02:	6022      	str	r2, [r4, #0]
 801ab04:	6163      	str	r3, [r4, #20]
 801ab06:	69a3      	ldr	r3, [r4, #24]
 801ab08:	3b01      	subs	r3, #1
 801ab0a:	61a3      	str	r3, [r4, #24]
 801ab0c:	6923      	ldr	r3, [r4, #16]
 801ab0e:	440b      	add	r3, r1
 801ab10:	68e1      	ldr	r1, [r4, #12]
 801ab12:	428b      	cmp	r3, r1
 801ab14:	6123      	str	r3, [r4, #16]
 801ab16:	db15      	blt.n	801ab44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ab18:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ab1c:	3201      	adds	r2, #1
 801ab1e:	1a5b      	subs	r3, r3, r1
 801ab20:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ab24:	6022      	str	r2, [r4, #0]
 801ab26:	6123      	str	r3, [r4, #16]
 801ab28:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab2c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ab30:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ab34:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ab38:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ab3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab40:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ab44:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ab48:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ab4c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ab50:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab54:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ab58:	68a9      	ldr	r1, [r5, #8]
 801ab5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab5e:	ed95 6a08 	vldr	s12, [r5, #32]
 801ab62:	edd5 6a07 	vldr	s13, [r5, #28]
 801ab66:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ab6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ab6e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ab72:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab76:	edc5 6a07 	vstr	s13, [r5, #28]
 801ab7a:	441a      	add	r2, r3
 801ab7c:	696b      	ldr	r3, [r5, #20]
 801ab7e:	3301      	adds	r3, #1
 801ab80:	602a      	str	r2, [r5, #0]
 801ab82:	616b      	str	r3, [r5, #20]
 801ab84:	69ab      	ldr	r3, [r5, #24]
 801ab86:	3b01      	subs	r3, #1
 801ab88:	61ab      	str	r3, [r5, #24]
 801ab8a:	692b      	ldr	r3, [r5, #16]
 801ab8c:	440b      	add	r3, r1
 801ab8e:	68e9      	ldr	r1, [r5, #12]
 801ab90:	428b      	cmp	r3, r1
 801ab92:	612b      	str	r3, [r5, #16]
 801ab94:	db15      	blt.n	801abc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801ab96:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ab9a:	3201      	adds	r2, #1
 801ab9c:	1a5b      	subs	r3, r3, r1
 801ab9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aba2:	602a      	str	r2, [r5, #0]
 801aba4:	612b      	str	r3, [r5, #16]
 801aba6:	edc5 6a07 	vstr	s13, [r5, #28]
 801abaa:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801abae:	ee36 7a87 	vadd.f32	s14, s13, s14
 801abb2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801abb6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801abba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801abbe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801abc2:	3f01      	subs	r7, #1
 801abc4:	e757      	b.n	801aa76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801abc6:	ad39      	add	r5, sp, #228	; 0xe4
 801abc8:	ac19      	add	r4, sp, #100	; 0x64
 801abca:	e72d      	b.n	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801abcc:	4613      	mov	r3, r2
 801abce:	e744      	b.n	801aa5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801abd0:	4613      	mov	r3, r2
 801abd2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801abd4:	469e      	mov	lr, r3
 801abd6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801abda:	461f      	mov	r7, r3
 801abdc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801abe0:	f04f 0900 	mov.w	r9, #0
 801abe4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801abe8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801abec:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801abf0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801abf4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801abf8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801abfa:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801abfe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ac02:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ac06:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ac0a:	960e      	str	r6, [sp, #56]	; 0x38
 801ac0c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ac10:	2f00      	cmp	r7, #0
 801ac12:	d146      	bne.n	801aca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ac14:	449c      	add	ip, r3
 801ac16:	1ad7      	subs	r7, r2, r3
 801ac18:	f1b9 0f00 	cmp.w	r9, #0
 801ac1c:	d009      	beq.n	801ac32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ac1e:	9039      	str	r0, [sp, #228]	; 0xe4
 801ac20:	913d      	str	r1, [sp, #244]	; 0xf4
 801ac22:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ac26:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ac2a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ac2e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ac32:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ac34:	f04f 0800 	mov.w	r8, #0
 801ac38:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ac3c:	910e      	str	r1, [sp, #56]	; 0x38
 801ac3e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ac42:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ac46:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ac4a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ac4e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ac52:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ac56:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ac5a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ac5e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ac62:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ac66:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ac6a:	f1be 0f00 	cmp.w	lr, #0
 801ac6e:	d030      	beq.n	801acd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ac70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ac72:	4450      	add	r0, sl
 801ac74:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ac78:	4431      	add	r1, r6
 801ac7a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ac7e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ac82:	4549      	cmp	r1, r9
 801ac84:	db08      	blt.n	801ac98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ac86:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ac8a:	3001      	adds	r0, #1
 801ac8c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ac90:	eba1 0109 	sub.w	r1, r1, r9
 801ac94:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ac98:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ac9c:	f04f 0801 	mov.w	r8, #1
 801aca0:	e7e3      	b.n	801ac6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801aca2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801aca4:	4450      	add	r0, sl
 801aca6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801acaa:	4431      	add	r1, r6
 801acac:	ee77 7a84 	vadd.f32	s15, s15, s8
 801acb0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801acb4:	4541      	cmp	r1, r8
 801acb6:	db08      	blt.n	801acca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801acb8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801acbc:	3001      	adds	r0, #1
 801acbe:	ee37 7a25 	vadd.f32	s14, s14, s11
 801acc2:	eba1 0108 	sub.w	r1, r1, r8
 801acc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801acca:	3f01      	subs	r7, #1
 801accc:	f04f 0901 	mov.w	r9, #1
 801acd0:	e79e      	b.n	801ac10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801acd2:	449c      	add	ip, r3
 801acd4:	1aff      	subs	r7, r7, r3
 801acd6:	f1b8 0f00 	cmp.w	r8, #0
 801acda:	d009      	beq.n	801acf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801acdc:	9019      	str	r0, [sp, #100]	; 0x64
 801acde:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ace2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ace6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801acea:	911d      	str	r1, [sp, #116]	; 0x74
 801acec:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801acf0:	1ad2      	subs	r2, r2, r3
 801acf2:	e6b5      	b.n	801aa60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801acf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	b923      	cbnz	r3, 801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801acfa:	4b04      	ldr	r3, [pc, #16]	; (801ad0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801acfc:	6818      	ldr	r0, [r3, #0]
 801acfe:	6803      	ldr	r3, [r0, #0]
 801ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad02:	4798      	blx	r3
 801ad04:	b05b      	add	sp, #364	; 0x16c
 801ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad0a:	bf00      	nop
 801ad0c:	200155e8 	.word	0x200155e8

0801ad10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801ad10:	b570      	push	{r4, r5, r6, lr}
 801ad12:	4604      	mov	r4, r0
 801ad14:	2500      	movs	r5, #0
 801ad16:	9804      	ldr	r0, [sp, #16]
 801ad18:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ad1c:	8025      	strh	r5, [r4, #0]
 801ad1e:	6061      	str	r1, [r4, #4]
 801ad20:	7223      	strb	r3, [r4, #8]
 801ad22:	7266      	strb	r6, [r4, #9]
 801ad24:	60e0      	str	r0, [r4, #12]
 801ad26:	8222      	strh	r2, [r4, #16]
 801ad28:	8265      	strh	r5, [r4, #18]
 801ad2a:	82a5      	strh	r5, [r4, #20]
 801ad2c:	82e5      	strh	r5, [r4, #22]
 801ad2e:	8325      	strh	r5, [r4, #24]
 801ad30:	8365      	strh	r5, [r4, #26]
 801ad32:	83a5      	strh	r5, [r4, #28]
 801ad34:	77a5      	strb	r5, [r4, #30]
 801ad36:	b32e      	cbz	r6, 801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801ad38:	6803      	ldr	r3, [r0, #0]
 801ad3a:	695b      	ldr	r3, [r3, #20]
 801ad3c:	4798      	blx	r3
 801ad3e:	4606      	mov	r6, r0
 801ad40:	b300      	cbz	r0, 801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801ad42:	68e0      	ldr	r0, [r4, #12]
 801ad44:	4631      	mov	r1, r6
 801ad46:	6803      	ldr	r3, [r0, #0]
 801ad48:	68db      	ldr	r3, [r3, #12]
 801ad4a:	4798      	blx	r3
 801ad4c:	4605      	mov	r5, r0
 801ad4e:	b1c8      	cbz	r0, 801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801ad50:	7b43      	ldrb	r3, [r0, #13]
 801ad52:	7a82      	ldrb	r2, [r0, #10]
 801ad54:	005b      	lsls	r3, r3, #1
 801ad56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad5a:	4313      	orrs	r3, r2
 801ad5c:	83a3      	strh	r3, [r4, #28]
 801ad5e:	7a63      	ldrb	r3, [r4, #9]
 801ad60:	2b04      	cmp	r3, #4
 801ad62:	d10f      	bne.n	801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801ad64:	68e0      	ldr	r0, [r4, #12]
 801ad66:	462a      	mov	r2, r5
 801ad68:	4631      	mov	r1, r6
 801ad6a:	6803      	ldr	r3, [r0, #0]
 801ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad6e:	4798      	blx	r3
 801ad70:	7b6b      	ldrb	r3, [r5, #13]
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad78:	7aab      	ldrb	r3, [r5, #10]
 801ad7a:	4313      	orrs	r3, r2
 801ad7c:	4418      	add	r0, r3
 801ad7e:	8ba3      	ldrh	r3, [r4, #28]
 801ad80:	4418      	add	r0, r3
 801ad82:	83a0      	strh	r0, [r4, #28]
 801ad84:	4620      	mov	r0, r4
 801ad86:	bd70      	pop	{r4, r5, r6, pc}

0801ad88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	2400      	movs	r4, #0
 801ad8e:	b085      	sub	sp, #20
 801ad90:	4681      	mov	r9, r0
 801ad92:	4688      	mov	r8, r1
 801ad94:	4692      	mov	sl, r2
 801ad96:	469b      	mov	fp, r3
 801ad98:	4627      	mov	r7, r4
 801ad9a:	4625      	mov	r5, r4
 801ad9c:	4626      	mov	r6, r4
 801ad9e:	4554      	cmp	r4, sl
 801ada0:	da2a      	bge.n	801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ada2:	2300      	movs	r3, #0
 801ada4:	9303      	str	r3, [sp, #12]
 801ada6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801adaa:	429d      	cmp	r5, r3
 801adac:	d004      	beq.n	801adb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801adae:	f242 030b 	movw	r3, #8203	; 0x200b
 801adb2:	429d      	cmp	r5, r3
 801adb4:	bf18      	it	ne
 801adb6:	462f      	movne	r7, r5
 801adb8:	ab03      	add	r3, sp, #12
 801adba:	4642      	mov	r2, r8
 801adbc:	4659      	mov	r1, fp
 801adbe:	4648      	mov	r0, r9
 801adc0:	f002 fecc 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adc4:	4605      	mov	r5, r0
 801adc6:	b1b8      	cbz	r0, 801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801adc8:	280a      	cmp	r0, #10
 801adca:	d015      	beq.n	801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801adcc:	9a03      	ldr	r2, [sp, #12]
 801adce:	b18a      	cbz	r2, 801adf4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801add0:	7b50      	ldrb	r0, [r2, #13]
 801add2:	4639      	mov	r1, r7
 801add4:	7a93      	ldrb	r3, [r2, #10]
 801add6:	0040      	lsls	r0, r0, #1
 801add8:	8895      	ldrh	r5, [r2, #4]
 801adda:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801adde:	4303      	orrs	r3, r0
 801ade0:	4640      	mov	r0, r8
 801ade2:	9301      	str	r3, [sp, #4]
 801ade4:	f8d8 3000 	ldr.w	r3, [r8]
 801ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801adea:	4798      	blx	r3
 801adec:	9b01      	ldr	r3, [sp, #4]
 801adee:	4418      	add	r0, r3
 801adf0:	4406      	add	r6, r0
 801adf2:	b2b6      	uxth	r6, r6
 801adf4:	3401      	adds	r4, #1
 801adf6:	e7d2      	b.n	801ad9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801adf8:	4630      	mov	r0, r6
 801adfa:	b005      	add	sp, #20
 801adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ae00:	2a02      	cmp	r2, #2
 801ae02:	b530      	push	{r4, r5, lr}
 801ae04:	d011      	beq.n	801ae2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ae06:	2a03      	cmp	r2, #3
 801ae08:	d01c      	beq.n	801ae44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ae0a:	2a01      	cmp	r2, #1
 801ae0c:	d10c      	bne.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ae0e:	888b      	ldrh	r3, [r1, #4]
 801ae10:	8801      	ldrh	r1, [r0, #0]
 801ae12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ae16:	1a5b      	subs	r3, r3, r1
 801ae18:	8844      	ldrh	r4, [r0, #2]
 801ae1a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	8004      	strh	r4, [r0, #0]
 801ae22:	8081      	strh	r1, [r0, #4]
 801ae24:	8043      	strh	r3, [r0, #2]
 801ae26:	80c2      	strh	r2, [r0, #6]
 801ae28:	bd30      	pop	{r4, r5, pc}
 801ae2a:	88cb      	ldrh	r3, [r1, #6]
 801ae2c:	8842      	ldrh	r2, [r0, #2]
 801ae2e:	1a9b      	subs	r3, r3, r2
 801ae30:	88c2      	ldrh	r2, [r0, #6]
 801ae32:	1a9b      	subs	r3, r3, r2
 801ae34:	888a      	ldrh	r2, [r1, #4]
 801ae36:	8801      	ldrh	r1, [r0, #0]
 801ae38:	8043      	strh	r3, [r0, #2]
 801ae3a:	1a52      	subs	r2, r2, r1
 801ae3c:	8881      	ldrh	r1, [r0, #4]
 801ae3e:	1a52      	subs	r2, r2, r1
 801ae40:	8002      	strh	r2, [r0, #0]
 801ae42:	e7f1      	b.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ae44:	88cb      	ldrh	r3, [r1, #6]
 801ae46:	8841      	ldrh	r1, [r0, #2]
 801ae48:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801ae4c:	1a5b      	subs	r3, r3, r1
 801ae4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ae52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ae56:	1a9b      	subs	r3, r3, r2
 801ae58:	8045      	strh	r5, [r0, #2]
 801ae5a:	8082      	strh	r2, [r0, #4]
 801ae5c:	8003      	strh	r3, [r0, #0]
 801ae5e:	80c4      	strh	r4, [r0, #6]
 801ae60:	e7e2      	b.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801ae62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801ae62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae66:	b09f      	sub	sp, #124	; 0x7c
 801ae68:	9116      	str	r1, [sp, #88]	; 0x58
 801ae6a:	9317      	str	r3, [sp, #92]	; 0x5c
 801ae6c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ae6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ae70:	8809      	ldrh	r1, [r1, #0]
 801ae72:	889b      	ldrh	r3, [r3, #4]
 801ae74:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801ae78:	440b      	add	r3, r1
 801ae7a:	9212      	str	r2, [sp, #72]	; 0x48
 801ae7c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801ae80:	b21b      	sxth	r3, r3
 801ae82:	9011      	str	r0, [sp, #68]	; 0x44
 801ae84:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801ae88:	9310      	str	r3, [sp, #64]	; 0x40
 801ae8a:	f8d8 3000 	ldr.w	r3, [r8]
 801ae8e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801ae92:	7a59      	ldrb	r1, [r3, #9]
 801ae94:	7a1b      	ldrb	r3, [r3, #8]
 801ae96:	9114      	str	r1, [sp, #80]	; 0x50
 801ae98:	9315      	str	r3, [sp, #84]	; 0x54
 801ae9a:	2a00      	cmp	r2, #0
 801ae9c:	d06a      	beq.n	801af74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801ae9e:	f898 3010 	ldrb.w	r3, [r8, #16]
 801aea2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801aea4:	2b04      	cmp	r3, #4
 801aea6:	bf14      	ite	ne
 801aea8:	2301      	movne	r3, #1
 801aeaa:	2302      	moveq	r3, #2
 801aeac:	4413      	add	r3, r2
 801aeae:	f04f 0900 	mov.w	r9, #0
 801aeb2:	930f      	str	r3, [sp, #60]	; 0x3c
 801aeb4:	464c      	mov	r4, r9
 801aeb6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801aeba:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801aebe:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801aec2:	4293      	cmp	r3, r2
 801aec4:	f280 808f 	bge.w	801afe6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801aec8:	2300      	movs	r3, #0
 801aeca:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801aece:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801aed2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aed6:	429c      	cmp	r4, r3
 801aed8:	d006      	beq.n	801aee8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801aeda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aedc:	f242 020b 	movw	r2, #8203	; 0x200b
 801aee0:	4294      	cmp	r4, r2
 801aee2:	bf18      	it	ne
 801aee4:	4623      	movne	r3, r4
 801aee6:	930d      	str	r3, [sp, #52]	; 0x34
 801aee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aeea:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801aeec:	f8d8 2000 	ldr.w	r2, [r8]
 801aef0:	428b      	cmp	r3, r1
 801aef2:	db41      	blt.n	801af78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801aef4:	6813      	ldr	r3, [r2, #0]
 801aef6:	4610      	mov	r0, r2
 801aef8:	695b      	ldr	r3, [r3, #20]
 801aefa:	4798      	blx	r3
 801aefc:	4604      	mov	r4, r0
 801aefe:	f8d8 0000 	ldr.w	r0, [r8]
 801af02:	aa1d      	add	r2, sp, #116	; 0x74
 801af04:	4621      	mov	r1, r4
 801af06:	6803      	ldr	r3, [r0, #0]
 801af08:	689e      	ldr	r6, [r3, #8]
 801af0a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801af0e:	47b0      	blx	r6
 801af10:	901c      	str	r0, [sp, #112]	; 0x70
 801af12:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af16:	429c      	cmp	r4, r3
 801af18:	f000 80ea 	beq.w	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801af1c:	f242 030b 	movw	r3, #8203	; 0x200b
 801af20:	429c      	cmp	r4, r3
 801af22:	f000 80e5 	beq.w	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801af26:	2c00      	cmp	r4, #0
 801af28:	f000 80f7 	beq.w	801b11a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801af2c:	2c0a      	cmp	r4, #10
 801af2e:	d060      	beq.n	801aff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801af30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801af32:	b36a      	cbz	r2, 801af90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801af34:	8894      	ldrh	r4, [r2, #4]
 801af36:	f1bb 0f00 	cmp.w	fp, #0
 801af3a:	d03b      	beq.n	801afb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801af3c:	f892 900d 	ldrb.w	r9, [r2, #13]
 801af40:	f1bb 0f01 	cmp.w	fp, #1
 801af44:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801af48:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801af4c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801af50:	ea49 0903 	orr.w	r9, r9, r3
 801af54:	d134      	bne.n	801afc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801af56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af58:	eba5 0509 	sub.w	r5, r5, r9
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d14f      	bne.n	801b000 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801af60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af62:	eb09 0305 	add.w	r3, r9, r5
 801af66:	4413      	add	r3, r2
 801af68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801af6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801af6e:	4293      	cmp	r3, r2
 801af70:	da51      	bge.n	801b016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801af72:	e038      	b.n	801afe6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801af74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801af76:	e79a      	b.n	801aeae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801af78:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801af7c:	4659      	mov	r1, fp
 801af7e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801af80:	9301      	str	r3, [sp, #4]
 801af82:	ab1d      	add	r3, sp, #116	; 0x74
 801af84:	9300      	str	r3, [sp, #0]
 801af86:	ab1c      	add	r3, sp, #112	; 0x70
 801af88:	f002 fe31 	bl	801dbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801af8c:	4604      	mov	r4, r0
 801af8e:	e7c0      	b.n	801af12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801af90:	f8d8 0000 	ldr.w	r0, [r8]
 801af94:	6803      	ldr	r3, [r0, #0]
 801af96:	691b      	ldr	r3, [r3, #16]
 801af98:	4798      	blx	r3
 801af9a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af9e:	4298      	cmp	r0, r3
 801afa0:	f000 80a6 	beq.w	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801afa4:	f242 030b 	movw	r3, #8203	; 0x200b
 801afa8:	4298      	cmp	r0, r3
 801afaa:	f000 80a1 	beq.w	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801afae:	f1bb 0f00 	cmp.w	fp, #0
 801afb2:	d100      	bne.n	801afb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801afb4:	444d      	add	r5, r9
 801afb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801afb8:	2a00      	cmp	r2, #0
 801afba:	d1bf      	bne.n	801af3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801afbc:	4691      	mov	r9, r2
 801afbe:	e097      	b.n	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801afc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	f000 80ab 	beq.w	801b11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801afc8:	f1bb 0f00 	cmp.w	fp, #0
 801afcc:	d118      	bne.n	801b000 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801afce:	f8d8 0000 	ldr.w	r0, [r8]
 801afd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801afd4:	6803      	ldr	r3, [r0, #0]
 801afd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afd8:	4798      	blx	r3
 801afda:	4405      	add	r5, r0
 801afdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801afde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801afe0:	1aeb      	subs	r3, r5, r3
 801afe2:	4293      	cmp	r3, r2
 801afe4:	dd17      	ble.n	801b016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801afe6:	2c00      	cmp	r4, #0
 801afe8:	f000 8097 	beq.w	801b11a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801afec:	2c0a      	cmp	r4, #10
 801afee:	f040 8085 	bne.w	801b0fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801aff2:	240a      	movs	r4, #10
 801aff4:	fab4 f084 	clz	r0, r4
 801aff8:	0940      	lsrs	r0, r0, #5
 801affa:	b01f      	add	sp, #124	; 0x7c
 801affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b000:	f8d8 0000 	ldr.w	r0, [r8]
 801b004:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b006:	6803      	ldr	r3, [r0, #0]
 801b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b00a:	4798      	blx	r3
 801b00c:	f1bb 0f01 	cmp.w	fp, #1
 801b010:	eba5 0500 	sub.w	r5, r5, r0
 801b014:	d0a4      	beq.n	801af60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801b016:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b018:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b01a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b01e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b022:	7b43      	ldrb	r3, [r0, #13]
 801b024:	4429      	add	r1, r5
 801b026:	015b      	lsls	r3, r3, #5
 801b028:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b02c:	7983      	ldrb	r3, [r0, #6]
 801b02e:	4313      	orrs	r3, r2
 801b030:	440b      	add	r3, r1
 801b032:	42b3      	cmp	r3, r6
 801b034:	db5c      	blt.n	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801b036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b038:	4299      	cmp	r1, r3
 801b03a:	da59      	bge.n	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801b03c:	f8d8 0000 	ldr.w	r0, [r8]
 801b040:	42ae      	cmp	r6, r5
 801b042:	6803      	ldr	r3, [r0, #0]
 801b044:	bfcc      	ite	gt
 801b046:	1b76      	subgt	r6, r6, r5
 801b048:	2600      	movle	r6, #0
 801b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b04c:	bfc8      	it	gt
 801b04e:	b2b6      	uxthgt	r6, r6
 801b050:	4798      	blx	r3
 801b052:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b054:	7b5a      	ldrb	r2, [r3, #13]
 801b056:	00d1      	lsls	r1, r2, #3
 801b058:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b05c:	7a19      	ldrb	r1, [r3, #8]
 801b05e:	4339      	orrs	r1, r7
 801b060:	0657      	lsls	r7, r2, #25
 801b062:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b064:	bf48      	it	mi
 801b066:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b06a:	4407      	add	r7, r0
 801b06c:	bf48      	it	mi
 801b06e:	b209      	sxthmi	r1, r1
 801b070:	1a7f      	subs	r7, r7, r1
 801b072:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b074:	b2bf      	uxth	r7, r7
 801b076:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b07a:	fa0f fa87 	sxth.w	sl, r7
 801b07e:	4551      	cmp	r1, sl
 801b080:	dd3a      	ble.n	801b0f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b082:	0112      	lsls	r2, r2, #4
 801b084:	79d8      	ldrb	r0, [r3, #7]
 801b086:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b08a:	4302      	orrs	r2, r0
 801b08c:	4492      	add	sl, r2
 801b08e:	4551      	cmp	r1, sl
 801b090:	dc2e      	bgt.n	801b0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801b092:	1bcf      	subs	r7, r1, r7
 801b094:	468a      	mov	sl, r1
 801b096:	b2bf      	uxth	r7, r7
 801b098:	9319      	str	r3, [sp, #100]	; 0x64
 801b09a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b09c:	f8d8 0000 	ldr.w	r0, [r8]
 801b0a0:	681a      	ldr	r2, [r3, #0]
 801b0a2:	6801      	ldr	r1, [r0, #0]
 801b0a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801b0a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b0a8:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0aa:	9218      	str	r2, [sp, #96]	; 0x60
 801b0ac:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b0ae:	4788      	blx	r1
 801b0b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b0b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b0b6:	910b      	str	r1, [sp, #44]	; 0x2c
 801b0b8:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b0bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b0be:	910a      	str	r1, [sp, #40]	; 0x28
 801b0c0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b0c4:	9109      	str	r1, [sp, #36]	; 0x24
 801b0c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b0ca:	9305      	str	r3, [sp, #20]
 801b0cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b0ce:	9206      	str	r2, [sp, #24]
 801b0d0:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b0d4:	442e      	add	r6, r5
 801b0d6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b0da:	b236      	sxth	r6, r6
 801b0dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b0de:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b0e2:	9600      	str	r6, [sp, #0]
 801b0e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b0e6:	681a      	ldr	r2, [r3, #0]
 801b0e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b0ee:	47b0      	blx	r6
 801b0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0f2:	3301      	adds	r3, #1
 801b0f4:	930e      	str	r3, [sp, #56]	; 0x38
 801b0f6:	e6e2      	b.n	801aebe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801b0f8:	2700      	movs	r7, #0
 801b0fa:	e7cd      	b.n	801b098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801b0fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b0fe:	3501      	adds	r5, #1
 801b100:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b102:	429d      	cmp	r5, r3
 801b104:	f6bf af76 	bge.w	801aff4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b108:	4659      	mov	r1, fp
 801b10a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b10c:	f7ea f844 	bl	8005198 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b110:	4604      	mov	r4, r0
 801b112:	b110      	cbz	r0, 801b11a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801b114:	280a      	cmp	r0, #10
 801b116:	d1f2      	bne.n	801b0fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801b118:	e76b      	b.n	801aff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801b11a:	2400      	movs	r4, #0
 801b11c:	e76a      	b.n	801aff4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b11e:	f1bb 0f00 	cmp.w	fp, #0
 801b122:	f43f af5b 	beq.w	801afdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801b126:	e776      	b.n	801b016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801b128 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b128:	b530      	push	{r4, r5, lr}
 801b12a:	8a44      	ldrh	r4, [r0, #18]
 801b12c:	8ac5      	ldrh	r5, [r0, #22]
 801b12e:	82c3      	strh	r3, [r0, #22]
 801b130:	442c      	add	r4, r5
 801b132:	1ae4      	subs	r4, r4, r3
 801b134:	8b03      	ldrh	r3, [r0, #24]
 801b136:	8244      	strh	r4, [r0, #18]
 801b138:	8a84      	ldrh	r4, [r0, #20]
 801b13a:	4422      	add	r2, r4
 801b13c:	440c      	add	r4, r1
 801b13e:	1a59      	subs	r1, r3, r1
 801b140:	8342      	strh	r2, [r0, #26]
 801b142:	8284      	strh	r4, [r0, #20]
 801b144:	8301      	strh	r1, [r0, #24]
 801b146:	bd30      	pop	{r4, r5, pc}

0801b148 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b14c:	7a43      	ldrb	r3, [r0, #9]
 801b14e:	b087      	sub	sp, #28
 801b150:	4604      	mov	r4, r0
 801b152:	460f      	mov	r7, r1
 801b154:	1eda      	subs	r2, r3, #3
 801b156:	b2d2      	uxtb	r2, r2
 801b158:	2900      	cmp	r1, #0
 801b15a:	d036      	beq.n	801b1ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b15c:	2a01      	cmp	r2, #1
 801b15e:	d932      	bls.n	801b1c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b160:	1e58      	subs	r0, r3, #1
 801b162:	f1d0 0b00 	rsbs	fp, r0, #0
 801b166:	eb4b 0b00 	adc.w	fp, fp, r0
 801b16a:	1e99      	subs	r1, r3, #2
 801b16c:	424b      	negs	r3, r1
 801b16e:	414b      	adcs	r3, r1
 801b170:	9303      	str	r3, [sp, #12]
 801b172:	2300      	movs	r3, #0
 801b174:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b178:	2500      	movs	r5, #0
 801b17a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b17e:	46a9      	mov	r9, r5
 801b180:	8265      	strh	r5, [r4, #18]
 801b182:	82a5      	strh	r5, [r4, #20]
 801b184:	2300      	movs	r3, #0
 801b186:	9305      	str	r3, [sp, #20]
 801b188:	8823      	ldrh	r3, [r4, #0]
 801b18a:	2b20      	cmp	r3, #32
 801b18c:	d02b      	beq.n	801b1e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b18e:	eba3 020a 	sub.w	r2, r3, sl
 801b192:	4256      	negs	r6, r2
 801b194:	4156      	adcs	r6, r2
 801b196:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b19a:	4293      	cmp	r3, r2
 801b19c:	d004      	beq.n	801b1a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b19e:	4553      	cmp	r3, sl
 801b1a0:	bf16      	itet	ne
 801b1a2:	4699      	movne	r9, r3
 801b1a4:	2601      	moveq	r6, #1
 801b1a6:	2600      	movne	r6, #0
 801b1a8:	ab05      	add	r3, sp, #20
 801b1aa:	68e2      	ldr	r2, [r4, #12]
 801b1ac:	7a21      	ldrb	r1, [r4, #8]
 801b1ae:	6860      	ldr	r0, [r4, #4]
 801b1b0:	f002 fcd4 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1b4:	8020      	strh	r0, [r4, #0]
 801b1b6:	b9c8      	cbnz	r0, 801b1ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b1b8:	8b22      	ldrh	r2, [r4, #24]
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	4611      	mov	r1, r2
 801b1be:	4620      	mov	r0, r4
 801b1c0:	f7ff ffb2 	bl	801b128 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b1c4:	e066      	b.n	801b294 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b1c6:	468b      	mov	fp, r1
 801b1c8:	e7cf      	b.n	801b16a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b1ca:	3b01      	subs	r3, #1
 801b1cc:	2a01      	cmp	r2, #1
 801b1ce:	9103      	str	r1, [sp, #12]
 801b1d0:	468b      	mov	fp, r1
 801b1d2:	bf8c      	ite	hi
 801b1d4:	2200      	movhi	r2, #0
 801b1d6:	2201      	movls	r2, #1
 801b1d8:	2b01      	cmp	r3, #1
 801b1da:	9202      	str	r2, [sp, #8]
 801b1dc:	bf8c      	ite	hi
 801b1de:	2300      	movhi	r3, #0
 801b1e0:	2301      	movls	r3, #1
 801b1e2:	9301      	str	r3, [sp, #4]
 801b1e4:	e7c8      	b.n	801b178 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b1e6:	4699      	mov	r9, r3
 801b1e8:	2601      	movs	r6, #1
 801b1ea:	e7dd      	b.n	801b1a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b1ec:	8ae3      	ldrh	r3, [r4, #22]
 801b1ee:	280a      	cmp	r0, #10
 801b1f0:	f103 0301 	add.w	r3, r3, #1
 801b1f4:	82e3      	strh	r3, [r4, #22]
 801b1f6:	d0df      	beq.n	801b1b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b1f8:	9a05      	ldr	r2, [sp, #20]
 801b1fa:	bb42      	cbnz	r2, 801b24e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b1fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b200:	4298      	cmp	r0, r3
 801b202:	d001      	beq.n	801b208 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b204:	4550      	cmp	r0, sl
 801b206:	d1bd      	bne.n	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b208:	8823      	ldrh	r3, [r4, #0]
 801b20a:	8b21      	ldrh	r1, [r4, #24]
 801b20c:	2b20      	cmp	r3, #32
 801b20e:	d001      	beq.n	801b214 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b210:	4553      	cmp	r3, sl
 801b212:	d131      	bne.n	801b278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b214:	2e00      	cmp	r6, #0
 801b216:	bf0a      	itet	eq
 801b218:	460d      	moveq	r5, r1
 801b21a:	4630      	movne	r0, r6
 801b21c:	2001      	moveq	r0, #1
 801b21e:	440a      	add	r2, r1
 801b220:	8aa3      	ldrh	r3, [r4, #20]
 801b222:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b226:	b292      	uxth	r2, r2
 801b228:	8322      	strh	r2, [r4, #24]
 801b22a:	4413      	add	r3, r2
 801b22c:	2f00      	cmp	r7, #0
 801b22e:	d03a      	beq.n	801b2a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b230:	f1bb 0f00 	cmp.w	fp, #0
 801b234:	d102      	bne.n	801b23c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b236:	9903      	ldr	r1, [sp, #12]
 801b238:	b301      	cbz	r1, 801b27c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b23a:	b1f8      	cbz	r0, 801b27c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b23c:	8ba1      	ldrh	r1, [r4, #28]
 801b23e:	4419      	add	r1, r3
 801b240:	458c      	cmp	ip, r1
 801b242:	da2a      	bge.n	801b29a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b244:	8a61      	ldrh	r1, [r4, #18]
 801b246:	b341      	cbz	r1, 801b29a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b248:	4563      	cmp	r3, ip
 801b24a:	dd9b      	ble.n	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b24c:	e01c      	b.n	801b288 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b24e:	8893      	ldrh	r3, [r2, #4]
 801b250:	4649      	mov	r1, r9
 801b252:	8023      	strh	r3, [r4, #0]
 801b254:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b258:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b25c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b260:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b264:	ea48 0800 	orr.w	r8, r8, r0
 801b268:	68e0      	ldr	r0, [r4, #12]
 801b26a:	6803      	ldr	r3, [r0, #0]
 801b26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b26e:	4798      	blx	r3
 801b270:	eb08 0200 	add.w	r2, r8, r0
 801b274:	b292      	uxth	r2, r2
 801b276:	e7c7      	b.n	801b208 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b278:	2000      	movs	r0, #0
 801b27a:	e7d0      	b.n	801b21e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b27c:	4563      	cmp	r3, ip
 801b27e:	dd81      	ble.n	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b280:	8a63      	ldrh	r3, [r4, #18]
 801b282:	2b00      	cmp	r3, #0
 801b284:	f43f af7e 	beq.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b288:	2301      	movs	r3, #1
 801b28a:	8ba2      	ldrh	r2, [r4, #28]
 801b28c:	77a3      	strb	r3, [r4, #30]
 801b28e:	8b63      	ldrh	r3, [r4, #26]
 801b290:	4413      	add	r3, r2
 801b292:	8363      	strh	r3, [r4, #26]
 801b294:	b007      	add	sp, #28
 801b296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b29a:	2300      	movs	r3, #0
 801b29c:	4611      	mov	r1, r2
 801b29e:	4620      	mov	r0, r4
 801b2a0:	f7ff ff42 	bl	801b128 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b2a4:	e76e      	b.n	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2a6:	4563      	cmp	r3, ip
 801b2a8:	dd14      	ble.n	801b2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b2aa:	9b02      	ldr	r3, [sp, #8]
 801b2ac:	b113      	cbz	r3, 801b2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	460a      	mov	r2, r1
 801b2b2:	e783      	b.n	801b1bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b2b4:	9b01      	ldr	r3, [sp, #4]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	f43f af64 	beq.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2bc:	2800      	cmp	r0, #0
 801b2be:	f47f af61 	bne.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2c2:	b116      	cbz	r6, 801b2ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	462a      	mov	r2, r5
 801b2c8:	e779      	b.n	801b1be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b2ca:	8a63      	ldrh	r3, [r4, #18]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	f43f af59 	beq.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2d2:	e7df      	b.n	801b294 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b2d4:	2800      	cmp	r0, #0
 801b2d6:	f47f af55 	bne.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2da:	2e00      	cmp	r6, #0
 801b2dc:	f43f af52 	beq.w	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2e0:	2301      	movs	r3, #1
 801b2e2:	462a      	mov	r2, r5
 801b2e4:	e7db      	b.n	801b29e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b2e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b2e6:	b530      	push	{r4, r5, lr}
 801b2e8:	4605      	mov	r5, r0
 801b2ea:	b08b      	sub	sp, #44	; 0x2c
 801b2ec:	b191      	cbz	r1, 801b314 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b2ee:	2401      	movs	r4, #1
 801b2f0:	e9cd 3100 	strd	r3, r1, [sp]
 801b2f4:	4613      	mov	r3, r2
 801b2f6:	4601      	mov	r1, r0
 801b2f8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b2fc:	a802      	add	r0, sp, #8
 801b2fe:	f7ff fd07 	bl	801ad10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b302:	2100      	movs	r1, #0
 801b304:	a802      	add	r0, sp, #8
 801b306:	f7ff ff1f 	bl	801b148 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b30a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b30e:	b163      	cbz	r3, 801b32a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b310:	3401      	adds	r4, #1
 801b312:	e7f6      	b.n	801b302 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b314:	2401      	movs	r4, #1
 801b316:	f002 fced 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b31a:	280a      	cmp	r0, #10
 801b31c:	4628      	mov	r0, r5
 801b31e:	bf08      	it	eq
 801b320:	3401      	addeq	r4, #1
 801b322:	f002 fce7 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b326:	2800      	cmp	r0, #0
 801b328:	d1f7      	bne.n	801b31a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b32a:	b2a0      	uxth	r0, r4
 801b32c:	b00b      	add	sp, #44	; 0x2c
 801b32e:	bd30      	pop	{r4, r5, pc}

0801b330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b334:	b0e5      	sub	sp, #404	; 0x194
 801b336:	4689      	mov	r9, r1
 801b338:	461c      	mov	r4, r3
 801b33a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801b33e:	900a      	str	r0, [sp, #40]	; 0x28
 801b340:	f1ba 0f00 	cmp.w	sl, #0
 801b344:	f000 80b4 	beq.w	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	f000 80b0 	beq.w	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b350:	7ba3      	ldrb	r3, [r4, #14]
 801b352:	2b00      	cmp	r3, #0
 801b354:	f000 80ac 	beq.w	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b358:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801b35c:	6810      	ldr	r0, [r2, #0]
 801b35e:	6851      	ldr	r1, [r2, #4]
 801b360:	2500      	movs	r5, #0
 801b362:	4643      	mov	r3, r8
 801b364:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b368:	950f      	str	r5, [sp, #60]	; 0x3c
 801b36a:	af19      	add	r7, sp, #100	; 0x64
 801b36c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b370:	79a2      	ldrb	r2, [r4, #6]
 801b372:	c303      	stmia	r3!, {r0, r1}
 801b374:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b378:	a90f      	add	r1, sp, #60	; 0x3c
 801b37a:	4640      	mov	r0, r8
 801b37c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b380:	f7ff fd3e 	bl	801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b384:	a90f      	add	r1, sp, #60	; 0x3c
 801b386:	79a2      	ldrb	r2, [r4, #6]
 801b388:	4608      	mov	r0, r1
 801b38a:	f7ff fd39 	bl	801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b38e:	4638      	mov	r0, r7
 801b390:	f002 f884 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801b394:	6820      	ldr	r0, [r4, #0]
 801b396:	6803      	ldr	r3, [r0, #0]
 801b398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b39a:	4798      	blx	r3
 801b39c:	4606      	mov	r6, r0
 801b39e:	6820      	ldr	r0, [r4, #0]
 801b3a0:	6803      	ldr	r3, [r0, #0]
 801b3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3a4:	4798      	blx	r3
 801b3a6:	4633      	mov	r3, r6
 801b3a8:	9000      	str	r0, [sp, #0]
 801b3aa:	4651      	mov	r1, sl
 801b3ac:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b3ae:	4638      	mov	r0, r7
 801b3b0:	f002 f8cf 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b3b4:	7923      	ldrb	r3, [r4, #4]
 801b3b6:	6820      	ldr	r0, [r4, #0]
 801b3b8:	9308      	str	r3, [sp, #32]
 801b3ba:	6803      	ldr	r3, [r0, #0]
 801b3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3be:	4798      	blx	r3
 801b3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3c4:	181e      	adds	r6, r3, r0
 801b3c6:	42ae      	cmp	r6, r5
 801b3c8:	dd06      	ble.n	801b3d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b3ca:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b3ce:	4282      	cmp	r2, r0
 801b3d0:	bfa4      	itt	ge
 801b3d2:	189d      	addge	r5, r3, r2
 801b3d4:	fb95 f5f6 	sdivge	r5, r5, r6
 801b3d8:	a832      	add	r0, sp, #200	; 0xc8
 801b3da:	f002 f85f 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801b3de:	7c23      	ldrb	r3, [r4, #16]
 801b3e0:	b17b      	cbz	r3, 801b402 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b3e2:	6820      	ldr	r0, [r4, #0]
 801b3e4:	6803      	ldr	r3, [r0, #0]
 801b3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3e8:	4798      	blx	r3
 801b3ea:	4683      	mov	fp, r0
 801b3ec:	6820      	ldr	r0, [r4, #0]
 801b3ee:	6803      	ldr	r3, [r0, #0]
 801b3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3f2:	4798      	blx	r3
 801b3f4:	465b      	mov	r3, fp
 801b3f6:	9000      	str	r0, [sp, #0]
 801b3f8:	4651      	mov	r1, sl
 801b3fa:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b3fc:	a832      	add	r0, sp, #200	; 0xc8
 801b3fe:	f002 f8a8 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b402:	7be1      	ldrb	r1, [r4, #15]
 801b404:	a811      	add	r0, sp, #68	; 0x44
 801b406:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b40a:	7963      	ldrb	r3, [r4, #5]
 801b40c:	1a52      	subs	r2, r2, r1
 801b40e:	7c21      	ldrb	r1, [r4, #16]
 801b410:	9101      	str	r1, [sp, #4]
 801b412:	b292      	uxth	r2, r2
 801b414:	6821      	ldr	r1, [r4, #0]
 801b416:	9100      	str	r1, [sp, #0]
 801b418:	a932      	add	r1, sp, #200	; 0xc8
 801b41a:	f7ff fc79 	bl	801ad10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b41e:	7c23      	ldrb	r3, [r4, #16]
 801b420:	b9bb      	cbnz	r3, 801b452 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b422:	fa1f fa86 	uxth.w	sl, r6
 801b426:	2d00      	cmp	r5, #0
 801b428:	dd45      	ble.n	801b4b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b42a:	4638      	mov	r0, r7
 801b42c:	f002 fc62 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b430:	2800      	cmp	r0, #0
 801b432:	d03d      	beq.n	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b434:	280a      	cmp	r0, #10
 801b436:	d1f6      	bne.n	801b426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b438:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b43c:	3d01      	subs	r5, #1
 801b43e:	4453      	add	r3, sl
 801b440:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b444:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b448:	eba3 030a 	sub.w	r3, r3, sl
 801b44c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b450:	e7e9      	b.n	801b426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b452:	0073      	lsls	r3, r6, #1
 801b454:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b458:	fa1f fa86 	uxth.w	sl, r6
 801b45c:	9309      	str	r3, [sp, #36]	; 0x24
 801b45e:	2d00      	cmp	r5, #0
 801b460:	dd29      	ble.n	801b4b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b462:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b466:	a811      	add	r0, sp, #68	; 0x44
 801b468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b46a:	428b      	cmp	r3, r1
 801b46c:	bfd4      	ite	le
 801b46e:	2100      	movle	r1, #0
 801b470:	2101      	movgt	r1, #1
 801b472:	f7ff fe69 	bl	801b148 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b476:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b47a:	3b01      	subs	r3, #1
 801b47c:	b29b      	uxth	r3, r3
 801b47e:	455b      	cmp	r3, fp
 801b480:	930b      	str	r3, [sp, #44]	; 0x2c
 801b482:	d005      	beq.n	801b490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b484:	7961      	ldrb	r1, [r4, #5]
 801b486:	4638      	mov	r0, r7
 801b488:	f7e9 fe86 	bl	8005198 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b48e:	e7f4      	b.n	801b47a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b490:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b494:	3d01      	subs	r5, #1
 801b496:	4453      	add	r3, sl
 801b498:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b49c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b4a0:	eba3 030a 	sub.w	r3, r3, sl
 801b4a4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b4a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d1d6      	bne.n	801b45e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b4b0:	b065      	add	sp, #404	; 0x194
 801b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4b6:	0075      	lsls	r5, r6, #1
 801b4b8:	f04f 0a00 	mov.w	sl, #0
 801b4bc:	7c23      	ldrb	r3, [r4, #16]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d066      	beq.n	801b590 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b4c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b4c6:	a811      	add	r0, sp, #68	; 0x44
 801b4c8:	428d      	cmp	r5, r1
 801b4ca:	bfd4      	ite	le
 801b4cc:	2100      	movle	r1, #0
 801b4ce:	2101      	movgt	r1, #1
 801b4d0:	f7ff fe3a 	bl	801b148 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b4d4:	9b08      	ldr	r3, [sp, #32]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d055      	beq.n	801b586 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801b4da:	f894 b010 	ldrb.w	fp, [r4, #16]
 801b4de:	2264      	movs	r2, #100	; 0x64
 801b4e0:	4639      	mov	r1, r7
 801b4e2:	a84b      	add	r0, sp, #300	; 0x12c
 801b4e4:	f00f fb14 	bl	802ab10 <memcpy>
 801b4e8:	f1bb 0f00 	cmp.w	fp, #0
 801b4ec:	d058      	beq.n	801b5a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801b4ee:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b4f2:	7922      	ldrb	r2, [r4, #4]
 801b4f4:	2a01      	cmp	r2, #1
 801b4f6:	d13c      	bne.n	801b572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801b4f8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801b4fc:	1ac0      	subs	r0, r0, r3
 801b4fe:	2302      	movs	r3, #2
 801b500:	fb90 f0f3 	sdiv	r0, r0, r3
 801b504:	b200      	sxth	r0, r0
 801b506:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b50a:	4418      	add	r0, r3
 801b50c:	7c23      	ldrb	r3, [r4, #16]
 801b50e:	b200      	sxth	r0, r0
 801b510:	2b00      	cmp	r3, #0
 801b512:	d03a      	beq.n	801b58a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801b514:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801b518:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801b51c:	9000      	str	r0, [sp, #0]
 801b51e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b522:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b524:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b528:	e9cd a703 	strd	sl, r7, [sp, #12]
 801b52c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b530:	464a      	mov	r2, r9
 801b532:	2100      	movs	r1, #0
 801b534:	f7ff fc95 	bl	801ae62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b538:	2800      	cmp	r0, #0
 801b53a:	d1b9      	bne.n	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b53c:	b2b2      	uxth	r2, r6
 801b53e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b542:	4611      	mov	r1, r2
 801b544:	4413      	add	r3, r2
 801b546:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b54a:	b21b      	sxth	r3, r3
 801b54c:	1a52      	subs	r2, r2, r1
 801b54e:	7c21      	ldrb	r1, [r4, #16]
 801b550:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b554:	b212      	sxth	r2, r2
 801b556:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b55a:	b109      	cbz	r1, 801b560 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801b55c:	42b2      	cmp	r2, r6
 801b55e:	dba7      	blt.n	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b560:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b564:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b568:	440a      	add	r2, r1
 801b56a:	b212      	sxth	r2, r2
 801b56c:	4293      	cmp	r3, r2
 801b56e:	dda5      	ble.n	801b4bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801b570:	e79e      	b.n	801b4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b572:	2a02      	cmp	r2, #2
 801b574:	d105      	bne.n	801b582 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801b576:	7be2      	ldrb	r2, [r4, #15]
 801b578:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801b57c:	1a80      	subs	r0, r0, r2
 801b57e:	1ac0      	subs	r0, r0, r3
 801b580:	e7c0      	b.n	801b504 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801b582:	2000      	movs	r0, #0
 801b584:	e7bf      	b.n	801b506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801b586:	7be0      	ldrb	r0, [r4, #15]
 801b588:	e7bd      	b.n	801b506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801b58a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b58e:	e7c3      	b.n	801b518 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801b590:	9b08      	ldr	r3, [sp, #32]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d0f7      	beq.n	801b586 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801b596:	2264      	movs	r2, #100	; 0x64
 801b598:	4639      	mov	r1, r7
 801b59a:	a84b      	add	r0, sp, #300	; 0x12c
 801b59c:	f00f fab8 	bl	802ab10 <memcpy>
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b5a6:	6821      	ldr	r1, [r4, #0]
 801b5a8:	a84b      	add	r0, sp, #300	; 0x12c
 801b5aa:	f7ff fbed 	bl	801ad88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b5ae:	b203      	sxth	r3, r0
 801b5b0:	e79f      	b.n	801b4f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801b5b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b5b2:	2b03      	cmp	r3, #3
 801b5b4:	d818      	bhi.n	801b5e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b5b6:	e8df f003 	tbb	[pc, r3]
 801b5ba:	0602      	.short	0x0602
 801b5bc:	130d      	.short	0x130d
 801b5be:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b5c2:	1850      	adds	r0, r2, r1
 801b5c4:	4770      	bx	lr
 801b5c6:	8803      	ldrh	r3, [r0, #0]
 801b5c8:	8880      	ldrh	r0, [r0, #4]
 801b5ca:	4418      	add	r0, r3
 801b5cc:	b200      	sxth	r0, r0
 801b5ce:	1a80      	subs	r0, r0, r2
 801b5d0:	3801      	subs	r0, #1
 801b5d2:	4770      	bx	lr
 801b5d4:	8803      	ldrh	r3, [r0, #0]
 801b5d6:	8880      	ldrh	r0, [r0, #4]
 801b5d8:	4418      	add	r0, r3
 801b5da:	b200      	sxth	r0, r0
 801b5dc:	1a40      	subs	r0, r0, r1
 801b5de:	e7f7      	b.n	801b5d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b5e0:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b5e4:	4410      	add	r0, r2
 801b5e6:	4770      	bx	lr
 801b5e8:	2000      	movs	r0, #0
 801b5ea:	4770      	bx	lr

0801b5ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b5ec:	2b03      	cmp	r3, #3
 801b5ee:	d817      	bhi.n	801b620 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b5f0:	e8df f003 	tbb	[pc, r3]
 801b5f4:	10090602 	.word	0x10090602
 801b5f8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b5fc:	1850      	adds	r0, r2, r1
 801b5fe:	4770      	bx	lr
 801b600:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b604:	e7fa      	b.n	801b5fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b606:	8843      	ldrh	r3, [r0, #2]
 801b608:	88c0      	ldrh	r0, [r0, #6]
 801b60a:	4418      	add	r0, r3
 801b60c:	b200      	sxth	r0, r0
 801b60e:	1a80      	subs	r0, r0, r2
 801b610:	3801      	subs	r0, #1
 801b612:	4770      	bx	lr
 801b614:	8843      	ldrh	r3, [r0, #2]
 801b616:	88c0      	ldrh	r0, [r0, #6]
 801b618:	4418      	add	r0, r3
 801b61a:	b200      	sxth	r0, r0
 801b61c:	1a40      	subs	r0, r0, r1
 801b61e:	e7f7      	b.n	801b610 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b620:	2000      	movs	r0, #0
 801b622:	4770      	bx	lr

0801b624 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b624:	4b01      	ldr	r3, [pc, #4]	; (801b62c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b626:	2200      	movs	r2, #0
 801b628:	601a      	str	r2, [r3, #0]
 801b62a:	4770      	bx	lr
 801b62c:	200155f0 	.word	0x200155f0

0801b630 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b630:	4603      	mov	r3, r0
 801b632:	b1c8      	cbz	r0, 801b668 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b634:	0c02      	lsrs	r2, r0, #16
 801b636:	0412      	lsls	r2, r2, #16
 801b638:	b9a2      	cbnz	r2, 801b664 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b63a:	0403      	lsls	r3, r0, #16
 801b63c:	2010      	movs	r0, #16
 801b63e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b642:	bf04      	itt	eq
 801b644:	021b      	lsleq	r3, r3, #8
 801b646:	3008      	addeq	r0, #8
 801b648:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b64c:	bf04      	itt	eq
 801b64e:	011b      	lsleq	r3, r3, #4
 801b650:	3004      	addeq	r0, #4
 801b652:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b656:	bf04      	itt	eq
 801b658:	009b      	lsleq	r3, r3, #2
 801b65a:	3002      	addeq	r0, #2
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	db04      	blt.n	801b66a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b660:	3001      	adds	r0, #1
 801b662:	4770      	bx	lr
 801b664:	2000      	movs	r0, #0
 801b666:	e7ea      	b.n	801b63e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b668:	2020      	movs	r0, #32
 801b66a:	4770      	bx	lr

0801b66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b670:	b087      	sub	sp, #28
 801b672:	4681      	mov	r9, r0
 801b674:	4698      	mov	r8, r3
 801b676:	4610      	mov	r0, r2
 801b678:	460d      	mov	r5, r1
 801b67a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b67e:	b981      	cbnz	r1, 801b6a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b680:	b14b      	cbz	r3, 801b696 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b682:	460b      	mov	r3, r1
 801b684:	464a      	mov	r2, r9
 801b686:	4641      	mov	r1, r8
 801b688:	e9cd 4700 	strd	r4, r7, [sp]
 801b68c:	f7ff ffee 	bl	801b66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b690:	b007      	add	sp, #28
 801b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b696:	f04f 33ff 	mov.w	r3, #4294967295
 801b69a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b69e:	603b      	str	r3, [r7, #0]
 801b6a0:	e7f6      	b.n	801b690 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b6a2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b6a6:	d107      	bne.n	801b6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b6a8:	fb09 f602 	mul.w	r6, r9, r2
 801b6ac:	fbb6 f0f4 	udiv	r0, r6, r4
 801b6b0:	fb04 6610 	mls	r6, r4, r0, r6
 801b6b4:	603e      	str	r6, [r7, #0]
 801b6b6:	e7eb      	b.n	801b690 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b6b8:	2601      	movs	r6, #1
 801b6ba:	fa09 fb01 	lsl.w	fp, r9, r1
 801b6be:	408e      	lsls	r6, r1
 801b6c0:	fbbb f3f4 	udiv	r3, fp, r4
 801b6c4:	3e01      	subs	r6, #1
 801b6c6:	9302      	str	r3, [sp, #8]
 801b6c8:	fb0a f303 	mul.w	r3, sl, r3
 801b6cc:	4016      	ands	r6, r2
 801b6ce:	9303      	str	r3, [sp, #12]
 801b6d0:	4630      	mov	r0, r6
 801b6d2:	f7ff ffad 	bl	801b630 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b6d6:	464a      	mov	r2, r9
 801b6d8:	460b      	mov	r3, r1
 801b6da:	4601      	mov	r1, r0
 801b6dc:	4630      	mov	r0, r6
 801b6de:	e9cd 4700 	strd	r4, r7, [sp]
 801b6e2:	f7ff ffc3 	bl	801b66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b6e6:	9b02      	ldr	r3, [sp, #8]
 801b6e8:	4606      	mov	r6, r0
 801b6ea:	eb05 0108 	add.w	r1, r5, r8
 801b6ee:	fb04 bb13 	mls	fp, r4, r3, fp
 801b6f2:	4658      	mov	r0, fp
 801b6f4:	f7ff ff9c 	bl	801b630 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b6f8:	ab05      	add	r3, sp, #20
 801b6fa:	465a      	mov	r2, fp
 801b6fc:	e9cd 4300 	strd	r4, r3, [sp]
 801b700:	4603      	mov	r3, r0
 801b702:	4650      	mov	r0, sl
 801b704:	f7ff ffb2 	bl	801b66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b708:	6839      	ldr	r1, [r7, #0]
 801b70a:	9a05      	ldr	r2, [sp, #20]
 801b70c:	9b03      	ldr	r3, [sp, #12]
 801b70e:	4411      	add	r1, r2
 801b710:	fbb1 f2f4 	udiv	r2, r1, r4
 801b714:	18d3      	adds	r3, r2, r3
 801b716:	fb04 1412 	mls	r4, r4, r2, r1
 801b71a:	441e      	add	r6, r3
 801b71c:	603c      	str	r4, [r7, #0]
 801b71e:	4430      	add	r0, r6
 801b720:	e7b6      	b.n	801b690 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b722 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b726:	b085      	sub	sp, #20
 801b728:	f1b0 0900 	subs.w	r9, r0, #0
 801b72c:	461d      	mov	r5, r3
 801b72e:	4617      	mov	r7, r2
 801b730:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b732:	bfbb      	ittet	lt
 801b734:	f1c9 0900 	rsblt	r9, r9, #0
 801b738:	f04f 36ff 	movlt.w	r6, #4294967295
 801b73c:	2601      	movge	r6, #1
 801b73e:	6823      	ldrlt	r3, [r4, #0]
 801b740:	bfbc      	itt	lt
 801b742:	425b      	neglt	r3, r3
 801b744:	6023      	strlt	r3, [r4, #0]
 801b746:	2a00      	cmp	r2, #0
 801b748:	da04      	bge.n	801b754 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b74a:	6823      	ldr	r3, [r4, #0]
 801b74c:	4257      	negs	r7, r2
 801b74e:	4276      	negs	r6, r6
 801b750:	425b      	negs	r3, r3
 801b752:	6023      	str	r3, [r4, #0]
 801b754:	2d00      	cmp	r5, #0
 801b756:	4638      	mov	r0, r7
 801b758:	bfba      	itte	lt
 801b75a:	426d      	neglt	r5, r5
 801b75c:	f04f 38ff 	movlt.w	r8, #4294967295
 801b760:	f04f 0801 	movge.w	r8, #1
 801b764:	f7ff ff64 	bl	801b630 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b768:	ab03      	add	r3, sp, #12
 801b76a:	463a      	mov	r2, r7
 801b76c:	e9cd 5300 	strd	r5, r3, [sp]
 801b770:	4603      	mov	r3, r0
 801b772:	4648      	mov	r0, r9
 801b774:	f7ff ff7a 	bl	801b66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	9a03      	ldr	r2, [sp, #12]
 801b77c:	4546      	cmp	r6, r8
 801b77e:	441a      	add	r2, r3
 801b780:	fb92 f3f5 	sdiv	r3, r2, r5
 801b784:	4418      	add	r0, r3
 801b786:	fb05 2313 	mls	r3, r5, r3, r2
 801b78a:	bf18      	it	ne
 801b78c:	4240      	negne	r0, r0
 801b78e:	1c72      	adds	r2, r6, #1
 801b790:	6023      	str	r3, [r4, #0]
 801b792:	d105      	bne.n	801b7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b794:	2b00      	cmp	r3, #0
 801b796:	f1c3 0200 	rsb	r2, r3, #0
 801b79a:	db0b      	blt.n	801b7b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b79c:	6022      	str	r2, [r4, #0]
 801b79e:	e006      	b.n	801b7ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7a0:	2e01      	cmp	r6, #1
 801b7a2:	d104      	bne.n	801b7ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	da02      	bge.n	801b7ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7a8:	442b      	add	r3, r5
 801b7aa:	3801      	subs	r0, #1
 801b7ac:	6023      	str	r3, [r4, #0]
 801b7ae:	b005      	add	sp, #20
 801b7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7b4:	3801      	subs	r0, #1
 801b7b6:	1b52      	subs	r2, r2, r5
 801b7b8:	e7f0      	b.n	801b79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b7bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b7bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b7c0:	4c1c      	ldr	r4, [pc, #112]	; (801b834 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b7c2:	4605      	mov	r5, r0
 801b7c4:	6807      	ldr	r7, [r0, #0]
 801b7c6:	69a3      	ldr	r3, [r4, #24]
 801b7c8:	b92b      	cbnz	r3, 801b7d6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b7ca:	6840      	ldr	r0, [r0, #4]
 801b7cc:	e9c5 7000 	strd	r7, r0, [r5]
 801b7d0:	b004      	add	sp, #16
 801b7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7d6:	f04f 0802 	mov.w	r8, #2
 801b7da:	68a2      	ldr	r2, [r4, #8]
 801b7dc:	ae04      	add	r6, sp, #16
 801b7de:	6820      	ldr	r0, [r4, #0]
 801b7e0:	fb93 f1f8 	sdiv	r1, r3, r8
 801b7e4:	440a      	add	r2, r1
 801b7e6:	69e1      	ldr	r1, [r4, #28]
 801b7e8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b7ec:	463a      	mov	r2, r7
 801b7ee:	9600      	str	r6, [sp, #0]
 801b7f0:	f7ff ff97 	bl	801b722 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b7f4:	69a3      	ldr	r3, [r4, #24]
 801b7f6:	4607      	mov	r7, r0
 801b7f8:	686a      	ldr	r2, [r5, #4]
 801b7fa:	6a21      	ldr	r1, [r4, #32]
 801b7fc:	9600      	str	r6, [sp, #0]
 801b7fe:	6860      	ldr	r0, [r4, #4]
 801b800:	f7ff ff8f 	bl	801b722 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b804:	69a3      	ldr	r3, [r4, #24]
 801b806:	6962      	ldr	r2, [r4, #20]
 801b808:	4407      	add	r7, r0
 801b80a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b80c:	9600      	str	r6, [sp, #0]
 801b80e:	68e0      	ldr	r0, [r4, #12]
 801b810:	fb93 f8f8 	sdiv	r8, r3, r8
 801b814:	4442      	add	r2, r8
 801b816:	9203      	str	r2, [sp, #12]
 801b818:	682a      	ldr	r2, [r5, #0]
 801b81a:	f7ff ff82 	bl	801b722 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b81e:	4680      	mov	r8, r0
 801b820:	9600      	str	r6, [sp, #0]
 801b822:	69a3      	ldr	r3, [r4, #24]
 801b824:	686a      	ldr	r2, [r5, #4]
 801b826:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b828:	6920      	ldr	r0, [r4, #16]
 801b82a:	f7ff ff7a 	bl	801b722 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b82e:	4440      	add	r0, r8
 801b830:	e7cc      	b.n	801b7cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b832:	bf00      	nop
 801b834:	200155f4 	.word	0x200155f4

0801b838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b838:	4b07      	ldr	r3, [pc, #28]	; (801b858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	2b01      	cmp	r3, #1
 801b83e:	d109      	bne.n	801b854 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b840:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b844:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b848:	8003      	strh	r3, [r0, #0]
 801b84a:	4b04      	ldr	r3, [pc, #16]	; (801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b84c:	881b      	ldrh	r3, [r3, #0]
 801b84e:	3b01      	subs	r3, #1
 801b850:	1a9b      	subs	r3, r3, r2
 801b852:	800b      	strh	r3, [r1, #0]
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	200155e0 	.word	0x200155e0
 801b85c:	200155dc 	.word	0x200155dc

0801b860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b860:	4b07      	ldr	r3, [pc, #28]	; (801b880 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b862:	b510      	push	{r4, lr}
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	2b01      	cmp	r3, #1
 801b868:	d108      	bne.n	801b87c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b86a:	4b06      	ldr	r3, [pc, #24]	; (801b884 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b86c:	880c      	ldrh	r4, [r1, #0]
 801b86e:	881b      	ldrh	r3, [r3, #0]
 801b870:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b874:	3b01      	subs	r3, #1
 801b876:	1b1b      	subs	r3, r3, r4
 801b878:	8003      	strh	r3, [r0, #0]
 801b87a:	800a      	strh	r2, [r1, #0]
 801b87c:	bd10      	pop	{r4, pc}
 801b87e:	bf00      	nop
 801b880:	200155e0 	.word	0x200155e0
 801b884:	200155dc 	.word	0x200155dc

0801b888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b888:	4b0a      	ldr	r3, [pc, #40]	; (801b8b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b88a:	b510      	push	{r4, lr}
 801b88c:	781b      	ldrb	r3, [r3, #0]
 801b88e:	2b01      	cmp	r3, #1
 801b890:	d10e      	bne.n	801b8b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b892:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b896:	8843      	ldrh	r3, [r0, #2]
 801b898:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b89c:	18ca      	adds	r2, r1, r3
 801b89e:	4b06      	ldr	r3, [pc, #24]	; (801b8b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b8a0:	8044      	strh	r4, [r0, #2]
 801b8a2:	881b      	ldrh	r3, [r3, #0]
 801b8a4:	1a9b      	subs	r3, r3, r2
 801b8a6:	8003      	strh	r3, [r0, #0]
 801b8a8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b8ac:	8081      	strh	r1, [r0, #4]
 801b8ae:	80c3      	strh	r3, [r0, #6]
 801b8b0:	bd10      	pop	{r4, pc}
 801b8b2:	bf00      	nop
 801b8b4:	200155e0 	.word	0x200155e0
 801b8b8:	200155dc 	.word	0x200155dc

0801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b8bc:	4b08      	ldr	r3, [pc, #32]	; (801b8e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b8be:	781b      	ldrb	r3, [r3, #0]
 801b8c0:	2b01      	cmp	r3, #1
 801b8c2:	d10c      	bne.n	801b8de <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b8c4:	8803      	ldrh	r3, [r0, #0]
 801b8c6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b8ca:	8842      	ldrh	r2, [r0, #2]
 801b8cc:	8002      	strh	r2, [r0, #0]
 801b8ce:	185a      	adds	r2, r3, r1
 801b8d0:	4b04      	ldr	r3, [pc, #16]	; (801b8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b8d2:	881b      	ldrh	r3, [r3, #0]
 801b8d4:	1a9b      	subs	r3, r3, r2
 801b8d6:	8043      	strh	r3, [r0, #2]
 801b8d8:	88c3      	ldrh	r3, [r0, #6]
 801b8da:	80c1      	strh	r1, [r0, #6]
 801b8dc:	8083      	strh	r3, [r0, #4]
 801b8de:	4770      	bx	lr
 801b8e0:	200155e0 	.word	0x200155e0
 801b8e4:	200155dc 	.word	0x200155dc

0801b8e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b8e8:	4b07      	ldr	r3, [pc, #28]	; (801b908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b8ea:	b510      	push	{r4, lr}
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	2b01      	cmp	r3, #1
 801b8f0:	d108      	bne.n	801b904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b8f2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b8f6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b8fa:	8003      	strh	r3, [r0, #0]
 801b8fc:	8893      	ldrh	r3, [r2, #4]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	1b1b      	subs	r3, r3, r4
 801b902:	800b      	strh	r3, [r1, #0]
 801b904:	bd10      	pop	{r4, pc}
 801b906:	bf00      	nop
 801b908:	200155e0 	.word	0x200155e0

0801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b90c:	4b0a      	ldr	r3, [pc, #40]	; (801b938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b90e:	460a      	mov	r2, r1
 801b910:	b510      	push	{r4, lr}
 801b912:	781b      	ldrb	r3, [r3, #0]
 801b914:	2b01      	cmp	r3, #1
 801b916:	d10d      	bne.n	801b934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b918:	8881      	ldrh	r1, [r0, #4]
 801b91a:	8803      	ldrh	r3, [r0, #0]
 801b91c:	440b      	add	r3, r1
 801b91e:	4601      	mov	r1, r0
 801b920:	3b01      	subs	r3, #1
 801b922:	f821 3b02 	strh.w	r3, [r1], #2
 801b926:	f7ff ffdf 	bl	801b8e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b92a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b92e:	88c2      	ldrh	r2, [r0, #6]
 801b930:	80c3      	strh	r3, [r0, #6]
 801b932:	8082      	strh	r2, [r0, #4]
 801b934:	bd10      	pop	{r4, pc}
 801b936:	bf00      	nop
 801b938:	200155e0 	.word	0x200155e0

0801b93c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b93c:	b570      	push	{r4, r5, r6, lr}
 801b93e:	2300      	movs	r3, #0
 801b940:	4c0a      	ldr	r4, [pc, #40]	; (801b96c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b942:	4605      	mov	r5, r0
 801b944:	460e      	mov	r6, r1
 801b946:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b94a:	6820      	ldr	r0, [r4, #0]
 801b94c:	b110      	cbz	r0, 801b954 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801b94e:	6803      	ldr	r3, [r0, #0]
 801b950:	695b      	ldr	r3, [r3, #20]
 801b952:	4798      	blx	r3
 801b954:	6026      	str	r6, [r4, #0]
 801b956:	4630      	mov	r0, r6
 801b958:	6833      	ldr	r3, [r6, #0]
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	4798      	blx	r3
 801b95e:	682b      	ldr	r3, [r5, #0]
 801b960:	4628      	mov	r0, r5
 801b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b968:	4718      	bx	r3
 801b96a:	bf00      	nop
 801b96c:	20015624 	.word	0x20015624

0801b970 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b970:	4b06      	ldr	r3, [pc, #24]	; (801b98c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b972:	2100      	movs	r1, #0
 801b974:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b978:	4b05      	ldr	r3, [pc, #20]	; (801b990 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b97a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b982:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b986:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b98a:	4770      	bx	lr
 801b98c:	200155dc 	.word	0x200155dc
 801b990:	200155de 	.word	0x200155de

0801b994 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b994:	4b03      	ldr	r3, [pc, #12]	; (801b9a4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b996:	6818      	ldr	r0, [r3, #0]
 801b998:	b110      	cbz	r0, 801b9a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b99a:	6803      	ldr	r3, [r0, #0]
 801b99c:	699b      	ldr	r3, [r3, #24]
 801b99e:	4718      	bx	r3
 801b9a0:	4770      	bx	lr
 801b9a2:	bf00      	nop
 801b9a4:	20015624 	.word	0x20015624

0801b9a8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b9a8:	4770      	bx	lr
	...

0801b9ac <_ZN8touchgfx11Application4drawEv>:
 801b9ac:	4b09      	ldr	r3, [pc, #36]	; (801b9d4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b9ae:	b507      	push	{r0, r1, r2, lr}
 801b9b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b9b4:	2100      	movs	r1, #0
 801b9b6:	4b08      	ldr	r3, [pc, #32]	; (801b9d8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b9b8:	9100      	str	r1, [sp, #0]
 801b9ba:	4669      	mov	r1, sp
 801b9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9c0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b9c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b9c8:	6803      	ldr	r3, [r0, #0]
 801b9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9cc:	4798      	blx	r3
 801b9ce:	b003      	add	sp, #12
 801b9d0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9d4:	200155dc 	.word	0x200155dc
 801b9d8:	200155de 	.word	0x200155de

0801b9dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b9dc:	4b03      	ldr	r3, [pc, #12]	; (801b9ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b9de:	6818      	ldr	r0, [r3, #0]
 801b9e0:	b110      	cbz	r0, 801b9e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b9e2:	6803      	ldr	r3, [r0, #0]
 801b9e4:	69db      	ldr	r3, [r3, #28]
 801b9e6:	4718      	bx	r3
 801b9e8:	4770      	bx	lr
 801b9ea:	bf00      	nop
 801b9ec:	20015624 	.word	0x20015624

0801b9f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b9f0:	4b03      	ldr	r3, [pc, #12]	; (801ba00 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b9f2:	6818      	ldr	r0, [r3, #0]
 801b9f4:	b110      	cbz	r0, 801b9fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b9f6:	6803      	ldr	r3, [r0, #0]
 801b9f8:	6a1b      	ldr	r3, [r3, #32]
 801b9fa:	4718      	bx	r3
 801b9fc:	4770      	bx	lr
 801b9fe:	bf00      	nop
 801ba00:	20015624 	.word	0x20015624

0801ba04 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801ba04:	2300      	movs	r3, #0
 801ba06:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ba0a:	4770      	bx	lr

0801ba0c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ba0c:	4b03      	ldr	r3, [pc, #12]	; (801ba1c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ba0e:	6818      	ldr	r0, [r3, #0]
 801ba10:	b110      	cbz	r0, 801ba18 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ba12:	6803      	ldr	r3, [r0, #0]
 801ba14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba16:	4718      	bx	r3
 801ba18:	4770      	bx	lr
 801ba1a:	bf00      	nop
 801ba1c:	20015624 	.word	0x20015624

0801ba20 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ba20:	b570      	push	{r4, r5, r6, lr}
 801ba22:	4d32      	ldr	r5, [pc, #200]	; (801baec <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801ba24:	4604      	mov	r4, r0
 801ba26:	6828      	ldr	r0, [r5, #0]
 801ba28:	b140      	cbz	r0, 801ba3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ba2a:	7a03      	ldrb	r3, [r0, #8]
 801ba2c:	b933      	cbnz	r3, 801ba3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ba2e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801ba32:	6803      	ldr	r3, [r0, #0]
 801ba34:	689b      	ldr	r3, [r3, #8]
 801ba36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba3a:	4718      	bx	r3
 801ba3c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801ba40:	b97b      	cbnz	r3, 801ba62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba42:	b170      	cbz	r0, 801ba62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba44:	7a03      	ldrb	r3, [r0, #8]
 801ba46:	b163      	cbz	r3, 801ba62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba48:	4b29      	ldr	r3, [pc, #164]	; (801baf0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801ba4a:	6818      	ldr	r0, [r3, #0]
 801ba4c:	b110      	cbz	r0, 801ba54 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ba4e:	6803      	ldr	r3, [r0, #0]
 801ba50:	691b      	ldr	r3, [r3, #16]
 801ba52:	4798      	blx	r3
 801ba54:	6828      	ldr	r0, [r5, #0]
 801ba56:	6803      	ldr	r3, [r0, #0]
 801ba58:	68db      	ldr	r3, [r3, #12]
 801ba5a:	4798      	blx	r3
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801ba62:	2500      	movs	r5, #0
 801ba64:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ba68:	42a8      	cmp	r0, r5
 801ba6a:	dd0c      	ble.n	801ba86 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ba6c:	1963      	adds	r3, r4, r5
 801ba6e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ba72:	b132      	cbz	r2, 801ba82 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ba74:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ba78:	4413      	add	r3, r2
 801ba7a:	6858      	ldr	r0, [r3, #4]
 801ba7c:	6803      	ldr	r3, [r0, #0]
 801ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba80:	4798      	blx	r3
 801ba82:	3501      	adds	r5, #1
 801ba84:	e7ee      	b.n	801ba64 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ba86:	2300      	movs	r3, #0
 801ba88:	461a      	mov	r2, r3
 801ba8a:	4298      	cmp	r0, r3
 801ba8c:	d015      	beq.n	801baba <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801ba8e:	18e1      	adds	r1, r4, r3
 801ba90:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ba94:	b16d      	cbz	r5, 801bab2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d00a      	beq.n	801bab0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801ba9a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801ba9e:	4431      	add	r1, r6
 801baa0:	684e      	ldr	r6, [r1, #4]
 801baa2:	b291      	uxth	r1, r2
 801baa4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801baa8:	604e      	str	r6, [r1, #4]
 801baaa:	18a1      	adds	r1, r4, r2
 801baac:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801bab0:	3201      	adds	r2, #1
 801bab2:	3301      	adds	r3, #1
 801bab4:	e7e9      	b.n	801ba8a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801bab6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801baba:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801babe:	4295      	cmp	r5, r2
 801bac0:	dd0d      	ble.n	801bade <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801bac2:	1e6b      	subs	r3, r5, #1
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801baca:	4618      	mov	r0, r3
 801bacc:	3104      	adds	r1, #4
 801bace:	4285      	cmp	r5, r0
 801bad0:	ddf1      	ble.n	801bab6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801bad2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801bad6:	3001      	adds	r0, #1
 801bad8:	f841 6c04 	str.w	r6, [r1, #-4]
 801badc:	e7f7      	b.n	801bace <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801bade:	4b04      	ldr	r3, [pc, #16]	; (801baf0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801bae0:	6818      	ldr	r0, [r3, #0]
 801bae2:	b110      	cbz	r0, 801baea <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801bae4:	6803      	ldr	r3, [r0, #0]
 801bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bae8:	e7a5      	b.n	801ba36 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801baea:	bd70      	pop	{r4, r5, r6, pc}
 801baec:	20015628 	.word	0x20015628
 801baf0:	20015624 	.word	0x20015624

0801baf4 <_ZN8touchgfx11ApplicationD1Ev>:
 801baf4:	4770      	bx	lr

0801baf6 <_ZN8touchgfx11ApplicationD0Ev>:
 801baf6:	b510      	push	{r4, lr}
 801baf8:	4604      	mov	r4, r0
 801bafa:	f44f 719c 	mov.w	r1, #312	; 0x138
 801bafe:	f00e fe61 	bl	802a7c4 <_ZdlPvj>
 801bb02:	4620      	mov	r0, r4
 801bb04:	bd10      	pop	{r4, pc}

0801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bb06:	b510      	push	{r4, lr}
 801bb08:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bb0c:	888a      	ldrh	r2, [r1, #4]
 801bb0e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bb12:	4422      	add	r2, r4
 801bb14:	b212      	sxth	r2, r2
 801bb16:	4293      	cmp	r3, r2
 801bb18:	da15      	bge.n	801bb46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb1a:	8882      	ldrh	r2, [r0, #4]
 801bb1c:	4413      	add	r3, r2
 801bb1e:	b21b      	sxth	r3, r3
 801bb20:	429c      	cmp	r4, r3
 801bb22:	da10      	bge.n	801bb46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb24:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bb28:	88c9      	ldrh	r1, [r1, #6]
 801bb2a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bb2e:	4419      	add	r1, r3
 801bb30:	b209      	sxth	r1, r1
 801bb32:	428a      	cmp	r2, r1
 801bb34:	da07      	bge.n	801bb46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb36:	88c0      	ldrh	r0, [r0, #6]
 801bb38:	4410      	add	r0, r2
 801bb3a:	b200      	sxth	r0, r0
 801bb3c:	4283      	cmp	r3, r0
 801bb3e:	bfac      	ite	ge
 801bb40:	2000      	movge	r0, #0
 801bb42:	2001      	movlt	r0, #1
 801bb44:	bd10      	pop	{r4, pc}
 801bb46:	2000      	movs	r0, #0
 801bb48:	e7fc      	b.n	801bb44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bb4a <_ZN8touchgfx4Rect10restrictToEss>:
 801bb4a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	b510      	push	{r4, lr}
 801bb52:	da04      	bge.n	801bb5e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801bb54:	8884      	ldrh	r4, [r0, #4]
 801bb56:	4423      	add	r3, r4
 801bb58:	8083      	strh	r3, [r0, #4]
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	8003      	strh	r3, [r0, #0]
 801bb5e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bb62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bb66:	1b09      	subs	r1, r1, r4
 801bb68:	428b      	cmp	r3, r1
 801bb6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bb6e:	bfc8      	it	gt
 801bb70:	8081      	strhgt	r1, [r0, #4]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	da04      	bge.n	801bb80 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801bb76:	88c1      	ldrh	r1, [r0, #6]
 801bb78:	440b      	add	r3, r1
 801bb7a:	80c3      	strh	r3, [r0, #6]
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	8043      	strh	r3, [r0, #2]
 801bb80:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801bb84:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801bb88:	1a52      	subs	r2, r2, r1
 801bb8a:	4293      	cmp	r3, r2
 801bb8c:	bfc8      	it	gt
 801bb8e:	80c2      	strhgt	r2, [r0, #6]
 801bb90:	bd10      	pop	{r4, pc}
	...

0801bb94 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bb94:	4b10      	ldr	r3, [pc, #64]	; (801bbd8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801bb96:	b510      	push	{r4, lr}
 801bb98:	460c      	mov	r4, r1
 801bb9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb9e:	4b0f      	ldr	r3, [pc, #60]	; (801bbdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801bba0:	4620      	mov	r0, r4
 801bba2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bba6:	f7ff ffd0 	bl	801bb4a <_ZN8touchgfx4Rect10restrictToEss>
 801bbaa:	4b0d      	ldr	r3, [pc, #52]	; (801bbe0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801bbac:	6818      	ldr	r0, [r3, #0]
 801bbae:	b190      	cbz	r0, 801bbd6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801bbb0:	6803      	ldr	r3, [r0, #0]
 801bbb2:	4621      	mov	r1, r4
 801bbb4:	689b      	ldr	r3, [r3, #8]
 801bbb6:	4798      	blx	r3
 801bbb8:	4b0a      	ldr	r3, [pc, #40]	; (801bbe4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801bbba:	6818      	ldr	r0, [r3, #0]
 801bbbc:	b118      	cbz	r0, 801bbc6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801bbbe:	6803      	ldr	r3, [r0, #0]
 801bbc0:	4621      	mov	r1, r4
 801bbc2:	689b      	ldr	r3, [r3, #8]
 801bbc4:	4798      	blx	r3
 801bbc6:	4b08      	ldr	r3, [pc, #32]	; (801bbe8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801bbc8:	4621      	mov	r1, r4
 801bbca:	6818      	ldr	r0, [r3, #0]
 801bbcc:	6803      	ldr	r3, [r0, #0]
 801bbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbd2:	69db      	ldr	r3, [r3, #28]
 801bbd4:	4718      	bx	r3
 801bbd6:	bd10      	pop	{r4, pc}
 801bbd8:	200155de 	.word	0x200155de
 801bbdc:	200155dc 	.word	0x200155dc
 801bbe0:	20015624 	.word	0x20015624
 801bbe4:	20015620 	.word	0x20015620
 801bbe8:	200155e8 	.word	0x200155e8

0801bbec <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbee:	4606      	mov	r6, r0
 801bbf0:	4608      	mov	r0, r1
 801bbf2:	460f      	mov	r7, r1
 801bbf4:	f7fc fc0b 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbf8:	b9e8      	cbnz	r0, 801bc36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bbfa:	f9b7 5000 	ldrsh.w	r5, [r7]
 801bbfe:	f9b6 4000 	ldrsh.w	r4, [r6]
 801bc02:	42a5      	cmp	r5, r4
 801bc04:	db17      	blt.n	801bc36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bc06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801bc0a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801bc0e:	429a      	cmp	r2, r3
 801bc10:	db11      	blt.n	801bc36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bc12:	88b9      	ldrh	r1, [r7, #4]
 801bc14:	440d      	add	r5, r1
 801bc16:	88b1      	ldrh	r1, [r6, #4]
 801bc18:	440c      	add	r4, r1
 801bc1a:	b22d      	sxth	r5, r5
 801bc1c:	b224      	sxth	r4, r4
 801bc1e:	42a5      	cmp	r5, r4
 801bc20:	dc09      	bgt.n	801bc36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bc22:	88f8      	ldrh	r0, [r7, #6]
 801bc24:	4410      	add	r0, r2
 801bc26:	88f2      	ldrh	r2, [r6, #6]
 801bc28:	4413      	add	r3, r2
 801bc2a:	b200      	sxth	r0, r0
 801bc2c:	b21b      	sxth	r3, r3
 801bc2e:	4298      	cmp	r0, r3
 801bc30:	bfcc      	ite	gt
 801bc32:	2000      	movgt	r0, #0
 801bc34:	2001      	movle	r0, #1
 801bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bc38 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc3a:	4604      	mov	r4, r0
 801bc3c:	4608      	mov	r0, r1
 801bc3e:	460d      	mov	r5, r1
 801bc40:	f7fc fbe5 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc44:	b978      	cbnz	r0, 801bc66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bc46:	4620      	mov	r0, r4
 801bc48:	f7fc fbe1 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc4c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bc50:	b150      	cbz	r0, 801bc68 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bc52:	8026      	strh	r6, [r4, #0]
 801bc54:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bc58:	8063      	strh	r3, [r4, #2]
 801bc5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bc5e:	80a3      	strh	r3, [r4, #4]
 801bc60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bc64:	80e3      	strh	r3, [r4, #6]
 801bc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc68:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bc6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bc70:	42b1      	cmp	r1, r6
 801bc72:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bc76:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bc7a:	460f      	mov	r7, r1
 801bc7c:	88ed      	ldrh	r5, [r5, #6]
 801bc7e:	bfa8      	it	ge
 801bc80:	4637      	movge	r7, r6
 801bc82:	4293      	cmp	r3, r2
 801bc84:	4618      	mov	r0, r3
 801bc86:	4466      	add	r6, ip
 801bc88:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bc8c:	bfa8      	it	ge
 801bc8e:	4610      	movge	r0, r2
 801bc90:	442a      	add	r2, r5
 801bc92:	88e5      	ldrh	r5, [r4, #6]
 801bc94:	4461      	add	r1, ip
 801bc96:	b236      	sxth	r6, r6
 801bc98:	8027      	strh	r7, [r4, #0]
 801bc9a:	442b      	add	r3, r5
 801bc9c:	b209      	sxth	r1, r1
 801bc9e:	b212      	sxth	r2, r2
 801bca0:	8060      	strh	r0, [r4, #2]
 801bca2:	b21b      	sxth	r3, r3
 801bca4:	428e      	cmp	r6, r1
 801bca6:	bfac      	ite	ge
 801bca8:	ebc7 0106 	rsbge	r1, r7, r6
 801bcac:	ebc7 0101 	rsblt	r1, r7, r1
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	bfac      	ite	ge
 801bcb4:	ebc0 0202 	rsbge	r2, r0, r2
 801bcb8:	ebc0 0203 	rsblt	r2, r0, r3
 801bcbc:	80a1      	strh	r1, [r4, #4]
 801bcbe:	80e2      	strh	r2, [r4, #6]
 801bcc0:	e7d1      	b.n	801bc66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801bcc4 <_ZN8touchgfx11Application11getInstanceEv>:
 801bcc4:	4b01      	ldr	r3, [pc, #4]	; (801bccc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bcc6:	6818      	ldr	r0, [r3, #0]
 801bcc8:	4770      	bx	lr
 801bcca:	bf00      	nop
 801bccc:	20015634 	.word	0x20015634

0801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801bcd6:	30a8      	adds	r0, #168	; 0xa8
 801bcd8:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bcdc:	f802 3b01 	strb.w	r3, [r2], #1
 801bce0:	4282      	cmp	r2, r0
 801bce2:	d1fb      	bne.n	801bcdc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801bce4:	4770      	bx	lr

0801bce6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bce6:	4603      	mov	r3, r0
 801bce8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bcec:	2200      	movs	r2, #0
 801bcee:	801a      	strh	r2, [r3, #0]
 801bcf0:	3308      	adds	r3, #8
 801bcf2:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bcf6:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bcfa:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bcfe:	428b      	cmp	r3, r1
 801bd00:	d1f5      	bne.n	801bcee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bd02:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bd06:	4770      	bx	lr

0801bd08 <_ZN8touchgfx11ApplicationC1Ev>:
 801bd08:	b570      	push	{r4, r5, r6, lr}
 801bd0a:	4b19      	ldr	r3, [pc, #100]	; (801bd70 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801bd0c:	2500      	movs	r5, #0
 801bd0e:	4604      	mov	r4, r0
 801bd10:	30a8      	adds	r0, #168	; 0xa8
 801bd12:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bd16:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bd1a:	f7ff ffe4 	bl	801bce6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd1e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bd22:	f7ff ffe0 	bl	801bce6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd26:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801bd2a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801bd2e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801bd32:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801bd36:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801bd3a:	490e      	ldr	r1, [pc, #56]	; (801bd74 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bd3c:	480e      	ldr	r0, [pc, #56]	; (801bd78 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bd3e:	f00e fc19 	bl	802a574 <CRC_Lock>
 801bd42:	4e0e      	ldr	r6, [pc, #56]	; (801bd7c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bd44:	4b0e      	ldr	r3, [pc, #56]	; (801bd80 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bd46:	b158      	cbz	r0, 801bd60 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801bd48:	801d      	strh	r5, [r3, #0]
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	4a0d      	ldr	r2, [pc, #52]	; (801bd84 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bd4e:	4620      	mov	r0, r4
 801bd50:	6013      	str	r3, [r2, #0]
 801bd52:	4a0d      	ldr	r2, [pc, #52]	; (801bd88 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bd54:	6033      	str	r3, [r6, #0]
 801bd56:	6013      	str	r3, [r2, #0]
 801bd58:	f7ff ffba 	bl	801bcd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	bd70      	pop	{r4, r5, r6, pc}
 801bd60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd64:	2002      	movs	r0, #2
 801bd66:	801a      	strh	r2, [r3, #0]
 801bd68:	6030      	str	r0, [r6, #0]
 801bd6a:	f001 fa1d 	bl	801d1a8 <_ZN8touchgfx6Screen4drawEv>
 801bd6e:	e7ec      	b.n	801bd4a <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801bd70:	08030e18 	.word	0x08030e18
 801bd74:	b5e8b5cd 	.word	0xb5e8b5cd
 801bd78:	f407a5c2 	.word	0xf407a5c2
 801bd7c:	20015624 	.word	0x20015624
 801bd80:	20000044 	.word	0x20000044
 801bd84:	20015634 	.word	0x20015634
 801bd88:	20015628 	.word	0x20015628

0801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bd8c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bd90:	3b01      	subs	r3, #1
 801bd92:	b29b      	uxth	r3, r3
 801bd94:	428b      	cmp	r3, r1
 801bd96:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801bd9a:	b510      	push	{r4, lr}
 801bd9c:	d908      	bls.n	801bdb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801bd9e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801bda2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801bda6:	681a      	ldr	r2, [r3, #0]
 801bda8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801bdac:	685a      	ldr	r2, [r3, #4]
 801bdae:	6062      	str	r2, [r4, #4]
 801bdb0:	bd10      	pop	{r4, pc}
	...

0801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb8:	b08f      	sub	sp, #60	; 0x3c
 801bdba:	4b94      	ldr	r3, [pc, #592]	; (801c00c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801bdbc:	4683      	mov	fp, r0
 801bdbe:	ac0a      	add	r4, sp, #40	; 0x28
 801bdc0:	e884 0006 	stmia.w	r4, {r1, r2}
 801bdc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bdc8:	4620      	mov	r0, r4
 801bdca:	4b91      	ldr	r3, [pc, #580]	; (801c010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801bdcc:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bdd0:	f7ff febb 	bl	801bb4a <_ZN8touchgfx4Rect10restrictToEss>
 801bdd4:	4620      	mov	r0, r4
 801bdd6:	f7fc fb1a 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bdda:	2800      	cmp	r0, #0
 801bddc:	d16a      	bne.n	801beb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bdde:	9403      	str	r4, [sp, #12]
 801bde0:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801bde4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801bde8:	2400      	movs	r4, #0
 801bdea:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801bdee:	9301      	str	r3, [sp, #4]
 801bdf0:	36a0      	adds	r6, #160	; 0xa0
 801bdf2:	42a5      	cmp	r5, r4
 801bdf4:	d00d      	beq.n	801be12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801bdf6:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801bdfa:	9803      	ldr	r0, [sp, #12]
 801bdfc:	f7ff fef6 	bl	801bbec <_ZNK8touchgfx4Rect8includesERKS0_>
 801be00:	b128      	cbz	r0, 801be0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801be02:	1e69      	subs	r1, r5, #1
 801be04:	9801      	ldr	r0, [sp, #4]
 801be06:	1b09      	subs	r1, r1, r4
 801be08:	b289      	uxth	r1, r1
 801be0a:	f7ff ffbf 	bl	801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be0e:	3401      	adds	r4, #1
 801be10:	e7ef      	b.n	801bdf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801be12:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801be16:	1e7b      	subs	r3, r7, #1
 801be18:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801be1c:	9704      	str	r7, [sp, #16]
 801be1e:	9302      	str	r3, [sp, #8]
 801be20:	2400      	movs	r4, #0
 801be22:	4655      	mov	r5, sl
 801be24:	9705      	str	r7, [sp, #20]
 801be26:	4626      	mov	r6, r4
 801be28:	9b05      	ldr	r3, [sp, #20]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d078      	beq.n	801bf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801be2e:	9903      	ldr	r1, [sp, #12]
 801be30:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801be34:	f7ff fe67 	bl	801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be38:	b360      	cbz	r0, 801be94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801be3a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801be3e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801be42:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801be46:	45e6      	cmp	lr, ip
 801be48:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801be4c:	db35      	blt.n	801beba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801be4e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801be52:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801be56:	4472      	add	r2, lr
 801be58:	4463      	add	r3, ip
 801be5a:	b212      	sxth	r2, r2
 801be5c:	b21b      	sxth	r3, r3
 801be5e:	429a      	cmp	r2, r3
 801be60:	dc2b      	bgt.n	801beba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801be62:	fa1f f288 	uxth.w	r2, r8
 801be66:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801be6a:	45c1      	cmp	r9, r8
 801be6c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801be70:	4413      	add	r3, r2
 801be72:	fa1f fc89 	uxth.w	ip, r9
 801be76:	b29b      	uxth	r3, r3
 801be78:	fa0f fe83 	sxth.w	lr, r3
 801be7c:	db0f      	blt.n	801be9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801be7e:	eba3 030c 	sub.w	r3, r3, ip
 801be82:	1ac9      	subs	r1, r1, r3
 801be84:	b209      	sxth	r1, r1
 801be86:	2900      	cmp	r1, #0
 801be88:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801be8c:	dd12      	ble.n	801beb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801be8e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801be92:	4604      	mov	r4, r0
 801be94:	9b05      	ldr	r3, [sp, #20]
 801be96:	3d08      	subs	r5, #8
 801be98:	3b01      	subs	r3, #1
 801be9a:	9305      	str	r3, [sp, #20]
 801be9c:	e7c4      	b.n	801be28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801be9e:	4461      	add	r1, ip
 801bea0:	b209      	sxth	r1, r1
 801bea2:	4571      	cmp	r1, lr
 801bea4:	dc3a      	bgt.n	801bf1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801bea6:	eba2 020c 	sub.w	r2, r2, ip
 801beaa:	b212      	sxth	r2, r2
 801beac:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801beb0:	2a00      	cmp	r2, #0
 801beb2:	dcee      	bgt.n	801be92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801beb4:	b00f      	add	sp, #60	; 0x3c
 801beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beba:	45c1      	cmp	r9, r8
 801bebc:	db2e      	blt.n	801bf1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801bebe:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801bec2:	4499      	add	r9, r3
 801bec4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801bec8:	4498      	add	r8, r3
 801beca:	fa0f f989 	sxth.w	r9, r9
 801bece:	fa0f f888 	sxth.w	r8, r8
 801bed2:	45c1      	cmp	r9, r8
 801bed4:	dc22      	bgt.n	801bf1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801bed6:	fa1f f28c 	uxth.w	r2, ip
 801beda:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801bede:	45e6      	cmp	lr, ip
 801bee0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bee4:	4413      	add	r3, r2
 801bee6:	fa1f f88e 	uxth.w	r8, lr
 801beea:	b29b      	uxth	r3, r3
 801beec:	fa0f f983 	sxth.w	r9, r3
 801bef0:	db0a      	blt.n	801bf08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801bef2:	eba3 0308 	sub.w	r3, r3, r8
 801bef6:	1ac9      	subs	r1, r1, r3
 801bef8:	b209      	sxth	r1, r1
 801befa:	2900      	cmp	r1, #0
 801befc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801bf00:	ddd8      	ble.n	801beb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bf02:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801bf06:	e7c4      	b.n	801be92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801bf08:	4441      	add	r1, r8
 801bf0a:	b209      	sxth	r1, r1
 801bf0c:	4549      	cmp	r1, r9
 801bf0e:	dc05      	bgt.n	801bf1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801bf10:	eba2 0208 	sub.w	r2, r2, r8
 801bf14:	b212      	sxth	r2, r2
 801bf16:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801bf1a:	e7c9      	b.n	801beb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801bf1c:	4606      	mov	r6, r0
 801bf1e:	e7b9      	b.n	801be94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801bf20:	2c00      	cmp	r4, #0
 801bf22:	f47f af7d 	bne.w	801be20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801bf26:	2e00      	cmp	r6, #0
 801bf28:	f000 81e1 	beq.w	801c2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801bf2c:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801bf30:	4655      	mov	r5, sl
 801bf32:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801bf36:	b2b9      	uxth	r1, r7
 801bf38:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801bf3c:	b2b3      	uxth	r3, r6
 801bf3e:	9105      	str	r1, [sp, #20]
 801bf40:	9805      	ldr	r0, [sp, #20]
 801bf42:	441a      	add	r2, r3
 801bf44:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801bf48:	b292      	uxth	r2, r2
 801bf4a:	4401      	add	r1, r0
 801bf4c:	fa0f f882 	sxth.w	r8, r2
 801bf50:	b289      	uxth	r1, r1
 801bf52:	9106      	str	r1, [sp, #24]
 801bf54:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801bf58:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801bf5c:	9b04      	ldr	r3, [sp, #16]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d058      	beq.n	801c014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801bf62:	9903      	ldr	r1, [sp, #12]
 801bf64:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801bf68:	f7ff fdcd 	bl	801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bf6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bf70:	b1d8      	cbz	r0, 801bfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bf72:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801bf76:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801bf7a:	4576      	cmp	r6, lr
 801bf7c:	dc26      	bgt.n	801bfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801bf7e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801bf82:	44f4      	add	ip, lr
 801bf84:	fa0f fc8c 	sxth.w	ip, ip
 801bf88:	45e0      	cmp	r8, ip
 801bf8a:	db1f      	blt.n	801bfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801bf8c:	428f      	cmp	r7, r1
 801bf8e:	fa1f fc81 	uxth.w	ip, r1
 801bf92:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801bf96:	dc0f      	bgt.n	801bfb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801bf98:	9806      	ldr	r0, [sp, #24]
 801bf9a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801bf9e:	eba0 0c0c 	sub.w	ip, r0, ip
 801bfa2:	eba1 010c 	sub.w	r1, r1, ip
 801bfa6:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801bfaa:	4620      	mov	r0, r4
 801bfac:	9904      	ldr	r1, [sp, #16]
 801bfae:	3d08      	subs	r5, #8
 801bfb0:	4604      	mov	r4, r0
 801bfb2:	3901      	subs	r1, #1
 801bfb4:	9104      	str	r1, [sp, #16]
 801bfb6:	e7cf      	b.n	801bf58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801bfb8:	4461      	add	r1, ip
 801bfba:	b209      	sxth	r1, r1
 801bfbc:	4549      	cmp	r1, r9
 801bfbe:	dcf5      	bgt.n	801bfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bfc0:	9905      	ldr	r1, [sp, #20]
 801bfc2:	eba1 0c0c 	sub.w	ip, r1, ip
 801bfc6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801bfca:	e7ee      	b.n	801bfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bfcc:	428f      	cmp	r7, r1
 801bfce:	dced      	bgt.n	801bfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bfd0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801bfd4:	4461      	add	r1, ip
 801bfd6:	b209      	sxth	r1, r1
 801bfd8:	4589      	cmp	r9, r1
 801bfda:	dbe7      	blt.n	801bfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bfdc:	4576      	cmp	r6, lr
 801bfde:	fa1f fc8e 	uxth.w	ip, lr
 801bfe2:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801bfe6:	dc08      	bgt.n	801bffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801bfe8:	eba2 0c0c 	sub.w	ip, r2, ip
 801bfec:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801bff0:	eba1 010c 	sub.w	r1, r1, ip
 801bff4:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801bff8:	e7d7      	b.n	801bfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bffa:	4461      	add	r1, ip
 801bffc:	b209      	sxth	r1, r1
 801bffe:	4588      	cmp	r8, r1
 801c000:	dbd4      	blt.n	801bfac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801c002:	eba3 0c0c 	sub.w	ip, r3, ip
 801c006:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c00a:	e7ce      	b.n	801bfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801c00c:	200155de 	.word	0x200155de
 801c010:	200155dc 	.word	0x200155dc
 801c014:	2c00      	cmp	r4, #0
 801c016:	f000 816a 	beq.w	801c2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801c01a:	9b02      	ldr	r3, [sp, #8]
 801c01c:	3301      	adds	r3, #1
 801c01e:	f000 8166 	beq.w	801c2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801c022:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c026:	9803      	ldr	r0, [sp, #12]
 801c028:	4621      	mov	r1, r4
 801c02a:	f7ff fddf 	bl	801bbec <_ZNK8touchgfx4Rect8includesERKS0_>
 801c02e:	b120      	cbz	r0, 801c03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801c030:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c034:	9801      	ldr	r0, [sp, #4]
 801c036:	f7ff fea9 	bl	801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c03a:	9903      	ldr	r1, [sp, #12]
 801c03c:	4620      	mov	r0, r4
 801c03e:	f7ff fd62 	bl	801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c042:	2800      	cmp	r0, #0
 801c044:	f000 809b 	beq.w	801c17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801c048:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801c04c:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801c050:	b281      	uxth	r1, r0
 801c052:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801c056:	9309      	str	r3, [sp, #36]	; 0x24
 801c058:	eb01 0c03 	add.w	ip, r1, r3
 801c05c:	b2ab      	uxth	r3, r5
 801c05e:	4285      	cmp	r5, r0
 801c060:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801c064:	fa1f f98c 	uxth.w	r9, ip
 801c068:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c06c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801c070:	eb03 040c 	add.w	r4, r3, ip
 801c074:	b2a4      	uxth	r4, r4
 801c076:	9405      	str	r4, [sp, #20]
 801c078:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801c07c:	9404      	str	r4, [sp, #16]
 801c07e:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801c082:	f340 809a 	ble.w	801c1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801c086:	1a5b      	subs	r3, r3, r1
 801c088:	4596      	cmp	lr, r2
 801c08a:	fa0f f589 	sxth.w	r5, r9
 801c08e:	b29b      	uxth	r3, r3
 801c090:	b21e      	sxth	r6, r3
 801c092:	dd2e      	ble.n	801c0f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801c094:	9f02      	ldr	r7, [sp, #8]
 801c096:	fa1f fe8e 	uxth.w	lr, lr
 801c09a:	b292      	uxth	r2, r2
 801c09c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801c0a0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801c0a4:	9f04      	ldr	r7, [sp, #16]
 801c0a6:	ebae 0102 	sub.w	r1, lr, r2
 801c0aa:	4486      	add	lr, r0
 801c0ac:	1b7f      	subs	r7, r7, r5
 801c0ae:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801c0b2:	b289      	uxth	r1, r1
 801c0b4:	442a      	add	r2, r5
 801c0b6:	fa0f fe8e 	sxth.w	lr, lr
 801c0ba:	b20c      	sxth	r4, r1
 801c0bc:	b212      	sxth	r2, r2
 801c0be:	4367      	muls	r7, r4
 801c0c0:	ebae 0202 	sub.w	r2, lr, r2
 801c0c4:	4372      	muls	r2, r6
 801c0c6:	4297      	cmp	r7, r2
 801c0c8:	db09      	blt.n	801c0de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801c0ca:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801c0ce:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c0d2:	449c      	add	ip, r3
 801c0d4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c0d8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c0dc:	e680      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c0de:	4401      	add	r1, r0
 801c0e0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c0e4:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801c0e8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c0ec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c0f0:	e676      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c0f2:	9f04      	ldr	r7, [sp, #16]
 801c0f4:	42bd      	cmp	r5, r7
 801c0f6:	da27      	bge.n	801c148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801c0f8:	9902      	ldr	r1, [sp, #8]
 801c0fa:	1b7f      	subs	r7, r7, r5
 801c0fc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801c100:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801c104:	eb04 010e 	add.w	r1, r4, lr
 801c108:	fa1f f881 	uxth.w	r8, r1
 801c10c:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801c110:	4411      	add	r1, r2
 801c112:	fa0f f988 	sxth.w	r9, r8
 801c116:	eba2 020e 	sub.w	r2, r2, lr
 801c11a:	eba1 0108 	sub.w	r1, r1, r8
 801c11e:	4372      	muls	r2, r6
 801c120:	b289      	uxth	r1, r1
 801c122:	fa0f f881 	sxth.w	r8, r1
 801c126:	fb08 f707 	mul.w	r7, r8, r7
 801c12a:	42ba      	cmp	r2, r7
 801c12c:	dc06      	bgt.n	801c13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801c12e:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801c132:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801c136:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801c13a:	e7ca      	b.n	801c0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801c13c:	4421      	add	r1, r4
 801c13e:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801c142:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c146:	e64b      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c148:	9d05      	ldr	r5, [sp, #20]
 801c14a:	2c06      	cmp	r4, #6
 801c14c:	eba9 0505 	sub.w	r5, r9, r5
 801c150:	b2ad      	uxth	r5, r5
 801c152:	fa0f fe85 	sxth.w	lr, r5
 801c156:	d818      	bhi.n	801c18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801c158:	9b04      	ldr	r3, [sp, #16]
 801c15a:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801c15e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c162:	1c63      	adds	r3, r4, #1
 801c164:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801c168:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801c16c:	9b01      	ldr	r3, [sp, #4]
 801c16e:	9d01      	ldr	r5, [sp, #4]
 801c170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c174:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801c178:	805a      	strh	r2, [r3, #2]
 801c17a:	809e      	strh	r6, [r3, #4]
 801c17c:	80d9      	strh	r1, [r3, #6]
 801c17e:	9b02      	ldr	r3, [sp, #8]
 801c180:	f1aa 0a08 	sub.w	sl, sl, #8
 801c184:	3b01      	subs	r3, #1
 801c186:	9302      	str	r3, [sp, #8]
 801c188:	e747      	b.n	801c01a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801c18a:	9a02      	ldr	r2, [sp, #8]
 801c18c:	45b6      	cmp	lr, r6
 801c18e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c192:	db0d      	blt.n	801c1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801c194:	449c      	add	ip, r3
 801c196:	445a      	add	r2, fp
 801c198:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801c19c:	fa1f fc8c 	uxth.w	ip, ip
 801c1a0:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801c1a4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c1a8:	448c      	add	ip, r1
 801c1aa:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801c1ae:	e617      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c1b0:	445a      	add	r2, fp
 801c1b2:	44ac      	add	ip, r5
 801c1b4:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801c1b8:	e78e      	b.n	801c0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801c1ba:	fa1f f18e 	uxth.w	r1, lr
 801c1be:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801c1c2:	b293      	uxth	r3, r2
 801c1c4:	4596      	cmp	lr, r2
 801c1c6:	eb01 0806 	add.w	r8, r1, r6
 801c1ca:	9306      	str	r3, [sp, #24]
 801c1cc:	fa1f f888 	uxth.w	r8, r8
 801c1d0:	9f06      	ldr	r7, [sp, #24]
 801c1d2:	fa0f f388 	sxth.w	r3, r8
 801c1d6:	9307      	str	r3, [sp, #28]
 801c1d8:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801c1dc:	443b      	add	r3, r7
 801c1de:	b29b      	uxth	r3, r3
 801c1e0:	9308      	str	r3, [sp, #32]
 801c1e2:	da25      	bge.n	801c230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801c1e4:	9905      	ldr	r1, [sp, #20]
 801c1e6:	eba3 0308 	sub.w	r3, r3, r8
 801c1ea:	eba2 020e 	sub.w	r2, r2, lr
 801c1ee:	1b40      	subs	r0, r0, r5
 801c1f0:	eba9 0401 	sub.w	r4, r9, r1
 801c1f4:	b29b      	uxth	r3, r3
 801c1f6:	b2a4      	uxth	r4, r4
 801c1f8:	b219      	sxth	r1, r3
 801c1fa:	fa0f f984 	sxth.w	r9, r4
 801c1fe:	4348      	muls	r0, r1
 801c200:	fb09 f202 	mul.w	r2, r9, r2
 801c204:	4282      	cmp	r2, r0
 801c206:	9a02      	ldr	r2, [sp, #8]
 801c208:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c20c:	445a      	add	r2, fp
 801c20e:	dc06      	bgt.n	801c21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801c210:	9b07      	ldr	r3, [sp, #28]
 801c212:	44a4      	add	ip, r4
 801c214:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801c218:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801c21c:	e75c      	b.n	801c0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801c21e:	9904      	ldr	r1, [sp, #16]
 801c220:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801c224:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801c228:	4433      	add	r3, r6
 801c22a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c22e:	e5d7      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c230:	9f06      	ldr	r7, [sp, #24]
 801c232:	9b04      	ldr	r3, [sp, #16]
 801c234:	1bc9      	subs	r1, r1, r7
 801c236:	fa0f f789 	sxth.w	r7, r9
 801c23a:	b289      	uxth	r1, r1
 801c23c:	429f      	cmp	r7, r3
 801c23e:	fa0f fe81 	sxth.w	lr, r1
 801c242:	dd22      	ble.n	801c28a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801c244:	9a05      	ldr	r2, [sp, #20]
 801c246:	1b40      	subs	r0, r0, r5
 801c248:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c24c:	eba9 0202 	sub.w	r2, r9, r2
 801c250:	9d07      	ldr	r5, [sp, #28]
 801c252:	fb0e f000 	mul.w	r0, lr, r0
 801c256:	b292      	uxth	r2, r2
 801c258:	eba5 0a03 	sub.w	sl, r5, r3
 801c25c:	9b02      	ldr	r3, [sp, #8]
 801c25e:	b214      	sxth	r4, r2
 801c260:	00db      	lsls	r3, r3, #3
 801c262:	fb04 fa0a 	mul.w	sl, r4, sl
 801c266:	445b      	add	r3, fp
 801c268:	4550      	cmp	r0, sl
 801c26a:	db03      	blt.n	801c274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801c26c:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801c270:	4494      	add	ip, r2
 801c272:	e731      	b.n	801c0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801c274:	9a04      	ldr	r2, [sp, #16]
 801c276:	4431      	add	r1, r6
 801c278:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801c27c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801c280:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801c284:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c288:	e75b      	b.n	801c142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801c28a:	9b08      	ldr	r3, [sp, #32]
 801c28c:	2c06      	cmp	r4, #6
 801c28e:	eba3 0308 	sub.w	r3, r3, r8
 801c292:	b29b      	uxth	r3, r3
 801c294:	b21d      	sxth	r5, r3
 801c296:	d813      	bhi.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801c298:	9b07      	ldr	r3, [sp, #28]
 801c29a:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801c29e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801c2a2:	1c63      	adds	r3, r4, #1
 801c2a4:	9901      	ldr	r1, [sp, #4]
 801c2a6:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801c2aa:	9b01      	ldr	r3, [sp, #4]
 801c2ac:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801c2b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c2b4:	805a      	strh	r2, [r3, #2]
 801c2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2b8:	f8a3 e006 	strh.w	lr, [r3, #6]
 801c2bc:	809a      	strh	r2, [r3, #4]
 801c2be:	e75e      	b.n	801c17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801c2c0:	9802      	ldr	r0, [sp, #8]
 801c2c2:	4575      	cmp	r5, lr
 801c2c4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c2c8:	db0d      	blt.n	801c2e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801c2ca:	4431      	add	r1, r6
 801c2cc:	9b06      	ldr	r3, [sp, #24]
 801c2ce:	4458      	add	r0, fp
 801c2d0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c2d4:	b289      	uxth	r1, r1
 801c2d6:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801c2da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c2de:	4419      	add	r1, r3
 801c2e0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801c2e4:	e57c      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c2e6:	4458      	add	r0, fp
 801c2e8:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801c2ec:	e79c      	b.n	801c228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801c2ee:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801c2f2:	2e07      	cmp	r6, #7
 801c2f4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801c2f8:	d812      	bhi.n	801c320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801c2fa:	1c75      	adds	r5, r6, #1
 801c2fc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c300:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c304:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801c308:	9d01      	ldr	r5, [sp, #4]
 801c30a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c30e:	442c      	add	r4, r5
 801c310:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c314:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801c318:	8061      	strh	r1, [r4, #2]
 801c31a:	80a2      	strh	r2, [r4, #4]
 801c31c:	80e3      	strh	r3, [r4, #6]
 801c31e:	e5c9      	b.n	801beb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c320:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c324:	3e01      	subs	r6, #1
 801c326:	445c      	add	r4, fp
 801c328:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c32c:	f04f 37ff 	mov.w	r7, #4294967295
 801c330:	2500      	movs	r5, #0
 801c332:	9305      	str	r3, [sp, #20]
 801c334:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801c338:	1e72      	subs	r2, r6, #1
 801c33a:	9302      	str	r3, [sp, #8]
 801c33c:	4691      	mov	r9, r2
 801c33e:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801c342:	9304      	str	r3, [sp, #16]
 801c344:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801c348:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c34c:	6818      	ldr	r0, [r3, #0]
 801c34e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c352:	9207      	str	r2, [sp, #28]
 801c354:	bf16      	itet	ne
 801c356:	9905      	ldrne	r1, [sp, #20]
 801c358:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801c35c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801c360:	9306      	str	r3, [sp, #24]
 801c362:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c366:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801c36a:	fb18 f801 	smulbb	r8, r8, r1
 801c36e:	6859      	ldr	r1, [r3, #4]
 801c370:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c374:	4671      	mov	r1, lr
 801c376:	a80c      	add	r0, sp, #48	; 0x30
 801c378:	f7ff fc5e 	bl	801bc38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c37c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c380:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c384:	f04f 0c08 	mov.w	ip, #8
 801c388:	9b04      	ldr	r3, [sp, #16]
 801c38a:	9a02      	ldr	r2, [sp, #8]
 801c38c:	fb10 f001 	smulbb	r0, r0, r1
 801c390:	fb02 8803 	mla	r8, r2, r3, r8
 801c394:	eba0 0108 	sub.w	r1, r0, r8
 801c398:	fb90 f0fc 	sdiv	r0, r0, ip
 801c39c:	4288      	cmp	r0, r1
 801c39e:	dc20      	bgt.n	801c3e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801c3a0:	4551      	cmp	r1, sl
 801c3a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c3a6:	da03      	bge.n	801c3b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801c3a8:	b1d9      	cbz	r1, 801c3e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801c3aa:	468a      	mov	sl, r1
 801c3ac:	464f      	mov	r7, r9
 801c3ae:	4635      	mov	r5, r6
 801c3b0:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3b4:	f119 0f02 	cmn.w	r9, #2
 801c3b8:	d1c6      	bne.n	801c348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801c3ba:	4616      	mov	r6, r2
 801c3bc:	3201      	adds	r2, #1
 801c3be:	f1a4 0408 	sub.w	r4, r4, #8
 801c3c2:	d1b7      	bne.n	801c334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801c3c4:	9b01      	ldr	r3, [sp, #4]
 801c3c6:	b2ac      	uxth	r4, r5
 801c3c8:	00ed      	lsls	r5, r5, #3
 801c3ca:	1958      	adds	r0, r3, r5
 801c3cc:	1c7b      	adds	r3, r7, #1
 801c3ce:	d10b      	bne.n	801c3e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801c3d0:	4601      	mov	r1, r0
 801c3d2:	9803      	ldr	r0, [sp, #12]
 801c3d4:	f7ff fc30 	bl	801bc38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c3d8:	4621      	mov	r1, r4
 801c3da:	9801      	ldr	r0, [sp, #4]
 801c3dc:	f7ff fcd6 	bl	801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c3e0:	e4fe      	b.n	801bde0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c3e2:	464f      	mov	r7, r9
 801c3e4:	4635      	mov	r5, r6
 801c3e6:	e7ed      	b.n	801c3c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801c3e8:	9b01      	ldr	r3, [sp, #4]
 801c3ea:	00ff      	lsls	r7, r7, #3
 801c3ec:	445d      	add	r5, fp
 801c3ee:	19d9      	adds	r1, r3, r7
 801c3f0:	445f      	add	r7, fp
 801c3f2:	f7ff fc21 	bl	801bc38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c3f6:	9b03      	ldr	r3, [sp, #12]
 801c3f8:	cb03      	ldmia	r3!, {r0, r1}
 801c3fa:	9b03      	ldr	r3, [sp, #12]
 801c3fc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801c400:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801c404:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801c408:	6869      	ldr	r1, [r5, #4]
 801c40a:	c303      	stmia	r3!, {r0, r1}
 801c40c:	e7e4      	b.n	801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801c40e:	bf00      	nop

0801c410 <_ZN8touchgfx11Application10invalidateEv>:
 801c410:	4b09      	ldr	r3, [pc, #36]	; (801c438 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801c412:	b082      	sub	sp, #8
 801c414:	2100      	movs	r1, #0
 801c416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c41a:	4b08      	ldr	r3, [pc, #32]	; (801c43c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801c41c:	9100      	str	r1, [sp, #0]
 801c41e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c422:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c426:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c42a:	ab02      	add	r3, sp, #8
 801c42c:	e913 0006 	ldmdb	r3, {r1, r2}
 801c430:	b002      	add	sp, #8
 801c432:	f7ff bcbf 	b.w	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c436:	bf00      	nop
 801c438:	200155dc 	.word	0x200155dc
 801c43c:	200155de 	.word	0x200155de

0801c440 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c444:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c448:	b09b      	sub	sp, #108	; 0x6c
 801c44a:	4604      	mov	r4, r0
 801c44c:	4630      	mov	r0, r6
 801c44e:	f7fb ffde 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c452:	4605      	mov	r5, r0
 801c454:	b940      	cbnz	r0, 801c468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801c456:	4620      	mov	r0, r4
 801c458:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c45c:	f7ff fcaa 	bl	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c460:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c464:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c468:	4bc8      	ldr	r3, [pc, #800]	; (801c78c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d03e      	beq.n	801c4ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c470:	4dc7      	ldr	r5, [pc, #796]	; (801c790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c472:	4628      	mov	r0, r5
 801c474:	f7fb ffcb 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c478:	4606      	mov	r6, r0
 801c47a:	2800      	cmp	r0, #0
 801c47c:	d137      	bne.n	801c4ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c47e:	4628      	mov	r0, r5
 801c480:	f7ff fa02 	bl	801b888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c484:	6829      	ldr	r1, [r5, #0]
 801c486:	686a      	ldr	r2, [r5, #4]
 801c488:	4620      	mov	r0, r4
 801c48a:	f7ff fc93 	bl	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c48e:	802e      	strh	r6, [r5, #0]
 801c490:	806e      	strh	r6, [r5, #2]
 801c492:	80ae      	strh	r6, [r5, #4]
 801c494:	80ee      	strh	r6, [r5, #6]
 801c496:	ae09      	add	r6, sp, #36	; 0x24
 801c498:	4630      	mov	r0, r6
 801c49a:	f7ff fc24 	bl	801bce6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c49e:	4abd      	ldr	r2, [pc, #756]	; (801c794 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c4a0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801c4a4:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801c4a8:	8815      	ldrh	r5, [r2, #0]
 801c4aa:	9202      	str	r2, [sp, #8]
 801c4ac:	462b      	mov	r3, r5
 801c4ae:	429f      	cmp	r7, r3
 801c4b0:	d924      	bls.n	801c4fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801c4b2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801c4b6:	2907      	cmp	r1, #7
 801c4b8:	d816      	bhi.n	801c4e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801c4ba:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c4be:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801c4c2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801c4c6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c4ca:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c4ce:	1c4a      	adds	r2, r1, #1
 801c4d0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801c4d4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801c4d8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801c4dc:	f8a2 9002 	strh.w	r9, [r2, #2]
 801c4e0:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c4e4:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	e7df      	b.n	801c4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801c4ee:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d1cf      	bne.n	801c496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801c4f6:	b01b      	add	sp, #108	; 0x6c
 801c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4fc:	462f      	mov	r7, r5
 801c4fe:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c502:	42bb      	cmp	r3, r7
 801c504:	d90b      	bls.n	801c51e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801c506:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801c50a:	3701      	adds	r7, #1
 801c50c:	4620      	mov	r0, r4
 801c50e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c512:	b2bf      	uxth	r7, r7
 801c514:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c518:	f7ff fc4c 	bl	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c51c:	e7ef      	b.n	801c4fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801c51e:	4a9e      	ldr	r2, [pc, #632]	; (801c798 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c520:	6813      	ldr	r3, [r2, #0]
 801c522:	4690      	mov	r8, r2
 801c524:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c528:	2b01      	cmp	r3, #1
 801c52a:	f040 80e4 	bne.w	801c6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801c52e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c532:	4629      	mov	r1, r5
 801c534:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801c538:	2500      	movs	r5, #0
 801c53a:	33aa      	adds	r3, #170	; 0xaa
 801c53c:	428f      	cmp	r7, r1
 801c53e:	f103 0308 	add.w	r3, r3, #8
 801c542:	dd0a      	ble.n	801c55a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801c544:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c548:	3101      	adds	r1, #1
 801c54a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801c54e:	4402      	add	r2, r0
 801c550:	b212      	sxth	r2, r2
 801c552:	4295      	cmp	r5, r2
 801c554:	bfb8      	it	lt
 801c556:	4615      	movlt	r5, r2
 801c558:	e7f0      	b.n	801c53c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801c55a:	4b90      	ldr	r3, [pc, #576]	; (801c79c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c55c:	f8df b238 	ldr.w	fp, [pc, #568]	; 801c798 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801c560:	881b      	ldrh	r3, [r3, #0]
 801c562:	46d8      	mov	r8, fp
 801c564:	2b0f      	cmp	r3, #15
 801c566:	bf8c      	ite	hi
 801c568:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801c56c:	f04f 0a01 	movls.w	sl, #1
 801c570:	2300      	movs	r3, #0
 801c572:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c576:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801c57a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c57e:	4438      	add	r0, r7
 801c580:	b207      	sxth	r7, r0
 801c582:	f8db 0000 	ldr.w	r0, [fp]
 801c586:	42bd      	cmp	r5, r7
 801c588:	6803      	ldr	r3, [r0, #0]
 801c58a:	f340 8084 	ble.w	801c696 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c58e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c592:	4798      	blx	r3
 801c594:	eb07 030a 	add.w	r3, r7, sl
 801c598:	4298      	cmp	r0, r3
 801c59a:	da07      	bge.n	801c5ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c59c:	4285      	cmp	r5, r0
 801c59e:	dd05      	ble.n	801c5ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c5a0:	4287      	cmp	r7, r0
 801c5a2:	dd6d      	ble.n	801c680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c5a4:	2f00      	cmp	r7, #0
 801c5a6:	dd6b      	ble.n	801c680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c5a8:	4628      	mov	r0, r5
 801c5aa:	e004      	b.n	801c5b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801c5ac:	4287      	cmp	r7, r0
 801c5ae:	dcfb      	bgt.n	801c5a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801c5b0:	42a8      	cmp	r0, r5
 801c5b2:	bfa8      	it	ge
 801c5b4:	4628      	movge	r0, r5
 801c5b6:	4b7a      	ldr	r3, [pc, #488]	; (801c7a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801c5b8:	1bc0      	subs	r0, r0, r7
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c5c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c5c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c5cc:	9b02      	ldr	r3, [sp, #8]
 801c5ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c5d2:	881f      	ldrh	r7, [r3, #0]
 801c5d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c5d8:	42bb      	cmp	r3, r7
 801c5da:	d9cc      	bls.n	801c576 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c5dc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c5e0:	ab07      	add	r3, sp, #28
 801c5e2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c5e6:	6851      	ldr	r1, [r2, #4]
 801c5e8:	c303      	stmia	r3!, {r0, r1}
 801c5ea:	a905      	add	r1, sp, #20
 801c5ec:	a807      	add	r0, sp, #28
 801c5ee:	f7ff fa8a 	bl	801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c5f2:	2800      	cmp	r0, #0
 801c5f4:	d04c      	beq.n	801c690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c5f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c5fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c5fe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801c602:	4686      	mov	lr, r0
 801c604:	4290      	cmp	r0, r2
 801c606:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c60a:	4448      	add	r0, r9
 801c60c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801c610:	bfb8      	it	lt
 801c612:	4696      	movlt	lr, r2
 801c614:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c618:	444a      	add	r2, r9
 801c61a:	b280      	uxth	r0, r0
 801c61c:	4299      	cmp	r1, r3
 801c61e:	468c      	mov	ip, r1
 801c620:	b292      	uxth	r2, r2
 801c622:	9303      	str	r3, [sp, #12]
 801c624:	bfb8      	it	lt
 801c626:	469c      	movlt	ip, r3
 801c628:	b203      	sxth	r3, r0
 801c62a:	fa0f f982 	sxth.w	r9, r2
 801c62e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c632:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c636:	454b      	cmp	r3, r9
 801c638:	bfb8      	it	lt
 801c63a:	4602      	movlt	r2, r0
 801c63c:	9b03      	ldr	r3, [sp, #12]
 801c63e:	eba2 020e 	sub.w	r2, r2, lr
 801c642:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c646:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c64a:	4411      	add	r1, r2
 801c64c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c650:	4413      	add	r3, r2
 801c652:	b289      	uxth	r1, r1
 801c654:	b29b      	uxth	r3, r3
 801c656:	b208      	sxth	r0, r1
 801c658:	b21a      	sxth	r2, r3
 801c65a:	4290      	cmp	r0, r2
 801c65c:	bfb8      	it	lt
 801c65e:	460b      	movlt	r3, r1
 801c660:	eba3 030c 	sub.w	r3, r3, ip
 801c664:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c668:	a807      	add	r0, sp, #28
 801c66a:	f7fb fed0 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c66e:	b920      	cbnz	r0, 801c67a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801c670:	6823      	ldr	r3, [r4, #0]
 801c672:	a907      	add	r1, sp, #28
 801c674:	4620      	mov	r0, r4
 801c676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c678:	4798      	blx	r3
 801c67a:	3701      	adds	r7, #1
 801c67c:	b2bf      	uxth	r7, r7
 801c67e:	e7a9      	b.n	801c5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801c680:	f8d8 0000 	ldr.w	r0, [r8]
 801c684:	2101      	movs	r1, #1
 801c686:	6803      	ldr	r3, [r0, #0]
 801c688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c68c:	4798      	blx	r3
 801c68e:	e772      	b.n	801c576 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c690:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c694:	e7e8      	b.n	801c668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c698:	4798      	blx	r3
 801c69a:	4b42      	ldr	r3, [pc, #264]	; (801c7a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801c69c:	781b      	ldrb	r3, [r3, #0]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	f43f af29 	beq.w	801c4f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c6aa:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c6ae:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801c6b2:	9b02      	ldr	r3, [sp, #8]
 801c6b4:	881b      	ldrh	r3, [r3, #0]
 801c6b6:	429d      	cmp	r5, r3
 801c6b8:	f67f af1d 	bls.w	801c4f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c6bc:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801c6c0:	2907      	cmp	r1, #7
 801c6c2:	d815      	bhi.n	801c6f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801c6c4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801c6c8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801c6cc:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801c6d0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801c6d4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801c6d8:	1c4a      	adds	r2, r1, #1
 801c6da:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801c6de:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801c6e2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801c6e6:	f8a2 e002 	strh.w	lr, [r2, #2]
 801c6ea:	f8a2 c004 	strh.w	ip, [r2, #4]
 801c6ee:	80d7      	strh	r7, [r2, #6]
 801c6f0:	3301      	adds	r3, #1
 801c6f2:	b29b      	uxth	r3, r3
 801c6f4:	e7df      	b.n	801c6b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801c6f6:	2b02      	cmp	r3, #2
 801c6f8:	f040 8135 	bne.w	801c966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c6fc:	4b2a      	ldr	r3, [pc, #168]	; (801c7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801c6fe:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	2b01      	cmp	r3, #1
 801c706:	f000 809c 	beq.w	801c842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c70a:	9b02      	ldr	r3, [sp, #8]
 801c70c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801c710:	f8b3 b000 	ldrh.w	fp, [r3]
 801c714:	f10b 0b01 	add.w	fp, fp, #1
 801c718:	fa1f fb8b 	uxth.w	fp, fp
 801c71c:	2a00      	cmp	r2, #0
 801c71e:	d0bc      	beq.n	801c69a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c720:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801c724:	4659      	mov	r1, fp
 801c726:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801c72a:	f04f 0800 	mov.w	r8, #0
 801c72e:	441d      	add	r5, r3
 801c730:	b22d      	sxth	r5, r5
 801c732:	b28b      	uxth	r3, r1
 801c734:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801c738:	429a      	cmp	r2, r3
 801c73a:	f240 80c0 	bls.w	801c8be <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801c73e:	4427      	add	r7, r4
 801c740:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801c744:	4608      	mov	r0, r1
 801c746:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801c74a:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801c74e:	4563      	cmp	r3, ip
 801c750:	f340 80a2 	ble.w	801c898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801c754:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801c758:	4465      	add	r5, ip
 801c75a:	b22d      	sxth	r5, r5
 801c75c:	429d      	cmp	r5, r3
 801c75e:	bfa8      	it	ge
 801c760:	461d      	movge	r5, r3
 801c762:	3101      	adds	r1, #1
 801c764:	4680      	mov	r8, r0
 801c766:	e7e4      	b.n	801c732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801c768:	d10b      	bne.n	801c782 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801c76a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801c76e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801c772:	458c      	cmp	ip, r1
 801c774:	bfb4      	ite	lt
 801c776:	469c      	movlt	ip, r3
 801c778:	46bc      	movge	ip, r7
 801c77a:	4572      	cmp	r2, lr
 801c77c:	bfb8      	it	lt
 801c77e:	4672      	movlt	r2, lr
 801c780:	e087      	b.n	801c892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c782:	428a      	cmp	r2, r1
 801c784:	46bc      	mov	ip, r7
 801c786:	bfb8      	it	lt
 801c788:	460a      	movlt	r2, r1
 801c78a:	e082      	b.n	801c892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c78c:	20015620 	.word	0x20015620
 801c790:	2001562c 	.word	0x2001562c
 801c794:	20000044 	.word	0x20000044
 801c798:	200155e8 	.word	0x200155e8
 801c79c:	200155de 	.word	0x200155de
 801c7a0:	200155dc 	.word	0x200155dc
 801c7a4:	200155e6 	.word	0x200155e6
 801c7a8:	200155e0 	.word	0x200155e0
 801c7ac:	1961      	adds	r1, r4, r5
 801c7ae:	ab07      	add	r3, sp, #28
 801c7b0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c7b4:	6849      	ldr	r1, [r1, #4]
 801c7b6:	c303      	stmia	r3!, {r0, r1}
 801c7b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c7bc:	a807      	add	r0, sp, #28
 801c7be:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c7c2:	2b13      	cmp	r3, #19
 801c7c4:	440b      	add	r3, r1
 801c7c6:	bfd8      	it	le
 801c7c8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c7cc:	1a9b      	subs	r3, r3, r2
 801c7ce:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c7d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c7d6:	f7ff f871 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c7da:	a807      	add	r0, sp, #28
 801c7dc:	f7fb fe17 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c7e0:	bb78      	cbnz	r0, 801c842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c7e2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c7e6:	4425      	add	r5, r4
 801c7e8:	f8d8 0000 	ldr.w	r0, [r8]
 801c7ec:	f1bc 0f14 	cmp.w	ip, #20
 801c7f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c7f4:	f8d0 e000 	ldr.w	lr, [r0]
 801c7f8:	bfa8      	it	ge
 801c7fa:	f04f 0c14 	movge.w	ip, #20
 801c7fe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c802:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c806:	fa1f fc8c 	uxth.w	ip, ip
 801c80a:	f8cd c000 	str.w	ip, [sp]
 801c80e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801c812:	47d0      	blx	sl
 801c814:	4682      	mov	sl, r0
 801c816:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c81a:	a807      	add	r0, sp, #28
 801c81c:	f7ff f834 	bl	801b888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c820:	6823      	ldr	r3, [r4, #0]
 801c822:	4620      	mov	r0, r4
 801c824:	a907      	add	r1, sp, #28
 801c826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c828:	4798      	blx	r3
 801c82a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801c82e:	eba0 000a 	sub.w	r0, r0, sl
 801c832:	b200      	sxth	r0, r0
 801c834:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801c838:	b918      	cbnz	r0, 801c842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c83a:	b2b9      	uxth	r1, r7
 801c83c:	4648      	mov	r0, r9
 801c83e:	f7ff faa5 	bl	801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c842:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801c846:	f1bb 0f00 	cmp.w	fp, #0
 801c84a:	f43f af26 	beq.w	801c69a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c84e:	9b02      	ldr	r3, [sp, #8]
 801c850:	2700      	movs	r7, #0
 801c852:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801c856:	881b      	ldrh	r3, [r3, #0]
 801c858:	3301      	adds	r3, #1
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	b299      	uxth	r1, r3
 801c85e:	00fd      	lsls	r5, r7, #3
 801c860:	458b      	cmp	fp, r1
 801c862:	d9a3      	bls.n	801c7ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801c864:	4425      	add	r5, r4
 801c866:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c86a:	469c      	mov	ip, r3
 801c86c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801c870:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801c874:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801c878:	4408      	add	r0, r1
 801c87a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801c87e:	4471      	add	r1, lr
 801c880:	b200      	sxth	r0, r0
 801c882:	b209      	sxth	r1, r1
 801c884:	4288      	cmp	r0, r1
 801c886:	f6bf af6f 	bge.w	801c768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801c88a:	4586      	cmp	lr, r0
 801c88c:	4672      	mov	r2, lr
 801c88e:	bfb8      	it	lt
 801c890:	4602      	movlt	r2, r0
 801c892:	3301      	adds	r3, #1
 801c894:	4667      	mov	r7, ip
 801c896:	e7e1      	b.n	801c85c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801c898:	d10c      	bne.n	801c8b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801c89a:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801c89e:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801c8a2:	4287      	cmp	r7, r0
 801c8a4:	bfb4      	ite	lt
 801c8a6:	4608      	movlt	r0, r1
 801c8a8:	4640      	movge	r0, r8
 801c8aa:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801c8ae:	443b      	add	r3, r7
 801c8b0:	b21b      	sxth	r3, r3
 801c8b2:	e753      	b.n	801c75c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801c8b4:	4565      	cmp	r5, ip
 801c8b6:	4640      	mov	r0, r8
 801c8b8:	bfa8      	it	ge
 801c8ba:	4665      	movge	r5, ip
 801c8bc:	e751      	b.n	801c762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801c8be:	eb09 0007 	add.w	r0, r9, r7
 801c8c2:	4427      	add	r7, r4
 801c8c4:	9203      	str	r2, [sp, #12]
 801c8c6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801c8ca:	f1ba 0f13 	cmp.w	sl, #19
 801c8ce:	bfde      	ittt	le
 801c8d0:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801c8d4:	4455      	addle	r5, sl
 801c8d6:	b22d      	sxthle	r5, r5
 801c8d8:	f7fb fd99 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8dc:	9a03      	ldr	r2, [sp, #12]
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	f47f af1c 	bne.w	801c71c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801c8e4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801c8e8:	fa1f fa8a 	uxth.w	sl, sl
 801c8ec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c8f0:	1aad      	subs	r5, r5, r2
 801c8f2:	4829      	ldr	r0, [pc, #164]	; (801c998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801c8f4:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801c8f8:	2d14      	cmp	r5, #20
 801c8fa:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801c8fe:	6800      	ldr	r0, [r0, #0]
 801c900:	bfa8      	it	ge
 801c902:	2514      	movge	r5, #20
 801c904:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c908:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c90c:	b289      	uxth	r1, r1
 801c90e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c912:	b2ad      	uxth	r5, r5
 801c914:	f8d0 c000 	ldr.w	ip, [r0]
 801c918:	b292      	uxth	r2, r2
 801c91a:	4555      	cmp	r5, sl
 801c91c:	bf94      	ite	ls
 801c91e:	9500      	strls	r5, [sp, #0]
 801c920:	f8cd a000 	strhi.w	sl, [sp]
 801c924:	b29b      	uxth	r3, r3
 801c926:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801c92a:	47a8      	blx	r5
 801c92c:	6823      	ldr	r3, [r4, #0]
 801c92e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c932:	a907      	add	r1, sp, #28
 801c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c936:	4620      	mov	r0, r4
 801c938:	4798      	blx	r3
 801c93a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c93e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801c942:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801c946:	1a5b      	subs	r3, r3, r1
 801c948:	440a      	add	r2, r1
 801c94a:	b21b      	sxth	r3, r3
 801c94c:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801c950:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801c954:	2b00      	cmp	r3, #0
 801c956:	f47f aed8 	bne.w	801c70a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c95a:	fa1f f188 	uxth.w	r1, r8
 801c95e:	4648      	mov	r0, r9
 801c960:	f7ff fa14 	bl	801bd8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c964:	e6d1      	b.n	801c70a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c966:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c96a:	42ab      	cmp	r3, r5
 801c96c:	f67f ae95 	bls.w	801c69a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c970:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c974:	ab07      	add	r3, sp, #28
 801c976:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c97a:	6851      	ldr	r1, [r2, #4]
 801c97c:	c303      	stmia	r3!, {r0, r1}
 801c97e:	a807      	add	r0, sp, #28
 801c980:	f7fb fd45 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c984:	b920      	cbnz	r0, 801c990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801c986:	6823      	ldr	r3, [r4, #0]
 801c988:	a907      	add	r1, sp, #28
 801c98a:	4620      	mov	r0, r4
 801c98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c98e:	4798      	blx	r3
 801c990:	3501      	adds	r5, #1
 801c992:	b2ad      	uxth	r5, r5
 801c994:	e7e7      	b.n	801c966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c996:	bf00      	nop
 801c998:	200155e8 	.word	0x200155e8

0801c99c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c99c:	4b03      	ldr	r3, [pc, #12]	; (801c9ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c99e:	2200      	movs	r2, #0
 801c9a0:	801a      	strh	r2, [r3, #0]
 801c9a2:	805a      	strh	r2, [r3, #2]
 801c9a4:	809a      	strh	r2, [r3, #4]
 801c9a6:	80da      	strh	r2, [r3, #6]
 801c9a8:	4770      	bx	lr
 801c9aa:	bf00      	nop
 801c9ac:	2001562c 	.word	0x2001562c

0801c9b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b4:	b09d      	sub	sp, #116	; 0x74
 801c9b6:	4606      	mov	r6, r0
 801c9b8:	4614      	mov	r4, r2
 801c9ba:	468a      	mov	sl, r1
 801c9bc:	a803      	add	r0, sp, #12
 801c9be:	461d      	mov	r5, r3
 801c9c0:	f000 fd6c 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801c9c4:	6833      	ldr	r3, [r6, #0]
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9ce:	4798      	blx	r3
 801c9d0:	6833      	ldr	r3, [r6, #0]
 801c9d2:	4607      	mov	r7, r0
 801c9d4:	4630      	mov	r0, r6
 801c9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c9d8:	4798      	blx	r3
 801c9da:	462a      	mov	r2, r5
 801c9dc:	2500      	movs	r5, #0
 801c9de:	4621      	mov	r1, r4
 801c9e0:	9000      	str	r0, [sp, #0]
 801c9e2:	463b      	mov	r3, r7
 801c9e4:	462c      	mov	r4, r5
 801c9e6:	46a9      	mov	r9, r5
 801c9e8:	46a8      	mov	r8, r5
 801c9ea:	a803      	add	r0, sp, #12
 801c9ec:	f000 fdb1 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	9302      	str	r3, [sp, #8]
 801c9f4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c9f8:	429c      	cmp	r4, r3
 801c9fa:	d002      	beq.n	801ca02 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c9fc:	455c      	cmp	r4, fp
 801c9fe:	bf18      	it	ne
 801ca00:	4625      	movne	r5, r4
 801ca02:	ab02      	add	r3, sp, #8
 801ca04:	4632      	mov	r2, r6
 801ca06:	4651      	mov	r1, sl
 801ca08:	a803      	add	r0, sp, #12
 801ca0a:	f001 f8a7 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ca0e:	4604      	mov	r4, r0
 801ca10:	b108      	cbz	r0, 801ca16 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ca12:	280a      	cmp	r0, #10
 801ca14:	d10a      	bne.n	801ca2c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ca16:	45c1      	cmp	r9, r8
 801ca18:	bf38      	it	cc
 801ca1a:	46c1      	movcc	r9, r8
 801ca1c:	f04f 0800 	mov.w	r8, #0
 801ca20:	2c00      	cmp	r4, #0
 801ca22:	d1e5      	bne.n	801c9f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ca24:	4648      	mov	r0, r9
 801ca26:	b01d      	add	sp, #116	; 0x74
 801ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca2c:	9a02      	ldr	r2, [sp, #8]
 801ca2e:	2a00      	cmp	r2, #0
 801ca30:	d0de      	beq.n	801c9f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ca32:	7b57      	ldrb	r7, [r2, #13]
 801ca34:	4629      	mov	r1, r5
 801ca36:	6833      	ldr	r3, [r6, #0]
 801ca38:	007f      	lsls	r7, r7, #1
 801ca3a:	8894      	ldrh	r4, [r2, #4]
 801ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca3e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ca42:	7a97      	ldrb	r7, [r2, #10]
 801ca44:	4307      	orrs	r7, r0
 801ca46:	4630      	mov	r0, r6
 801ca48:	4798      	blx	r3
 801ca4a:	4438      	add	r0, r7
 801ca4c:	4480      	add	r8, r0
 801ca4e:	fa1f f888 	uxth.w	r8, r8
 801ca52:	e7e5      	b.n	801ca20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ca54 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ca54:	b508      	push	{r3, lr}
 801ca56:	6803      	ldr	r3, [r0, #0]
 801ca58:	68db      	ldr	r3, [r3, #12]
 801ca5a:	4798      	blx	r3
 801ca5c:	b128      	cbz	r0, 801ca6a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ca5e:	7b43      	ldrb	r3, [r0, #13]
 801ca60:	7a80      	ldrb	r0, [r0, #10]
 801ca62:	005b      	lsls	r3, r3, #1
 801ca64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ca68:	4318      	orrs	r0, r3
 801ca6a:	bd08      	pop	{r3, pc}

0801ca6c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ca6c:	b40e      	push	{r1, r2, r3}
 801ca6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca70:	b09e      	sub	sp, #120	; 0x78
 801ca72:	4605      	mov	r5, r0
 801ca74:	ab23      	add	r3, sp, #140	; 0x8c
 801ca76:	a805      	add	r0, sp, #20
 801ca78:	f853 4b04 	ldr.w	r4, [r3], #4
 801ca7c:	9303      	str	r3, [sp, #12]
 801ca7e:	f000 fd0d 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801ca82:	682b      	ldr	r3, [r5, #0]
 801ca84:	4628      	mov	r0, r5
 801ca86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca88:	4798      	blx	r3
 801ca8a:	682b      	ldr	r3, [r5, #0]
 801ca8c:	4606      	mov	r6, r0
 801ca8e:	4628      	mov	r0, r5
 801ca90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca92:	4798      	blx	r3
 801ca94:	4633      	mov	r3, r6
 801ca96:	4621      	mov	r1, r4
 801ca98:	ae1e      	add	r6, sp, #120	; 0x78
 801ca9a:	2400      	movs	r4, #0
 801ca9c:	9000      	str	r0, [sp, #0]
 801ca9e:	9a03      	ldr	r2, [sp, #12]
 801caa0:	a805      	add	r0, sp, #20
 801caa2:	f000 fd56 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801caa6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801caaa:	462a      	mov	r2, r5
 801caac:	4633      	mov	r3, r6
 801caae:	4621      	mov	r1, r4
 801cab0:	a805      	add	r0, sp, #20
 801cab2:	f001 f853 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cab6:	b300      	cbz	r0, 801cafa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801cab8:	280a      	cmp	r0, #10
 801caba:	d01a      	beq.n	801caf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cabc:	9f04      	ldr	r7, [sp, #16]
 801cabe:	b1c7      	cbz	r7, 801caf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cac0:	7b78      	ldrb	r0, [r7, #13]
 801cac2:	7a3b      	ldrb	r3, [r7, #8]
 801cac4:	00c1      	lsls	r1, r0, #3
 801cac6:	88aa      	ldrh	r2, [r5, #4]
 801cac8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cacc:	4319      	orrs	r1, r3
 801cace:	0643      	lsls	r3, r0, #25
 801cad0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801cad4:	bf48      	it	mi
 801cad6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801cada:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cade:	bf48      	it	mi
 801cae0:	b219      	sxthmi	r1, r3
 801cae2:	79fb      	ldrb	r3, [r7, #7]
 801cae4:	4303      	orrs	r3, r0
 801cae6:	4413      	add	r3, r2
 801cae8:	1a5b      	subs	r3, r3, r1
 801caea:	b29b      	uxth	r3, r3
 801caec:	42a3      	cmp	r3, r4
 801caee:	bfc8      	it	gt
 801caf0:	b21c      	sxthgt	r4, r3
 801caf2:	4633      	mov	r3, r6
 801caf4:	462a      	mov	r2, r5
 801caf6:	2100      	movs	r1, #0
 801caf8:	e7da      	b.n	801cab0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cafa:	b2a0      	uxth	r0, r4
 801cafc:	b01e      	add	sp, #120	; 0x78
 801cafe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cb02:	b003      	add	sp, #12
 801cb04:	4770      	bx	lr

0801cb06 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cb06:	b40e      	push	{r1, r2, r3}
 801cb08:	b570      	push	{r4, r5, r6, lr}
 801cb0a:	b09d      	sub	sp, #116	; 0x74
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	ab21      	add	r3, sp, #132	; 0x84
 801cb10:	a803      	add	r0, sp, #12
 801cb12:	f853 5b04 	ldr.w	r5, [r3], #4
 801cb16:	9302      	str	r3, [sp, #8]
 801cb18:	f000 fcc0 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801cb1c:	6823      	ldr	r3, [r4, #0]
 801cb1e:	4620      	mov	r0, r4
 801cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb22:	4798      	blx	r3
 801cb24:	6823      	ldr	r3, [r4, #0]
 801cb26:	4606      	mov	r6, r0
 801cb28:	4620      	mov	r0, r4
 801cb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb2c:	2401      	movs	r4, #1
 801cb2e:	4798      	blx	r3
 801cb30:	4633      	mov	r3, r6
 801cb32:	9000      	str	r0, [sp, #0]
 801cb34:	4629      	mov	r1, r5
 801cb36:	9a02      	ldr	r2, [sp, #8]
 801cb38:	a803      	add	r0, sp, #12
 801cb3a:	f000 fd0a 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb3e:	a803      	add	r0, sp, #12
 801cb40:	f001 f8d8 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb44:	b2a3      	uxth	r3, r4
 801cb46:	b138      	cbz	r0, 801cb58 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cb48:	280a      	cmp	r0, #10
 801cb4a:	a803      	add	r0, sp, #12
 801cb4c:	bf04      	itt	eq
 801cb4e:	3301      	addeq	r3, #1
 801cb50:	b21c      	sxtheq	r4, r3
 801cb52:	f001 f8cf 	bl	801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb56:	e7f5      	b.n	801cb44 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cb58:	4618      	mov	r0, r3
 801cb5a:	b01d      	add	sp, #116	; 0x74
 801cb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb60:	b003      	add	sp, #12
 801cb62:	4770      	bx	lr

0801cb64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cb64:	b40e      	push	{r1, r2, r3}
 801cb66:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb68:	b09e      	sub	sp, #120	; 0x78
 801cb6a:	4604      	mov	r4, r0
 801cb6c:	ab23      	add	r3, sp, #140	; 0x8c
 801cb6e:	a805      	add	r0, sp, #20
 801cb70:	f853 5b04 	ldr.w	r5, [r3], #4
 801cb74:	9303      	str	r3, [sp, #12]
 801cb76:	f000 fc91 	bl	801d49c <_ZN8touchgfx12TextProviderC1Ev>
 801cb7a:	6823      	ldr	r3, [r4, #0]
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb80:	4798      	blx	r3
 801cb82:	6823      	ldr	r3, [r4, #0]
 801cb84:	4606      	mov	r6, r0
 801cb86:	4620      	mov	r0, r4
 801cb88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb8a:	4798      	blx	r3
 801cb8c:	4633      	mov	r3, r6
 801cb8e:	4629      	mov	r1, r5
 801cb90:	9000      	str	r0, [sp, #0]
 801cb92:	9a03      	ldr	r2, [sp, #12]
 801cb94:	a805      	add	r0, sp, #20
 801cb96:	f000 fcdc 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb9a:	ad1e      	add	r5, sp, #120	; 0x78
 801cb9c:	2100      	movs	r1, #0
 801cb9e:	26ff      	movs	r6, #255	; 0xff
 801cba0:	4622      	mov	r2, r4
 801cba2:	a805      	add	r0, sp, #20
 801cba4:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cba8:	462b      	mov	r3, r5
 801cbaa:	f000 ffd7 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbae:	b1d8      	cbz	r0, 801cbe8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801cbb0:	280a      	cmp	r0, #10
 801cbb2:	d012      	beq.n	801cbda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cbb4:	9804      	ldr	r0, [sp, #16]
 801cbb6:	b180      	cbz	r0, 801cbda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cbb8:	7b47      	ldrb	r7, [r0, #13]
 801cbba:	7922      	ldrb	r2, [r4, #4]
 801cbbc:	00fb      	lsls	r3, r7, #3
 801cbbe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cbc2:	7a03      	ldrb	r3, [r0, #8]
 801cbc4:	430b      	orrs	r3, r1
 801cbc6:	0679      	lsls	r1, r7, #25
 801cbc8:	bf44      	itt	mi
 801cbca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbce:	b21b      	sxthmi	r3, r3
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	b2db      	uxtb	r3, r3
 801cbd4:	429e      	cmp	r6, r3
 801cbd6:	bf28      	it	cs
 801cbd8:	461e      	movcs	r6, r3
 801cbda:	462b      	mov	r3, r5
 801cbdc:	4622      	mov	r2, r4
 801cbde:	2100      	movs	r1, #0
 801cbe0:	a805      	add	r0, sp, #20
 801cbe2:	f000 ffbb 	bl	801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbe6:	e7e2      	b.n	801cbae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801cbe8:	4630      	mov	r0, r6
 801cbea:	b01e      	add	sp, #120	; 0x78
 801cbec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cbf0:	b003      	add	sp, #12
 801cbf2:	4770      	bx	lr

0801cbf4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cbf4:	b513      	push	{r0, r1, r4, lr}
 801cbf6:	6803      	ldr	r3, [r0, #0]
 801cbf8:	2400      	movs	r4, #0
 801cbfa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cbfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cc02:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cc06:	4669      	mov	r1, sp
 801cc08:	691b      	ldr	r3, [r3, #16]
 801cc0a:	9400      	str	r4, [sp, #0]
 801cc0c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cc10:	4798      	blx	r3
 801cc12:	b002      	add	sp, #8
 801cc14:	bd10      	pop	{r4, pc}

0801cc16 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cc16:	b538      	push	{r3, r4, r5, lr}
 801cc18:	680b      	ldr	r3, [r1, #0]
 801cc1a:	460c      	mov	r4, r1
 801cc1c:	4605      	mov	r5, r0
 801cc1e:	68db      	ldr	r3, [r3, #12]
 801cc20:	4798      	blx	r3
 801cc22:	6823      	ldr	r3, [r4, #0]
 801cc24:	4620      	mov	r0, r4
 801cc26:	4629      	mov	r1, r5
 801cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc2a:	4798      	blx	r3
 801cc2c:	4628      	mov	r0, r5
 801cc2e:	bd38      	pop	{r3, r4, r5, pc}

0801cc30 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cc30:	b410      	push	{r4}
 801cc32:	880a      	ldrh	r2, [r1, #0]
 801cc34:	8884      	ldrh	r4, [r0, #4]
 801cc36:	4422      	add	r2, r4
 801cc38:	800a      	strh	r2, [r1, #0]
 801cc3a:	884a      	ldrh	r2, [r1, #2]
 801cc3c:	88c4      	ldrh	r4, [r0, #6]
 801cc3e:	4422      	add	r2, r4
 801cc40:	804a      	strh	r2, [r1, #2]
 801cc42:	6940      	ldr	r0, [r0, #20]
 801cc44:	b120      	cbz	r0, 801cc50 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cc46:	6803      	ldr	r3, [r0, #0]
 801cc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc4e:	4718      	bx	r3
 801cc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc54:	4770      	bx	lr

0801cc56 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cc56:	b570      	push	{r4, r5, r6, lr}
 801cc58:	8882      	ldrh	r2, [r0, #4]
 801cc5a:	460c      	mov	r4, r1
 801cc5c:	880b      	ldrh	r3, [r1, #0]
 801cc5e:	4605      	mov	r5, r0
 801cc60:	4413      	add	r3, r2
 801cc62:	800b      	strh	r3, [r1, #0]
 801cc64:	884b      	ldrh	r3, [r1, #2]
 801cc66:	88c2      	ldrh	r2, [r0, #6]
 801cc68:	4413      	add	r3, r2
 801cc6a:	804b      	strh	r3, [r1, #2]
 801cc6c:	1d01      	adds	r1, r0, #4
 801cc6e:	4620      	mov	r0, r4
 801cc70:	f7fb fb8a 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801cc74:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	dd0b      	ble.n	801cc94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc7c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	dd07      	ble.n	801cc94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc84:	6968      	ldr	r0, [r5, #20]
 801cc86:	b128      	cbz	r0, 801cc94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc88:	6803      	ldr	r3, [r0, #0]
 801cc8a:	4621      	mov	r1, r4
 801cc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc92:	4718      	bx	r3
 801cc94:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cc98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801cc98:	b570      	push	{r4, r5, r6, lr}
 801cc9a:	8882      	ldrh	r2, [r0, #4]
 801cc9c:	460c      	mov	r4, r1
 801cc9e:	880b      	ldrh	r3, [r1, #0]
 801cca0:	4605      	mov	r5, r0
 801cca2:	4413      	add	r3, r2
 801cca4:	800b      	strh	r3, [r1, #0]
 801cca6:	884b      	ldrh	r3, [r1, #2]
 801cca8:	88c2      	ldrh	r2, [r0, #6]
 801ccaa:	4413      	add	r3, r2
 801ccac:	804b      	strh	r3, [r1, #2]
 801ccae:	1d01      	adds	r1, r0, #4
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	f7fb fb69 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801ccb6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	dd18      	ble.n	801ccf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ccbe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	dd14      	ble.n	801ccf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ccc6:	6968      	ldr	r0, [r5, #20]
 801ccc8:	b128      	cbz	r0, 801ccd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ccca:	6803      	ldr	r3, [r0, #0]
 801cccc:	4621      	mov	r1, r4
 801ccce:	691b      	ldr	r3, [r3, #16]
 801ccd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ccd4:	4718      	bx	r3
 801ccd6:	4b07      	ldr	r3, [pc, #28]	; (801ccf4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	3304      	adds	r3, #4
 801ccdc:	429d      	cmp	r5, r3
 801ccde:	d107      	bne.n	801ccf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801cce0:	f7fe fff0 	bl	801bcc4 <_ZN8touchgfx11Application11getInstanceEv>
 801cce4:	6821      	ldr	r1, [r4, #0]
 801cce6:	6862      	ldr	r2, [r4, #4]
 801cce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ccec:	f7ff b862 	b.w	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ccf0:	bd70      	pop	{r4, r5, r6, pc}
 801ccf2:	bf00      	nop
 801ccf4:	20015624 	.word	0x20015624

0801ccf8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ccf8:	b570      	push	{r4, r5, r6, lr}
 801ccfa:	4604      	mov	r4, r0
 801ccfc:	4616      	mov	r6, r2
 801ccfe:	460d      	mov	r5, r1
 801cd00:	b901      	cbnz	r1, 801cd04 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cd02:	b192      	cbz	r2, 801cd2a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801cd04:	6823      	ldr	r3, [r4, #0]
 801cd06:	4620      	mov	r0, r4
 801cd08:	699b      	ldr	r3, [r3, #24]
 801cd0a:	4798      	blx	r3
 801cd0c:	88e2      	ldrh	r2, [r4, #6]
 801cd0e:	88a1      	ldrh	r1, [r4, #4]
 801cd10:	4620      	mov	r0, r4
 801cd12:	4432      	add	r2, r6
 801cd14:	4429      	add	r1, r5
 801cd16:	b212      	sxth	r2, r2
 801cd18:	b209      	sxth	r1, r1
 801cd1a:	f7e6 fb50 	bl	80033be <_ZN8touchgfx8Drawable5setXYEss>
 801cd1e:	6823      	ldr	r3, [r4, #0]
 801cd20:	4620      	mov	r0, r4
 801cd22:	699b      	ldr	r3, [r3, #24]
 801cd24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd28:	4718      	bx	r3
 801cd2a:	bd70      	pop	{r4, r5, r6, pc}

0801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cd2c:	b510      	push	{r4, lr}
 801cd2e:	2300      	movs	r3, #0
 801cd30:	4604      	mov	r4, r0
 801cd32:	4608      	mov	r0, r1
 801cd34:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cd38:	8023      	strh	r3, [r4, #0]
 801cd3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd3e:	8063      	strh	r3, [r4, #2]
 801cd40:	6803      	ldr	r3, [r0, #0]
 801cd42:	80a1      	strh	r1, [r4, #4]
 801cd44:	4621      	mov	r1, r4
 801cd46:	80e2      	strh	r2, [r4, #6]
 801cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd4a:	4798      	blx	r3
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	bd10      	pop	{r4, pc}

0801cd50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cd50:	b530      	push	{r4, r5, lr}
 801cd52:	8083      	strh	r3, [r0, #4]
 801cd54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cd58:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cd5c:	7183      	strb	r3, [r0, #6]
 801cd5e:	79c3      	ldrb	r3, [r0, #7]
 801cd60:	6101      	str	r1, [r0, #16]
 801cd62:	f365 0306 	bfi	r3, r5, #0, #7
 801cd66:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cd6a:	8282      	strh	r2, [r0, #20]
 801cd6c:	f365 13c7 	bfi	r3, r5, #7, #1
 801cd70:	71c3      	strb	r3, [r0, #7]
 801cd72:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cd76:	7203      	strb	r3, [r0, #8]
 801cd78:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cd7c:	7243      	strb	r3, [r0, #9]
 801cd7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cd82:	8143      	strh	r3, [r0, #10]
 801cd84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cd88:	8183      	strh	r3, [r0, #12]
 801cd8a:	4b01      	ldr	r3, [pc, #4]	; (801cd90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cd8c:	6003      	str	r3, [r0, #0]
 801cd8e:	bd30      	pop	{r4, r5, pc}
 801cd90:	08030e64 	.word	0x08030e64

0801cd94 <_ZNK8touchgfx9ConstFont4findEt>:
 801cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd96:	6904      	ldr	r4, [r0, #16]
 801cd98:	b3bc      	cbz	r4, 801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd9a:	88a3      	ldrh	r3, [r4, #4]
 801cd9c:	8a82      	ldrh	r2, [r0, #20]
 801cd9e:	1acb      	subs	r3, r1, r3
 801cda0:	f102 32ff 	add.w	r2, r2, #4294967295
 801cda4:	d431      	bmi.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cda6:	4293      	cmp	r3, r2
 801cda8:	dd0c      	ble.n	801cdc4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cdaa:	230e      	movs	r3, #14
 801cdac:	fb03 4302 	mla	r3, r3, r2, r4
 801cdb0:	889b      	ldrh	r3, [r3, #4]
 801cdb2:	1a5b      	subs	r3, r3, r1
 801cdb4:	1ad3      	subs	r3, r2, r3
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	db27      	blt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	bfbc      	itt	lt
 801cdbe:	2302      	movlt	r3, #2
 801cdc0:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cdc4:	2500      	movs	r5, #0
 801cdc6:	260e      	movs	r6, #14
 801cdc8:	4295      	cmp	r5, r2
 801cdca:	dc1e      	bgt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdcc:	fb06 4003 	mla	r0, r6, r3, r4
 801cdd0:	8887      	ldrh	r7, [r0, #4]
 801cdd2:	42b9      	cmp	r1, r7
 801cdd4:	d01a      	beq.n	801ce0c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cdd6:	d20d      	bcs.n	801cdf4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cdd8:	1e5a      	subs	r2, r3, #1
 801cdda:	4295      	cmp	r5, r2
 801cddc:	dc15      	bgt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdde:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cde2:	1a5b      	subs	r3, r3, r1
 801cde4:	1ad3      	subs	r3, r2, r3
 801cde6:	429a      	cmp	r2, r3
 801cde8:	db0f      	blt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdea:	429d      	cmp	r5, r3
 801cdec:	ddec      	ble.n	801cdc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cdee:	1953      	adds	r3, r2, r5
 801cdf0:	105b      	asrs	r3, r3, #1
 801cdf2:	e7e9      	b.n	801cdc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cdf4:	1c5d      	adds	r5, r3, #1
 801cdf6:	42aa      	cmp	r2, r5
 801cdf8:	db07      	blt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdfa:	8a43      	ldrh	r3, [r0, #18]
 801cdfc:	1acb      	subs	r3, r1, r3
 801cdfe:	442b      	add	r3, r5
 801ce00:	429d      	cmp	r5, r3
 801ce02:	dc02      	bgt.n	801ce0a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ce04:	429a      	cmp	r2, r3
 801ce06:	dadf      	bge.n	801cdc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ce08:	e7f1      	b.n	801cdee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801ce0a:	2000      	movs	r0, #0
 801ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ce0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce10:	4604      	mov	r4, r0
 801ce12:	4617      	mov	r7, r2
 801ce14:	461e      	mov	r6, r3
 801ce16:	b911      	cbnz	r1, 801ce1e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ce18:	2500      	movs	r5, #0
 801ce1a:	4628      	mov	r0, r5
 801ce1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce1e:	290a      	cmp	r1, #10
 801ce20:	d0fa      	beq.n	801ce18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce22:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ce26:	4291      	cmp	r1, r2
 801ce28:	d0f6      	beq.n	801ce18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce2a:	f242 020b 	movw	r2, #8203	; 0x200b
 801ce2e:	4291      	cmp	r1, r2
 801ce30:	d0f2      	beq.n	801ce18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce32:	f7ff ffaf 	bl	801cd94 <_ZNK8touchgfx9ConstFont4findEt>
 801ce36:	4605      	mov	r5, r0
 801ce38:	b950      	cbnz	r0, 801ce50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801ce3a:	6823      	ldr	r3, [r4, #0]
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	691b      	ldr	r3, [r3, #16]
 801ce40:	4798      	blx	r3
 801ce42:	4601      	mov	r1, r0
 801ce44:	4620      	mov	r0, r4
 801ce46:	f7ff ffa5 	bl	801cd94 <_ZNK8touchgfx9ConstFont4findEt>
 801ce4a:	4605      	mov	r5, r0
 801ce4c:	2800      	cmp	r0, #0
 801ce4e:	d0e3      	beq.n	801ce18 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce50:	6823      	ldr	r3, [r4, #0]
 801ce52:	4629      	mov	r1, r5
 801ce54:	4620      	mov	r0, r4
 801ce56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce58:	4798      	blx	r3
 801ce5a:	6038      	str	r0, [r7, #0]
 801ce5c:	6823      	ldr	r3, [r4, #0]
 801ce5e:	4620      	mov	r0, r4
 801ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce62:	4798      	blx	r3
 801ce64:	7030      	strb	r0, [r6, #0]
 801ce66:	e7d8      	b.n	801ce1a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801ce68 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801ce68:	2000      	movs	r0, #0
 801ce6a:	4770      	bx	lr

0801ce6c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801ce6c:	2001      	movs	r0, #1
 801ce6e:	4770      	bx	lr

0801ce70 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801ce70:	2002      	movs	r0, #2
 801ce72:	4770      	bx	lr

0801ce74 <_ZN8touchgfx6ScreenD1Ev>:
 801ce74:	4770      	bx	lr

0801ce76 <_ZN8touchgfx12GestureEventD1Ev>:
 801ce76:	4770      	bx	lr

0801ce78 <_ZN8touchgfx9DragEventD1Ev>:
 801ce78:	4770      	bx	lr

0801ce7a <_ZN8touchgfx10ClickEventD1Ev>:
 801ce7a:	4770      	bx	lr

0801ce7c <_ZN8touchgfx10ClickEventD0Ev>:
 801ce7c:	b510      	push	{r4, lr}
 801ce7e:	4604      	mov	r4, r0
 801ce80:	210c      	movs	r1, #12
 801ce82:	f00d fc9f 	bl	802a7c4 <_ZdlPvj>
 801ce86:	4620      	mov	r0, r4
 801ce88:	bd10      	pop	{r4, pc}

0801ce8a <_ZN8touchgfx9DragEventD0Ev>:
 801ce8a:	b510      	push	{r4, lr}
 801ce8c:	4604      	mov	r4, r0
 801ce8e:	2110      	movs	r1, #16
 801ce90:	f00d fc98 	bl	802a7c4 <_ZdlPvj>
 801ce94:	4620      	mov	r0, r4
 801ce96:	bd10      	pop	{r4, pc}

0801ce98 <_ZN8touchgfx12GestureEventD0Ev>:
 801ce98:	b510      	push	{r4, lr}
 801ce9a:	4604      	mov	r4, r0
 801ce9c:	210c      	movs	r1, #12
 801ce9e:	f00d fc91 	bl	802a7c4 <_ZdlPvj>
 801cea2:	4620      	mov	r0, r4
 801cea4:	bd10      	pop	{r4, pc}

0801cea6 <_ZN8touchgfx6ScreenD0Ev>:
 801cea6:	b510      	push	{r4, lr}
 801cea8:	4604      	mov	r4, r0
 801ceaa:	213c      	movs	r1, #60	; 0x3c
 801ceac:	f00d fc8a 	bl	802a7c4 <_ZdlPvj>
 801ceb0:	4620      	mov	r0, r4
 801ceb2:	bd10      	pop	{r4, pc}

0801ceb4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ceb4:	b530      	push	{r4, r5, lr}
 801ceb6:	460d      	mov	r5, r1
 801ceb8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ceba:	b087      	sub	sp, #28
 801cebc:	4604      	mov	r4, r0
 801cebe:	b301      	cbz	r1, 801cf02 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cec0:	a801      	add	r0, sp, #4
 801cec2:	f7ff ff33 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cec6:	892a      	ldrh	r2, [r5, #8]
 801cec8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cecc:	7928      	ldrb	r0, [r5, #4]
 801cece:	1ad2      	subs	r2, r2, r3
 801ced0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ced2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ced6:	441a      	add	r2, r3
 801ced8:	896b      	ldrh	r3, [r5, #10]
 801ceda:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cede:	f88d 0010 	strb.w	r0, [sp, #16]
 801cee2:	1b5b      	subs	r3, r3, r5
 801cee4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801cee6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cee8:	442b      	add	r3, r5
 801ceea:	4d07      	ldr	r5, [pc, #28]	; (801cf08 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ceec:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cef0:	a903      	add	r1, sp, #12
 801cef2:	9503      	str	r5, [sp, #12]
 801cef4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cefc:	6803      	ldr	r3, [r0, #0]
 801cefe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf00:	4798      	blx	r3
 801cf02:	b007      	add	sp, #28
 801cf04:	bd30      	pop	{r4, r5, pc}
 801cf06:	bf00      	nop
 801cf08:	08030ee4 	.word	0x08030ee4

0801cf0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cf12:	b08a      	sub	sp, #40	; 0x28
 801cf14:	4604      	mov	r4, r0
 801cf16:	460d      	mov	r5, r1
 801cf18:	b113      	cbz	r3, 801cf20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801cf1a:	790b      	ldrb	r3, [r1, #4]
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d044      	beq.n	801cfaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cf20:	f104 0804 	add.w	r8, r4, #4
 801cf24:	a803      	add	r0, sp, #12
 801cf26:	4641      	mov	r1, r8
 801cf28:	f7ff ff00 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf2c:	792b      	ldrb	r3, [r5, #4]
 801cf2e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cf32:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801cf36:	b983      	cbnz	r3, 801cf5a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cf38:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801cf3c:	892a      	ldrh	r2, [r5, #8]
 801cf3e:	88e9      	ldrh	r1, [r5, #6]
 801cf40:	4640      	mov	r0, r8
 801cf42:	1b92      	subs	r2, r2, r6
 801cf44:	9301      	str	r3, [sp, #4]
 801cf46:	1bc9      	subs	r1, r1, r7
 801cf48:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801cf4c:	b212      	sxth	r2, r2
 801cf4e:	9300      	str	r3, [sp, #0]
 801cf50:	b209      	sxth	r1, r1
 801cf52:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801cf56:	f7fb f935 	bl	80181c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801cf5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cf5c:	b329      	cbz	r1, 801cfaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cf5e:	a805      	add	r0, sp, #20
 801cf60:	f7ff fee4 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf64:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cf68:	792b      	ldrb	r3, [r5, #4]
 801cf6a:	a907      	add	r1, sp, #28
 801cf6c:	1abf      	subs	r7, r7, r2
 801cf6e:	88ea      	ldrh	r2, [r5, #6]
 801cf70:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cf72:	4417      	add	r7, r2
 801cf74:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801cf76:	f88d 3020 	strb.w	r3, [sp, #32]
 801cf7a:	4417      	add	r7, r2
 801cf7c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801cf80:	1ab6      	subs	r6, r6, r2
 801cf82:	892a      	ldrh	r2, [r5, #8]
 801cf84:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801cf88:	4416      	add	r6, r2
 801cf8a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cf8c:	4416      	add	r6, r2
 801cf8e:	4a08      	ldr	r2, [pc, #32]	; (801cfb0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801cf90:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801cf94:	2600      	movs	r6, #0
 801cf96:	9207      	str	r2, [sp, #28]
 801cf98:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801cf9c:	6803      	ldr	r3, [r0, #0]
 801cf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfa0:	4798      	blx	r3
 801cfa2:	792b      	ldrb	r3, [r5, #4]
 801cfa4:	b10b      	cbz	r3, 801cfaa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cfa6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801cfaa:	b00a      	add	sp, #40	; 0x28
 801cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfb0:	08030ebc 	.word	0x08030ebc

0801cfb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfb8:	460c      	mov	r4, r1
 801cfba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cfbc:	b088      	sub	sp, #32
 801cfbe:	4605      	mov	r5, r0
 801cfc0:	2900      	cmp	r1, #0
 801cfc2:	d06d      	beq.n	801d0a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cfc4:	4668      	mov	r0, sp
 801cfc6:	f7ff feb1 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cfca:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801cfcc:	88e3      	ldrh	r3, [r4, #6]
 801cfce:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cfd2:	440b      	add	r3, r1
 801cfd4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cfd8:	b21b      	sxth	r3, r3
 801cfda:	4543      	cmp	r3, r8
 801cfdc:	db31      	blt.n	801d042 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cfde:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cfe2:	44c4      	add	ip, r8
 801cfe4:	fa0f fc8c 	sxth.w	ip, ip
 801cfe8:	4563      	cmp	r3, ip
 801cfea:	da2a      	bge.n	801d042 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cfec:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801cfee:	8926      	ldrh	r6, [r4, #8]
 801cff0:	4416      	add	r6, r2
 801cff2:	b236      	sxth	r6, r6
 801cff4:	42be      	cmp	r6, r7
 801cff6:	db24      	blt.n	801d042 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cff8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cffc:	4438      	add	r0, r7
 801cffe:	b200      	sxth	r0, r0
 801d000:	4286      	cmp	r6, r0
 801d002:	da1e      	bge.n	801d042 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d004:	8963      	ldrh	r3, [r4, #10]
 801d006:	4419      	add	r1, r3
 801d008:	b209      	sxth	r1, r1
 801d00a:	4541      	cmp	r1, r8
 801d00c:	db08      	blt.n	801d020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d00e:	4561      	cmp	r1, ip
 801d010:	da06      	bge.n	801d020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d012:	89a3      	ldrh	r3, [r4, #12]
 801d014:	441a      	add	r2, r3
 801d016:	b212      	sxth	r2, r2
 801d018:	42ba      	cmp	r2, r7
 801d01a:	db01      	blt.n	801d020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d01c:	4282      	cmp	r2, r0
 801d01e:	db10      	blt.n	801d042 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d020:	4b21      	ldr	r3, [pc, #132]	; (801d0a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d022:	a904      	add	r1, sp, #16
 801d024:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d026:	9304      	str	r3, [sp, #16]
 801d028:	2302      	movs	r3, #2
 801d02a:	f88d 3014 	strb.w	r3, [sp, #20]
 801d02e:	2300      	movs	r3, #0
 801d030:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d034:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d038:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d03c:	6803      	ldr	r3, [r0, #0]
 801d03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d040:	4798      	blx	r3
 801d042:	1d29      	adds	r1, r5, #4
 801d044:	a802      	add	r0, sp, #8
 801d046:	f7ff fe71 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d04a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d04e:	88e0      	ldrh	r0, [r4, #6]
 801d050:	eba3 0808 	sub.w	r8, r3, r8
 801d054:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d058:	7921      	ldrb	r1, [r4, #4]
 801d05a:	fa1f f888 	uxth.w	r8, r8
 801d05e:	1bdf      	subs	r7, r3, r7
 801d060:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d064:	b2bb      	uxth	r3, r7
 801d066:	4440      	add	r0, r8
 801d068:	8922      	ldrh	r2, [r4, #8]
 801d06a:	8967      	ldrh	r7, [r4, #10]
 801d06c:	4460      	add	r0, ip
 801d06e:	89a4      	ldrh	r4, [r4, #12]
 801d070:	441a      	add	r2, r3
 801d072:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d074:	44b8      	add	r8, r7
 801d076:	4423      	add	r3, r4
 801d078:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d07c:	4432      	add	r2, r6
 801d07e:	44e0      	add	r8, ip
 801d080:	4433      	add	r3, r6
 801d082:	4c0a      	ldr	r4, [pc, #40]	; (801d0ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d084:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d086:	f88d 1014 	strb.w	r1, [sp, #20]
 801d08a:	a904      	add	r1, sp, #16
 801d08c:	9404      	str	r4, [sp, #16]
 801d08e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d092:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d096:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d09a:	6803      	ldr	r3, [r0, #0]
 801d09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d09e:	4798      	blx	r3
 801d0a0:	b008      	add	sp, #32
 801d0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0a6:	bf00      	nop
 801d0a8:	08030ebc 	.word	0x08030ebc
 801d0ac:	08030ed0 	.word	0x08030ed0

0801d0b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d0b2:	4604      	mov	r4, r0
 801d0b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d0b8:	3201      	adds	r2, #1
 801d0ba:	d112      	bne.n	801d0e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d0bc:	2500      	movs	r5, #0
 801d0be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d0c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d0c6:	6803      	ldr	r3, [r0, #0]
 801d0c8:	9500      	str	r5, [sp, #0]
 801d0ca:	466d      	mov	r5, sp
 801d0cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d0d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d0d4:	4629      	mov	r1, r5
 801d0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0d8:	4798      	blx	r3
 801d0da:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d0de:	e884 0003 	stmia.w	r4, {r0, r1}
 801d0e2:	4620      	mov	r0, r4
 801d0e4:	b003      	add	sp, #12
 801d0e6:	bd30      	pop	{r4, r5, pc}

0801d0e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d0e8:	b513      	push	{r0, r1, r4, lr}
 801d0ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d0ee:	4604      	mov	r4, r0
 801d0f0:	3301      	adds	r3, #1
 801d0f2:	d109      	bne.n	801d108 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d0f4:	4601      	mov	r1, r0
 801d0f6:	4668      	mov	r0, sp
 801d0f8:	f7ff fe18 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0fc:	f8bd 3000 	ldrh.w	r3, [sp]
 801d100:	8423      	strh	r3, [r4, #32]
 801d102:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d106:	8463      	strh	r3, [r4, #34]	; 0x22
 801d108:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d10c:	b002      	add	sp, #8
 801d10e:	bd10      	pop	{r4, pc}

0801d110 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d110:	b513      	push	{r0, r1, r4, lr}
 801d112:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d116:	4604      	mov	r4, r0
 801d118:	3301      	adds	r3, #1
 801d11a:	d109      	bne.n	801d130 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d11c:	4601      	mov	r1, r0
 801d11e:	4668      	mov	r0, sp
 801d120:	f7ff fe04 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d124:	f8bd 3000 	ldrh.w	r3, [sp]
 801d128:	8423      	strh	r3, [r4, #32]
 801d12a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d12e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d130:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d134:	b002      	add	sp, #8
 801d136:	bd10      	pop	{r4, pc}

0801d138 <_ZN8touchgfx6ScreenC1Ev>:
 801d138:	b570      	push	{r4, r5, r6, lr}
 801d13a:	4b17      	ldr	r3, [pc, #92]	; (801d198 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d13c:	4605      	mov	r5, r0
 801d13e:	4a17      	ldr	r2, [pc, #92]	; (801d19c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d140:	2101      	movs	r1, #1
 801d142:	f845 3b04 	str.w	r3, [r5], #4
 801d146:	2300      	movs	r3, #0
 801d148:	6042      	str	r2, [r0, #4]
 801d14a:	4604      	mov	r4, r0
 801d14c:	8103      	strh	r3, [r0, #8]
 801d14e:	8143      	strh	r3, [r0, #10]
 801d150:	8183      	strh	r3, [r0, #12]
 801d152:	81c3      	strh	r3, [r0, #14]
 801d154:	8203      	strh	r3, [r0, #16]
 801d156:	8243      	strh	r3, [r0, #18]
 801d158:	8283      	strh	r3, [r0, #20]
 801d15a:	82c3      	strh	r3, [r0, #22]
 801d15c:	6203      	str	r3, [r0, #32]
 801d15e:	8483      	strh	r3, [r0, #36]	; 0x24
 801d160:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d162:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d166:	6343      	str	r3, [r0, #52]	; 0x34
 801d168:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d16c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d170:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d174:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d178:	4b09      	ldr	r3, [pc, #36]	; (801d1a0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d17a:	4628      	mov	r0, r5
 801d17c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d180:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801d182:	4a08      	ldr	r2, [pc, #32]	; (801d1a4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d184:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d188:	4798      	blx	r3
 801d18a:	6863      	ldr	r3, [r4, #4]
 801d18c:	4628      	mov	r0, r5
 801d18e:	4631      	mov	r1, r6
 801d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d192:	4798      	blx	r3
 801d194:	4620      	mov	r0, r4
 801d196:	bd70      	pop	{r4, r5, r6, pc}
 801d198:	08030ef8 	.word	0x08030ef8
 801d19c:	08030a30 	.word	0x08030a30
 801d1a0:	200155de 	.word	0x200155de
 801d1a4:	200155dc 	.word	0x200155dc

0801d1a8 <_ZN8touchgfx6Screen4drawEv>:
 801d1a8:	4b09      	ldr	r3, [pc, #36]	; (801d1d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d1aa:	b507      	push	{r0, r1, r2, lr}
 801d1ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d1b0:	2100      	movs	r1, #0
 801d1b2:	4b08      	ldr	r3, [pc, #32]	; (801d1d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d1b4:	9100      	str	r1, [sp, #0]
 801d1b6:	4669      	mov	r1, sp
 801d1b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d1bc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d1c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d1c4:	6803      	ldr	r3, [r0, #0]
 801d1c6:	689b      	ldr	r3, [r3, #8]
 801d1c8:	4798      	blx	r3
 801d1ca:	b003      	add	sp, #12
 801d1cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1d0:	200155dc 	.word	0x200155dc
 801d1d4:	200155de 	.word	0x200155de

0801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d1e0:	b089      	sub	sp, #36	; 0x24
 801d1e2:	4680      	mov	r8, r0
 801d1e4:	460c      	mov	r4, r1
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	4615      	mov	r5, r2
 801d1ea:	dd0e      	ble.n	801d20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	dd0a      	ble.n	801d20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1f4:	4628      	mov	r0, r5
 801d1f6:	f7ff ff5b 	bl	801d0b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d1fa:	4621      	mov	r1, r4
 801d1fc:	f7fe fc83 	bl	801bb06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d200:	69eb      	ldr	r3, [r5, #28]
 801d202:	b928      	cbnz	r0, 801d210 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d204:	461d      	mov	r5, r3
 801d206:	2b00      	cmp	r3, #0
 801d208:	d1f4      	bne.n	801d1f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d20a:	b009      	add	sp, #36	; 0x24
 801d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d210:	ae04      	add	r6, sp, #16
 801d212:	2b00      	cmp	r3, #0
 801d214:	f000 80b5 	beq.w	801d382 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d218:	682b      	ldr	r3, [r5, #0]
 801d21a:	4629      	mov	r1, r5
 801d21c:	a802      	add	r0, sp, #8
 801d21e:	68db      	ldr	r3, [r3, #12]
 801d220:	4798      	blx	r3
 801d222:	4628      	mov	r0, r5
 801d224:	f7ff ff60 	bl	801d0e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d228:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d22c:	4407      	add	r7, r0
 801d22e:	4628      	mov	r0, r5
 801d230:	f7ff ff6e 	bl	801d110 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d234:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d238:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d23c:	b23f      	sxth	r7, r7
 801d23e:	4418      	add	r0, r3
 801d240:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d244:	4621      	mov	r1, r4
 801d246:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d24a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d24e:	4630      	mov	r0, r6
 801d250:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d254:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d258:	f7fb f896 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801d25c:	4628      	mov	r0, r5
 801d25e:	f7ff ff27 	bl	801d0b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d262:	ab06      	add	r3, sp, #24
 801d264:	4602      	mov	r2, r0
 801d266:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d26a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d26e:	4611      	mov	r1, r2
 801d270:	4618      	mov	r0, r3
 801d272:	f7fb f889 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801d276:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d27a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d27e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d282:	4299      	cmp	r1, r3
 801d284:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d288:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d28c:	d10b      	bne.n	801d2a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d28e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d292:	4552      	cmp	r2, sl
 801d294:	d107      	bne.n	801d2a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d296:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d29a:	455a      	cmp	r2, fp
 801d29c:	d103      	bne.n	801d2a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d29e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d2a2:	454a      	cmp	r2, r9
 801d2a4:	d06d      	beq.n	801d382 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d2a6:	f1bb 0f00 	cmp.w	fp, #0
 801d2aa:	dd65      	ble.n	801d378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d2ac:	f1b9 0f00 	cmp.w	r9, #0
 801d2b0:	dd62      	ble.n	801d378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d2b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d2b6:	fa1f f08a 	uxth.w	r0, sl
 801d2ba:	4552      	cmp	r2, sl
 801d2bc:	9000      	str	r0, [sp, #0]
 801d2be:	da12      	bge.n	801d2e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d2c0:	9301      	str	r3, [sp, #4]
 801d2c2:	9b00      	ldr	r3, [sp, #0]
 801d2c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d2c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d2cc:	1a9a      	subs	r2, r3, r2
 801d2ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d2d2:	4631      	mov	r1, r6
 801d2d4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d2d8:	4640      	mov	r0, r8
 801d2da:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d2de:	69ea      	ldr	r2, [r5, #28]
 801d2e0:	f7ff ff7a 	bl	801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d2e4:	9b01      	ldr	r3, [sp, #4]
 801d2e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d2ea:	b29f      	uxth	r7, r3
 801d2ec:	429a      	cmp	r2, r3
 801d2ee:	da0d      	bge.n	801d30c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d2f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d2f4:	1aba      	subs	r2, r7, r2
 801d2f6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d2fa:	4631      	mov	r1, r6
 801d2fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d300:	4640      	mov	r0, r8
 801d302:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d306:	69ea      	ldr	r2, [r5, #28]
 801d308:	f7ff ff66 	bl	801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d30c:	8822      	ldrh	r2, [r4, #0]
 801d30e:	445f      	add	r7, fp
 801d310:	88a3      	ldrh	r3, [r4, #4]
 801d312:	b2bf      	uxth	r7, r7
 801d314:	4413      	add	r3, r2
 801d316:	b23a      	sxth	r2, r7
 801d318:	b29b      	uxth	r3, r3
 801d31a:	b219      	sxth	r1, r3
 801d31c:	4291      	cmp	r1, r2
 801d31e:	dd0d      	ble.n	801d33c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d320:	1bdb      	subs	r3, r3, r7
 801d322:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d326:	f8ad a012 	strh.w	sl, [sp, #18]
 801d32a:	4631      	mov	r1, r6
 801d32c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d330:	4640      	mov	r0, r8
 801d332:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d336:	69ea      	ldr	r2, [r5, #28]
 801d338:	f7ff ff4e 	bl	801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d33c:	88e2      	ldrh	r2, [r4, #6]
 801d33e:	8863      	ldrh	r3, [r4, #2]
 801d340:	4413      	add	r3, r2
 801d342:	9a00      	ldr	r2, [sp, #0]
 801d344:	444a      	add	r2, r9
 801d346:	b29b      	uxth	r3, r3
 801d348:	fa1f f982 	uxth.w	r9, r2
 801d34c:	b219      	sxth	r1, r3
 801d34e:	fa0f f289 	sxth.w	r2, r9
 801d352:	428a      	cmp	r2, r1
 801d354:	da15      	bge.n	801d382 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d356:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d35a:	eba3 0309 	sub.w	r3, r3, r9
 801d35e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d362:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d366:	4631      	mov	r1, r6
 801d368:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d36c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d370:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d374:	69ea      	ldr	r2, [r5, #28]
 801d376:	e001      	b.n	801d37c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d378:	69ea      	ldr	r2, [r5, #28]
 801d37a:	4621      	mov	r1, r4
 801d37c:	4640      	mov	r0, r8
 801d37e:	f7ff ff2b 	bl	801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d382:	4628      	mov	r0, r5
 801d384:	f7ff fe94 	bl	801d0b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d388:	6861      	ldr	r1, [r4, #4]
 801d38a:	4602      	mov	r2, r0
 801d38c:	4633      	mov	r3, r6
 801d38e:	6820      	ldr	r0, [r4, #0]
 801d390:	c303      	stmia	r3!, {r0, r1}
 801d392:	4611      	mov	r1, r2
 801d394:	4630      	mov	r0, r6
 801d396:	f7fa fff7 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801d39a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	f77f af33 	ble.w	801d20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d3a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	f77f af2e 	ble.w	801d20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d3ae:	4628      	mov	r0, r5
 801d3b0:	f7ff fe9a 	bl	801d0e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d3b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d3b8:	1a18      	subs	r0, r3, r0
 801d3ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d3be:	4628      	mov	r0, r5
 801d3c0:	f7ff fea6 	bl	801d110 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d3c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d3c8:	4631      	mov	r1, r6
 801d3ca:	1a18      	subs	r0, r3, r0
 801d3cc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d3d0:	4628      	mov	r0, r5
 801d3d2:	682b      	ldr	r3, [r5, #0]
 801d3d4:	689b      	ldr	r3, [r3, #8]
 801d3d6:	4798      	blx	r3
 801d3d8:	e717      	b.n	801d20a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d3da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d3da:	b570      	push	{r4, r5, r6, lr}
 801d3dc:	1d06      	adds	r6, r0, #4
 801d3de:	b086      	sub	sp, #24
 801d3e0:	460c      	mov	r4, r1
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	4631      	mov	r1, r6
 801d3e6:	4605      	mov	r5, r0
 801d3e8:	a802      	add	r0, sp, #8
 801d3ea:	9301      	str	r3, [sp, #4]
 801d3ec:	f7ff fc9e 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d3f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d3f4:	8822      	ldrh	r2, [r4, #0]
 801d3f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d3fa:	1ad2      	subs	r2, r2, r3
 801d3fc:	8863      	ldrh	r3, [r4, #2]
 801d3fe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d402:	1a5b      	subs	r3, r3, r1
 801d404:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d408:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d40c:	aa01      	add	r2, sp, #4
 801d40e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d412:	4630      	mov	r0, r6
 801d414:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d418:	a904      	add	r1, sp, #16
 801d41a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d41e:	f7fb f88b 	bl	8018538 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d422:	9a01      	ldr	r2, [sp, #4]
 801d424:	b11a      	cbz	r2, 801d42e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d426:	4621      	mov	r1, r4
 801d428:	4628      	mov	r0, r5
 801d42a:	f7ff fed5 	bl	801d1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d42e:	b006      	add	sp, #24
 801d430:	bd70      	pop	{r4, r5, r6, pc}

0801d432 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d432:	4602      	mov	r2, r0
 801d434:	b530      	push	{r4, r5, lr}
 801d436:	4604      	mov	r4, r0
 801d438:	b085      	sub	sp, #20
 801d43a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d43e:	460d      	mov	r5, r1
 801d440:	466b      	mov	r3, sp
 801d442:	6851      	ldr	r1, [r2, #4]
 801d444:	c303      	stmia	r3!, {r0, r1}
 801d446:	4629      	mov	r1, r5
 801d448:	4668      	mov	r0, sp
 801d44a:	f7fa ff9d 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 801d44e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d452:	b12b      	cbz	r3, 801d460 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d454:	4669      	mov	r1, sp
 801d456:	4620      	mov	r0, r4
 801d458:	f7ff ffbf 	bl	801d3da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d45c:	b005      	add	sp, #20
 801d45e:	bd30      	pop	{r4, r5, pc}
 801d460:	3404      	adds	r4, #4
 801d462:	a802      	add	r0, sp, #8
 801d464:	4621      	mov	r1, r4
 801d466:	f7ff fc61 	bl	801cd2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d46a:	f8bd 3000 	ldrh.w	r3, [sp]
 801d46e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d472:	4669      	mov	r1, sp
 801d474:	4620      	mov	r0, r4
 801d476:	1a9b      	subs	r3, r3, r2
 801d478:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d47c:	f8ad 3000 	strh.w	r3, [sp]
 801d480:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d484:	1a9b      	subs	r3, r3, r2
 801d486:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d48a:	f7fb f81c 	bl	80184c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d48e:	e7e5      	b.n	801d45c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d490 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d490:	460b      	mov	r3, r1
 801d492:	680a      	ldr	r2, [r1, #0]
 801d494:	1d01      	adds	r1, r0, #4
 801d496:	6992      	ldr	r2, [r2, #24]
 801d498:	4618      	mov	r0, r3
 801d49a:	4710      	bx	r2

0801d49c <_ZN8touchgfx12TextProviderC1Ev>:
 801d49c:	b538      	push	{r3, r4, r5, lr}
 801d49e:	2500      	movs	r5, #0
 801d4a0:	2302      	movs	r3, #2
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	220e      	movs	r2, #14
 801d4a6:	7403      	strb	r3, [r0, #16]
 801d4a8:	4629      	mov	r1, r5
 801d4aa:	6145      	str	r5, [r0, #20]
 801d4ac:	7605      	strb	r5, [r0, #24]
 801d4ae:	83c5      	strh	r5, [r0, #30]
 801d4b0:	8405      	strh	r5, [r0, #32]
 801d4b2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d4b4:	8705      	strh	r5, [r0, #56]	; 0x38
 801d4b6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d4b8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d4bc:	e9c0 5500 	strd	r5, r5, [r0]
 801d4c0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d4c4:	304c      	adds	r0, #76	; 0x4c
 801d4c6:	f00d fb31 	bl	802ab2c <memset>
 801d4ca:	2301      	movs	r3, #1
 801d4cc:	4620      	mov	r0, r4
 801d4ce:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d4d2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d4d6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d4da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d4de:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d4e2:	f7e7 fe9b 	bl	800521c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	bd38      	pop	{r3, r4, r5, pc}

0801d4ea <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d4ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d4ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4f0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801d4f2:	fab0 f080 	clz	r0, r0
 801d4f6:	0940      	lsrs	r0, r0, #5
 801d4f8:	4770      	bx	lr

0801d4fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d4fa:	b530      	push	{r4, r5, lr}
 801d4fc:	2500      	movs	r5, #0
 801d4fe:	2401      	movs	r4, #1
 801d500:	6843      	ldr	r3, [r0, #4]
 801d502:	b913      	cbnz	r3, 801d50a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d504:	6803      	ldr	r3, [r0, #0]
 801d506:	b313      	cbz	r3, 801d54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d508:	6043      	str	r3, [r0, #4]
 801d50a:	7e03      	ldrb	r3, [r0, #24]
 801d50c:	b143      	cbz	r3, 801d520 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d50e:	6943      	ldr	r3, [r0, #20]
 801d510:	b12b      	cbz	r3, 801d51e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d512:	881a      	ldrh	r2, [r3, #0]
 801d514:	b11a      	cbz	r2, 801d51e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d516:	1c9a      	adds	r2, r3, #2
 801d518:	6142      	str	r2, [r0, #20]
 801d51a:	8818      	ldrh	r0, [r3, #0]
 801d51c:	bd30      	pop	{r4, r5, pc}
 801d51e:	7605      	strb	r5, [r0, #24]
 801d520:	6843      	ldr	r3, [r0, #4]
 801d522:	8819      	ldrh	r1, [r3, #0]
 801d524:	b199      	cbz	r1, 801d54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d526:	1c9a      	adds	r2, r3, #2
 801d528:	2902      	cmp	r1, #2
 801d52a:	6042      	str	r2, [r0, #4]
 801d52c:	d1f5      	bne.n	801d51a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d52e:	7c03      	ldrb	r3, [r0, #16]
 801d530:	2b01      	cmp	r3, #1
 801d532:	d8e5      	bhi.n	801d500 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d534:	1c5a      	adds	r2, r3, #1
 801d536:	3302      	adds	r3, #2
 801d538:	7402      	strb	r2, [r0, #16]
 801d53a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d53e:	6143      	str	r3, [r0, #20]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d0dd      	beq.n	801d500 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d544:	881b      	ldrh	r3, [r3, #0]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d0da      	beq.n	801d500 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d54a:	7604      	strb	r4, [r0, #24]
 801d54c:	e7d8      	b.n	801d500 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d54e:	2000      	movs	r0, #0
 801d550:	e7e4      	b.n	801d51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d552:	6001      	str	r1, [r0, #0]
 801d554:	2100      	movs	r1, #0
 801d556:	b430      	push	{r4, r5}
 801d558:	6041      	str	r1, [r0, #4]
 801d55a:	6815      	ldr	r5, [r2, #0]
 801d55c:	6085      	str	r5, [r0, #8]
 801d55e:	6852      	ldr	r2, [r2, #4]
 801d560:	6443      	str	r3, [r0, #68]	; 0x44
 801d562:	9b02      	ldr	r3, [sp, #8]
 801d564:	60c2      	str	r2, [r0, #12]
 801d566:	7401      	strb	r1, [r0, #16]
 801d568:	6141      	str	r1, [r0, #20]
 801d56a:	7601      	strb	r1, [r0, #24]
 801d56c:	8701      	strh	r1, [r0, #56]	; 0x38
 801d56e:	8401      	strh	r1, [r0, #32]
 801d570:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801d574:	6483      	str	r3, [r0, #72]	; 0x48
 801d576:	bc30      	pop	{r4, r5}
 801d578:	f7e7 be50 	b.w	800521c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d57c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d57c:	b408      	push	{r3}
 801d57e:	b510      	push	{r4, lr}
 801d580:	b085      	sub	sp, #20
 801d582:	ac07      	add	r4, sp, #28
 801d584:	f854 3b04 	ldr.w	r3, [r4], #4
 801d588:	9300      	str	r3, [sp, #0]
 801d58a:	4613      	mov	r3, r2
 801d58c:	4622      	mov	r2, r4
 801d58e:	9403      	str	r4, [sp, #12]
 801d590:	f7ff ffdf 	bl	801d552 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d594:	b005      	add	sp, #20
 801d596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d59a:	b001      	add	sp, #4
 801d59c:	4770      	bx	lr

0801d59e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d59e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5a0:	4605      	mov	r5, r0
 801d5a2:	4608      	mov	r0, r1
 801d5a4:	b1f1      	cbz	r1, 801d5e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d5a6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d5aa:	460b      	mov	r3, r1
 801d5ac:	f101 0708 	add.w	r7, r1, #8
 801d5b0:	4622      	mov	r2, r4
 801d5b2:	6818      	ldr	r0, [r3, #0]
 801d5b4:	3308      	adds	r3, #8
 801d5b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d5ba:	4626      	mov	r6, r4
 801d5bc:	42bb      	cmp	r3, r7
 801d5be:	c603      	stmia	r6!, {r0, r1}
 801d5c0:	4634      	mov	r4, r6
 801d5c2:	d1f6      	bne.n	801d5b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d5c4:	6818      	ldr	r0, [r3, #0]
 801d5c6:	6030      	str	r0, [r6, #0]
 801d5c8:	4610      	mov	r0, r2
 801d5ca:	889b      	ldrh	r3, [r3, #4]
 801d5cc:	80b3      	strh	r3, [r6, #4]
 801d5ce:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d5d2:	015b      	lsls	r3, r3, #5
 801d5d4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d5d8:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d5dc:	430b      	orrs	r3, r1
 801d5de:	425b      	negs	r3, r3
 801d5e0:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d5e6:	b538      	push	{r3, r4, r5, lr}
 801d5e8:	460c      	mov	r4, r1
 801d5ea:	6811      	ldr	r1, [r2, #0]
 801d5ec:	4610      	mov	r0, r2
 801d5ee:	68cd      	ldr	r5, [r1, #12]
 801d5f0:	4619      	mov	r1, r3
 801d5f2:	47a8      	blx	r5
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	bf08      	it	eq
 801d5f8:	4620      	moveq	r0, r4
 801d5fa:	bd38      	pop	{r3, r4, r5, pc}

0801d5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5fe:	4604      	mov	r4, r0
 801d600:	4615      	mov	r5, r2
 801d602:	4608      	mov	r0, r1
 801d604:	b93a      	cbnz	r2, 801d616 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d606:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d60a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d60e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d612:	4628      	mov	r0, r5
 801d614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d616:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d61a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801d61e:	8893      	ldrh	r3, [r2, #4]
 801d620:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d624:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d628:	79ee      	ldrb	r6, [r5, #7]
 801d62a:	4316      	orrs	r6, r2
 801d62c:	19da      	adds	r2, r3, r7
 801d62e:	b291      	uxth	r1, r2
 801d630:	b2b7      	uxth	r7, r6
 801d632:	291d      	cmp	r1, #29
 801d634:	d87b      	bhi.n	801d72e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d636:	2201      	movs	r2, #1
 801d638:	10f6      	asrs	r6, r6, #3
 801d63a:	408a      	lsls	r2, r1
 801d63c:	4974      	ldr	r1, [pc, #464]	; (801d810 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d63e:	420a      	tst	r2, r1
 801d640:	d12e      	bne.n	801d6a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d642:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d646:	d072      	beq.n	801d72e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d648:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d64c:	462b      	mov	r3, r5
 801d64e:	f105 0e08 	add.w	lr, r5, #8
 801d652:	4615      	mov	r5, r2
 801d654:	6818      	ldr	r0, [r3, #0]
 801d656:	3308      	adds	r3, #8
 801d658:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d65c:	4694      	mov	ip, r2
 801d65e:	4573      	cmp	r3, lr
 801d660:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d664:	4662      	mov	r2, ip
 801d666:	d1f5      	bne.n	801d654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d668:	6818      	ldr	r0, [r3, #0]
 801d66a:	f8cc 0000 	str.w	r0, [ip]
 801d66e:	889b      	ldrh	r3, [r3, #4]
 801d670:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d674:	b2b3      	uxth	r3, r6
 801d676:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d67a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d67e:	1aca      	subs	r2, r1, r3
 801d680:	1bcf      	subs	r7, r1, r7
 801d682:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d686:	b292      	uxth	r2, r2
 801d688:	1afb      	subs	r3, r7, r3
 801d68a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d68e:	10d2      	asrs	r2, r2, #3
 801d690:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d694:	4302      	orrs	r2, r0
 801d696:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d69a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d69e:	e7b8      	b.n	801d612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d6a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d6a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d6a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d6a8:	f640 6333 	movw	r3, #3635	; 0xe33
 801d6ac:	4299      	cmp	r1, r3
 801d6ae:	d110      	bne.n	801d6d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801d6b0:	6803      	ldr	r3, [r0, #0]
 801d6b2:	68db      	ldr	r3, [r3, #12]
 801d6b4:	4798      	blx	r3
 801d6b6:	7b41      	ldrb	r1, [r0, #13]
 801d6b8:	00cb      	lsls	r3, r1, #3
 801d6ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d6be:	7a03      	ldrb	r3, [r0, #8]
 801d6c0:	0648      	lsls	r0, r1, #25
 801d6c2:	ea43 0302 	orr.w	r3, r3, r2
 801d6c6:	bf44      	itt	mi
 801d6c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d6cc:	b21b      	sxthmi	r3, r3
 801d6ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d6d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d6d6:	462a      	mov	r2, r5
 801d6d8:	f105 0c08 	add.w	ip, r5, #8
 801d6dc:	443b      	add	r3, r7
 801d6de:	4433      	add	r3, r6
 801d6e0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	4635      	mov	r5, r6
 801d6e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d6ec:	6810      	ldr	r0, [r2, #0]
 801d6ee:	3208      	adds	r2, #8
 801d6f0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d6f4:	4637      	mov	r7, r6
 801d6f6:	4562      	cmp	r2, ip
 801d6f8:	c703      	stmia	r7!, {r0, r1}
 801d6fa:	463e      	mov	r6, r7
 801d6fc:	d1f6      	bne.n	801d6ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801d6fe:	6810      	ldr	r0, [r2, #0]
 801d700:	6038      	str	r0, [r7, #0]
 801d702:	8892      	ldrh	r2, [r2, #4]
 801d704:	80ba      	strh	r2, [r7, #4]
 801d706:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d70a:	10db      	asrs	r3, r3, #3
 801d70c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d718:	4313      	orrs	r3, r2
 801d71a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d71e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d722:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d726:	1a9b      	subs	r3, r3, r2
 801d728:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d72c:	e771      	b.n	801d612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d72e:	f023 0204 	bic.w	r2, r3, #4
 801d732:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d736:	428a      	cmp	r2, r1
 801d738:	d003      	beq.n	801d742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801d73a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d73e:	4293      	cmp	r3, r2
 801d740:	d120      	bne.n	801d784 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801d742:	3b01      	subs	r3, #1
 801d744:	4602      	mov	r2, r0
 801d746:	4629      	mov	r1, r5
 801d748:	4620      	mov	r0, r4
 801d74a:	b29b      	uxth	r3, r3
 801d74c:	f7ff ff4b 	bl	801d5e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d750:	7b41      	ldrb	r1, [r0, #13]
 801d752:	00cb      	lsls	r3, r1, #3
 801d754:	0649      	lsls	r1, r1, #25
 801d756:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d75a:	7a03      	ldrb	r3, [r0, #8]
 801d75c:	ea43 0302 	orr.w	r3, r3, r2
 801d760:	bf44      	itt	mi
 801d762:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d766:	b21b      	sxthmi	r3, r3
 801d768:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d76c:	7b6b      	ldrb	r3, [r5, #13]
 801d76e:	7aaa      	ldrb	r2, [r5, #10]
 801d770:	005b      	lsls	r3, r3, #1
 801d772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d776:	4313      	orrs	r3, r2
 801d778:	115a      	asrs	r2, r3, #5
 801d77a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d77e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d782:	e035      	b.n	801d7f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d784:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d788:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d78c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d790:	7a2a      	ldrb	r2, [r5, #8]
 801d792:	ea42 0201 	orr.w	r2, r2, r1
 801d796:	f640 6109 	movw	r1, #3593	; 0xe09
 801d79a:	bf1c      	itt	ne
 801d79c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d7a0:	b212      	sxthne	r2, r2
 801d7a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d7a6:	f023 0210 	bic.w	r2, r3, #16
 801d7aa:	428a      	cmp	r2, r1
 801d7ac:	d003      	beq.n	801d7b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d7ae:	f640 6213 	movw	r2, #3603	; 0xe13
 801d7b2:	4293      	cmp	r3, r2
 801d7b4:	d129      	bne.n	801d80a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d7b6:	7b6e      	ldrb	r6, [r5, #13]
 801d7b8:	4629      	mov	r1, r5
 801d7ba:	0076      	lsls	r6, r6, #1
 801d7bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d7c0:	7aae      	ldrb	r6, [r5, #10]
 801d7c2:	4316      	orrs	r6, r2
 801d7c4:	f640 6213 	movw	r2, #3603	; 0xe13
 801d7c8:	4293      	cmp	r3, r2
 801d7ca:	4602      	mov	r2, r0
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	bf16      	itet	ne
 801d7d0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d7d4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d7d8:	b29b      	uxthne	r3, r3
 801d7da:	f7ff ff04 	bl	801d5e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d7de:	7b43      	ldrb	r3, [r0, #13]
 801d7e0:	7a82      	ldrb	r2, [r0, #10]
 801d7e2:	005b      	lsls	r3, r3, #1
 801d7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d7e8:	4313      	orrs	r3, r2
 801d7ea:	1af6      	subs	r6, r6, r3
 801d7ec:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d7f0:	7b69      	ldrb	r1, [r5, #13]
 801d7f2:	00cb      	lsls	r3, r1, #3
 801d7f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d7f8:	7a2b      	ldrb	r3, [r5, #8]
 801d7fa:	4313      	orrs	r3, r2
 801d7fc:	064a      	lsls	r2, r1, #25
 801d7fe:	bf44      	itt	mi
 801d800:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d804:	b21b      	sxthmi	r3, r3
 801d806:	1bdb      	subs	r3, r3, r7
 801d808:	e747      	b.n	801d69a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d80a:	2300      	movs	r3, #0
 801d80c:	e7b7      	b.n	801d77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801d80e:	bf00      	nop
 801d810:	3fc00079 	.word	0x3fc00079

0801d814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d818:	4604      	mov	r4, r0
 801d81a:	b942      	cbnz	r2, 801d82e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d81c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d820:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d824:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d828:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d82c:	e047      	b.n	801d8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d82e:	7b51      	ldrb	r1, [r2, #13]
 801d830:	8893      	ldrh	r3, [r2, #4]
 801d832:	010d      	lsls	r5, r1, #4
 801d834:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801d838:	79d5      	ldrb	r5, [r2, #7]
 801d83a:	4305      	orrs	r5, r0
 801d83c:	2d04      	cmp	r5, #4
 801d83e:	bfcc      	ite	gt
 801d840:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d844:	f04f 0e01 	movle.w	lr, #1
 801d848:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d84c:	f200 80ab 	bhi.w	801d9a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d850:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d854:	4283      	cmp	r3, r0
 801d856:	d216      	bcs.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d858:	f240 605b 	movw	r0, #1627	; 0x65b
 801d85c:	4283      	cmp	r3, r0
 801d85e:	d859      	bhi.n	801d914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d860:	f240 6057 	movw	r0, #1623	; 0x657
 801d864:	4283      	cmp	r3, r0
 801d866:	d20e      	bcs.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d868:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d86c:	d24a      	bcs.n	801d904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d86e:	f240 604e 	movw	r0, #1614	; 0x64e
 801d872:	4283      	cmp	r3, r0
 801d874:	d207      	bcs.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d876:	f240 601a 	movw	r0, #1562	; 0x61a
 801d87a:	4283      	cmp	r3, r0
 801d87c:	d02a      	beq.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d87e:	d821      	bhi.n	801d8c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d880:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d884:	d35b      	bcc.n	801d93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d886:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d88a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d88e:	f040 80d0 	bne.w	801da32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d892:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d896:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d89a:	f040 80ca 	bne.w	801da32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d89e:	00cb      	lsls	r3, r1, #3
 801d8a0:	0649      	lsls	r1, r1, #25
 801d8a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d8a6:	7a13      	ldrb	r3, [r2, #8]
 801d8a8:	ea43 0300 	orr.w	r3, r3, r0
 801d8ac:	bf44      	itt	mi
 801d8ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d8b2:	b21b      	sxthmi	r3, r3
 801d8b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d8b8:	1b5d      	subs	r5, r3, r5
 801d8ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d8be:	4610      	mov	r0, r2
 801d8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8c4:	f240 604b 	movw	r0, #1611	; 0x64b
 801d8c8:	4283      	cmp	r3, r0
 801d8ca:	d338      	bcc.n	801d93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d8cc:	f240 604c 	movw	r0, #1612	; 0x64c
 801d8d0:	4283      	cmp	r3, r0
 801d8d2:	d9d8      	bls.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d8d4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d8d8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d8dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d8e0:	f040 80f3 	bne.w	801daca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d8e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d8e8:	f040 80ef 	bne.w	801daca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d8ec:	00cb      	lsls	r3, r1, #3
 801d8ee:	064e      	lsls	r6, r1, #25
 801d8f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d8f4:	7a13      	ldrb	r3, [r2, #8]
 801d8f6:	ea43 0300 	orr.w	r3, r3, r0
 801d8fa:	bf44      	itt	mi
 801d8fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d900:	b21b      	sxthmi	r3, r3
 801d902:	e7d9      	b.n	801d8b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d904:	f240 6054 	movw	r0, #1620	; 0x654
 801d908:	4283      	cmp	r3, r0
 801d90a:	d8e3      	bhi.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d90c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d910:	d9e0      	bls.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d912:	e7b8      	b.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d914:	f240 6074 	movw	r0, #1652	; 0x674
 801d918:	4283      	cmp	r3, r0
 801d91a:	d0b4      	beq.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d91c:	d82d      	bhi.n	801d97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d91e:	f240 605e 	movw	r0, #1630	; 0x65e
 801d922:	4283      	cmp	r3, r0
 801d924:	d804      	bhi.n	801d930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d926:	f240 605d 	movw	r0, #1629	; 0x65d
 801d92a:	4283      	cmp	r3, r0
 801d92c:	d3d2      	bcc.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d92e:	e7aa      	b.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d930:	f240 605f 	movw	r0, #1631	; 0x65f
 801d934:	4283      	cmp	r3, r0
 801d936:	d0cd      	beq.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d938:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d93c:	d0a3      	beq.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d93e:	00cb      	lsls	r3, r1, #3
 801d940:	0649      	lsls	r1, r1, #25
 801d942:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d946:	7a13      	ldrb	r3, [r2, #8]
 801d948:	ea43 0300 	orr.w	r3, r3, r0
 801d94c:	bf44      	itt	mi
 801d94e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d952:	b21b      	sxthmi	r3, r3
 801d954:	1b5d      	subs	r5, r3, r5
 801d956:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d95a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d95e:	7b53      	ldrb	r3, [r2, #13]
 801d960:	015b      	lsls	r3, r3, #5
 801d962:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d966:	7993      	ldrb	r3, [r2, #6]
 801d968:	430b      	orrs	r3, r1
 801d96a:	2105      	movs	r1, #5
 801d96c:	005b      	lsls	r3, r3, #1
 801d96e:	fb93 f3f1 	sdiv	r3, r3, r1
 801d972:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d976:	440b      	add	r3, r1
 801d978:	e756      	b.n	801d828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d97a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d97e:	4283      	cmp	r3, r0
 801d980:	d809      	bhi.n	801d996 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d982:	f240 60df 	movw	r0, #1759	; 0x6df
 801d986:	4283      	cmp	r3, r0
 801d988:	f4bf af7d 	bcs.w	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d98c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d990:	2b05      	cmp	r3, #5
 801d992:	d8d4      	bhi.n	801d93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d994:	e777      	b.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d996:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d99a:	4283      	cmp	r3, r0
 801d99c:	d09a      	beq.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d99e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d9a2:	4283      	cmp	r3, r0
 801d9a4:	e7ca      	b.n	801d93c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d9a6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d9aa:	d22b      	bcs.n	801da04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d9ac:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d9b0:	4283      	cmp	r3, r0
 801d9b2:	d28f      	bcs.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d9b4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d9b8:	4283      	cmp	r3, r0
 801d9ba:	d816      	bhi.n	801d9ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d9bc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d9c0:	4283      	cmp	r3, r0
 801d9c2:	f4bf af60 	bcs.w	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d9c6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d9ca:	4283      	cmp	r3, r0
 801d9cc:	d80a      	bhi.n	801d9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d9ce:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d9d2:	4283      	cmp	r3, r0
 801d9d4:	f4bf af57 	bcs.w	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d9d8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d9dc:	4283      	cmp	r3, r0
 801d9de:	f43f af79 	beq.w	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d9e2:	e7ac      	b.n	801d93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d9e4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d9e8:	e7f8      	b.n	801d9dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d9ea:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d9ee:	4283      	cmp	r3, r0
 801d9f0:	d802      	bhi.n	801d9f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d9f2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d9f6:	e798      	b.n	801d92a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d9f8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d9fc:	4283      	cmp	r3, r0
 801d9fe:	f47f af42 	bne.w	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da02:	e767      	b.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801da04:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801da08:	4283      	cmp	r3, r0
 801da0a:	f43f af63 	beq.w	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801da0e:	d802      	bhi.n	801da16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801da10:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801da14:	e7f2      	b.n	801d9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801da16:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801da1a:	4283      	cmp	r3, r0
 801da1c:	d805      	bhi.n	801da2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801da1e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801da22:	4283      	cmp	r3, r0
 801da24:	f4ff af2f 	bcc.w	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da28:	e754      	b.n	801d8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801da2a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801da2e:	4283      	cmp	r3, r0
 801da30:	e7af      	b.n	801d992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801da32:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801da36:	4617      	mov	r7, r2
 801da38:	f102 0808 	add.w	r8, r2, #8
 801da3c:	4666      	mov	r6, ip
 801da3e:	6838      	ldr	r0, [r7, #0]
 801da40:	3708      	adds	r7, #8
 801da42:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801da46:	46e6      	mov	lr, ip
 801da48:	4547      	cmp	r7, r8
 801da4a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801da4e:	46f4      	mov	ip, lr
 801da50:	d1f5      	bne.n	801da3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801da52:	6838      	ldr	r0, [r7, #0]
 801da54:	f8ce 0000 	str.w	r0, [lr]
 801da58:	88b9      	ldrh	r1, [r7, #4]
 801da5a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801da5e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801da62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da66:	d009      	beq.n	801da7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801da68:	7b51      	ldrb	r1, [r2, #13]
 801da6a:	7992      	ldrb	r2, [r2, #6]
 801da6c:	0149      	lsls	r1, r1, #5
 801da6e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801da72:	4311      	orrs	r1, r2
 801da74:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801da78:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801da7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801da80:	b2ad      	uxth	r5, r5
 801da82:	d00d      	beq.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801da84:	442b      	add	r3, r5
 801da86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801da8a:	b29b      	uxth	r3, r3
 801da8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801da90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801da94:	10db      	asrs	r3, r3, #3
 801da96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801da9a:	4313      	orrs	r3, r2
 801da9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801daa0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801daa4:	00cb      	lsls	r3, r1, #3
 801daa6:	064f      	lsls	r7, r1, #25
 801daa8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801daac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dab0:	ea43 0302 	orr.w	r3, r3, r2
 801dab4:	bf44      	itt	mi
 801dab6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801daba:	b21b      	sxthmi	r3, r3
 801dabc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dac0:	1b5b      	subs	r3, r3, r5
 801dac2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dac6:	4632      	mov	r2, r6
 801dac8:	e6f9      	b.n	801d8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801daca:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dace:	4617      	mov	r7, r2
 801dad0:	f102 0908 	add.w	r9, r2, #8
 801dad4:	4666      	mov	r6, ip
 801dad6:	6838      	ldr	r0, [r7, #0]
 801dad8:	3708      	adds	r7, #8
 801dada:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dade:	46e0      	mov	r8, ip
 801dae0:	454f      	cmp	r7, r9
 801dae2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801dae6:	46c4      	mov	ip, r8
 801dae8:	d1f5      	bne.n	801dad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801daea:	6838      	ldr	r0, [r7, #0]
 801daec:	f8c8 0000 	str.w	r0, [r8]
 801daf0:	88b9      	ldrh	r1, [r7, #4]
 801daf2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801daf6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dafa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dafe:	d009      	beq.n	801db14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801db00:	7b51      	ldrb	r1, [r2, #13]
 801db02:	7992      	ldrb	r2, [r2, #6]
 801db04:	0149      	lsls	r1, r1, #5
 801db06:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801db0a:	4311      	orrs	r1, r2
 801db0c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801db10:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801db14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801db18:	d00e      	beq.n	801db38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801db1a:	eba3 030e 	sub.w	r3, r3, lr
 801db1e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801db22:	b29b      	uxth	r3, r3
 801db24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801db28:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801db2c:	10db      	asrs	r3, r3, #3
 801db2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801db32:	4313      	orrs	r3, r2
 801db34:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801db38:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801db3c:	00cb      	lsls	r3, r1, #3
 801db3e:	0648      	lsls	r0, r1, #25
 801db40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801db44:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801db48:	ea43 0302 	orr.w	r3, r3, r2
 801db4c:	bf44      	itt	mi
 801db4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db52:	b21b      	sxthmi	r3, r3
 801db54:	1b5d      	subs	r5, r3, r5
 801db56:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801db5a:	e7b4      	b.n	801dac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801db5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db60:	461e      	mov	r6, r3
 801db62:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801db64:	4604      	mov	r4, r0
 801db66:	4617      	mov	r7, r2
 801db68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801db6c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801db70:	f7e7 fb12 	bl	8005198 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801db74:	4605      	mov	r5, r0
 801db76:	b918      	cbnz	r0, 801db80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801db78:	6030      	str	r0, [r6, #0]
 801db7a:	4628      	mov	r0, r5
 801db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db80:	683b      	ldr	r3, [r7, #0]
 801db82:	4601      	mov	r1, r0
 801db84:	4638      	mov	r0, r7
 801db86:	68db      	ldr	r3, [r3, #12]
 801db88:	4798      	blx	r3
 801db8a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801db8e:	4602      	mov	r2, r0
 801db90:	6030      	str	r0, [r6, #0]
 801db92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801db96:	d213      	bcs.n	801dbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801db98:	4643      	mov	r3, r8
 801db9a:	4639      	mov	r1, r7
 801db9c:	4620      	mov	r0, r4
 801db9e:	f7ff fe39 	bl	801d814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dba2:	6030      	str	r0, [r6, #0]
 801dba4:	6833      	ldr	r3, [r6, #0]
 801dba6:	b143      	cbz	r3, 801dbba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801dba8:	7b5a      	ldrb	r2, [r3, #13]
 801dbaa:	7a9b      	ldrb	r3, [r3, #10]
 801dbac:	0052      	lsls	r2, r2, #1
 801dbae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dbb2:	4313      	orrs	r3, r2
 801dbb4:	bf0c      	ite	eq
 801dbb6:	2301      	moveq	r3, #1
 801dbb8:	2300      	movne	r3, #0
 801dbba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801dbbe:	e7dc      	b.n	801db7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801dbc0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801dbc4:	b29b      	uxth	r3, r3
 801dbc6:	2b7f      	cmp	r3, #127	; 0x7f
 801dbc8:	d804      	bhi.n	801dbd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801dbca:	4639      	mov	r1, r7
 801dbcc:	4620      	mov	r0, r4
 801dbce:	f7ff fd15 	bl	801d5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dbd2:	e7e6      	b.n	801dba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801dbd4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d0e3      	beq.n	801dba4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dbdc:	f640 1302 	movw	r3, #2306	; 0x902
 801dbe0:	429d      	cmp	r5, r3
 801dbe2:	d1df      	bne.n	801dba4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dbe4:	4601      	mov	r1, r0
 801dbe6:	4620      	mov	r0, r4
 801dbe8:	f7ff fcd9 	bl	801d59e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801dbec:	e7d9      	b.n	801dba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801dbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801dbee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbf2:	461e      	mov	r6, r3
 801dbf4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	4617      	mov	r7, r2
 801dbfa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dbfe:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dc02:	f7e7 fac9 	bl	8005198 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dc06:	4605      	mov	r5, r0
 801dc08:	b918      	cbnz	r0, 801dc12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801dc0a:	6030      	str	r0, [r6, #0]
 801dc0c:	4628      	mov	r0, r5
 801dc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc12:	683b      	ldr	r3, [r7, #0]
 801dc14:	4601      	mov	r1, r0
 801dc16:	4638      	mov	r0, r7
 801dc18:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801dc1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801dc20:	47c8      	blx	r9
 801dc22:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801dc26:	4602      	mov	r2, r0
 801dc28:	6030      	str	r0, [r6, #0]
 801dc2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dc2e:	d213      	bcs.n	801dc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801dc30:	4643      	mov	r3, r8
 801dc32:	4639      	mov	r1, r7
 801dc34:	4620      	mov	r0, r4
 801dc36:	f7ff fded 	bl	801d814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dc3a:	6030      	str	r0, [r6, #0]
 801dc3c:	6833      	ldr	r3, [r6, #0]
 801dc3e:	b143      	cbz	r3, 801dc52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801dc40:	7b5a      	ldrb	r2, [r3, #13]
 801dc42:	7a9b      	ldrb	r3, [r3, #10]
 801dc44:	0052      	lsls	r2, r2, #1
 801dc46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dc4a:	4313      	orrs	r3, r2
 801dc4c:	bf0c      	ite	eq
 801dc4e:	2301      	moveq	r3, #1
 801dc50:	2300      	movne	r3, #0
 801dc52:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801dc56:	e7d9      	b.n	801dc0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801dc58:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	2b7f      	cmp	r3, #127	; 0x7f
 801dc60:	d804      	bhi.n	801dc6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801dc62:	4639      	mov	r1, r7
 801dc64:	4620      	mov	r0, r4
 801dc66:	f7ff fcc9 	bl	801d5fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dc6a:	e7e6      	b.n	801dc3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801dc6c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d0e3      	beq.n	801dc3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801dc74:	f640 1302 	movw	r3, #2306	; 0x902
 801dc78:	429d      	cmp	r5, r3
 801dc7a:	d1df      	bne.n	801dc3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801dc7c:	4601      	mov	r1, r0
 801dc7e:	4620      	mov	r0, r4
 801dc80:	f7ff fc8d 	bl	801d59e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801dc84:	e7d9      	b.n	801dc3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801dc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801dc86:	b510      	push	{r4, lr}
 801dc88:	4604      	mov	r4, r0
 801dc8a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801dc8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dc90:	b1e1      	cbz	r1, 801dccc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801dc92:	2b0a      	cmp	r3, #10
 801dc94:	d02d      	beq.n	801dcf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801dc96:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801dc98:	3901      	subs	r1, #1
 801dc9a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801dc9e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801dca0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801dca4:	1c51      	adds	r1, r2, #1
 801dca6:	b289      	uxth	r1, r1
 801dca8:	2901      	cmp	r1, #1
 801dcaa:	bf8a      	itet	hi
 801dcac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801dcb0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801dcb2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801dcb4:	1c5a      	adds	r2, r3, #1
 801dcb6:	8722      	strh	r2, [r4, #56]	; 0x38
 801dcb8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801dcba:	4413      	add	r3, r2
 801dcbc:	b29b      	uxth	r3, r3
 801dcbe:	2b09      	cmp	r3, #9
 801dcc0:	bf88      	it	hi
 801dcc2:	3b0a      	subhi	r3, #10
 801dcc4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dcc8:	8458      	strh	r0, [r3, #34]	; 0x22
 801dcca:	e7de      	b.n	801dc8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801dccc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dcce:	2b0a      	cmp	r3, #10
 801dcd0:	d00f      	beq.n	801dcf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	f7ff fc11 	bl	801d4fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dcd8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dcda:	1c5a      	adds	r2, r3, #1
 801dcdc:	8722      	strh	r2, [r4, #56]	; 0x38
 801dcde:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801dce0:	4413      	add	r3, r2
 801dce2:	b29b      	uxth	r3, r3
 801dce4:	2b09      	cmp	r3, #9
 801dce6:	bf88      	it	hi
 801dce8:	3b0a      	subhi	r3, #10
 801dcea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dcee:	8458      	strh	r0, [r3, #34]	; 0x22
 801dcf0:	e7ec      	b.n	801dccc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801dcf2:	bd10      	pop	{r4, pc}

0801dcf4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dcf4:	b538      	push	{r3, r4, r5, lr}
 801dcf6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dcf8:	4604      	mov	r4, r0
 801dcfa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801dcfe:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801dd00:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801dd02:	3a01      	subs	r2, #1
 801dd04:	8702      	strh	r2, [r0, #56]	; 0x38
 801dd06:	1c5a      	adds	r2, r3, #1
 801dd08:	b292      	uxth	r2, r2
 801dd0a:	2a09      	cmp	r2, #9
 801dd0c:	bf8a      	itet	hi
 801dd0e:	3b09      	subhi	r3, #9
 801dd10:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801dd12:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801dd14:	f7ff ffb7 	bl	801dc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dd18:	8c23      	ldrh	r3, [r4, #32]
 801dd1a:	2b01      	cmp	r3, #1
 801dd1c:	bf9c      	itt	ls
 801dd1e:	3301      	addls	r3, #1
 801dd20:	8423      	strhls	r3, [r4, #32]
 801dd22:	8be3      	ldrh	r3, [r4, #30]
 801dd24:	b90b      	cbnz	r3, 801dd2a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801dd26:	2302      	movs	r3, #2
 801dd28:	83e3      	strh	r3, [r4, #30]
 801dd2a:	8be3      	ldrh	r3, [r4, #30]
 801dd2c:	4628      	mov	r0, r5
 801dd2e:	3b01      	subs	r3, #1
 801dd30:	b29b      	uxth	r3, r3
 801dd32:	83e3      	strh	r3, [r4, #30]
 801dd34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd38:	8365      	strh	r5, [r4, #26]
 801dd3a:	bd38      	pop	{r3, r4, r5, pc}

0801dd3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801dd3c:	428a      	cmp	r2, r1
 801dd3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd42:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801dd44:	d932      	bls.n	801ddac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801dd46:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801dd48:	1a54      	subs	r4, r2, r1
 801dd4a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801dd4e:	19ee      	adds	r6, r5, r7
 801dd50:	fa1f fe84 	uxth.w	lr, r4
 801dd54:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801dd58:	3e01      	subs	r6, #1
 801dd5a:	b2b4      	uxth	r4, r6
 801dd5c:	eba4 090e 	sub.w	r9, r4, lr
 801dd60:	fa1f f989 	uxth.w	r9, r9
 801dd64:	2c09      	cmp	r4, #9
 801dd66:	4626      	mov	r6, r4
 801dd68:	bf88      	it	hi
 801dd6a:	f1a4 060a 	subhi.w	r6, r4, #10
 801dd6e:	f1bc 0f00 	cmp.w	ip, #0
 801dd72:	f104 34ff 	add.w	r4, r4, #4294967295
 801dd76:	bf08      	it	eq
 801dd78:	f04f 0c02 	moveq.w	ip, #2
 801dd7c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801dd80:	b2a4      	uxth	r4, r4
 801dd82:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dd86:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801dd8a:	454c      	cmp	r4, r9
 801dd8c:	fa1f fc8c 	uxth.w	ip, ip
 801dd90:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801dd94:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801dd98:	d1e4      	bne.n	801dd64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801dd9a:	eba5 050e 	sub.w	r5, r5, lr
 801dd9e:	eb0e 0408 	add.w	r4, lr, r8
 801dda2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801dda6:	8705      	strh	r5, [r0, #56]	; 0x38
 801dda8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801ddac:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ddae:	250a      	movs	r5, #10
 801ddb0:	1a64      	subs	r4, r4, r1
 801ddb2:	4439      	add	r1, r7
 801ddb4:	b289      	uxth	r1, r1
 801ddb6:	8704      	strh	r4, [r0, #56]	; 0x38
 801ddb8:	2909      	cmp	r1, #9
 801ddba:	bf88      	it	hi
 801ddbc:	390a      	subhi	r1, #10
 801ddbe:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ddc0:	b18a      	cbz	r2, 801dde6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ddc2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ddc4:	3a01      	subs	r2, #1
 801ddc6:	3101      	adds	r1, #1
 801ddc8:	b292      	uxth	r2, r2
 801ddca:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ddce:	8701      	strh	r1, [r0, #56]	; 0x38
 801ddd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ddd2:	b901      	cbnz	r1, 801ddd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ddd4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ddd6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ddd8:	3901      	subs	r1, #1
 801ddda:	b289      	uxth	r1, r1
 801dddc:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ddde:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dde2:	844c      	strh	r4, [r1, #34]	; 0x22
 801dde4:	e7ec      	b.n	801ddc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801dde6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddea:	f7ff bf4c 	b.w	801dc86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ddee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ddee:	b570      	push	{r4, r5, r6, lr}
 801ddf0:	2500      	movs	r5, #0
 801ddf2:	4295      	cmp	r5, r2
 801ddf4:	d011      	beq.n	801de1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ddf6:	8bc4      	ldrh	r4, [r0, #30]
 801ddf8:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ddfc:	4414      	add	r4, r2
 801ddfe:	3c01      	subs	r4, #1
 801de00:	1b64      	subs	r4, r4, r5
 801de02:	b2a4      	uxth	r4, r4
 801de04:	2c01      	cmp	r4, #1
 801de06:	bf88      	it	hi
 801de08:	3c02      	subhi	r4, #2
 801de0a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801de0e:	8b64      	ldrh	r4, [r4, #26]
 801de10:	42b4      	cmp	r4, r6
 801de12:	d117      	bne.n	801de44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801de14:	3501      	adds	r5, #1
 801de16:	b2ad      	uxth	r5, r5
 801de18:	e7eb      	b.n	801ddf2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801de1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801de1e:	2400      	movs	r4, #0
 801de20:	4413      	add	r3, r2
 801de22:	b2a2      	uxth	r2, r4
 801de24:	429a      	cmp	r2, r3
 801de26:	da0f      	bge.n	801de48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801de28:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801de2a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801de2e:	3401      	adds	r4, #1
 801de30:	4432      	add	r2, r6
 801de32:	b292      	uxth	r2, r2
 801de34:	2a09      	cmp	r2, #9
 801de36:	bf88      	it	hi
 801de38:	3a0a      	subhi	r2, #10
 801de3a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801de3e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801de40:	42aa      	cmp	r2, r5
 801de42:	d0ee      	beq.n	801de22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801de44:	2000      	movs	r0, #0
 801de46:	bd70      	pop	{r4, r5, r6, pc}
 801de48:	2001      	movs	r0, #1
 801de4a:	e7fc      	b.n	801de46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801de4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801de4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de50:	4605      	mov	r5, r0
 801de52:	4616      	mov	r6, r2
 801de54:	1c8c      	adds	r4, r1, #2
 801de56:	8809      	ldrh	r1, [r1, #0]
 801de58:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801de5c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801de60:	42b3      	cmp	r3, r6
 801de62:	d124      	bne.n	801deae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801de64:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801de68:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801de6c:	f001 070f 	and.w	r7, r1, #15
 801de70:	4652      	mov	r2, sl
 801de72:	f8cd 8000 	str.w	r8, [sp]
 801de76:	464b      	mov	r3, r9
 801de78:	4621      	mov	r1, r4
 801de7a:	4628      	mov	r0, r5
 801de7c:	f7ff ffb7 	bl	801ddee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801de80:	4683      	mov	fp, r0
 801de82:	b168      	cbz	r0, 801dea0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801de84:	eb0a 0109 	add.w	r1, sl, r9
 801de88:	463a      	mov	r2, r7
 801de8a:	4628      	mov	r0, r5
 801de8c:	4441      	add	r1, r8
 801de8e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801de92:	4649      	mov	r1, r9
 801de94:	f7ff ff52 	bl	801dd3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801de98:	4658      	mov	r0, fp
 801de9a:	b003      	add	sp, #12
 801de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea0:	eb07 010a 	add.w	r1, r7, sl
 801dea4:	4449      	add	r1, r9
 801dea6:	4441      	add	r1, r8
 801dea8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801deac:	e7d2      	b.n	801de54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801deae:	f04f 0b00 	mov.w	fp, #0
 801deb2:	e7f1      	b.n	801de98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801deb4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801deb4:	b570      	push	{r4, r5, r6, lr}
 801deb6:	8810      	ldrh	r0, [r2, #0]
 801deb8:	4298      	cmp	r0, r3
 801deba:	d817      	bhi.n	801deec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801debc:	1e48      	subs	r0, r1, #1
 801debe:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801dec2:	4298      	cmp	r0, r3
 801dec4:	d312      	bcc.n	801deec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801dec6:	2400      	movs	r4, #0
 801dec8:	428c      	cmp	r4, r1
 801deca:	d20f      	bcs.n	801deec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801decc:	1860      	adds	r0, r4, r1
 801dece:	1040      	asrs	r0, r0, #1
 801ded0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ded4:	0085      	lsls	r5, r0, #2
 801ded6:	42b3      	cmp	r3, r6
 801ded8:	d902      	bls.n	801dee0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801deda:	3001      	adds	r0, #1
 801dedc:	b284      	uxth	r4, r0
 801dede:	e7f3      	b.n	801dec8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dee0:	d201      	bcs.n	801dee6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801dee2:	b281      	uxth	r1, r0
 801dee4:	e7f0      	b.n	801dec8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dee6:	442a      	add	r2, r5
 801dee8:	8850      	ldrh	r0, [r2, #2]
 801deea:	bd70      	pop	{r4, r5, r6, pc}
 801deec:	2000      	movs	r0, #0
 801deee:	e7fc      	b.n	801deea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801def0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801def0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801def4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801def6:	4604      	mov	r4, r0
 801def8:	260b      	movs	r6, #11
 801defa:	886f      	ldrh	r7, [r5, #2]
 801defc:	087f      	lsrs	r7, r7, #1
 801defe:	3e01      	subs	r6, #1
 801df00:	d013      	beq.n	801df2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801df02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801df04:	462a      	mov	r2, r5
 801df06:	4639      	mov	r1, r7
 801df08:	4620      	mov	r0, r4
 801df0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df0e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801df12:	4643      	mov	r3, r8
 801df14:	f7ff ffce 	bl	801deb4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801df18:	b138      	cbz	r0, 801df2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801df1a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801df1e:	4642      	mov	r2, r8
 801df20:	4620      	mov	r0, r4
 801df22:	f7ff ff93 	bl	801de4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801df26:	2800      	cmp	r0, #0
 801df28:	d1e9      	bne.n	801defe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801df2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801df30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801df30:	b570      	push	{r4, r5, r6, lr}
 801df32:	694a      	ldr	r2, [r1, #20]
 801df34:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801df36:	684b      	ldr	r3, [r1, #4]
 801df38:	1b54      	subs	r4, r2, r5
 801df3a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801df3c:	f000 8106 	beq.w	801e14c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801df40:	1b9b      	subs	r3, r3, r6
 801df42:	d003      	beq.n	801df4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801df44:	4363      	muls	r3, r4
 801df46:	2210      	movs	r2, #16
 801df48:	fb93 f3f2 	sdiv	r3, r3, r2
 801df4c:	680c      	ldr	r4, [r1, #0]
 801df4e:	698a      	ldr	r2, [r1, #24]
 801df50:	1b65      	subs	r5, r4, r5
 801df52:	f000 80fd 	beq.w	801e150 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801df56:	1b92      	subs	r2, r2, r6
 801df58:	d003      	beq.n	801df62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801df5a:	436a      	muls	r2, r5
 801df5c:	2410      	movs	r4, #16
 801df5e:	fb92 f2f4 	sdiv	r2, r2, r4
 801df62:	1a9b      	subs	r3, r3, r2
 801df64:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e18c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801df68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df6c:	460a      	mov	r2, r1
 801df6e:	ee07 3a90 	vmov	s15, r3
 801df72:	f100 040c 	add.w	r4, r0, #12
 801df76:	4603      	mov	r3, r0
 801df78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801df80:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801df84:	eeb1 6a43 	vneg.f32	s12, s6
 801df88:	edd2 7a02 	vldr	s15, [r2, #8]
 801df8c:	3214      	adds	r2, #20
 801df8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801df92:	ece3 6a01 	vstmia	r3!, {s13}
 801df96:	429c      	cmp	r4, r3
 801df98:	ed52 7a02 	vldr	s15, [r2, #-8]
 801df9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dfa0:	edc3 7a02 	vstr	s15, [r3, #8]
 801dfa4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801dfa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dfac:	edc3 7a05 	vstr	s15, [r3, #20]
 801dfb0:	d1ea      	bne.n	801df88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dfb2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dfb4:	698b      	ldr	r3, [r1, #24]
 801dfb6:	edd0 4a02 	vldr	s9, [r0, #8]
 801dfba:	1a9b      	subs	r3, r3, r2
 801dfbc:	edd0 3a00 	vldr	s7, [r0]
 801dfc0:	edd0 6a01 	vldr	s13, [r0, #4]
 801dfc4:	ee07 3a90 	vmov	s15, r3
 801dfc8:	684b      	ldr	r3, [r1, #4]
 801dfca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dfce:	ed90 5a05 	vldr	s10, [r0, #20]
 801dfd2:	1a9b      	subs	r3, r3, r2
 801dfd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfd8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dfdc:	ed90 2a03 	vldr	s4, [r0, #12]
 801dfe0:	ee07 3a10 	vmov	s14, r3
 801dfe4:	edd0 5a04 	vldr	s11, [r0, #16]
 801dfe8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dfec:	ed90 1a07 	vldr	s2, [r0, #28]
 801dff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dff4:	edd0 2a06 	vldr	s5, [r0, #24]
 801dff8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dffc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e000:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e004:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e008:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e00c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e010:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e014:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e016:	694a      	ldr	r2, [r1, #20]
 801e018:	1b13      	subs	r3, r2, r4
 801e01a:	ee07 3a10 	vmov	s14, r3
 801e01e:	680b      	ldr	r3, [r1, #0]
 801e020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e024:	1b1b      	subs	r3, r3, r4
 801e026:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e02a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e02e:	ee07 3a10 	vmov	s14, r3
 801e032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e036:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e03a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e03e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e042:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e046:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e048:	698b      	ldr	r3, [r1, #24]
 801e04a:	1a9b      	subs	r3, r3, r2
 801e04c:	ee06 3a90 	vmov	s13, r3
 801e050:	684b      	ldr	r3, [r1, #4]
 801e052:	1a9b      	subs	r3, r3, r2
 801e054:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e058:	ee07 3a10 	vmov	s14, r3
 801e05c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e064:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e068:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e06c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e070:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e074:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e078:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e07a:	694a      	ldr	r2, [r1, #20]
 801e07c:	1b13      	subs	r3, r2, r4
 801e07e:	ee07 3a10 	vmov	s14, r3
 801e082:	680b      	ldr	r3, [r1, #0]
 801e084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e088:	1b1b      	subs	r3, r3, r4
 801e08a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e08e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e092:	ee07 3a10 	vmov	s14, r3
 801e096:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e09a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e09e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e0a2:	edd0 5a08 	vldr	s11, [r0, #32]
 801e0a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e0aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e0ae:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e0b2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e0b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e0b8:	698b      	ldr	r3, [r1, #24]
 801e0ba:	1a9b      	subs	r3, r3, r2
 801e0bc:	ee07 3a10 	vmov	s14, r3
 801e0c0:	684b      	ldr	r3, [r1, #4]
 801e0c2:	1a9b      	subs	r3, r3, r2
 801e0c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e0c8:	ee01 3a90 	vmov	s3, r3
 801e0cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e0d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e0d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e0d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e0dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e0e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e0e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e0e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e0ea:	694a      	ldr	r2, [r1, #20]
 801e0ec:	1b13      	subs	r3, r2, r4
 801e0ee:	ee03 3a10 	vmov	s6, r3
 801e0f2:	680b      	ldr	r3, [r1, #0]
 801e0f4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e0f8:	1b1b      	subs	r3, r3, r4
 801e0fa:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e0fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e102:	ee03 3a10 	vmov	s6, r3
 801e106:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e10a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e10e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e112:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e116:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e11a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e11e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e122:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e12a:	dd13      	ble.n	801e154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e12c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e130:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e134:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e136:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e142:	dd15      	ble.n	801e170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e148:	6403      	str	r3, [r0, #64]	; 0x40
 801e14a:	bd70      	pop	{r4, r5, r6, pc}
 801e14c:	4623      	mov	r3, r4
 801e14e:	e6fd      	b.n	801df4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e150:	462a      	mov	r2, r5
 801e152:	e706      	b.n	801df62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e154:	d502      	bpl.n	801e15c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e156:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e15a:	e7e9      	b.n	801e130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e15c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e160:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e164:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16c:	dade      	bge.n	801e12c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e16e:	e7f2      	b.n	801e156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e170:	d502      	bpl.n	801e178 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e172:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e176:	e7e7      	b.n	801e148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e178:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e17c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e180:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e188:	dadc      	bge.n	801e144 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e18a:	e7f2      	b.n	801e172 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e18c:	3d800000 	.word	0x3d800000

0801e190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e194:	2714      	movs	r7, #20
 801e196:	435f      	muls	r7, r3
 801e198:	eb02 0c07 	add.w	ip, r2, r7
 801e19c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e1a0:	f115 0e0f 	adds.w	lr, r5, #15
 801e1a4:	f100 80a2 	bmi.w	801e2ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e1a8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e1ac:	9c08      	ldr	r4, [sp, #32]
 801e1ae:	2614      	movs	r6, #20
 801e1b0:	f8c0 e014 	str.w	lr, [r0, #20]
 801e1b4:	4366      	muls	r6, r4
 801e1b6:	eb02 0806 	add.w	r8, r2, r6
 801e1ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e1be:	f115 040f 	adds.w	r4, r5, #15
 801e1c2:	f100 809f 	bmi.w	801e304 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e1c6:	1124      	asrs	r4, r4, #4
 801e1c8:	eba4 040e 	sub.w	r4, r4, lr
 801e1cc:	6184      	str	r4, [r0, #24]
 801e1ce:	2c00      	cmp	r4, #0
 801e1d0:	f000 808a 	beq.w	801e2e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e1d4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e1d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e1dc:	5995      	ldr	r5, [r2, r6]
 801e1de:	eba4 0809 	sub.w	r8, r4, r9
 801e1e2:	59d4      	ldr	r4, [r2, r7]
 801e1e4:	eba5 0a04 	sub.w	sl, r5, r4
 801e1e8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e1ec:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e1f0:	fb0e fe05 	mul.w	lr, lr, r5
 801e1f4:	fb0a ee19 	mls	lr, sl, r9, lr
 801e1f8:	fb08 e404 	mla	r4, r8, r4, lr
 801e1fc:	3c01      	subs	r4, #1
 801e1fe:	19a4      	adds	r4, r4, r6
 801e200:	f100 808c 	bmi.w	801e31c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e204:	fb94 fef6 	sdiv	lr, r4, r6
 801e208:	fb06 441e 	mls	r4, r6, lr, r4
 801e20c:	f8c0 e000 	str.w	lr, [r0]
 801e210:	6104      	str	r4, [r0, #16]
 801e212:	2d00      	cmp	r5, #0
 801e214:	f2c0 8095 	blt.w	801e342 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801e218:	fb95 f4f6 	sdiv	r4, r5, r6
 801e21c:	fb06 5514 	mls	r5, r6, r4, r5
 801e220:	6044      	str	r4, [r0, #4]
 801e222:	6085      	str	r5, [r0, #8]
 801e224:	60c6      	str	r6, [r0, #12]
 801e226:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e22a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e22e:	6945      	ldr	r5, [r0, #20]
 801e230:	59d2      	ldr	r2, [r2, r7]
 801e232:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801e236:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801e364 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801e23a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e23e:	ee07 4a10 	vmov	s14, r4
 801e242:	6804      	ldr	r4, [r0, #0]
 801e244:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801e248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e24c:	ee07 2a90 	vmov	s15, r2
 801e250:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e25c:	edd3 6a00 	vldr	s13, [r3]
 801e260:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e264:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801e268:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e26c:	edc0 6a07 	vstr	s13, [r0, #28]
 801e270:	edd0 6a01 	vldr	s13, [r0, #4]
 801e274:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801e278:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e27c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e280:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e284:	ed80 6a08 	vstr	s12, [r0, #32]
 801e288:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801e28a:	6242      	str	r2, [r0, #36]	; 0x24
 801e28c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801e290:	ed93 6a03 	vldr	s12, [r3, #12]
 801e294:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e298:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e29c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e2a0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801e2a4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e2a8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801e2ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e2b0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801e2b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e2b6:	6302      	str	r2, [r0, #48]	; 0x30
 801e2b8:	ed93 6a06 	vldr	s12, [r3, #24]
 801e2bc:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801e2c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e2c4:	eeb0 7a46 	vmov.f32	s14, s12
 801e2c8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801e2cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e2d0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e2d4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801e2d8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801e2dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2e0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801e2e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801e2e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2ec:	2410      	movs	r4, #16
 801e2ee:	f1c5 0501 	rsb	r5, r5, #1
 801e2f2:	fb9e fef4 	sdiv	lr, lr, r4
 801e2f6:	f015 050f 	ands.w	r5, r5, #15
 801e2fa:	bf18      	it	ne
 801e2fc:	2501      	movne	r5, #1
 801e2fe:	ebae 0e05 	sub.w	lr, lr, r5
 801e302:	e753      	b.n	801e1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801e304:	f04f 0910 	mov.w	r9, #16
 801e308:	f1c5 0501 	rsb	r5, r5, #1
 801e30c:	fb94 f4f9 	sdiv	r4, r4, r9
 801e310:	f015 050f 	ands.w	r5, r5, #15
 801e314:	bf18      	it	ne
 801e316:	2501      	movne	r5, #1
 801e318:	1b64      	subs	r4, r4, r5
 801e31a:	e755      	b.n	801e1c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801e31c:	4264      	negs	r4, r4
 801e31e:	fb94 fef6 	sdiv	lr, r4, r6
 801e322:	f1ce 0800 	rsb	r8, lr, #0
 801e326:	fb06 441e 	mls	r4, r6, lr, r4
 801e32a:	f8c0 8000 	str.w	r8, [r0]
 801e32e:	6104      	str	r4, [r0, #16]
 801e330:	2c00      	cmp	r4, #0
 801e332:	f43f af6e 	beq.w	801e212 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801e336:	ea6f 0e0e 	mvn.w	lr, lr
 801e33a:	1b34      	subs	r4, r6, r4
 801e33c:	f8c0 e000 	str.w	lr, [r0]
 801e340:	e766      	b.n	801e210 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801e342:	426d      	negs	r5, r5
 801e344:	fb95 f4f6 	sdiv	r4, r5, r6
 801e348:	f1c4 0e00 	rsb	lr, r4, #0
 801e34c:	fb06 5514 	mls	r5, r6, r4, r5
 801e350:	f8c0 e004 	str.w	lr, [r0, #4]
 801e354:	6085      	str	r5, [r0, #8]
 801e356:	2d00      	cmp	r5, #0
 801e358:	f43f af64 	beq.w	801e224 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801e35c:	43e4      	mvns	r4, r4
 801e35e:	1b75      	subs	r5, r6, r5
 801e360:	6044      	str	r4, [r0, #4]
 801e362:	e75e      	b.n	801e222 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801e364:	3d800000 	.word	0x3d800000

0801e368 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e368:	4602      	mov	r2, r0
 801e36a:	b148      	cbz	r0, 801e380 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e36c:	2300      	movs	r3, #0
 801e36e:	b298      	uxth	r0, r3
 801e370:	3301      	adds	r3, #1
 801e372:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e376:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e37a:	2900      	cmp	r1, #0
 801e37c:	d1f7      	bne.n	801e36e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e37e:	4770      	bx	lr
 801e380:	4770      	bx	lr

0801e382 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e382:	b530      	push	{r4, r5, lr}
 801e384:	4604      	mov	r4, r0
 801e386:	b159      	cbz	r1, 801e3a0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e388:	b148      	cbz	r0, 801e39e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e38a:	2300      	movs	r3, #0
 801e38c:	b298      	uxth	r0, r3
 801e38e:	4282      	cmp	r2, r0
 801e390:	d905      	bls.n	801e39e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e392:	5ccd      	ldrb	r5, [r1, r3]
 801e394:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e398:	3301      	adds	r3, #1
 801e39a:	2d00      	cmp	r5, #0
 801e39c:	d1f6      	bne.n	801e38c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e39e:	bd30      	pop	{r4, r5, pc}
 801e3a0:	4608      	mov	r0, r1
 801e3a2:	e7fc      	b.n	801e39e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e3a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3a6:	468c      	mov	ip, r1
 801e3a8:	b08b      	sub	sp, #44	; 0x2c
 801e3aa:	2100      	movs	r1, #0
 801e3ac:	ae01      	add	r6, sp, #4
 801e3ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e3b2:	211f      	movs	r1, #31
 801e3b4:	fbb0 f7f3 	udiv	r7, r0, r3
 801e3b8:	fb03 0517 	mls	r5, r3, r7, r0
 801e3bc:	4638      	mov	r0, r7
 801e3be:	b2ec      	uxtb	r4, r5
 801e3c0:	2d09      	cmp	r5, #9
 801e3c2:	bfd4      	ite	le
 801e3c4:	3430      	addle	r4, #48	; 0x30
 801e3c6:	3457      	addgt	r4, #87	; 0x57
 801e3c8:	b2e4      	uxtb	r4, r4
 801e3ca:	558c      	strb	r4, [r1, r6]
 801e3cc:	1e4c      	subs	r4, r1, #1
 801e3ce:	b92f      	cbnz	r7, 801e3dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e3d0:	4431      	add	r1, r6
 801e3d2:	4660      	mov	r0, ip
 801e3d4:	f7ff ffd5 	bl	801e382 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e3d8:	b00b      	add	sp, #44	; 0x2c
 801e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3dc:	4621      	mov	r1, r4
 801e3de:	e7e9      	b.n	801e3b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e3e0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3e2:	4607      	mov	r7, r0
 801e3e4:	b08b      	sub	sp, #44	; 0x2c
 801e3e6:	4608      	mov	r0, r1
 801e3e8:	b341      	cbz	r1, 801e43c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e3ea:	1e99      	subs	r1, r3, #2
 801e3ec:	2922      	cmp	r1, #34	; 0x22
 801e3ee:	d825      	bhi.n	801e43c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e3f0:	2100      	movs	r1, #0
 801e3f2:	463c      	mov	r4, r7
 801e3f4:	261f      	movs	r6, #31
 801e3f6:	f10d 0c04 	add.w	ip, sp, #4
 801e3fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e3fe:	1e71      	subs	r1, r6, #1
 801e400:	fb94 fef3 	sdiv	lr, r4, r3
 801e404:	fb03 441e 	mls	r4, r3, lr, r4
 801e408:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e40c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e410:	b2ec      	uxtb	r4, r5
 801e412:	2d09      	cmp	r5, #9
 801e414:	bfd4      	ite	le
 801e416:	3430      	addle	r4, #48	; 0x30
 801e418:	3457      	addgt	r4, #87	; 0x57
 801e41a:	b2e4      	uxtb	r4, r4
 801e41c:	f80c 4006 	strb.w	r4, [ip, r6]
 801e420:	4674      	mov	r4, lr
 801e422:	b96c      	cbnz	r4, 801e440 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e424:	2f00      	cmp	r7, #0
 801e426:	da05      	bge.n	801e434 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e428:	ab0a      	add	r3, sp, #40	; 0x28
 801e42a:	4419      	add	r1, r3
 801e42c:	232d      	movs	r3, #45	; 0x2d
 801e42e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e432:	1eb1      	subs	r1, r6, #2
 801e434:	3101      	adds	r1, #1
 801e436:	4461      	add	r1, ip
 801e438:	f7ff ffa3 	bl	801e382 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e43c:	b00b      	add	sp, #44	; 0x2c
 801e43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e440:	460e      	mov	r6, r1
 801e442:	e7dc      	b.n	801e3fe <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e448:	b085      	sub	sp, #20
 801e44a:	4691      	mov	r9, r2
 801e44c:	6802      	ldr	r2, [r0, #0]
 801e44e:	4688      	mov	r8, r1
 801e450:	461c      	mov	r4, r3
 801e452:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e456:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e45a:	4683      	mov	fp, r0
 801e45c:	4610      	mov	r0, r2
 801e45e:	9103      	str	r1, [sp, #12]
 801e460:	9302      	str	r3, [sp, #8]
 801e462:	9201      	str	r2, [sp, #4]
 801e464:	f7ff ff80 	bl	801e368 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e468:	f1b8 0f00 	cmp.w	r8, #0
 801e46c:	bf0c      	ite	eq
 801e46e:	4684      	moveq	ip, r0
 801e470:	f100 0c01 	addne.w	ip, r0, #1
 801e474:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e478:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e47c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e47e:	fa1f fc8c 	uxth.w	ip, ip
 801e482:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e484:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e488:	9903      	ldr	r1, [sp, #12]
 801e48a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e48e:	d041      	beq.n	801e514 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e490:	d834      	bhi.n	801e4fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e492:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e496:	d059      	beq.n	801e54c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e498:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e49c:	d03a      	beq.n	801e514 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e49e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e4a2:	d034      	beq.n	801e50e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e4a4:	2400      	movs	r4, #0
 801e4a6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e4aa:	3a01      	subs	r2, #1
 801e4ac:	b169      	cbz	r1, 801e4ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e4ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e4b0:	458c      	cmp	ip, r1
 801e4b2:	da09      	bge.n	801e4c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e4b4:	eba1 010c 	sub.w	r1, r1, ip
 801e4b8:	b289      	uxth	r1, r1
 801e4ba:	b933      	cbnz	r3, 801e4ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e4bc:	2e00      	cmp	r6, #0
 801e4be:	d051      	beq.n	801e564 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e4c0:	2800      	cmp	r0, #0
 801e4c2:	d04f      	beq.n	801e564 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e4c4:	440c      	add	r4, r1
 801e4c6:	b2a4      	uxth	r4, r4
 801e4c8:	2100      	movs	r1, #0
 801e4ca:	682b      	ldr	r3, [r5, #0]
 801e4cc:	4293      	cmp	r3, r2
 801e4ce:	da07      	bge.n	801e4e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e4d0:	f1b8 0f00 	cmp.w	r8, #0
 801e4d4:	d004      	beq.n	801e4e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e4d6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e4da:	682b      	ldr	r3, [r5, #0]
 801e4dc:	3301      	adds	r3, #1
 801e4de:	602b      	str	r3, [r5, #0]
 801e4e0:	2730      	movs	r7, #48	; 0x30
 801e4e2:	2c00      	cmp	r4, #0
 801e4e4:	d04e      	beq.n	801e584 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e4e6:	682e      	ldr	r6, [r5, #0]
 801e4e8:	3c01      	subs	r4, #1
 801e4ea:	42b2      	cmp	r2, r6
 801e4ec:	b2a4      	uxth	r4, r4
 801e4ee:	dd49      	ble.n	801e584 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e4f0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e4f4:	682b      	ldr	r3, [r5, #0]
 801e4f6:	3301      	adds	r3, #1
 801e4f8:	602b      	str	r3, [r5, #0]
 801e4fa:	e7f2      	b.n	801e4e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e4fc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e500:	d01d      	beq.n	801e53e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e502:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e506:	d002      	beq.n	801e50e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e508:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e50c:	e7c9      	b.n	801e4a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e50e:	4684      	mov	ip, r0
 801e510:	f04f 0800 	mov.w	r8, #0
 801e514:	2c00      	cmp	r4, #0
 801e516:	d0c6      	beq.n	801e4a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e518:	b947      	cbnz	r7, 801e52c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e51a:	2801      	cmp	r0, #1
 801e51c:	d106      	bne.n	801e52c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e51e:	8814      	ldrh	r4, [r2, #0]
 801e520:	2c30      	cmp	r4, #48	; 0x30
 801e522:	bf02      	ittt	eq
 801e524:	3202      	addeq	r2, #2
 801e526:	4638      	moveq	r0, r7
 801e528:	f8cb 2000 	streq.w	r2, [fp]
 801e52c:	45bc      	cmp	ip, r7
 801e52e:	da14      	bge.n	801e55a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e530:	b2bf      	uxth	r7, r7
 801e532:	eba7 040c 	sub.w	r4, r7, ip
 801e536:	46bc      	mov	ip, r7
 801e538:	b2a4      	uxth	r4, r4
 801e53a:	2600      	movs	r6, #0
 801e53c:	e7b3      	b.n	801e4a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e53e:	4684      	mov	ip, r0
 801e540:	b16c      	cbz	r4, 801e55e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e542:	42b8      	cmp	r0, r7
 801e544:	dd00      	ble.n	801e548 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e546:	b2b8      	uxth	r0, r7
 801e548:	2400      	movs	r4, #0
 801e54a:	e003      	b.n	801e554 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e54c:	f04f 0c01 	mov.w	ip, #1
 801e550:	2400      	movs	r4, #0
 801e552:	4660      	mov	r0, ip
 801e554:	4626      	mov	r6, r4
 801e556:	46a0      	mov	r8, r4
 801e558:	e7a5      	b.n	801e4a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e55a:	2400      	movs	r4, #0
 801e55c:	e7ed      	b.n	801e53a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e55e:	4626      	mov	r6, r4
 801e560:	46a0      	mov	r8, r4
 801e562:	e7a0      	b.n	801e4a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e564:	2900      	cmp	r1, #0
 801e566:	d0b0      	beq.n	801e4ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e568:	2720      	movs	r7, #32
 801e56a:	682e      	ldr	r6, [r5, #0]
 801e56c:	2900      	cmp	r1, #0
 801e56e:	d0ac      	beq.n	801e4ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e570:	3901      	subs	r1, #1
 801e572:	4296      	cmp	r6, r2
 801e574:	b289      	uxth	r1, r1
 801e576:	daa7      	bge.n	801e4c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e578:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e57c:	682b      	ldr	r3, [r5, #0]
 801e57e:	3301      	adds	r3, #1
 801e580:	602b      	str	r3, [r5, #0]
 801e582:	e7f2      	b.n	801e56a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e584:	b188      	cbz	r0, 801e5aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e586:	682b      	ldr	r3, [r5, #0]
 801e588:	3801      	subs	r0, #1
 801e58a:	429a      	cmp	r2, r3
 801e58c:	b280      	uxth	r0, r0
 801e58e:	dd0c      	ble.n	801e5aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e590:	f8db 3000 	ldr.w	r3, [fp]
 801e594:	1c9c      	adds	r4, r3, #2
 801e596:	f8cb 4000 	str.w	r4, [fp]
 801e59a:	881c      	ldrh	r4, [r3, #0]
 801e59c:	682b      	ldr	r3, [r5, #0]
 801e59e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e5a2:	682b      	ldr	r3, [r5, #0]
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	602b      	str	r3, [r5, #0]
 801e5a8:	e7ec      	b.n	801e584 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e5aa:	2620      	movs	r6, #32
 801e5ac:	b151      	cbz	r1, 801e5c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e5ae:	6828      	ldr	r0, [r5, #0]
 801e5b0:	3901      	subs	r1, #1
 801e5b2:	4282      	cmp	r2, r0
 801e5b4:	b289      	uxth	r1, r1
 801e5b6:	dd05      	ble.n	801e5c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e5b8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e5bc:	682b      	ldr	r3, [r5, #0]
 801e5be:	3301      	adds	r3, #1
 801e5c0:	602b      	str	r3, [r5, #0]
 801e5c2:	e7f3      	b.n	801e5ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e5c4:	b005      	add	sp, #20
 801e5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e5ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e5ce:	2400      	movs	r4, #0
 801e5d0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e5d4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e5d8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e5dc:	8014      	strh	r4, [r2, #0]
 801e5de:	701c      	strb	r4, [r3, #0]
 801e5e0:	f888 4000 	strb.w	r4, [r8]
 801e5e4:	f88c 4000 	strb.w	r4, [ip]
 801e5e8:	f88e 4000 	strb.w	r4, [lr]
 801e5ec:	703c      	strb	r4, [r7, #0]
 801e5ee:	6804      	ldr	r4, [r0, #0]
 801e5f0:	b1a4      	cbz	r4, 801e61c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e5f2:	8824      	ldrh	r4, [r4, #0]
 801e5f4:	f04f 0901 	mov.w	r9, #1
 801e5f8:	b314      	cbz	r4, 801e640 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e5fa:	2c2b      	cmp	r4, #43	; 0x2b
 801e5fc:	d001      	beq.n	801e602 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e5fe:	2c20      	cmp	r4, #32
 801e600:	d110      	bne.n	801e624 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e602:	8014      	strh	r4, [r2, #0]
 801e604:	6804      	ldr	r4, [r0, #0]
 801e606:	b10c      	cbz	r4, 801e60c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e608:	3402      	adds	r4, #2
 801e60a:	6004      	str	r4, [r0, #0]
 801e60c:	680c      	ldr	r4, [r1, #0]
 801e60e:	b10c      	cbz	r4, 801e614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e610:	3401      	adds	r4, #1
 801e612:	600c      	str	r4, [r1, #0]
 801e614:	6804      	ldr	r4, [r0, #0]
 801e616:	b17c      	cbz	r4, 801e638 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e618:	8824      	ldrh	r4, [r4, #0]
 801e61a:	e7ed      	b.n	801e5f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e61c:	680c      	ldr	r4, [r1, #0]
 801e61e:	b17c      	cbz	r4, 801e640 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e620:	7824      	ldrb	r4, [r4, #0]
 801e622:	e7e7      	b.n	801e5f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e624:	2c2d      	cmp	r4, #45	; 0x2d
 801e626:	d102      	bne.n	801e62e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e628:	f883 9000 	strb.w	r9, [r3]
 801e62c:	e7ea      	b.n	801e604 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e62e:	2c23      	cmp	r4, #35	; 0x23
 801e630:	d107      	bne.n	801e642 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e632:	f888 9000 	strb.w	r9, [r8]
 801e636:	e7e5      	b.n	801e604 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e638:	680c      	ldr	r4, [r1, #0]
 801e63a:	b10c      	cbz	r4, 801e640 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e63c:	7824      	ldrb	r4, [r4, #0]
 801e63e:	e7db      	b.n	801e5f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e640:	2400      	movs	r4, #0
 801e642:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e646:	2b09      	cmp	r3, #9
 801e648:	d901      	bls.n	801e64e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e64a:	2c2a      	cmp	r4, #42	; 0x2a
 801e64c:	d122      	bne.n	801e694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e64e:	2301      	movs	r3, #1
 801e650:	2c30      	cmp	r4, #48	; 0x30
 801e652:	f88e 3000 	strb.w	r3, [lr]
 801e656:	d10d      	bne.n	801e674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e658:	f88c 3000 	strb.w	r3, [ip]
 801e65c:	6803      	ldr	r3, [r0, #0]
 801e65e:	b10b      	cbz	r3, 801e664 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e660:	3302      	adds	r3, #2
 801e662:	6003      	str	r3, [r0, #0]
 801e664:	680b      	ldr	r3, [r1, #0]
 801e666:	b10b      	cbz	r3, 801e66c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e668:	3301      	adds	r3, #1
 801e66a:	600b      	str	r3, [r1, #0]
 801e66c:	6803      	ldr	r3, [r0, #0]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d02f      	beq.n	801e6d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e672:	881c      	ldrh	r4, [r3, #0]
 801e674:	2c2a      	cmp	r4, #42	; 0x2a
 801e676:	d135      	bne.n	801e6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e678:	f04f 33ff 	mov.w	r3, #4294967295
 801e67c:	6033      	str	r3, [r6, #0]
 801e67e:	6803      	ldr	r3, [r0, #0]
 801e680:	b10b      	cbz	r3, 801e686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e682:	3302      	adds	r3, #2
 801e684:	6003      	str	r3, [r0, #0]
 801e686:	680b      	ldr	r3, [r1, #0]
 801e688:	b10b      	cbz	r3, 801e68e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e68a:	3301      	adds	r3, #1
 801e68c:	600b      	str	r3, [r1, #0]
 801e68e:	6803      	ldr	r3, [r0, #0]
 801e690:	b31b      	cbz	r3, 801e6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e692:	881c      	ldrh	r4, [r3, #0]
 801e694:	2c2e      	cmp	r4, #46	; 0x2e
 801e696:	d11a      	bne.n	801e6ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e698:	2301      	movs	r3, #1
 801e69a:	703b      	strb	r3, [r7, #0]
 801e69c:	6803      	ldr	r3, [r0, #0]
 801e69e:	b10b      	cbz	r3, 801e6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e6a0:	3302      	adds	r3, #2
 801e6a2:	6003      	str	r3, [r0, #0]
 801e6a4:	680b      	ldr	r3, [r1, #0]
 801e6a6:	b10b      	cbz	r3, 801e6ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e6a8:	3301      	adds	r3, #1
 801e6aa:	600b      	str	r3, [r1, #0]
 801e6ac:	6803      	ldr	r3, [r0, #0]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d036      	beq.n	801e720 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e6b2:	881b      	ldrh	r3, [r3, #0]
 801e6b4:	2b2a      	cmp	r3, #42	; 0x2a
 801e6b6:	d137      	bne.n	801e728 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801e6bc:	602b      	str	r3, [r5, #0]
 801e6be:	6803      	ldr	r3, [r0, #0]
 801e6c0:	b10b      	cbz	r3, 801e6c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e6c2:	3302      	adds	r3, #2
 801e6c4:	6003      	str	r3, [r0, #0]
 801e6c6:	680b      	ldr	r3, [r1, #0]
 801e6c8:	b10b      	cbz	r3, 801e6ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e6ca:	3301      	adds	r3, #1
 801e6cc:	600b      	str	r3, [r1, #0]
 801e6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6d2:	680c      	ldr	r4, [r1, #0]
 801e6d4:	b134      	cbz	r4, 801e6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e6d6:	7824      	ldrb	r4, [r4, #0]
 801e6d8:	e7cc      	b.n	801e674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e6da:	680b      	ldr	r3, [r1, #0]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d0f6      	beq.n	801e6ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e6e0:	781c      	ldrb	r4, [r3, #0]
 801e6e2:	e7d7      	b.n	801e694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	220a      	movs	r2, #10
 801e6e8:	6033      	str	r3, [r6, #0]
 801e6ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e6ee:	fa1f f38c 	uxth.w	r3, ip
 801e6f2:	2b09      	cmp	r3, #9
 801e6f4:	d8ce      	bhi.n	801e694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e6f6:	6833      	ldr	r3, [r6, #0]
 801e6f8:	fb02 c303 	mla	r3, r2, r3, ip
 801e6fc:	6033      	str	r3, [r6, #0]
 801e6fe:	6803      	ldr	r3, [r0, #0]
 801e700:	b10b      	cbz	r3, 801e706 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e702:	3302      	adds	r3, #2
 801e704:	6003      	str	r3, [r0, #0]
 801e706:	680b      	ldr	r3, [r1, #0]
 801e708:	b10b      	cbz	r3, 801e70e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e70a:	3301      	adds	r3, #1
 801e70c:	600b      	str	r3, [r1, #0]
 801e70e:	6803      	ldr	r3, [r0, #0]
 801e710:	b10b      	cbz	r3, 801e716 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e712:	881c      	ldrh	r4, [r3, #0]
 801e714:	e7e9      	b.n	801e6ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e716:	680c      	ldr	r4, [r1, #0]
 801e718:	2c00      	cmp	r4, #0
 801e71a:	d0e6      	beq.n	801e6ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e71c:	7824      	ldrb	r4, [r4, #0]
 801e71e:	e7e4      	b.n	801e6ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e720:	680b      	ldr	r3, [r1, #0]
 801e722:	b10b      	cbz	r3, 801e728 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e724:	781b      	ldrb	r3, [r3, #0]
 801e726:	e7c5      	b.n	801e6b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e728:	2200      	movs	r2, #0
 801e72a:	240a      	movs	r4, #10
 801e72c:	602a      	str	r2, [r5, #0]
 801e72e:	3b30      	subs	r3, #48	; 0x30
 801e730:	682a      	ldr	r2, [r5, #0]
 801e732:	b29e      	uxth	r6, r3
 801e734:	2e09      	cmp	r6, #9
 801e736:	d813      	bhi.n	801e760 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e738:	fb04 3302 	mla	r3, r4, r2, r3
 801e73c:	602b      	str	r3, [r5, #0]
 801e73e:	6803      	ldr	r3, [r0, #0]
 801e740:	b10b      	cbz	r3, 801e746 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e742:	3302      	adds	r3, #2
 801e744:	6003      	str	r3, [r0, #0]
 801e746:	680b      	ldr	r3, [r1, #0]
 801e748:	b10b      	cbz	r3, 801e74e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e74a:	3301      	adds	r3, #1
 801e74c:	600b      	str	r3, [r1, #0]
 801e74e:	6803      	ldr	r3, [r0, #0]
 801e750:	b10b      	cbz	r3, 801e756 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e752:	881b      	ldrh	r3, [r3, #0]
 801e754:	e7eb      	b.n	801e72e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e756:	680b      	ldr	r3, [r1, #0]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d0e8      	beq.n	801e72e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e75c:	781b      	ldrb	r3, [r3, #0]
 801e75e:	e7e6      	b.n	801e72e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e760:	2a06      	cmp	r2, #6
 801e762:	bfa8      	it	ge
 801e764:	2206      	movge	r2, #6
 801e766:	602a      	str	r2, [r5, #0]
 801e768:	e7b1      	b.n	801e6ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e76e:	b0a3      	sub	sp, #140	; 0x8c
 801e770:	2600      	movs	r6, #0
 801e772:	4607      	mov	r7, r0
 801e774:	4688      	mov	r8, r1
 801e776:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e77a:	4631      	mov	r1, r6
 801e77c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e77e:	4648      	mov	r0, r9
 801e780:	960d      	str	r6, [sp, #52]	; 0x34
 801e782:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e786:	2242      	movs	r2, #66	; 0x42
 801e788:	f00c f9d0 	bl	802ab2c <memset>
 801e78c:	b15f      	cbz	r7, 801e7a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e78e:	f108 3aff 	add.w	sl, r8, #4294967295
 801e792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e796:	b152      	cbz	r2, 801e7ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e798:	8812      	ldrh	r2, [r2, #0]
 801e79a:	b10a      	cbz	r2, 801e7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e79c:	459a      	cmp	sl, r3
 801e79e:	dc2e      	bgt.n	801e7fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e7a0:	2200      	movs	r2, #0
 801e7a2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e7a6:	4638      	mov	r0, r7
 801e7a8:	b023      	add	sp, #140	; 0x8c
 801e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7ae:	9a08      	ldr	r2, [sp, #32]
 801e7b0:	2a00      	cmp	r2, #0
 801e7b2:	d0f5      	beq.n	801e7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e7b4:	7812      	ldrb	r2, [r2, #0]
 801e7b6:	e7f0      	b.n	801e79a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e7b8:	2d00      	cmp	r5, #0
 801e7ba:	d0ea      	beq.n	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e7bc:	782a      	ldrb	r2, [r5, #0]
 801e7be:	b142      	cbz	r2, 801e7d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e7c0:	2a25      	cmp	r2, #37	; 0x25
 801e7c2:	d001      	beq.n	801e7c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e7c4:	459a      	cmp	sl, r3
 801e7c6:	dc08      	bgt.n	801e7da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e7c8:	f1bb 0f00 	cmp.w	fp, #0
 801e7cc:	d121      	bne.n	801e812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e7ce:	2d00      	cmp	r5, #0
 801e7d0:	d0df      	beq.n	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e7d2:	782a      	ldrb	r2, [r5, #0]
 801e7d4:	f04f 0b00 	mov.w	fp, #0
 801e7d8:	e01d      	b.n	801e816 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e7da:	f1bb 0f00 	cmp.w	fp, #0
 801e7de:	d077      	beq.n	801e8d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e7e0:	f8bb 2000 	ldrh.w	r2, [fp]
 801e7e4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e7e8:	f1bb 0f00 	cmp.w	fp, #0
 801e7ec:	d002      	beq.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e7ee:	f10b 0202 	add.w	r2, fp, #2
 801e7f2:	9209      	str	r2, [sp, #36]	; 0x24
 801e7f4:	b10d      	cbz	r5, 801e7fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e7f6:	3501      	adds	r5, #1
 801e7f8:	9508      	str	r5, [sp, #32]
 801e7fa:	3301      	adds	r3, #1
 801e7fc:	930d      	str	r3, [sp, #52]	; 0x34
 801e7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e800:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e804:	f1bb 0f00 	cmp.w	fp, #0
 801e808:	d0d6      	beq.n	801e7b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e80a:	f8bb 2000 	ldrh.w	r2, [fp]
 801e80e:	2a00      	cmp	r2, #0
 801e810:	d1d6      	bne.n	801e7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e812:	f8bb 2000 	ldrh.w	r2, [fp]
 801e816:	2a00      	cmp	r2, #0
 801e818:	d0bb      	beq.n	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e81a:	459a      	cmp	sl, r3
 801e81c:	ddb9      	ble.n	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e81e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801e822:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801e826:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801e82a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801e82e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801e832:	960e      	str	r6, [sp, #56]	; 0x38
 801e834:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801e838:	960f      	str	r6, [sp, #60]	; 0x3c
 801e83a:	f1bb 0f00 	cmp.w	fp, #0
 801e83e:	d002      	beq.n	801e846 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e840:	f10b 0302 	add.w	r3, fp, #2
 801e844:	9309      	str	r3, [sp, #36]	; 0x24
 801e846:	b10d      	cbz	r5, 801e84c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e848:	1c6b      	adds	r3, r5, #1
 801e84a:	9308      	str	r3, [sp, #32]
 801e84c:	ab0f      	add	r3, sp, #60	; 0x3c
 801e84e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801e852:	a908      	add	r1, sp, #32
 801e854:	a809      	add	r0, sp, #36	; 0x24
 801e856:	9305      	str	r3, [sp, #20]
 801e858:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e85c:	9304      	str	r3, [sp, #16]
 801e85e:	ab0e      	add	r3, sp, #56	; 0x38
 801e860:	9303      	str	r3, [sp, #12]
 801e862:	ab0c      	add	r3, sp, #48	; 0x30
 801e864:	9302      	str	r3, [sp, #8]
 801e866:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e86a:	9301      	str	r3, [sp, #4]
 801e86c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e870:	9300      	str	r3, [sp, #0]
 801e872:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e876:	f7ff fea8 	bl	801e5ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	bfbf      	itttt	lt
 801e880:	6823      	ldrlt	r3, [r4, #0]
 801e882:	3404      	addlt	r4, #4
 801e884:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e888:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	bfbe      	ittt	lt
 801e890:	6823      	ldrlt	r3, [r4, #0]
 801e892:	3404      	addlt	r4, #4
 801e894:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e898:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e89c:	bfb8      	it	lt
 801e89e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e8a0:	b1d9      	cbz	r1, 801e8da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e8a2:	880b      	ldrh	r3, [r1, #0]
 801e8a4:	2b69      	cmp	r3, #105	; 0x69
 801e8a6:	d01f      	beq.n	801e8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e8a8:	d82f      	bhi.n	801e90a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e8aa:	2b58      	cmp	r3, #88	; 0x58
 801e8ac:	d01c      	beq.n	801e8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e8ae:	d818      	bhi.n	801e8e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e8b0:	2b25      	cmp	r3, #37	; 0x25
 801e8b2:	d034      	beq.n	801e91e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8b6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e8ba:	f1bb 0f00 	cmp.w	fp, #0
 801e8be:	f000 80b7 	beq.w	801ea30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e8c2:	f8bb 5000 	ldrh.w	r5, [fp]
 801e8c6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	930d      	str	r3, [sp, #52]	; 0x34
 801e8ce:	e029      	b.n	801e924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e8d0:	b10d      	cbz	r5, 801e8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e8d2:	782a      	ldrb	r2, [r5, #0]
 801e8d4:	e786      	b.n	801e7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e8d6:	462a      	mov	r2, r5
 801e8d8:	e784      	b.n	801e7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e8da:	2a00      	cmp	r2, #0
 801e8dc:	d0ea      	beq.n	801e8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e8de:	7813      	ldrb	r3, [r2, #0]
 801e8e0:	e7e0      	b.n	801e8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e8e2:	3b63      	subs	r3, #99	; 0x63
 801e8e4:	2b01      	cmp	r3, #1
 801e8e6:	d8e5      	bhi.n	801e8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e8e8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801e8ec:	b329      	cbz	r1, 801e93a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e8ee:	880b      	ldrh	r3, [r1, #0]
 801e8f0:	2b69      	cmp	r3, #105	; 0x69
 801e8f2:	d063      	beq.n	801e9bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e8f4:	d825      	bhi.n	801e942 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e8f6:	2b63      	cmp	r3, #99	; 0x63
 801e8f8:	d038      	beq.n	801e96c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e8fa:	2b64      	cmp	r3, #100	; 0x64
 801e8fc:	d05e      	beq.n	801e9bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e8fe:	2b58      	cmp	r3, #88	; 0x58
 801e900:	d07a      	beq.n	801e9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e902:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801e906:	4625      	mov	r5, r4
 801e908:	e036      	b.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e90a:	2b73      	cmp	r3, #115	; 0x73
 801e90c:	d0ec      	beq.n	801e8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e90e:	d802      	bhi.n	801e916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e910:	2b6f      	cmp	r3, #111	; 0x6f
 801e912:	d1cf      	bne.n	801e8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e914:	e7e8      	b.n	801e8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e916:	2b75      	cmp	r3, #117	; 0x75
 801e918:	d0e6      	beq.n	801e8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e91a:	2b78      	cmp	r3, #120	; 0x78
 801e91c:	e7f9      	b.n	801e912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e91e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e920:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e926:	b10b      	cbz	r3, 801e92c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e928:	3302      	adds	r3, #2
 801e92a:	9309      	str	r3, [sp, #36]	; 0x24
 801e92c:	9b08      	ldr	r3, [sp, #32]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	f43f af2f 	beq.w	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e934:	3301      	adds	r3, #1
 801e936:	9308      	str	r3, [sp, #32]
 801e938:	e72b      	b.n	801e792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e93a:	2a00      	cmp	r2, #0
 801e93c:	d0e1      	beq.n	801e902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e93e:	7813      	ldrb	r3, [r2, #0]
 801e940:	e7d6      	b.n	801e8f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e942:	2b73      	cmp	r3, #115	; 0x73
 801e944:	d036      	beq.n	801e9b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e946:	d807      	bhi.n	801e958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e948:	2b6f      	cmp	r3, #111	; 0x6f
 801e94a:	d1da      	bne.n	801e902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e94c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e94e:	1d25      	adds	r5, r4, #4
 801e950:	2308      	movs	r3, #8
 801e952:	eba8 0202 	sub.w	r2, r8, r2
 801e956:	e049      	b.n	801e9ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e958:	2b75      	cmp	r3, #117	; 0x75
 801e95a:	d042      	beq.n	801e9e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e95c:	2b78      	cmp	r3, #120	; 0x78
 801e95e:	d1d0      	bne.n	801e902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e962:	1d25      	adds	r5, r4, #4
 801e964:	2310      	movs	r3, #16
 801e966:	eba8 0202 	sub.w	r2, r8, r2
 801e96a:	e03f      	b.n	801e9ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e96c:	6823      	ldr	r3, [r4, #0]
 801e96e:	1d25      	adds	r5, r4, #4
 801e970:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801e974:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e97a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d051      	beq.n	801ea26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e982:	881a      	ldrh	r2, [r3, #0]
 801e984:	a80d      	add	r0, sp, #52	; 0x34
 801e986:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e98a:	462c      	mov	r4, r5
 801e98c:	9005      	str	r0, [sp, #20]
 801e98e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801e992:	9004      	str	r0, [sp, #16]
 801e994:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e996:	9003      	str	r0, [sp, #12]
 801e998:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801e99c:	9002      	str	r0, [sp, #8]
 801e99e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e9a0:	9001      	str	r0, [sp, #4]
 801e9a2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801e9a6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e9aa:	9000      	str	r0, [sp, #0]
 801e9ac:	a810      	add	r0, sp, #64	; 0x40
 801e9ae:	f7ff fd49 	bl	801e444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e9b2:	e7b7      	b.n	801e924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e9b4:	1d25      	adds	r5, r4, #4
 801e9b6:	6823      	ldr	r3, [r4, #0]
 801e9b8:	9310      	str	r3, [sp, #64]	; 0x40
 801e9ba:	e7dd      	b.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e9bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9be:	230a      	movs	r3, #10
 801e9c0:	4649      	mov	r1, r9
 801e9c2:	6820      	ldr	r0, [r4, #0]
 801e9c4:	eba8 0202 	sub.w	r2, r8, r2
 801e9c8:	1d25      	adds	r5, r4, #4
 801e9ca:	b292      	uxth	r2, r2
 801e9cc:	f7ff fd08 	bl	801e3e0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e9d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e9d4:	2b2d      	cmp	r3, #45	; 0x2d
 801e9d6:	d1cf      	bne.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e9d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9de:	3302      	adds	r3, #2
 801e9e0:	e7ea      	b.n	801e9b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e9e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9e4:	1d25      	adds	r5, r4, #4
 801e9e6:	230a      	movs	r3, #10
 801e9e8:	eba8 0202 	sub.w	r2, r8, r2
 801e9ec:	b292      	uxth	r2, r2
 801e9ee:	4649      	mov	r1, r9
 801e9f0:	6820      	ldr	r0, [r4, #0]
 801e9f2:	f7ff fcd7 	bl	801e3a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e9f6:	e7bf      	b.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e9f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9fa:	2310      	movs	r3, #16
 801e9fc:	4649      	mov	r1, r9
 801e9fe:	6820      	ldr	r0, [r4, #0]
 801ea00:	eba8 0202 	sub.w	r2, r8, r2
 801ea04:	1d25      	adds	r5, r4, #4
 801ea06:	b292      	uxth	r2, r2
 801ea08:	f7ff fccc 	bl	801e3a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ea0c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ea10:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d0af      	beq.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ea18:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ea1c:	2919      	cmp	r1, #25
 801ea1e:	d8f7      	bhi.n	801ea10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ea20:	3b20      	subs	r3, #32
 801ea22:	8013      	strh	r3, [r2, #0]
 801ea24:	e7f4      	b.n	801ea10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ea26:	9a08      	ldr	r2, [sp, #32]
 801ea28:	2a00      	cmp	r2, #0
 801ea2a:	d0ab      	beq.n	801e984 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ea2c:	7812      	ldrb	r2, [r2, #0]
 801ea2e:	e7a9      	b.n	801e984 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ea30:	2d00      	cmp	r5, #0
 801ea32:	f43f af48 	beq.w	801e8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ea36:	782d      	ldrb	r5, [r5, #0]
 801ea38:	e745      	b.n	801e8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ea3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ea3a:	b507      	push	{r0, r1, r2, lr}
 801ea3c:	9300      	str	r3, [sp, #0]
 801ea3e:	4613      	mov	r3, r2
 801ea40:	2200      	movs	r2, #0
 801ea42:	f7ff fe92 	bl	801e76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ea46:	b003      	add	sp, #12
 801ea48:	f85d fb04 	ldr.w	pc, [sp], #4

0801ea4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ea4c:	b40c      	push	{r2, r3}
 801ea4e:	b507      	push	{r0, r1, r2, lr}
 801ea50:	ab04      	add	r3, sp, #16
 801ea52:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea56:	9301      	str	r3, [sp, #4]
 801ea58:	f7ff ffef 	bl	801ea3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ea5c:	b003      	add	sp, #12
 801ea5e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea62:	b002      	add	sp, #8
 801ea64:	4770      	bx	lr
	...

0801ea68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ea68:	4b01      	ldr	r3, [pc, #4]	; (801ea70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ea6a:	6018      	str	r0, [r3, #0]
 801ea6c:	4770      	bx	lr
 801ea6e:	bf00      	nop
 801ea70:	20015648 	.word	0x20015648

0801ea74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ea74:	4b06      	ldr	r3, [pc, #24]	; (801ea90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ea76:	881a      	ldrh	r2, [r3, #0]
 801ea78:	4282      	cmp	r2, r0
 801ea7a:	d807      	bhi.n	801ea8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ea7c:	4b05      	ldr	r3, [pc, #20]	; (801ea94 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ea7e:	881b      	ldrh	r3, [r3, #0]
 801ea80:	4413      	add	r3, r2
 801ea82:	4298      	cmp	r0, r3
 801ea84:	bfac      	ite	ge
 801ea86:	2000      	movge	r0, #0
 801ea88:	2001      	movlt	r0, #1
 801ea8a:	4770      	bx	lr
 801ea8c:	2000      	movs	r0, #0
 801ea8e:	4770      	bx	lr
 801ea90:	20015668 	.word	0x20015668
 801ea94:	2001566c 	.word	0x2001566c

0801ea98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ea98:	b508      	push	{r3, lr}
 801ea9a:	4601      	mov	r1, r0
 801ea9c:	f7ff ffea 	bl	801ea74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eaa0:	b118      	cbz	r0, 801eaaa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eaa2:	4b02      	ldr	r3, [pc, #8]	; (801eaac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801eaaa:	bd08      	pop	{r3, pc}
 801eaac:	2001564c 	.word	0x2001564c

0801eab0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eab2:	4c24      	ldr	r4, [pc, #144]	; (801eb44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801eab4:	6823      	ldr	r3, [r4, #0]
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d042      	beq.n	801eb40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801eaba:	4a23      	ldr	r2, [pc, #140]	; (801eb48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801eabc:	4d23      	ldr	r5, [pc, #140]	; (801eb4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801eabe:	8811      	ldrh	r1, [r2, #0]
 801eac0:	f8b5 c000 	ldrh.w	ip, [r5]
 801eac4:	4822      	ldr	r0, [pc, #136]	; (801eb50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801eac6:	4461      	add	r1, ip
 801eac8:	1c4a      	adds	r2, r1, #1
 801eaca:	008f      	lsls	r7, r1, #2
 801eacc:	f022 0201 	bic.w	r2, r2, #1
 801ead0:	19de      	adds	r6, r3, r7
 801ead2:	0412      	lsls	r2, r2, #16
 801ead4:	6006      	str	r6, [r0, #0]
 801ead6:	4e1f      	ldr	r6, [pc, #124]	; (801eb54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ead8:	0c12      	lsrs	r2, r2, #16
 801eada:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801eade:	19da      	adds	r2, r3, r7
 801eae0:	6032      	str	r2, [r6, #0]
 801eae2:	220e      	movs	r2, #14
 801eae4:	fb02 f20c 	mul.w	r2, r2, ip
 801eae8:	3203      	adds	r2, #3
 801eaea:	f022 0203 	bic.w	r2, r2, #3
 801eaee:	443a      	add	r2, r7
 801eaf0:	4f19      	ldr	r7, [pc, #100]	; (801eb58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801eaf2:	4413      	add	r3, r2
 801eaf4:	603b      	str	r3, [r7, #0]
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	4f18      	ldr	r7, [pc, #96]	; (801eb5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801eafa:	469c      	mov	ip, r3
 801eafc:	803b      	strh	r3, [r7, #0]
 801eafe:	4f18      	ldr	r7, [pc, #96]	; (801eb60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801eb00:	683f      	ldr	r7, [r7, #0]
 801eb02:	1aba      	subs	r2, r7, r2
 801eb04:	4f17      	ldr	r7, [pc, #92]	; (801eb64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801eb06:	603a      	str	r2, [r7, #0]
 801eb08:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801eb0c:	4a16      	ldr	r2, [pc, #88]	; (801eb68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801eb0e:	8013      	strh	r3, [r2, #0]
 801eb10:	428b      	cmp	r3, r1
 801eb12:	d10d      	bne.n	801eb30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801eb14:	882d      	ldrh	r5, [r5, #0]
 801eb16:	2300      	movs	r3, #0
 801eb18:	6830      	ldr	r0, [r6, #0]
 801eb1a:	240e      	movs	r4, #14
 801eb1c:	429d      	cmp	r5, r3
 801eb1e:	d90f      	bls.n	801eb40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801eb20:	fb04 0203 	mla	r2, r4, r3, r0
 801eb24:	3301      	adds	r3, #1
 801eb26:	7b11      	ldrb	r1, [r2, #12]
 801eb28:	f36f 1145 	bfc	r1, #5, #1
 801eb2c:	7311      	strb	r1, [r2, #12]
 801eb2e:	e7f5      	b.n	801eb1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801eb30:	6822      	ldr	r2, [r4, #0]
 801eb32:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801eb36:	6802      	ldr	r2, [r0, #0]
 801eb38:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801eb3c:	3301      	adds	r3, #1
 801eb3e:	e7e7      	b.n	801eb10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801eb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb42:	bf00      	nop
 801eb44:	2001564c 	.word	0x2001564c
 801eb48:	20015668 	.word	0x20015668
 801eb4c:	2001566c 	.word	0x2001566c
 801eb50:	20015660 	.word	0x20015660
 801eb54:	20015650 	.word	0x20015650
 801eb58:	20015658 	.word	0x20015658
 801eb5c:	2001566a 	.word	0x2001566a
 801eb60:	20015654 	.word	0x20015654
 801eb64:	20015664 	.word	0x20015664
 801eb68:	2001565c 	.word	0x2001565c

0801eb6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801eb6c:	4b06      	ldr	r3, [pc, #24]	; (801eb88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	b943      	cbnz	r3, 801eb84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801eb72:	b139      	cbz	r1, 801eb84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801eb74:	4b05      	ldr	r3, [pc, #20]	; (801eb8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801eb76:	801a      	strh	r2, [r3, #0]
 801eb78:	4b05      	ldr	r3, [pc, #20]	; (801eb90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801eb7a:	6019      	str	r1, [r3, #0]
 801eb7c:	4b05      	ldr	r3, [pc, #20]	; (801eb94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801eb7e:	6018      	str	r0, [r3, #0]
 801eb80:	f7ff bf96 	b.w	801eab0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801eb84:	4770      	bx	lr
 801eb86:	bf00      	nop
 801eb88:	20015658 	.word	0x20015658
 801eb8c:	2001566c 	.word	0x2001566c
 801eb90:	20015654 	.word	0x20015654
 801eb94:	2001564c 	.word	0x2001564c

0801eb98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801eb98:	b470      	push	{r4, r5, r6}
 801eb9a:	4c07      	ldr	r4, [pc, #28]	; (801ebb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801eb9c:	4605      	mov	r5, r0
 801eb9e:	4610      	mov	r0, r2
 801eba0:	9a03      	ldr	r2, [sp, #12]
 801eba2:	6826      	ldr	r6, [r4, #0]
 801eba4:	b936      	cbnz	r6, 801ebb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801eba6:	6025      	str	r5, [r4, #0]
 801eba8:	4c04      	ldr	r4, [pc, #16]	; (801ebbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ebaa:	8021      	strh	r1, [r4, #0]
 801ebac:	4619      	mov	r1, r3
 801ebae:	bc70      	pop	{r4, r5, r6}
 801ebb0:	f7ff bfdc 	b.w	801eb6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ebb4:	bc70      	pop	{r4, r5, r6}
 801ebb6:	4770      	bx	lr
 801ebb8:	20015670 	.word	0x20015670
 801ebbc:	20015668 	.word	0x20015668

0801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ebc0:	4a12      	ldr	r2, [pc, #72]	; (801ec0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ebc2:	8803      	ldrh	r3, [r0, #0]
 801ebc4:	8812      	ldrh	r2, [r2, #0]
 801ebc6:	4293      	cmp	r3, r2
 801ebc8:	d207      	bcs.n	801ebda <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ebca:	4a11      	ldr	r2, [pc, #68]	; (801ec10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ebcc:	2114      	movs	r1, #20
 801ebce:	6812      	ldr	r2, [r2, #0]
 801ebd0:	fb01 2303 	mla	r3, r1, r3, r2
 801ebd4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ebd8:	4770      	bx	lr
 801ebda:	490e      	ldr	r1, [pc, #56]	; (801ec14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ebdc:	8809      	ldrh	r1, [r1, #0]
 801ebde:	4411      	add	r1, r2
 801ebe0:	428b      	cmp	r3, r1
 801ebe2:	da04      	bge.n	801ebee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ebe4:	1a9b      	subs	r3, r3, r2
 801ebe6:	4a0c      	ldr	r2, [pc, #48]	; (801ec18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ebe8:	210e      	movs	r1, #14
 801ebea:	6812      	ldr	r2, [r2, #0]
 801ebec:	e7f0      	b.n	801ebd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ebee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ebf2:	4293      	cmp	r3, r2
 801ebf4:	d108      	bne.n	801ec08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ebf6:	4b09      	ldr	r3, [pc, #36]	; (801ec1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ebf8:	781b      	ldrb	r3, [r3, #0]
 801ebfa:	b91b      	cbnz	r3, 801ec04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ebfc:	4b08      	ldr	r3, [pc, #32]	; (801ec20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ebfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ec02:	4770      	bx	lr
 801ec04:	4b07      	ldr	r3, [pc, #28]	; (801ec24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ec06:	e7fa      	b.n	801ebfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ec08:	2000      	movs	r0, #0
 801ec0a:	4770      	bx	lr
 801ec0c:	20015668 	.word	0x20015668
 801ec10:	20015670 	.word	0x20015670
 801ec14:	2001566c 	.word	0x2001566c
 801ec18:	20015650 	.word	0x20015650
 801ec1c:	200155e0 	.word	0x200155e0
 801ec20:	200155e2 	.word	0x200155e2
 801ec24:	200155e4 	.word	0x200155e4

0801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ec28:	4a12      	ldr	r2, [pc, #72]	; (801ec74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ec2a:	8803      	ldrh	r3, [r0, #0]
 801ec2c:	8812      	ldrh	r2, [r2, #0]
 801ec2e:	4293      	cmp	r3, r2
 801ec30:	d207      	bcs.n	801ec42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ec32:	4a11      	ldr	r2, [pc, #68]	; (801ec78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ec34:	2114      	movs	r1, #20
 801ec36:	6812      	ldr	r2, [r2, #0]
 801ec38:	fb01 2303 	mla	r3, r1, r3, r2
 801ec3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ec40:	4770      	bx	lr
 801ec42:	490e      	ldr	r1, [pc, #56]	; (801ec7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ec44:	8809      	ldrh	r1, [r1, #0]
 801ec46:	4411      	add	r1, r2
 801ec48:	428b      	cmp	r3, r1
 801ec4a:	da04      	bge.n	801ec56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ec4c:	1a9b      	subs	r3, r3, r2
 801ec4e:	4a0c      	ldr	r2, [pc, #48]	; (801ec80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ec50:	210e      	movs	r1, #14
 801ec52:	6812      	ldr	r2, [r2, #0]
 801ec54:	e7f0      	b.n	801ec38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ec56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ec5a:	4293      	cmp	r3, r2
 801ec5c:	d108      	bne.n	801ec70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ec5e:	4b09      	ldr	r3, [pc, #36]	; (801ec84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ec60:	781b      	ldrb	r3, [r3, #0]
 801ec62:	b91b      	cbnz	r3, 801ec6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ec64:	4b08      	ldr	r3, [pc, #32]	; (801ec88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ec66:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ec6a:	4770      	bx	lr
 801ec6c:	4b07      	ldr	r3, [pc, #28]	; (801ec8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ec6e:	e7fa      	b.n	801ec66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ec70:	2000      	movs	r0, #0
 801ec72:	4770      	bx	lr
 801ec74:	20015668 	.word	0x20015668
 801ec78:	20015670 	.word	0x20015670
 801ec7c:	2001566c 	.word	0x2001566c
 801ec80:	20015650 	.word	0x20015650
 801ec84:	200155e0 	.word	0x200155e0
 801ec88:	200155e4 	.word	0x200155e4
 801ec8c:	200155e2 	.word	0x200155e2

0801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ec90:	4a1f      	ldr	r2, [pc, #124]	; (801ed10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801ec92:	b510      	push	{r4, lr}
 801ec94:	880b      	ldrh	r3, [r1, #0]
 801ec96:	8812      	ldrh	r2, [r2, #0]
 801ec98:	4293      	cmp	r3, r2
 801ec9a:	d213      	bcs.n	801ecc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ec9c:	4a1d      	ldr	r2, [pc, #116]	; (801ed14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801ec9e:	2114      	movs	r1, #20
 801eca0:	6812      	ldr	r2, [r2, #0]
 801eca2:	fb01 2303 	mla	r3, r1, r3, r2
 801eca6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ecaa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ecae:	8a1a      	ldrh	r2, [r3, #16]
 801ecb0:	8a5b      	ldrh	r3, [r3, #18]
 801ecb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ecb6:	8004      	strh	r4, [r0, #0]
 801ecb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ecbc:	8041      	strh	r1, [r0, #2]
 801ecbe:	8082      	strh	r2, [r0, #4]
 801ecc0:	80c3      	strh	r3, [r0, #6]
 801ecc2:	e00e      	b.n	801ece2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ecc4:	4914      	ldr	r1, [pc, #80]	; (801ed18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801ecc6:	8809      	ldrh	r1, [r1, #0]
 801ecc8:	4411      	add	r1, r2
 801ecca:	428b      	cmp	r3, r1
 801eccc:	da0a      	bge.n	801ece4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801ecce:	1a9b      	subs	r3, r3, r2
 801ecd0:	4a12      	ldr	r2, [pc, #72]	; (801ed1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ecd2:	210e      	movs	r1, #14
 801ecd4:	6812      	ldr	r2, [r2, #0]
 801ecd6:	fb01 2303 	mla	r3, r1, r3, r2
 801ecda:	681a      	ldr	r2, [r3, #0]
 801ecdc:	6002      	str	r2, [r0, #0]
 801ecde:	685a      	ldr	r2, [r3, #4]
 801ece0:	6042      	str	r2, [r0, #4]
 801ece2:	bd10      	pop	{r4, pc}
 801ece4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ece8:	4293      	cmp	r3, r2
 801ecea:	d10b      	bne.n	801ed04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801ecec:	4b0c      	ldr	r3, [pc, #48]	; (801ed20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ecee:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ecf2:	4b0c      	ldr	r3, [pc, #48]	; (801ed24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ecf4:	8081      	strh	r1, [r0, #4]
 801ecf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ecfa:	2300      	movs	r3, #0
 801ecfc:	80c2      	strh	r2, [r0, #6]
 801ecfe:	8003      	strh	r3, [r0, #0]
 801ed00:	8043      	strh	r3, [r0, #2]
 801ed02:	e7ee      	b.n	801ece2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ed04:	2300      	movs	r3, #0
 801ed06:	8003      	strh	r3, [r0, #0]
 801ed08:	8043      	strh	r3, [r0, #2]
 801ed0a:	8083      	strh	r3, [r0, #4]
 801ed0c:	e7d8      	b.n	801ecc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ed0e:	bf00      	nop
 801ed10:	20015668 	.word	0x20015668
 801ed14:	20015670 	.word	0x20015670
 801ed18:	2001566c 	.word	0x2001566c
 801ed1c:	20015650 	.word	0x20015650
 801ed20:	200155dc 	.word	0x200155dc
 801ed24:	200155de 	.word	0x200155de

0801ed28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ed28:	4a17      	ldr	r2, [pc, #92]	; (801ed88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ed2a:	8803      	ldrh	r3, [r0, #0]
 801ed2c:	8812      	ldrh	r2, [r2, #0]
 801ed2e:	4293      	cmp	r3, r2
 801ed30:	d213      	bcs.n	801ed5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801ed32:	4a16      	ldr	r2, [pc, #88]	; (801ed8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ed34:	2114      	movs	r1, #20
 801ed36:	6812      	ldr	r2, [r2, #0]
 801ed38:	fb01 2303 	mla	r3, r1, r3, r2
 801ed3c:	8a1a      	ldrh	r2, [r3, #16]
 801ed3e:	8919      	ldrh	r1, [r3, #8]
 801ed40:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ed44:	428a      	cmp	r2, r1
 801ed46:	db1d      	blt.n	801ed84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ed48:	8a58      	ldrh	r0, [r3, #18]
 801ed4a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ed4e:	895b      	ldrh	r3, [r3, #10]
 801ed50:	4298      	cmp	r0, r3
 801ed52:	bfac      	ite	ge
 801ed54:	2000      	movge	r0, #0
 801ed56:	2001      	movlt	r0, #1
 801ed58:	4770      	bx	lr
 801ed5a:	490d      	ldr	r1, [pc, #52]	; (801ed90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ed5c:	8809      	ldrh	r1, [r1, #0]
 801ed5e:	4411      	add	r1, r2
 801ed60:	428b      	cmp	r3, r1
 801ed62:	da0d      	bge.n	801ed80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ed64:	1a9b      	subs	r3, r3, r2
 801ed66:	4a0b      	ldr	r2, [pc, #44]	; (801ed94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ed68:	210e      	movs	r1, #14
 801ed6a:	6812      	ldr	r2, [r2, #0]
 801ed6c:	fb01 2303 	mla	r3, r1, r3, r2
 801ed70:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ed74:	891a      	ldrh	r2, [r3, #8]
 801ed76:	4291      	cmp	r1, r2
 801ed78:	db04      	blt.n	801ed84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ed7a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ed7e:	e7e6      	b.n	801ed4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ed80:	2000      	movs	r0, #0
 801ed82:	4770      	bx	lr
 801ed84:	2001      	movs	r0, #1
 801ed86:	4770      	bx	lr
 801ed88:	20015668 	.word	0x20015668
 801ed8c:	20015670 	.word	0x20015670
 801ed90:	2001566c 	.word	0x2001566c
 801ed94:	20015650 	.word	0x20015650

0801ed98 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ed98:	4a12      	ldr	r2, [pc, #72]	; (801ede4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ed9a:	8803      	ldrh	r3, [r0, #0]
 801ed9c:	8811      	ldrh	r1, [r2, #0]
 801ed9e:	428b      	cmp	r3, r1
 801eda0:	d20b      	bcs.n	801edba <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801eda2:	4a11      	ldr	r2, [pc, #68]	; (801ede8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801eda4:	6812      	ldr	r2, [r2, #0]
 801eda6:	b112      	cbz	r2, 801edae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801eda8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801edac:	b9c0      	cbnz	r0, 801ede0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801edae:	4a0f      	ldr	r2, [pc, #60]	; (801edec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801edb0:	6811      	ldr	r1, [r2, #0]
 801edb2:	2214      	movs	r2, #20
 801edb4:	4353      	muls	r3, r2
 801edb6:	58c8      	ldr	r0, [r1, r3]
 801edb8:	4770      	bx	lr
 801edba:	4a0d      	ldr	r2, [pc, #52]	; (801edf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801edbc:	8812      	ldrh	r2, [r2, #0]
 801edbe:	440a      	add	r2, r1
 801edc0:	4293      	cmp	r3, r2
 801edc2:	da04      	bge.n	801edce <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801edc4:	4a08      	ldr	r2, [pc, #32]	; (801ede8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801edc6:	6812      	ldr	r2, [r2, #0]
 801edc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801edcc:	4770      	bx	lr
 801edce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801edd2:	4293      	cmp	r3, r2
 801edd4:	d103      	bne.n	801edde <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801edd6:	4b07      	ldr	r3, [pc, #28]	; (801edf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801eddc:	4770      	bx	lr
 801edde:	2000      	movs	r0, #0
 801ede0:	4770      	bx	lr
 801ede2:	bf00      	nop
 801ede4:	20015668 	.word	0x20015668
 801ede8:	2001564c 	.word	0x2001564c
 801edec:	20015670 	.word	0x20015670
 801edf0:	2001566c 	.word	0x2001566c
 801edf4:	200155e8 	.word	0x200155e8

0801edf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801edf8:	4b24      	ldr	r3, [pc, #144]	; (801ee8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801edfa:	8802      	ldrh	r2, [r0, #0]
 801edfc:	8818      	ldrh	r0, [r3, #0]
 801edfe:	4282      	cmp	r2, r0
 801ee00:	d221      	bcs.n	801ee46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ee02:	4b23      	ldr	r3, [pc, #140]	; (801ee90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ee04:	6819      	ldr	r1, [r3, #0]
 801ee06:	2314      	movs	r3, #20
 801ee08:	fb03 1302 	mla	r3, r3, r2, r1
 801ee0c:	6858      	ldr	r0, [r3, #4]
 801ee0e:	2800      	cmp	r0, #0
 801ee10:	d03a      	beq.n	801ee88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ee12:	4920      	ldr	r1, [pc, #128]	; (801ee94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ee14:	6809      	ldr	r1, [r1, #0]
 801ee16:	2900      	cmp	r1, #0
 801ee18:	d036      	beq.n	801ee88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ee1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ee1e:	2900      	cmp	r1, #0
 801ee20:	d032      	beq.n	801ee88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ee22:	891a      	ldrh	r2, [r3, #8]
 801ee24:	8958      	ldrh	r0, [r3, #10]
 801ee26:	4350      	muls	r0, r2
 801ee28:	7c5a      	ldrb	r2, [r3, #17]
 801ee2a:	7cdb      	ldrb	r3, [r3, #19]
 801ee2c:	0952      	lsrs	r2, r2, #5
 801ee2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ee32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ee36:	2b0b      	cmp	r3, #11
 801ee38:	bf18      	it	ne
 801ee3a:	0040      	lslne	r0, r0, #1
 801ee3c:	3003      	adds	r0, #3
 801ee3e:	f020 0003 	bic.w	r0, r0, #3
 801ee42:	4408      	add	r0, r1
 801ee44:	4770      	bx	lr
 801ee46:	4b14      	ldr	r3, [pc, #80]	; (801ee98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ee48:	881b      	ldrh	r3, [r3, #0]
 801ee4a:	4403      	add	r3, r0
 801ee4c:	429a      	cmp	r2, r3
 801ee4e:	da1a      	bge.n	801ee86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ee50:	4b12      	ldr	r3, [pc, #72]	; (801ee9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ee52:	1a10      	subs	r0, r2, r0
 801ee54:	210e      	movs	r1, #14
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	fb01 3000 	mla	r0, r1, r0, r3
 801ee5c:	7b03      	ldrb	r3, [r0, #12]
 801ee5e:	f003 031f 	and.w	r3, r3, #31
 801ee62:	2b0b      	cmp	r3, #11
 801ee64:	d10b      	bne.n	801ee7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ee66:	8903      	ldrh	r3, [r0, #8]
 801ee68:	8940      	ldrh	r0, [r0, #10]
 801ee6a:	4358      	muls	r0, r3
 801ee6c:	4b09      	ldr	r3, [pc, #36]	; (801ee94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ee6e:	3003      	adds	r0, #3
 801ee70:	6819      	ldr	r1, [r3, #0]
 801ee72:	f020 0303 	bic.w	r3, r0, #3
 801ee76:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ee7a:	4418      	add	r0, r3
 801ee7c:	4770      	bx	lr
 801ee7e:	2b0d      	cmp	r3, #13
 801ee80:	d101      	bne.n	801ee86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ee82:	300d      	adds	r0, #13
 801ee84:	4770      	bx	lr
 801ee86:	2000      	movs	r0, #0
 801ee88:	4770      	bx	lr
 801ee8a:	bf00      	nop
 801ee8c:	20015668 	.word	0x20015668
 801ee90:	20015670 	.word	0x20015670
 801ee94:	2001564c 	.word	0x2001564c
 801ee98:	2001566c 	.word	0x2001566c
 801ee9c:	20015650 	.word	0x20015650

0801eea0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801eea0:	4a17      	ldr	r2, [pc, #92]	; (801ef00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801eea2:	b510      	push	{r4, lr}
 801eea4:	8803      	ldrh	r3, [r0, #0]
 801eea6:	8812      	ldrh	r2, [r2, #0]
 801eea8:	4293      	cmp	r3, r2
 801eeaa:	d20c      	bcs.n	801eec6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801eeac:	4a15      	ldr	r2, [pc, #84]	; (801ef04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801eeae:	2114      	movs	r1, #20
 801eeb0:	6812      	ldr	r2, [r2, #0]
 801eeb2:	fb01 2303 	mla	r3, r1, r3, r2
 801eeb6:	7c58      	ldrb	r0, [r3, #17]
 801eeb8:	0942      	lsrs	r2, r0, #5
 801eeba:	7cd8      	ldrb	r0, [r3, #19]
 801eebc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801eec0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801eec4:	bd10      	pop	{r4, pc}
 801eec6:	4910      	ldr	r1, [pc, #64]	; (801ef08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801eec8:	8809      	ldrh	r1, [r1, #0]
 801eeca:	4411      	add	r1, r2
 801eecc:	428b      	cmp	r3, r1
 801eece:	da09      	bge.n	801eee4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801eed0:	1a9b      	subs	r3, r3, r2
 801eed2:	4a0e      	ldr	r2, [pc, #56]	; (801ef0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801eed4:	210e      	movs	r1, #14
 801eed6:	6812      	ldr	r2, [r2, #0]
 801eed8:	fb01 2303 	mla	r3, r1, r3, r2
 801eedc:	7b18      	ldrb	r0, [r3, #12]
 801eede:	f000 001f 	and.w	r0, r0, #31
 801eee2:	e7ef      	b.n	801eec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801eee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eee8:	4293      	cmp	r3, r2
 801eeea:	d106      	bne.n	801eefa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801eeec:	f7f9 fd28 	bl	8018940 <_ZN8touchgfx3HAL3lcdEv>
 801eef0:	6803      	ldr	r3, [r0, #0]
 801eef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eef8:	4718      	bx	r3
 801eefa:	2000      	movs	r0, #0
 801eefc:	e7e2      	b.n	801eec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801eefe:	bf00      	nop
 801ef00:	20015668 	.word	0x20015668
 801ef04:	20015670 	.word	0x20015670
 801ef08:	2001566c 	.word	0x2001566c
 801ef0c:	20015650 	.word	0x20015650

0801ef10 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ef10:	2010      	movs	r0, #16
 801ef12:	4770      	bx	lr

0801ef14 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ef14:	2000      	movs	r0, #0
 801ef16:	4770      	bx	lr

0801ef18 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801ef18:	4b02      	ldr	r3, [pc, #8]	; (801ef24 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801ef1a:	8818      	ldrh	r0, [r3, #0]
 801ef1c:	0040      	lsls	r0, r0, #1
 801ef1e:	b280      	uxth	r0, r0
 801ef20:	4770      	bx	lr
 801ef22:	bf00      	nop
 801ef24:	200155e2 	.word	0x200155e2

0801ef28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ef28:	2bff      	cmp	r3, #255	; 0xff
 801ef2a:	d050      	beq.n	801efce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ef2c:	2a0b      	cmp	r2, #11
 801ef2e:	d04a      	beq.n	801efc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef30:	d80e      	bhi.n	801ef50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ef32:	2a03      	cmp	r2, #3
 801ef34:	d03f      	beq.n	801efb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ef36:	d804      	bhi.n	801ef42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ef38:	2a01      	cmp	r2, #1
 801ef3a:	d03e      	beq.n	801efba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ef3c:	d93f      	bls.n	801efbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ef3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ef40:	4770      	bx	lr
 801ef42:	2a09      	cmp	r2, #9
 801ef44:	d03f      	beq.n	801efc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef46:	d83c      	bhi.n	801efc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef48:	2a08      	cmp	r2, #8
 801ef4a:	d03a      	beq.n	801efc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef4c:	2000      	movs	r0, #0
 801ef4e:	4770      	bx	lr
 801ef50:	2a2f      	cmp	r2, #47	; 0x2f
 801ef52:	d024      	beq.n	801ef9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ef54:	d80d      	bhi.n	801ef72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ef56:	2a2d      	cmp	r2, #45	; 0x2d
 801ef58:	d014      	beq.n	801ef84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ef5a:	d826      	bhi.n	801efaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ef5c:	2a2c      	cmp	r2, #44	; 0x2c
 801ef5e:	d1f5      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef60:	684b      	ldr	r3, [r1, #4]
 801ef62:	781b      	ldrb	r3, [r3, #0]
 801ef64:	2b01      	cmp	r3, #1
 801ef66:	d018      	beq.n	801ef9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ef68:	d323      	bcc.n	801efb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ef6a:	2b02      	cmp	r3, #2
 801ef6c:	d1ee      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef6e:	6880      	ldr	r0, [r0, #8]
 801ef70:	4770      	bx	lr
 801ef72:	2a31      	cmp	r2, #49	; 0x31
 801ef74:	d004      	beq.n	801ef80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ef76:	d328      	bcc.n	801efca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ef78:	2a32      	cmp	r2, #50	; 0x32
 801ef7a:	d026      	beq.n	801efca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ef7c:	2a33      	cmp	r2, #51	; 0x33
 801ef7e:	d1e5      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef80:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801ef82:	4770      	bx	lr
 801ef84:	684b      	ldr	r3, [r1, #4]
 801ef86:	781b      	ldrb	r3, [r3, #0]
 801ef88:	2b01      	cmp	r3, #1
 801ef8a:	d004      	beq.n	801ef96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ef8c:	d30b      	bcc.n	801efa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ef8e:	2b02      	cmp	r3, #2
 801ef90:	d1dc      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ef92:	6900      	ldr	r0, [r0, #16]
 801ef94:	4770      	bx	lr
 801ef96:	6a00      	ldr	r0, [r0, #32]
 801ef98:	4770      	bx	lr
 801ef9a:	6980      	ldr	r0, [r0, #24]
 801ef9c:	4770      	bx	lr
 801ef9e:	684b      	ldr	r3, [r1, #4]
 801efa0:	781b      	ldrb	r3, [r3, #0]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d1d2      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efa6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801efa8:	4770      	bx	lr
 801efaa:	684b      	ldr	r3, [r1, #4]
 801efac:	781b      	ldrb	r3, [r3, #0]
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d1cc      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efb2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801efb4:	4770      	bx	lr
 801efb6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801efb8:	4770      	bx	lr
 801efba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801efbc:	4770      	bx	lr
 801efbe:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801efc0:	4770      	bx	lr
 801efc2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801efc4:	4770      	bx	lr
 801efc6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801efc8:	4770      	bx	lr
 801efca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801efcc:	4770      	bx	lr
 801efce:	2a0b      	cmp	r2, #11
 801efd0:	d049      	beq.n	801f066 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801efd2:	d80e      	bhi.n	801eff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801efd4:	2a03      	cmp	r2, #3
 801efd6:	d040      	beq.n	801f05a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801efd8:	d804      	bhi.n	801efe4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801efda:	2a01      	cmp	r2, #1
 801efdc:	d03f      	beq.n	801f05e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801efde:	d940      	bls.n	801f062 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801efe0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801efe2:	4770      	bx	lr
 801efe4:	2a09      	cmp	r2, #9
 801efe6:	d03e      	beq.n	801f066 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801efe8:	d801      	bhi.n	801efee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801efea:	2a08      	cmp	r2, #8
 801efec:	d1ae      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801eff0:	4770      	bx	lr
 801eff2:	2a2f      	cmp	r2, #47	; 0x2f
 801eff4:	d024      	beq.n	801f040 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801eff6:	d80d      	bhi.n	801f014 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801eff8:	2a2d      	cmp	r2, #45	; 0x2d
 801effa:	d014      	beq.n	801f026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801effc:	d826      	bhi.n	801f04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801effe:	2a2c      	cmp	r2, #44	; 0x2c
 801f000:	d1a4      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f002:	684b      	ldr	r3, [r1, #4]
 801f004:	781b      	ldrb	r3, [r3, #0]
 801f006:	2b01      	cmp	r3, #1
 801f008:	d018      	beq.n	801f03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f00a:	d324      	bcc.n	801f056 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f00c:	2b02      	cmp	r3, #2
 801f00e:	d19d      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f010:	68c0      	ldr	r0, [r0, #12]
 801f012:	4770      	bx	lr
 801f014:	2a31      	cmp	r2, #49	; 0x31
 801f016:	d004      	beq.n	801f022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f018:	d327      	bcc.n	801f06a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f01a:	2a32      	cmp	r2, #50	; 0x32
 801f01c:	d025      	beq.n	801f06a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f01e:	2a33      	cmp	r2, #51	; 0x33
 801f020:	d194      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f022:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f024:	4770      	bx	lr
 801f026:	684b      	ldr	r3, [r1, #4]
 801f028:	781b      	ldrb	r3, [r3, #0]
 801f02a:	2b01      	cmp	r3, #1
 801f02c:	d004      	beq.n	801f038 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f02e:	d30b      	bcc.n	801f048 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f030:	2b02      	cmp	r3, #2
 801f032:	d18b      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f034:	6940      	ldr	r0, [r0, #20]
 801f036:	4770      	bx	lr
 801f038:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f03a:	4770      	bx	lr
 801f03c:	69c0      	ldr	r0, [r0, #28]
 801f03e:	4770      	bx	lr
 801f040:	684b      	ldr	r3, [r1, #4]
 801f042:	781b      	ldrb	r3, [r3, #0]
 801f044:	2b00      	cmp	r3, #0
 801f046:	d181      	bne.n	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f048:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f04a:	4770      	bx	lr
 801f04c:	684b      	ldr	r3, [r1, #4]
 801f04e:	781b      	ldrb	r3, [r3, #0]
 801f050:	2b00      	cmp	r3, #0
 801f052:	f47f af7b 	bne.w	801ef4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f056:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f058:	4770      	bx	lr
 801f05a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f05c:	4770      	bx	lr
 801f05e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f060:	4770      	bx	lr
 801f062:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f064:	4770      	bx	lr
 801f066:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f068:	4770      	bx	lr
 801f06a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f06c:	4770      	bx	lr

0801f06e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f06e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f072:	b087      	sub	sp, #28
 801f074:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f076:	9205      	str	r2, [sp, #20]
 801f078:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f07c:	9101      	str	r1, [sp, #4]
 801f07e:	9202      	str	r2, [sp, #8]
 801f080:	6841      	ldr	r1, [r0, #4]
 801f082:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f086:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f08a:	fb01 2404 	mla	r4, r1, r4, r2
 801f08e:	6802      	ldr	r2, [r0, #0]
 801f090:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f094:	f8de 2000 	ldr.w	r2, [lr]
 801f098:	9203      	str	r2, [sp, #12]
 801f09a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f09e:	3204      	adds	r2, #4
 801f0a0:	9204      	str	r2, [sp, #16]
 801f0a2:	9a02      	ldr	r2, [sp, #8]
 801f0a4:	43d6      	mvns	r6, r2
 801f0a6:	b2f6      	uxtb	r6, r6
 801f0a8:	9a01      	ldr	r2, [sp, #4]
 801f0aa:	2a00      	cmp	r2, #0
 801f0ac:	dc03      	bgt.n	801f0b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f0ae:	9a05      	ldr	r2, [sp, #20]
 801f0b0:	2a00      	cmp	r2, #0
 801f0b2:	f340 8129 	ble.w	801f308 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f0b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f0b8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f0bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f0c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0c2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f0c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	dd0e      	ble.n	801f0ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0ce:	1408      	asrs	r0, r1, #16
 801f0d0:	d405      	bmi.n	801f0de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0d2:	4560      	cmp	r0, ip
 801f0d4:	da03      	bge.n	801f0de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0d6:	1410      	asrs	r0, r2, #16
 801f0d8:	d401      	bmi.n	801f0de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f0da:	42b8      	cmp	r0, r7
 801f0dc:	db07      	blt.n	801f0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f0de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f0e0:	3b01      	subs	r3, #1
 801f0e2:	3402      	adds	r4, #2
 801f0e4:	4401      	add	r1, r0
 801f0e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f0e8:	4402      	add	r2, r0
 801f0ea:	e7ee      	b.n	801f0ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f0ec:	d071      	beq.n	801f1d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f0ee:	1e58      	subs	r0, r3, #1
 801f0f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f0f2:	fb05 1500 	mla	r5, r5, r0, r1
 801f0f6:	142d      	asrs	r5, r5, #16
 801f0f8:	d45f      	bmi.n	801f1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0fa:	4565      	cmp	r5, ip
 801f0fc:	da5d      	bge.n	801f1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f0fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f100:	fb05 2000 	mla	r0, r5, r0, r2
 801f104:	1400      	asrs	r0, r0, #16
 801f106:	d458      	bmi.n	801f1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f108:	42b8      	cmp	r0, r7
 801f10a:	da56      	bge.n	801f1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f10c:	4699      	mov	r9, r3
 801f10e:	46a2      	mov	sl, r4
 801f110:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f114:	f1b9 0f00 	cmp.w	r9, #0
 801f118:	dd57      	ble.n	801f1ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f11a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f11e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f122:	9803      	ldr	r0, [sp, #12]
 801f124:	140d      	asrs	r5, r1, #16
 801f126:	f109 39ff 	add.w	r9, r9, #4294967295
 801f12a:	fb07 000c 	mla	r0, r7, ip, r0
 801f12e:	5d40      	ldrb	r0, [r0, r5]
 801f130:	9d04      	ldr	r5, [sp, #16]
 801f132:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f136:	f8ba 5000 	ldrh.w	r5, [sl]
 801f13a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f13e:	122f      	asrs	r7, r5, #8
 801f140:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f144:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f148:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f14c:	00ed      	lsls	r5, r5, #3
 801f14e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f152:	fb17 f706 	smulbb	r7, r7, r6
 801f156:	b2ed      	uxtb	r5, r5
 801f158:	fb18 f806 	smulbb	r8, r8, r6
 801f15c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f160:	10c7      	asrs	r7, r0, #3
 801f162:	fb15 f506 	smulbb	r5, r5, r6
 801f166:	00c0      	lsls	r0, r0, #3
 801f168:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f16c:	fa1f fc8c 	uxth.w	ip, ip
 801f170:	b2c0      	uxtb	r0, r0
 801f172:	fb07 870b 	mla	r7, r7, fp, r8
 801f176:	fb00 500b 	mla	r0, r0, fp, r5
 801f17a:	f10c 0501 	add.w	r5, ip, #1
 801f17e:	b2bf      	uxth	r7, r7
 801f180:	b280      	uxth	r0, r0
 801f182:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f186:	f107 0801 	add.w	r8, r7, #1
 801f18a:	1c45      	adds	r5, r0, #1
 801f18c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f190:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f194:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f198:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f19a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f19e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f1a2:	4401      	add	r1, r0
 801f1a4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f1a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f1aa:	ea45 0c0c 	orr.w	ip, r5, ip
 801f1ae:	4402      	add	r2, r0
 801f1b0:	ea4c 0c08 	orr.w	ip, ip, r8
 801f1b4:	f82a cb02 	strh.w	ip, [sl], #2
 801f1b8:	e7ac      	b.n	801f114 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f1ba:	f04f 0800 	mov.w	r8, #0
 801f1be:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f1c2:	eb03 0008 	add.w	r0, r3, r8
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	dc41      	bgt.n	801f24e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f1ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1d2:	9b01      	ldr	r3, [sp, #4]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	f340 8097 	ble.w	801f308 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f1de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1e8:	eef0 6a62 	vmov.f32	s13, s5
 801f1ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1f8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f1fc:	eef0 6a43 	vmov.f32	s13, s6
 801f200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f204:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f208:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f20c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f210:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f214:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f218:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f21c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f220:	ee12 2a90 	vmov	r2, s5
 801f224:	eef0 2a47 	vmov.f32	s5, s14
 801f228:	fb92 f3f3 	sdiv	r3, r2, r3
 801f22c:	ee13 2a10 	vmov	r2, s6
 801f230:	9313      	str	r3, [sp, #76]	; 0x4c
 801f232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f234:	eeb0 3a67 	vmov.f32	s6, s15
 801f238:	fb92 f3f3 	sdiv	r3, r2, r3
 801f23c:	9314      	str	r3, [sp, #80]	; 0x50
 801f23e:	9b01      	ldr	r3, [sp, #4]
 801f240:	9a05      	ldr	r2, [sp, #20]
 801f242:	3b01      	subs	r3, #1
 801f244:	9301      	str	r3, [sp, #4]
 801f246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f248:	bf08      	it	eq
 801f24a:	4613      	moveq	r3, r2
 801f24c:	e72c      	b.n	801f0a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f24e:	140f      	asrs	r7, r1, #16
 801f250:	d453      	bmi.n	801f2fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f252:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f256:	42bd      	cmp	r5, r7
 801f258:	dd4f      	ble.n	801f2fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f25a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f25e:	d44c      	bmi.n	801f2fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f260:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f264:	4560      	cmp	r0, ip
 801f266:	dd48      	ble.n	801f2fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f268:	9803      	ldr	r0, [sp, #12]
 801f26a:	b22d      	sxth	r5, r5
 801f26c:	fb0c 0505 	mla	r5, ip, r5, r0
 801f270:	5de8      	ldrb	r0, [r5, r7]
 801f272:	9d04      	ldr	r5, [sp, #16]
 801f274:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f278:	f06f 0501 	mvn.w	r5, #1
 801f27c:	fb05 fb08 	mul.w	fp, r5, r8
 801f280:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f284:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f288:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f28c:	122f      	asrs	r7, r5, #8
 801f28e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f292:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f296:	00ed      	lsls	r5, r5, #3
 801f298:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f29c:	fb17 f706 	smulbb	r7, r7, r6
 801f2a0:	b2ed      	uxtb	r5, r5
 801f2a2:	fb19 f906 	smulbb	r9, r9, r6
 801f2a6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f2aa:	10c7      	asrs	r7, r0, #3
 801f2ac:	fb15 f506 	smulbb	r5, r5, r6
 801f2b0:	00c0      	lsls	r0, r0, #3
 801f2b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f2b6:	fa1f fc8c 	uxth.w	ip, ip
 801f2ba:	b2c0      	uxtb	r0, r0
 801f2bc:	fb07 970a 	mla	r7, r7, sl, r9
 801f2c0:	fb00 500a 	mla	r0, r0, sl, r5
 801f2c4:	f10c 0501 	add.w	r5, ip, #1
 801f2c8:	b2bf      	uxth	r7, r7
 801f2ca:	b280      	uxth	r0, r0
 801f2cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f2d0:	f107 0901 	add.w	r9, r7, #1
 801f2d4:	1c45      	adds	r5, r0, #1
 801f2d6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f2da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f2de:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f2e2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f2e6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f2ea:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f2ee:	ea45 0c0c 	orr.w	ip, r5, ip
 801f2f2:	ea4c 0c09 	orr.w	ip, ip, r9
 801f2f6:	f824 c00b 	strh.w	ip, [r4, fp]
 801f2fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f2fc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f300:	4401      	add	r1, r0
 801f302:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f304:	4402      	add	r2, r0
 801f306:	e75c      	b.n	801f1c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f308:	b007      	add	sp, #28
 801f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f30e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f30e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f312:	b085      	sub	sp, #20
 801f314:	4693      	mov	fp, r2
 801f316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f31a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f31c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f31e:	6870      	ldr	r0, [r6, #4]
 801f320:	9100      	str	r1, [sp, #0]
 801f322:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f326:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f32a:	fb00 2404 	mla	r4, r0, r4, r2
 801f32e:	6832      	ldr	r2, [r6, #0]
 801f330:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f334:	682a      	ldr	r2, [r5, #0]
 801f336:	9201      	str	r2, [sp, #4]
 801f338:	686a      	ldr	r2, [r5, #4]
 801f33a:	3204      	adds	r2, #4
 801f33c:	9202      	str	r2, [sp, #8]
 801f33e:	9a00      	ldr	r2, [sp, #0]
 801f340:	2a00      	cmp	r2, #0
 801f342:	dc03      	bgt.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f344:	f1bb 0f00 	cmp.w	fp, #0
 801f348:	f340 80a0 	ble.w	801f48c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f34c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f34e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f352:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f356:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f358:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f35c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f360:	2b00      	cmp	r3, #0
 801f362:	dd0c      	ble.n	801f37e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f364:	1406      	asrs	r6, r0, #16
 801f366:	d405      	bmi.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f368:	454e      	cmp	r6, r9
 801f36a:	da03      	bge.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f36c:	1416      	asrs	r6, r2, #16
 801f36e:	d401      	bmi.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f370:	4546      	cmp	r6, r8
 801f372:	db05      	blt.n	801f380 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f374:	4470      	add	r0, lr
 801f376:	4462      	add	r2, ip
 801f378:	3b01      	subs	r3, #1
 801f37a:	3402      	adds	r4, #2
 801f37c:	e7f0      	b.n	801f360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f37e:	d00f      	beq.n	801f3a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f380:	1e5e      	subs	r6, r3, #1
 801f382:	fb0e 0706 	mla	r7, lr, r6, r0
 801f386:	143f      	asrs	r7, r7, #16
 801f388:	d541      	bpl.n	801f40e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f38a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f38e:	4698      	mov	r8, r3
 801f390:	9603      	str	r6, [sp, #12]
 801f392:	f1b8 0f00 	cmp.w	r8, #0
 801f396:	dc59      	bgt.n	801f44c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f39c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f3a0:	9b00      	ldr	r3, [sp, #0]
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	dd72      	ble.n	801f48c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f3a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3b0:	eeb0 6a62 	vmov.f32	s12, s5
 801f3b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3c0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f3c4:	eeb0 6a43 	vmov.f32	s12, s6
 801f3c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3cc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f3d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3e8:	ee12 2a90 	vmov	r2, s5
 801f3ec:	eef0 2a47 	vmov.f32	s5, s14
 801f3f0:	fb92 fef3 	sdiv	lr, r2, r3
 801f3f4:	ee13 2a10 	vmov	r2, s6
 801f3f8:	eeb0 3a67 	vmov.f32	s6, s15
 801f3fc:	fb92 fcf3 	sdiv	ip, r2, r3
 801f400:	9b00      	ldr	r3, [sp, #0]
 801f402:	3b01      	subs	r3, #1
 801f404:	9300      	str	r3, [sp, #0]
 801f406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f408:	bf08      	it	eq
 801f40a:	465b      	moveq	r3, fp
 801f40c:	e797      	b.n	801f33e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f40e:	454f      	cmp	r7, r9
 801f410:	dabb      	bge.n	801f38a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f412:	fb0c 2606 	mla	r6, ip, r6, r2
 801f416:	1436      	asrs	r6, r6, #16
 801f418:	d4b7      	bmi.n	801f38a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f41a:	4546      	cmp	r6, r8
 801f41c:	dab5      	bge.n	801f38a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f41e:	461e      	mov	r6, r3
 801f420:	46a0      	mov	r8, r4
 801f422:	2e00      	cmp	r6, #0
 801f424:	ddb8      	ble.n	801f398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f426:	1417      	asrs	r7, r2, #16
 801f428:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f42c:	9901      	ldr	r1, [sp, #4]
 801f42e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f432:	4462      	add	r2, ip
 801f434:	4470      	add	r0, lr
 801f436:	fb0a 1707 	mla	r7, sl, r7, r1
 801f43a:	9902      	ldr	r1, [sp, #8]
 801f43c:	3e01      	subs	r6, #1
 801f43e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f442:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f446:	f828 7b02 	strh.w	r7, [r8], #2
 801f44a:	e7ea      	b.n	801f422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f44c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f450:	d417      	bmi.n	801f482 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f452:	68ae      	ldr	r6, [r5, #8]
 801f454:	454e      	cmp	r6, r9
 801f456:	dd14      	ble.n	801f482 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f458:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f45c:	d411      	bmi.n	801f482 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f45e:	68ef      	ldr	r7, [r5, #12]
 801f460:	4557      	cmp	r7, sl
 801f462:	dd0e      	ble.n	801f482 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f464:	9f01      	ldr	r7, [sp, #4]
 801f466:	b236      	sxth	r6, r6
 801f468:	f06f 0101 	mvn.w	r1, #1
 801f46c:	fb0a 7606 	mla	r6, sl, r6, r7
 801f470:	9f02      	ldr	r7, [sp, #8]
 801f472:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f476:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f47a:	fb01 f608 	mul.w	r6, r1, r8
 801f47e:	9903      	ldr	r1, [sp, #12]
 801f480:	538f      	strh	r7, [r1, r6]
 801f482:	4470      	add	r0, lr
 801f484:	4462      	add	r2, ip
 801f486:	f108 38ff 	add.w	r8, r8, #4294967295
 801f48a:	e782      	b.n	801f392 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f48c:	b005      	add	sp, #20
 801f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f492 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f496:	b087      	sub	sp, #28
 801f498:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f49a:	9205      	str	r2, [sp, #20]
 801f49c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f4a0:	9102      	str	r1, [sp, #8]
 801f4a2:	9203      	str	r2, [sp, #12]
 801f4a4:	6861      	ldr	r1, [r4, #4]
 801f4a6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f4aa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f4ae:	fb01 2000 	mla	r0, r1, r0, r2
 801f4b2:	6822      	ldr	r2, [r4, #0]
 801f4b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f4b8:	9200      	str	r2, [sp, #0]
 801f4ba:	f8dc 2000 	ldr.w	r2, [ip]
 801f4be:	9204      	str	r2, [sp, #16]
 801f4c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f4c4:	3204      	adds	r2, #4
 801f4c6:	9201      	str	r2, [sp, #4]
 801f4c8:	9a03      	ldr	r2, [sp, #12]
 801f4ca:	43d5      	mvns	r5, r2
 801f4cc:	b2ed      	uxtb	r5, r5
 801f4ce:	9a02      	ldr	r2, [sp, #8]
 801f4d0:	2a00      	cmp	r2, #0
 801f4d2:	dc03      	bgt.n	801f4dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f4d4:	9a05      	ldr	r2, [sp, #20]
 801f4d6:	2a00      	cmp	r2, #0
 801f4d8:	f340 812c 	ble.w	801f734 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f4dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f4de:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f4e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f4e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f4e8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f4ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	dd10      	ble.n	801f516 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f4f4:	140c      	asrs	r4, r1, #16
 801f4f6:	d405      	bmi.n	801f504 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f4f8:	4574      	cmp	r4, lr
 801f4fa:	da03      	bge.n	801f504 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f4fc:	1414      	asrs	r4, r2, #16
 801f4fe:	d401      	bmi.n	801f504 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f500:	42bc      	cmp	r4, r7
 801f502:	db09      	blt.n	801f518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f504:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f506:	3b01      	subs	r3, #1
 801f508:	9800      	ldr	r0, [sp, #0]
 801f50a:	4421      	add	r1, r4
 801f50c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f50e:	3002      	adds	r0, #2
 801f510:	4422      	add	r2, r4
 801f512:	9000      	str	r0, [sp, #0]
 801f514:	e7ec      	b.n	801f4f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f516:	d071      	beq.n	801f5fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f518:	1e5c      	subs	r4, r3, #1
 801f51a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f51c:	fb06 1604 	mla	r6, r6, r4, r1
 801f520:	1436      	asrs	r6, r6, #16
 801f522:	d45d      	bmi.n	801f5e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f524:	4576      	cmp	r6, lr
 801f526:	da5b      	bge.n	801f5e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f528:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f52a:	fb06 2404 	mla	r4, r6, r4, r2
 801f52e:	1424      	asrs	r4, r4, #16
 801f530:	d456      	bmi.n	801f5e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f532:	42bc      	cmp	r4, r7
 801f534:	da54      	bge.n	801f5e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f536:	4698      	mov	r8, r3
 801f538:	f8dd 9000 	ldr.w	r9, [sp]
 801f53c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f540:	f1b8 0f00 	cmp.w	r8, #0
 801f544:	dd54      	ble.n	801f5f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f546:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f54a:	1414      	asrs	r4, r2, #16
 801f54c:	9804      	ldr	r0, [sp, #16]
 801f54e:	140e      	asrs	r6, r1, #16
 801f550:	f108 38ff 	add.w	r8, r8, #4294967295
 801f554:	fb07 0404 	mla	r4, r7, r4, r0
 801f558:	9801      	ldr	r0, [sp, #4]
 801f55a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f55e:	f8b9 4000 	ldrh.w	r4, [r9]
 801f562:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f566:	1227      	asrs	r7, r4, #8
 801f568:	eb00 0b0e 	add.w	fp, r0, lr
 801f56c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f570:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f574:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f576:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f57a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f57e:	4401      	add	r1, r0
 801f580:	fb16 f60a 	smulbb	r6, r6, sl
 801f584:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f586:	fb1b fb0a 	smulbb	fp, fp, sl
 801f58a:	fb07 6705 	mla	r7, r7, r5, r6
 801f58e:	10e6      	asrs	r6, r4, #3
 801f590:	00e4      	lsls	r4, r4, #3
 801f592:	4402      	add	r2, r0
 801f594:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f598:	b2bf      	uxth	r7, r7
 801f59a:	b2e4      	uxtb	r4, r4
 801f59c:	fb06 b605 	mla	r6, r6, r5, fp
 801f5a0:	fb14 f405 	smulbb	r4, r4, r5
 801f5a4:	b2b6      	uxth	r6, r6
 801f5a6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f5aa:	1c7c      	adds	r4, r7, #1
 801f5ac:	f106 0b01 	add.w	fp, r6, #1
 801f5b0:	fa1f fe8e 	uxth.w	lr, lr
 801f5b4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f5b8:	f10e 0401 	add.w	r4, lr, #1
 801f5bc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f5c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f5c4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f5c8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f5cc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f5d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f5d4:	4327      	orrs	r7, r4
 801f5d6:	ea47 070b 	orr.w	r7, r7, fp
 801f5da:	f829 7b02 	strh.w	r7, [r9], #2
 801f5de:	e7af      	b.n	801f540 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f5e0:	f04f 0e00 	mov.w	lr, #0
 801f5e4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f5e8:	eb03 040e 	add.w	r4, r3, lr
 801f5ec:	2c00      	cmp	r4, #0
 801f5ee:	dc43      	bgt.n	801f678 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f5f0:	9a00      	ldr	r2, [sp, #0]
 801f5f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f5fa:	9300      	str	r3, [sp, #0]
 801f5fc:	9b02      	ldr	r3, [sp, #8]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	f340 8098 	ble.w	801f734 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f60a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f60e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f612:	eef0 6a62 	vmov.f32	s13, s5
 801f616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f61a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f61e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f622:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f626:	eef0 6a43 	vmov.f32	s13, s6
 801f62a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f62e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f636:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f63a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f63e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f642:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f64a:	ee12 2a90 	vmov	r2, s5
 801f64e:	eef0 2a47 	vmov.f32	s5, s14
 801f652:	fb92 f3f3 	sdiv	r3, r2, r3
 801f656:	ee13 2a10 	vmov	r2, s6
 801f65a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f65e:	eeb0 3a67 	vmov.f32	s6, s15
 801f662:	fb92 f3f3 	sdiv	r3, r2, r3
 801f666:	9314      	str	r3, [sp, #80]	; 0x50
 801f668:	9b02      	ldr	r3, [sp, #8]
 801f66a:	9a05      	ldr	r2, [sp, #20]
 801f66c:	3b01      	subs	r3, #1
 801f66e:	9302      	str	r3, [sp, #8]
 801f670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f672:	bf08      	it	eq
 801f674:	4613      	moveq	r3, r2
 801f676:	e72a      	b.n	801f4ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f678:	140f      	asrs	r7, r1, #16
 801f67a:	d454      	bmi.n	801f726 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f67c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f680:	42be      	cmp	r6, r7
 801f682:	dd50      	ble.n	801f726 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f684:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f688:	d44d      	bmi.n	801f726 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f68a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f68e:	4544      	cmp	r4, r8
 801f690:	dd49      	ble.n	801f726 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f692:	9c04      	ldr	r4, [sp, #16]
 801f694:	b236      	sxth	r6, r6
 801f696:	f06f 0001 	mvn.w	r0, #1
 801f69a:	fb08 4606 	mla	r6, r8, r6, r4
 801f69e:	9c01      	ldr	r4, [sp, #4]
 801f6a0:	fb00 fa0e 	mul.w	sl, r0, lr
 801f6a4:	9800      	ldr	r0, [sp, #0]
 801f6a6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f6aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f6ae:	eb04 0b08 	add.w	fp, r4, r8
 801f6b2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f6b6:	9801      	ldr	r0, [sp, #4]
 801f6b8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f6bc:	1227      	asrs	r7, r4, #8
 801f6be:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f6c2:	fb16 f609 	smulbb	r6, r6, r9
 801f6c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f6ca:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f6ce:	fb1b fb09 	smulbb	fp, fp, r9
 801f6d2:	fb07 6705 	mla	r7, r7, r5, r6
 801f6d6:	10e6      	asrs	r6, r4, #3
 801f6d8:	00e4      	lsls	r4, r4, #3
 801f6da:	9800      	ldr	r0, [sp, #0]
 801f6dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f6e0:	b2bf      	uxth	r7, r7
 801f6e2:	b2e4      	uxtb	r4, r4
 801f6e4:	fb06 b605 	mla	r6, r6, r5, fp
 801f6e8:	fb14 f405 	smulbb	r4, r4, r5
 801f6ec:	b2b6      	uxth	r6, r6
 801f6ee:	fb08 4809 	mla	r8, r8, r9, r4
 801f6f2:	1c7c      	adds	r4, r7, #1
 801f6f4:	f106 0b01 	add.w	fp, r6, #1
 801f6f8:	fa1f f888 	uxth.w	r8, r8
 801f6fc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f700:	f108 0401 	add.w	r4, r8, #1
 801f704:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f708:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f70c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f710:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f714:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f718:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f71c:	4327      	orrs	r7, r4
 801f71e:	ea47 070b 	orr.w	r7, r7, fp
 801f722:	f820 700a 	strh.w	r7, [r0, sl]
 801f726:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f728:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f72c:	4401      	add	r1, r0
 801f72e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f730:	4402      	add	r2, r0
 801f732:	e759      	b.n	801f5e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f734:	b007      	add	sp, #28
 801f736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f73c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f740:	b085      	sub	sp, #20
 801f742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f746:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f748:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f74a:	9203      	str	r2, [sp, #12]
 801f74c:	6870      	ldr	r0, [r6, #4]
 801f74e:	686f      	ldr	r7, [r5, #4]
 801f750:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801f754:	3704      	adds	r7, #4
 801f756:	9101      	str	r1, [sp, #4]
 801f758:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f75c:	fb00 2404 	mla	r4, r0, r4, r2
 801f760:	6832      	ldr	r2, [r6, #0]
 801f762:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f766:	682a      	ldr	r2, [r5, #0]
 801f768:	9202      	str	r2, [sp, #8]
 801f76a:	9a01      	ldr	r2, [sp, #4]
 801f76c:	2a00      	cmp	r2, #0
 801f76e:	dc03      	bgt.n	801f778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f770:	9a03      	ldr	r2, [sp, #12]
 801f772:	2a00      	cmp	r2, #0
 801f774:	f340 80cc 	ble.w	801f910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f77a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f77e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f782:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f784:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f788:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	dd0d      	ble.n	801f7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f790:	1406      	asrs	r6, r0, #16
 801f792:	d405      	bmi.n	801f7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f794:	454e      	cmp	r6, r9
 801f796:	da03      	bge.n	801f7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f798:	1416      	asrs	r6, r2, #16
 801f79a:	d401      	bmi.n	801f7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f79c:	4546      	cmp	r6, r8
 801f79e:	db06      	blt.n	801f7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f7a2:	4460      	add	r0, ip
 801f7a4:	3b01      	subs	r3, #1
 801f7a6:	3402      	adds	r4, #2
 801f7a8:	4432      	add	r2, r6
 801f7aa:	e7ef      	b.n	801f78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f7ac:	d00f      	beq.n	801f7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f7ae:	1e5e      	subs	r6, r3, #1
 801f7b0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f7b4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f7b8:	d543      	bpl.n	801f842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f7ba:	4698      	mov	r8, r3
 801f7bc:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f7c0:	f1b8 0f00 	cmp.w	r8, #0
 801f7c4:	dc71      	bgt.n	801f8aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f7c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f7ce:	9b01      	ldr	r3, [sp, #4]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	f340 809d 	ble.w	801f910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f7d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7e0:	eeb0 6a62 	vmov.f32	s12, s5
 801f7e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7f0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f7f4:	eeb0 6a43 	vmov.f32	s12, s6
 801f7f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7fc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f800:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f804:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f808:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f80c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f810:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f814:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f818:	ee12 2a90 	vmov	r2, s5
 801f81c:	eef0 2a47 	vmov.f32	s5, s14
 801f820:	fb92 fcf3 	sdiv	ip, r2, r3
 801f824:	ee13 2a10 	vmov	r2, s6
 801f828:	eeb0 3a67 	vmov.f32	s6, s15
 801f82c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f830:	9312      	str	r3, [sp, #72]	; 0x48
 801f832:	9b01      	ldr	r3, [sp, #4]
 801f834:	9a03      	ldr	r2, [sp, #12]
 801f836:	3b01      	subs	r3, #1
 801f838:	9301      	str	r3, [sp, #4]
 801f83a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f83c:	bf08      	it	eq
 801f83e:	4613      	moveq	r3, r2
 801f840:	e793      	b.n	801f76a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f842:	45ce      	cmp	lr, r9
 801f844:	dab9      	bge.n	801f7ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f846:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f848:	fb01 2606 	mla	r6, r1, r6, r2
 801f84c:	1436      	asrs	r6, r6, #16
 801f84e:	d4b4      	bmi.n	801f7ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f850:	4546      	cmp	r6, r8
 801f852:	dab2      	bge.n	801f7ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f854:	4698      	mov	r8, r3
 801f856:	46a2      	mov	sl, r4
 801f858:	f1b8 0f00 	cmp.w	r8, #0
 801f85c:	ddb3      	ble.n	801f7c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f85e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f862:	1416      	asrs	r6, r2, #16
 801f864:	9902      	ldr	r1, [sp, #8]
 801f866:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f86a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f86e:	4460      	add	r0, ip
 801f870:	fb09 1606 	mla	r6, r9, r6, r1
 801f874:	4928      	ldr	r1, [pc, #160]	; (801f918 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f876:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f87a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f87e:	eb07 0b0e 	add.w	fp, r7, lr
 801f882:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f886:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f88a:	00f6      	lsls	r6, r6, #3
 801f88c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f890:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f892:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f896:	440a      	add	r2, r1
 801f898:	ea49 0606 	orr.w	r6, r9, r6
 801f89c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f8a0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f8a4:	f82a 6b02 	strh.w	r6, [sl], #2
 801f8a8:	e7d6      	b.n	801f858 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f8aa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f8ae:	d429      	bmi.n	801f904 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f8b0:	68ae      	ldr	r6, [r5, #8]
 801f8b2:	454e      	cmp	r6, r9
 801f8b4:	dd26      	ble.n	801f904 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f8b6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f8ba:	d423      	bmi.n	801f904 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f8bc:	68e9      	ldr	r1, [r5, #12]
 801f8be:	4559      	cmp	r1, fp
 801f8c0:	dd20      	ble.n	801f904 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f8c2:	fa0f fe86 	sxth.w	lr, r6
 801f8c6:	9902      	ldr	r1, [sp, #8]
 801f8c8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f8cc:	f06f 0101 	mvn.w	r1, #1
 801f8d0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f8d4:	fb01 f908 	mul.w	r9, r1, r8
 801f8d8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801f8dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f8e0:	eb07 060e 	add.w	r6, r7, lr
 801f8e4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f8e8:	7876      	ldrb	r6, [r6, #1]
 801f8ea:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f8ee:	00f6      	lsls	r6, r6, #3
 801f8f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f8f4:	ea4b 0606 	orr.w	r6, fp, r6
 801f8f8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f8fc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f900:	f82a 6009 	strh.w	r6, [sl, r9]
 801f904:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f906:	4460      	add	r0, ip
 801f908:	f108 38ff 	add.w	r8, r8, #4294967295
 801f90c:	440a      	add	r2, r1
 801f90e:	e757      	b.n	801f7c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f910:	b005      	add	sp, #20
 801f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f916:	bf00      	nop
 801f918:	fffff800 	.word	0xfffff800

0801f91c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f920:	b087      	sub	sp, #28
 801f922:	468b      	mov	fp, r1
 801f924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f928:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f92a:	9204      	str	r2, [sp, #16]
 801f92c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f930:	6841      	ldr	r1, [r0, #4]
 801f932:	9205      	str	r2, [sp, #20]
 801f934:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f938:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f93c:	fb01 2404 	mla	r4, r1, r4, r2
 801f940:	6802      	ldr	r2, [r0, #0]
 801f942:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f946:	f8dc 2000 	ldr.w	r2, [ip]
 801f94a:	9201      	str	r2, [sp, #4]
 801f94c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f950:	3204      	adds	r2, #4
 801f952:	9202      	str	r2, [sp, #8]
 801f954:	f1bb 0f00 	cmp.w	fp, #0
 801f958:	dc03      	bgt.n	801f962 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f95a:	9a04      	ldr	r2, [sp, #16]
 801f95c:	2a00      	cmp	r2, #0
 801f95e:	f340 8138 	ble.w	801fbd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f964:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f968:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f96e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f972:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f976:	2b00      	cmp	r3, #0
 801f978:	dd0e      	ble.n	801f998 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f97a:	1402      	asrs	r2, r0, #16
 801f97c:	d405      	bmi.n	801f98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f97e:	42ba      	cmp	r2, r7
 801f980:	da03      	bge.n	801f98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f982:	140a      	asrs	r2, r1, #16
 801f984:	d401      	bmi.n	801f98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f986:	42b2      	cmp	r2, r6
 801f988:	db07      	blt.n	801f99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f98a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f98c:	3b01      	subs	r3, #1
 801f98e:	3402      	adds	r4, #2
 801f990:	4410      	add	r0, r2
 801f992:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f994:	4411      	add	r1, r2
 801f996:	e7ee      	b.n	801f976 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f998:	d019      	beq.n	801f9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f99a:	1e5a      	subs	r2, r3, #1
 801f99c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f99e:	fb05 0502 	mla	r5, r5, r2, r0
 801f9a2:	142d      	asrs	r5, r5, #16
 801f9a4:	d409      	bmi.n	801f9ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f9a6:	42bd      	cmp	r5, r7
 801f9a8:	da07      	bge.n	801f9ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f9aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f9ac:	fb05 1202 	mla	r2, r5, r2, r1
 801f9b0:	1412      	asrs	r2, r2, #16
 801f9b2:	d402      	bmi.n	801f9ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f9b4:	42b2      	cmp	r2, r6
 801f9b6:	f2c0 80ac 	blt.w	801fb12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f9ba:	f04f 0e00 	mov.w	lr, #0
 801f9be:	eb03 020e 	add.w	r2, r3, lr
 801f9c2:	2a00      	cmp	r2, #0
 801f9c4:	dc3e      	bgt.n	801fa44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f9c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f9ce:	f1bb 0f00 	cmp.w	fp, #0
 801f9d2:	f340 80fe 	ble.w	801fbd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f9d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9e0:	f1bb 0b01 	subs.w	fp, fp, #1
 801f9e4:	eeb0 6a62 	vmov.f32	s12, s5
 801f9e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9f4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f9f8:	eeb0 6a43 	vmov.f32	s12, s6
 801f9fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa00:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fa04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa1c:	ee12 2a90 	vmov	r2, s5
 801fa20:	eef0 2a47 	vmov.f32	s5, s14
 801fa24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa28:	ee13 2a10 	vmov	r2, s6
 801fa2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa30:	eeb0 3a67 	vmov.f32	s6, s15
 801fa34:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa38:	9a04      	ldr	r2, [sp, #16]
 801fa3a:	9314      	str	r3, [sp, #80]	; 0x50
 801fa3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa3e:	bf08      	it	eq
 801fa40:	4613      	moveq	r3, r2
 801fa42:	e787      	b.n	801f954 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fa44:	1406      	asrs	r6, r0, #16
 801fa46:	d45d      	bmi.n	801fb04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa48:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fa4c:	42b5      	cmp	r5, r6
 801fa4e:	dd59      	ble.n	801fb04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa50:	140f      	asrs	r7, r1, #16
 801fa52:	d457      	bmi.n	801fb04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa54:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fa58:	42ba      	cmp	r2, r7
 801fa5a:	dd53      	ble.n	801fb04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa5c:	9a01      	ldr	r2, [sp, #4]
 801fa5e:	b22d      	sxth	r5, r5
 801fa60:	fb07 2505 	mla	r5, r7, r5, r2
 801fa64:	5daa      	ldrb	r2, [r5, r6]
 801fa66:	9d02      	ldr	r5, [sp, #8]
 801fa68:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fa6c:	0e2e      	lsrs	r6, r5, #24
 801fa6e:	d049      	beq.n	801fb04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa70:	f06f 0201 	mvn.w	r2, #1
 801fa74:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fa78:	fb02 f20e 	mul.w	r2, r2, lr
 801fa7c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fa80:	9203      	str	r2, [sp, #12]
 801fa82:	9a05      	ldr	r2, [sp, #20]
 801fa84:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fa88:	4356      	muls	r6, r2
 801fa8a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fa8e:	1c72      	adds	r2, r6, #1
 801fa90:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fa94:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fa98:	b2ed      	uxtb	r5, r5
 801fa9a:	1212      	asrs	r2, r2, #8
 801fa9c:	fa1f f982 	uxth.w	r9, r2
 801faa0:	43d2      	mvns	r2, r2
 801faa2:	fb16 f609 	smulbb	r6, r6, r9
 801faa6:	b2d2      	uxtb	r2, r2
 801faa8:	fb15 f509 	smulbb	r5, r5, r9
 801faac:	fb07 6702 	mla	r7, r7, r2, r6
 801fab0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fab4:	fb1a fa09 	smulbb	sl, sl, r9
 801fab8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fabc:	b2bf      	uxth	r7, r7
 801fabe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fac2:	fa5f f888 	uxtb.w	r8, r8
 801fac6:	fb06 a602 	mla	r6, r6, r2, sl
 801faca:	fb08 5502 	mla	r5, r8, r2, r5
 801face:	1c7a      	adds	r2, r7, #1
 801fad0:	b2b6      	uxth	r6, r6
 801fad2:	b2ad      	uxth	r5, r5
 801fad4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fad8:	9a03      	ldr	r2, [sp, #12]
 801fada:	f105 0a01 	add.w	sl, r5, #1
 801fade:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fae2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fae6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801faea:	ea4a 0707 	orr.w	r7, sl, r7
 801faee:	f106 0a01 	add.w	sl, r6, #1
 801faf2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801faf6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fafa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fafe:	ea47 070a 	orr.w	r7, r7, sl
 801fb02:	52a7      	strh	r7, [r4, r2]
 801fb04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb06:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fb0a:	4410      	add	r0, r2
 801fb0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb0e:	4411      	add	r1, r2
 801fb10:	e755      	b.n	801f9be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fb12:	f04f 0800 	mov.w	r8, #0
 801fb16:	eba3 0208 	sub.w	r2, r3, r8
 801fb1a:	2a00      	cmp	r2, #0
 801fb1c:	f77f af53 	ble.w	801f9c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fb20:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801fb24:	140a      	asrs	r2, r1, #16
 801fb26:	9f01      	ldr	r7, [sp, #4]
 801fb28:	1405      	asrs	r5, r0, #16
 801fb2a:	fb06 7202 	mla	r2, r6, r2, r7
 801fb2e:	5d52      	ldrb	r2, [r2, r5]
 801fb30:	9d02      	ldr	r5, [sp, #8]
 801fb32:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fb36:	0e2e      	lsrs	r6, r5, #24
 801fb38:	d044      	beq.n	801fbc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fb3a:	9a05      	ldr	r2, [sp, #20]
 801fb3c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fb40:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fb44:	4356      	muls	r6, r2
 801fb46:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fb4a:	1c72      	adds	r2, r6, #1
 801fb4c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fb50:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fb54:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb58:	b2ed      	uxtb	r5, r5
 801fb5a:	1212      	asrs	r2, r2, #8
 801fb5c:	fa1f f982 	uxth.w	r9, r2
 801fb60:	43d2      	mvns	r2, r2
 801fb62:	fb16 f609 	smulbb	r6, r6, r9
 801fb66:	b2d2      	uxtb	r2, r2
 801fb68:	fb15 f509 	smulbb	r5, r5, r9
 801fb6c:	fb07 6702 	mla	r7, r7, r2, r6
 801fb70:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fb74:	fb1a fa09 	smulbb	sl, sl, r9
 801fb78:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fb7c:	b2bf      	uxth	r7, r7
 801fb7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fb82:	fa5f fe8e 	uxtb.w	lr, lr
 801fb86:	fb06 a602 	mla	r6, r6, r2, sl
 801fb8a:	fb0e 5502 	mla	r5, lr, r2, r5
 801fb8e:	1c7a      	adds	r2, r7, #1
 801fb90:	b2b6      	uxth	r6, r6
 801fb92:	b2ad      	uxth	r5, r5
 801fb94:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fb98:	f105 0a01 	add.w	sl, r5, #1
 801fb9c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fba0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fba4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fba8:	ea4a 0707 	orr.w	r7, sl, r7
 801fbac:	f106 0a01 	add.w	sl, r6, #1
 801fbb0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fbb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fbb8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fbbc:	ea47 070a 	orr.w	r7, r7, sl
 801fbc0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fbc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fbc6:	f108 0801 	add.w	r8, r8, #1
 801fbca:	4410      	add	r0, r2
 801fbcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fbce:	4411      	add	r1, r2
 801fbd0:	e7a1      	b.n	801fb16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fbd2:	b007      	add	sp, #28
 801fbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbdc:	b085      	sub	sp, #20
 801fbde:	468b      	mov	fp, r1
 801fbe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbe4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fbe6:	9203      	str	r2, [sp, #12]
 801fbe8:	6841      	ldr	r1, [r0, #4]
 801fbea:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fbee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fbf2:	fb01 2404 	mla	r4, r1, r4, r2
 801fbf6:	6802      	ldr	r2, [r0, #0]
 801fbf8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fbfc:	f8de 2000 	ldr.w	r2, [lr]
 801fc00:	9200      	str	r2, [sp, #0]
 801fc02:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fc06:	3204      	adds	r2, #4
 801fc08:	9201      	str	r2, [sp, #4]
 801fc0a:	f1bb 0f00 	cmp.w	fp, #0
 801fc0e:	dc03      	bgt.n	801fc18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fc10:	9a03      	ldr	r2, [sp, #12]
 801fc12:	2a00      	cmp	r2, #0
 801fc14:	f340 8153 	ble.w	801febe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fc18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc1a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fc1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc24:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fc28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	dd0e      	ble.n	801fc4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fc30:	1408      	asrs	r0, r1, #16
 801fc32:	d405      	bmi.n	801fc40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc34:	42b8      	cmp	r0, r7
 801fc36:	da03      	bge.n	801fc40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc38:	1410      	asrs	r0, r2, #16
 801fc3a:	d401      	bmi.n	801fc40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc3c:	42b0      	cmp	r0, r6
 801fc3e:	db07      	blt.n	801fc50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fc40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc42:	3b01      	subs	r3, #1
 801fc44:	3402      	adds	r4, #2
 801fc46:	4401      	add	r1, r0
 801fc48:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fc4a:	4402      	add	r2, r0
 801fc4c:	e7ee      	b.n	801fc2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fc4e:	d017      	beq.n	801fc80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fc50:	1e58      	subs	r0, r3, #1
 801fc52:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fc54:	fb05 1500 	mla	r5, r5, r0, r1
 801fc58:	142d      	asrs	r5, r5, #16
 801fc5a:	d409      	bmi.n	801fc70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc5c:	42bd      	cmp	r5, r7
 801fc5e:	da07      	bge.n	801fc70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fc62:	fb05 2000 	mla	r0, r5, r0, r2
 801fc66:	1400      	asrs	r0, r0, #16
 801fc68:	d402      	bmi.n	801fc70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc6a:	42b0      	cmp	r0, r6
 801fc6c:	f2c0 80bc 	blt.w	801fde8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fc70:	2600      	movs	r6, #0
 801fc72:	1998      	adds	r0, r3, r6
 801fc74:	2800      	cmp	r0, #0
 801fc76:	dc3e      	bgt.n	801fcf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fc78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc80:	f1bb 0f00 	cmp.w	fp, #0
 801fc84:	f340 811b 	ble.w	801febe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fc88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc92:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc96:	eeb0 6a62 	vmov.f32	s12, s5
 801fc9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fca6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fcaa:	eeb0 6a43 	vmov.f32	s12, s6
 801fcae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fcb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fcc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fcca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcce:	ee12 2a90 	vmov	r2, s5
 801fcd2:	eef0 2a47 	vmov.f32	s5, s14
 801fcd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcda:	ee13 2a10 	vmov	r2, s6
 801fcde:	9311      	str	r3, [sp, #68]	; 0x44
 801fce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fce2:	eeb0 3a67 	vmov.f32	s6, s15
 801fce6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcea:	9a03      	ldr	r2, [sp, #12]
 801fcec:	9312      	str	r3, [sp, #72]	; 0x48
 801fcee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcf0:	bf08      	it	eq
 801fcf2:	4613      	moveq	r3, r2
 801fcf4:	e789      	b.n	801fc0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fcf6:	140f      	asrs	r7, r1, #16
 801fcf8:	d426      	bmi.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fcfa:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fcfe:	42bd      	cmp	r5, r7
 801fd00:	dd22      	ble.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fd06:	d41f      	bmi.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd08:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fd0c:	4560      	cmp	r0, ip
 801fd0e:	dd1b      	ble.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd10:	9800      	ldr	r0, [sp, #0]
 801fd12:	b22d      	sxth	r5, r5
 801fd14:	fb0c 0505 	mla	r5, ip, r5, r0
 801fd18:	5de8      	ldrb	r0, [r5, r7]
 801fd1a:	9d01      	ldr	r5, [sp, #4]
 801fd1c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801fd20:	0e07      	lsrs	r7, r0, #24
 801fd22:	2fff      	cmp	r7, #255	; 0xff
 801fd24:	d116      	bne.n	801fd54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fd26:	f06f 0501 	mvn.w	r5, #1
 801fd2a:	fb05 f706 	mul.w	r7, r5, r6
 801fd2e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fd32:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fd36:	0945      	lsrs	r5, r0, #5
 801fd38:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fd3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd40:	ea4c 0505 	orr.w	r5, ip, r5
 801fd44:	4305      	orrs	r5, r0
 801fd46:	53e5      	strh	r5, [r4, r7]
 801fd48:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd4a:	3e01      	subs	r6, #1
 801fd4c:	4401      	add	r1, r0
 801fd4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd50:	4402      	add	r2, r0
 801fd52:	e78e      	b.n	801fc72 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fd54:	b2fd      	uxtb	r5, r7
 801fd56:	2f00      	cmp	r7, #0
 801fd58:	d0f6      	beq.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd5a:	f06f 0701 	mvn.w	r7, #1
 801fd5e:	fa1f f985 	uxth.w	r9, r5
 801fd62:	43ed      	mvns	r5, r5
 801fd64:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fd68:	4377      	muls	r7, r6
 801fd6a:	fb1a fa09 	smulbb	sl, sl, r9
 801fd6e:	b2ed      	uxtb	r5, r5
 801fd70:	f834 8007 	ldrh.w	r8, [r4, r7]
 801fd74:	9702      	str	r7, [sp, #8]
 801fd76:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fd7a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801fd7e:	fb17 f709 	smulbb	r7, r7, r9
 801fd82:	b2c0      	uxtb	r0, r0
 801fd84:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd88:	fb10 f009 	smulbb	r0, r0, r9
 801fd8c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fd90:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801fd94:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fd98:	fa1f fc8c 	uxth.w	ip, ip
 801fd9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fda0:	fa5f f888 	uxtb.w	r8, r8
 801fda4:	fb07 a705 	mla	r7, r7, r5, sl
 801fda8:	fb08 0005 	mla	r0, r8, r5, r0
 801fdac:	f10c 0501 	add.w	r5, ip, #1
 801fdb0:	b2bf      	uxth	r7, r7
 801fdb2:	b280      	uxth	r0, r0
 801fdb4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fdb8:	f100 0a01 	add.w	sl, r0, #1
 801fdbc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fdc0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fdc4:	9802      	ldr	r0, [sp, #8]
 801fdc6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fdca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fdce:	f107 0a01 	add.w	sl, r7, #1
 801fdd2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fdd6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdda:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdde:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fde2:	f824 c000 	strh.w	ip, [r4, r0]
 801fde6:	e7af      	b.n	801fd48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fde8:	f04f 0800 	mov.w	r8, #0
 801fdec:	eba3 0008 	sub.w	r0, r3, r8
 801fdf0:	2800      	cmp	r0, #0
 801fdf2:	f77f af41 	ble.w	801fc78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fdf6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fdfa:	1410      	asrs	r0, r2, #16
 801fdfc:	9f00      	ldr	r7, [sp, #0]
 801fdfe:	140d      	asrs	r5, r1, #16
 801fe00:	fb06 7000 	mla	r0, r6, r0, r7
 801fe04:	5d40      	ldrb	r0, [r0, r5]
 801fe06:	9d01      	ldr	r5, [sp, #4]
 801fe08:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fe0c:	0e2e      	lsrs	r6, r5, #24
 801fe0e:	2eff      	cmp	r6, #255	; 0xff
 801fe10:	d112      	bne.n	801fe38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801fe12:	482c      	ldr	r0, [pc, #176]	; (801fec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fe14:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fe18:	0968      	lsrs	r0, r5, #5
 801fe1a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fe1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe22:	4330      	orrs	r0, r6
 801fe24:	4328      	orrs	r0, r5
 801fe26:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801fe2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe2c:	f108 0801 	add.w	r8, r8, #1
 801fe30:	4401      	add	r1, r0
 801fe32:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe34:	4402      	add	r2, r0
 801fe36:	e7d9      	b.n	801fdec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fe38:	b2f0      	uxtb	r0, r6
 801fe3a:	2e00      	cmp	r6, #0
 801fe3c:	d0f5      	beq.n	801fe2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fe3e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801fe42:	fa1f f980 	uxth.w	r9, r0
 801fe46:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fe4a:	43c0      	mvns	r0, r0
 801fe4c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fe50:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fe54:	fb16 f609 	smulbb	r6, r6, r9
 801fe58:	b2c0      	uxtb	r0, r0
 801fe5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fe5e:	b2ed      	uxtb	r5, r5
 801fe60:	fb1a fa09 	smulbb	sl, sl, r9
 801fe64:	fb07 6700 	mla	r7, r7, r0, r6
 801fe68:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fe6c:	fb15 f509 	smulbb	r5, r5, r9
 801fe70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fe74:	b2bf      	uxth	r7, r7
 801fe76:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fe7a:	fa5f fc8c 	uxtb.w	ip, ip
 801fe7e:	fb06 a600 	mla	r6, r6, r0, sl
 801fe82:	fb0c 5500 	mla	r5, ip, r0, r5
 801fe86:	1c78      	adds	r0, r7, #1
 801fe88:	b2b6      	uxth	r6, r6
 801fe8a:	b2ad      	uxth	r5, r5
 801fe8c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fe90:	f105 0a01 	add.w	sl, r5, #1
 801fe94:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fe98:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fea0:	ea4a 0707 	orr.w	r7, sl, r7
 801fea4:	f106 0a01 	add.w	sl, r6, #1
 801fea8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801feac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801feb0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801feb4:	ea47 070a 	orr.w	r7, r7, sl
 801feb8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801febc:	e7b5      	b.n	801fe2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801febe:	b005      	add	sp, #20
 801fec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fec4:	fffff800 	.word	0xfffff800

0801fec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fecc:	b087      	sub	sp, #28
 801fece:	468b      	mov	fp, r1
 801fed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fed4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fed6:	9204      	str	r2, [sp, #16]
 801fed8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fedc:	6861      	ldr	r1, [r4, #4]
 801fede:	9205      	str	r2, [sp, #20]
 801fee0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801fee4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801fee8:	fb01 2000 	mla	r0, r1, r0, r2
 801feec:	6822      	ldr	r2, [r4, #0]
 801feee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fef2:	f8de 2000 	ldr.w	r2, [lr]
 801fef6:	9201      	str	r2, [sp, #4]
 801fef8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fefc:	9202      	str	r2, [sp, #8]
 801fefe:	f1bb 0f00 	cmp.w	fp, #0
 801ff02:	dc03      	bgt.n	801ff0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ff04:	9a04      	ldr	r2, [sp, #16]
 801ff06:	2a00      	cmp	r2, #0
 801ff08:	f340 8142 	ble.w	8020190 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ff0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff0e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ff12:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ff16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff18:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ff1c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	dd0e      	ble.n	801ff42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ff24:	140c      	asrs	r4, r1, #16
 801ff26:	d405      	bmi.n	801ff34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff28:	42bc      	cmp	r4, r7
 801ff2a:	da03      	bge.n	801ff34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff2c:	1414      	asrs	r4, r2, #16
 801ff2e:	d401      	bmi.n	801ff34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff30:	42b4      	cmp	r4, r6
 801ff32:	db07      	blt.n	801ff44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff36:	3b01      	subs	r3, #1
 801ff38:	3002      	adds	r0, #2
 801ff3a:	4421      	add	r1, r4
 801ff3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ff3e:	4422      	add	r2, r4
 801ff40:	e7ee      	b.n	801ff20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ff42:	d019      	beq.n	801ff78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ff44:	1e5c      	subs	r4, r3, #1
 801ff46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ff48:	fb05 1504 	mla	r5, r5, r4, r1
 801ff4c:	142d      	asrs	r5, r5, #16
 801ff4e:	d409      	bmi.n	801ff64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff50:	42bd      	cmp	r5, r7
 801ff52:	da07      	bge.n	801ff64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff54:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ff56:	fb05 2404 	mla	r4, r5, r4, r2
 801ff5a:	1424      	asrs	r4, r4, #16
 801ff5c:	d402      	bmi.n	801ff64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ff5e:	42b4      	cmp	r4, r6
 801ff60:	f2c0 80b1 	blt.w	80200c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ff64:	f04f 0800 	mov.w	r8, #0
 801ff68:	eb03 0408 	add.w	r4, r3, r8
 801ff6c:	2c00      	cmp	r4, #0
 801ff6e:	dc3e      	bgt.n	801ffee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ff70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff78:	f1bb 0f00 	cmp.w	fp, #0
 801ff7c:	f340 8108 	ble.w	8020190 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ff80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff8a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff8e:	eeb0 6a62 	vmov.f32	s12, s5
 801ff92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff9e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ffa2:	eeb0 6a43 	vmov.f32	s12, s6
 801ffa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffaa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ffae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffc6:	ee12 2a90 	vmov	r2, s5
 801ffca:	eef0 2a47 	vmov.f32	s5, s14
 801ffce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffd2:	ee13 2a10 	vmov	r2, s6
 801ffd6:	9313      	str	r3, [sp, #76]	; 0x4c
 801ffd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffda:	eeb0 3a67 	vmov.f32	s6, s15
 801ffde:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffe2:	9a04      	ldr	r2, [sp, #16]
 801ffe4:	9314      	str	r3, [sp, #80]	; 0x50
 801ffe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffe8:	bf08      	it	eq
 801ffea:	4613      	moveq	r3, r2
 801ffec:	e787      	b.n	801fefe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ffee:	140e      	asrs	r6, r1, #16
 801fff0:	d462      	bmi.n	80200b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fff2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fff6:	42b5      	cmp	r5, r6
 801fff8:	dd5e      	ble.n	80200b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fffa:	1417      	asrs	r7, r2, #16
 801fffc:	d45c      	bmi.n	80200b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fffe:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020002:	42bc      	cmp	r4, r7
 8020004:	dd58      	ble.n	80200b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020006:	b22d      	sxth	r5, r5
 8020008:	9c02      	ldr	r4, [sp, #8]
 802000a:	fb07 6505 	mla	r5, r7, r5, r6
 802000e:	5d66      	ldrb	r6, [r4, r5]
 8020010:	2e00      	cmp	r6, #0
 8020012:	d051      	beq.n	80200b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020014:	9c01      	ldr	r4, [sp, #4]
 8020016:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 802001a:	f06f 0401 	mvn.w	r4, #1
 802001e:	fb04 f408 	mul.w	r4, r4, r8
 8020022:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020026:	5b05      	ldrh	r5, [r0, r4]
 8020028:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802002c:	9403      	str	r4, [sp, #12]
 802002e:	9c05      	ldr	r4, [sp, #20]
 8020030:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020034:	4366      	muls	r6, r4
 8020036:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802003a:	1c74      	adds	r4, r6, #1
 802003c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020040:	122e      	asrs	r6, r5, #8
 8020042:	1224      	asrs	r4, r4, #8
 8020044:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020048:	00ed      	lsls	r5, r5, #3
 802004a:	b2a7      	uxth	r7, r4
 802004c:	43e4      	mvns	r4, r4
 802004e:	b2ed      	uxtb	r5, r5
 8020050:	b2e4      	uxtb	r4, r4
 8020052:	fb16 f604 	smulbb	r6, r6, r4
 8020056:	fb15 f504 	smulbb	r5, r5, r4
 802005a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802005e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020062:	fb1a fa04 	smulbb	sl, sl, r4
 8020066:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802006a:	fa1f fc8c 	uxth.w	ip, ip
 802006e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020072:	fa5f f989 	uxtb.w	r9, r9
 8020076:	fb06 a607 	mla	r6, r6, r7, sl
 802007a:	f10c 0401 	add.w	r4, ip, #1
 802007e:	fb09 5507 	mla	r5, r9, r7, r5
 8020082:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020086:	9c03      	ldr	r4, [sp, #12]
 8020088:	b2ad      	uxth	r5, r5
 802008a:	b2b6      	uxth	r6, r6
 802008c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020090:	f105 0a01 	add.w	sl, r5, #1
 8020094:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020098:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802009c:	ea4a 0c0c 	orr.w	ip, sl, ip
 80200a0:	f106 0a01 	add.w	sl, r6, #1
 80200a4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80200a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80200ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80200b0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80200b4:	f820 c004 	strh.w	ip, [r0, r4]
 80200b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80200be:	4421      	add	r1, r4
 80200c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80200c2:	4422      	add	r2, r4
 80200c4:	e750      	b.n	801ff68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80200c6:	f04f 0900 	mov.w	r9, #0
 80200ca:	eba3 0409 	sub.w	r4, r3, r9
 80200ce:	2c00      	cmp	r4, #0
 80200d0:	f77f af4e 	ble.w	801ff70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80200d4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80200d8:	140d      	asrs	r5, r1, #16
 80200da:	1414      	asrs	r4, r2, #16
 80200dc:	fb06 5404 	mla	r4, r6, r4, r5
 80200e0:	9d02      	ldr	r5, [sp, #8]
 80200e2:	5d2e      	ldrb	r6, [r5, r4]
 80200e4:	2e00      	cmp	r6, #0
 80200e6:	d04c      	beq.n	8020182 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80200e8:	9d01      	ldr	r5, [sp, #4]
 80200ea:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80200ee:	9c05      	ldr	r4, [sp, #20]
 80200f0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80200f4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80200f8:	4366      	muls	r6, r4
 80200fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80200fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020102:	1c74      	adds	r4, r6, #1
 8020104:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020108:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 802010c:	122e      	asrs	r6, r5, #8
 802010e:	1224      	asrs	r4, r4, #8
 8020110:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020114:	00ed      	lsls	r5, r5, #3
 8020116:	b2a7      	uxth	r7, r4
 8020118:	43e4      	mvns	r4, r4
 802011a:	b2ed      	uxtb	r5, r5
 802011c:	b2e4      	uxtb	r4, r4
 802011e:	fb16 f604 	smulbb	r6, r6, r4
 8020122:	fb15 f504 	smulbb	r5, r5, r4
 8020126:	fb0c 6c07 	mla	ip, ip, r7, r6
 802012a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802012e:	fb1a fa04 	smulbb	sl, sl, r4
 8020132:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020136:	fa1f fc8c 	uxth.w	ip, ip
 802013a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802013e:	fa5f f888 	uxtb.w	r8, r8
 8020142:	fb06 a607 	mla	r6, r6, r7, sl
 8020146:	f10c 0401 	add.w	r4, ip, #1
 802014a:	fb08 5507 	mla	r5, r8, r7, r5
 802014e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020152:	b2ad      	uxth	r5, r5
 8020154:	b2b6      	uxth	r6, r6
 8020156:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802015a:	f105 0a01 	add.w	sl, r5, #1
 802015e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020162:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020166:	ea4a 0c0c 	orr.w	ip, sl, ip
 802016a:	f106 0a01 	add.w	sl, r6, #1
 802016e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020172:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020176:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802017a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802017e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020182:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020184:	f109 0901 	add.w	r9, r9, #1
 8020188:	4421      	add	r1, r4
 802018a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802018c:	4422      	add	r2, r4
 802018e:	e79c      	b.n	80200ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020190:	b007      	add	sp, #28
 8020192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020196 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019a:	b085      	sub	sp, #20
 802019c:	468b      	mov	fp, r1
 802019e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80201a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80201a4:	9203      	str	r2, [sp, #12]
 80201a6:	6861      	ldr	r1, [r4, #4]
 80201a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80201ac:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80201b0:	fb01 2000 	mla	r0, r1, r0, r2
 80201b4:	6822      	ldr	r2, [r4, #0]
 80201b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80201ba:	f8d8 2000 	ldr.w	r2, [r8]
 80201be:	9200      	str	r2, [sp, #0]
 80201c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80201c4:	9201      	str	r2, [sp, #4]
 80201c6:	f1bb 0f00 	cmp.w	fp, #0
 80201ca:	dc03      	bgt.n	80201d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80201cc:	9a03      	ldr	r2, [sp, #12]
 80201ce:	2a00      	cmp	r2, #0
 80201d0:	f340 8146 	ble.w	8020460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80201d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80201d6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80201da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80201de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80201e0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80201e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	dd0e      	ble.n	802020a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80201ec:	140c      	asrs	r4, r1, #16
 80201ee:	d405      	bmi.n	80201fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201f0:	42bc      	cmp	r4, r7
 80201f2:	da03      	bge.n	80201fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201f4:	1414      	asrs	r4, r2, #16
 80201f6:	d401      	bmi.n	80201fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80201f8:	42b4      	cmp	r4, r6
 80201fa:	db07      	blt.n	802020c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80201fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80201fe:	3b01      	subs	r3, #1
 8020200:	3002      	adds	r0, #2
 8020202:	4421      	add	r1, r4
 8020204:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020206:	4422      	add	r2, r4
 8020208:	e7ee      	b.n	80201e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802020a:	d017      	beq.n	802023c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802020c:	1e5c      	subs	r4, r3, #1
 802020e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020210:	fb05 1504 	mla	r5, r5, r4, r1
 8020214:	142d      	asrs	r5, r5, #16
 8020216:	d409      	bmi.n	802022c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020218:	42bd      	cmp	r5, r7
 802021a:	da07      	bge.n	802022c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802021c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802021e:	fb05 2404 	mla	r4, r5, r4, r2
 8020222:	1424      	asrs	r4, r4, #16
 8020224:	d402      	bmi.n	802022c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020226:	42b4      	cmp	r4, r6
 8020228:	f2c0 80b3 	blt.w	8020392 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802022c:	2600      	movs	r6, #0
 802022e:	199c      	adds	r4, r3, r6
 8020230:	2c00      	cmp	r4, #0
 8020232:	dc3e      	bgt.n	80202b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020238:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802023c:	f1bb 0f00 	cmp.w	fp, #0
 8020240:	f340 810e 	ble.w	8020460 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020244:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802024a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802024e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020252:	eeb0 6a62 	vmov.f32	s12, s5
 8020256:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802025a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802025e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020262:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020266:	eeb0 6a43 	vmov.f32	s12, s6
 802026a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802026e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020272:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020276:	ee61 7a27 	vmul.f32	s15, s2, s15
 802027a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802027e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020282:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020286:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802028a:	ee12 2a90 	vmov	r2, s5
 802028e:	eef0 2a47 	vmov.f32	s5, s14
 8020292:	fb92 f3f3 	sdiv	r3, r2, r3
 8020296:	ee13 2a10 	vmov	r2, s6
 802029a:	9311      	str	r3, [sp, #68]	; 0x44
 802029c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802029e:	eeb0 3a67 	vmov.f32	s6, s15
 80202a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80202a6:	9a03      	ldr	r2, [sp, #12]
 80202a8:	9312      	str	r3, [sp, #72]	; 0x48
 80202aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202ac:	bf08      	it	eq
 80202ae:	4613      	moveq	r3, r2
 80202b0:	e789      	b.n	80201c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80202b2:	140f      	asrs	r7, r1, #16
 80202b4:	d418      	bmi.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202b6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80202ba:	42bd      	cmp	r5, r7
 80202bc:	dd14      	ble.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80202c2:	d411      	bmi.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202c4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80202c8:	4564      	cmp	r4, ip
 80202ca:	dd0d      	ble.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202cc:	b22d      	sxth	r5, r5
 80202ce:	9c01      	ldr	r4, [sp, #4]
 80202d0:	fb0c 7505 	mla	r5, ip, r5, r7
 80202d4:	5d64      	ldrb	r4, [r4, r5]
 80202d6:	2cff      	cmp	r4, #255	; 0xff
 80202d8:	d10c      	bne.n	80202f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80202da:	9c00      	ldr	r4, [sp, #0]
 80202dc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80202e0:	f06f 0401 	mvn.w	r4, #1
 80202e4:	4374      	muls	r4, r6
 80202e6:	5305      	strh	r5, [r0, r4]
 80202e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202ea:	3e01      	subs	r6, #1
 80202ec:	4421      	add	r1, r4
 80202ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80202f0:	4422      	add	r2, r4
 80202f2:	e79c      	b.n	802022e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80202f4:	2c00      	cmp	r4, #0
 80202f6:	d0f7      	beq.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80202f8:	9f00      	ldr	r7, [sp, #0]
 80202fa:	fa1f fc84 	uxth.w	ip, r4
 80202fe:	43e4      	mvns	r4, r4
 8020300:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8020304:	f06f 0501 	mvn.w	r5, #1
 8020308:	b2e4      	uxtb	r4, r4
 802030a:	4375      	muls	r5, r6
 802030c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8020310:	9502      	str	r5, [sp, #8]
 8020312:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020316:	5b45      	ldrh	r5, [r0, r5]
 8020318:	122f      	asrs	r7, r5, #8
 802031a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802031e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020322:	00ed      	lsls	r5, r5, #3
 8020324:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020328:	fb17 f704 	smulbb	r7, r7, r4
 802032c:	b2ed      	uxtb	r5, r5
 802032e:	fb1a fa04 	smulbb	sl, sl, r4
 8020332:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8020336:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802033a:	fb15 f504 	smulbb	r5, r5, r4
 802033e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020342:	fa1f fe8e 	uxth.w	lr, lr
 8020346:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802034a:	fa5f f989 	uxtb.w	r9, r9
 802034e:	fb07 a70c 	mla	r7, r7, ip, sl
 8020352:	f10e 0401 	add.w	r4, lr, #1
 8020356:	fb09 550c 	mla	r5, r9, ip, r5
 802035a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 802035e:	9c02      	ldr	r4, [sp, #8]
 8020360:	b2ad      	uxth	r5, r5
 8020362:	b2bf      	uxth	r7, r7
 8020364:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020368:	f105 0a01 	add.w	sl, r5, #1
 802036c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020370:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020374:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020378:	f107 0a01 	add.w	sl, r7, #1
 802037c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020380:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020384:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020388:	ea4e 0e0a 	orr.w	lr, lr, sl
 802038c:	f820 e004 	strh.w	lr, [r0, r4]
 8020390:	e7aa      	b.n	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020392:	f04f 0900 	mov.w	r9, #0
 8020396:	eba3 0409 	sub.w	r4, r3, r9
 802039a:	2c00      	cmp	r4, #0
 802039c:	f77f af4a 	ble.w	8020234 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80203a0:	1414      	asrs	r4, r2, #16
 80203a2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80203a6:	140d      	asrs	r5, r1, #16
 80203a8:	fb06 5504 	mla	r5, r6, r4, r5
 80203ac:	9c01      	ldr	r4, [sp, #4]
 80203ae:	5d64      	ldrb	r4, [r4, r5]
 80203b0:	2cff      	cmp	r4, #255	; 0xff
 80203b2:	d10b      	bne.n	80203cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80203b4:	9c00      	ldr	r4, [sp, #0]
 80203b6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80203ba:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80203be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203c0:	f109 0901 	add.w	r9, r9, #1
 80203c4:	4421      	add	r1, r4
 80203c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80203c8:	4422      	add	r2, r4
 80203ca:	e7e4      	b.n	8020396 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80203cc:	2c00      	cmp	r4, #0
 80203ce:	d0f6      	beq.n	80203be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80203d0:	9e00      	ldr	r6, [sp, #0]
 80203d2:	b2a7      	uxth	r7, r4
 80203d4:	43e4      	mvns	r4, r4
 80203d6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80203da:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80203de:	b2e4      	uxtb	r4, r4
 80203e0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80203e4:	122e      	asrs	r6, r5, #8
 80203e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80203ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80203ee:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80203f2:	00ed      	lsls	r5, r5, #3
 80203f4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80203f8:	fb16 f604 	smulbb	r6, r6, r4
 80203fc:	b2ed      	uxtb	r5, r5
 80203fe:	fb1a fa04 	smulbb	sl, sl, r4
 8020402:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020406:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802040a:	fb15 f504 	smulbb	r5, r5, r4
 802040e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020412:	fa1f fc8c 	uxth.w	ip, ip
 8020416:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802041a:	fa5f fe8e 	uxtb.w	lr, lr
 802041e:	fb06 a607 	mla	r6, r6, r7, sl
 8020422:	f10c 0401 	add.w	r4, ip, #1
 8020426:	fb0e 5507 	mla	r5, lr, r7, r5
 802042a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802042e:	b2ad      	uxth	r5, r5
 8020430:	b2b6      	uxth	r6, r6
 8020432:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020436:	f105 0a01 	add.w	sl, r5, #1
 802043a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802043e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020442:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020446:	f106 0a01 	add.w	sl, r6, #1
 802044a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802044e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020452:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020456:	ea4c 0c0a 	orr.w	ip, ip, sl
 802045a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802045e:	e7ae      	b.n	80203be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020460:	b005      	add	sp, #20
 8020462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020466 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802046a:	b085      	sub	sp, #20
 802046c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802046e:	9203      	str	r2, [sp, #12]
 8020470:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020474:	9100      	str	r1, [sp, #0]
 8020476:	9201      	str	r2, [sp, #4]
 8020478:	6841      	ldr	r1, [r0, #4]
 802047a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 802047e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020482:	fb01 2404 	mla	r4, r1, r4, r2
 8020486:	6802      	ldr	r2, [r0, #0]
 8020488:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802048c:	f8de 2000 	ldr.w	r2, [lr]
 8020490:	9202      	str	r2, [sp, #8]
 8020492:	9a01      	ldr	r2, [sp, #4]
 8020494:	43d6      	mvns	r6, r2
 8020496:	b2f6      	uxtb	r6, r6
 8020498:	9a00      	ldr	r2, [sp, #0]
 802049a:	2a00      	cmp	r2, #0
 802049c:	dc03      	bgt.n	80204a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802049e:	9a03      	ldr	r2, [sp, #12]
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f340 8124 	ble.w	80206ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80204a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204a8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80204ac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80204b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80204b2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80204b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	dd0e      	ble.n	80204dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204be:	1408      	asrs	r0, r1, #16
 80204c0:	d405      	bmi.n	80204ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80204c2:	4560      	cmp	r0, ip
 80204c4:	da03      	bge.n	80204ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80204c6:	1410      	asrs	r0, r2, #16
 80204c8:	d401      	bmi.n	80204ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80204ca:	42b8      	cmp	r0, r7
 80204cc:	db07      	blt.n	80204de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80204ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80204d0:	3b01      	subs	r3, #1
 80204d2:	3402      	adds	r4, #2
 80204d4:	4401      	add	r1, r0
 80204d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80204d8:	4402      	add	r2, r0
 80204da:	e7ee      	b.n	80204ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80204dc:	d06e      	beq.n	80205bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80204de:	1e58      	subs	r0, r3, #1
 80204e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80204e2:	fb05 1500 	mla	r5, r5, r0, r1
 80204e6:	142d      	asrs	r5, r5, #16
 80204e8:	d45c      	bmi.n	80205a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204ea:	4565      	cmp	r5, ip
 80204ec:	da5a      	bge.n	80205a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204f0:	fb05 2000 	mla	r0, r5, r0, r2
 80204f4:	1400      	asrs	r0, r0, #16
 80204f6:	d455      	bmi.n	80205a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204f8:	42b8      	cmp	r0, r7
 80204fa:	da53      	bge.n	80205a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204fc:	4699      	mov	r9, r3
 80204fe:	46a2      	mov	sl, r4
 8020500:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8020504:	f1b9 0f00 	cmp.w	r9, #0
 8020508:	dd54      	ble.n	80205b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802050a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802050e:	140d      	asrs	r5, r1, #16
 8020510:	1410      	asrs	r0, r2, #16
 8020512:	f109 39ff 	add.w	r9, r9, #4294967295
 8020516:	fb07 5000 	mla	r0, r7, r0, r5
 802051a:	9d02      	ldr	r5, [sp, #8]
 802051c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8020520:	f8ba 5000 	ldrh.w	r5, [sl]
 8020524:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020528:	122f      	asrs	r7, r5, #8
 802052a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802052e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020532:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020536:	00ed      	lsls	r5, r5, #3
 8020538:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802053c:	fb17 f706 	smulbb	r7, r7, r6
 8020540:	b2ed      	uxtb	r5, r5
 8020542:	fb18 f806 	smulbb	r8, r8, r6
 8020546:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802054a:	10c7      	asrs	r7, r0, #3
 802054c:	fb15 f506 	smulbb	r5, r5, r6
 8020550:	00c0      	lsls	r0, r0, #3
 8020552:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020556:	fa1f fc8c 	uxth.w	ip, ip
 802055a:	b2c0      	uxtb	r0, r0
 802055c:	fb07 870b 	mla	r7, r7, fp, r8
 8020560:	fb00 500b 	mla	r0, r0, fp, r5
 8020564:	f10c 0501 	add.w	r5, ip, #1
 8020568:	b2bf      	uxth	r7, r7
 802056a:	b280      	uxth	r0, r0
 802056c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020570:	f107 0801 	add.w	r8, r7, #1
 8020574:	1c45      	adds	r5, r0, #1
 8020576:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802057a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802057e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020582:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020584:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020588:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802058c:	4401      	add	r1, r0
 802058e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020592:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020594:	ea45 0c0c 	orr.w	ip, r5, ip
 8020598:	4402      	add	r2, r0
 802059a:	ea4c 0c08 	orr.w	ip, ip, r8
 802059e:	f82a cb02 	strh.w	ip, [sl], #2
 80205a2:	e7af      	b.n	8020504 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205a4:	f04f 0800 	mov.w	r8, #0
 80205a8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80205ac:	eb03 0008 	add.w	r0, r3, r8
 80205b0:	2800      	cmp	r0, #0
 80205b2:	dc41      	bgt.n	8020638 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80205b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80205b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80205bc:	9b00      	ldr	r3, [sp, #0]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	f340 8095 	ble.w	80206ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80205c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80205c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80205ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80205ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205d2:	eef0 6a62 	vmov.f32	s13, s5
 80205d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80205da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205e2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80205e6:	eef0 6a43 	vmov.f32	s13, s6
 80205ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205ee:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80205f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020606:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802060a:	ee12 2a90 	vmov	r2, s5
 802060e:	eef0 2a47 	vmov.f32	s5, s14
 8020612:	fb92 f3f3 	sdiv	r3, r2, r3
 8020616:	ee13 2a10 	vmov	r2, s6
 802061a:	9311      	str	r3, [sp, #68]	; 0x44
 802061c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802061e:	eeb0 3a67 	vmov.f32	s6, s15
 8020622:	fb92 f3f3 	sdiv	r3, r2, r3
 8020626:	9312      	str	r3, [sp, #72]	; 0x48
 8020628:	9b00      	ldr	r3, [sp, #0]
 802062a:	9a03      	ldr	r2, [sp, #12]
 802062c:	3b01      	subs	r3, #1
 802062e:	9300      	str	r3, [sp, #0]
 8020630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020632:	bf08      	it	eq
 8020634:	4613      	moveq	r3, r2
 8020636:	e72f      	b.n	8020498 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020638:	140f      	asrs	r7, r1, #16
 802063a:	d451      	bmi.n	80206e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802063c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020640:	42bd      	cmp	r5, r7
 8020642:	dd4d      	ble.n	80206e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020644:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020648:	d44a      	bmi.n	80206e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802064a:	f8de 000c 	ldr.w	r0, [lr, #12]
 802064e:	4560      	cmp	r0, ip
 8020650:	dd46      	ble.n	80206e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020652:	b22d      	sxth	r5, r5
 8020654:	9802      	ldr	r0, [sp, #8]
 8020656:	fb0c 7505 	mla	r5, ip, r5, r7
 802065a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 802065e:	f06f 0501 	mvn.w	r5, #1
 8020662:	fb05 fb08 	mul.w	fp, r5, r8
 8020666:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802066a:	f834 500b 	ldrh.w	r5, [r4, fp]
 802066e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020672:	122f      	asrs	r7, r5, #8
 8020674:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020678:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802067c:	00ed      	lsls	r5, r5, #3
 802067e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020682:	fb17 f706 	smulbb	r7, r7, r6
 8020686:	b2ed      	uxtb	r5, r5
 8020688:	fb19 f906 	smulbb	r9, r9, r6
 802068c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020690:	10c7      	asrs	r7, r0, #3
 8020692:	fb15 f506 	smulbb	r5, r5, r6
 8020696:	00c0      	lsls	r0, r0, #3
 8020698:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802069c:	fa1f fc8c 	uxth.w	ip, ip
 80206a0:	b2c0      	uxtb	r0, r0
 80206a2:	fb07 970a 	mla	r7, r7, sl, r9
 80206a6:	fb00 500a 	mla	r0, r0, sl, r5
 80206aa:	f10c 0501 	add.w	r5, ip, #1
 80206ae:	b2bf      	uxth	r7, r7
 80206b0:	b280      	uxth	r0, r0
 80206b2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80206b6:	f107 0901 	add.w	r9, r7, #1
 80206ba:	1c45      	adds	r5, r0, #1
 80206bc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80206c0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80206c4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80206c8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80206cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80206d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80206d4:	ea45 0c0c 	orr.w	ip, r5, ip
 80206d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80206dc:	f824 c00b 	strh.w	ip, [r4, fp]
 80206e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80206e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80206e6:	4401      	add	r1, r0
 80206e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80206ea:	4402      	add	r2, r0
 80206ec:	e75e      	b.n	80205ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80206ee:	b005      	add	sp, #20
 80206f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206f8:	b085      	sub	sp, #20
 80206fa:	4693      	mov	fp, r2
 80206fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020700:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020702:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020704:	6870      	ldr	r0, [r6, #4]
 8020706:	9101      	str	r1, [sp, #4]
 8020708:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802070c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8020710:	fb00 2404 	mla	r4, r0, r4, r2
 8020714:	6832      	ldr	r2, [r6, #0]
 8020716:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802071a:	682a      	ldr	r2, [r5, #0]
 802071c:	9202      	str	r2, [sp, #8]
 802071e:	9a01      	ldr	r2, [sp, #4]
 8020720:	2a00      	cmp	r2, #0
 8020722:	dc03      	bgt.n	802072c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020724:	f1bb 0f00 	cmp.w	fp, #0
 8020728:	f340 809a 	ble.w	8020860 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802072c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802072e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020732:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020738:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802073c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020740:	2b00      	cmp	r3, #0
 8020742:	dd0c      	ble.n	802075e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020744:	1406      	asrs	r6, r0, #16
 8020746:	d405      	bmi.n	8020754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020748:	454e      	cmp	r6, r9
 802074a:	da03      	bge.n	8020754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802074c:	1416      	asrs	r6, r2, #16
 802074e:	d401      	bmi.n	8020754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020750:	4546      	cmp	r6, r8
 8020752:	db05      	blt.n	8020760 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020754:	4470      	add	r0, lr
 8020756:	4462      	add	r2, ip
 8020758:	3b01      	subs	r3, #1
 802075a:	3402      	adds	r4, #2
 802075c:	e7f0      	b.n	8020740 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802075e:	d00f      	beq.n	8020780 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020760:	1e5e      	subs	r6, r3, #1
 8020762:	fb0e 0706 	mla	r7, lr, r6, r0
 8020766:	143f      	asrs	r7, r7, #16
 8020768:	d541      	bpl.n	80207ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802076a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 802076e:	4698      	mov	r8, r3
 8020770:	9603      	str	r6, [sp, #12]
 8020772:	f1b8 0f00 	cmp.w	r8, #0
 8020776:	dc56      	bgt.n	8020826 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802077c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020780:	9b01      	ldr	r3, [sp, #4]
 8020782:	2b00      	cmp	r3, #0
 8020784:	dd6c      	ble.n	8020860 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020786:	ee30 0a04 	vadd.f32	s0, s0, s8
 802078a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802078c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020790:	eeb0 6a62 	vmov.f32	s12, s5
 8020794:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020798:	ee31 1a05 	vadd.f32	s2, s2, s10
 802079c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80207a4:	eeb0 6a43 	vmov.f32	s12, s6
 80207a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207ac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80207b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207c8:	ee12 2a90 	vmov	r2, s5
 80207cc:	eef0 2a47 	vmov.f32	s5, s14
 80207d0:	fb92 fef3 	sdiv	lr, r2, r3
 80207d4:	ee13 2a10 	vmov	r2, s6
 80207d8:	eeb0 3a67 	vmov.f32	s6, s15
 80207dc:	fb92 fcf3 	sdiv	ip, r2, r3
 80207e0:	9b01      	ldr	r3, [sp, #4]
 80207e2:	3b01      	subs	r3, #1
 80207e4:	9301      	str	r3, [sp, #4]
 80207e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207e8:	bf08      	it	eq
 80207ea:	465b      	moveq	r3, fp
 80207ec:	e797      	b.n	802071e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80207ee:	454f      	cmp	r7, r9
 80207f0:	dabb      	bge.n	802076a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207f2:	fb0c 2606 	mla	r6, ip, r6, r2
 80207f6:	1436      	asrs	r6, r6, #16
 80207f8:	d4b7      	bmi.n	802076a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207fa:	4546      	cmp	r6, r8
 80207fc:	dab5      	bge.n	802076a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207fe:	461e      	mov	r6, r3
 8020800:	46a0      	mov	r8, r4
 8020802:	2e00      	cmp	r6, #0
 8020804:	ddb8      	ble.n	8020778 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020806:	1417      	asrs	r7, r2, #16
 8020808:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802080c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020810:	9902      	ldr	r1, [sp, #8]
 8020812:	4470      	add	r0, lr
 8020814:	4462      	add	r2, ip
 8020816:	fb0a 9707 	mla	r7, sl, r7, r9
 802081a:	3e01      	subs	r6, #1
 802081c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020820:	f828 7b02 	strh.w	r7, [r8], #2
 8020824:	e7ed      	b.n	8020802 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020826:	ea5f 4920 	movs.w	r9, r0, asr #16
 802082a:	d414      	bmi.n	8020856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802082c:	68ae      	ldr	r6, [r5, #8]
 802082e:	454e      	cmp	r6, r9
 8020830:	dd11      	ble.n	8020856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020832:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020836:	d40e      	bmi.n	8020856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020838:	68ef      	ldr	r7, [r5, #12]
 802083a:	4557      	cmp	r7, sl
 802083c:	dd0b      	ble.n	8020856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802083e:	b236      	sxth	r6, r6
 8020840:	f06f 0101 	mvn.w	r1, #1
 8020844:	9f02      	ldr	r7, [sp, #8]
 8020846:	fb0a 9606 	mla	r6, sl, r6, r9
 802084a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 802084e:	fb01 f608 	mul.w	r6, r1, r8
 8020852:	9903      	ldr	r1, [sp, #12]
 8020854:	538f      	strh	r7, [r1, r6]
 8020856:	4470      	add	r0, lr
 8020858:	4462      	add	r2, ip
 802085a:	f108 38ff 	add.w	r8, r8, #4294967295
 802085e:	e788      	b.n	8020772 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020860:	b005      	add	sp, #20
 8020862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802086a:	b087      	sub	sp, #28
 802086c:	468b      	mov	fp, r1
 802086e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020872:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020874:	9203      	str	r2, [sp, #12]
 8020876:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802087a:	6841      	ldr	r1, [r0, #4]
 802087c:	9204      	str	r2, [sp, #16]
 802087e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020882:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020886:	fb01 2505 	mla	r5, r1, r5, r2
 802088a:	6802      	ldr	r2, [r0, #0]
 802088c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020890:	f8d9 2000 	ldr.w	r2, [r9]
 8020894:	9201      	str	r2, [sp, #4]
 8020896:	f1bb 0f00 	cmp.w	fp, #0
 802089a:	dc03      	bgt.n	80208a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802089c:	9a03      	ldr	r2, [sp, #12]
 802089e:	2a00      	cmp	r2, #0
 80208a0:	f340 8158 	ble.w	8020b54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80208a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208a6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80208aa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208b0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80208b4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	dd0e      	ble.n	80208da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80208bc:	1402      	asrs	r2, r0, #16
 80208be:	d405      	bmi.n	80208cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80208c0:	42ba      	cmp	r2, r7
 80208c2:	da03      	bge.n	80208cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80208c4:	140a      	asrs	r2, r1, #16
 80208c6:	d401      	bmi.n	80208cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80208c8:	42b2      	cmp	r2, r6
 80208ca:	db07      	blt.n	80208dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80208cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80208ce:	3b01      	subs	r3, #1
 80208d0:	3502      	adds	r5, #2
 80208d2:	4410      	add	r0, r2
 80208d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80208d6:	4411      	add	r1, r2
 80208d8:	e7ee      	b.n	80208b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80208da:	d017      	beq.n	802090c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80208dc:	1e5a      	subs	r2, r3, #1
 80208de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208e0:	fb04 0402 	mla	r4, r4, r2, r0
 80208e4:	1424      	asrs	r4, r4, #16
 80208e6:	d409      	bmi.n	80208fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208e8:	42bc      	cmp	r4, r7
 80208ea:	da07      	bge.n	80208fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80208ee:	fb04 1202 	mla	r2, r4, r2, r1
 80208f2:	1412      	asrs	r2, r2, #16
 80208f4:	d402      	bmi.n	80208fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208f6:	42b2      	cmp	r2, r6
 80208f8:	f2c0 80bf 	blt.w	8020a7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80208fc:	2700      	movs	r7, #0
 80208fe:	19da      	adds	r2, r3, r7
 8020900:	2a00      	cmp	r2, #0
 8020902:	dc3e      	bgt.n	8020982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020904:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020908:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 802090c:	f1bb 0f00 	cmp.w	fp, #0
 8020910:	f340 8120 	ble.w	8020b54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020914:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802091a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802091e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020922:	eeb0 6a62 	vmov.f32	s12, s5
 8020926:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802092a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802092e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020932:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020936:	eeb0 6a43 	vmov.f32	s12, s6
 802093a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802093e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020942:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020946:	ee61 7a27 	vmul.f32	s15, s2, s15
 802094a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802094e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020952:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020956:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802095a:	ee12 2a90 	vmov	r2, s5
 802095e:	eef0 2a47 	vmov.f32	s5, s14
 8020962:	fb92 f3f3 	sdiv	r3, r2, r3
 8020966:	ee13 2a10 	vmov	r2, s6
 802096a:	9313      	str	r3, [sp, #76]	; 0x4c
 802096c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802096e:	eeb0 3a67 	vmov.f32	s6, s15
 8020972:	fb92 f3f3 	sdiv	r3, r2, r3
 8020976:	9a03      	ldr	r2, [sp, #12]
 8020978:	9314      	str	r3, [sp, #80]	; 0x50
 802097a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802097c:	bf08      	it	eq
 802097e:	4613      	moveq	r3, r2
 8020980:	e789      	b.n	8020896 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020982:	1406      	asrs	r6, r0, #16
 8020984:	d42d      	bmi.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020986:	f8d9 4008 	ldr.w	r4, [r9, #8]
 802098a:	42b4      	cmp	r4, r6
 802098c:	dd29      	ble.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802098e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020992:	d426      	bmi.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020994:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020998:	4562      	cmp	r2, ip
 802099a:	dd22      	ble.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802099c:	b224      	sxth	r4, r4
 802099e:	9a01      	ldr	r2, [sp, #4]
 80209a0:	fb0c 6404 	mla	r4, ip, r4, r6
 80209a4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80209a8:	0e22      	lsrs	r2, r4, #24
 80209aa:	d01a      	beq.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80209ac:	9e04      	ldr	r6, [sp, #16]
 80209ae:	4372      	muls	r2, r6
 80209b0:	1c56      	adds	r6, r2, #1
 80209b2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80209b6:	0a26      	lsrs	r6, r4, #8
 80209b8:	1212      	asrs	r2, r2, #8
 80209ba:	9605      	str	r6, [sp, #20]
 80209bc:	2aff      	cmp	r2, #255	; 0xff
 80209be:	d116      	bne.n	80209ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80209c0:	f06f 0201 	mvn.w	r2, #1
 80209c4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80209c8:	fb02 fc07 	mul.w	ip, r2, r7
 80209cc:	0962      	lsrs	r2, r4, #5
 80209ce:	f026 0607 	bic.w	r6, r6, #7
 80209d2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80209d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80209da:	4316      	orrs	r6, r2
 80209dc:	4326      	orrs	r6, r4
 80209de:	f825 600c 	strh.w	r6, [r5, ip]
 80209e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80209e4:	3f01      	subs	r7, #1
 80209e6:	4410      	add	r0, r2
 80209e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209ea:	4411      	add	r1, r2
 80209ec:	e787      	b.n	80208fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209ee:	f06f 0601 	mvn.w	r6, #1
 80209f2:	fa1f fa82 	uxth.w	sl, r2
 80209f6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80209fa:	43d2      	mvns	r2, r2
 80209fc:	437e      	muls	r6, r7
 80209fe:	b2e4      	uxtb	r4, r4
 8020a00:	fb1c fc0a 	smulbb	ip, ip, sl
 8020a04:	b2d2      	uxtb	r2, r2
 8020a06:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020a0a:	fb14 f40a 	smulbb	r4, r4, sl
 8020a0e:	9602      	str	r6, [sp, #8]
 8020a10:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020a14:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020a18:	fb16 f60a 	smulbb	r6, r6, sl
 8020a1c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020a20:	fb0e ce02 	mla	lr, lr, r2, ip
 8020a24:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020a28:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020a2c:	fa1f fe8e 	uxth.w	lr, lr
 8020a30:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020a34:	fa5f f888 	uxtb.w	r8, r8
 8020a38:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020a3c:	fb08 4402 	mla	r4, r8, r2, r4
 8020a40:	f10e 0201 	add.w	r2, lr, #1
 8020a44:	fa1f fc8c 	uxth.w	ip, ip
 8020a48:	b2a4      	uxth	r4, r4
 8020a4a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020a4e:	9a02      	ldr	r2, [sp, #8]
 8020a50:	1c66      	adds	r6, r4, #1
 8020a52:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020a56:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020a5a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020a5e:	ea46 0e0e 	orr.w	lr, r6, lr
 8020a62:	f10c 0601 	add.w	r6, ip, #1
 8020a66:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020a6a:	0976      	lsrs	r6, r6, #5
 8020a6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a70:	ea4e 0e06 	orr.w	lr, lr, r6
 8020a74:	f825 e002 	strh.w	lr, [r5, r2]
 8020a78:	e7b3      	b.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020a7a:	f04f 0800 	mov.w	r8, #0
 8020a7e:	eba3 0208 	sub.w	r2, r3, r8
 8020a82:	2a00      	cmp	r2, #0
 8020a84:	f77f af3e 	ble.w	8020904 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a88:	1404      	asrs	r4, r0, #16
 8020a8a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020a8e:	140a      	asrs	r2, r1, #16
 8020a90:	fb06 4202 	mla	r2, r6, r2, r4
 8020a94:	9c01      	ldr	r4, [sp, #4]
 8020a96:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020a9a:	0e22      	lsrs	r2, r4, #24
 8020a9c:	d015      	beq.n	8020aca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020a9e:	9e04      	ldr	r6, [sp, #16]
 8020aa0:	4372      	muls	r2, r6
 8020aa2:	1c56      	adds	r6, r2, #1
 8020aa4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020aa8:	0a26      	lsrs	r6, r4, #8
 8020aaa:	1212      	asrs	r2, r2, #8
 8020aac:	2aff      	cmp	r2, #255	; 0xff
 8020aae:	d113      	bne.n	8020ad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020ab0:	0962      	lsrs	r2, r4, #5
 8020ab2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020ab6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020aba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020abe:	f026 0607 	bic.w	r6, r6, #7
 8020ac2:	4316      	orrs	r6, r2
 8020ac4:	4326      	orrs	r6, r4
 8020ac6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020acc:	f108 0801 	add.w	r8, r8, #1
 8020ad0:	4410      	add	r0, r2
 8020ad2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ad4:	4411      	add	r1, r2
 8020ad6:	e7d2      	b.n	8020a7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020ad8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020adc:	fa1f fa82 	uxth.w	sl, r2
 8020ae0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020ae4:	43d2      	mvns	r2, r2
 8020ae6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020aea:	fb17 f70a 	smulbb	r7, r7, sl
 8020aee:	b2d2      	uxtb	r2, r2
 8020af0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020af4:	b2e4      	uxtb	r4, r4
 8020af6:	b2f6      	uxtb	r6, r6
 8020af8:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020afc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020b00:	fb14 f40a 	smulbb	r4, r4, sl
 8020b04:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020b08:	fa1f fc8c 	uxth.w	ip, ip
 8020b0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020b10:	fb16 f60a 	smulbb	r6, r6, sl
 8020b14:	fa5f fe8e 	uxtb.w	lr, lr
 8020b18:	fb0e 4402 	mla	r4, lr, r2, r4
 8020b1c:	fb07 6702 	mla	r7, r7, r2, r6
 8020b20:	f10c 0201 	add.w	r2, ip, #1
 8020b24:	b2a4      	uxth	r4, r4
 8020b26:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020b2a:	1c66      	adds	r6, r4, #1
 8020b2c:	b2bf      	uxth	r7, r7
 8020b2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020b32:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020b36:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020b3a:	ea46 0c0c 	orr.w	ip, r6, ip
 8020b3e:	1c7e      	adds	r6, r7, #1
 8020b40:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020b44:	0976      	lsrs	r6, r6, #5
 8020b46:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020b4a:	ea4c 0c06 	orr.w	ip, ip, r6
 8020b4e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020b52:	e7ba      	b.n	8020aca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020b54:	b007      	add	sp, #28
 8020b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b60:	b085      	sub	sp, #20
 8020b62:	468b      	mov	fp, r1
 8020b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020b68:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020b6a:	9203      	str	r2, [sp, #12]
 8020b6c:	6841      	ldr	r1, [r0, #4]
 8020b6e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020b72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020b76:	fb01 2404 	mla	r4, r1, r4, r2
 8020b7a:	6802      	ldr	r2, [r0, #0]
 8020b7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020b80:	f8d8 2000 	ldr.w	r2, [r8]
 8020b84:	9201      	str	r2, [sp, #4]
 8020b86:	f1bb 0f00 	cmp.w	fp, #0
 8020b8a:	dc03      	bgt.n	8020b94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020b8c:	9a03      	ldr	r2, [sp, #12]
 8020b8e:	2a00      	cmp	r2, #0
 8020b90:	f340 814f 	ble.w	8020e32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b96:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020b9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ba0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020ba4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	dd0e      	ble.n	8020bca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020bac:	1408      	asrs	r0, r1, #16
 8020bae:	d405      	bmi.n	8020bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020bb0:	42b8      	cmp	r0, r7
 8020bb2:	da03      	bge.n	8020bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020bb4:	1410      	asrs	r0, r2, #16
 8020bb6:	d401      	bmi.n	8020bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020bb8:	42b0      	cmp	r0, r6
 8020bba:	db07      	blt.n	8020bcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020bbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020bbe:	3b01      	subs	r3, #1
 8020bc0:	3402      	adds	r4, #2
 8020bc2:	4401      	add	r1, r0
 8020bc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020bc6:	4402      	add	r2, r0
 8020bc8:	e7ee      	b.n	8020ba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020bca:	d017      	beq.n	8020bfc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020bcc:	1e58      	subs	r0, r3, #1
 8020bce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020bd0:	fb05 1500 	mla	r5, r5, r0, r1
 8020bd4:	142d      	asrs	r5, r5, #16
 8020bd6:	d409      	bmi.n	8020bec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020bd8:	42bd      	cmp	r5, r7
 8020bda:	da07      	bge.n	8020bec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020bdc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020bde:	fb05 2000 	mla	r0, r5, r0, r2
 8020be2:	1400      	asrs	r0, r0, #16
 8020be4:	d402      	bmi.n	8020bec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020be6:	42b0      	cmp	r0, r6
 8020be8:	f2c0 80ba 	blt.w	8020d60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020bec:	2600      	movs	r6, #0
 8020bee:	1998      	adds	r0, r3, r6
 8020bf0:	2800      	cmp	r0, #0
 8020bf2:	dc3e      	bgt.n	8020c72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020bf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020bf8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bfc:	f1bb 0f00 	cmp.w	fp, #0
 8020c00:	f340 8117 	ble.w	8020e32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020c04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c0e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020c12:	eeb0 6a62 	vmov.f32	s12, s5
 8020c16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c22:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020c26:	eeb0 6a43 	vmov.f32	s12, s6
 8020c2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c2e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020c32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c4a:	ee12 2a90 	vmov	r2, s5
 8020c4e:	eef0 2a47 	vmov.f32	s5, s14
 8020c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c56:	ee13 2a10 	vmov	r2, s6
 8020c5a:	9311      	str	r3, [sp, #68]	; 0x44
 8020c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c5e:	eeb0 3a67 	vmov.f32	s6, s15
 8020c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c66:	9a03      	ldr	r2, [sp, #12]
 8020c68:	9312      	str	r3, [sp, #72]	; 0x48
 8020c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c6c:	bf08      	it	eq
 8020c6e:	4613      	moveq	r3, r2
 8020c70:	e789      	b.n	8020b86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020c72:	140f      	asrs	r7, r1, #16
 8020c74:	d424      	bmi.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c76:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020c7a:	42bd      	cmp	r5, r7
 8020c7c:	dd20      	ble.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c7e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020c82:	d41d      	bmi.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c84:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020c88:	4560      	cmp	r0, ip
 8020c8a:	dd19      	ble.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020c8c:	b22d      	sxth	r5, r5
 8020c8e:	9801      	ldr	r0, [sp, #4]
 8020c90:	fb0c 7505 	mla	r5, ip, r5, r7
 8020c94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020c98:	0e07      	lsrs	r7, r0, #24
 8020c9a:	2fff      	cmp	r7, #255	; 0xff
 8020c9c:	d116      	bne.n	8020ccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020c9e:	f06f 0501 	mvn.w	r5, #1
 8020ca2:	fb05 f706 	mul.w	r7, r5, r6
 8020ca6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020caa:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020cae:	0945      	lsrs	r5, r0, #5
 8020cb0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020cb4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020cb8:	ea4c 0505 	orr.w	r5, ip, r5
 8020cbc:	4305      	orrs	r5, r0
 8020cbe:	53e5      	strh	r5, [r4, r7]
 8020cc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020cc2:	3e01      	subs	r6, #1
 8020cc4:	4401      	add	r1, r0
 8020cc6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020cc8:	4402      	add	r2, r0
 8020cca:	e790      	b.n	8020bee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020ccc:	b2fd      	uxtb	r5, r7
 8020cce:	2f00      	cmp	r7, #0
 8020cd0:	d0f6      	beq.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020cd2:	f06f 0701 	mvn.w	r7, #1
 8020cd6:	fa1f f985 	uxth.w	r9, r5
 8020cda:	43ed      	mvns	r5, r5
 8020cdc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020ce0:	4377      	muls	r7, r6
 8020ce2:	fb1a fa09 	smulbb	sl, sl, r9
 8020ce6:	b2ed      	uxtb	r5, r5
 8020ce8:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020cec:	9702      	str	r7, [sp, #8]
 8020cee:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020cf2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020cf6:	fb17 f709 	smulbb	r7, r7, r9
 8020cfa:	b2c0      	uxtb	r0, r0
 8020cfc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020d00:	fb10 f009 	smulbb	r0, r0, r9
 8020d04:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020d08:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020d0c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020d10:	fa1f fc8c 	uxth.w	ip, ip
 8020d14:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020d18:	fa5f fe8e 	uxtb.w	lr, lr
 8020d1c:	fb07 a705 	mla	r7, r7, r5, sl
 8020d20:	fb0e 0005 	mla	r0, lr, r5, r0
 8020d24:	f10c 0501 	add.w	r5, ip, #1
 8020d28:	b2bf      	uxth	r7, r7
 8020d2a:	b280      	uxth	r0, r0
 8020d2c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020d30:	f100 0a01 	add.w	sl, r0, #1
 8020d34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020d38:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020d3c:	9802      	ldr	r0, [sp, #8]
 8020d3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020d42:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020d46:	f107 0a01 	add.w	sl, r7, #1
 8020d4a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020d4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020d52:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020d56:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020d5a:	f824 c000 	strh.w	ip, [r4, r0]
 8020d5e:	e7af      	b.n	8020cc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020d60:	f04f 0e00 	mov.w	lr, #0
 8020d64:	eba3 000e 	sub.w	r0, r3, lr
 8020d68:	2800      	cmp	r0, #0
 8020d6a:	f77f af43 	ble.w	8020bf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020d6e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020d72:	140d      	asrs	r5, r1, #16
 8020d74:	1410      	asrs	r0, r2, #16
 8020d76:	fb06 5000 	mla	r0, r6, r0, r5
 8020d7a:	9d01      	ldr	r5, [sp, #4]
 8020d7c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020d80:	0e2e      	lsrs	r6, r5, #24
 8020d82:	2eff      	cmp	r6, #255	; 0xff
 8020d84:	d112      	bne.n	8020dac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020d86:	482c      	ldr	r0, [pc, #176]	; (8020e38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020d88:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020d8c:	0968      	lsrs	r0, r5, #5
 8020d8e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020d92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d96:	4330      	orrs	r0, r6
 8020d98:	4328      	orrs	r0, r5
 8020d9a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020d9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020da0:	f10e 0e01 	add.w	lr, lr, #1
 8020da4:	4401      	add	r1, r0
 8020da6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020da8:	4402      	add	r2, r0
 8020daa:	e7db      	b.n	8020d64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020dac:	b2f0      	uxtb	r0, r6
 8020dae:	2e00      	cmp	r6, #0
 8020db0:	d0f5      	beq.n	8020d9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020db2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020db6:	fa1f f980 	uxth.w	r9, r0
 8020dba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020dbe:	43c0      	mvns	r0, r0
 8020dc0:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020dc4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020dc8:	fb16 f609 	smulbb	r6, r6, r9
 8020dcc:	b2c0      	uxtb	r0, r0
 8020dce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020dd2:	b2ed      	uxtb	r5, r5
 8020dd4:	fb1a fa09 	smulbb	sl, sl, r9
 8020dd8:	fb07 6700 	mla	r7, r7, r0, r6
 8020ddc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020de0:	fb15 f509 	smulbb	r5, r5, r9
 8020de4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020de8:	b2bf      	uxth	r7, r7
 8020dea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020dee:	fa5f fc8c 	uxtb.w	ip, ip
 8020df2:	fb06 a600 	mla	r6, r6, r0, sl
 8020df6:	fb0c 5500 	mla	r5, ip, r0, r5
 8020dfa:	1c78      	adds	r0, r7, #1
 8020dfc:	b2b6      	uxth	r6, r6
 8020dfe:	b2ad      	uxth	r5, r5
 8020e00:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020e04:	f105 0a01 	add.w	sl, r5, #1
 8020e08:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020e0c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020e10:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020e14:	ea4a 0707 	orr.w	r7, sl, r7
 8020e18:	f106 0a01 	add.w	sl, r6, #1
 8020e1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020e20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e24:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e28:	ea47 070a 	orr.w	r7, r7, sl
 8020e2c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020e30:	e7b5      	b.n	8020d9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020e32:	b005      	add	sp, #20
 8020e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e38:	fffff800 	.word	0xfffff800

08020e3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e40:	b087      	sub	sp, #28
 8020e42:	468b      	mov	fp, r1
 8020e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020e48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020e4a:	9203      	str	r2, [sp, #12]
 8020e4c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020e50:	6841      	ldr	r1, [r0, #4]
 8020e52:	9204      	str	r2, [sp, #16]
 8020e54:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020e58:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020e5c:	fb01 2404 	mla	r4, r1, r4, r2
 8020e60:	6802      	ldr	r2, [r0, #0]
 8020e62:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020e66:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020e6a:	3201      	adds	r2, #1
 8020e6c:	f022 0201 	bic.w	r2, r2, #1
 8020e70:	9200      	str	r2, [sp, #0]
 8020e72:	f8d9 2000 	ldr.w	r2, [r9]
 8020e76:	9201      	str	r2, [sp, #4]
 8020e78:	f1bb 0f00 	cmp.w	fp, #0
 8020e7c:	dc03      	bgt.n	8020e86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020e7e:	9a03      	ldr	r2, [sp, #12]
 8020e80:	2a00      	cmp	r2, #0
 8020e82:	f340 816a 	ble.w	802115a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020e86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e88:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020e8c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020e90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e92:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020e96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	dd0e      	ble.n	8020ebc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020e9e:	1402      	asrs	r2, r0, #16
 8020ea0:	d405      	bmi.n	8020eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020ea2:	42ba      	cmp	r2, r7
 8020ea4:	da03      	bge.n	8020eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020ea6:	140a      	asrs	r2, r1, #16
 8020ea8:	d401      	bmi.n	8020eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020eaa:	42b2      	cmp	r2, r6
 8020eac:	db07      	blt.n	8020ebe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020eae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020eb0:	3b01      	subs	r3, #1
 8020eb2:	3402      	adds	r4, #2
 8020eb4:	4410      	add	r0, r2
 8020eb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020eb8:	4411      	add	r1, r2
 8020eba:	e7ee      	b.n	8020e9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020ebc:	d017      	beq.n	8020eee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020ebe:	1e5a      	subs	r2, r3, #1
 8020ec0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020ec2:	fb05 0502 	mla	r5, r5, r2, r0
 8020ec6:	142d      	asrs	r5, r5, #16
 8020ec8:	d409      	bmi.n	8020ede <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020eca:	42bd      	cmp	r5, r7
 8020ecc:	da07      	bge.n	8020ede <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020ece:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020ed0:	fb05 1202 	mla	r2, r5, r2, r1
 8020ed4:	1412      	asrs	r2, r2, #16
 8020ed6:	d402      	bmi.n	8020ede <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020ed8:	42b2      	cmp	r2, r6
 8020eda:	f2c0 80c8 	blt.w	802106e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020ede:	2700      	movs	r7, #0
 8020ee0:	19da      	adds	r2, r3, r7
 8020ee2:	2a00      	cmp	r2, #0
 8020ee4:	dc3e      	bgt.n	8020f64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020eea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020eee:	f1bb 0f00 	cmp.w	fp, #0
 8020ef2:	f340 8132 	ble.w	802115a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020ef6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020efc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f00:	f1bb 0b01 	subs.w	fp, fp, #1
 8020f04:	eeb0 6a62 	vmov.f32	s12, s5
 8020f08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f14:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020f18:	eeb0 6a43 	vmov.f32	s12, s6
 8020f1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f20:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020f24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f3c:	ee12 2a90 	vmov	r2, s5
 8020f40:	eef0 2a47 	vmov.f32	s5, s14
 8020f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f48:	ee13 2a10 	vmov	r2, s6
 8020f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020f50:	eeb0 3a67 	vmov.f32	s6, s15
 8020f54:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f58:	9a03      	ldr	r2, [sp, #12]
 8020f5a:	9314      	str	r3, [sp, #80]	; 0x50
 8020f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020f5e:	bf08      	it	eq
 8020f60:	4613      	moveq	r3, r2
 8020f62:	e789      	b.n	8020e78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020f64:	1405      	asrs	r5, r0, #16
 8020f66:	d436      	bmi.n	8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f68:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020f6c:	42aa      	cmp	r2, r5
 8020f6e:	dd32      	ble.n	8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f70:	140e      	asrs	r6, r1, #16
 8020f72:	d430      	bmi.n	8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f74:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020f78:	42b2      	cmp	r2, r6
 8020f7a:	dd2c      	ble.n	8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f7c:	9a00      	ldr	r2, [sp, #0]
 8020f7e:	fb06 5502 	mla	r5, r6, r2, r5
 8020f82:	9e01      	ldr	r6, [sp, #4]
 8020f84:	086a      	lsrs	r2, r5, #1
 8020f86:	5cb2      	ldrb	r2, [r6, r2]
 8020f88:	07ee      	lsls	r6, r5, #31
 8020f8a:	bf54      	ite	pl
 8020f8c:	f002 020f 	andpl.w	r2, r2, #15
 8020f90:	1112      	asrmi	r2, r2, #4
 8020f92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020f96:	b2d2      	uxtb	r2, r2
 8020f98:	b1ea      	cbz	r2, 8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f9a:	9d04      	ldr	r5, [sp, #16]
 8020f9c:	436a      	muls	r2, r5
 8020f9e:	1c55      	adds	r5, r2, #1
 8020fa0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020fa4:	4d6e      	ldr	r5, [pc, #440]	; (8021160 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020fa6:	1212      	asrs	r2, r2, #8
 8020fa8:	682d      	ldr	r5, [r5, #0]
 8020faa:	2aff      	cmp	r2, #255	; 0xff
 8020fac:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020fb0:	9605      	str	r6, [sp, #20]
 8020fb2:	d116      	bne.n	8020fe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020fb4:	f06f 0201 	mvn.w	r2, #1
 8020fb8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020fbc:	fb02 fc07 	mul.w	ip, r2, r7
 8020fc0:	096a      	lsrs	r2, r5, #5
 8020fc2:	f026 0607 	bic.w	r6, r6, #7
 8020fc6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020fca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020fce:	4316      	orrs	r6, r2
 8020fd0:	432e      	orrs	r6, r5
 8020fd2:	f824 600c 	strh.w	r6, [r4, ip]
 8020fd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020fd8:	3f01      	subs	r7, #1
 8020fda:	4410      	add	r0, r2
 8020fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020fde:	4411      	add	r1, r2
 8020fe0:	e77e      	b.n	8020ee0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020fe2:	f06f 0601 	mvn.w	r6, #1
 8020fe6:	fa1f fa82 	uxth.w	sl, r2
 8020fea:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020fee:	43d2      	mvns	r2, r2
 8020ff0:	437e      	muls	r6, r7
 8020ff2:	b2ed      	uxtb	r5, r5
 8020ff4:	fb1c fc0a 	smulbb	ip, ip, sl
 8020ff8:	b2d2      	uxtb	r2, r2
 8020ffa:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020ffe:	fb15 f50a 	smulbb	r5, r5, sl
 8021002:	9602      	str	r6, [sp, #8]
 8021004:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021008:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802100c:	fb16 f60a 	smulbb	r6, r6, sl
 8021010:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021014:	fb0e ce02 	mla	lr, lr, r2, ip
 8021018:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802101c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021020:	fa1f fe8e 	uxth.w	lr, lr
 8021024:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021028:	fa5f f888 	uxtb.w	r8, r8
 802102c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021030:	fb08 5502 	mla	r5, r8, r2, r5
 8021034:	f10e 0201 	add.w	r2, lr, #1
 8021038:	fa1f fc8c 	uxth.w	ip, ip
 802103c:	b2ad      	uxth	r5, r5
 802103e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021042:	9a02      	ldr	r2, [sp, #8]
 8021044:	1c6e      	adds	r6, r5, #1
 8021046:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802104a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802104e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021052:	ea46 0e0e 	orr.w	lr, r6, lr
 8021056:	f10c 0601 	add.w	r6, ip, #1
 802105a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802105e:	0976      	lsrs	r6, r6, #5
 8021060:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021064:	ea4e 0e06 	orr.w	lr, lr, r6
 8021068:	f824 e002 	strh.w	lr, [r4, r2]
 802106c:	e7b3      	b.n	8020fd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802106e:	f04f 0800 	mov.w	r8, #0
 8021072:	eba3 0208 	sub.w	r2, r3, r8
 8021076:	2a00      	cmp	r2, #0
 8021078:	f77f af35 	ble.w	8020ee6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802107c:	1402      	asrs	r2, r0, #16
 802107e:	9e00      	ldr	r6, [sp, #0]
 8021080:	140d      	asrs	r5, r1, #16
 8021082:	fb06 2505 	mla	r5, r6, r5, r2
 8021086:	9e01      	ldr	r6, [sp, #4]
 8021088:	086a      	lsrs	r2, r5, #1
 802108a:	07ed      	lsls	r5, r5, #31
 802108c:	5cb2      	ldrb	r2, [r6, r2]
 802108e:	bf54      	ite	pl
 8021090:	f002 020f 	andpl.w	r2, r2, #15
 8021094:	1112      	asrmi	r2, r2, #4
 8021096:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802109a:	b2d2      	uxtb	r2, r2
 802109c:	b1c2      	cbz	r2, 80210d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802109e:	9d04      	ldr	r5, [sp, #16]
 80210a0:	436a      	muls	r2, r5
 80210a2:	1c55      	adds	r5, r2, #1
 80210a4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80210a8:	4d2d      	ldr	r5, [pc, #180]	; (8021160 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80210aa:	1212      	asrs	r2, r2, #8
 80210ac:	682e      	ldr	r6, [r5, #0]
 80210ae:	2aff      	cmp	r2, #255	; 0xff
 80210b0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80210b4:	d113      	bne.n	80210de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80210b6:	0972      	lsrs	r2, r6, #5
 80210b8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80210bc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80210c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210c4:	f025 0507 	bic.w	r5, r5, #7
 80210c8:	4315      	orrs	r5, r2
 80210ca:	4335      	orrs	r5, r6
 80210cc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80210d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80210d2:	f108 0801 	add.w	r8, r8, #1
 80210d6:	4410      	add	r0, r2
 80210d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80210da:	4411      	add	r1, r2
 80210dc:	e7c9      	b.n	8021072 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80210de:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80210e2:	fa1f fa82 	uxth.w	sl, r2
 80210e6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80210ea:	43d2      	mvns	r2, r2
 80210ec:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80210f0:	fb17 f70a 	smulbb	r7, r7, sl
 80210f4:	b2d2      	uxtb	r2, r2
 80210f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80210fa:	b2f6      	uxtb	r6, r6
 80210fc:	b2ed      	uxtb	r5, r5
 80210fe:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021102:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021106:	fb16 f60a 	smulbb	r6, r6, sl
 802110a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802110e:	fa1f fc8c 	uxth.w	ip, ip
 8021112:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021116:	fb15 f50a 	smulbb	r5, r5, sl
 802111a:	fa5f fe8e 	uxtb.w	lr, lr
 802111e:	fb0e 6602 	mla	r6, lr, r2, r6
 8021122:	fb07 5702 	mla	r7, r7, r2, r5
 8021126:	f10c 0201 	add.w	r2, ip, #1
 802112a:	b2b6      	uxth	r6, r6
 802112c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021130:	1c75      	adds	r5, r6, #1
 8021132:	b2bf      	uxth	r7, r7
 8021134:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021138:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802113c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021140:	ea45 0c0c 	orr.w	ip, r5, ip
 8021144:	1c7d      	adds	r5, r7, #1
 8021146:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802114a:	096d      	lsrs	r5, r5, #5
 802114c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021150:	ea4c 0c05 	orr.w	ip, ip, r5
 8021154:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021158:	e7ba      	b.n	80210d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802115a:	b007      	add	sp, #28
 802115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021160:	200155f0 	.word	0x200155f0

08021164 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021168:	b087      	sub	sp, #28
 802116a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802116e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8021478 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021172:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021174:	9101      	str	r1, [sp, #4]
 8021176:	9205      	str	r2, [sp, #20]
 8021178:	6841      	ldr	r1, [r0, #4]
 802117a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802117e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021182:	fb01 2404 	mla	r4, r1, r4, r2
 8021186:	6802      	ldr	r2, [r0, #0]
 8021188:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802118c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021190:	3201      	adds	r2, #1
 8021192:	f022 0201 	bic.w	r2, r2, #1
 8021196:	9202      	str	r2, [sp, #8]
 8021198:	f8db 2000 	ldr.w	r2, [fp]
 802119c:	9203      	str	r2, [sp, #12]
 802119e:	9a01      	ldr	r2, [sp, #4]
 80211a0:	2a00      	cmp	r2, #0
 80211a2:	dc03      	bgt.n	80211ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80211a4:	9a05      	ldr	r2, [sp, #20]
 80211a6:	2a00      	cmp	r2, #0
 80211a8:	f340 8162 	ble.w	8021470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80211ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80211ae:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80211b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80211b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80211b8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80211bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	dd0e      	ble.n	80211e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80211c4:	1402      	asrs	r2, r0, #16
 80211c6:	d405      	bmi.n	80211d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80211c8:	42ba      	cmp	r2, r7
 80211ca:	da03      	bge.n	80211d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80211cc:	140a      	asrs	r2, r1, #16
 80211ce:	d401      	bmi.n	80211d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80211d0:	42b2      	cmp	r2, r6
 80211d2:	db07      	blt.n	80211e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80211d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80211d6:	3b01      	subs	r3, #1
 80211d8:	3402      	adds	r4, #2
 80211da:	4410      	add	r0, r2
 80211dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211de:	4411      	add	r1, r2
 80211e0:	e7ee      	b.n	80211c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80211e2:	d017      	beq.n	8021214 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80211e4:	1e5a      	subs	r2, r3, #1
 80211e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80211e8:	fb05 0502 	mla	r5, r5, r2, r0
 80211ec:	142d      	asrs	r5, r5, #16
 80211ee:	d409      	bmi.n	8021204 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211f0:	42bd      	cmp	r5, r7
 80211f2:	da07      	bge.n	8021204 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80211f6:	fb05 1202 	mla	r2, r5, r2, r1
 80211fa:	1412      	asrs	r2, r2, #16
 80211fc:	d402      	bmi.n	8021204 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211fe:	42b2      	cmp	r2, r6
 8021200:	f2c0 80c3 	blt.w	802138a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021204:	2500      	movs	r5, #0
 8021206:	195a      	adds	r2, r3, r5
 8021208:	2a00      	cmp	r2, #0
 802120a:	dc3f      	bgt.n	802128c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802120c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021210:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021214:	9b01      	ldr	r3, [sp, #4]
 8021216:	2b00      	cmp	r3, #0
 8021218:	f340 812a 	ble.w	8021470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802121c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021222:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021226:	eeb0 6a62 	vmov.f32	s12, s5
 802122a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802122e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021232:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021236:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802123a:	eeb0 6a43 	vmov.f32	s12, s6
 802123e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021242:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021246:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802124a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802124e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021256:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802125a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802125e:	ee12 2a90 	vmov	r2, s5
 8021262:	eef0 2a47 	vmov.f32	s5, s14
 8021266:	fb92 f3f3 	sdiv	r3, r2, r3
 802126a:	ee13 2a10 	vmov	r2, s6
 802126e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021270:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021272:	eeb0 3a67 	vmov.f32	s6, s15
 8021276:	fb92 f3f3 	sdiv	r3, r2, r3
 802127a:	9314      	str	r3, [sp, #80]	; 0x50
 802127c:	9b01      	ldr	r3, [sp, #4]
 802127e:	9a05      	ldr	r2, [sp, #20]
 8021280:	3b01      	subs	r3, #1
 8021282:	9301      	str	r3, [sp, #4]
 8021284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021286:	bf08      	it	eq
 8021288:	4613      	moveq	r3, r2
 802128a:	e788      	b.n	802119e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802128c:	1406      	asrs	r6, r0, #16
 802128e:	d42c      	bmi.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021290:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021294:	42b2      	cmp	r2, r6
 8021296:	dd28      	ble.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021298:	140f      	asrs	r7, r1, #16
 802129a:	d426      	bmi.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802129c:	f8db 200c 	ldr.w	r2, [fp, #12]
 80212a0:	42ba      	cmp	r2, r7
 80212a2:	dd22      	ble.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80212a4:	9a02      	ldr	r2, [sp, #8]
 80212a6:	fb07 6602 	mla	r6, r7, r2, r6
 80212aa:	9f03      	ldr	r7, [sp, #12]
 80212ac:	0872      	lsrs	r2, r6, #1
 80212ae:	07f6      	lsls	r6, r6, #31
 80212b0:	5cba      	ldrb	r2, [r7, r2]
 80212b2:	bf54      	ite	pl
 80212b4:	f002 020f 	andpl.w	r2, r2, #15
 80212b8:	1112      	asrmi	r2, r2, #4
 80212ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80212be:	b2d2      	uxtb	r2, r2
 80212c0:	2aff      	cmp	r2, #255	; 0xff
 80212c2:	d118      	bne.n	80212f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80212c4:	f06f 0601 	mvn.w	r6, #1
 80212c8:	f8d8 2000 	ldr.w	r2, [r8]
 80212cc:	fb06 f705 	mul.w	r7, r6, r5
 80212d0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80212d4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80212d8:	0956      	lsrs	r6, r2, #5
 80212da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80212de:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80212e2:	ea4c 0606 	orr.w	r6, ip, r6
 80212e6:	4316      	orrs	r6, r2
 80212e8:	53e6      	strh	r6, [r4, r7]
 80212ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80212ec:	3d01      	subs	r5, #1
 80212ee:	4410      	add	r0, r2
 80212f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80212f2:	4411      	add	r1, r2
 80212f4:	e787      	b.n	8021206 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80212f6:	2a00      	cmp	r2, #0
 80212f8:	d0f7      	beq.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80212fa:	f06f 0601 	mvn.w	r6, #1
 80212fe:	f8d8 c000 	ldr.w	ip, [r8]
 8021302:	fa1f f982 	uxth.w	r9, r2
 8021306:	43d2      	mvns	r2, r2
 8021308:	436e      	muls	r6, r5
 802130a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802130e:	b2d2      	uxtb	r2, r2
 8021310:	f834 e006 	ldrh.w	lr, [r4, r6]
 8021314:	fb1a fa09 	smulbb	sl, sl, r9
 8021318:	9604      	str	r6, [sp, #16]
 802131a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802131e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8021322:	fb16 f609 	smulbb	r6, r6, r9
 8021326:	fa5f fc8c 	uxtb.w	ip, ip
 802132a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802132e:	fb1c fc09 	smulbb	ip, ip, r9
 8021332:	fb07 6702 	mla	r7, r7, r2, r6
 8021336:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802133a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802133e:	b2bf      	uxth	r7, r7
 8021340:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021344:	fa5f fe8e 	uxtb.w	lr, lr
 8021348:	fb06 a602 	mla	r6, r6, r2, sl
 802134c:	fb0e cc02 	mla	ip, lr, r2, ip
 8021350:	1c7a      	adds	r2, r7, #1
 8021352:	b2b6      	uxth	r6, r6
 8021354:	fa1f fc8c 	uxth.w	ip, ip
 8021358:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802135c:	9a04      	ldr	r2, [sp, #16]
 802135e:	f10c 0a01 	add.w	sl, ip, #1
 8021362:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021366:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802136a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802136e:	ea4a 0707 	orr.w	r7, sl, r7
 8021372:	f106 0a01 	add.w	sl, r6, #1
 8021376:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802137a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802137e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021382:	ea47 070a 	orr.w	r7, r7, sl
 8021386:	52a7      	strh	r7, [r4, r2]
 8021388:	e7af      	b.n	80212ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802138a:	f04f 0e00 	mov.w	lr, #0
 802138e:	eba3 020e 	sub.w	r2, r3, lr
 8021392:	2a00      	cmp	r2, #0
 8021394:	f77f af3a 	ble.w	802120c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021398:	1402      	asrs	r2, r0, #16
 802139a:	9e02      	ldr	r6, [sp, #8]
 802139c:	140d      	asrs	r5, r1, #16
 802139e:	fb06 2505 	mla	r5, r6, r5, r2
 80213a2:	9e03      	ldr	r6, [sp, #12]
 80213a4:	086a      	lsrs	r2, r5, #1
 80213a6:	07ed      	lsls	r5, r5, #31
 80213a8:	5cb2      	ldrb	r2, [r6, r2]
 80213aa:	bf54      	ite	pl
 80213ac:	f002 020f 	andpl.w	r2, r2, #15
 80213b0:	1112      	asrmi	r2, r2, #4
 80213b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80213b6:	b2d2      	uxtb	r2, r2
 80213b8:	2aff      	cmp	r2, #255	; 0xff
 80213ba:	d115      	bne.n	80213e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80213bc:	f8d8 5000 	ldr.w	r5, [r8]
 80213c0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80213c4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80213c8:	096a      	lsrs	r2, r5, #5
 80213ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80213ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80213d2:	4332      	orrs	r2, r6
 80213d4:	432a      	orrs	r2, r5
 80213d6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80213da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80213dc:	f10e 0e01 	add.w	lr, lr, #1
 80213e0:	4410      	add	r0, r2
 80213e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80213e4:	4411      	add	r1, r2
 80213e6:	e7d2      	b.n	802138e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80213e8:	2a00      	cmp	r2, #0
 80213ea:	d0f6      	beq.n	80213da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80213ec:	f8d8 7000 	ldr.w	r7, [r8]
 80213f0:	fa1f f982 	uxth.w	r9, r2
 80213f4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80213f8:	43d2      	mvns	r2, r2
 80213fa:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80213fe:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8021402:	ea4f 262c 	mov.w	r6, ip, asr #8
 8021406:	fb15 f509 	smulbb	r5, r5, r9
 802140a:	b2d2      	uxtb	r2, r2
 802140c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021410:	b2ff      	uxtb	r7, r7
 8021412:	fb1a fa09 	smulbb	sl, sl, r9
 8021416:	fb06 5602 	mla	r6, r6, r2, r5
 802141a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802141e:	fb17 f709 	smulbb	r7, r7, r9
 8021422:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021426:	b2b6      	uxth	r6, r6
 8021428:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802142c:	fa5f fc8c 	uxtb.w	ip, ip
 8021430:	fb05 a502 	mla	r5, r5, r2, sl
 8021434:	fb0c 7702 	mla	r7, ip, r2, r7
 8021438:	1c72      	adds	r2, r6, #1
 802143a:	b2ad      	uxth	r5, r5
 802143c:	b2bf      	uxth	r7, r7
 802143e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021442:	f107 0a01 	add.w	sl, r7, #1
 8021446:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802144a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802144e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021452:	ea4a 0606 	orr.w	r6, sl, r6
 8021456:	f105 0a01 	add.w	sl, r5, #1
 802145a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802145e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021462:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021466:	ea46 060a 	orr.w	r6, r6, sl
 802146a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802146e:	e7b4      	b.n	80213da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021470:	b007      	add	sp, #28
 8021472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021476:	bf00      	nop
 8021478:	200155f0 	.word	0x200155f0

0802147c <_ZN8touchgfx8LCD16bppD1Ev>:
 802147c:	4770      	bx	lr

0802147e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 802147e:	4770      	bx	lr

08021480 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021480:	4770      	bx	lr

08021482 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021482:	4770      	bx	lr

08021484 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021484:	4770      	bx	lr

08021486 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021486:	4770      	bx	lr

08021488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021488:	4770      	bx	lr

0802148a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802148a:	4770      	bx	lr

0802148c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802148c:	4770      	bx	lr

0802148e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802148e:	4770      	bx	lr

08021490 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021490:	4770      	bx	lr

08021492 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021492:	4770      	bx	lr

08021494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021494:	4770      	bx	lr

08021496 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021496:	4770      	bx	lr

08021498 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021498:	4770      	bx	lr

0802149a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802149a:	4770      	bx	lr

0802149c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802149c:	4770      	bx	lr

0802149e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802149e:	4770      	bx	lr

080214a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80214a0:	4770      	bx	lr

080214a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80214a2:	4770      	bx	lr

080214a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80214a4:	4770      	bx	lr

080214a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80214a6:	4770      	bx	lr

080214a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80214a8:	4770      	bx	lr

080214aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80214aa:	4770      	bx	lr

080214ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80214ac:	4770      	bx	lr

080214ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80214ae:	4770      	bx	lr

080214b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80214b0:	4770      	bx	lr

080214b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80214b2:	4770      	bx	lr

080214b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80214b4:	4770      	bx	lr

080214b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80214b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214ba:	b088      	sub	sp, #32
 80214bc:	4606      	mov	r6, r0
 80214be:	4688      	mov	r8, r1
 80214c0:	4691      	mov	r9, r2
 80214c2:	ac08      	add	r4, sp, #32
 80214c4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80214c8:	4620      	mov	r0, r4
 80214ca:	f7fd fc65 	bl	801ed98 <_ZNK8touchgfx6Bitmap7getDataEv>
 80214ce:	6833      	ldr	r3, [r6, #0]
 80214d0:	4605      	mov	r5, r0
 80214d2:	4620      	mov	r0, r4
 80214d4:	699f      	ldr	r7, [r3, #24]
 80214d6:	f7fd fb73 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80214da:	4682      	mov	sl, r0
 80214dc:	4620      	mov	r0, r4
 80214de:	f7fd fba3 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80214e2:	9500      	str	r5, [sp, #0]
 80214e4:	464b      	mov	r3, r9
 80214e6:	4642      	mov	r2, r8
 80214e8:	4631      	mov	r1, r6
 80214ea:	e9cd a001 	strd	sl, r0, [sp, #4]
 80214ee:	a806      	add	r0, sp, #24
 80214f0:	47b8      	blx	r7
 80214f2:	4628      	mov	r0, r5
 80214f4:	b008      	add	sp, #32
 80214f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080214fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80214fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021500:	2300      	movs	r3, #0
 8021502:	9300      	str	r3, [sp, #0]
 8021504:	4b3d      	ldr	r3, [pc, #244]	; (80215fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8021506:	781b      	ldrb	r3, [r3, #0]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d137      	bne.n	802157c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 802150c:	4a3c      	ldr	r2, [pc, #240]	; (8021600 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802150e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021512:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d132      	bne.n	8021580 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802151a:	4b3a      	ldr	r3, [pc, #232]	; (8021604 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021520:	ac02      	add	r4, sp, #8
 8021522:	6808      	ldr	r0, [r1, #0]
 8021524:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021528:	ab02      	add	r3, sp, #8
 802152a:	6849      	ldr	r1, [r1, #4]
 802152c:	4d36      	ldr	r5, [pc, #216]	; (8021608 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802152e:	c303      	stmia	r3!, {r0, r1}
 8021530:	4669      	mov	r1, sp
 8021532:	4620      	mov	r0, r4
 8021534:	f7fa f9ea 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021538:	4668      	mov	r0, sp
 802153a:	f7fa f9bf 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802153e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021542:	f8bd 2000 	ldrh.w	r2, [sp]
 8021546:	462f      	mov	r7, r5
 8021548:	6828      	ldr	r0, [r5, #0]
 802154a:	4413      	add	r3, r2
 802154c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021550:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021554:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021558:	4413      	add	r3, r2
 802155a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802155e:	6803      	ldr	r3, [r0, #0]
 8021560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021562:	4798      	blx	r3
 8021564:	f010 0f01 	tst.w	r0, #1
 8021568:	d00c      	beq.n	8021584 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802156a:	6828      	ldr	r0, [r5, #0]
 802156c:	6803      	ldr	r3, [r0, #0]
 802156e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021574:	4798      	blx	r3
 8021576:	b004      	add	sp, #16
 8021578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802157c:	4a21      	ldr	r2, [pc, #132]	; (8021604 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802157e:	e7c6      	b.n	802150e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021580:	4b1f      	ldr	r3, [pc, #124]	; (8021600 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021582:	e7cb      	b.n	802151c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021584:	6838      	ldr	r0, [r7, #0]
 8021586:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802158a:	6803      	ldr	r3, [r0, #0]
 802158c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8021590:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021596:	4798      	blx	r3
 8021598:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802159c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80215a0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80215a4:	fb16 3602 	smlabb	r6, r6, r2, r3
 80215a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80215ac:	6838      	ldr	r0, [r7, #0]
 80215ae:	6803      	ldr	r3, [r0, #0]
 80215b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215b2:	4798      	blx	r3
 80215b4:	4a12      	ldr	r2, [pc, #72]	; (8021600 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80215b6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80215ba:	8813      	ldrh	r3, [r2, #0]
 80215bc:	4691      	mov	r9, r2
 80215be:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80215c2:	435d      	muls	r5, r3
 80215c4:	fb03 1404 	mla	r4, r3, r4, r1
 80215c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80215cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80215d0:	6838      	ldr	r0, [r7, #0]
 80215d2:	42ac      	cmp	r4, r5
 80215d4:	6803      	ldr	r3, [r0, #0]
 80215d6:	d20e      	bcs.n	80215f6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80215d8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80215dc:	4632      	mov	r2, r6
 80215de:	4643      	mov	r3, r8
 80215e0:	4621      	mov	r1, r4
 80215e2:	47d0      	blx	sl
 80215e4:	f8b9 3000 	ldrh.w	r3, [r9]
 80215e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80215ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80215f0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80215f4:	e7ec      	b.n	80215d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80215f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215f8:	4798      	blx	r3
 80215fa:	e7bc      	b.n	8021576 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80215fc:	200155e0 	.word	0x200155e0
 8021600:	200155e2 	.word	0x200155e2
 8021604:	200155e4 	.word	0x200155e4
 8021608:	200155e8 	.word	0x200155e8

0802160c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 802160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021610:	b08b      	sub	sp, #44	; 0x2c
 8021612:	460f      	mov	r7, r1
 8021614:	4616      	mov	r6, r2
 8021616:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802161a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802161e:	f1bb 0f00 	cmp.w	fp, #0
 8021622:	d049      	beq.n	80216b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021624:	6810      	ldr	r0, [r2, #0]
 8021626:	ad06      	add	r5, sp, #24
 8021628:	6851      	ldr	r1, [r2, #4]
 802162a:	c503      	stmia	r5!, {r0, r1}
 802162c:	6818      	ldr	r0, [r3, #0]
 802162e:	ad08      	add	r5, sp, #32
 8021630:	6859      	ldr	r1, [r3, #4]
 8021632:	c503      	stmia	r5!, {r0, r1}
 8021634:	a806      	add	r0, sp, #24
 8021636:	f7fa f941 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802163a:	4631      	mov	r1, r6
 802163c:	a808      	add	r0, sp, #32
 802163e:	f7fa f965 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021642:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021646:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802164a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802164e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021652:	fb16 2103 	smlabb	r1, r6, r3, r2
 8021656:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802165a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 802165e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021662:	4f5f      	ldr	r7, [pc, #380]	; (80217e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021664:	440a      	add	r2, r1
 8021666:	6838      	ldr	r0, [r7, #0]
 8021668:	46b9      	mov	r9, r7
 802166a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802166e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021672:	4413      	add	r3, r2
 8021674:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021678:	6803      	ldr	r3, [r0, #0]
 802167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802167c:	4798      	blx	r3
 802167e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021682:	d01c      	beq.n	80216be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021684:	f010 0f04 	tst.w	r0, #4
 8021688:	d01d      	beq.n	80216c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802168a:	f8d9 0000 	ldr.w	r0, [r9]
 802168e:	2700      	movs	r7, #0
 8021690:	b2ad      	uxth	r5, r5
 8021692:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021696:	6801      	ldr	r1, [r0, #0]
 8021698:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802169c:	f8cd b00c 	str.w	fp, [sp, #12]
 80216a0:	9501      	str	r5, [sp, #4]
 80216a2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80216a6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80216aa:	9402      	str	r4, [sp, #8]
 80216ac:	fa1f f488 	uxth.w	r4, r8
 80216b0:	9400      	str	r4, [sp, #0]
 80216b2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80216b4:	4631      	mov	r1, r6
 80216b6:	47a0      	blx	r4
 80216b8:	b00b      	add	sp, #44	; 0x2c
 80216ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216be:	b914      	cbnz	r4, 80216c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80216c0:	f010 0f01 	tst.w	r0, #1
 80216c4:	e7e0      	b.n	8021688 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80216c6:	f8d9 0000 	ldr.w	r0, [r9]
 80216ca:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80216ce:	6803      	ldr	r3, [r0, #0]
 80216d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216d2:	4798      	blx	r3
 80216d4:	4b43      	ldr	r3, [pc, #268]	; (80217e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80216d6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80216da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80216de:	881a      	ldrh	r2, [r3, #0]
 80216e0:	469a      	mov	sl, r3
 80216e2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80216e6:	fb05 f502 	mul.w	r5, r5, r2
 80216ea:	fb02 1404 	mla	r4, r2, r4, r1
 80216ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80216f2:	d059      	beq.n	80217a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80216f4:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80216f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80216fc:	fa1f f28b 	uxth.w	r2, fp
 8021700:	469e      	mov	lr, r3
 8021702:	fa1f f989 	uxth.w	r9, r9
 8021706:	42ac      	cmp	r4, r5
 8021708:	d264      	bcs.n	80217d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802170a:	eb04 0a07 	add.w	sl, r4, r7
 802170e:	4554      	cmp	r4, sl
 8021710:	d23d      	bcs.n	802178e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8021712:	8821      	ldrh	r1, [r4, #0]
 8021714:	f836 3b02 	ldrh.w	r3, [r6], #2
 8021718:	1208      	asrs	r0, r1, #8
 802171a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802171e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021722:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8021726:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802172a:	00c9      	lsls	r1, r1, #3
 802172c:	fb10 f009 	smulbb	r0, r0, r9
 8021730:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021734:	b2c9      	uxtb	r1, r1
 8021736:	fb0c 0c02 	mla	ip, ip, r2, r0
 802173a:	10d8      	asrs	r0, r3, #3
 802173c:	fb1b fb09 	smulbb	fp, fp, r9
 8021740:	00db      	lsls	r3, r3, #3
 8021742:	fa1f fc8c 	uxth.w	ip, ip
 8021746:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802174a:	fb11 f109 	smulbb	r1, r1, r9
 802174e:	b2db      	uxtb	r3, r3
 8021750:	fb00 b002 	mla	r0, r0, r2, fp
 8021754:	f10c 0b01 	add.w	fp, ip, #1
 8021758:	fb03 1302 	mla	r3, r3, r2, r1
 802175c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021760:	b29b      	uxth	r3, r3
 8021762:	b280      	uxth	r0, r0
 8021764:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8021768:	f103 0c01 	add.w	ip, r3, #1
 802176c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021770:	1c43      	adds	r3, r0, #1
 8021772:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021776:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802177a:	0940      	lsrs	r0, r0, #5
 802177c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021780:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021784:	ea4c 0c00 	orr.w	ip, ip, r0
 8021788:	f824 cb02 	strh.w	ip, [r4], #2
 802178c:	e7bf      	b.n	802170e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 802178e:	f8be 3000 	ldrh.w	r3, [lr]
 8021792:	eba3 0308 	sub.w	r3, r3, r8
 8021796:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802179a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802179e:	eba3 0308 	sub.w	r3, r3, r8
 80217a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80217a6:	e7ae      	b.n	8021706 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80217a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80217ac:	f8d9 0000 	ldr.w	r0, [r9]
 80217b0:	42ac      	cmp	r4, r5
 80217b2:	6803      	ldr	r3, [r0, #0]
 80217b4:	d20e      	bcs.n	80217d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80217b6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80217ba:	4632      	mov	r2, r6
 80217bc:	463b      	mov	r3, r7
 80217be:	4621      	mov	r1, r4
 80217c0:	47c0      	blx	r8
 80217c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80217c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80217ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80217ce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80217d2:	e7eb      	b.n	80217ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80217d4:	4b02      	ldr	r3, [pc, #8]	; (80217e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80217d6:	6818      	ldr	r0, [r3, #0]
 80217d8:	6803      	ldr	r3, [r0, #0]
 80217da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217dc:	4798      	blx	r3
 80217de:	e76b      	b.n	80216b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80217e0:	200155e8 	.word	0x200155e8
 80217e4:	200155e2 	.word	0x200155e2

080217e8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80217e8:	b510      	push	{r4, lr}
 80217ea:	4604      	mov	r4, r0
 80217ec:	2178      	movs	r1, #120	; 0x78
 80217ee:	f008 ffe9 	bl	802a7c4 <_ZdlPvj>
 80217f2:	4620      	mov	r0, r4
 80217f4:	bd10      	pop	{r4, pc}

080217f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80217f6:	b510      	push	{r4, lr}
 80217f8:	4604      	mov	r4, r0
 80217fa:	2104      	movs	r1, #4
 80217fc:	f008 ffe2 	bl	802a7c4 <_ZdlPvj>
 8021800:	4620      	mov	r0, r4
 8021802:	bd10      	pop	{r4, pc}

08021804 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021804:	b510      	push	{r4, lr}
 8021806:	4604      	mov	r4, r0
 8021808:	2104      	movs	r1, #4
 802180a:	f008 ffdb 	bl	802a7c4 <_ZdlPvj>
 802180e:	4620      	mov	r0, r4
 8021810:	bd10      	pop	{r4, pc}

08021812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021812:	b510      	push	{r4, lr}
 8021814:	4604      	mov	r4, r0
 8021816:	2104      	movs	r1, #4
 8021818:	f008 ffd4 	bl	802a7c4 <_ZdlPvj>
 802181c:	4620      	mov	r0, r4
 802181e:	bd10      	pop	{r4, pc}

08021820 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021820:	b510      	push	{r4, lr}
 8021822:	4604      	mov	r4, r0
 8021824:	2104      	movs	r1, #4
 8021826:	f008 ffcd 	bl	802a7c4 <_ZdlPvj>
 802182a:	4620      	mov	r0, r4
 802182c:	bd10      	pop	{r4, pc}

0802182e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802182e:	b510      	push	{r4, lr}
 8021830:	4604      	mov	r4, r0
 8021832:	2104      	movs	r1, #4
 8021834:	f008 ffc6 	bl	802a7c4 <_ZdlPvj>
 8021838:	4620      	mov	r0, r4
 802183a:	bd10      	pop	{r4, pc}

0802183c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802183c:	b510      	push	{r4, lr}
 802183e:	4604      	mov	r4, r0
 8021840:	2104      	movs	r1, #4
 8021842:	f008 ffbf 	bl	802a7c4 <_ZdlPvj>
 8021846:	4620      	mov	r0, r4
 8021848:	bd10      	pop	{r4, pc}

0802184a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802184a:	b510      	push	{r4, lr}
 802184c:	4604      	mov	r4, r0
 802184e:	2104      	movs	r1, #4
 8021850:	f008 ffb8 	bl	802a7c4 <_ZdlPvj>
 8021854:	4620      	mov	r0, r4
 8021856:	bd10      	pop	{r4, pc}

08021858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021858:	b510      	push	{r4, lr}
 802185a:	4604      	mov	r4, r0
 802185c:	2104      	movs	r1, #4
 802185e:	f008 ffb1 	bl	802a7c4 <_ZdlPvj>
 8021862:	4620      	mov	r0, r4
 8021864:	bd10      	pop	{r4, pc}

08021866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021866:	b510      	push	{r4, lr}
 8021868:	4604      	mov	r4, r0
 802186a:	2104      	movs	r1, #4
 802186c:	f008 ffaa 	bl	802a7c4 <_ZdlPvj>
 8021870:	4620      	mov	r0, r4
 8021872:	bd10      	pop	{r4, pc}

08021874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021874:	b510      	push	{r4, lr}
 8021876:	4604      	mov	r4, r0
 8021878:	2104      	movs	r1, #4
 802187a:	f008 ffa3 	bl	802a7c4 <_ZdlPvj>
 802187e:	4620      	mov	r0, r4
 8021880:	bd10      	pop	{r4, pc}

08021882 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021882:	b510      	push	{r4, lr}
 8021884:	4604      	mov	r4, r0
 8021886:	2104      	movs	r1, #4
 8021888:	f008 ff9c 	bl	802a7c4 <_ZdlPvj>
 802188c:	4620      	mov	r0, r4
 802188e:	bd10      	pop	{r4, pc}

08021890 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021890:	b510      	push	{r4, lr}
 8021892:	4604      	mov	r4, r0
 8021894:	2104      	movs	r1, #4
 8021896:	f008 ff95 	bl	802a7c4 <_ZdlPvj>
 802189a:	4620      	mov	r0, r4
 802189c:	bd10      	pop	{r4, pc}

0802189e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802189e:	b510      	push	{r4, lr}
 80218a0:	4604      	mov	r4, r0
 80218a2:	2104      	movs	r1, #4
 80218a4:	f008 ff8e 	bl	802a7c4 <_ZdlPvj>
 80218a8:	4620      	mov	r0, r4
 80218aa:	bd10      	pop	{r4, pc}

080218ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80218ac:	b510      	push	{r4, lr}
 80218ae:	4604      	mov	r4, r0
 80218b0:	2104      	movs	r1, #4
 80218b2:	f008 ff87 	bl	802a7c4 <_ZdlPvj>
 80218b6:	4620      	mov	r0, r4
 80218b8:	bd10      	pop	{r4, pc}

080218ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80218ba:	b510      	push	{r4, lr}
 80218bc:	4604      	mov	r4, r0
 80218be:	2104      	movs	r1, #4
 80218c0:	f008 ff80 	bl	802a7c4 <_ZdlPvj>
 80218c4:	4620      	mov	r0, r4
 80218c6:	bd10      	pop	{r4, pc}

080218c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80218c8:	b510      	push	{r4, lr}
 80218ca:	4604      	mov	r4, r0
 80218cc:	2104      	movs	r1, #4
 80218ce:	f008 ff79 	bl	802a7c4 <_ZdlPvj>
 80218d2:	4620      	mov	r0, r4
 80218d4:	bd10      	pop	{r4, pc}

080218d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80218d6:	b510      	push	{r4, lr}
 80218d8:	4604      	mov	r4, r0
 80218da:	2104      	movs	r1, #4
 80218dc:	f008 ff72 	bl	802a7c4 <_ZdlPvj>
 80218e0:	4620      	mov	r0, r4
 80218e2:	bd10      	pop	{r4, pc}

080218e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80218e4:	b510      	push	{r4, lr}
 80218e6:	4604      	mov	r4, r0
 80218e8:	2104      	movs	r1, #4
 80218ea:	f008 ff6b 	bl	802a7c4 <_ZdlPvj>
 80218ee:	4620      	mov	r0, r4
 80218f0:	bd10      	pop	{r4, pc}

080218f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80218f2:	b510      	push	{r4, lr}
 80218f4:	4604      	mov	r4, r0
 80218f6:	2104      	movs	r1, #4
 80218f8:	f008 ff64 	bl	802a7c4 <_ZdlPvj>
 80218fc:	4620      	mov	r0, r4
 80218fe:	bd10      	pop	{r4, pc}

08021900 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021900:	b510      	push	{r4, lr}
 8021902:	4604      	mov	r4, r0
 8021904:	2104      	movs	r1, #4
 8021906:	f008 ff5d 	bl	802a7c4 <_ZdlPvj>
 802190a:	4620      	mov	r0, r4
 802190c:	bd10      	pop	{r4, pc}

0802190e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802190e:	b510      	push	{r4, lr}
 8021910:	4604      	mov	r4, r0
 8021912:	2104      	movs	r1, #4
 8021914:	f008 ff56 	bl	802a7c4 <_ZdlPvj>
 8021918:	4620      	mov	r0, r4
 802191a:	bd10      	pop	{r4, pc}

0802191c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802191c:	b510      	push	{r4, lr}
 802191e:	4604      	mov	r4, r0
 8021920:	2104      	movs	r1, #4
 8021922:	f008 ff4f 	bl	802a7c4 <_ZdlPvj>
 8021926:	4620      	mov	r0, r4
 8021928:	bd10      	pop	{r4, pc}

0802192a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802192a:	b510      	push	{r4, lr}
 802192c:	4604      	mov	r4, r0
 802192e:	2104      	movs	r1, #4
 8021930:	f008 ff48 	bl	802a7c4 <_ZdlPvj>
 8021934:	4620      	mov	r0, r4
 8021936:	bd10      	pop	{r4, pc}

08021938 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021938:	b510      	push	{r4, lr}
 802193a:	4604      	mov	r4, r0
 802193c:	2104      	movs	r1, #4
 802193e:	f008 ff41 	bl	802a7c4 <_ZdlPvj>
 8021942:	4620      	mov	r0, r4
 8021944:	bd10      	pop	{r4, pc}

08021946 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021946:	b510      	push	{r4, lr}
 8021948:	4604      	mov	r4, r0
 802194a:	2104      	movs	r1, #4
 802194c:	f008 ff3a 	bl	802a7c4 <_ZdlPvj>
 8021950:	4620      	mov	r0, r4
 8021952:	bd10      	pop	{r4, pc}

08021954 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021954:	b510      	push	{r4, lr}
 8021956:	4604      	mov	r4, r0
 8021958:	2104      	movs	r1, #4
 802195a:	f008 ff33 	bl	802a7c4 <_ZdlPvj>
 802195e:	4620      	mov	r0, r4
 8021960:	bd10      	pop	{r4, pc}

08021962 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021962:	b510      	push	{r4, lr}
 8021964:	4604      	mov	r4, r0
 8021966:	2104      	movs	r1, #4
 8021968:	f008 ff2c 	bl	802a7c4 <_ZdlPvj>
 802196c:	4620      	mov	r0, r4
 802196e:	bd10      	pop	{r4, pc}

08021970 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021970:	b510      	push	{r4, lr}
 8021972:	4604      	mov	r4, r0
 8021974:	2104      	movs	r1, #4
 8021976:	f008 ff25 	bl	802a7c4 <_ZdlPvj>
 802197a:	4620      	mov	r0, r4
 802197c:	bd10      	pop	{r4, pc}
	...

08021980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021984:	b091      	sub	sp, #68	; 0x44
 8021986:	469b      	mov	fp, r3
 8021988:	4616      	mov	r6, r2
 802198a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802198e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8021992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021996:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 802199a:	4604      	mov	r4, r0
 802199c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80219a0:	4640      	mov	r0, r8
 80219a2:	460d      	mov	r5, r1
 80219a4:	4659      	mov	r1, fp
 80219a6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80219aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80219ae:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80219b2:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 80219b6:	f7f6 fce7 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 80219ba:	4631      	mov	r1, r6
 80219bc:	4640      	mov	r0, r8
 80219be:	f7f6 fce3 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 80219c2:	4b74      	ldr	r3, [pc, #464]	; (8021b94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80219c4:	8818      	ldrh	r0, [r3, #0]
 80219c6:	4b74      	ldr	r3, [pc, #464]	; (8021b98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80219c8:	b202      	sxth	r2, r0
 80219ca:	8819      	ldrh	r1, [r3, #0]
 80219cc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80219d0:	b20e      	sxth	r6, r1
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	da07      	bge.n	80219e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80219d6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80219da:	4463      	add	r3, ip
 80219dc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80219e0:	2300      	movs	r3, #0
 80219e2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80219e6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80219ea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80219ee:	1ad2      	subs	r2, r2, r3
 80219f0:	4594      	cmp	ip, r2
 80219f2:	bfc4      	itt	gt
 80219f4:	1ac2      	subgt	r2, r0, r3
 80219f6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 80219fa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80219fe:	2a00      	cmp	r2, #0
 8021a00:	da07      	bge.n	8021a12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021a02:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8021a06:	4462      	add	r2, ip
 8021a08:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8021a0c:	2200      	movs	r2, #0
 8021a0e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8021a12:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8021a16:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021a1a:	eba6 060a 	sub.w	r6, r6, sl
 8021a1e:	42b2      	cmp	r2, r6
 8021a20:	bfc4      	itt	gt
 8021a22:	eba1 020a 	subgt.w	r2, r1, sl
 8021a26:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8021a2a:	4a5c      	ldr	r2, [pc, #368]	; (8021b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021a2c:	7812      	ldrb	r2, [r2, #0]
 8021a2e:	b9a2      	cbnz	r2, 8021a5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021a30:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021a34:	4286      	cmp	r6, r0
 8021a36:	4640      	mov	r0, r8
 8021a38:	9303      	str	r3, [sp, #12]
 8021a3a:	bf14      	ite	ne
 8021a3c:	2600      	movne	r6, #0
 8021a3e:	2601      	moveq	r6, #1
 8021a40:	f7f6 fce5 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021a44:	9b03      	ldr	r3, [sp, #12]
 8021a46:	b160      	cbz	r0, 8021a62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021a48:	2300      	movs	r3, #0
 8021a4a:	8023      	strh	r3, [r4, #0]
 8021a4c:	8063      	strh	r3, [r4, #2]
 8021a4e:	80a3      	strh	r3, [r4, #4]
 8021a50:	4620      	mov	r0, r4
 8021a52:	80e3      	strh	r3, [r4, #6]
 8021a54:	b011      	add	sp, #68	; 0x44
 8021a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8021a5e:	428e      	cmp	r6, r1
 8021a60:	e7e9      	b.n	8021a36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021a62:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021a66:	a90e      	add	r1, sp, #56	; 0x38
 8021a68:	900e      	str	r0, [sp, #56]	; 0x38
 8021a6a:	a80c      	add	r0, sp, #48	; 0x30
 8021a6c:	9205      	str	r2, [sp, #20]
 8021a6e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021a72:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8021a76:	9206      	str	r2, [sp, #24]
 8021a78:	f8bb 2000 	ldrh.w	r2, [fp]
 8021a7c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8021a80:	1a9b      	subs	r3, r3, r2
 8021a82:	b21b      	sxth	r3, r3
 8021a84:	9303      	str	r3, [sp, #12]
 8021a86:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021a8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8021ba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021a8e:	ebaa 0a03 	sub.w	sl, sl, r3
 8021a92:	fa0f f38a 	sxth.w	r3, sl
 8021a96:	9304      	str	r3, [sp, #16]
 8021a98:	9b03      	ldr	r3, [sp, #12]
 8021a9a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021a9e:	9b04      	ldr	r3, [sp, #16]
 8021aa0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021aa4:	9b05      	ldr	r3, [sp, #20]
 8021aa6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021aaa:	9b06      	ldr	r3, [sp, #24]
 8021aac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021ab0:	f7f9 ff2c 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ab4:	4640      	mov	r0, r8
 8021ab6:	f7f9 ff01 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021aba:	a80e      	add	r0, sp, #56	; 0x38
 8021abc:	f7f9 fefe 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ac0:	4b37      	ldr	r3, [pc, #220]	; (8021ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021ac2:	4628      	mov	r0, r5
 8021ac4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021ac8:	881b      	ldrh	r3, [r3, #0]
 8021aca:	9307      	str	r3, [sp, #28]
 8021acc:	682b      	ldr	r3, [r5, #0]
 8021ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ad0:	4798      	blx	r3
 8021ad2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8021ad6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021ada:	4681      	mov	r9, r0
 8021adc:	f8db 0000 	ldr.w	r0, [fp]
 8021ae0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021ae4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8021ae6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021aea:	6803      	ldr	r3, [r0, #0]
 8021aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021aee:	4798      	blx	r3
 8021af0:	4607      	mov	r7, r0
 8021af2:	f8db 0000 	ldr.w	r0, [fp]
 8021af6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021afa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021afe:	6803      	ldr	r3, [r0, #0]
 8021b00:	9109      	str	r1, [sp, #36]	; 0x24
 8021b02:	9208      	str	r2, [sp, #32]
 8021b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b06:	4798      	blx	r3
 8021b08:	f010 0f01 	tst.w	r0, #1
 8021b0c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021b10:	d012      	beq.n	8021b38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021b12:	f8db 0000 	ldr.w	r0, [fp]
 8021b16:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021b1a:	6803      	ldr	r3, [r0, #0]
 8021b1c:	9200      	str	r2, [sp, #0]
 8021b1e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8021b20:	462b      	mov	r3, r5
 8021b22:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021b26:	47b0      	blx	r6
 8021b28:	9b03      	ldr	r3, [sp, #12]
 8021b2a:	8023      	strh	r3, [r4, #0]
 8021b2c:	9b04      	ldr	r3, [sp, #16]
 8021b2e:	8063      	strh	r3, [r4, #2]
 8021b30:	9b05      	ldr	r3, [sp, #20]
 8021b32:	80a3      	strh	r3, [r4, #4]
 8021b34:	9b06      	ldr	r3, [sp, #24]
 8021b36:	e78b      	b.n	8021a50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021b38:	fb09 f202 	mul.w	r2, r9, r2
 8021b3c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021b40:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021b44:	440f      	add	r7, r1
 8021b46:	b166      	cbz	r6, 8021b62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021b48:	9a07      	ldr	r2, [sp, #28]
 8021b4a:	4592      	cmp	sl, r2
 8021b4c:	d109      	bne.n	8021b62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021b4e:	f8db 0000 	ldr.w	r0, [fp]
 8021b52:	fb09 f303 	mul.w	r3, r9, r3
 8021b56:	4629      	mov	r1, r5
 8021b58:	6802      	ldr	r2, [r0, #0]
 8021b5a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8021b5c:	463a      	mov	r2, r7
 8021b5e:	47b0      	blx	r6
 8021b60:	e7e2      	b.n	8021b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021b62:	fb0a f303 	mul.w	r3, sl, r3
 8021b66:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021b6a:	f8df b038 	ldr.w	fp, [pc, #56]	; 8021ba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021b6e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021b72:	4545      	cmp	r5, r8
 8021b74:	d2d8      	bcs.n	8021b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021b76:	f8db 0000 	ldr.w	r0, [fp]
 8021b7a:	4629      	mov	r1, r5
 8021b7c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021b80:	4435      	add	r5, r6
 8021b82:	6802      	ldr	r2, [r0, #0]
 8021b84:	005b      	lsls	r3, r3, #1
 8021b86:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021b8a:	463a      	mov	r2, r7
 8021b8c:	47d0      	blx	sl
 8021b8e:	444f      	add	r7, r9
 8021b90:	e7ef      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021b92:	bf00      	nop
 8021b94:	200155dc 	.word	0x200155dc
 8021b98:	200155de 	.word	0x200155de
 8021b9c:	200155e0 	.word	0x200155e0
 8021ba0:	200155e2 	.word	0x200155e2
 8021ba4:	200155e8 	.word	0x200155e8

08021ba8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021baa:	4606      	mov	r6, r0
 8021bac:	b087      	sub	sp, #28
 8021bae:	460c      	mov	r4, r1
 8021bb0:	4617      	mov	r7, r2
 8021bb2:	461d      	mov	r5, r3
 8021bb4:	b333      	cbz	r3, 8021c04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021bb6:	4608      	mov	r0, r1
 8021bb8:	f7f6 fc29 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021bbc:	bb10      	cbnz	r0, 8021c04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021bbe:	6820      	ldr	r0, [r4, #0]
 8021bc0:	ab04      	add	r3, sp, #16
 8021bc2:	6861      	ldr	r1, [r4, #4]
 8021bc4:	4c1b      	ldr	r4, [pc, #108]	; (8021c34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021bc6:	c303      	stmia	r3!, {r0, r1}
 8021bc8:	a804      	add	r0, sp, #16
 8021bca:	f7f9 fe77 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021bce:	6820      	ldr	r0, [r4, #0]
 8021bd0:	6803      	ldr	r3, [r0, #0]
 8021bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021bd4:	4798      	blx	r3
 8021bd6:	2dff      	cmp	r5, #255	; 0xff
 8021bd8:	d016      	beq.n	8021c08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021bda:	f010 0f08 	tst.w	r0, #8
 8021bde:	6820      	ldr	r0, [r4, #0]
 8021be0:	d015      	beq.n	8021c0e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021be2:	2400      	movs	r4, #0
 8021be4:	6801      	ldr	r1, [r0, #0]
 8021be6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021bea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021bee:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021bf2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021bf6:	9401      	str	r4, [sp, #4]
 8021bf8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021bfc:	9400      	str	r4, [sp, #0]
 8021bfe:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8021c00:	4639      	mov	r1, r7
 8021c02:	47a0      	blx	r4
 8021c04:	b007      	add	sp, #28
 8021c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c08:	f010 0f02 	tst.w	r0, #2
 8021c0c:	e7e7      	b.n	8021bde <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021c0e:	6803      	ldr	r3, [r0, #0]
 8021c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c12:	4798      	blx	r3
 8021c14:	4b08      	ldr	r3, [pc, #32]	; (8021c38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021c16:	4601      	mov	r1, r0
 8021c18:	4630      	mov	r0, r6
 8021c1a:	881a      	ldrh	r2, [r3, #0]
 8021c1c:	6833      	ldr	r3, [r6, #0]
 8021c1e:	e9cd 7500 	strd	r7, r5, [sp]
 8021c22:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8021c24:	ab04      	add	r3, sp, #16
 8021c26:	47a8      	blx	r5
 8021c28:	6820      	ldr	r0, [r4, #0]
 8021c2a:	6803      	ldr	r3, [r0, #0]
 8021c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c2e:	4798      	blx	r3
 8021c30:	e7e8      	b.n	8021c04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021c32:	bf00      	nop
 8021c34:	200155e8 	.word	0x200155e8
 8021c38:	200155e2 	.word	0x200155e2

08021c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c40:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8021c44:	4688      	mov	r8, r1
 8021c46:	4614      	mov	r4, r2
 8021c48:	461d      	mov	r5, r3
 8021c4a:	9e08      	ldr	r6, [sp, #32]
 8021c4c:	2f00      	cmp	r7, #0
 8021c4e:	f000 80ab 	beq.w	8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021c52:	4618      	mov	r0, r3
 8021c54:	f7f6 fbdb 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	f040 80a5 	bne.w	8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021c5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021c62:	2fff      	cmp	r7, #255	; 0xff
 8021c64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021c68:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021c6c:	fb04 1303 	mla	r3, r4, r3, r1
 8021c70:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021c74:	eba4 0200 	sub.w	r2, r4, r0
 8021c78:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021c7c:	fb04 f505 	mul.w	r5, r4, r5
 8021c80:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021c84:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021c88:	d04a      	beq.n	8021d20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8021c8a:	b2bc      	uxth	r4, r7
 8021c8c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8021c90:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021c94:	fa5f f788 	uxtb.w	r7, r8
 8021c98:	b2f3      	uxtb	r3, r6
 8021c9a:	0040      	lsls	r0, r0, #1
 8021c9c:	fb0e fe04 	mul.w	lr, lr, r4
 8021ca0:	4367      	muls	r7, r4
 8021ca2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021ca6:	4363      	muls	r3, r4
 8021ca8:	fa1f fc8c 	uxth.w	ip, ip
 8021cac:	42a9      	cmp	r1, r5
 8021cae:	d27b      	bcs.n	8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021cb0:	eb01 0900 	add.w	r9, r1, r0
 8021cb4:	4549      	cmp	r1, r9
 8021cb6:	d231      	bcs.n	8021d1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8021cb8:	880a      	ldrh	r2, [r1, #0]
 8021cba:	1214      	asrs	r4, r2, #8
 8021cbc:	10d6      	asrs	r6, r2, #3
 8021cbe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021cc2:	00d2      	lsls	r2, r2, #3
 8021cc4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021cc8:	b2d2      	uxtb	r2, r2
 8021cca:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021cce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021cd2:	fb14 f40c 	smulbb	r4, r4, ip
 8021cd6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021cda:	fb12 f20c 	smulbb	r2, r2, ip
 8021cde:	fb16 f60c 	smulbb	r6, r6, ip
 8021ce2:	4474      	add	r4, lr
 8021ce4:	441a      	add	r2, r3
 8021ce6:	b2a4      	uxth	r4, r4
 8021ce8:	443e      	add	r6, r7
 8021cea:	b292      	uxth	r2, r2
 8021cec:	f104 0a01 	add.w	sl, r4, #1
 8021cf0:	b2b6      	uxth	r6, r6
 8021cf2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021cf6:	f102 0a01 	add.w	sl, r2, #1
 8021cfa:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021cfe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021d02:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021d06:	4322      	orrs	r2, r4
 8021d08:	1c74      	adds	r4, r6, #1
 8021d0a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021d0e:	0976      	lsrs	r6, r6, #5
 8021d10:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021d14:	4332      	orrs	r2, r6
 8021d16:	f821 2b02 	strh.w	r2, [r1], #2
 8021d1a:	e7cb      	b.n	8021cb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8021d1c:	4441      	add	r1, r8
 8021d1e:	e7c5      	b.n	8021cac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021d20:	0973      	lsrs	r3, r6, #5
 8021d22:	4f22      	ldr	r7, [pc, #136]	; (8021dac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8021d24:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021d28:	ea08 0707 	and.w	r7, r8, r7
 8021d2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d30:	433b      	orrs	r3, r7
 8021d32:	07e7      	lsls	r7, r4, #31
 8021d34:	ea43 0306 	orr.w	r3, r3, r6
 8021d38:	b29b      	uxth	r3, r3
 8021d3a:	d50b      	bpl.n	8021d54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021d3c:	0040      	lsls	r0, r0, #1
 8021d3e:	0052      	lsls	r2, r2, #1
 8021d40:	42a9      	cmp	r1, r5
 8021d42:	d231      	bcs.n	8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021d44:	180c      	adds	r4, r1, r0
 8021d46:	42a1      	cmp	r1, r4
 8021d48:	d202      	bcs.n	8021d50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021d4a:	f821 3b02 	strh.w	r3, [r1], #2
 8021d4e:	e7fa      	b.n	8021d46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021d50:	4411      	add	r1, r2
 8021d52:	e7f5      	b.n	8021d40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8021d54:	078e      	lsls	r6, r1, #30
 8021d56:	d008      	beq.n	8021d6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021d58:	0066      	lsls	r6, r4, #1
 8021d5a:	460a      	mov	r2, r1
 8021d5c:	42aa      	cmp	r2, r5
 8021d5e:	d202      	bcs.n	8021d66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021d60:	8013      	strh	r3, [r2, #0]
 8021d62:	4432      	add	r2, r6
 8021d64:	e7fa      	b.n	8021d5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8021d66:	3102      	adds	r1, #2
 8021d68:	3801      	subs	r0, #1
 8021d6a:	07c2      	lsls	r2, r0, #31
 8021d6c:	d50b      	bpl.n	8021d86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021d6e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8021d72:	0066      	lsls	r6, r4, #1
 8021d74:	3a01      	subs	r2, #1
 8021d76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021d7a:	42aa      	cmp	r2, r5
 8021d7c:	d202      	bcs.n	8021d84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021d7e:	8013      	strh	r3, [r2, #0]
 8021d80:	4432      	add	r2, r6
 8021d82:	e7fa      	b.n	8021d7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8021d84:	3801      	subs	r0, #1
 8021d86:	b178      	cbz	r0, 8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021d88:	1040      	asrs	r0, r0, #1
 8021d8a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021d8e:	0080      	lsls	r0, r0, #2
 8021d90:	0064      	lsls	r4, r4, #1
 8021d92:	42a9      	cmp	r1, r5
 8021d94:	d208      	bcs.n	8021da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021d96:	180e      	adds	r6, r1, r0
 8021d98:	460a      	mov	r2, r1
 8021d9a:	42b2      	cmp	r2, r6
 8021d9c:	d202      	bcs.n	8021da4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021d9e:	f842 3b04 	str.w	r3, [r2], #4
 8021da2:	e7fa      	b.n	8021d9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8021da4:	4421      	add	r1, r4
 8021da6:	e7f4      	b.n	8021d92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dac:	00fff800 	.word	0x00fff800

08021db0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021db0:	2200      	movs	r2, #0
 8021db2:	4910      	ldr	r1, [pc, #64]	; (8021df4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021db4:	6042      	str	r2, [r0, #4]
 8021db6:	6001      	str	r1, [r0, #0]
 8021db8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021dbc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021dc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021dc4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021dc8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021dcc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021dd0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021dd4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021dd8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021ddc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021de0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021de4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8021de8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021dec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021df0:	4770      	bx	lr
 8021df2:	bf00      	nop
 8021df4:	0803115c 	.word	0x0803115c

08021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dfc:	b08d      	sub	sp, #52	; 0x34
 8021dfe:	460d      	mov	r5, r1
 8021e00:	4604      	mov	r4, r0
 8021e02:	4699      	mov	r9, r3
 8021e04:	6808      	ldr	r0, [r1, #0]
 8021e06:	ab08      	add	r3, sp, #32
 8021e08:	6849      	ldr	r1, [r1, #4]
 8021e0a:	c303      	stmia	r3!, {r0, r1}
 8021e0c:	6810      	ldr	r0, [r2, #0]
 8021e0e:	ab0a      	add	r3, sp, #40	; 0x28
 8021e10:	6851      	ldr	r1, [r2, #4]
 8021e12:	c303      	stmia	r3!, {r0, r1}
 8021e14:	a808      	add	r0, sp, #32
 8021e16:	f7f9 fd51 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e1a:	4629      	mov	r1, r5
 8021e1c:	a80a      	add	r0, sp, #40	; 0x28
 8021e1e:	4d67      	ldr	r5, [pc, #412]	; (8021fbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021e20:	f7f9 fd74 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e24:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8021e28:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8021e2c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8021e30:	6828      	ldr	r0, [r5, #0]
 8021e32:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e36:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8021e3a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8021e3e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021e42:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021e46:	440a      	add	r2, r1
 8021e48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021e4c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8021e50:	4413      	add	r3, r2
 8021e52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021e56:	6803      	ldr	r3, [r0, #0]
 8021e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e5a:	4798      	blx	r3
 8021e5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e60:	d119      	bne.n	8021e96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021e62:	f010 0f20 	tst.w	r0, #32
 8021e66:	6828      	ldr	r0, [r5, #0]
 8021e68:	d018      	beq.n	8021e9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021e6a:	2500      	movs	r5, #0
 8021e6c:	6801      	ldr	r1, [r0, #0]
 8021e6e:	b2b6      	uxth	r6, r6
 8021e70:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021e74:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021e78:	9601      	str	r6, [sp, #4]
 8021e7a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021e7e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8021e82:	9502      	str	r5, [sp, #8]
 8021e84:	fa1f f588 	uxth.w	r5, r8
 8021e88:	9500      	str	r5, [sp, #0]
 8021e8a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8021e8c:	4621      	mov	r1, r4
 8021e8e:	47a8      	blx	r5
 8021e90:	b00d      	add	sp, #52	; 0x34
 8021e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021e9a:	e7e4      	b.n	8021e66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021e9c:	6803      	ldr	r3, [r0, #0]
 8021e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ea0:	4798      	blx	r3
 8021ea2:	4947      	ldr	r1, [pc, #284]	; (8021fc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021ea4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021ea8:	880b      	ldrh	r3, [r1, #0]
 8021eaa:	468a      	mov	sl, r1
 8021eac:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8021eb0:	fb03 5202 	mla	r2, r3, r2, r5
 8021eb4:	4373      	muls	r3, r6
 8021eb6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021eba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021ebe:	9307      	str	r3, [sp, #28]
 8021ec0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021ec4:	9306      	str	r3, [sp, #24]
 8021ec6:	9b07      	ldr	r3, [sp, #28]
 8021ec8:	4298      	cmp	r0, r3
 8021eca:	d270      	bcs.n	8021fae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021ecc:	9b06      	ldr	r3, [sp, #24]
 8021ece:	4621      	mov	r1, r4
 8021ed0:	eb00 0b03 	add.w	fp, r0, r3
 8021ed4:	4558      	cmp	r0, fp
 8021ed6:	d25d      	bcs.n	8021f94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021ed8:	f851 4b04 	ldr.w	r4, [r1], #4
 8021edc:	0e23      	lsrs	r3, r4, #24
 8021ede:	d014      	beq.n	8021f0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021ee0:	2bff      	cmp	r3, #255	; 0xff
 8021ee2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021ee6:	d112      	bne.n	8021f0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021ee8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021eec:	d10f      	bne.n	8021f0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021eee:	0963      	lsrs	r3, r4, #5
 8021ef0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021ef4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021ef8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021efc:	f02c 0c07 	bic.w	ip, ip, #7
 8021f00:	ea43 0c0c 	orr.w	ip, r3, ip
 8021f04:	ea4c 0404 	orr.w	r4, ip, r4
 8021f08:	8004      	strh	r4, [r0, #0]
 8021f0a:	3002      	adds	r0, #2
 8021f0c:	e7e2      	b.n	8021ed4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021f0e:	fb09 f303 	mul.w	r3, r9, r3
 8021f12:	8807      	ldrh	r7, [r0, #0]
 8021f14:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021f18:	fa5f fc8c 	uxtb.w	ip, ip
 8021f1c:	1c5a      	adds	r2, r3, #1
 8021f1e:	123e      	asrs	r6, r7, #8
 8021f20:	10fd      	asrs	r5, r7, #3
 8021f22:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021f26:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021f2a:	00ff      	lsls	r7, r7, #3
 8021f2c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021f30:	1212      	asrs	r2, r2, #8
 8021f32:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021f36:	b293      	uxth	r3, r2
 8021f38:	43d2      	mvns	r2, r2
 8021f3a:	b2ff      	uxtb	r7, r7
 8021f3c:	fb1e fe03 	smulbb	lr, lr, r3
 8021f40:	b2d2      	uxtb	r2, r2
 8021f42:	fb1c fc03 	smulbb	ip, ip, r3
 8021f46:	b2e4      	uxtb	r4, r4
 8021f48:	fb06 e602 	mla	r6, r6, r2, lr
 8021f4c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021f50:	fb14 f403 	smulbb	r4, r4, r3
 8021f54:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021f58:	b2b6      	uxth	r6, r6
 8021f5a:	fb05 c502 	mla	r5, r5, r2, ip
 8021f5e:	fb07 4702 	mla	r7, r7, r2, r4
 8021f62:	f106 0e01 	add.w	lr, r6, #1
 8021f66:	b2ad      	uxth	r5, r5
 8021f68:	b2bf      	uxth	r7, r7
 8021f6a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021f6e:	f105 0c01 	add.w	ip, r5, #1
 8021f72:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8021f76:	1c7e      	adds	r6, r7, #1
 8021f78:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021f7c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021f80:	096d      	lsrs	r5, r5, #5
 8021f82:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021f86:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021f8a:	ea46 060e 	orr.w	r6, r6, lr
 8021f8e:	432e      	orrs	r6, r5
 8021f90:	8006      	strh	r6, [r0, #0]
 8021f92:	e7ba      	b.n	8021f0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021f94:	f8ba 3000 	ldrh.w	r3, [sl]
 8021f98:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8021f9c:	eba3 0308 	sub.w	r3, r3, r8
 8021fa0:	eba4 0408 	sub.w	r4, r4, r8
 8021fa4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021fa8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021fac:	e78b      	b.n	8021ec6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021fae:	4b03      	ldr	r3, [pc, #12]	; (8021fbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021fb0:	6818      	ldr	r0, [r3, #0]
 8021fb2:	6803      	ldr	r3, [r0, #0]
 8021fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021fb6:	4798      	blx	r3
 8021fb8:	e76a      	b.n	8021e90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021fba:	bf00      	nop
 8021fbc:	200155e8 	.word	0x200155e8
 8021fc0:	200155e2 	.word	0x200155e2

08021fc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021fc8:	b085      	sub	sp, #20
 8021fca:	6810      	ldr	r0, [r2, #0]
 8021fcc:	460c      	mov	r4, r1
 8021fce:	6851      	ldr	r1, [r2, #4]
 8021fd0:	466d      	mov	r5, sp
 8021fd2:	4616      	mov	r6, r2
 8021fd4:	c503      	stmia	r5!, {r0, r1}
 8021fd6:	6818      	ldr	r0, [r3, #0]
 8021fd8:	6859      	ldr	r1, [r3, #4]
 8021fda:	c503      	stmia	r5!, {r0, r1}
 8021fdc:	4668      	mov	r0, sp
 8021fde:	4d2e      	ldr	r5, [pc, #184]	; (8022098 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021fe0:	f7f9 fc6c 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fe4:	4631      	mov	r1, r6
 8021fe6:	a802      	add	r0, sp, #8
 8021fe8:	4e2c      	ldr	r6, [pc, #176]	; (802209c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021fea:	f7f9 fc8f 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021ff2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021ff6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021ffa:	6828      	ldr	r0, [r5, #0]
 8021ffc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022000:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022004:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022008:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802200c:	f8bd 1000 	ldrh.w	r1, [sp]
 8022010:	440a      	add	r2, r1
 8022012:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022016:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802201a:	4413      	add	r3, r2
 802201c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022020:	6803      	ldr	r3, [r0, #0]
 8022022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022024:	4798      	blx	r3
 8022026:	8833      	ldrh	r3, [r6, #0]
 8022028:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802202c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022030:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022034:	f8df e068 	ldr.w	lr, [pc, #104]	; 80220a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022038:	fb03 1202 	mla	r2, r3, r2, r1
 802203c:	fb08 f303 	mul.w	r3, r8, r3
 8022040:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022044:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022048:	4298      	cmp	r0, r3
 802204a:	d21d      	bcs.n	8022088 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802204c:	eb00 080c 	add.w	r8, r0, ip
 8022050:	4540      	cmp	r0, r8
 8022052:	d20f      	bcs.n	8022074 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022054:	f854 1b04 	ldr.w	r1, [r4], #4
 8022058:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802205c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022060:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022064:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022068:	ea42 0209 	orr.w	r2, r2, r9
 802206c:	430a      	orrs	r2, r1
 802206e:	f820 2b02 	strh.w	r2, [r0], #2
 8022072:	e7ed      	b.n	8022050 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022074:	8832      	ldrh	r2, [r6, #0]
 8022076:	1bd2      	subs	r2, r2, r7
 8022078:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802207c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022080:	1bd2      	subs	r2, r2, r7
 8022082:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022086:	e7df      	b.n	8022048 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022088:	6828      	ldr	r0, [r5, #0]
 802208a:	6803      	ldr	r3, [r0, #0]
 802208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802208e:	4798      	blx	r3
 8022090:	b005      	add	sp, #20
 8022092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022096:	bf00      	nop
 8022098:	200155e8 	.word	0x200155e8
 802209c:	200155e2 	.word	0x200155e2
 80220a0:	fffff800 	.word	0xfffff800

080220a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80220a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220a8:	b08e      	sub	sp, #56	; 0x38
 80220aa:	460e      	mov	r6, r1
 80220ac:	4604      	mov	r4, r0
 80220ae:	461d      	mov	r5, r3
 80220b0:	6808      	ldr	r0, [r1, #0]
 80220b2:	ab0a      	add	r3, sp, #40	; 0x28
 80220b4:	6849      	ldr	r1, [r1, #4]
 80220b6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 802228c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80220ba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8022290 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80220be:	c303      	stmia	r3!, {r0, r1}
 80220c0:	6810      	ldr	r0, [r2, #0]
 80220c2:	ab0c      	add	r3, sp, #48	; 0x30
 80220c4:	6851      	ldr	r1, [r2, #4]
 80220c6:	c303      	stmia	r3!, {r0, r1}
 80220c8:	a80a      	add	r0, sp, #40	; 0x28
 80220ca:	f7f9 fbf7 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220ce:	4631      	mov	r1, r6
 80220d0:	a80c      	add	r0, sp, #48	; 0x30
 80220d2:	f7f9 fc1b 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220d6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80220da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80220de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80220e2:	f8d8 0000 	ldr.w	r0, [r8]
 80220e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80220ea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80220ee:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80220f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80220f6:	440c      	add	r4, r1
 80220f8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80220fc:	440a      	add	r2, r1
 80220fe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022102:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022106:	4413      	add	r3, r2
 8022108:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802210c:	6803      	ldr	r3, [r0, #0]
 802210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022110:	4798      	blx	r3
 8022112:	2dff      	cmp	r5, #255	; 0xff
 8022114:	d124      	bne.n	8022160 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022116:	f010 0f01 	tst.w	r0, #1
 802211a:	f8d8 0000 	ldr.w	r0, [r8]
 802211e:	d022      	beq.n	8022166 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022120:	2100      	movs	r1, #0
 8022122:	f04f 0e01 	mov.w	lr, #1
 8022126:	f8d0 c000 	ldr.w	ip, [r0]
 802212a:	b2b6      	uxth	r6, r6
 802212c:	f8cd e018 	str.w	lr, [sp, #24]
 8022130:	b2bf      	uxth	r7, r7
 8022132:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022136:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802213a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802213e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022142:	9503      	str	r5, [sp, #12]
 8022144:	9601      	str	r6, [sp, #4]
 8022146:	9700      	str	r7, [sp, #0]
 8022148:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802214c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022150:	9102      	str	r1, [sp, #8]
 8022152:	4621      	mov	r1, r4
 8022154:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022158:	47a8      	blx	r5
 802215a:	b00e      	add	sp, #56	; 0x38
 802215c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022160:	f010 0f04 	tst.w	r0, #4
 8022164:	e7d9      	b.n	802211a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022166:	6803      	ldr	r3, [r0, #0]
 8022168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802216a:	4798      	blx	r3
 802216c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022170:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022174:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022178:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802217c:	435e      	muls	r6, r3
 802217e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022182:	2dff      	cmp	r5, #255	; 0xff
 8022184:	fb03 1202 	mla	r2, r3, r2, r1
 8022188:	ebac 0c07 	sub.w	ip, ip, r7
 802218c:	eba3 0707 	sub.w	r7, r3, r7
 8022190:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022194:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022198:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802219c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80221a0:	d049      	beq.n	8022236 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80221a2:	43eb      	mvns	r3, r5
 80221a4:	fa1f f985 	uxth.w	r9, r5
 80221a8:	b2db      	uxtb	r3, r3
 80221aa:	42b0      	cmp	r0, r6
 80221ac:	d266      	bcs.n	802227c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80221ae:	eb00 0a0e 	add.w	sl, r0, lr
 80221b2:	4550      	cmp	r0, sl
 80221b4:	4621      	mov	r1, r4
 80221b6:	f104 0403 	add.w	r4, r4, #3
 80221ba:	d25b      	bcs.n	8022274 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80221bc:	8802      	ldrh	r2, [r0, #0]
 80221be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80221c2:	ea4f 2822 	mov.w	r8, r2, asr #8
 80221c6:	fb11 f109 	smulbb	r1, r1, r9
 80221ca:	10d5      	asrs	r5, r2, #3
 80221cc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80221d0:	00d2      	lsls	r2, r2, #3
 80221d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80221d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80221da:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80221de:	fb08 1803 	mla	r8, r8, r3, r1
 80221e2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80221e6:	b2d2      	uxtb	r2, r2
 80221e8:	fb11 f109 	smulbb	r1, r1, r9
 80221ec:	fa1f f888 	uxth.w	r8, r8
 80221f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80221f4:	fb05 1503 	mla	r5, r5, r3, r1
 80221f8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80221fc:	fb11 f109 	smulbb	r1, r1, r9
 8022200:	b2ad      	uxth	r5, r5
 8022202:	fb02 1203 	mla	r2, r2, r3, r1
 8022206:	f108 0101 	add.w	r1, r8, #1
 802220a:	b292      	uxth	r2, r2
 802220c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022210:	1c51      	adds	r1, r2, #1
 8022212:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022216:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802221a:	1c69      	adds	r1, r5, #1
 802221c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022220:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022224:	096d      	lsrs	r5, r5, #5
 8022226:	ea42 0208 	orr.w	r2, r2, r8
 802222a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802222e:	432a      	orrs	r2, r5
 8022230:	f820 2b02 	strh.w	r2, [r0], #2
 8022234:	e7bd      	b.n	80221b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022236:	4a14      	ldr	r2, [pc, #80]	; (8022288 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022238:	42b0      	cmp	r0, r6
 802223a:	d21f      	bcs.n	802227c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802223c:	eb00 050e 	add.w	r5, r0, lr
 8022240:	42a8      	cmp	r0, r5
 8022242:	4621      	mov	r1, r4
 8022244:	f104 0403 	add.w	r4, r4, #3
 8022248:	d210      	bcs.n	802226c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802224a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802224e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022252:	00db      	lsls	r3, r3, #3
 8022254:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022258:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802225c:	430b      	orrs	r3, r1
 802225e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022262:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022266:	f820 3b02 	strh.w	r3, [r0], #2
 802226a:	e7e9      	b.n	8022240 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802226c:	4438      	add	r0, r7
 802226e:	eb01 040c 	add.w	r4, r1, ip
 8022272:	e7e1      	b.n	8022238 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022274:	4438      	add	r0, r7
 8022276:	eb01 040c 	add.w	r4, r1, ip
 802227a:	e796      	b.n	80221aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802227c:	4b03      	ldr	r3, [pc, #12]	; (802228c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802227e:	6818      	ldr	r0, [r3, #0]
 8022280:	6803      	ldr	r3, [r0, #0]
 8022282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022284:	4798      	blx	r3
 8022286:	e768      	b.n	802215a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022288:	fffff800 	.word	0xfffff800
 802228c:	200155e8 	.word	0x200155e8
 8022290:	200155e2 	.word	0x200155e2

08022294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022294:	b4f0      	push	{r4, r5, r6, r7}
 8022296:	4616      	mov	r6, r2
 8022298:	461c      	mov	r4, r3
 802229a:	460d      	mov	r5, r1
 802229c:	9a04      	ldr	r2, [sp, #16]
 802229e:	2e01      	cmp	r6, #1
 80222a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80222a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80222a8:	d012      	beq.n	80222d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80222aa:	d303      	bcc.n	80222b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80222ac:	2e02      	cmp	r6, #2
 80222ae:	d00a      	beq.n	80222c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80222b0:	bcf0      	pop	{r4, r5, r6, r7}
 80222b2:	4770      	bx	lr
 80222b4:	6805      	ldr	r5, [r0, #0]
 80222b6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80222ba:	68ed      	ldr	r5, [r5, #12]
 80222bc:	4613      	mov	r3, r2
 80222be:	4622      	mov	r2, r4
 80222c0:	46ac      	mov	ip, r5
 80222c2:	bcf0      	pop	{r4, r5, r6, r7}
 80222c4:	4760      	bx	ip
 80222c6:	4621      	mov	r1, r4
 80222c8:	4628      	mov	r0, r5
 80222ca:	bcf0      	pop	{r4, r5, r6, r7}
 80222cc:	f7ff bd94 	b.w	8021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80222d0:	4621      	mov	r1, r4
 80222d2:	4628      	mov	r0, r5
 80222d4:	bcf0      	pop	{r4, r5, r6, r7}
 80222d6:	f7ff bee5 	b.w	80220a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080222dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80222dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222e0:	b093      	sub	sp, #76	; 0x4c
 80222e2:	4681      	mov	r9, r0
 80222e4:	4688      	mov	r8, r1
 80222e6:	6810      	ldr	r0, [r2, #0]
 80222e8:	6851      	ldr	r1, [r2, #4]
 80222ea:	ac0e      	add	r4, sp, #56	; 0x38
 80222ec:	4616      	mov	r6, r2
 80222ee:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80222f2:	4f6b      	ldr	r7, [pc, #428]	; (80224a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80222f4:	c403      	stmia	r4!, {r0, r1}
 80222f6:	6818      	ldr	r0, [r3, #0]
 80222f8:	ac10      	add	r4, sp, #64	; 0x40
 80222fa:	6859      	ldr	r1, [r3, #4]
 80222fc:	c403      	stmia	r4!, {r0, r1}
 80222fe:	a80e      	add	r0, sp, #56	; 0x38
 8022300:	f7f9 fadc 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022304:	4631      	mov	r1, r6
 8022306:	a810      	add	r0, sp, #64	; 0x40
 8022308:	4e66      	ldr	r6, [pc, #408]	; (80224a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802230a:	f7f9 faff 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802230e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022312:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022316:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802231a:	6830      	ldr	r0, [r6, #0]
 802231c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022320:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022324:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022328:	4489      	add	r9, r1
 802232a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802232e:	440a      	add	r2, r1
 8022330:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022334:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022338:	4413      	add	r3, r2
 802233a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802233e:	6803      	ldr	r3, [r0, #0]
 8022340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022342:	4798      	blx	r3
 8022344:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022348:	6830      	ldr	r0, [r6, #0]
 802234a:	d01d      	beq.n	8022388 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802234c:	2200      	movs	r2, #0
 802234e:	6801      	ldr	r1, [r0, #0]
 8022350:	b2a4      	uxth	r4, r4
 8022352:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022356:	b2ad      	uxth	r5, r5
 8022358:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802235c:	220b      	movs	r2, #11
 802235e:	9207      	str	r2, [sp, #28]
 8022360:	883a      	ldrh	r2, [r7, #0]
 8022362:	9502      	str	r5, [sp, #8]
 8022364:	9206      	str	r2, [sp, #24]
 8022366:	2201      	movs	r2, #1
 8022368:	9401      	str	r4, [sp, #4]
 802236a:	e9cd a204 	strd	sl, r2, [sp, #16]
 802236e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8022372:	9203      	str	r2, [sp, #12]
 8022374:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8022378:	9200      	str	r2, [sp, #0]
 802237a:	4642      	mov	r2, r8
 802237c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802237e:	4649      	mov	r1, r9
 8022380:	47a0      	blx	r4
 8022382:	b013      	add	sp, #76	; 0x4c
 8022384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022388:	6803      	ldr	r3, [r0, #0]
 802238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802238c:	4798      	blx	r3
 802238e:	883b      	ldrh	r3, [r7, #0]
 8022390:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022394:	f04f 0e04 	mov.w	lr, #4
 8022398:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802239c:	435d      	muls	r5, r3
 802239e:	fb03 1202 	mla	r2, r3, r2, r1
 80223a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80223a6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80223aa:	920c      	str	r2, [sp, #48]	; 0x30
 80223ac:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80223b0:	1b12      	subs	r2, r2, r4
 80223b2:	920d      	str	r2, [sp, #52]	; 0x34
 80223b4:	0062      	lsls	r2, r4, #1
 80223b6:	1b1c      	subs	r4, r3, r4
 80223b8:	920a      	str	r2, [sp, #40]	; 0x28
 80223ba:	0063      	lsls	r3, r4, #1
 80223bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80223be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223c0:	4298      	cmp	r0, r3
 80223c2:	d266      	bcs.n	8022492 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80223c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223c6:	eb00 0b03 	add.w	fp, r0, r3
 80223ca:	4558      	cmp	r0, fp
 80223cc:	d25c      	bcs.n	8022488 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80223ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 80223d2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80223d6:	f858 2003 	ldr.w	r2, [r8, r3]
 80223da:	0e11      	lsrs	r1, r2, #24
 80223dc:	d012      	beq.n	8022404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80223de:	29ff      	cmp	r1, #255	; 0xff
 80223e0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80223e4:	d110      	bne.n	8022408 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80223e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80223ea:	d10d      	bne.n	8022408 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80223ec:	0953      	lsrs	r3, r2, #5
 80223ee:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80223f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80223f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80223fa:	f027 0707 	bic.w	r7, r7, #7
 80223fe:	431f      	orrs	r7, r3
 8022400:	433a      	orrs	r2, r7
 8022402:	8002      	strh	r2, [r0, #0]
 8022404:	3002      	adds	r0, #2
 8022406:	e7e0      	b.n	80223ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022408:	fb0a f101 	mul.w	r1, sl, r1
 802240c:	8806      	ldrh	r6, [r0, #0]
 802240e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022412:	b2d2      	uxtb	r2, r2
 8022414:	1c4b      	adds	r3, r1, #1
 8022416:	1235      	asrs	r5, r6, #8
 8022418:	10f4      	asrs	r4, r6, #3
 802241a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802241e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022422:	00f6      	lsls	r6, r6, #3
 8022424:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022428:	121b      	asrs	r3, r3, #8
 802242a:	b2f6      	uxtb	r6, r6
 802242c:	b299      	uxth	r1, r3
 802242e:	43db      	mvns	r3, r3
 8022430:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022434:	fb1c fc01 	smulbb	ip, ip, r1
 8022438:	b2db      	uxtb	r3, r3
 802243a:	fb12 f201 	smulbb	r2, r2, r1
 802243e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022442:	fb05 c503 	mla	r5, r5, r3, ip
 8022446:	b2ff      	uxtb	r7, r7
 8022448:	fb06 2203 	mla	r2, r6, r3, r2
 802244c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022450:	fb17 f701 	smulbb	r7, r7, r1
 8022454:	b2ad      	uxth	r5, r5
 8022456:	b292      	uxth	r2, r2
 8022458:	fb04 7403 	mla	r4, r4, r3, r7
 802245c:	f105 0c01 	add.w	ip, r5, #1
 8022460:	1c57      	adds	r7, r2, #1
 8022462:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022466:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802246a:	b2a4      	uxth	r4, r4
 802246c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022470:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022474:	433d      	orrs	r5, r7
 8022476:	1c67      	adds	r7, r4, #1
 8022478:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802247c:	0964      	lsrs	r4, r4, #5
 802247e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022482:	4325      	orrs	r5, r4
 8022484:	8005      	strh	r5, [r0, #0]
 8022486:	e7bd      	b.n	8022404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802248a:	4418      	add	r0, r3
 802248c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802248e:	4499      	add	r9, r3
 8022490:	e795      	b.n	80223be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8022492:	4b04      	ldr	r3, [pc, #16]	; (80224a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022494:	6818      	ldr	r0, [r3, #0]
 8022496:	6803      	ldr	r3, [r0, #0]
 8022498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802249a:	4798      	blx	r3
 802249c:	e771      	b.n	8022382 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802249e:	bf00      	nop
 80224a0:	200155e2 	.word	0x200155e2
 80224a4:	200155e8 	.word	0x200155e8

080224a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80224a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224ac:	b087      	sub	sp, #28
 80224ae:	4680      	mov	r8, r0
 80224b0:	460d      	mov	r5, r1
 80224b2:	4614      	mov	r4, r2
 80224b4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80224b8:	2e00      	cmp	r6, #0
 80224ba:	f000 80b9 	beq.w	8022630 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80224be:	6810      	ldr	r0, [r2, #0]
 80224c0:	af02      	add	r7, sp, #8
 80224c2:	6851      	ldr	r1, [r2, #4]
 80224c4:	c703      	stmia	r7!, {r0, r1}
 80224c6:	6818      	ldr	r0, [r3, #0]
 80224c8:	af04      	add	r7, sp, #16
 80224ca:	6859      	ldr	r1, [r3, #4]
 80224cc:	c703      	stmia	r7!, {r0, r1}
 80224ce:	a802      	add	r0, sp, #8
 80224d0:	f7f9 f9f4 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224d4:	4621      	mov	r1, r4
 80224d6:	a804      	add	r0, sp, #16
 80224d8:	f7f9 fa18 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80224e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80224e4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80224e8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80224ec:	fb14 2103 	smlabb	r1, r4, r3, r2
 80224f0:	eb08 0401 	add.w	r4, r8, r1
 80224f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80224f8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80224fc:	440a      	add	r2, r1
 80224fe:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022502:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022506:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802250a:	4413      	add	r3, r2
 802250c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022510:	4b49      	ldr	r3, [pc, #292]	; (8022638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022512:	6818      	ldr	r0, [r3, #0]
 8022514:	6803      	ldr	r3, [r0, #0]
 8022516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022518:	4798      	blx	r3
 802251a:	4b48      	ldr	r3, [pc, #288]	; (802263c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802251c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022520:	2eff      	cmp	r6, #255	; 0xff
 8022522:	881a      	ldrh	r2, [r3, #0]
 8022524:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022528:	fb02 c101 	mla	r1, r2, r1, ip
 802252c:	fb02 f207 	mul.w	r2, r2, r7
 8022530:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022534:	f105 0104 	add.w	r1, r5, #4
 8022538:	461d      	mov	r5, r3
 802253a:	d05a      	beq.n	80225f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802253c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022540:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022544:	b2b6      	uxth	r6, r6
 8022546:	9301      	str	r3, [sp, #4]
 8022548:	fa1f fe8e 	uxth.w	lr, lr
 802254c:	4282      	cmp	r2, r0
 802254e:	d96a      	bls.n	8022626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022550:	eb00 0b0a 	add.w	fp, r0, sl
 8022554:	4583      	cmp	fp, r0
 8022556:	d940      	bls.n	80225da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022558:	8805      	ldrh	r5, [r0, #0]
 802255a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802255e:	122f      	asrs	r7, r5, #8
 8022560:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022564:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022568:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802256c:	00ed      	lsls	r5, r5, #3
 802256e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022572:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022576:	fb17 f70e 	smulbb	r7, r7, lr
 802257a:	b2ed      	uxtb	r5, r5
 802257c:	fb19 f90e 	smulbb	r9, r9, lr
 8022580:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022584:	fb15 f50e 	smulbb	r5, r5, lr
 8022588:	fb0c 7c06 	mla	ip, ip, r6, r7
 802258c:	10df      	asrs	r7, r3, #3
 802258e:	00db      	lsls	r3, r3, #3
 8022590:	fa1f fc8c 	uxth.w	ip, ip
 8022594:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022598:	b2db      	uxtb	r3, r3
 802259a:	fb07 9706 	mla	r7, r7, r6, r9
 802259e:	f10c 0901 	add.w	r9, ip, #1
 80225a2:	fb03 5306 	mla	r3, r3, r6, r5
 80225a6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80225aa:	b29b      	uxth	r3, r3
 80225ac:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80225b0:	b2bf      	uxth	r7, r7
 80225b2:	f103 0c01 	add.w	ip, r3, #1
 80225b6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80225ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80225be:	ea4c 0c09 	orr.w	ip, ip, r9
 80225c2:	f107 0901 	add.w	r9, r7, #1
 80225c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80225ca:	097f      	lsrs	r7, r7, #5
 80225cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80225d0:	ea4c 0c07 	orr.w	ip, ip, r7
 80225d4:	f820 cb02 	strh.w	ip, [r0], #2
 80225d8:	e7bc      	b.n	8022554 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80225da:	9b01      	ldr	r3, [sp, #4]
 80225dc:	881b      	ldrh	r3, [r3, #0]
 80225de:	eba3 0308 	sub.w	r3, r3, r8
 80225e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80225e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80225ea:	eba3 0308 	sub.w	r3, r3, r8
 80225ee:	441c      	add	r4, r3
 80225f0:	e7ac      	b.n	802254c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80225f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80225f6:	4282      	cmp	r2, r0
 80225f8:	d915      	bls.n	8022626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80225fa:	eb00 060a 	add.w	r6, r0, sl
 80225fe:	4286      	cmp	r6, r0
 8022600:	d906      	bls.n	8022610 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022602:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802260a:	f820 3b02 	strh.w	r3, [r0], #2
 802260e:	e7f6      	b.n	80225fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022610:	882b      	ldrh	r3, [r5, #0]
 8022612:	eba3 0308 	sub.w	r3, r3, r8
 8022616:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802261a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802261e:	eba3 0308 	sub.w	r3, r3, r8
 8022622:	441c      	add	r4, r3
 8022624:	e7e7      	b.n	80225f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022626:	4b04      	ldr	r3, [pc, #16]	; (8022638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022628:	6818      	ldr	r0, [r3, #0]
 802262a:	6803      	ldr	r3, [r0, #0]
 802262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802262e:	4798      	blx	r3
 8022630:	b007      	add	sp, #28
 8022632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022636:	bf00      	nop
 8022638:	200155e8 	.word	0x200155e8
 802263c:	200155e2 	.word	0x200155e2

08022640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022644:	b091      	sub	sp, #68	; 0x44
 8022646:	4680      	mov	r8, r0
 8022648:	460f      	mov	r7, r1
 802264a:	4614      	mov	r4, r2
 802264c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022650:	2d00      	cmp	r5, #0
 8022652:	d051      	beq.n	80226f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022654:	6810      	ldr	r0, [r2, #0]
 8022656:	ae0c      	add	r6, sp, #48	; 0x30
 8022658:	6851      	ldr	r1, [r2, #4]
 802265a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 802285c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802265e:	c603      	stmia	r6!, {r0, r1}
 8022660:	6818      	ldr	r0, [r3, #0]
 8022662:	ae0e      	add	r6, sp, #56	; 0x38
 8022664:	6859      	ldr	r1, [r3, #4]
 8022666:	c603      	stmia	r6!, {r0, r1}
 8022668:	a80c      	add	r0, sp, #48	; 0x30
 802266a:	f7f9 f927 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802266e:	4621      	mov	r1, r4
 8022670:	a80e      	add	r0, sp, #56	; 0x38
 8022672:	f7f9 f94b 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022676:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802267a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802267e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022682:	f8d9 0000 	ldr.w	r0, [r9]
 8022686:	fb11 2103 	smlabb	r1, r1, r3, r2
 802268a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802268e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8022692:	eb08 0401 	add.w	r4, r8, r1
 8022696:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802269a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8022860 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802269e:	440a      	add	r2, r1
 80226a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80226a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80226a8:	4413      	add	r3, r2
 80226aa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80226ae:	6803      	ldr	r3, [r0, #0]
 80226b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226b2:	4798      	blx	r3
 80226b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80226b8:	f8d9 0000 	ldr.w	r0, [r9]
 80226bc:	d01f      	beq.n	80226fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80226be:	2200      	movs	r2, #0
 80226c0:	6801      	ldr	r1, [r0, #0]
 80226c2:	b2b6      	uxth	r6, r6
 80226c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80226c8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80226cc:	220b      	movs	r2, #11
 80226ce:	9207      	str	r2, [sp, #28]
 80226d0:	f8b8 2000 	ldrh.w	r2, [r8]
 80226d4:	9601      	str	r6, [sp, #4]
 80226d6:	9206      	str	r2, [sp, #24]
 80226d8:	2201      	movs	r2, #1
 80226da:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80226de:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80226e2:	9203      	str	r2, [sp, #12]
 80226e4:	fa1f f28a 	uxth.w	r2, sl
 80226e8:	9202      	str	r2, [sp, #8]
 80226ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80226ee:	9200      	str	r2, [sp, #0]
 80226f0:	463a      	mov	r2, r7
 80226f2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80226f4:	4621      	mov	r1, r4
 80226f6:	47a8      	blx	r5
 80226f8:	b011      	add	sp, #68	; 0x44
 80226fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226fe:	6803      	ldr	r3, [r0, #0]
 8022700:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022706:	4798      	blx	r3
 8022708:	f8b8 2000 	ldrh.w	r2, [r8]
 802270c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022710:	2dff      	cmp	r5, #255	; 0xff
 8022712:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022716:	fb0a fa02 	mul.w	sl, sl, r2
 802271a:	fb02 1303 	mla	r3, r2, r3, r1
 802271e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022722:	d062      	beq.n	80227ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022724:	ea6f 0c05 	mvn.w	ip, r5
 8022728:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802272c:	b2ad      	uxth	r5, r5
 802272e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022732:	fa5f fc8c 	uxtb.w	ip, ip
 8022736:	930a      	str	r3, [sp, #40]	; 0x28
 8022738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802273a:	4298      	cmp	r0, r3
 802273c:	f080 8085 	bcs.w	802284a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022740:	eb00 0b09 	add.w	fp, r0, r9
 8022744:	4558      	cmp	r0, fp
 8022746:	d246      	bcs.n	80227d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022748:	f814 eb01 	ldrb.w	lr, [r4], #1
 802274c:	2303      	movs	r3, #3
 802274e:	2204      	movs	r2, #4
 8022750:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022754:	8803      	ldrh	r3, [r0, #0]
 8022756:	eb07 0a0e 	add.w	sl, r7, lr
 802275a:	1219      	asrs	r1, r3, #8
 802275c:	10da      	asrs	r2, r3, #3
 802275e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022762:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022766:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802276a:	00db      	lsls	r3, r3, #3
 802276c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022770:	fb18 f805 	smulbb	r8, r8, r5
 8022774:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022778:	fb1e fe05 	smulbb	lr, lr, r5
 802277c:	b2db      	uxtb	r3, r3
 802277e:	fb01 810c 	mla	r1, r1, ip, r8
 8022782:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022786:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802278a:	fb18 f805 	smulbb	r8, r8, r5
 802278e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022792:	b289      	uxth	r1, r1
 8022794:	fb02 820c 	mla	r2, r2, ip, r8
 8022798:	fb03 e30c 	mla	r3, r3, ip, lr
 802279c:	f101 0801 	add.w	r8, r1, #1
 80227a0:	b292      	uxth	r2, r2
 80227a2:	b29b      	uxth	r3, r3
 80227a4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80227a8:	f102 0801 	add.w	r8, r2, #1
 80227ac:	f103 0e01 	add.w	lr, r3, #1
 80227b0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80227b4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80227b8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80227bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80227c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80227c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80227c8:	ea4e 0101 	orr.w	r1, lr, r1
 80227cc:	ea41 0108 	orr.w	r1, r1, r8
 80227d0:	f820 1b02 	strh.w	r1, [r0], #2
 80227d4:	e7b6      	b.n	8022744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80227d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227d8:	881b      	ldrh	r3, [r3, #0]
 80227da:	1b9b      	subs	r3, r3, r6
 80227dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80227e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80227e4:	1b9b      	subs	r3, r3, r6
 80227e6:	441c      	add	r4, r3
 80227e8:	e7a6      	b.n	8022738 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80227ea:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80227ee:	2203      	movs	r2, #3
 80227f0:	2504      	movs	r5, #4
 80227f2:	4919      	ldr	r1, [pc, #100]	; (8022858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80227f4:	4550      	cmp	r0, sl
 80227f6:	d228      	bcs.n	802284a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80227f8:	eb00 0c09 	add.w	ip, r0, r9
 80227fc:	4560      	cmp	r0, ip
 80227fe:	4623      	mov	r3, r4
 8022800:	d219      	bcs.n	8022836 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022802:	f893 e000 	ldrb.w	lr, [r3]
 8022806:	3401      	adds	r4, #1
 8022808:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802280c:	eb07 0b0e 	add.w	fp, r7, lr
 8022810:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022814:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022818:	f89b b001 	ldrb.w	fp, [fp, #1]
 802281c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022820:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022824:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022828:	ea43 030b 	orr.w	r3, r3, fp
 802282c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022830:	f820 3b02 	strh.w	r3, [r0], #2
 8022834:	e7e2      	b.n	80227fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022836:	f8b8 3000 	ldrh.w	r3, [r8]
 802283a:	1b9b      	subs	r3, r3, r6
 802283c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022840:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022844:	1b9b      	subs	r3, r3, r6
 8022846:	441c      	add	r4, r3
 8022848:	e7d4      	b.n	80227f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802284a:	4b04      	ldr	r3, [pc, #16]	; (802285c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802284c:	6818      	ldr	r0, [r3, #0]
 802284e:	6803      	ldr	r3, [r0, #0]
 8022850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022852:	4798      	blx	r3
 8022854:	e750      	b.n	80226f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022856:	bf00      	nop
 8022858:	fffff800 	.word	0xfffff800
 802285c:	200155e8 	.word	0x200155e8
 8022860:	200155e2 	.word	0x200155e2

08022864 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022864:	b430      	push	{r4, r5}
 8022866:	780d      	ldrb	r5, [r1, #0]
 8022868:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802286c:	2d01      	cmp	r5, #1
 802286e:	d00a      	beq.n	8022886 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022870:	d305      	bcc.n	802287e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022872:	2d02      	cmp	r5, #2
 8022874:	d10b      	bne.n	802288e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022876:	9402      	str	r4, [sp, #8]
 8022878:	bc30      	pop	{r4, r5}
 802287a:	f7ff be15 	b.w	80224a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802287e:	9402      	str	r4, [sp, #8]
 8022880:	bc30      	pop	{r4, r5}
 8022882:	f7ff bd2b 	b.w	80222dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022886:	9402      	str	r4, [sp, #8]
 8022888:	bc30      	pop	{r4, r5}
 802288a:	f7ff bed9 	b.w	8022640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802288e:	bc30      	pop	{r4, r5}
 8022890:	4770      	bx	lr
	...

08022894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022898:	b087      	sub	sp, #28
 802289a:	4604      	mov	r4, r0
 802289c:	460e      	mov	r6, r1
 802289e:	6810      	ldr	r0, [r2, #0]
 80228a0:	6851      	ldr	r1, [r2, #4]
 80228a2:	ad02      	add	r5, sp, #8
 80228a4:	4617      	mov	r7, r2
 80228a6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80228aa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8022adc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80228ae:	c503      	stmia	r5!, {r0, r1}
 80228b0:	6818      	ldr	r0, [r3, #0]
 80228b2:	ad04      	add	r5, sp, #16
 80228b4:	6859      	ldr	r1, [r3, #4]
 80228b6:	c503      	stmia	r5!, {r0, r1}
 80228b8:	a802      	add	r0, sp, #8
 80228ba:	f7f8 ffff 	bl	801b8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80228be:	4639      	mov	r1, r7
 80228c0:	a804      	add	r0, sp, #16
 80228c2:	f7f9 f823 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80228c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80228d2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80228d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80228da:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80228de:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80228e2:	440e      	add	r6, r1
 80228e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80228e8:	440a      	add	r2, r1
 80228ea:	f8ad 2010 	strh.w	r2, [sp, #16]
 80228ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80228f2:	4413      	add	r3, r2
 80228f4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80228f8:	4b77      	ldr	r3, [pc, #476]	; (8022ad8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80228fa:	6818      	ldr	r0, [r3, #0]
 80228fc:	6803      	ldr	r3, [r0, #0]
 80228fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022900:	4798      	blx	r3
 8022902:	f8b9 b000 	ldrh.w	fp, [r9]
 8022906:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802290a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802290e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022912:	fb05 f50b 	mul.w	r5, r5, fp
 8022916:	fb0b 2303 	mla	r3, fp, r3, r2
 802291a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802291e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022922:	9300      	str	r3, [sp, #0]
 8022924:	d069      	beq.n	80229fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022926:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802292a:	4558      	cmp	r0, fp
 802292c:	f080 80cc 	bcs.w	8022ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022930:	9b00      	ldr	r3, [sp, #0]
 8022932:	4631      	mov	r1, r6
 8022934:	18c3      	adds	r3, r0, r3
 8022936:	9301      	str	r3, [sp, #4]
 8022938:	9b01      	ldr	r3, [sp, #4]
 802293a:	4298      	cmp	r0, r3
 802293c:	d24f      	bcs.n	80229de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802293e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022942:	2a00      	cmp	r2, #0
 8022944:	d048      	beq.n	80229d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022946:	fb0a f202 	mul.w	r2, sl, r2
 802294a:	1c53      	adds	r3, r2, #1
 802294c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022950:	121b      	asrs	r3, r3, #8
 8022952:	d041      	beq.n	80229d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022954:	8802      	ldrh	r2, [r0, #0]
 8022956:	b29e      	uxth	r6, r3
 8022958:	f8b4 c000 	ldrh.w	ip, [r4]
 802295c:	43db      	mvns	r3, r3
 802295e:	1215      	asrs	r5, r2, #8
 8022960:	b2db      	uxtb	r3, r3
 8022962:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022966:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802296a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802296e:	fb15 f503 	smulbb	r5, r5, r3
 8022972:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022976:	00d2      	lsls	r2, r2, #3
 8022978:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802297c:	fb07 5706 	mla	r7, r7, r6, r5
 8022980:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022984:	b2d2      	uxtb	r2, r2
 8022986:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802298a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802298e:	fb1e fe03 	smulbb	lr, lr, r3
 8022992:	b2bf      	uxth	r7, r7
 8022994:	fb12 f203 	smulbb	r2, r2, r3
 8022998:	fa5f fc8c 	uxtb.w	ip, ip
 802299c:	fb05 e506 	mla	r5, r5, r6, lr
 80229a0:	f107 0e01 	add.w	lr, r7, #1
 80229a4:	fb0c 2c06 	mla	ip, ip, r6, r2
 80229a8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80229ac:	fa1f fc8c 	uxth.w	ip, ip
 80229b0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80229b4:	b2ad      	uxth	r5, r5
 80229b6:	f10c 0701 	add.w	r7, ip, #1
 80229ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80229be:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80229c2:	ea47 070e 	orr.w	r7, r7, lr
 80229c6:	f105 0e01 	add.w	lr, r5, #1
 80229ca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80229ce:	096d      	lsrs	r5, r5, #5
 80229d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80229d4:	432f      	orrs	r7, r5
 80229d6:	8007      	strh	r7, [r0, #0]
 80229d8:	3002      	adds	r0, #2
 80229da:	3402      	adds	r4, #2
 80229dc:	e7ac      	b.n	8022938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80229de:	f8b9 3000 	ldrh.w	r3, [r9]
 80229e2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80229e6:	eba3 0308 	sub.w	r3, r3, r8
 80229ea:	eba6 0608 	sub.w	r6, r6, r8
 80229ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80229f2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80229f6:	440e      	add	r6, r1
 80229f8:	e797      	b.n	802292a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80229fa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80229fe:	42a8      	cmp	r0, r5
 8022a00:	d262      	bcs.n	8022ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022a02:	9b00      	ldr	r3, [sp, #0]
 8022a04:	4631      	mov	r1, r6
 8022a06:	eb00 0b03 	add.w	fp, r0, r3
 8022a0a:	4558      	cmp	r0, fp
 8022a0c:	d24e      	bcs.n	8022aac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a12:	b12b      	cbz	r3, 8022a20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022a14:	2bff      	cmp	r3, #255	; 0xff
 8022a16:	f8b4 e000 	ldrh.w	lr, [r4]
 8022a1a:	d104      	bne.n	8022a26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022a1c:	f8a0 e000 	strh.w	lr, [r0]
 8022a20:	3002      	adds	r0, #2
 8022a22:	3402      	adds	r4, #2
 8022a24:	e7f1      	b.n	8022a0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022a26:	8802      	ldrh	r2, [r0, #0]
 8022a28:	b29f      	uxth	r7, r3
 8022a2a:	43db      	mvns	r3, r3
 8022a2c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022a30:	1216      	asrs	r6, r2, #8
 8022a32:	b2db      	uxtb	r3, r3
 8022a34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022a38:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022a3c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022a40:	00d2      	lsls	r2, r2, #3
 8022a42:	fb16 f603 	smulbb	r6, r6, r3
 8022a46:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022a4a:	b2d2      	uxtb	r2, r2
 8022a4c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022a50:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022a54:	fb1a fa03 	smulbb	sl, sl, r3
 8022a58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022a5c:	fa1f fc8c 	uxth.w	ip, ip
 8022a60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022a64:	fb12 f303 	smulbb	r3, r2, r3
 8022a68:	fa5f fe8e 	uxtb.w	lr, lr
 8022a6c:	fb06 a607 	mla	r6, r6, r7, sl
 8022a70:	f10c 0201 	add.w	r2, ip, #1
 8022a74:	fb0e 3307 	mla	r3, lr, r7, r3
 8022a78:	b2b6      	uxth	r6, r6
 8022a7a:	b29b      	uxth	r3, r3
 8022a7c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022a80:	f106 0a01 	add.w	sl, r6, #1
 8022a84:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022a88:	f103 0c01 	add.w	ip, r3, #1
 8022a8c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022a90:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022a94:	0976      	lsrs	r6, r6, #5
 8022a96:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022a9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022a9e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022aa2:	ea4c 0c06 	orr.w	ip, ip, r6
 8022aa6:	f8a0 c000 	strh.w	ip, [r0]
 8022aaa:	e7b9      	b.n	8022a20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022aac:	f8b9 3000 	ldrh.w	r3, [r9]
 8022ab0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022ab4:	eba3 0308 	sub.w	r3, r3, r8
 8022ab8:	eba6 0608 	sub.w	r6, r6, r8
 8022abc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022ac0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022ac4:	440e      	add	r6, r1
 8022ac6:	e79a      	b.n	80229fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022ac8:	4b03      	ldr	r3, [pc, #12]	; (8022ad8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022aca:	6818      	ldr	r0, [r3, #0]
 8022acc:	6803      	ldr	r3, [r0, #0]
 8022ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ad0:	4798      	blx	r3
 8022ad2:	b007      	add	sp, #28
 8022ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ad8:	200155e8 	.word	0x200155e8
 8022adc:	200155e2 	.word	0x200155e2

08022ae0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ae4:	b089      	sub	sp, #36	; 0x24
 8022ae6:	4682      	mov	sl, r0
 8022ae8:	460f      	mov	r7, r1
 8022aea:	4691      	mov	r9, r2
 8022aec:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8022af0:	4698      	mov	r8, r3
 8022af2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022af4:	2e00      	cmp	r6, #0
 8022af6:	d036      	beq.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022af8:	4608      	mov	r0, r1
 8022afa:	f7fc f861 	bl	801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022afe:	4605      	mov	r5, r0
 8022b00:	4638      	mov	r0, r7
 8022b02:	f7fc f891 	bl	801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022b06:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022b0a:	4638      	mov	r0, r7
 8022b0c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022b10:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022b14:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022b18:	f7fc f93e 	bl	801ed98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022b1c:	4605      	mov	r5, r0
 8022b1e:	4638      	mov	r0, r7
 8022b20:	f7fc f96a 	bl	801edf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022b24:	4681      	mov	r9, r0
 8022b26:	4638      	mov	r0, r7
 8022b28:	f7fc f9ba 	bl	801eea0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022b2c:	280b      	cmp	r0, #11
 8022b2e:	d81a      	bhi.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022b30:	e8df f000 	tbb	[pc, r0]
 8022b34:	1906aebd 	.word	0x1906aebd
 8022b38:	19191919 	.word	0x19191919
 8022b3c:	b5191919 	.word	0xb5191919
 8022b40:	4bb0      	ldr	r3, [pc, #704]	; (8022e04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8022b42:	6818      	ldr	r0, [r3, #0]
 8022b44:	6803      	ldr	r3, [r0, #0]
 8022b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b48:	4798      	blx	r3
 8022b4a:	2eff      	cmp	r6, #255	; 0xff
 8022b4c:	d121      	bne.n	8022b92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8022b4e:	0683      	lsls	r3, r0, #26
 8022b50:	d41f      	bmi.n	8022b92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8022b52:	4638      	mov	r0, r7
 8022b54:	f7fc f8e8 	bl	801ed28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022b58:	b940      	cbnz	r0, 8022b6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8022b5a:	4623      	mov	r3, r4
 8022b5c:	aa02      	add	r2, sp, #8
 8022b5e:	4629      	mov	r1, r5
 8022b60:	4650      	mov	r0, sl
 8022b62:	f7ff fa2f 	bl	8021fc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022b66:	b009      	add	sp, #36	; 0x24
 8022b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b6c:	f10d 0818 	add.w	r8, sp, #24
 8022b70:	4639      	mov	r1, r7
 8022b72:	af04      	add	r7, sp, #16
 8022b74:	4640      	mov	r0, r8
 8022b76:	f7fc f88b 	bl	801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022b7a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022b7e:	e887 0003 	stmia.w	r7, {r0, r1}
 8022b82:	4638      	mov	r0, r7
 8022b84:	4621      	mov	r1, r4
 8022b86:	f7f5 fbff 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8022b8a:	4638      	mov	r0, r7
 8022b8c:	f7f5 fc3f 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b90:	b130      	cbz	r0, 8022ba0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022b92:	4633      	mov	r3, r6
 8022b94:	4622      	mov	r2, r4
 8022b96:	a902      	add	r1, sp, #8
 8022b98:	4628      	mov	r0, r5
 8022b9a:	f7ff f92d 	bl	8021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b9e:	e7e2      	b.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022ba0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022ba4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022ba8:	4293      	cmp	r3, r2
 8022baa:	dd12      	ble.n	8022bd2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8022bac:	1a9b      	subs	r3, r3, r2
 8022bae:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022bb2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022bb6:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022bba:	4628      	mov	r0, r5
 8022bbc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022bc0:	4642      	mov	r2, r8
 8022bc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022bc6:	a902      	add	r1, sp, #8
 8022bc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022bcc:	4633      	mov	r3, r6
 8022bce:	f7ff f913 	bl	8021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022bd2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022bd6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022bda:	4293      	cmp	r3, r2
 8022bdc:	dd12      	ble.n	8022c04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8022bde:	1a9b      	subs	r3, r3, r2
 8022be0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022be4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022be8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022bec:	4642      	mov	r2, r8
 8022bee:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022bf2:	4628      	mov	r0, r5
 8022bf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022bf8:	23ff      	movs	r3, #255	; 0xff
 8022bfa:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022bfe:	a902      	add	r1, sp, #8
 8022c00:	f7ff f8fa 	bl	8021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c04:	463b      	mov	r3, r7
 8022c06:	aa02      	add	r2, sp, #8
 8022c08:	4629      	mov	r1, r5
 8022c0a:	4650      	mov	r0, sl
 8022c0c:	f7ff f9da 	bl	8021fc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022c10:	88a2      	ldrh	r2, [r4, #4]
 8022c12:	8823      	ldrh	r3, [r4, #0]
 8022c14:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022c18:	4413      	add	r3, r2
 8022c1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022c1e:	440a      	add	r2, r1
 8022c20:	b29b      	uxth	r3, r3
 8022c22:	b292      	uxth	r2, r2
 8022c24:	b218      	sxth	r0, r3
 8022c26:	b211      	sxth	r1, r2
 8022c28:	4288      	cmp	r0, r1
 8022c2a:	dd12      	ble.n	8022c52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8022c2c:	1a9b      	subs	r3, r3, r2
 8022c2e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022c32:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022c36:	4642      	mov	r2, r8
 8022c38:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022c3c:	a902      	add	r1, sp, #8
 8022c3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022c42:	23ff      	movs	r3, #255	; 0xff
 8022c44:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022c48:	4628      	mov	r0, r5
 8022c4a:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022c4e:	f7ff f8d3 	bl	8021df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c52:	88e2      	ldrh	r2, [r4, #6]
 8022c54:	8863      	ldrh	r3, [r4, #2]
 8022c56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022c5a:	4413      	add	r3, r2
 8022c5c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022c60:	440a      	add	r2, r1
 8022c62:	b29b      	uxth	r3, r3
 8022c64:	b292      	uxth	r2, r2
 8022c66:	b218      	sxth	r0, r3
 8022c68:	b211      	sxth	r1, r2
 8022c6a:	4288      	cmp	r0, r1
 8022c6c:	f77f af7b 	ble.w	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022c70:	1a9b      	subs	r3, r3, r2
 8022c72:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022c76:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022c7a:	4642      	mov	r2, r8
 8022c7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c80:	23ff      	movs	r3, #255	; 0xff
 8022c82:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022c86:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022c8a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022c8e:	e782      	b.n	8022b96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8022c90:	4633      	mov	r3, r6
 8022c92:	4622      	mov	r2, r4
 8022c94:	a902      	add	r1, sp, #8
 8022c96:	4628      	mov	r0, r5
 8022c98:	f7ff fa04 	bl	80220a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022c9c:	e763      	b.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022c9e:	9600      	str	r6, [sp, #0]
 8022ca0:	4623      	mov	r3, r4
 8022ca2:	aa02      	add	r2, sp, #8
 8022ca4:	4649      	mov	r1, r9
 8022ca6:	4628      	mov	r0, r5
 8022ca8:	f7ff fddc 	bl	8022864 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022cac:	e75b      	b.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022cae:	4638      	mov	r0, r7
 8022cb0:	f7fc f83a 	bl	801ed28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022cb4:	b950      	cbnz	r0, 8022ccc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8022cb6:	f8da 3000 	ldr.w	r3, [sl]
 8022cba:	aa02      	add	r2, sp, #8
 8022cbc:	4629      	mov	r1, r5
 8022cbe:	e9cd 6000 	strd	r6, r0, [sp]
 8022cc2:	4650      	mov	r0, sl
 8022cc4:	68de      	ldr	r6, [r3, #12]
 8022cc6:	4623      	mov	r3, r4
 8022cc8:	47b0      	blx	r6
 8022cca:	e74c      	b.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022ccc:	f10d 0818 	add.w	r8, sp, #24
 8022cd0:	4639      	mov	r1, r7
 8022cd2:	af04      	add	r7, sp, #16
 8022cd4:	4640      	mov	r0, r8
 8022cd6:	f7fb ffdb 	bl	801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022cda:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022cde:	e887 0003 	stmia.w	r7, {r0, r1}
 8022ce2:	4638      	mov	r0, r7
 8022ce4:	4621      	mov	r1, r4
 8022ce6:	f7f5 fb4f 	bl	8018388 <_ZN8touchgfx4RectaNERKS0_>
 8022cea:	4638      	mov	r0, r7
 8022cec:	f7f5 fb8f 	bl	801840e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022cf0:	b138      	cbz	r0, 8022d02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8022cf2:	4623      	mov	r3, r4
 8022cf4:	9600      	str	r6, [sp, #0]
 8022cf6:	aa02      	add	r2, sp, #8
 8022cf8:	4649      	mov	r1, r9
 8022cfa:	4628      	mov	r0, r5
 8022cfc:	f7ff fdca 	bl	8022894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d00:	e731      	b.n	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022d02:	f8da 3000 	ldr.w	r3, [sl]
 8022d06:	aa02      	add	r2, sp, #8
 8022d08:	4629      	mov	r1, r5
 8022d0a:	e9cd 6000 	strd	r6, r0, [sp]
 8022d0e:	4650      	mov	r0, sl
 8022d10:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022d14:	463b      	mov	r3, r7
 8022d16:	47d8      	blx	fp
 8022d18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022d1c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022d20:	4293      	cmp	r3, r2
 8022d22:	dd13      	ble.n	8022d4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8022d24:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022d28:	1a9b      	subs	r3, r3, r2
 8022d2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d2e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022d32:	4628      	mov	r0, r5
 8022d34:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022d38:	aa02      	add	r2, sp, #8
 8022d3a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022d3e:	4649      	mov	r1, r9
 8022d40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d44:	4643      	mov	r3, r8
 8022d46:	9600      	str	r6, [sp, #0]
 8022d48:	f7ff fda4 	bl	8022894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d4c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022d50:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022d54:	4293      	cmp	r3, r2
 8022d56:	dd13      	ble.n	8022d80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8022d58:	1a9b      	subs	r3, r3, r2
 8022d5a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022d5e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022d62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022d66:	aa02      	add	r2, sp, #8
 8022d68:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022d6c:	4628      	mov	r0, r5
 8022d6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d72:	4643      	mov	r3, r8
 8022d74:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022d78:	4649      	mov	r1, r9
 8022d7a:	9600      	str	r6, [sp, #0]
 8022d7c:	f7ff fd8a 	bl	8022894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d80:	88a2      	ldrh	r2, [r4, #4]
 8022d82:	8823      	ldrh	r3, [r4, #0]
 8022d84:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022d88:	4413      	add	r3, r2
 8022d8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022d8e:	440a      	add	r2, r1
 8022d90:	b29b      	uxth	r3, r3
 8022d92:	b292      	uxth	r2, r2
 8022d94:	b218      	sxth	r0, r3
 8022d96:	b211      	sxth	r1, r2
 8022d98:	4288      	cmp	r0, r1
 8022d9a:	dd13      	ble.n	8022dc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8022d9c:	1a9b      	subs	r3, r3, r2
 8022d9e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022da2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022da6:	aa02      	add	r2, sp, #8
 8022da8:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022dac:	4649      	mov	r1, r9
 8022dae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022db2:	4643      	mov	r3, r8
 8022db4:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022db8:	4628      	mov	r0, r5
 8022dba:	9600      	str	r6, [sp, #0]
 8022dbc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022dc0:	f7ff fd68 	bl	8022894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022dc4:	88e2      	ldrh	r2, [r4, #6]
 8022dc6:	8863      	ldrh	r3, [r4, #2]
 8022dc8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022dcc:	4413      	add	r3, r2
 8022dce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022dd2:	440a      	add	r2, r1
 8022dd4:	b29b      	uxth	r3, r3
 8022dd6:	b292      	uxth	r2, r2
 8022dd8:	b218      	sxth	r0, r3
 8022dda:	b211      	sxth	r1, r2
 8022ddc:	4288      	cmp	r0, r1
 8022dde:	f77f aec2 	ble.w	8022b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022de2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022de6:	1a9b      	subs	r3, r3, r2
 8022de8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022dec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022df0:	4643      	mov	r3, r8
 8022df2:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022df6:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022dfa:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022dfe:	9600      	str	r6, [sp, #0]
 8022e00:	e779      	b.n	8022cf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8022e02:	bf00      	nop
 8022e04:	200155e8 	.word	0x200155e8

08022e08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022e08:	b180      	cbz	r0, 8022e2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022e0a:	2903      	cmp	r1, #3
 8022e0c:	d81c      	bhi.n	8022e48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022e0e:	e8df f001 	tbb	[pc, r1]
 8022e12:	1d02      	.short	0x1d02
 8022e14:	1f08      	.short	0x1f08
 8022e16:	4b10      	ldr	r3, [pc, #64]	; (8022e58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022e18:	8818      	ldrh	r0, [r3, #0]
 8022e1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e1e:	4240      	negs	r0, r0
 8022e20:	4770      	bx	lr
 8022e22:	4b0d      	ldr	r3, [pc, #52]	; (8022e58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022e24:	8818      	ldrh	r0, [r3, #0]
 8022e26:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e2a:	4770      	bx	lr
 8022e2c:	2903      	cmp	r1, #3
 8022e2e:	d80b      	bhi.n	8022e48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022e30:	a301      	add	r3, pc, #4	; (adr r3, 8022e38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8022e32:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022e36:	bf00      	nop
 8022e38:	08022e4d 	.word	0x08022e4d
 8022e3c:	08022e23 	.word	0x08022e23
 8022e40:	08022e51 	.word	0x08022e51
 8022e44:	08022e17 	.word	0x08022e17
 8022e48:	2000      	movs	r0, #0
 8022e4a:	4770      	bx	lr
 8022e4c:	2001      	movs	r0, #1
 8022e4e:	4770      	bx	lr
 8022e50:	f04f 30ff 	mov.w	r0, #4294967295
 8022e54:	4770      	bx	lr
 8022e56:	bf00      	nop
 8022e58:	200155e2 	.word	0x200155e2

08022e5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022e5c:	b180      	cbz	r0, 8022e80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8022e5e:	2903      	cmp	r1, #3
 8022e60:	d81c      	bhi.n	8022e9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e62:	e8df f001 	tbb	[pc, r1]
 8022e66:	021d      	.short	0x021d
 8022e68:	071f      	.short	0x071f
 8022e6a:	4b10      	ldr	r3, [pc, #64]	; (8022eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e6c:	8818      	ldrh	r0, [r3, #0]
 8022e6e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e72:	4770      	bx	lr
 8022e74:	4b0d      	ldr	r3, [pc, #52]	; (8022eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e76:	8818      	ldrh	r0, [r3, #0]
 8022e78:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e7c:	4240      	negs	r0, r0
 8022e7e:	4770      	bx	lr
 8022e80:	2903      	cmp	r1, #3
 8022e82:	d80b      	bhi.n	8022e9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e84:	a301      	add	r3, pc, #4	; (adr r3, 8022e8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8022e86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022e8a:	bf00      	nop
 8022e8c:	08022e6b 	.word	0x08022e6b
 8022e90:	08022ea5 	.word	0x08022ea5
 8022e94:	08022e75 	.word	0x08022e75
 8022e98:	08022ea1 	.word	0x08022ea1
 8022e9c:	2000      	movs	r0, #0
 8022e9e:	4770      	bx	lr
 8022ea0:	2001      	movs	r0, #1
 8022ea2:	4770      	bx	lr
 8022ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8022ea8:	4770      	bx	lr
 8022eaa:	bf00      	nop
 8022eac:	200155e2 	.word	0x200155e2

08022eb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb4:	b099      	sub	sp, #100	; 0x64
 8022eb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8022eb8:	a914      	add	r1, sp, #80	; 0x50
 8022eba:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8022ebe:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8022ec2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8022ec6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8022eca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8022ece:	e881 000c 	stmia.w	r1, {r2, r3}
 8022ed2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8022ed6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8022eda:	9309      	str	r3, [sp, #36]	; 0x24
 8022edc:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022ee0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022ee4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8022ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8022eea:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8022eee:	930c      	str	r3, [sp, #48]	; 0x30
 8022ef0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8022ef4:	798f      	ldrb	r7, [r1, #6]
 8022ef6:	431f      	orrs	r7, r3
 8022ef8:	f000 8195 	beq.w	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022efc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022f00:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8022f04:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022f08:	ea59 0903 	orrs.w	r9, r9, r3
 8022f0c:	f000 818b 	beq.w	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022f10:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022f14:	b29b      	uxth	r3, r3
 8022f16:	2d00      	cmp	r5, #0
 8022f18:	f000 812e 	beq.w	8023178 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8022f1c:	1aed      	subs	r5, r5, r3
 8022f1e:	b2ad      	uxth	r5, r5
 8022f20:	042b      	lsls	r3, r5, #16
 8022f22:	d502      	bpl.n	8022f2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8022f24:	1b64      	subs	r4, r4, r5
 8022f26:	2500      	movs	r5, #0
 8022f28:	b224      	sxth	r4, r4
 8022f2a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022f2e:	a814      	add	r0, sp, #80	; 0x50
 8022f30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8022f34:	428c      	cmp	r4, r1
 8022f36:	b28b      	uxth	r3, r1
 8022f38:	bfbf      	itttt	lt
 8022f3a:	18ed      	addlt	r5, r5, r3
 8022f3c:	1b2c      	sublt	r4, r5, r4
 8022f3e:	b2a5      	uxthlt	r5, r4
 8022f40:	460c      	movlt	r4, r1
 8022f42:	8891      	ldrh	r1, [r2, #4]
 8022f44:	440b      	add	r3, r1
 8022f46:	4621      	mov	r1, r4
 8022f48:	b21b      	sxth	r3, r3
 8022f4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f4c:	88d3      	ldrh	r3, [r2, #6]
 8022f4e:	8852      	ldrh	r2, [r2, #2]
 8022f50:	4413      	add	r3, r2
 8022f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f54:	b21b      	sxth	r3, r3
 8022f56:	930d      	str	r3, [sp, #52]	; 0x34
 8022f58:	4bbd      	ldr	r3, [pc, #756]	; (8023250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8022f5a:	f893 b000 	ldrb.w	fp, [r3]
 8022f5e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022f62:	f1dc 0300 	rsbs	r3, ip, #0
 8022f66:	eb43 030c 	adc.w	r3, r3, ip
 8022f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8022f6c:	4653      	mov	r3, sl
 8022f6e:	f7f8 fb20 	bl	801b5b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022f72:	4621      	mov	r1, r4
 8022f74:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8022f78:	4653      	mov	r3, sl
 8022f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f7c:	a814      	add	r0, sp, #80	; 0x50
 8022f7e:	f7f8 fb35 	bl	801b5ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022f82:	a918      	add	r1, sp, #96	; 0x60
 8022f84:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022f88:	a817      	add	r0, sp, #92	; 0x5c
 8022f8a:	f7f8 fc55 	bl	801b838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022f8e:	f1ba 0f00 	cmp.w	sl, #0
 8022f92:	f040 80f4 	bne.w	802317e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8022f96:	f1bb 0f01 	cmp.w	fp, #1
 8022f9a:	f040 80f8 	bne.w	802318e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8022f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	f040 8145 	bne.w	8023230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8022fa6:	b2ba      	uxth	r2, r7
 8022fa8:	b905      	cbnz	r5, 8022fac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8022faa:	b16e      	cbz	r6, 8022fc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8022fac:	fb06 5302 	mla	r3, r6, r2, r5
 8022fb0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022fb2:	4631      	mov	r1, r6
 8022fb4:	fb08 f303 	mul.w	r3, r8, r3
 8022fb8:	f003 0607 	and.w	r6, r3, #7
 8022fbc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8022fc0:	9328      	str	r3, [sp, #160]	; 0xa0
 8022fc2:	eba9 0301 	sub.w	r3, r9, r1
 8022fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8022fc8:	4651      	mov	r1, sl
 8022fca:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022fcc:	f7ff ff1c 	bl	8022e08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022fd0:	4681      	mov	r9, r0
 8022fd2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022fd4:	f7ff ff42 	bl	8022e5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022fdc:	4683      	mov	fp, r0
 8022fde:	eba3 0a01 	sub.w	sl, r3, r1
 8022fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fe4:	459a      	cmp	sl, r3
 8022fe6:	bfa8      	it	ge
 8022fe8:	469a      	movge	sl, r3
 8022fea:	f1ba 0f00 	cmp.w	sl, #0
 8022fee:	f340 811a 	ble.w	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022ff2:	1b64      	subs	r4, r4, r5
 8022ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ff6:	1b1c      	subs	r4, r3, r4
 8022ff8:	42bc      	cmp	r4, r7
 8022ffa:	bfd4      	ite	le
 8022ffc:	ebc5 0504 	rsble	r5, r5, r4
 8023000:	ebc5 0507 	rsbgt	r5, r5, r7
 8023004:	2d00      	cmp	r5, #0
 8023006:	f340 810e 	ble.w	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802300a:	1b52      	subs	r2, r2, r5
 802300c:	fb08 f302 	mul.w	r3, r8, r2
 8023010:	930f      	str	r3, [sp, #60]	; 0x3c
 8023012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023014:	2b00      	cmp	r3, #0
 8023016:	f040 8116 	bne.w	8023246 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802301a:	4b8e      	ldr	r3, [pc, #568]	; (8023254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802301c:	6818      	ldr	r0, [r3, #0]
 802301e:	6803      	ldr	r3, [r0, #0]
 8023020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023022:	4798      	blx	r3
 8023024:	2301      	movs	r3, #1
 8023026:	4a8c      	ldr	r2, [pc, #560]	; (8023258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023028:	fa03 f308 	lsl.w	r3, r3, r8
 802302c:	8811      	ldrh	r1, [r2, #0]
 802302e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023032:	3b01      	subs	r3, #1
 8023034:	b2db      	uxtb	r3, r3
 8023036:	930e      	str	r3, [sp, #56]	; 0x38
 8023038:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802303c:	fb01 2303 	mla	r3, r1, r3, r2
 8023040:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023044:	930a      	str	r3, [sp, #40]	; 0x28
 8023046:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023048:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802304c:	9313      	str	r3, [sp, #76]	; 0x4c
 802304e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023050:	0a19      	lsrs	r1, r3, #8
 8023052:	b2cb      	uxtb	r3, r1
 8023054:	9312      	str	r3, [sp, #72]	; 0x48
 8023056:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023058:	b2db      	uxtb	r3, r3
 802305a:	9311      	str	r3, [sp, #68]	; 0x44
 802305c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802305e:	095a      	lsrs	r2, r3, #5
 8023060:	4b7e      	ldr	r3, [pc, #504]	; (802325c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8023062:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023066:	400b      	ands	r3, r1
 8023068:	4313      	orrs	r3, r2
 802306a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802306c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023070:	4313      	orrs	r3, r2
 8023072:	b29b      	uxth	r3, r3
 8023074:	9310      	str	r3, [sp, #64]	; 0x40
 8023076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023078:	781a      	ldrb	r2, [r3, #0]
 802307a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802307e:	fb05 b919 	mls	r9, r5, r9, fp
 8023082:	4132      	asrs	r2, r6
 8023084:	fb03 fb05 	mul.w	fp, r3, r5
 8023088:	930d      	str	r3, [sp, #52]	; 0x34
 802308a:	b2d2      	uxtb	r2, r2
 802308c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023090:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023094:	f0c0 80f5 	bcc.w	8023282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8023098:	46ae      	mov	lr, r5
 802309a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 802309e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80230a2:	f0c0 80dd 	bcc.w	8023260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80230a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230a8:	4013      	ands	r3, r2
 80230aa:	d055      	beq.n	8023158 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80230ac:	20ff      	movs	r0, #255	; 0xff
 80230ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80230b0:	fb90 f1f1 	sdiv	r1, r0, r1
 80230b4:	434b      	muls	r3, r1
 80230b6:	2bfe      	cmp	r3, #254	; 0xfe
 80230b8:	dd03      	ble.n	80230c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80230ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80230bc:	4281      	cmp	r1, r0
 80230be:	f000 80c4 	beq.w	802324a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80230c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80230c4:	f8bc 4000 	ldrh.w	r4, [ip]
 80230c8:	fb11 f303 	smulbb	r3, r1, r3
 80230cc:	1220      	asrs	r0, r4, #8
 80230ce:	b29b      	uxth	r3, r3
 80230d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80230d4:	1c59      	adds	r1, r3, #1
 80230d6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80230da:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80230de:	10e1      	asrs	r1, r4, #3
 80230e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80230e4:	00e4      	lsls	r4, r4, #3
 80230e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80230ea:	b29f      	uxth	r7, r3
 80230ec:	43db      	mvns	r3, r3
 80230ee:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80230f2:	b2db      	uxtb	r3, r3
 80230f4:	b2e4      	uxtb	r4, r4
 80230f6:	9309      	str	r3, [sp, #36]	; 0x24
 80230f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80230fa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80230fe:	fb13 f907 	smulbb	r9, r3, r7
 8023102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023104:	fb00 9003 	mla	r0, r0, r3, r9
 8023108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802310a:	fb13 f907 	smulbb	r9, r3, r7
 802310e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023110:	b280      	uxth	r0, r0
 8023112:	fb01 9103 	mla	r1, r1, r3, r9
 8023116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023118:	fb13 f707 	smulbb	r7, r3, r7
 802311c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802311e:	b289      	uxth	r1, r1
 8023120:	fb04 7403 	mla	r4, r4, r3, r7
 8023124:	1c43      	adds	r3, r0, #1
 8023126:	b2a4      	uxth	r4, r4
 8023128:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802312c:	f104 0901 	add.w	r9, r4, #1
 8023130:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023134:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023138:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802313c:	ea49 0000 	orr.w	r0, r9, r0
 8023140:	f101 0901 	add.w	r9, r1, #1
 8023144:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023148:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802314c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023150:	ea40 0009 	orr.w	r0, r0, r9
 8023154:	f8ac 0000 	strh.w	r0, [ip]
 8023158:	4446      	add	r6, r8
 802315a:	b2b6      	uxth	r6, r6
 802315c:	2e07      	cmp	r6, #7
 802315e:	bf89      	itett	hi
 8023160:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023162:	fa42 f208 	asrls.w	r2, r2, r8
 8023166:	2600      	movhi	r6, #0
 8023168:	785a      	ldrbhi	r2, [r3, #1]
 802316a:	bf8a      	itet	hi
 802316c:	3301      	addhi	r3, #1
 802316e:	b2d2      	uxtbls	r2, r2
 8023170:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023174:	449c      	add	ip, r3
 8023176:	e792      	b.n	802309e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8023178:	441c      	add	r4, r3
 802317a:	b224      	sxth	r4, r4
 802317c:	e6d5      	b.n	8022f2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802317e:	f1ba 0f01 	cmp.w	sl, #1
 8023182:	f47f af0c 	bne.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023186:	f1bb 0f01 	cmp.w	fp, #1
 802318a:	f47f af08 	bne.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802318e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8023254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8023192:	f8db 0000 	ldr.w	r0, [fp]
 8023196:	6803      	ldr	r3, [r0, #0]
 8023198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802319a:	4798      	blx	r3
 802319c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80231a0:	465a      	mov	r2, fp
 80231a2:	d006      	beq.n	80231b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80231a4:	f1b8 0f04 	cmp.w	r8, #4
 80231a8:	d140      	bne.n	802322c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80231aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231ac:	3300      	adds	r3, #0
 80231ae:	bf18      	it	ne
 80231b0:	2301      	movne	r3, #1
 80231b2:	0580      	lsls	r0, r0, #22
 80231b4:	d56e      	bpl.n	8023294 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80231b6:	f1b8 0f08 	cmp.w	r8, #8
 80231ba:	d16b      	bne.n	8023294 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80231bc:	2b00      	cmp	r3, #0
 80231be:	bf0c      	ite	eq
 80231c0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80231c4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80231c8:	2d00      	cmp	r5, #0
 80231ca:	f47f aee8 	bne.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80231ce:	2e00      	cmp	r6, #0
 80231d0:	f47f aee5 	bne.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80231d4:	19e3      	adds	r3, r4, r7
 80231d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80231d8:	4283      	cmp	r3, r0
 80231da:	f73f aee0 	bgt.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80231de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80231e2:	444b      	add	r3, r9
 80231e4:	4283      	cmp	r3, r0
 80231e6:	f73f aeda 	bgt.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80231ea:	b2bf      	uxth	r7, r7
 80231ec:	f1b8 0f08 	cmp.w	r8, #8
 80231f0:	6810      	ldr	r0, [r2, #0]
 80231f2:	f04f 0500 	mov.w	r5, #0
 80231f6:	bf18      	it	ne
 80231f8:	3701      	addne	r7, #1
 80231fa:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80231fe:	6804      	ldr	r4, [r0, #0]
 8023200:	bf18      	it	ne
 8023202:	f027 0701 	bicne.w	r7, r7, #1
 8023206:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802320a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802320e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023210:	bf18      	it	ne
 8023212:	b2bf      	uxthne	r7, r7
 8023214:	9104      	str	r1, [sp, #16]
 8023216:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023218:	e9cd 7900 	strd	r7, r9, [sp]
 802321c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023220:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023222:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023224:	47a0      	blx	r4
 8023226:	b019      	add	sp, #100	; 0x64
 8023228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802322c:	2300      	movs	r3, #0
 802322e:	e7c0      	b.n	80231b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8023230:	2208      	movs	r2, #8
 8023232:	fb92 f3f8 	sdiv	r3, r2, r8
 8023236:	1e5a      	subs	r2, r3, #1
 8023238:	443a      	add	r2, r7
 802323a:	fb92 f2f3 	sdiv	r2, r2, r3
 802323e:	fb12 f203 	smulbb	r2, r2, r3
 8023242:	b292      	uxth	r2, r2
 8023244:	e6b0      	b.n	8022fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023246:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023248:	e6ec      	b.n	8023024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802324a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802324c:	e782      	b.n	8023154 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802324e:	bf00      	nop
 8023250:	200155e0 	.word	0x200155e0
 8023254:	200155e8 	.word	0x200155e8
 8023258:	200155e2 	.word	0x200155e2
 802325c:	00fff800 	.word	0x00fff800
 8023260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023262:	b153      	cbz	r3, 802327a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8023264:	441e      	add	r6, r3
 8023266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023268:	b2b6      	uxth	r6, r6
 802326a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802326e:	f006 0607 	and.w	r6, r6, #7
 8023272:	781a      	ldrb	r2, [r3, #0]
 8023274:	9328      	str	r3, [sp, #160]	; 0xa0
 8023276:	4132      	asrs	r2, r6
 8023278:	b2d2      	uxtb	r2, r2
 802327a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802327c:	445b      	add	r3, fp
 802327e:	930a      	str	r3, [sp, #40]	; 0x28
 8023280:	e706      	b.n	8023090 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8023282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023284:	2b00      	cmp	r3, #0
 8023286:	d1ce      	bne.n	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023288:	4b05      	ldr	r3, [pc, #20]	; (80232a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 802328a:	6818      	ldr	r0, [r3, #0]
 802328c:	6803      	ldr	r3, [r0, #0]
 802328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023290:	4798      	blx	r3
 8023292:	e7c8      	b.n	8023226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023294:	2b00      	cmp	r3, #0
 8023296:	f43f ae82 	beq.w	8022f9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802329a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802329e:	e793      	b.n	80231c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80232a0:	200155e8 	.word	0x200155e8

080232a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80232a4:	b538      	push	{r3, r4, r5, lr}
 80232a6:	4c15      	ldr	r4, [pc, #84]	; (80232fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80232a8:	4605      	mov	r5, r0
 80232aa:	7823      	ldrb	r3, [r4, #0]
 80232ac:	f3bf 8f5b 	dmb	ish
 80232b0:	07da      	lsls	r2, r3, #31
 80232b2:	d40b      	bmi.n	80232cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80232b4:	4620      	mov	r0, r4
 80232b6:	f007 fa87 	bl	802a7c8 <__cxa_guard_acquire>
 80232ba:	b138      	cbz	r0, 80232cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80232bc:	4620      	mov	r0, r4
 80232be:	f007 fa8f 	bl	802a7e0 <__cxa_guard_release>
 80232c2:	4a0f      	ldr	r2, [pc, #60]	; (8023300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80232c4:	490f      	ldr	r1, [pc, #60]	; (8023304 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80232c6:	4810      	ldr	r0, [pc, #64]	; (8023308 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80232c8:	f007 fa77 	bl	802a7ba <__aeabi_atexit>
 80232cc:	4c0f      	ldr	r4, [pc, #60]	; (802330c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80232ce:	7823      	ldrb	r3, [r4, #0]
 80232d0:	f3bf 8f5b 	dmb	ish
 80232d4:	07db      	lsls	r3, r3, #31
 80232d6:	d40b      	bmi.n	80232f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80232d8:	4620      	mov	r0, r4
 80232da:	f007 fa75 	bl	802a7c8 <__cxa_guard_acquire>
 80232de:	b138      	cbz	r0, 80232f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80232e0:	4620      	mov	r0, r4
 80232e2:	f007 fa7d 	bl	802a7e0 <__cxa_guard_release>
 80232e6:	4a06      	ldr	r2, [pc, #24]	; (8023300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80232e8:	4909      	ldr	r1, [pc, #36]	; (8023310 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80232ea:	480a      	ldr	r0, [pc, #40]	; (8023314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80232ec:	f007 fa65 	bl	802a7ba <__aeabi_atexit>
 80232f0:	4b05      	ldr	r3, [pc, #20]	; (8023308 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80232f2:	612b      	str	r3, [r5, #16]
 80232f4:	4b07      	ldr	r3, [pc, #28]	; (8023314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80232f6:	616b      	str	r3, [r5, #20]
 80232f8:	bd38      	pop	{r3, r4, r5, pc}
 80232fa:	bf00      	nop
 80232fc:	200156b4 	.word	0x200156b4
 8023300:	20000000 	.word	0x20000000
 8023304:	080214b1 	.word	0x080214b1
 8023308:	20000088 	.word	0x20000088
 802330c:	200156b8 	.word	0x200156b8
 8023310:	080214af 	.word	0x080214af
 8023314:	2000008c 	.word	0x2000008c

08023318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023318:	b538      	push	{r3, r4, r5, lr}
 802331a:	4c15      	ldr	r4, [pc, #84]	; (8023370 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802331c:	4605      	mov	r5, r0
 802331e:	7823      	ldrb	r3, [r4, #0]
 8023320:	f3bf 8f5b 	dmb	ish
 8023324:	07da      	lsls	r2, r3, #31
 8023326:	d40b      	bmi.n	8023340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023328:	4620      	mov	r0, r4
 802332a:	f007 fa4d 	bl	802a7c8 <__cxa_guard_acquire>
 802332e:	b138      	cbz	r0, 8023340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023330:	4620      	mov	r0, r4
 8023332:	f007 fa55 	bl	802a7e0 <__cxa_guard_release>
 8023336:	4a0f      	ldr	r2, [pc, #60]	; (8023374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023338:	490f      	ldr	r1, [pc, #60]	; (8023378 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802333a:	4810      	ldr	r0, [pc, #64]	; (802337c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802333c:	f007 fa3d 	bl	802a7ba <__aeabi_atexit>
 8023340:	4c0f      	ldr	r4, [pc, #60]	; (8023380 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023342:	7823      	ldrb	r3, [r4, #0]
 8023344:	f3bf 8f5b 	dmb	ish
 8023348:	07db      	lsls	r3, r3, #31
 802334a:	d40b      	bmi.n	8023364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802334c:	4620      	mov	r0, r4
 802334e:	f007 fa3b 	bl	802a7c8 <__cxa_guard_acquire>
 8023352:	b138      	cbz	r0, 8023364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023354:	4620      	mov	r0, r4
 8023356:	f007 fa43 	bl	802a7e0 <__cxa_guard_release>
 802335a:	4a06      	ldr	r2, [pc, #24]	; (8023374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802335c:	4909      	ldr	r1, [pc, #36]	; (8023384 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802335e:	480a      	ldr	r0, [pc, #40]	; (8023388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023360:	f007 fa2b 	bl	802a7ba <__aeabi_atexit>
 8023364:	4b05      	ldr	r3, [pc, #20]	; (802337c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023366:	60ab      	str	r3, [r5, #8]
 8023368:	4b07      	ldr	r3, [pc, #28]	; (8023388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802336a:	60eb      	str	r3, [r5, #12]
 802336c:	bd38      	pop	{r3, r4, r5, pc}
 802336e:	bf00      	nop
 8023370:	2001568c 	.word	0x2001568c
 8023374:	20000000 	.word	0x20000000
 8023378:	080214b5 	.word	0x080214b5
 802337c:	20000060 	.word	0x20000060
 8023380:	20015690 	.word	0x20015690
 8023384:	080214b3 	.word	0x080214b3
 8023388:	20000064 	.word	0x20000064

0802338c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802338c:	b510      	push	{r4, lr}
 802338e:	4604      	mov	r4, r0
 8023390:	f7ff ff88 	bl	80232a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023394:	4620      	mov	r0, r4
 8023396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802339a:	f7ff bfbd 	b.w	8023318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080233a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80233a0:	b538      	push	{r3, r4, r5, lr}
 80233a2:	4c15      	ldr	r4, [pc, #84]	; (80233f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80233a4:	4605      	mov	r5, r0
 80233a6:	7823      	ldrb	r3, [r4, #0]
 80233a8:	f3bf 8f5b 	dmb	ish
 80233ac:	07da      	lsls	r2, r3, #31
 80233ae:	d40b      	bmi.n	80233c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80233b0:	4620      	mov	r0, r4
 80233b2:	f007 fa09 	bl	802a7c8 <__cxa_guard_acquire>
 80233b6:	b138      	cbz	r0, 80233c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80233b8:	4620      	mov	r0, r4
 80233ba:	f007 fa11 	bl	802a7e0 <__cxa_guard_release>
 80233be:	4a0f      	ldr	r2, [pc, #60]	; (80233fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80233c0:	490f      	ldr	r1, [pc, #60]	; (8023400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80233c2:	4810      	ldr	r0, [pc, #64]	; (8023404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80233c4:	f007 f9f9 	bl	802a7ba <__aeabi_atexit>
 80233c8:	4c0f      	ldr	r4, [pc, #60]	; (8023408 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80233ca:	7823      	ldrb	r3, [r4, #0]
 80233cc:	f3bf 8f5b 	dmb	ish
 80233d0:	07db      	lsls	r3, r3, #31
 80233d2:	d40b      	bmi.n	80233ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80233d4:	4620      	mov	r0, r4
 80233d6:	f007 f9f7 	bl	802a7c8 <__cxa_guard_acquire>
 80233da:	b138      	cbz	r0, 80233ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80233dc:	4620      	mov	r0, r4
 80233de:	f007 f9ff 	bl	802a7e0 <__cxa_guard_release>
 80233e2:	4a06      	ldr	r2, [pc, #24]	; (80233fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80233e4:	4909      	ldr	r1, [pc, #36]	; (802340c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80233e6:	480a      	ldr	r0, [pc, #40]	; (8023410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80233e8:	f007 f9e7 	bl	802a7ba <__aeabi_atexit>
 80233ec:	4b05      	ldr	r3, [pc, #20]	; (8023404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80233ee:	622b      	str	r3, [r5, #32]
 80233f0:	4b07      	ldr	r3, [pc, #28]	; (8023410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80233f2:	626b      	str	r3, [r5, #36]	; 0x24
 80233f4:	bd38      	pop	{r3, r4, r5, pc}
 80233f6:	bf00      	nop
 80233f8:	200156bc 	.word	0x200156bc
 80233fc:	20000000 	.word	0x20000000
 8023400:	080214a9 	.word	0x080214a9
 8023404:	20000090 	.word	0x20000090
 8023408:	200156c0 	.word	0x200156c0
 802340c:	080214a7 	.word	0x080214a7
 8023410:	20000094 	.word	0x20000094

08023414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023414:	b538      	push	{r3, r4, r5, lr}
 8023416:	4c15      	ldr	r4, [pc, #84]	; (802346c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023418:	4605      	mov	r5, r0
 802341a:	7823      	ldrb	r3, [r4, #0]
 802341c:	f3bf 8f5b 	dmb	ish
 8023420:	07da      	lsls	r2, r3, #31
 8023422:	d40b      	bmi.n	802343c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023424:	4620      	mov	r0, r4
 8023426:	f007 f9cf 	bl	802a7c8 <__cxa_guard_acquire>
 802342a:	b138      	cbz	r0, 802343c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802342c:	4620      	mov	r0, r4
 802342e:	f007 f9d7 	bl	802a7e0 <__cxa_guard_release>
 8023432:	4a0f      	ldr	r2, [pc, #60]	; (8023470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023434:	490f      	ldr	r1, [pc, #60]	; (8023474 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023436:	4810      	ldr	r0, [pc, #64]	; (8023478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023438:	f007 f9bf 	bl	802a7ba <__aeabi_atexit>
 802343c:	4c0f      	ldr	r4, [pc, #60]	; (802347c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802343e:	7823      	ldrb	r3, [r4, #0]
 8023440:	f3bf 8f5b 	dmb	ish
 8023444:	07db      	lsls	r3, r3, #31
 8023446:	d40b      	bmi.n	8023460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023448:	4620      	mov	r0, r4
 802344a:	f007 f9bd 	bl	802a7c8 <__cxa_guard_acquire>
 802344e:	b138      	cbz	r0, 8023460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023450:	4620      	mov	r0, r4
 8023452:	f007 f9c5 	bl	802a7e0 <__cxa_guard_release>
 8023456:	4a06      	ldr	r2, [pc, #24]	; (8023470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023458:	4909      	ldr	r1, [pc, #36]	; (8023480 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802345a:	480a      	ldr	r0, [pc, #40]	; (8023484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802345c:	f007 f9ad 	bl	802a7ba <__aeabi_atexit>
 8023460:	4b05      	ldr	r3, [pc, #20]	; (8023478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023462:	61ab      	str	r3, [r5, #24]
 8023464:	4b07      	ldr	r3, [pc, #28]	; (8023484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023466:	61eb      	str	r3, [r5, #28]
 8023468:	bd38      	pop	{r3, r4, r5, pc}
 802346a:	bf00      	nop
 802346c:	20015694 	.word	0x20015694
 8023470:	20000000 	.word	0x20000000
 8023474:	080214ad 	.word	0x080214ad
 8023478:	20000068 	.word	0x20000068
 802347c:	20015698 	.word	0x20015698
 8023480:	080214ab 	.word	0x080214ab
 8023484:	2000006c 	.word	0x2000006c

08023488 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023488:	b510      	push	{r4, lr}
 802348a:	4604      	mov	r4, r0
 802348c:	f7ff ff88 	bl	80233a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023490:	4620      	mov	r0, r4
 8023492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023496:	f7ff bfbd 	b.w	8023414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802349c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802349c:	b538      	push	{r3, r4, r5, lr}
 802349e:	4c15      	ldr	r4, [pc, #84]	; (80234f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80234a0:	4605      	mov	r5, r0
 80234a2:	7823      	ldrb	r3, [r4, #0]
 80234a4:	f3bf 8f5b 	dmb	ish
 80234a8:	07da      	lsls	r2, r3, #31
 80234aa:	d40b      	bmi.n	80234c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80234ac:	4620      	mov	r0, r4
 80234ae:	f007 f98b 	bl	802a7c8 <__cxa_guard_acquire>
 80234b2:	b138      	cbz	r0, 80234c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80234b4:	4620      	mov	r0, r4
 80234b6:	f007 f993 	bl	802a7e0 <__cxa_guard_release>
 80234ba:	4a0f      	ldr	r2, [pc, #60]	; (80234f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80234bc:	490f      	ldr	r1, [pc, #60]	; (80234fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80234be:	4810      	ldr	r0, [pc, #64]	; (8023500 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80234c0:	f007 f97b 	bl	802a7ba <__aeabi_atexit>
 80234c4:	4c0f      	ldr	r4, [pc, #60]	; (8023504 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80234c6:	7823      	ldrb	r3, [r4, #0]
 80234c8:	f3bf 8f5b 	dmb	ish
 80234cc:	07db      	lsls	r3, r3, #31
 80234ce:	d40b      	bmi.n	80234e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80234d0:	4620      	mov	r0, r4
 80234d2:	f007 f979 	bl	802a7c8 <__cxa_guard_acquire>
 80234d6:	b138      	cbz	r0, 80234e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80234d8:	4620      	mov	r0, r4
 80234da:	f007 f981 	bl	802a7e0 <__cxa_guard_release>
 80234de:	4a06      	ldr	r2, [pc, #24]	; (80234f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80234e0:	4909      	ldr	r1, [pc, #36]	; (8023508 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80234e2:	480a      	ldr	r0, [pc, #40]	; (802350c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80234e4:	f007 f969 	bl	802a7ba <__aeabi_atexit>
 80234e8:	4b05      	ldr	r3, [pc, #20]	; (8023500 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80234ea:	632b      	str	r3, [r5, #48]	; 0x30
 80234ec:	4b07      	ldr	r3, [pc, #28]	; (802350c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80234ee:	636b      	str	r3, [r5, #52]	; 0x34
 80234f0:	bd38      	pop	{r3, r4, r5, pc}
 80234f2:	bf00      	nop
 80234f4:	200156cc 	.word	0x200156cc
 80234f8:	20000000 	.word	0x20000000
 80234fc:	080214a1 	.word	0x080214a1
 8023500:	200000a0 	.word	0x200000a0
 8023504:	200156d0 	.word	0x200156d0
 8023508:	0802149f 	.word	0x0802149f
 802350c:	200000a4 	.word	0x200000a4

08023510 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023510:	b538      	push	{r3, r4, r5, lr}
 8023512:	4c15      	ldr	r4, [pc, #84]	; (8023568 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023514:	4605      	mov	r5, r0
 8023516:	7823      	ldrb	r3, [r4, #0]
 8023518:	f3bf 8f5b 	dmb	ish
 802351c:	07da      	lsls	r2, r3, #31
 802351e:	d40b      	bmi.n	8023538 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023520:	4620      	mov	r0, r4
 8023522:	f007 f951 	bl	802a7c8 <__cxa_guard_acquire>
 8023526:	b138      	cbz	r0, 8023538 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023528:	4620      	mov	r0, r4
 802352a:	f007 f959 	bl	802a7e0 <__cxa_guard_release>
 802352e:	4a0f      	ldr	r2, [pc, #60]	; (802356c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023530:	490f      	ldr	r1, [pc, #60]	; (8023570 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023532:	4810      	ldr	r0, [pc, #64]	; (8023574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023534:	f007 f941 	bl	802a7ba <__aeabi_atexit>
 8023538:	4c0f      	ldr	r4, [pc, #60]	; (8023578 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802353a:	7823      	ldrb	r3, [r4, #0]
 802353c:	f3bf 8f5b 	dmb	ish
 8023540:	07db      	lsls	r3, r3, #31
 8023542:	d40b      	bmi.n	802355c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023544:	4620      	mov	r0, r4
 8023546:	f007 f93f 	bl	802a7c8 <__cxa_guard_acquire>
 802354a:	b138      	cbz	r0, 802355c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802354c:	4620      	mov	r0, r4
 802354e:	f007 f947 	bl	802a7e0 <__cxa_guard_release>
 8023552:	4a06      	ldr	r2, [pc, #24]	; (802356c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023554:	4909      	ldr	r1, [pc, #36]	; (802357c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023556:	480a      	ldr	r0, [pc, #40]	; (8023580 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023558:	f007 f92f 	bl	802a7ba <__aeabi_atexit>
 802355c:	4b05      	ldr	r3, [pc, #20]	; (8023574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802355e:	62ab      	str	r3, [r5, #40]	; 0x28
 8023560:	4b07      	ldr	r3, [pc, #28]	; (8023580 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023562:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023564:	bd38      	pop	{r3, r4, r5, pc}
 8023566:	bf00      	nop
 8023568:	2001569c 	.word	0x2001569c
 802356c:	20000000 	.word	0x20000000
 8023570:	080214a5 	.word	0x080214a5
 8023574:	20000070 	.word	0x20000070
 8023578:	200156a0 	.word	0x200156a0
 802357c:	080214a3 	.word	0x080214a3
 8023580:	20000074 	.word	0x20000074

08023584 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023584:	b510      	push	{r4, lr}
 8023586:	4604      	mov	r4, r0
 8023588:	f7ff ff88 	bl	802349c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802358c:	4620      	mov	r0, r4
 802358e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023592:	f7ff bfbd 	b.w	8023510 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023598 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023598:	b538      	push	{r3, r4, r5, lr}
 802359a:	4c15      	ldr	r4, [pc, #84]	; (80235f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802359c:	4605      	mov	r5, r0
 802359e:	7823      	ldrb	r3, [r4, #0]
 80235a0:	f3bf 8f5b 	dmb	ish
 80235a4:	07da      	lsls	r2, r3, #31
 80235a6:	d40b      	bmi.n	80235c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80235a8:	4620      	mov	r0, r4
 80235aa:	f007 f90d 	bl	802a7c8 <__cxa_guard_acquire>
 80235ae:	b138      	cbz	r0, 80235c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80235b0:	4620      	mov	r0, r4
 80235b2:	f007 f915 	bl	802a7e0 <__cxa_guard_release>
 80235b6:	4a0f      	ldr	r2, [pc, #60]	; (80235f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80235b8:	490f      	ldr	r1, [pc, #60]	; (80235f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80235ba:	4810      	ldr	r0, [pc, #64]	; (80235fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80235bc:	f007 f8fd 	bl	802a7ba <__aeabi_atexit>
 80235c0:	4c0f      	ldr	r4, [pc, #60]	; (8023600 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80235c2:	7823      	ldrb	r3, [r4, #0]
 80235c4:	f3bf 8f5b 	dmb	ish
 80235c8:	07db      	lsls	r3, r3, #31
 80235ca:	d40b      	bmi.n	80235e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80235cc:	4620      	mov	r0, r4
 80235ce:	f007 f8fb 	bl	802a7c8 <__cxa_guard_acquire>
 80235d2:	b138      	cbz	r0, 80235e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80235d4:	4620      	mov	r0, r4
 80235d6:	f007 f903 	bl	802a7e0 <__cxa_guard_release>
 80235da:	4a06      	ldr	r2, [pc, #24]	; (80235f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80235dc:	4909      	ldr	r1, [pc, #36]	; (8023604 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80235de:	480a      	ldr	r0, [pc, #40]	; (8023608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80235e0:	f007 f8eb 	bl	802a7ba <__aeabi_atexit>
 80235e4:	4b05      	ldr	r3, [pc, #20]	; (80235fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80235e6:	652b      	str	r3, [r5, #80]	; 0x50
 80235e8:	4b07      	ldr	r3, [pc, #28]	; (8023608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80235ea:	656b      	str	r3, [r5, #84]	; 0x54
 80235ec:	bd38      	pop	{r3, r4, r5, pc}
 80235ee:	bf00      	nop
 80235f0:	200156d4 	.word	0x200156d4
 80235f4:	20000000 	.word	0x20000000
 80235f8:	08021491 	.word	0x08021491
 80235fc:	200000a8 	.word	0x200000a8
 8023600:	200156d8 	.word	0x200156d8
 8023604:	0802148f 	.word	0x0802148f
 8023608:	200000ac 	.word	0x200000ac

0802360c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802360c:	b538      	push	{r3, r4, r5, lr}
 802360e:	4c15      	ldr	r4, [pc, #84]	; (8023664 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023610:	4605      	mov	r5, r0
 8023612:	7823      	ldrb	r3, [r4, #0]
 8023614:	f3bf 8f5b 	dmb	ish
 8023618:	07da      	lsls	r2, r3, #31
 802361a:	d40b      	bmi.n	8023634 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802361c:	4620      	mov	r0, r4
 802361e:	f007 f8d3 	bl	802a7c8 <__cxa_guard_acquire>
 8023622:	b138      	cbz	r0, 8023634 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023624:	4620      	mov	r0, r4
 8023626:	f007 f8db 	bl	802a7e0 <__cxa_guard_release>
 802362a:	4a0f      	ldr	r2, [pc, #60]	; (8023668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802362c:	490f      	ldr	r1, [pc, #60]	; (802366c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802362e:	4810      	ldr	r0, [pc, #64]	; (8023670 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023630:	f007 f8c3 	bl	802a7ba <__aeabi_atexit>
 8023634:	4c0f      	ldr	r4, [pc, #60]	; (8023674 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023636:	7823      	ldrb	r3, [r4, #0]
 8023638:	f3bf 8f5b 	dmb	ish
 802363c:	07db      	lsls	r3, r3, #31
 802363e:	d40b      	bmi.n	8023658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023640:	4620      	mov	r0, r4
 8023642:	f007 f8c1 	bl	802a7c8 <__cxa_guard_acquire>
 8023646:	b138      	cbz	r0, 8023658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023648:	4620      	mov	r0, r4
 802364a:	f007 f8c9 	bl	802a7e0 <__cxa_guard_release>
 802364e:	4a06      	ldr	r2, [pc, #24]	; (8023668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023650:	4909      	ldr	r1, [pc, #36]	; (8023678 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023652:	480a      	ldr	r0, [pc, #40]	; (802367c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023654:	f007 f8b1 	bl	802a7ba <__aeabi_atexit>
 8023658:	4b05      	ldr	r3, [pc, #20]	; (8023670 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802365a:	64ab      	str	r3, [r5, #72]	; 0x48
 802365c:	4b07      	ldr	r3, [pc, #28]	; (802367c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802365e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023660:	bd38      	pop	{r3, r4, r5, pc}
 8023662:	bf00      	nop
 8023664:	200156dc 	.word	0x200156dc
 8023668:	20000000 	.word	0x20000000
 802366c:	08021495 	.word	0x08021495
 8023670:	200000b0 	.word	0x200000b0
 8023674:	200156e0 	.word	0x200156e0
 8023678:	08021493 	.word	0x08021493
 802367c:	200000b4 	.word	0x200000b4

08023680 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023680:	b538      	push	{r3, r4, r5, lr}
 8023682:	4c15      	ldr	r4, [pc, #84]	; (80236d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023684:	4605      	mov	r5, r0
 8023686:	7823      	ldrb	r3, [r4, #0]
 8023688:	f3bf 8f5b 	dmb	ish
 802368c:	07da      	lsls	r2, r3, #31
 802368e:	d40b      	bmi.n	80236a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023690:	4620      	mov	r0, r4
 8023692:	f007 f899 	bl	802a7c8 <__cxa_guard_acquire>
 8023696:	b138      	cbz	r0, 80236a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023698:	4620      	mov	r0, r4
 802369a:	f007 f8a1 	bl	802a7e0 <__cxa_guard_release>
 802369e:	4a0f      	ldr	r2, [pc, #60]	; (80236dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80236a0:	490f      	ldr	r1, [pc, #60]	; (80236e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80236a2:	4810      	ldr	r0, [pc, #64]	; (80236e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80236a4:	f007 f889 	bl	802a7ba <__aeabi_atexit>
 80236a8:	4c0f      	ldr	r4, [pc, #60]	; (80236e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80236aa:	7823      	ldrb	r3, [r4, #0]
 80236ac:	f3bf 8f5b 	dmb	ish
 80236b0:	07db      	lsls	r3, r3, #31
 80236b2:	d40b      	bmi.n	80236cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80236b4:	4620      	mov	r0, r4
 80236b6:	f007 f887 	bl	802a7c8 <__cxa_guard_acquire>
 80236ba:	b138      	cbz	r0, 80236cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80236bc:	4620      	mov	r0, r4
 80236be:	f007 f88f 	bl	802a7e0 <__cxa_guard_release>
 80236c2:	4a06      	ldr	r2, [pc, #24]	; (80236dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80236c4:	4909      	ldr	r1, [pc, #36]	; (80236ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80236c6:	480a      	ldr	r0, [pc, #40]	; (80236f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80236c8:	f007 f877 	bl	802a7ba <__aeabi_atexit>
 80236cc:	4b05      	ldr	r3, [pc, #20]	; (80236e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80236ce:	642b      	str	r3, [r5, #64]	; 0x40
 80236d0:	4b07      	ldr	r3, [pc, #28]	; (80236f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80236d2:	646b      	str	r3, [r5, #68]	; 0x44
 80236d4:	bd38      	pop	{r3, r4, r5, pc}
 80236d6:	bf00      	nop
 80236d8:	200156a4 	.word	0x200156a4
 80236dc:	20000000 	.word	0x20000000
 80236e0:	08021499 	.word	0x08021499
 80236e4:	20000078 	.word	0x20000078
 80236e8:	200156a8 	.word	0x200156a8
 80236ec:	08021497 	.word	0x08021497
 80236f0:	2000007c 	.word	0x2000007c

080236f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80236f4:	b538      	push	{r3, r4, r5, lr}
 80236f6:	4c15      	ldr	r4, [pc, #84]	; (802374c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80236f8:	4605      	mov	r5, r0
 80236fa:	7823      	ldrb	r3, [r4, #0]
 80236fc:	f3bf 8f5b 	dmb	ish
 8023700:	07da      	lsls	r2, r3, #31
 8023702:	d40b      	bmi.n	802371c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023704:	4620      	mov	r0, r4
 8023706:	f007 f85f 	bl	802a7c8 <__cxa_guard_acquire>
 802370a:	b138      	cbz	r0, 802371c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802370c:	4620      	mov	r0, r4
 802370e:	f007 f867 	bl	802a7e0 <__cxa_guard_release>
 8023712:	4a0f      	ldr	r2, [pc, #60]	; (8023750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023714:	490f      	ldr	r1, [pc, #60]	; (8023754 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023716:	4810      	ldr	r0, [pc, #64]	; (8023758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023718:	f007 f84f 	bl	802a7ba <__aeabi_atexit>
 802371c:	4c0f      	ldr	r4, [pc, #60]	; (802375c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802371e:	7823      	ldrb	r3, [r4, #0]
 8023720:	f3bf 8f5b 	dmb	ish
 8023724:	07db      	lsls	r3, r3, #31
 8023726:	d40b      	bmi.n	8023740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023728:	4620      	mov	r0, r4
 802372a:	f007 f84d 	bl	802a7c8 <__cxa_guard_acquire>
 802372e:	b138      	cbz	r0, 8023740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023730:	4620      	mov	r0, r4
 8023732:	f007 f855 	bl	802a7e0 <__cxa_guard_release>
 8023736:	4a06      	ldr	r2, [pc, #24]	; (8023750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023738:	4909      	ldr	r1, [pc, #36]	; (8023760 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802373a:	480a      	ldr	r0, [pc, #40]	; (8023764 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802373c:	f007 f83d 	bl	802a7ba <__aeabi_atexit>
 8023740:	4b05      	ldr	r3, [pc, #20]	; (8023758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023742:	63ab      	str	r3, [r5, #56]	; 0x38
 8023744:	4b07      	ldr	r3, [pc, #28]	; (8023764 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023746:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023748:	bd38      	pop	{r3, r4, r5, pc}
 802374a:	bf00      	nop
 802374c:	200156c4 	.word	0x200156c4
 8023750:	20000000 	.word	0x20000000
 8023754:	0802149d 	.word	0x0802149d
 8023758:	20000098 	.word	0x20000098
 802375c:	200156c8 	.word	0x200156c8
 8023760:	0802149b 	.word	0x0802149b
 8023764:	2000009c 	.word	0x2000009c

08023768 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023768:	b510      	push	{r4, lr}
 802376a:	4604      	mov	r4, r0
 802376c:	f7ff ff14 	bl	8023598 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023770:	4620      	mov	r0, r4
 8023772:	f7ff ff85 	bl	8023680 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023776:	4620      	mov	r0, r4
 8023778:	f7ff ff48 	bl	802360c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802377c:	4620      	mov	r0, r4
 802377e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023782:	f7ff bfb7 	b.w	80236f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023788 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023788:	b538      	push	{r3, r4, r5, lr}
 802378a:	4c15      	ldr	r4, [pc, #84]	; (80237e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802378c:	4605      	mov	r5, r0
 802378e:	7823      	ldrb	r3, [r4, #0]
 8023790:	f3bf 8f5b 	dmb	ish
 8023794:	07da      	lsls	r2, r3, #31
 8023796:	d40b      	bmi.n	80237b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023798:	4620      	mov	r0, r4
 802379a:	f007 f815 	bl	802a7c8 <__cxa_guard_acquire>
 802379e:	b138      	cbz	r0, 80237b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80237a0:	4620      	mov	r0, r4
 80237a2:	f007 f81d 	bl	802a7e0 <__cxa_guard_release>
 80237a6:	4a0f      	ldr	r2, [pc, #60]	; (80237e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80237a8:	490f      	ldr	r1, [pc, #60]	; (80237e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80237aa:	4810      	ldr	r0, [pc, #64]	; (80237ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80237ac:	f007 f805 	bl	802a7ba <__aeabi_atexit>
 80237b0:	4c0f      	ldr	r4, [pc, #60]	; (80237f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80237b2:	7823      	ldrb	r3, [r4, #0]
 80237b4:	f3bf 8f5b 	dmb	ish
 80237b8:	07db      	lsls	r3, r3, #31
 80237ba:	d40b      	bmi.n	80237d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80237bc:	4620      	mov	r0, r4
 80237be:	f007 f803 	bl	802a7c8 <__cxa_guard_acquire>
 80237c2:	b138      	cbz	r0, 80237d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80237c4:	4620      	mov	r0, r4
 80237c6:	f007 f80b 	bl	802a7e0 <__cxa_guard_release>
 80237ca:	4a06      	ldr	r2, [pc, #24]	; (80237e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80237cc:	4909      	ldr	r1, [pc, #36]	; (80237f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80237ce:	480a      	ldr	r0, [pc, #40]	; (80237f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80237d0:	f006 fff3 	bl	802a7ba <__aeabi_atexit>
 80237d4:	4b05      	ldr	r3, [pc, #20]	; (80237ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80237d6:	662b      	str	r3, [r5, #96]	; 0x60
 80237d8:	4b07      	ldr	r3, [pc, #28]	; (80237f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80237da:	666b      	str	r3, [r5, #100]	; 0x64
 80237dc:	bd38      	pop	{r3, r4, r5, pc}
 80237de:	bf00      	nop
 80237e0:	200156ac 	.word	0x200156ac
 80237e4:	20000000 	.word	0x20000000
 80237e8:	08021489 	.word	0x08021489
 80237ec:	20000080 	.word	0x20000080
 80237f0:	200156b0 	.word	0x200156b0
 80237f4:	08021487 	.word	0x08021487
 80237f8:	20000084 	.word	0x20000084

080237fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80237fc:	b538      	push	{r3, r4, r5, lr}
 80237fe:	4c15      	ldr	r4, [pc, #84]	; (8023854 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023800:	4605      	mov	r5, r0
 8023802:	7823      	ldrb	r3, [r4, #0]
 8023804:	f3bf 8f5b 	dmb	ish
 8023808:	07da      	lsls	r2, r3, #31
 802380a:	d40b      	bmi.n	8023824 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802380c:	4620      	mov	r0, r4
 802380e:	f006 ffdb 	bl	802a7c8 <__cxa_guard_acquire>
 8023812:	b138      	cbz	r0, 8023824 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023814:	4620      	mov	r0, r4
 8023816:	f006 ffe3 	bl	802a7e0 <__cxa_guard_release>
 802381a:	4a0f      	ldr	r2, [pc, #60]	; (8023858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802381c:	490f      	ldr	r1, [pc, #60]	; (802385c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802381e:	4810      	ldr	r0, [pc, #64]	; (8023860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023820:	f006 ffcb 	bl	802a7ba <__aeabi_atexit>
 8023824:	4c0f      	ldr	r4, [pc, #60]	; (8023864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023826:	7823      	ldrb	r3, [r4, #0]
 8023828:	f3bf 8f5b 	dmb	ish
 802382c:	07db      	lsls	r3, r3, #31
 802382e:	d40b      	bmi.n	8023848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023830:	4620      	mov	r0, r4
 8023832:	f006 ffc9 	bl	802a7c8 <__cxa_guard_acquire>
 8023836:	b138      	cbz	r0, 8023848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023838:	4620      	mov	r0, r4
 802383a:	f006 ffd1 	bl	802a7e0 <__cxa_guard_release>
 802383e:	4a06      	ldr	r2, [pc, #24]	; (8023858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023840:	4909      	ldr	r1, [pc, #36]	; (8023868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023842:	480a      	ldr	r0, [pc, #40]	; (802386c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023844:	f006 ffb9 	bl	802a7ba <__aeabi_atexit>
 8023848:	4b05      	ldr	r3, [pc, #20]	; (8023860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802384a:	65ab      	str	r3, [r5, #88]	; 0x58
 802384c:	4b07      	ldr	r3, [pc, #28]	; (802386c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802384e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023850:	bd38      	pop	{r3, r4, r5, pc}
 8023852:	bf00      	nop
 8023854:	20015684 	.word	0x20015684
 8023858:	20000000 	.word	0x20000000
 802385c:	0802148d 	.word	0x0802148d
 8023860:	20000058 	.word	0x20000058
 8023864:	20015688 	.word	0x20015688
 8023868:	0802148b 	.word	0x0802148b
 802386c:	2000005c 	.word	0x2000005c

08023870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023870:	b510      	push	{r4, lr}
 8023872:	4604      	mov	r4, r0
 8023874:	f7ff ff88 	bl	8023788 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023878:	4620      	mov	r0, r4
 802387a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802387e:	f7ff bfbd 	b.w	80237fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023884:	b538      	push	{r3, r4, r5, lr}
 8023886:	4c15      	ldr	r4, [pc, #84]	; (80238dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023888:	4605      	mov	r5, r0
 802388a:	7823      	ldrb	r3, [r4, #0]
 802388c:	f3bf 8f5b 	dmb	ish
 8023890:	07da      	lsls	r2, r3, #31
 8023892:	d40b      	bmi.n	80238ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023894:	4620      	mov	r0, r4
 8023896:	f006 ff97 	bl	802a7c8 <__cxa_guard_acquire>
 802389a:	b138      	cbz	r0, 80238ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802389c:	4620      	mov	r0, r4
 802389e:	f006 ff9f 	bl	802a7e0 <__cxa_guard_release>
 80238a2:	4a0f      	ldr	r2, [pc, #60]	; (80238e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80238a4:	490f      	ldr	r1, [pc, #60]	; (80238e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80238a6:	4810      	ldr	r0, [pc, #64]	; (80238e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80238a8:	f006 ff87 	bl	802a7ba <__aeabi_atexit>
 80238ac:	4c0f      	ldr	r4, [pc, #60]	; (80238ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80238ae:	7823      	ldrb	r3, [r4, #0]
 80238b0:	f3bf 8f5b 	dmb	ish
 80238b4:	07db      	lsls	r3, r3, #31
 80238b6:	d40b      	bmi.n	80238d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80238b8:	4620      	mov	r0, r4
 80238ba:	f006 ff85 	bl	802a7c8 <__cxa_guard_acquire>
 80238be:	b138      	cbz	r0, 80238d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80238c0:	4620      	mov	r0, r4
 80238c2:	f006 ff8d 	bl	802a7e0 <__cxa_guard_release>
 80238c6:	4a06      	ldr	r2, [pc, #24]	; (80238e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80238c8:	4909      	ldr	r1, [pc, #36]	; (80238f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80238ca:	480a      	ldr	r0, [pc, #40]	; (80238f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80238cc:	f006 ff75 	bl	802a7ba <__aeabi_atexit>
 80238d0:	4b05      	ldr	r3, [pc, #20]	; (80238e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80238d2:	672b      	str	r3, [r5, #112]	; 0x70
 80238d4:	4b07      	ldr	r3, [pc, #28]	; (80238f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80238d6:	676b      	str	r3, [r5, #116]	; 0x74
 80238d8:	bd38      	pop	{r3, r4, r5, pc}
 80238da:	bf00      	nop
 80238dc:	2001567c 	.word	0x2001567c
 80238e0:	20000000 	.word	0x20000000
 80238e4:	08021481 	.word	0x08021481
 80238e8:	20000050 	.word	0x20000050
 80238ec:	20015680 	.word	0x20015680
 80238f0:	0802147f 	.word	0x0802147f
 80238f4:	20000054 	.word	0x20000054

080238f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80238f8:	b538      	push	{r3, r4, r5, lr}
 80238fa:	4c15      	ldr	r4, [pc, #84]	; (8023950 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80238fc:	4605      	mov	r5, r0
 80238fe:	7823      	ldrb	r3, [r4, #0]
 8023900:	f3bf 8f5b 	dmb	ish
 8023904:	07da      	lsls	r2, r3, #31
 8023906:	d40b      	bmi.n	8023920 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023908:	4620      	mov	r0, r4
 802390a:	f006 ff5d 	bl	802a7c8 <__cxa_guard_acquire>
 802390e:	b138      	cbz	r0, 8023920 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023910:	4620      	mov	r0, r4
 8023912:	f006 ff65 	bl	802a7e0 <__cxa_guard_release>
 8023916:	4a0f      	ldr	r2, [pc, #60]	; (8023954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023918:	490f      	ldr	r1, [pc, #60]	; (8023958 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802391a:	4810      	ldr	r0, [pc, #64]	; (802395c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802391c:	f006 ff4d 	bl	802a7ba <__aeabi_atexit>
 8023920:	4c0f      	ldr	r4, [pc, #60]	; (8023960 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023922:	7823      	ldrb	r3, [r4, #0]
 8023924:	f3bf 8f5b 	dmb	ish
 8023928:	07db      	lsls	r3, r3, #31
 802392a:	d40b      	bmi.n	8023944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802392c:	4620      	mov	r0, r4
 802392e:	f006 ff4b 	bl	802a7c8 <__cxa_guard_acquire>
 8023932:	b138      	cbz	r0, 8023944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023934:	4620      	mov	r0, r4
 8023936:	f006 ff53 	bl	802a7e0 <__cxa_guard_release>
 802393a:	4a06      	ldr	r2, [pc, #24]	; (8023954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802393c:	4909      	ldr	r1, [pc, #36]	; (8023964 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802393e:	480a      	ldr	r0, [pc, #40]	; (8023968 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023940:	f006 ff3b 	bl	802a7ba <__aeabi_atexit>
 8023944:	4b05      	ldr	r3, [pc, #20]	; (802395c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023946:	66ab      	str	r3, [r5, #104]	; 0x68
 8023948:	4b07      	ldr	r3, [pc, #28]	; (8023968 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802394a:	66eb      	str	r3, [r5, #108]	; 0x6c
 802394c:	bd38      	pop	{r3, r4, r5, pc}
 802394e:	bf00      	nop
 8023950:	20015674 	.word	0x20015674
 8023954:	20000000 	.word	0x20000000
 8023958:	08021485 	.word	0x08021485
 802395c:	20000048 	.word	0x20000048
 8023960:	20015678 	.word	0x20015678
 8023964:	08021483 	.word	0x08021483
 8023968:	2000004c 	.word	0x2000004c

0802396c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802396c:	b510      	push	{r4, lr}
 802396e:	4604      	mov	r4, r0
 8023970:	f7ff ff88 	bl	8023884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023974:	4620      	mov	r0, r4
 8023976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802397a:	f7ff bfbd 	b.w	80238f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802397e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802397e:	b510      	push	{r4, lr}
 8023980:	4604      	mov	r4, r0
 8023982:	f7ff fff3 	bl	802396c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023986:	4620      	mov	r0, r4
 8023988:	f7ff ff72 	bl	8023870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 802398c:	4620      	mov	r0, r4
 802398e:	f7ff fdf9 	bl	8023584 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023992:	4620      	mov	r0, r4
 8023994:	f7ff fcfa 	bl	802338c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023998:	4620      	mov	r0, r4
 802399a:	f7ff fd75 	bl	8023488 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802399e:	4620      	mov	r0, r4
 80239a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239a4:	f7ff bee0 	b.w	8023768 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080239a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80239a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239ac:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 80239b0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 80239b4:	2d00      	cmp	r5, #0
 80239b6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 80239ba:	fb05 4c0e 	mla	ip, r5, lr, r4
 80239be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80239c2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80239c6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80239ca:	eb02 0a0c 	add.w	sl, r2, ip
 80239ce:	8808      	ldrh	r0, [r1, #0]
 80239d0:	f2c0 80b0 	blt.w	8023b34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80239d4:	45ab      	cmp	fp, r5
 80239d6:	f340 80ad 	ble.w	8023b34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80239da:	2c00      	cmp	r4, #0
 80239dc:	f2c0 80a8 	blt.w	8023b30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80239e0:	45a6      	cmp	lr, r4
 80239e2:	f340 80a5 	ble.w	8023b30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80239e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80239ea:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80239ee:	1c62      	adds	r2, r4, #1
 80239f0:	f100 80a3 	bmi.w	8023b3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80239f4:	4596      	cmp	lr, r2
 80239f6:	f340 80a0 	ble.w	8023b3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80239fa:	f1b9 0f00 	cmp.w	r9, #0
 80239fe:	f000 809c 	beq.w	8023b3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023a02:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023a06:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023a0a:	3501      	adds	r5, #1
 8023a0c:	f100 8099 	bmi.w	8023b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023a10:	45ab      	cmp	fp, r5
 8023a12:	f340 8096 	ble.w	8023b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023a16:	2f00      	cmp	r7, #0
 8023a18:	f000 8093 	beq.w	8023b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023a1c:	2c00      	cmp	r4, #0
 8023a1e:	f2c0 808e 	blt.w	8023b3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023a22:	45a6      	cmp	lr, r4
 8023a24:	f340 808b 	ble.w	8023b3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023a28:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023a2c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023a30:	3401      	adds	r4, #1
 8023a32:	f100 8089 	bmi.w	8023b48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023a36:	45a6      	cmp	lr, r4
 8023a38:	f340 8086 	ble.w	8023b48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023a3c:	f1b9 0f00 	cmp.w	r9, #0
 8023a40:	f000 8082 	beq.w	8023b48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023a44:	44d6      	add	lr, sl
 8023a46:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023a4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023a4e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023a52:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8023a56:	fb19 fe07 	smulbb	lr, r9, r7
 8023a5a:	f1c7 0210 	rsb	r2, r7, #16
 8023a5e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023a62:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023a66:	eba2 0209 	sub.w	r2, r2, r9
 8023a6a:	ea44 0808 	orr.w	r8, r4, r8
 8023a6e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023a72:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023a76:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023a7a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023a7e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023a82:	ea44 0c0c 	orr.w	ip, r4, ip
 8023a86:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023a8a:	fb04 f40c 	mul.w	r4, r4, ip
 8023a8e:	fb02 4808 	mla	r8, r2, r8, r4
 8023a92:	041a      	lsls	r2, r3, #16
 8023a94:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023a98:	b2b4      	uxth	r4, r6
 8023a9a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023a9e:	43f6      	mvns	r6, r6
 8023aa0:	4313      	orrs	r3, r2
 8023aa2:	042a      	lsls	r2, r5, #16
 8023aa4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023aa8:	b2f6      	uxtb	r6, r6
 8023aaa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023aae:	fb0e 8303 	mla	r3, lr, r3, r8
 8023ab2:	432a      	orrs	r2, r5
 8023ab4:	fb07 3202 	mla	r2, r7, r2, r3
 8023ab8:	10c7      	asrs	r7, r0, #3
 8023aba:	0d53      	lsrs	r3, r2, #21
 8023abc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023ac0:	0952      	lsrs	r2, r2, #5
 8023ac2:	fb17 f706 	smulbb	r7, r7, r6
 8023ac6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023aca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023ace:	431a      	orrs	r2, r3
 8023ad0:	b293      	uxth	r3, r2
 8023ad2:	1202      	asrs	r2, r0, #8
 8023ad4:	121d      	asrs	r5, r3, #8
 8023ad6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023ada:	00c0      	lsls	r0, r0, #3
 8023adc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023ae0:	fb12 f206 	smulbb	r2, r2, r6
 8023ae4:	b2c0      	uxtb	r0, r0
 8023ae6:	fb05 2504 	mla	r5, r5, r4, r2
 8023aea:	10da      	asrs	r2, r3, #3
 8023aec:	fb10 f006 	smulbb	r0, r0, r6
 8023af0:	00db      	lsls	r3, r3, #3
 8023af2:	b2ad      	uxth	r5, r5
 8023af4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023af8:	b2db      	uxtb	r3, r3
 8023afa:	fb02 7204 	mla	r2, r2, r4, r7
 8023afe:	fb03 0004 	mla	r0, r3, r4, r0
 8023b02:	1c6b      	adds	r3, r5, #1
 8023b04:	b292      	uxth	r2, r2
 8023b06:	b280      	uxth	r0, r0
 8023b08:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023b0c:	1c43      	adds	r3, r0, #1
 8023b0e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023b12:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023b16:	1c50      	adds	r0, r2, #1
 8023b18:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023b1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023b20:	0952      	lsrs	r2, r2, #5
 8023b22:	432b      	orrs	r3, r5
 8023b24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023b28:	4313      	orrs	r3, r2
 8023b2a:	800b      	strh	r3, [r1, #0]
 8023b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b30:	4680      	mov	r8, r0
 8023b32:	e75c      	b.n	80239ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8023b34:	4684      	mov	ip, r0
 8023b36:	4680      	mov	r8, r0
 8023b38:	e767      	b.n	8023a0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023b3a:	4684      	mov	ip, r0
 8023b3c:	e765      	b.n	8023a0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023b3e:	4605      	mov	r5, r0
 8023b40:	e776      	b.n	8023a30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8023b42:	4603      	mov	r3, r0
 8023b44:	4605      	mov	r5, r0
 8023b46:	e782      	b.n	8023a4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023b48:	4603      	mov	r3, r0
 8023b4a:	e780      	b.n	8023a4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08023b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b50:	b099      	sub	sp, #100	; 0x64
 8023b52:	9215      	str	r2, [sp, #84]	; 0x54
 8023b54:	9309      	str	r3, [sp, #36]	; 0x24
 8023b56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023b58:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8023b5c:	9016      	str	r0, [sp, #88]	; 0x58
 8023b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8023b60:	6850      	ldr	r0, [r2, #4]
 8023b62:	910c      	str	r1, [sp, #48]	; 0x30
 8023b64:	6812      	ldr	r2, [r2, #0]
 8023b66:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8023b6a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8023b6e:	fb00 1303 	mla	r3, r0, r3, r1
 8023b72:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023b76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b7e:	685e      	ldr	r6, [r3, #4]
 8023b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b82:	3604      	adds	r6, #4
 8023b84:	43db      	mvns	r3, r3
 8023b86:	b2db      	uxtb	r3, r3
 8023b88:	930a      	str	r3, [sp, #40]	; 0x28
 8023b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	dc03      	bgt.n	8023b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023b92:	2b00      	cmp	r3, #0
 8023b94:	f340 8225 	ble.w	8023fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023b98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ba2:	1e48      	subs	r0, r1, #1
 8023ba4:	1e57      	subs	r7, r2, #1
 8023ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	f340 80e3 	ble.w	8023d74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023bae:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023bb2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023bb6:	d406      	bmi.n	8023bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023bb8:	4584      	cmp	ip, r0
 8023bba:	da04      	bge.n	8023bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	db02      	blt.n	8023bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023bc0:	42bb      	cmp	r3, r7
 8023bc2:	f2c0 80d8 	blt.w	8023d76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023bc6:	f11c 0c01 	adds.w	ip, ip, #1
 8023bca:	f100 80c9 	bmi.w	8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023bce:	4561      	cmp	r1, ip
 8023bd0:	f2c0 80c6 	blt.w	8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023bd4:	3301      	adds	r3, #1
 8023bd6:	f100 80c3 	bmi.w	8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023bda:	429a      	cmp	r2, r3
 8023bdc:	f2c0 80c0 	blt.w	8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023be0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023be4:	4647      	mov	r7, r8
 8023be6:	f1bb 0f00 	cmp.w	fp, #0
 8023bea:	f340 80e3 	ble.w	8023db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023bee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023bf0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023bf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023bf6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023bfa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023bfe:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023c02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023c06:	689b      	ldr	r3, [r3, #8]
 8023c08:	f100 8121 	bmi.w	8023e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023c0c:	f103 39ff 	add.w	r9, r3, #4294967295
 8023c10:	454a      	cmp	r2, r9
 8023c12:	f280 811c 	bge.w	8023e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023c16:	f1bc 0f00 	cmp.w	ip, #0
 8023c1a:	f2c0 8118 	blt.w	8023e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023c1e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023c22:	45cc      	cmp	ip, r9
 8023c24:	f280 8113 	bge.w	8023e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023c28:	b21b      	sxth	r3, r3
 8023c2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c2c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023c30:	eb04 0902 	add.w	r9, r4, r2
 8023c34:	5ca2      	ldrb	r2, [r4, r2]
 8023c36:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023c3a:	2800      	cmp	r0, #0
 8023c3c:	f000 80fe 	beq.w	8023e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023c40:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023c44:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023c48:	9211      	str	r2, [sp, #68]	; 0x44
 8023c4a:	b151      	cbz	r1, 8023c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023c4c:	eb09 0203 	add.w	r2, r9, r3
 8023c50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023c54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8023c5a:	7853      	ldrb	r3, [r2, #1]
 8023c5c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023c60:	9312      	str	r3, [sp, #72]	; 0x48
 8023c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c64:	fb10 f201 	smulbb	r2, r0, r1
 8023c68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023c6a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023c6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023c72:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023c76:	10d2      	asrs	r2, r2, #3
 8023c78:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023c7c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023c80:	ea4c 0c03 	orr.w	ip, ip, r3
 8023c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023c86:	041b      	lsls	r3, r3, #16
 8023c88:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023c8c:	4323      	orrs	r3, r4
 8023c8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c90:	4353      	muls	r3, r2
 8023c92:	fb09 330c 	mla	r3, r9, ip, r3
 8023c96:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023c9a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023c9e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023ca2:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023ca6:	f1c1 0c10 	rsb	ip, r1, #16
 8023caa:	ebac 0c00 	sub.w	ip, ip, r0
 8023cae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023cb2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023cb6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023cbc:	0418      	lsls	r0, r3, #16
 8023cbe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023cc2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023cc6:	4318      	orrs	r0, r3
 8023cc8:	fb02 c200 	mla	r2, r2, r0, ip
 8023ccc:	8838      	ldrh	r0, [r7, #0]
 8023cce:	0d53      	lsrs	r3, r2, #21
 8023cd0:	0952      	lsrs	r2, r2, #5
 8023cd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023cd6:	1201      	asrs	r1, r0, #8
 8023cd8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023cdc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023ce0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023ce4:	00c0      	lsls	r0, r0, #3
 8023ce6:	431a      	orrs	r2, r3
 8023ce8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8023cec:	fb11 f104 	smulbb	r1, r1, r4
 8023cf0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023cf4:	b292      	uxth	r2, r2
 8023cf6:	fb1e fe04 	smulbb	lr, lr, r4
 8023cfa:	b2c0      	uxtb	r0, r0
 8023cfc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023d00:	fb10 f004 	smulbb	r0, r0, r4
 8023d04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023d08:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023d0c:	10d1      	asrs	r1, r2, #3
 8023d0e:	00d2      	lsls	r2, r2, #3
 8023d10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023d14:	fa1f fc8c 	uxth.w	ip, ip
 8023d18:	b2d2      	uxtb	r2, r2
 8023d1a:	fb01 e103 	mla	r1, r1, r3, lr
 8023d1e:	fb02 0303 	mla	r3, r2, r3, r0
 8023d22:	b289      	uxth	r1, r1
 8023d24:	b29a      	uxth	r2, r3
 8023d26:	f10c 0301 	add.w	r3, ip, #1
 8023d2a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023d2e:	1c53      	adds	r3, r2, #1
 8023d30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023d34:	1c4a      	adds	r2, r1, #1
 8023d36:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023d3a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d42:	0949      	lsrs	r1, r1, #5
 8023d44:	ea43 030c 	orr.w	r3, r3, ip
 8023d48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023d4c:	430b      	orrs	r3, r1
 8023d4e:	803b      	strh	r3, [r7, #0]
 8023d50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023d52:	3702      	adds	r7, #2
 8023d54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023d58:	449a      	add	sl, r3
 8023d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023d5c:	441d      	add	r5, r3
 8023d5e:	e742      	b.n	8023be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023d60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023d62:	f108 0802 	add.w	r8, r8, #2
 8023d66:	449a      	add	sl, r3
 8023d68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023d6a:	441d      	add	r5, r3
 8023d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d6e:	3b01      	subs	r3, #1
 8023d70:	9309      	str	r3, [sp, #36]	; 0x24
 8023d72:	e718      	b.n	8023ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023d74:	d023      	beq.n	8023dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d78:	9825      	ldr	r0, [sp, #148]	; 0x94
 8023d7a:	3b01      	subs	r3, #1
 8023d7c:	fb00 a003 	mla	r0, r0, r3, sl
 8023d80:	1400      	asrs	r0, r0, #16
 8023d82:	f53f af2d 	bmi.w	8023be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023d86:	3901      	subs	r1, #1
 8023d88:	4288      	cmp	r0, r1
 8023d8a:	f6bf af29 	bge.w	8023be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023d8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8023d90:	fb01 5303 	mla	r3, r1, r3, r5
 8023d94:	141b      	asrs	r3, r3, #16
 8023d96:	f53f af23 	bmi.w	8023be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023d9a:	3a01      	subs	r2, #1
 8023d9c:	4293      	cmp	r3, r2
 8023d9e:	f6bf af1f 	bge.w	8023be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023da2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023da6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8023daa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023dae:	f1be 0f00 	cmp.w	lr, #0
 8023db2:	dc6c      	bgt.n	8023e8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023dba:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023dc0:	2b00      	cmp	r3, #0
 8023dc2:	f340 810e 	ble.w	8023fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023dcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023dd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023dd4:	eef0 6a62 	vmov.f32	s13, s5
 8023dd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023de0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023de4:	ee16 aa90 	vmov	sl, s13
 8023de8:	eef0 6a43 	vmov.f32	s13, s6
 8023dec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023df0:	ee16 5a90 	vmov	r5, s13
 8023df4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023df8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023dfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e0c:	ee12 2a90 	vmov	r2, s5
 8023e10:	eef0 2a47 	vmov.f32	s5, s14
 8023e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e18:	ee13 2a10 	vmov	r2, s6
 8023e1c:	9325      	str	r3, [sp, #148]	; 0x94
 8023e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023e20:	eeb0 3a67 	vmov.f32	s6, s15
 8023e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e28:	9326      	str	r3, [sp, #152]	; 0x98
 8023e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023e2e:	3b01      	subs	r3, #1
 8023e30:	930c      	str	r3, [sp, #48]	; 0x30
 8023e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023e34:	bf08      	it	eq
 8023e36:	4613      	moveq	r3, r2
 8023e38:	9309      	str	r3, [sp, #36]	; 0x24
 8023e3a:	e6a6      	b.n	8023b8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023e3c:	2900      	cmp	r1, #0
 8023e3e:	f43f af10 	beq.w	8023c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023e42:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023e46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023e4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e4c:	e709      	b.n	8023c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023e4e:	f112 0901 	adds.w	r9, r2, #1
 8023e52:	f53f af7d 	bmi.w	8023d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023e56:	454b      	cmp	r3, r9
 8023e58:	f6ff af7a 	blt.w	8023d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023e5c:	f11c 0901 	adds.w	r9, ip, #1
 8023e60:	f53f af76 	bmi.w	8023d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023e64:	45ce      	cmp	lr, r9
 8023e66:	f6ff af73 	blt.w	8023d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023e6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023e6c:	b21b      	sxth	r3, r3
 8023e6e:	9202      	str	r2, [sp, #8]
 8023e70:	fa0f f28e 	sxth.w	r2, lr
 8023e74:	9300      	str	r3, [sp, #0]
 8023e76:	4633      	mov	r3, r6
 8023e78:	9201      	str	r2, [sp, #4]
 8023e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023e7c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023e80:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023e84:	4639      	mov	r1, r7
 8023e86:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023e88:	f7ff fd8e 	bl	80239a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023e8c:	e760      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023e8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e90:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023e94:	1429      	asrs	r1, r5, #16
 8023e96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023e9c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023ea0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023ea4:	fb03 2101 	mla	r1, r3, r1, r2
 8023ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023eaa:	440a      	add	r2, r1
 8023eac:	5c61      	ldrb	r1, [r4, r1]
 8023eae:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023eb2:	f1bc 0f00 	cmp.w	ip, #0
 8023eb6:	f000 808c 	beq.w	8023fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023eba:	7857      	ldrb	r7, [r2, #1]
 8023ebc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023ec0:	9413      	str	r4, [sp, #76]	; 0x4c
 8023ec2:	b140      	cbz	r0, 8023ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023ec4:	18d7      	adds	r7, r2, r3
 8023ec6:	5cd3      	ldrb	r3, [r2, r3]
 8023ec8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ecc:	9310      	str	r3, [sp, #64]	; 0x40
 8023ece:	787b      	ldrb	r3, [r7, #1]
 8023ed0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023ed4:	9314      	str	r3, [sp, #80]	; 0x50
 8023ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023ed8:	fb1c f200 	smulbb	r2, ip, r0
 8023edc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ede:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023ee2:	041f      	lsls	r7, r3, #16
 8023ee4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023ee8:	10d2      	asrs	r2, r2, #3
 8023eea:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8023eee:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8023ef2:	431f      	orrs	r7, r3
 8023ef4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023ef8:	9317      	str	r3, [sp, #92]	; 0x5c
 8023efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023efc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023efe:	041b      	lsls	r3, r3, #16
 8023f00:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023f04:	ea43 030b 	orr.w	r3, r3, fp
 8023f08:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023f0c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023f10:	4353      	muls	r3, r2
 8023f12:	fb04 3707 	mla	r7, r4, r7, r3
 8023f16:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023f1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023f1c:	ea43 0b01 	orr.w	fp, r3, r1
 8023f20:	f1c0 0110 	rsb	r1, r0, #16
 8023f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023f26:	eba1 0c0c 	sub.w	ip, r1, ip
 8023f2a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023f2e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023f32:	fb0c 770b 	mla	r7, ip, fp, r7
 8023f36:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023f3a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8023f3e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023f42:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023f46:	fb02 770c 	mla	r7, r2, ip, r7
 8023f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023f4c:	0d79      	lsrs	r1, r7, #21
 8023f4e:	8812      	ldrh	r2, [r2, #0]
 8023f50:	097f      	lsrs	r7, r7, #5
 8023f52:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023f56:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023f5a:	430f      	orrs	r7, r1
 8023f5c:	1211      	asrs	r1, r2, #8
 8023f5e:	b2bb      	uxth	r3, r7
 8023f60:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023f64:	10d7      	asrs	r7, r2, #3
 8023f66:	fb11 f104 	smulbb	r1, r1, r4
 8023f6a:	1218      	asrs	r0, r3, #8
 8023f6c:	00d2      	lsls	r2, r2, #3
 8023f6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023f72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023f76:	fb17 f704 	smulbb	r7, r7, r4
 8023f7a:	b2d2      	uxtb	r2, r2
 8023f7c:	fb00 1009 	mla	r0, r0, r9, r1
 8023f80:	10d9      	asrs	r1, r3, #3
 8023f82:	fb12 f204 	smulbb	r2, r2, r4
 8023f86:	00db      	lsls	r3, r3, #3
 8023f88:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023f8c:	b280      	uxth	r0, r0
 8023f8e:	b2db      	uxtb	r3, r3
 8023f90:	fb01 7109 	mla	r1, r1, r9, r7
 8023f94:	fb03 2309 	mla	r3, r3, r9, r2
 8023f98:	1c42      	adds	r2, r0, #1
 8023f9a:	b289      	uxth	r1, r1
 8023f9c:	b29b      	uxth	r3, r3
 8023f9e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023fa2:	1c4f      	adds	r7, r1, #1
 8023fa4:	1c5a      	adds	r2, r3, #1
 8023fa6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023faa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023fae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023fb4:	0949      	lsrs	r1, r1, #5
 8023fb6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023fba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023fbe:	4310      	orrs	r0, r2
 8023fc0:	4308      	orrs	r0, r1
 8023fc2:	f823 0b02 	strh.w	r0, [r3], #2
 8023fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8023fc8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023fca:	449a      	add	sl, r3
 8023fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023fce:	441d      	add	r5, r3
 8023fd0:	e6ed      	b.n	8023dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8023fd2:	2800      	cmp	r0, #0
 8023fd4:	f43f af7f 	beq.w	8023ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023fd8:	5cd3      	ldrb	r3, [r2, r3]
 8023fda:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023fde:	9310      	str	r3, [sp, #64]	; 0x40
 8023fe0:	e779      	b.n	8023ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023fe2:	b019      	add	sp, #100	; 0x64
 8023fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023fec:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8023ff0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8023ff4:	f1b8 0f00 	cmp.w	r8, #0
 8023ff8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8023ffc:	fb08 470e 	mla	r7, r8, lr, r4
 8024000:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024004:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8024008:	eb02 0907 	add.w	r9, r2, r7
 802400c:	8808      	ldrh	r0, [r1, #0]
 802400e:	db67      	blt.n	80240e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024010:	45c2      	cmp	sl, r8
 8024012:	dd65      	ble.n	80240e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024014:	2c00      	cmp	r4, #0
 8024016:	db61      	blt.n	80240dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024018:	45a6      	cmp	lr, r4
 802401a:	dd5f      	ble.n	80240dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802401c:	5dd2      	ldrb	r2, [r2, r7]
 802401e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024022:	1c62      	adds	r2, r4, #1
 8024024:	d45f      	bmi.n	80240e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024026:	4596      	cmp	lr, r2
 8024028:	dd5d      	ble.n	80240e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802402a:	2d00      	cmp	r5, #0
 802402c:	d05b      	beq.n	80240e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802402e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024032:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024036:	f118 0801 	adds.w	r8, r8, #1
 802403a:	d458      	bmi.n	80240ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802403c:	45c2      	cmp	sl, r8
 802403e:	dd56      	ble.n	80240ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024040:	2e00      	cmp	r6, #0
 8024042:	d054      	beq.n	80240ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024044:	2c00      	cmp	r4, #0
 8024046:	db50      	blt.n	80240ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024048:	45a6      	cmp	lr, r4
 802404a:	dd4e      	ble.n	80240ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802404c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8024050:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024054:	3401      	adds	r4, #1
 8024056:	d407      	bmi.n	8024068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024058:	45a6      	cmp	lr, r4
 802405a:	dd05      	ble.n	8024068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802405c:	b125      	cbz	r5, 8024068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802405e:	44ce      	add	lr, r9
 8024060:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024064:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024068:	fb15 f406 	smulbb	r4, r5, r6
 802406c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024070:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024074:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024078:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802407c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024080:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024084:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024088:	ea43 0c0c 	orr.w	ip, r3, ip
 802408c:	f1c6 0310 	rsb	r3, r6, #16
 8024090:	ea4e 0707 	orr.w	r7, lr, r7
 8024094:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024098:	1b5b      	subs	r3, r3, r5
 802409a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802409e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80240a2:	437d      	muls	r5, r7
 80240a4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80240a8:	0403      	lsls	r3, r0, #16
 80240aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80240ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80240b2:	4318      	orrs	r0, r3
 80240b4:	0413      	lsls	r3, r2, #16
 80240b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80240ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80240be:	fb04 c000 	mla	r0, r4, r0, ip
 80240c2:	4313      	orrs	r3, r2
 80240c4:	fb06 0003 	mla	r0, r6, r3, r0
 80240c8:	0d43      	lsrs	r3, r0, #21
 80240ca:	0940      	lsrs	r0, r0, #5
 80240cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80240d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80240d4:	4318      	orrs	r0, r3
 80240d6:	8008      	strh	r0, [r1, #0]
 80240d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80240dc:	4684      	mov	ip, r0
 80240de:	e7a0      	b.n	8024022 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80240e0:	4607      	mov	r7, r0
 80240e2:	4684      	mov	ip, r0
 80240e4:	e7a7      	b.n	8024036 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80240e6:	4607      	mov	r7, r0
 80240e8:	e7a5      	b.n	8024036 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80240ea:	4602      	mov	r2, r0
 80240ec:	e7b2      	b.n	8024054 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80240ee:	4602      	mov	r2, r0
 80240f0:	e7ba      	b.n	8024068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080240f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240f6:	b093      	sub	sp, #76	; 0x4c
 80240f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80240fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80240fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024100:	9010      	str	r0, [sp, #64]	; 0x40
 8024102:	9108      	str	r1, [sp, #32]
 8024104:	6850      	ldr	r0, [r2, #4]
 8024106:	9306      	str	r3, [sp, #24]
 8024108:	6812      	ldr	r2, [r2, #0]
 802410a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802410e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024112:	fb00 1303 	mla	r3, r0, r3, r1
 8024116:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802411a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802411c:	681b      	ldr	r3, [r3, #0]
 802411e:	9307      	str	r3, [sp, #28]
 8024120:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024122:	685f      	ldr	r7, [r3, #4]
 8024124:	3704      	adds	r7, #4
 8024126:	9b08      	ldr	r3, [sp, #32]
 8024128:	2b00      	cmp	r3, #0
 802412a:	dc03      	bgt.n	8024134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802412c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802412e:	2b00      	cmp	r3, #0
 8024130:	f340 81b2 	ble.w	8024498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024134:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024136:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802413a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802413e:	1e48      	subs	r0, r1, #1
 8024140:	f102 3cff 	add.w	ip, r2, #4294967295
 8024144:	9b06      	ldr	r3, [sp, #24]
 8024146:	2b00      	cmp	r3, #0
 8024148:	f340 80a9 	ble.w	802429e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802414c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024150:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024154:	d406      	bmi.n	8024164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024156:	4586      	cmp	lr, r0
 8024158:	da04      	bge.n	8024164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802415a:	2b00      	cmp	r3, #0
 802415c:	db02      	blt.n	8024164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802415e:	4563      	cmp	r3, ip
 8024160:	f2c0 809e 	blt.w	80242a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024164:	f11e 0e01 	adds.w	lr, lr, #1
 8024168:	f100 808f 	bmi.w	802428a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802416c:	4571      	cmp	r1, lr
 802416e:	f2c0 808c 	blt.w	802428a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024172:	3301      	adds	r3, #1
 8024174:	f100 8089 	bmi.w	802428a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024178:	429a      	cmp	r2, r3
 802417a:	f2c0 8086 	blt.w	802428a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802417e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024182:	46c8      	mov	r8, r9
 8024184:	f1bb 0f00 	cmp.w	fp, #0
 8024188:	f340 80a6 	ble.w	80242d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802418c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802418e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024192:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024194:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024198:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802419c:	1422      	asrs	r2, r4, #16
 802419e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80241a2:	689b      	ldr	r3, [r3, #8]
 80241a4:	f100 80e3 	bmi.w	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80241a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80241ac:	4552      	cmp	r2, sl
 80241ae:	f280 80de 	bge.w	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80241b2:	f1bc 0f00 	cmp.w	ip, #0
 80241b6:	f2c0 80da 	blt.w	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80241ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80241be:	45d4      	cmp	ip, sl
 80241c0:	f280 80d5 	bge.w	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80241c4:	b21b      	sxth	r3, r3
 80241c6:	9d07      	ldr	r5, [sp, #28]
 80241c8:	fb0c 2203 	mla	r2, ip, r3, r2
 80241cc:	eb05 0a02 	add.w	sl, r5, r2
 80241d0:	5caa      	ldrb	r2, [r5, r2]
 80241d2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80241d6:	2800      	cmp	r0, #0
 80241d8:	f000 80c0 	beq.w	802435c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80241dc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80241e0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80241e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80241e6:	b151      	cbz	r1, 80241fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80241e8:	eb0a 0203 	add.w	r2, sl, r3
 80241ec:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80241f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80241f4:	9309      	str	r3, [sp, #36]	; 0x24
 80241f6:	7853      	ldrb	r3, [r2, #1]
 80241f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80241fc:	930c      	str	r3, [sp, #48]	; 0x30
 80241fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024200:	fb10 f201 	smulbb	r2, r0, r1
 8024204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024206:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802420a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802420e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024212:	10d2      	asrs	r2, r2, #3
 8024214:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024218:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802421c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024222:	041b      	lsls	r3, r3, #16
 8024224:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024228:	432b      	orrs	r3, r5
 802422a:	4353      	muls	r3, r2
 802422c:	fb0a 330c 	mla	r3, sl, ip, r3
 8024230:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024234:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024238:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802423c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024240:	f1c1 0c10 	rsb	ip, r1, #16
 8024244:	ebac 0c00 	sub.w	ip, ip, r0
 8024248:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802424c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024250:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024256:	0418      	lsls	r0, r3, #16
 8024258:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802425c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024260:	4318      	orrs	r0, r3
 8024262:	fb02 c200 	mla	r2, r2, r0, ip
 8024266:	0d53      	lsrs	r3, r2, #21
 8024268:	0952      	lsrs	r2, r2, #5
 802426a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802426e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024272:	431a      	orrs	r2, r3
 8024274:	f8a8 2000 	strh.w	r2, [r8]
 8024278:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802427a:	f108 0802 	add.w	r8, r8, #2
 802427e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024282:	441c      	add	r4, r3
 8024284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024286:	441e      	add	r6, r3
 8024288:	e77c      	b.n	8024184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802428a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802428c:	f109 0902 	add.w	r9, r9, #2
 8024290:	441c      	add	r4, r3
 8024292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024294:	441e      	add	r6, r3
 8024296:	9b06      	ldr	r3, [sp, #24]
 8024298:	3b01      	subs	r3, #1
 802429a:	9306      	str	r3, [sp, #24]
 802429c:	e752      	b.n	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802429e:	d020      	beq.n	80242e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80242a0:	9b06      	ldr	r3, [sp, #24]
 80242a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80242a4:	3b01      	subs	r3, #1
 80242a6:	fb00 4003 	mla	r0, r0, r3, r4
 80242aa:	1400      	asrs	r0, r0, #16
 80242ac:	f53f af67 	bmi.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80242b0:	3901      	subs	r1, #1
 80242b2:	4288      	cmp	r0, r1
 80242b4:	f6bf af63 	bge.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80242b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80242ba:	fb01 6303 	mla	r3, r1, r3, r6
 80242be:	141b      	asrs	r3, r3, #16
 80242c0:	f53f af5d 	bmi.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80242c4:	3a01      	subs	r2, #1
 80242c6:	4293      	cmp	r3, r2
 80242c8:	f6bf af59 	bge.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80242cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80242d0:	46ca      	mov	sl, r9
 80242d2:	f1b8 0f00 	cmp.w	r8, #0
 80242d6:	dc67      	bgt.n	80243a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80242d8:	9b06      	ldr	r3, [sp, #24]
 80242da:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80242de:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80242e2:	9b08      	ldr	r3, [sp, #32]
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	f340 80d7 	ble.w	8024498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80242ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80242ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242f4:	eeb0 6a62 	vmov.f32	s12, s5
 80242f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80242fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024300:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024304:	ee16 4a10 	vmov	r4, s12
 8024308:	eeb0 6a43 	vmov.f32	s12, s6
 802430c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024310:	ee16 6a10 	vmov	r6, s12
 8024314:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024318:	ee61 7a27 	vmul.f32	s15, s2, s15
 802431c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024320:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024324:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024328:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802432c:	ee12 2a90 	vmov	r2, s5
 8024330:	eef0 2a47 	vmov.f32	s5, s14
 8024334:	fb92 f3f3 	sdiv	r3, r2, r3
 8024338:	ee13 2a10 	vmov	r2, s6
 802433c:	931f      	str	r3, [sp, #124]	; 0x7c
 802433e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024340:	eeb0 3a67 	vmov.f32	s6, s15
 8024344:	fb92 f3f3 	sdiv	r3, r2, r3
 8024348:	9320      	str	r3, [sp, #128]	; 0x80
 802434a:	9b08      	ldr	r3, [sp, #32]
 802434c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802434e:	3b01      	subs	r3, #1
 8024350:	9308      	str	r3, [sp, #32]
 8024352:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024354:	bf08      	it	eq
 8024356:	4613      	moveq	r3, r2
 8024358:	9306      	str	r3, [sp, #24]
 802435a:	e6e4      	b.n	8024126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802435c:	2900      	cmp	r1, #0
 802435e:	f43f af4e 	beq.w	80241fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024362:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024366:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802436a:	9309      	str	r3, [sp, #36]	; 0x24
 802436c:	e747      	b.n	80241fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802436e:	f112 0a01 	adds.w	sl, r2, #1
 8024372:	d481      	bmi.n	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024374:	4553      	cmp	r3, sl
 8024376:	f6ff af7f 	blt.w	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802437a:	f11c 0a01 	adds.w	sl, ip, #1
 802437e:	f53f af7b 	bmi.w	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024382:	45d6      	cmp	lr, sl
 8024384:	f6ff af78 	blt.w	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024388:	b21b      	sxth	r3, r3
 802438a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802438e:	fa0f f28e 	sxth.w	r2, lr
 8024392:	9300      	str	r3, [sp, #0]
 8024394:	463b      	mov	r3, r7
 8024396:	9201      	str	r2, [sp, #4]
 8024398:	9a07      	ldr	r2, [sp, #28]
 802439a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802439e:	4641      	mov	r1, r8
 80243a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80243a2:	f7ff fe21 	bl	8023fe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80243a6:	e767      	b.n	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80243a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80243aa:	1422      	asrs	r2, r4, #16
 80243ac:	1431      	asrs	r1, r6, #16
 80243ae:	9d07      	ldr	r5, [sp, #28]
 80243b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80243b4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80243b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80243bc:	fb03 2101 	mla	r1, r3, r1, r2
 80243c0:	9a07      	ldr	r2, [sp, #28]
 80243c2:	440a      	add	r2, r1
 80243c4:	5c69      	ldrb	r1, [r5, r1]
 80243c6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80243ca:	f1be 0f00 	cmp.w	lr, #0
 80243ce:	d05c      	beq.n	802448a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80243d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80243d4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80243d8:	950d      	str	r5, [sp, #52]	; 0x34
 80243da:	b150      	cbz	r0, 80243f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80243dc:	eb02 0c03 	add.w	ip, r2, r3
 80243e0:	5cd3      	ldrb	r3, [r2, r3]
 80243e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243e6:	930a      	str	r3, [sp, #40]	; 0x28
 80243e8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80243ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243f0:	930e      	str	r3, [sp, #56]	; 0x38
 80243f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243f4:	fb1e f200 	smulbb	r2, lr, r0
 80243f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80243fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80243fe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024402:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024406:	10d2      	asrs	r2, r2, #3
 8024408:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802440c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024410:	ea4c 0c03 	orr.w	ip, ip, r3
 8024414:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024418:	9311      	str	r3, [sp, #68]	; 0x44
 802441a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802441c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802441e:	041b      	lsls	r3, r3, #16
 8024420:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024424:	ea43 030b 	orr.w	r3, r3, fp
 8024428:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802442c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024430:	4353      	muls	r3, r2
 8024432:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024436:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802443a:	ea43 0b01 	orr.w	fp, r3, r1
 802443e:	f1c0 0110 	rsb	r1, r0, #16
 8024442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024444:	eba1 0e0e 	sub.w	lr, r1, lr
 8024448:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802444c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024450:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024454:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8024458:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802445c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024460:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024464:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024468:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802446c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024470:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024474:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024478:	ea43 0c0c 	orr.w	ip, r3, ip
 802447c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802447e:	441c      	add	r4, r3
 8024480:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024482:	f82a cb02 	strh.w	ip, [sl], #2
 8024486:	441e      	add	r6, r3
 8024488:	e723      	b.n	80242d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802448a:	2800      	cmp	r0, #0
 802448c:	d0b1      	beq.n	80243f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802448e:	5cd3      	ldrb	r3, [r2, r3]
 8024490:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024494:	930a      	str	r3, [sp, #40]	; 0x28
 8024496:	e7ac      	b.n	80243f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024498:	b013      	add	sp, #76	; 0x4c
 802449a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802449e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802449e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244a2:	880d      	ldrh	r5, [r1, #0]
 80244a4:	b087      	sub	sp, #28
 80244a6:	10ef      	asrs	r7, r5, #3
 80244a8:	9103      	str	r1, [sp, #12]
 80244aa:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80244ae:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80244b2:	00ed      	lsls	r5, r5, #3
 80244b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80244b8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80244bc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80244c0:	b2ed      	uxtb	r5, r5
 80244c2:	9701      	str	r7, [sp, #4]
 80244c4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80244c8:	9502      	str	r5, [sp, #8]
 80244ca:	9d01      	ldr	r5, [sp, #4]
 80244cc:	9902      	ldr	r1, [sp, #8]
 80244ce:	022d      	lsls	r5, r5, #8
 80244d0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80244d4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80244d8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80244dc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80244e0:	430d      	orrs	r5, r1
 80244e2:	fb06 0709 	mla	r7, r6, r9, r0
 80244e6:	2e00      	cmp	r6, #0
 80244e8:	9505      	str	r5, [sp, #20]
 80244ea:	eb02 0c07 	add.w	ip, r2, r7
 80244ee:	f2c0 80b6 	blt.w	802465e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80244f2:	45b3      	cmp	fp, r6
 80244f4:	f340 80b3 	ble.w	802465e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80244f8:	2800      	cmp	r0, #0
 80244fa:	f2c0 80ae 	blt.w	802465a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80244fe:	4581      	cmp	r9, r0
 8024500:	f340 80ab 	ble.w	802465a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024504:	5dd7      	ldrb	r7, [r2, r7]
 8024506:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802450a:	441f      	add	r7, r3
 802450c:	1c42      	adds	r2, r0, #1
 802450e:	f100 80a9 	bmi.w	8024664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024512:	4591      	cmp	r9, r2
 8024514:	f340 80a6 	ble.w	8024664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024518:	2c00      	cmp	r4, #0
 802451a:	f000 80a3 	beq.w	8024664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802451e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024526:	441d      	add	r5, r3
 8024528:	3601      	adds	r6, #1
 802452a:	f100 809f 	bmi.w	802466c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802452e:	45b3      	cmp	fp, r6
 8024530:	f340 809c 	ble.w	802466c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024534:	f1be 0f00 	cmp.w	lr, #0
 8024538:	f000 8098 	beq.w	802466c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802453c:	2800      	cmp	r0, #0
 802453e:	f2c0 8093 	blt.w	8024668 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024542:	4581      	cmp	r9, r0
 8024544:	f340 8090 	ble.w	8024668 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024548:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802454c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024550:	441e      	add	r6, r3
 8024552:	3001      	adds	r0, #1
 8024554:	f100 808d 	bmi.w	8024672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024558:	4581      	cmp	r9, r0
 802455a:	f340 808a 	ble.w	8024672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802455e:	2c00      	cmp	r4, #0
 8024560:	f000 8087 	beq.w	8024672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024564:	44e1      	add	r9, ip
 8024566:	f899 2001 	ldrb.w	r2, [r9, #1]
 802456a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802456e:	4413      	add	r3, r2
 8024570:	b2a4      	uxth	r4, r4
 8024572:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024576:	fa1f fe8e 	uxth.w	lr, lr
 802457a:	9901      	ldr	r1, [sp, #4]
 802457c:	fb04 fb0e 	mul.w	fp, r4, lr
 8024580:	0124      	lsls	r4, r4, #4
 8024582:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024586:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802458a:	eba4 040b 	sub.w	r4, r4, fp
 802458e:	fa1f f08e 	uxth.w	r0, lr
 8024592:	b2a2      	uxth	r2, r4
 8024594:	78ac      	ldrb	r4, [r5, #2]
 8024596:	eba9 0900 	sub.w	r9, r9, r0
 802459a:	fa1f fe88 	uxth.w	lr, r8
 802459e:	4354      	muls	r4, r2
 80245a0:	ea6f 0808 	mvn.w	r8, r8
 80245a4:	fa1f f989 	uxth.w	r9, r9
 80245a8:	fa5f f888 	uxtb.w	r8, r8
 80245ac:	fb09 440c 	mla	r4, r9, ip, r4
 80245b0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80245b4:	fb1a fa08 	smulbb	sl, sl, r8
 80245b8:	fb00 440c 	mla	r4, r0, ip, r4
 80245bc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80245c0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80245c4:	787c      	ldrb	r4, [r7, #1]
 80245c6:	783f      	ldrb	r7, [r7, #0]
 80245c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80245cc:	fb0c ac0e 	mla	ip, ip, lr, sl
 80245d0:	f895 a001 	ldrb.w	sl, [r5, #1]
 80245d4:	782d      	ldrb	r5, [r5, #0]
 80245d6:	fb02 fa0a 	mul.w	sl, r2, sl
 80245da:	fa1f fc8c 	uxth.w	ip, ip
 80245de:	436a      	muls	r2, r5
 80245e0:	7835      	ldrb	r5, [r6, #0]
 80245e2:	fb09 aa04 	mla	sl, r9, r4, sl
 80245e6:	7874      	ldrb	r4, [r6, #1]
 80245e8:	fb09 2207 	mla	r2, r9, r7, r2
 80245ec:	fb00 aa04 	mla	sl, r0, r4, sl
 80245f0:	785c      	ldrb	r4, [r3, #1]
 80245f2:	fb00 2005 	mla	r0, r0, r5, r2
 80245f6:	781b      	ldrb	r3, [r3, #0]
 80245f8:	fb0b a404 	mla	r4, fp, r4, sl
 80245fc:	fb11 fa08 	smulbb	sl, r1, r8
 8024600:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024604:	9b02      	ldr	r3, [sp, #8]
 8024606:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802460a:	fb13 f808 	smulbb	r8, r3, r8
 802460e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024612:	fb04 a40e 	mla	r4, r4, lr, sl
 8024616:	f10c 0301 	add.w	r3, ip, #1
 802461a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802461e:	b2a4      	uxth	r4, r4
 8024620:	fa1f fe8e 	uxth.w	lr, lr
 8024624:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024628:	f104 0a01 	add.w	sl, r4, #1
 802462c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8024630:	f10e 0c01 	add.w	ip, lr, #1
 8024634:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024638:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802463c:	0964      	lsrs	r4, r4, #5
 802463e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024642:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024646:	ea4c 0c03 	orr.w	ip, ip, r3
 802464a:	9b03      	ldr	r3, [sp, #12]
 802464c:	ea4c 0c04 	orr.w	ip, ip, r4
 8024650:	f8a3 c000 	strh.w	ip, [r3]
 8024654:	b007      	add	sp, #28
 8024656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802465a:	af05      	add	r7, sp, #20
 802465c:	e756      	b.n	802450c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802465e:	ad05      	add	r5, sp, #20
 8024660:	462f      	mov	r7, r5
 8024662:	e761      	b.n	8024528 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024664:	ad05      	add	r5, sp, #20
 8024666:	e75f      	b.n	8024528 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024668:	ae05      	add	r6, sp, #20
 802466a:	e772      	b.n	8024552 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802466c:	ab05      	add	r3, sp, #20
 802466e:	461e      	mov	r6, r3
 8024670:	e77e      	b.n	8024570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024672:	ab05      	add	r3, sp, #20
 8024674:	e77c      	b.n	8024570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08024676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802467a:	b095      	sub	sp, #84	; 0x54
 802467c:	9212      	str	r2, [sp, #72]	; 0x48
 802467e:	9309      	str	r3, [sp, #36]	; 0x24
 8024680:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024682:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8024686:	9013      	str	r0, [sp, #76]	; 0x4c
 8024688:	930f      	str	r3, [sp, #60]	; 0x3c
 802468a:	6850      	ldr	r0, [r2, #4]
 802468c:	910e      	str	r1, [sp, #56]	; 0x38
 802468e:	6812      	ldr	r2, [r2, #0]
 8024690:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8024694:	fb00 1303 	mla	r3, r0, r3, r1
 8024698:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802469c:	930a      	str	r3, [sp, #40]	; 0x28
 802469e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	930d      	str	r3, [sp, #52]	; 0x34
 80246a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80246a6:	685c      	ldr	r4, [r3, #4]
 80246a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80246aa:	3404      	adds	r4, #4
 80246ac:	43db      	mvns	r3, r3
 80246ae:	b2db      	uxtb	r3, r3
 80246b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80246b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	dc03      	bgt.n	80246c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80246b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	f340 8255 	ble.w	8024b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80246c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80246c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80246ca:	1e48      	subs	r0, r1, #1
 80246cc:	1e55      	subs	r5, r2, #1
 80246ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	f340 80f9 	ble.w	80248c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80246d6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80246d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80246da:	1436      	asrs	r6, r6, #16
 80246dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80246e0:	d406      	bmi.n	80246f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80246e2:	4286      	cmp	r6, r0
 80246e4:	da04      	bge.n	80246f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	db02      	blt.n	80246f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80246ea:	42ab      	cmp	r3, r5
 80246ec:	f2c0 80ed 	blt.w	80248ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80246f0:	3601      	adds	r6, #1
 80246f2:	f100 80da 	bmi.w	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80246f6:	42b1      	cmp	r1, r6
 80246f8:	f2c0 80d7 	blt.w	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80246fc:	3301      	adds	r3, #1
 80246fe:	f100 80d4 	bmi.w	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024702:	429a      	cmp	r2, r3
 8024704:	f2c0 80d1 	blt.w	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802470a:	9311      	str	r3, [sp, #68]	; 0x44
 802470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802470e:	930c      	str	r3, [sp, #48]	; 0x30
 8024710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024712:	2b00      	cmp	r3, #0
 8024714:	f340 80fa 	ble.w	802490c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024718:	9826      	ldr	r0, [sp, #152]	; 0x98
 802471a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802471c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802471e:	68c6      	ldr	r6, [r0, #12]
 8024720:	141d      	asrs	r5, r3, #16
 8024722:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024724:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802472a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802472c:	1400      	asrs	r0, r0, #16
 802472e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024732:	6892      	ldr	r2, [r2, #8]
 8024734:	f100 813e 	bmi.w	80249b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024738:	1e57      	subs	r7, r2, #1
 802473a:	42b8      	cmp	r0, r7
 802473c:	f280 813a 	bge.w	80249b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024740:	2d00      	cmp	r5, #0
 8024742:	f2c0 8137 	blt.w	80249b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024746:	1e77      	subs	r7, r6, #1
 8024748:	42bd      	cmp	r5, r7
 802474a:	f280 8133 	bge.w	80249b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802474e:	b212      	sxth	r2, r2
 8024750:	fb05 0002 	mla	r0, r5, r2, r0
 8024754:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024756:	f815 a000 	ldrb.w	sl, [r5, r0]
 802475a:	182e      	adds	r6, r5, r0
 802475c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024760:	eb04 050a 	add.w	r5, r4, sl
 8024764:	2b00      	cmp	r3, #0
 8024766:	f000 8117 	beq.w	8024998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802476a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802476e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024772:	44a4      	add	ip, r4
 8024774:	2900      	cmp	r1, #0
 8024776:	f000 8117 	beq.w	80249a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802477a:	18b0      	adds	r0, r6, r2
 802477c:	5cb2      	ldrb	r2, [r6, r2]
 802477e:	7840      	ldrb	r0, [r0, #1]
 8024780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024784:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024788:	4422      	add	r2, r4
 802478a:	4420      	add	r0, r4
 802478c:	b29b      	uxth	r3, r3
 802478e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024792:	b289      	uxth	r1, r1
 8024794:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024798:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802479a:	fb03 f901 	mul.w	r9, r3, r1
 802479e:	011b      	lsls	r3, r3, #4
 80247a0:	f8b6 e000 	ldrh.w	lr, [r6]
 80247a4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80247a8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80247ac:	eba3 0309 	sub.w	r3, r3, r9
 80247b0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80247b4:	b289      	uxth	r1, r1
 80247b6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80247ba:	b29b      	uxth	r3, r3
 80247bc:	eba8 0801 	sub.w	r8, r8, r1
 80247c0:	435f      	muls	r7, r3
 80247c2:	fa1f f888 	uxth.w	r8, r8
 80247c6:	9310      	str	r3, [sp, #64]	; 0x40
 80247c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247ca:	fb08 770b 	mla	r7, r8, fp, r7
 80247ce:	f892 b002 	ldrb.w	fp, [r2, #2]
 80247d2:	fb01 770b 	mla	r7, r1, fp, r7
 80247d6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80247da:	fb09 770b 	mla	r7, r9, fp, r7
 80247de:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80247e2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80247e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80247ea:	fb1b fb03 	smulbb	fp, fp, r3
 80247ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247f0:	fb07 b706 	mla	r7, r7, r6, fp
 80247f4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80247f8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80247fc:	f89c c000 	ldrb.w	ip, [ip]
 8024800:	b2bf      	uxth	r7, r7
 8024802:	435d      	muls	r5, r3
 8024804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024806:	fb08 550b 	mla	r5, r8, fp, r5
 802480a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802480e:	fb01 550b 	mla	r5, r1, fp, r5
 8024812:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024816:	fb09 550b 	mla	r5, r9, fp, r5
 802481a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802481e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024822:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024826:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802482a:	fa5f fe8e 	uxtb.w	lr, lr
 802482e:	fb1b fb03 	smulbb	fp, fp, r3
 8024832:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024834:	fb03 f30c 	mul.w	r3, r3, ip
 8024838:	f892 c000 	ldrb.w	ip, [r2]
 802483c:	fb05 b506 	mla	r5, r5, r6, fp
 8024840:	fb08 330a 	mla	r3, r8, sl, r3
 8024844:	b2ad      	uxth	r5, r5
 8024846:	fb01 330c 	mla	r3, r1, ip, r3
 802484a:	f890 c000 	ldrb.w	ip, [r0]
 802484e:	f105 0b01 	add.w	fp, r5, #1
 8024852:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024858:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802485c:	fb1e fe03 	smulbb	lr, lr, r3
 8024860:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024864:	1c7b      	adds	r3, r7, #1
 8024866:	096d      	lsrs	r5, r5, #5
 8024868:	fb0c e606 	mla	r6, ip, r6, lr
 802486c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024870:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024874:	b2b6      	uxth	r6, r6
 8024876:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 802487a:	1c77      	adds	r7, r6, #1
 802487c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024880:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024884:	431f      	orrs	r7, r3
 8024886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024888:	433d      	orrs	r5, r7
 802488a:	801d      	strh	r5, [r3, #0]
 802488c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802488e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024890:	3302      	adds	r3, #2
 8024892:	930c      	str	r3, [sp, #48]	; 0x30
 8024894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024896:	4413      	add	r3, r2
 8024898:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802489a:	931f      	str	r3, [sp, #124]	; 0x7c
 802489c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802489e:	4413      	add	r3, r2
 80248a0:	9320      	str	r3, [sp, #128]	; 0x80
 80248a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80248a4:	3b01      	subs	r3, #1
 80248a6:	9311      	str	r3, [sp, #68]	; 0x44
 80248a8:	e732      	b.n	8024710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80248aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80248ac:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80248ae:	4433      	add	r3, r6
 80248b0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80248b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80248b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80248b6:	4433      	add	r3, r6
 80248b8:	9320      	str	r3, [sp, #128]	; 0x80
 80248ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248bc:	3b01      	subs	r3, #1
 80248be:	9309      	str	r3, [sp, #36]	; 0x24
 80248c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248c2:	3302      	adds	r3, #2
 80248c4:	930a      	str	r3, [sp, #40]	; 0x28
 80248c6:	e702      	b.n	80246ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80248c8:	d027      	beq.n	802491a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80248ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248cc:	9821      	ldr	r0, [sp, #132]	; 0x84
 80248ce:	3b01      	subs	r3, #1
 80248d0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80248d2:	fb00 5003 	mla	r0, r0, r3, r5
 80248d6:	1400      	asrs	r0, r0, #16
 80248d8:	f53f af16 	bmi.w	8024708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248dc:	3901      	subs	r1, #1
 80248de:	4288      	cmp	r0, r1
 80248e0:	f6bf af12 	bge.w	8024708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80248e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80248e8:	fb01 0303 	mla	r3, r1, r3, r0
 80248ec:	141b      	asrs	r3, r3, #16
 80248ee:	f53f af0b 	bmi.w	8024708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248f2:	3a01      	subs	r2, #1
 80248f4:	4293      	cmp	r3, r2
 80248f6:	f6bf af07 	bge.w	8024708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248fc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8024900:	9311      	str	r3, [sp, #68]	; 0x44
 8024902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024904:	930c      	str	r3, [sp, #48]	; 0x30
 8024906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024908:	2b00      	cmp	r3, #0
 802490a:	dc70      	bgt.n	80249ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802490c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802490e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024918:	930a      	str	r3, [sp, #40]	; 0x28
 802491a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802491c:	2b00      	cmp	r3, #0
 802491e:	f340 8124 	ble.w	8024b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024928:	ee30 0a04 	vadd.f32	s0, s0, s8
 802492c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024930:	eef0 6a62 	vmov.f32	s13, s5
 8024934:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024938:	ee31 1a05 	vadd.f32	s2, s2, s10
 802493c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024940:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8024944:	eef0 6a43 	vmov.f32	s13, s6
 8024948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802494c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8024950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024954:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024958:	ee77 2a62 	vsub.f32	s5, s14, s5
 802495c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024968:	ee12 2a90 	vmov	r2, s5
 802496c:	eef0 2a47 	vmov.f32	s5, s14
 8024970:	fb92 f3f3 	sdiv	r3, r2, r3
 8024974:	ee13 2a10 	vmov	r2, s6
 8024978:	9321      	str	r3, [sp, #132]	; 0x84
 802497a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802497c:	eeb0 3a67 	vmov.f32	s6, s15
 8024980:	fb92 f3f3 	sdiv	r3, r2, r3
 8024984:	9322      	str	r3, [sp, #136]	; 0x88
 8024986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024988:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802498a:	3b01      	subs	r3, #1
 802498c:	930e      	str	r3, [sp, #56]	; 0x38
 802498e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024990:	bf08      	it	eq
 8024992:	4613      	moveq	r3, r2
 8024994:	9309      	str	r3, [sp, #36]	; 0x24
 8024996:	e68c      	b.n	80246b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024998:	b149      	cbz	r1, 80249ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802499a:	5cb2      	ldrb	r2, [r6, r2]
 802499c:	4628      	mov	r0, r5
 802499e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80249a2:	4422      	add	r2, r4
 80249a4:	46ac      	mov	ip, r5
 80249a6:	e6f1      	b.n	802478c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80249a8:	4628      	mov	r0, r5
 80249aa:	462a      	mov	r2, r5
 80249ac:	e6ee      	b.n	802478c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80249ae:	4628      	mov	r0, r5
 80249b0:	462a      	mov	r2, r5
 80249b2:	e7f7      	b.n	80249a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80249b4:	1c47      	adds	r7, r0, #1
 80249b6:	f53f af69 	bmi.w	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80249ba:	42ba      	cmp	r2, r7
 80249bc:	f6ff af66 	blt.w	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80249c0:	1c6f      	adds	r7, r5, #1
 80249c2:	f53f af63 	bmi.w	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80249c6:	42be      	cmp	r6, r7
 80249c8:	f6ff af60 	blt.w	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80249cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80249ce:	b236      	sxth	r6, r6
 80249d0:	b212      	sxth	r2, r2
 80249d2:	9002      	str	r0, [sp, #8]
 80249d4:	9601      	str	r6, [sp, #4]
 80249d6:	9200      	str	r2, [sp, #0]
 80249d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80249da:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80249de:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80249e2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80249e6:	4623      	mov	r3, r4
 80249e8:	f7ff fd59 	bl	802449e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80249ec:	e74e      	b.n	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80249ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80249f0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80249f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80249f6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80249f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80249fa:	1400      	asrs	r0, r0, #16
 80249fc:	142d      	asrs	r5, r5, #16
 80249fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024a00:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024a04:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024a08:	fb02 5000 	mla	r0, r2, r0, r5
 8024a0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a0e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024a12:	182e      	adds	r6, r5, r0
 8024a14:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024a18:	eb04 0509 	add.w	r5, r4, r9
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	f000 8096 	beq.w	8024b4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024a22:	7877      	ldrb	r7, [r6, #1]
 8024a24:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024a28:	4427      	add	r7, r4
 8024a2a:	2900      	cmp	r1, #0
 8024a2c:	f000 8097 	beq.w	8024b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024a30:	18b0      	adds	r0, r6, r2
 8024a32:	5cb2      	ldrb	r2, [r6, r2]
 8024a34:	7840      	ldrb	r0, [r0, #1]
 8024a36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024a3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a3e:	4422      	add	r2, r4
 8024a40:	4420      	add	r0, r4
 8024a42:	b29b      	uxth	r3, r3
 8024a44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024a46:	b289      	uxth	r1, r1
 8024a48:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024a4c:	f8b6 c000 	ldrh.w	ip, [r6]
 8024a50:	fb03 f801 	mul.w	r8, r3, r1
 8024a54:	011b      	lsls	r3, r3, #4
 8024a56:	78be      	ldrb	r6, [r7, #2]
 8024a58:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024a5c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024a60:	eba3 0308 	sub.w	r3, r3, r8
 8024a64:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024a68:	b289      	uxth	r1, r1
 8024a6a:	b29b      	uxth	r3, r3
 8024a6c:	ebae 0e01 	sub.w	lr, lr, r1
 8024a70:	435e      	muls	r6, r3
 8024a72:	fa1f fe8e 	uxth.w	lr, lr
 8024a76:	9310      	str	r3, [sp, #64]	; 0x40
 8024a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a7a:	fb0e 660b 	mla	r6, lr, fp, r6
 8024a7e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024a82:	fb01 660b 	mla	r6, r1, fp, r6
 8024a86:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024a8a:	fb08 660b 	mla	r6, r8, fp, r6
 8024a8e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024a92:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024a96:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024a9a:	fb1b fb03 	smulbb	fp, fp, r3
 8024a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024aa0:	fb06 b60a 	mla	r6, r6, sl, fp
 8024aa4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024aa8:	787d      	ldrb	r5, [r7, #1]
 8024aaa:	783f      	ldrb	r7, [r7, #0]
 8024aac:	b2b6      	uxth	r6, r6
 8024aae:	435d      	muls	r5, r3
 8024ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ab2:	fb0e 550b 	mla	r5, lr, fp, r5
 8024ab6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024aba:	fb01 550b 	mla	r5, r1, fp, r5
 8024abe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024ac2:	fb08 550b 	mla	r5, r8, fp, r5
 8024ac6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024aca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024ace:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024ad2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024ad6:	fa5f fc8c 	uxtb.w	ip, ip
 8024ada:	fb1b fb03 	smulbb	fp, fp, r3
 8024ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ae0:	437b      	muls	r3, r7
 8024ae2:	7817      	ldrb	r7, [r2, #0]
 8024ae4:	fb05 b50a 	mla	r5, r5, sl, fp
 8024ae8:	fb0e 3309 	mla	r3, lr, r9, r3
 8024aec:	b2ad      	uxth	r5, r5
 8024aee:	fb01 3307 	mla	r3, r1, r7, r3
 8024af2:	7807      	ldrb	r7, [r0, #0]
 8024af4:	f105 0b01 	add.w	fp, r5, #1
 8024af8:	fb08 3707 	mla	r7, r8, r7, r3
 8024afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024afe:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024b02:	fb1c fc03 	smulbb	ip, ip, r3
 8024b06:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024b0a:	1c73      	adds	r3, r6, #1
 8024b0c:	096d      	lsrs	r5, r5, #5
 8024b0e:	fb07 c70a 	mla	r7, r7, sl, ip
 8024b12:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024b16:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024b1a:	b2bf      	uxth	r7, r7
 8024b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b1e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024b22:	1c7a      	adds	r2, r7, #1
 8024b24:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024b28:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024b2c:	4316      	orrs	r6, r2
 8024b2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024b30:	432e      	orrs	r6, r5
 8024b32:	f823 6b02 	strh.w	r6, [r3], #2
 8024b36:	930c      	str	r3, [sp, #48]	; 0x30
 8024b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024b3a:	4413      	add	r3, r2
 8024b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024b3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8024b40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024b42:	4413      	add	r3, r2
 8024b44:	9320      	str	r3, [sp, #128]	; 0x80
 8024b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024b48:	3b01      	subs	r3, #1
 8024b4a:	9311      	str	r3, [sp, #68]	; 0x44
 8024b4c:	e6db      	b.n	8024906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024b4e:	b149      	cbz	r1, 8024b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8024b50:	5cb2      	ldrb	r2, [r6, r2]
 8024b52:	4628      	mov	r0, r5
 8024b54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b58:	4422      	add	r2, r4
 8024b5a:	462f      	mov	r7, r5
 8024b5c:	e771      	b.n	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024b5e:	4628      	mov	r0, r5
 8024b60:	462a      	mov	r2, r5
 8024b62:	e76e      	b.n	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024b64:	4628      	mov	r0, r5
 8024b66:	462a      	mov	r2, r5
 8024b68:	e7f7      	b.n	8024b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b6a:	b015      	add	sp, #84	; 0x54
 8024b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b74:	880f      	ldrh	r7, [r1, #0]
 8024b76:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8024b7a:	023c      	lsls	r4, r7, #8
 8024b7c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8024b80:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024b84:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8024b88:	017c      	lsls	r4, r7, #5
 8024b8a:	00ff      	lsls	r7, r7, #3
 8024b8c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024b90:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8024b94:	b2ff      	uxtb	r7, r7
 8024b96:	ea4b 0404 	orr.w	r4, fp, r4
 8024b9a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8024b9e:	4327      	orrs	r7, r4
 8024ba0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024ba4:	2d00      	cmp	r5, #0
 8024ba6:	9701      	str	r7, [sp, #4]
 8024ba8:	eb02 080a 	add.w	r8, r2, sl
 8024bac:	db7e      	blt.n	8024cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024bae:	45a9      	cmp	r9, r5
 8024bb0:	dd7c      	ble.n	8024cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024bb2:	f1bc 0f00 	cmp.w	ip, #0
 8024bb6:	db77      	blt.n	8024ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024bb8:	45e6      	cmp	lr, ip
 8024bba:	dd75      	ble.n	8024ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024bbc:	f812 700a 	ldrb.w	r7, [r2, sl]
 8024bc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024bc4:	441f      	add	r7, r3
 8024bc6:	f11c 0201 	adds.w	r2, ip, #1
 8024bca:	d472      	bmi.n	8024cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024bcc:	4596      	cmp	lr, r2
 8024bce:	dd70      	ble.n	8024cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024bd0:	2800      	cmp	r0, #0
 8024bd2:	d06e      	beq.n	8024cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024bd4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024bd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024bdc:	441c      	add	r4, r3
 8024bde:	3501      	adds	r5, #1
 8024be0:	d46b      	bmi.n	8024cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024be2:	45a9      	cmp	r9, r5
 8024be4:	dd69      	ble.n	8024cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024be6:	2e00      	cmp	r6, #0
 8024be8:	d067      	beq.n	8024cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024bea:	f1bc 0f00 	cmp.w	ip, #0
 8024bee:	db62      	blt.n	8024cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024bf0:	45e6      	cmp	lr, ip
 8024bf2:	dd60      	ble.n	8024cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024bf4:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024bfc:	441d      	add	r5, r3
 8024bfe:	f11c 0201 	adds.w	r2, ip, #1
 8024c02:	d45d      	bmi.n	8024cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024c04:	4596      	cmp	lr, r2
 8024c06:	dd5b      	ble.n	8024cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024c08:	2800      	cmp	r0, #0
 8024c0a:	d059      	beq.n	8024cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024c0c:	44c6      	add	lr, r8
 8024c0e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024c12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c16:	4413      	add	r3, r2
 8024c18:	b280      	uxth	r0, r0
 8024c1a:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024c1e:	b2b2      	uxth	r2, r6
 8024c20:	f897 9000 	ldrb.w	r9, [r7]
 8024c24:	787f      	ldrb	r7, [r7, #1]
 8024c26:	fb00 f602 	mul.w	r6, r0, r2
 8024c2a:	0100      	lsls	r0, r0, #4
 8024c2c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024c30:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8024c34:	1b80      	subs	r0, r0, r6
 8024c36:	fa1f fc82 	uxth.w	ip, r2
 8024c3a:	b282      	uxth	r2, r0
 8024c3c:	78a0      	ldrb	r0, [r4, #2]
 8024c3e:	eba8 080c 	sub.w	r8, r8, ip
 8024c42:	4350      	muls	r0, r2
 8024c44:	fa1f f888 	uxth.w	r8, r8
 8024c48:	fb08 0e0e 	mla	lr, r8, lr, r0
 8024c4c:	78a8      	ldrb	r0, [r5, #2]
 8024c4e:	fb0c e000 	mla	r0, ip, r0, lr
 8024c52:	f893 e002 	ldrb.w	lr, [r3, #2]
 8024c56:	fb06 0e0e 	mla	lr, r6, lr, r0
 8024c5a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8024c5e:	f894 e000 	ldrb.w	lr, [r4]
 8024c62:	fb02 fe0e 	mul.w	lr, r2, lr
 8024c66:	fb08 e909 	mla	r9, r8, r9, lr
 8024c6a:	f895 e000 	ldrb.w	lr, [r5]
 8024c6e:	fb0c 990e 	mla	r9, ip, lr, r9
 8024c72:	f893 e000 	ldrb.w	lr, [r3]
 8024c76:	785b      	ldrb	r3, [r3, #1]
 8024c78:	fb06 9e0e 	mla	lr, r6, lr, r9
 8024c7c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8024c80:	ea4e 0e00 	orr.w	lr, lr, r0
 8024c84:	7860      	ldrb	r0, [r4, #1]
 8024c86:	4350      	muls	r0, r2
 8024c88:	786a      	ldrb	r2, [r5, #1]
 8024c8a:	fb08 0007 	mla	r0, r8, r7, r0
 8024c8e:	fb0c 0202 	mla	r2, ip, r2, r0
 8024c92:	fb06 2303 	mla	r3, r6, r3, r2
 8024c96:	095b      	lsrs	r3, r3, #5
 8024c98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c9c:	ea4e 0303 	orr.w	r3, lr, r3
 8024ca0:	800b      	strh	r3, [r1, #0]
 8024ca2:	b003      	add	sp, #12
 8024ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ca8:	af01      	add	r7, sp, #4
 8024caa:	e78c      	b.n	8024bc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8024cac:	ac01      	add	r4, sp, #4
 8024cae:	4627      	mov	r7, r4
 8024cb0:	e795      	b.n	8024bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024cb2:	ac01      	add	r4, sp, #4
 8024cb4:	e793      	b.n	8024bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024cb6:	ad01      	add	r5, sp, #4
 8024cb8:	e7a1      	b.n	8024bfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8024cba:	ab01      	add	r3, sp, #4
 8024cbc:	461d      	mov	r5, r3
 8024cbe:	e7ab      	b.n	8024c18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8024cc0:	ab01      	add	r3, sp, #4
 8024cc2:	e7a9      	b.n	8024c18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc8:	b08f      	sub	sp, #60	; 0x3c
 8024cca:	920c      	str	r2, [sp, #48]	; 0x30
 8024ccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024cce:	900d      	str	r0, [sp, #52]	; 0x34
 8024cd0:	910a      	str	r1, [sp, #40]	; 0x28
 8024cd2:	6850      	ldr	r0, [r2, #4]
 8024cd4:	9306      	str	r3, [sp, #24]
 8024cd6:	6812      	ldr	r2, [r2, #0]
 8024cd8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8024cdc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8024ce0:	fb00 1303 	mla	r3, r0, r3, r1
 8024ce4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ce8:	9307      	str	r3, [sp, #28]
 8024cea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	9308      	str	r3, [sp, #32]
 8024cf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cf2:	685c      	ldr	r4, [r3, #4]
 8024cf4:	3404      	adds	r4, #4
 8024cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024cf8:	2b00      	cmp	r3, #0
 8024cfa:	dc03      	bgt.n	8024d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8024cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	f340 81d5 	ble.w	80250ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8024d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d0e:	1e48      	subs	r0, r1, #1
 8024d10:	1e56      	subs	r6, r2, #1
 8024d12:	9b06      	ldr	r3, [sp, #24]
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	f340 80b6 	ble.w	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024d1a:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024d1e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024d22:	d406      	bmi.n	8024d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024d24:	4287      	cmp	r7, r0
 8024d26:	da04      	bge.n	8024d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	db02      	blt.n	8024d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024d2c:	42b3      	cmp	r3, r6
 8024d2e:	f2c0 80ab 	blt.w	8024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8024d32:	3701      	adds	r7, #1
 8024d34:	f100 809c 	bmi.w	8024e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024d38:	42b9      	cmp	r1, r7
 8024d3a:	f2c0 8099 	blt.w	8024e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024d3e:	3301      	adds	r3, #1
 8024d40:	f100 8096 	bmi.w	8024e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024d44:	429a      	cmp	r2, r3
 8024d46:	f2c0 8093 	blt.w	8024e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024d4a:	9b06      	ldr	r3, [sp, #24]
 8024d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d4e:	9b07      	ldr	r3, [sp, #28]
 8024d50:	9309      	str	r3, [sp, #36]	; 0x24
 8024d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	f340 80b4 	ble.w	8024ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8024d5a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024d5c:	142e      	asrs	r6, r5, #16
 8024d5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024d60:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024d64:	68c7      	ldr	r7, [r0, #12]
 8024d66:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024d6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d6e:	6892      	ldr	r2, [r2, #8]
 8024d70:	f100 80fb 	bmi.w	8024f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024d74:	f102 3cff 	add.w	ip, r2, #4294967295
 8024d78:	4560      	cmp	r0, ip
 8024d7a:	f280 80f6 	bge.w	8024f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024d7e:	2e00      	cmp	r6, #0
 8024d80:	f2c0 80f3 	blt.w	8024f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8024d88:	4566      	cmp	r6, ip
 8024d8a:	f280 80ee 	bge.w	8024f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024d8e:	b212      	sxth	r2, r2
 8024d90:	fb06 0002 	mla	r0, r6, r2, r0
 8024d94:	9e08      	ldr	r6, [sp, #32]
 8024d96:	1837      	adds	r7, r6, r0
 8024d98:	5c30      	ldrb	r0, [r6, r0]
 8024d9a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024d9e:	eb04 0c08 	add.w	ip, r4, r8
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	f000 80d3 	beq.w	8024f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024da8:	787e      	ldrb	r6, [r7, #1]
 8024daa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024dae:	4426      	add	r6, r4
 8024db0:	2900      	cmp	r1, #0
 8024db2:	f000 80d4 	beq.w	8024f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8024db6:	18b8      	adds	r0, r7, r2
 8024db8:	5cba      	ldrb	r2, [r7, r2]
 8024dba:	7840      	ldrb	r0, [r0, #1]
 8024dbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024dc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024dc4:	4422      	add	r2, r4
 8024dc6:	4420      	add	r0, r4
 8024dc8:	b29b      	uxth	r3, r3
 8024dca:	78b7      	ldrb	r7, [r6, #2]
 8024dcc:	b289      	uxth	r1, r1
 8024dce:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024dd2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024dd6:	fb03 f901 	mul.w	r9, r3, r1
 8024dda:	011b      	lsls	r3, r3, #4
 8024ddc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024de0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024de4:	eba3 0309 	sub.w	r3, r3, r9
 8024de8:	b289      	uxth	r1, r1
 8024dea:	b29b      	uxth	r3, r3
 8024dec:	ebae 0e01 	sub.w	lr, lr, r1
 8024df0:	435f      	muls	r7, r3
 8024df2:	fa1f fe8e 	uxth.w	lr, lr
 8024df6:	fb0e 770a 	mla	r7, lr, sl, r7
 8024dfa:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024dfe:	fb01 770a 	mla	r7, r1, sl, r7
 8024e02:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024e06:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024e0a:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024e0e:	f896 8000 	ldrb.w	r8, [r6]
 8024e12:	7876      	ldrb	r6, [r6, #1]
 8024e14:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024e18:	fb03 f808 	mul.w	r8, r3, r8
 8024e1c:	4373      	muls	r3, r6
 8024e1e:	fb0e 8807 	mla	r8, lr, r7, r8
 8024e22:	7817      	ldrb	r7, [r2, #0]
 8024e24:	fb0e 330c 	mla	r3, lr, ip, r3
 8024e28:	fb01 8807 	mla	r8, r1, r7, r8
 8024e2c:	7807      	ldrb	r7, [r0, #0]
 8024e2e:	fb09 8707 	mla	r7, r9, r7, r8
 8024e32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024e36:	ea47 070a 	orr.w	r7, r7, sl
 8024e3a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024e3e:	fb01 310a 	mla	r1, r1, sl, r3
 8024e42:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e48:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024e4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024e50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024e54:	ea47 070a 	orr.w	r7, r7, sl
 8024e58:	801f      	strh	r7, [r3, #0]
 8024e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e5c:	3302      	adds	r3, #2
 8024e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8024e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024e62:	449b      	add	fp, r3
 8024e64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e66:	441d      	add	r5, r3
 8024e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e6a:	3b01      	subs	r3, #1
 8024e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8024e6e:	e770      	b.n	8024d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024e72:	449b      	add	fp, r3
 8024e74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024e76:	441d      	add	r5, r3
 8024e78:	9b06      	ldr	r3, [sp, #24]
 8024e7a:	3b01      	subs	r3, #1
 8024e7c:	9306      	str	r3, [sp, #24]
 8024e7e:	9b07      	ldr	r3, [sp, #28]
 8024e80:	3302      	adds	r3, #2
 8024e82:	9307      	str	r3, [sp, #28]
 8024e84:	e745      	b.n	8024d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8024e86:	d023      	beq.n	8024ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024e88:	9b06      	ldr	r3, [sp, #24]
 8024e8a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024e8c:	3b01      	subs	r3, #1
 8024e8e:	fb00 b003 	mla	r0, r0, r3, fp
 8024e92:	1400      	asrs	r0, r0, #16
 8024e94:	f53f af59 	bmi.w	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024e98:	3901      	subs	r1, #1
 8024e9a:	4288      	cmp	r0, r1
 8024e9c:	f6bf af55 	bge.w	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024ea2:	fb01 5303 	mla	r3, r1, r3, r5
 8024ea6:	141b      	asrs	r3, r3, #16
 8024ea8:	f53f af4f 	bmi.w	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024eac:	3a01      	subs	r2, #1
 8024eae:	4293      	cmp	r3, r2
 8024eb0:	f6bf af4b 	bge.w	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024eb4:	9b06      	ldr	r3, [sp, #24]
 8024eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8024eb8:	9b07      	ldr	r3, [sp, #28]
 8024eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ebe:	2b00      	cmp	r3, #0
 8024ec0:	dc70      	bgt.n	8024fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8024ec2:	9b06      	ldr	r3, [sp, #24]
 8024ec4:	9a07      	ldr	r2, [sp, #28]
 8024ec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024eca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ece:	9307      	str	r3, [sp, #28]
 8024ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ed2:	2b00      	cmp	r3, #0
 8024ed4:	f340 80eb 	ble.w	80250ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8024ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024edc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024ede:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ee2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ee6:	eef0 6a62 	vmov.f32	s13, s5
 8024eea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024eee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ef2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ef6:	ee16 ba90 	vmov	fp, s13
 8024efa:	eef0 6a43 	vmov.f32	s13, s6
 8024efe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f02:	ee16 5a90 	vmov	r5, s13
 8024f06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f1e:	ee12 2a90 	vmov	r2, s5
 8024f22:	eef0 2a47 	vmov.f32	s5, s14
 8024f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f2a:	ee13 2a10 	vmov	r2, s6
 8024f2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8024f30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024f32:	eeb0 3a67 	vmov.f32	s6, s15
 8024f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f3a:	931c      	str	r3, [sp, #112]	; 0x70
 8024f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f40:	3b01      	subs	r3, #1
 8024f42:	930a      	str	r3, [sp, #40]	; 0x28
 8024f44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024f46:	bf08      	it	eq
 8024f48:	4613      	moveq	r3, r2
 8024f4a:	9306      	str	r3, [sp, #24]
 8024f4c:	e6d3      	b.n	8024cf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8024f4e:	b149      	cbz	r1, 8024f64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f50:	5cba      	ldrb	r2, [r7, r2]
 8024f52:	4660      	mov	r0, ip
 8024f54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f58:	4422      	add	r2, r4
 8024f5a:	4666      	mov	r6, ip
 8024f5c:	e734      	b.n	8024dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8024f5e:	4660      	mov	r0, ip
 8024f60:	4662      	mov	r2, ip
 8024f62:	e731      	b.n	8024dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8024f64:	4660      	mov	r0, ip
 8024f66:	4662      	mov	r2, ip
 8024f68:	e7f7      	b.n	8024f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024f6a:	f110 0c01 	adds.w	ip, r0, #1
 8024f6e:	f53f af74 	bmi.w	8024e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024f72:	4562      	cmp	r2, ip
 8024f74:	f6ff af71 	blt.w	8024e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024f78:	f116 0c01 	adds.w	ip, r6, #1
 8024f7c:	f53f af6d 	bmi.w	8024e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024f80:	4567      	cmp	r7, ip
 8024f82:	f6ff af6a 	blt.w	8024e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024f86:	b23f      	sxth	r7, r7
 8024f88:	b212      	sxth	r2, r2
 8024f8a:	9701      	str	r7, [sp, #4]
 8024f8c:	9200      	str	r2, [sp, #0]
 8024f8e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024f92:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024f96:	4623      	mov	r3, r4
 8024f98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024f9a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024f9e:	f7ff fde7 	bl	8024b70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024fa2:	e75a      	b.n	8024e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024fa6:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024faa:	1428      	asrs	r0, r5, #16
 8024fac:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024fb0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024fb4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024fb8:	fb02 6000 	mla	r0, r2, r0, r6
 8024fbc:	9e08      	ldr	r6, [sp, #32]
 8024fbe:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024fc2:	1837      	adds	r7, r6, r0
 8024fc4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024fc8:	eb04 0c08 	add.w	ip, r4, r8
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d060      	beq.n	8025092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8024fd0:	787e      	ldrb	r6, [r7, #1]
 8024fd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024fd6:	4426      	add	r6, r4
 8024fd8:	2900      	cmp	r1, #0
 8024fda:	d062      	beq.n	80250a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8024fdc:	18b8      	adds	r0, r7, r2
 8024fde:	5cba      	ldrb	r2, [r7, r2]
 8024fe0:	7840      	ldrb	r0, [r0, #1]
 8024fe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024fea:	4422      	add	r2, r4
 8024fec:	4420      	add	r0, r4
 8024fee:	b29b      	uxth	r3, r3
 8024ff0:	78b7      	ldrb	r7, [r6, #2]
 8024ff2:	b289      	uxth	r1, r1
 8024ff4:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024ff8:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024ffc:	fb03 f901 	mul.w	r9, r3, r1
 8025000:	011b      	lsls	r3, r3, #4
 8025002:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025006:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802500a:	eba3 0309 	sub.w	r3, r3, r9
 802500e:	b289      	uxth	r1, r1
 8025010:	b29b      	uxth	r3, r3
 8025012:	ebae 0e01 	sub.w	lr, lr, r1
 8025016:	435f      	muls	r7, r3
 8025018:	fa1f fe8e 	uxth.w	lr, lr
 802501c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025020:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025024:	fb01 770a 	mla	r7, r1, sl, r7
 8025028:	f890 a002 	ldrb.w	sl, [r0, #2]
 802502c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025030:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025034:	f896 8000 	ldrb.w	r8, [r6]
 8025038:	7876      	ldrb	r6, [r6, #1]
 802503a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802503e:	fb03 f808 	mul.w	r8, r3, r8
 8025042:	4373      	muls	r3, r6
 8025044:	7856      	ldrb	r6, [r2, #1]
 8025046:	fb0e 8807 	mla	r8, lr, r7, r8
 802504a:	7817      	ldrb	r7, [r2, #0]
 802504c:	fb0e 330c 	mla	r3, lr, ip, r3
 8025050:	fb01 8807 	mla	r8, r1, r7, r8
 8025054:	7807      	ldrb	r7, [r0, #0]
 8025056:	fb01 3306 	mla	r3, r1, r6, r3
 802505a:	fb09 8707 	mla	r7, r9, r7, r8
 802505e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025062:	ea47 070a 	orr.w	r7, r7, sl
 8025066:	f890 a001 	ldrb.w	sl, [r0, #1]
 802506a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802506e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025070:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025074:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025078:	ea47 070a 	orr.w	r7, r7, sl
 802507c:	f823 7b02 	strh.w	r7, [r3], #2
 8025080:	930b      	str	r3, [sp, #44]	; 0x2c
 8025082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025084:	449b      	add	fp, r3
 8025086:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025088:	441d      	add	r5, r3
 802508a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802508c:	3b01      	subs	r3, #1
 802508e:	9309      	str	r3, [sp, #36]	; 0x24
 8025090:	e714      	b.n	8024ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8025092:	b149      	cbz	r1, 80250a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025094:	5cba      	ldrb	r2, [r7, r2]
 8025096:	4660      	mov	r0, ip
 8025098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802509c:	4422      	add	r2, r4
 802509e:	4666      	mov	r6, ip
 80250a0:	e7a5      	b.n	8024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80250a2:	4660      	mov	r0, ip
 80250a4:	4662      	mov	r2, ip
 80250a6:	e7a2      	b.n	8024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80250a8:	4660      	mov	r0, ip
 80250aa:	4662      	mov	r2, ip
 80250ac:	e7f7      	b.n	802509e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80250ae:	b00f      	add	sp, #60	; 0x3c
 80250b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080250b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80250b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250b8:	b085      	sub	sp, #20
 80250ba:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80250be:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80250c2:	9102      	str	r1, [sp, #8]
 80250c4:	2c00      	cmp	r4, #0
 80250c6:	fb04 710c 	mla	r1, r4, ip, r7
 80250ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80250ce:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80250d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80250d6:	eb02 0e01 	add.w	lr, r2, r1
 80250da:	f2c0 8122 	blt.w	8025322 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80250de:	45a0      	cmp	r8, r4
 80250e0:	f340 811f 	ble.w	8025322 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80250e4:	2f00      	cmp	r7, #0
 80250e6:	f2c0 811a 	blt.w	802531e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80250ea:	45bc      	cmp	ip, r7
 80250ec:	f340 8117 	ble.w	802531e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80250f0:	5c52      	ldrb	r2, [r2, r1]
 80250f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80250f6:	1c7a      	adds	r2, r7, #1
 80250f8:	f100 8116 	bmi.w	8025328 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80250fc:	4594      	cmp	ip, r2
 80250fe:	f340 8113 	ble.w	8025328 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025102:	2e00      	cmp	r6, #0
 8025104:	f000 8112 	beq.w	802532c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025108:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802510c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025110:	3401      	adds	r4, #1
 8025112:	f100 810f 	bmi.w	8025334 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025116:	45a0      	cmp	r8, r4
 8025118:	f340 810c 	ble.w	8025334 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802511c:	2800      	cmp	r0, #0
 802511e:	f000 810c 	beq.w	802533a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025122:	2f00      	cmp	r7, #0
 8025124:	f2c0 8104 	blt.w	8025330 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025128:	45bc      	cmp	ip, r7
 802512a:	f340 8101 	ble.w	8025330 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802512e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025132:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025136:	3701      	adds	r7, #1
 8025138:	f100 8102 	bmi.w	8025340 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802513c:	45bc      	cmp	ip, r7
 802513e:	f340 80ff 	ble.w	8025340 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025142:	2e00      	cmp	r6, #0
 8025144:	f000 80fe 	beq.w	8025344 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025148:	44f4      	add	ip, lr
 802514a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802514e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025152:	b2b6      	uxth	r6, r6
 8025154:	b280      	uxth	r0, r0
 8025156:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802515a:	fb00 fe06 	mul.w	lr, r0, r6
 802515e:	0136      	lsls	r6, r6, #4
 8025160:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025164:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025168:	eba6 070e 	sub.w	r7, r6, lr
 802516c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025170:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025174:	b280      	uxth	r0, r0
 8025176:	b2bf      	uxth	r7, r7
 8025178:	1a1b      	subs	r3, r3, r0
 802517a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802517e:	fb0a f607 	mul.w	r6, sl, r7
 8025182:	b29b      	uxth	r3, r3
 8025184:	fb0b 6603 	mla	r6, fp, r3, r6
 8025188:	fb00 6609 	mla	r6, r0, r9, r6
 802518c:	fb0e 6608 	mla	r6, lr, r8, r6
 8025190:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025194:	9600      	str	r6, [sp, #0]
 8025196:	2e00      	cmp	r6, #0
 8025198:	f000 80be 	beq.w	8025318 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802519c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80251a0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80251a4:	9e02      	ldr	r6, [sp, #8]
 80251a6:	fb0b fc0c 	mul.w	ip, fp, ip
 80251aa:	fb0b f505 	mul.w	r5, fp, r5
 80251ae:	8836      	ldrh	r6, [r6, #0]
 80251b0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80251b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80251b8:	9501      	str	r5, [sp, #4]
 80251ba:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80251be:	44dc      	add	ip, fp
 80251c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251c4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80251c8:	9503      	str	r5, [sp, #12]
 80251ca:	9d01      	ldr	r5, [sp, #4]
 80251cc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80251d0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80251d4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80251d8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80251dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80251e0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80251e4:	fb0a fa01 	mul.w	sl, sl, r1
 80251e8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80251ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80251f0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80251f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80251f8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80251fc:	4465      	add	r5, ip
 80251fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025202:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025206:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802520a:	fb09 fc0c 	mul.w	ip, r9, ip
 802520e:	0a2d      	lsrs	r5, r5, #8
 8025210:	fb09 f904 	mul.w	r9, r9, r4
 8025214:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025218:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802521c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025220:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025224:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025228:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802522c:	437d      	muls	r5, r7
 802522e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025232:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025236:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802523a:	4461      	add	r1, ip
 802523c:	fb08 f404 	mul.w	r4, r8, r4
 8025240:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025244:	fb08 f802 	mul.w	r8, r8, r2
 8025248:	0a09      	lsrs	r1, r1, #8
 802524a:	0a22      	lsrs	r2, r4, #8
 802524c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025250:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025254:	fb07 f70a 	mul.w	r7, r7, sl
 8025258:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802525c:	4414      	add	r4, r2
 802525e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025262:	0a24      	lsrs	r4, r4, #8
 8025264:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025268:	9a03      	ldr	r2, [sp, #12]
 802526a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802526e:	fb02 5503 	mla	r5, r2, r3, r5
 8025272:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025276:	9a00      	ldr	r2, [sp, #0]
 8025278:	fb04 540e 	mla	r4, r4, lr, r5
 802527c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025280:	1235      	asrs	r5, r6, #8
 8025282:	fb01 4100 	mla	r1, r1, r0, r4
 8025286:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802528a:	0a09      	lsrs	r1, r1, #8
 802528c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8025290:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8025294:	fb03 7101 	mla	r1, r3, r1, r7
 8025298:	fb0e 1e08 	mla	lr, lr, r8, r1
 802529c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80252a0:	fb00 e101 	mla	r1, r0, r1, lr
 80252a4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80252a8:	b287      	uxth	r7, r0
 80252aa:	0a09      	lsrs	r1, r1, #8
 80252ac:	437a      	muls	r2, r7
 80252ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80252b2:	1c53      	adds	r3, r2, #1
 80252b4:	4321      	orrs	r1, r4
 80252b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80252ba:	0c0a      	lsrs	r2, r1, #16
 80252bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80252c0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80252c4:	b2c8      	uxtb	r0, r1
 80252c6:	fb12 f207 	smulbb	r2, r2, r7
 80252ca:	fb14 f407 	smulbb	r4, r4, r7
 80252ce:	b2db      	uxtb	r3, r3
 80252d0:	fb10 f007 	smulbb	r0, r0, r7
 80252d4:	fb05 2503 	mla	r5, r5, r3, r2
 80252d8:	10f2      	asrs	r2, r6, #3
 80252da:	00f6      	lsls	r6, r6, #3
 80252dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80252e0:	b2ad      	uxth	r5, r5
 80252e2:	b2f6      	uxtb	r6, r6
 80252e4:	fb02 4203 	mla	r2, r2, r3, r4
 80252e8:	fb06 0303 	mla	r3, r6, r3, r0
 80252ec:	b294      	uxth	r4, r2
 80252ee:	b299      	uxth	r1, r3
 80252f0:	1c6b      	adds	r3, r5, #1
 80252f2:	1c62      	adds	r2, r4, #1
 80252f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80252f8:	1c4b      	adds	r3, r1, #1
 80252fa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80252fe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025302:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025306:	0952      	lsrs	r2, r2, #5
 8025308:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802530c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025310:	432b      	orrs	r3, r5
 8025312:	4313      	orrs	r3, r2
 8025314:	9a02      	ldr	r2, [sp, #8]
 8025316:	8013      	strh	r3, [r2, #0]
 8025318:	b005      	add	sp, #20
 802531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802531e:	2500      	movs	r5, #0
 8025320:	e6e9      	b.n	80250f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025322:	2100      	movs	r1, #0
 8025324:	460d      	mov	r5, r1
 8025326:	e6f3      	b.n	8025110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025328:	2100      	movs	r1, #0
 802532a:	e6f1      	b.n	8025110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802532c:	4631      	mov	r1, r6
 802532e:	e6ef      	b.n	8025110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025330:	2400      	movs	r4, #0
 8025332:	e700      	b.n	8025136 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025334:	2200      	movs	r2, #0
 8025336:	4614      	mov	r4, r2
 8025338:	e70b      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802533a:	4602      	mov	r2, r0
 802533c:	4604      	mov	r4, r0
 802533e:	e708      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025340:	2200      	movs	r2, #0
 8025342:	e706      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025344:	4632      	mov	r2, r6
 8025346:	e704      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025348 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802534c:	b09f      	sub	sp, #124	; 0x7c
 802534e:	921b      	str	r2, [sp, #108]	; 0x6c
 8025350:	9309      	str	r3, [sp, #36]	; 0x24
 8025352:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025354:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025358:	901d      	str	r0, [sp, #116]	; 0x74
 802535a:	931c      	str	r3, [sp, #112]	; 0x70
 802535c:	6850      	ldr	r0, [r2, #4]
 802535e:	9119      	str	r1, [sp, #100]	; 0x64
 8025360:	6812      	ldr	r2, [r2, #0]
 8025362:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8025364:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025368:	fb00 1303 	mla	r3, r0, r3, r1
 802536c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025370:	930c      	str	r3, [sp, #48]	; 0x30
 8025372:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025374:	681b      	ldr	r3, [r3, #0]
 8025376:	9312      	str	r3, [sp, #72]	; 0x48
 8025378:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802537a:	685e      	ldr	r6, [r3, #4]
 802537c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025380:	3604      	adds	r6, #4
 8025382:	930d      	str	r3, [sp, #52]	; 0x34
 8025384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025386:	2b00      	cmp	r3, #0
 8025388:	dc03      	bgt.n	8025392 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802538a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802538c:	2b00      	cmp	r3, #0
 802538e:	f340 8387 	ble.w	8025aa0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025392:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025394:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025398:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802539c:	1e48      	subs	r0, r1, #1
 802539e:	1e57      	subs	r7, r2, #1
 80253a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	f340 8194 	ble.w	80256d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80253a8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80253aa:	142b      	asrs	r3, r5, #16
 80253ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80253b0:	d406      	bmi.n	80253c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253b2:	4584      	cmp	ip, r0
 80253b4:	da04      	bge.n	80253c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	db02      	blt.n	80253c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253ba:	42bb      	cmp	r3, r7
 80253bc:	f2c0 8189 	blt.w	80256d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80253c0:	f11c 0c01 	adds.w	ip, ip, #1
 80253c4:	f100 8177 	bmi.w	80256b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80253c8:	4561      	cmp	r1, ip
 80253ca:	f2c0 8174 	blt.w	80256b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80253ce:	3301      	adds	r3, #1
 80253d0:	f100 8171 	bmi.w	80256b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80253d4:	429a      	cmp	r2, r3
 80253d6:	f2c0 816e 	blt.w	80256b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80253da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80253de:	931a      	str	r3, [sp, #104]	; 0x68
 80253e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	f340 8193 	ble.w	802570e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80253e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80253ea:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80253ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80253f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80253f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80253f8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80253fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80253fe:	141b      	asrs	r3, r3, #16
 8025400:	f100 81d6 	bmi.w	80257b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025404:	f100 38ff 	add.w	r8, r0, #4294967295
 8025408:	4543      	cmp	r3, r8
 802540a:	f280 81d1 	bge.w	80257b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802540e:	f1bc 0f00 	cmp.w	ip, #0
 8025412:	f2c0 81cd 	blt.w	80257b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025416:	f10e 38ff 	add.w	r8, lr, #4294967295
 802541a:	45c4      	cmp	ip, r8
 802541c:	f280 81c8 	bge.w	80257b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025420:	b200      	sxth	r0, r0
 8025422:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025424:	fb0c 3300 	mla	r3, ip, r0, r3
 8025428:	eb04 0803 	add.w	r8, r4, r3
 802542c:	5ce3      	ldrb	r3, [r4, r3]
 802542e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025432:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025436:	2a00      	cmp	r2, #0
 8025438:	f000 81af 	beq.w	802579a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802543c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025440:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025444:	940e      	str	r4, [sp, #56]	; 0x38
 8025446:	0e24      	lsrs	r4, r4, #24
 8025448:	9415      	str	r4, [sp, #84]	; 0x54
 802544a:	b179      	cbz	r1, 802546c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802544c:	eb08 0c00 	add.w	ip, r8, r0
 8025450:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025454:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025458:	900a      	str	r0, [sp, #40]	; 0x28
 802545a:	0e00      	lsrs	r0, r0, #24
 802545c:	9013      	str	r0, [sp, #76]	; 0x4c
 802545e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025462:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025466:	900f      	str	r0, [sp, #60]	; 0x3c
 8025468:	0e00      	lsrs	r0, r0, #24
 802546a:	9016      	str	r0, [sp, #88]	; 0x58
 802546c:	b292      	uxth	r2, r2
 802546e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025470:	b289      	uxth	r1, r1
 8025472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025474:	fb02 f901 	mul.w	r9, r2, r1
 8025478:	0112      	lsls	r2, r2, #4
 802547a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802547e:	eba2 0809 	sub.w	r8, r2, r9
 8025482:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025486:	b289      	uxth	r1, r1
 8025488:	fa1f f888 	uxth.w	r8, r8
 802548c:	1a52      	subs	r2, r2, r1
 802548e:	fb08 f000 	mul.w	r0, r8, r0
 8025492:	b292      	uxth	r2, r2
 8025494:	fb02 000e 	mla	r0, r2, lr, r0
 8025498:	fb01 0004 	mla	r0, r1, r4, r0
 802549c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802549e:	fb09 0004 	mla	r0, r9, r4, r0
 80254a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80254a6:	2800      	cmp	r0, #0
 80254a8:	f000 80fa 	beq.w	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80254ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80254b0:	d01b      	beq.n	80254ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80254b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80254b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254ba:	fb0e fa0a 	mul.w	sl, lr, sl
 80254be:	fb0e fe03 	mul.w	lr, lr, r3
 80254c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80254c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80254ca:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80254ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80254d6:	4453      	add	r3, sl
 80254d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254dc:	0a1b      	lsrs	r3, r3, #8
 80254de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80254e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254e6:	ea43 030c 	orr.w	r3, r3, ip
 80254ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80254ec:	2cff      	cmp	r4, #255	; 0xff
 80254ee:	d021      	beq.n	8025534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80254f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80254f2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80254f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80254f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80254fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80254fe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025502:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025504:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025508:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802550c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025510:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025514:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025518:	44de      	add	lr, fp
 802551a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802551e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025522:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025526:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802552a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802552e:	ea4e 040a 	orr.w	r4, lr, sl
 8025532:	940e      	str	r4, [sp, #56]	; 0x38
 8025534:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025536:	2cff      	cmp	r4, #255	; 0xff
 8025538:	d021      	beq.n	802557e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802553a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802553c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025542:	fb04 fb0b 	mul.w	fp, r4, fp
 8025546:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025548:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802554c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802554e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025552:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025556:	fb04 fa0a 	mul.w	sl, r4, sl
 802555a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802555e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025562:	44de      	add	lr, fp
 8025564:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025568:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802556c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025570:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025574:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025578:	ea4e 040a 	orr.w	r4, lr, sl
 802557c:	940a      	str	r4, [sp, #40]	; 0x28
 802557e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025580:	2cff      	cmp	r4, #255	; 0xff
 8025582:	d021      	beq.n	80255c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025584:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025586:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802558a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802558c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025590:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025592:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025596:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025598:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802559c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80255a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80255a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80255ac:	44de      	add	lr, fp
 80255ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80255b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255c2:	ea4e 040a 	orr.w	r4, lr, sl
 80255c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80255c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80255ca:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80255ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80255d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80255d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80255dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80255e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80255e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80255e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80255ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80255ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80255f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80255f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80255f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80255fa:	fb08 f80e 	mul.w	r8, r8, lr
 80255fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025602:	fb02 8303 	mla	r3, r2, r3, r8
 8025606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025608:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802560c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025612:	fb01 330a 	mla	r3, r1, sl, r3
 8025616:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802561a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802561c:	fb09 3901 	mla	r9, r9, r1, r3
 8025620:	883b      	ldrh	r3, [r7, #0]
 8025622:	4342      	muls	r2, r0
 8025624:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025628:	1c50      	adds	r0, r2, #1
 802562a:	1219      	asrs	r1, r3, #8
 802562c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025630:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025634:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025638:	ea4c 0c09 	orr.w	ip, ip, r9
 802563c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025640:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025644:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025648:	b2c0      	uxtb	r0, r0
 802564a:	fb12 f204 	smulbb	r2, r2, r4
 802564e:	fa5f fc8c 	uxtb.w	ip, ip
 8025652:	fb1e fe04 	smulbb	lr, lr, r4
 8025656:	fb01 2100 	mla	r1, r1, r0, r2
 802565a:	10da      	asrs	r2, r3, #3
 802565c:	fb1c fc04 	smulbb	ip, ip, r4
 8025660:	00db      	lsls	r3, r3, #3
 8025662:	b289      	uxth	r1, r1
 8025664:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025668:	b2db      	uxtb	r3, r3
 802566a:	fb02 e200 	mla	r2, r2, r0, lr
 802566e:	fb03 c300 	mla	r3, r3, r0, ip
 8025672:	b292      	uxth	r2, r2
 8025674:	fa1f fc83 	uxth.w	ip, r3
 8025678:	1c4b      	adds	r3, r1, #1
 802567a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802567e:	f10c 0301 	add.w	r3, ip, #1
 8025682:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025686:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802568a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802568e:	430b      	orrs	r3, r1
 8025690:	1c51      	adds	r1, r2, #1
 8025692:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025696:	0952      	lsrs	r2, r2, #5
 8025698:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802569c:	4313      	orrs	r3, r2
 802569e:	803b      	strh	r3, [r7, #0]
 80256a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80256a2:	3702      	adds	r7, #2
 80256a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80256a6:	441a      	add	r2, r3
 80256a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80256aa:	441d      	add	r5, r3
 80256ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80256ae:	9229      	str	r2, [sp, #164]	; 0xa4
 80256b0:	3b01      	subs	r3, #1
 80256b2:	931a      	str	r3, [sp, #104]	; 0x68
 80256b4:	e694      	b.n	80253e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80256b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80256b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80256ba:	441c      	add	r4, r3
 80256bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80256be:	441d      	add	r5, r3
 80256c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80256c4:	3b01      	subs	r3, #1
 80256c6:	9309      	str	r3, [sp, #36]	; 0x24
 80256c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256ca:	3302      	adds	r3, #2
 80256cc:	930c      	str	r3, [sp, #48]	; 0x30
 80256ce:	e667      	b.n	80253a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80256d0:	d024      	beq.n	802571c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80256d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256d4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80256d6:	3b01      	subs	r3, #1
 80256d8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80256da:	fb00 4003 	mla	r0, r0, r3, r4
 80256de:	1400      	asrs	r0, r0, #16
 80256e0:	f53f ae7b 	bmi.w	80253da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80256e4:	3901      	subs	r1, #1
 80256e6:	4288      	cmp	r0, r1
 80256e8:	f6bf ae77 	bge.w	80253da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80256ec:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80256ee:	fb01 5303 	mla	r3, r1, r3, r5
 80256f2:	141b      	asrs	r3, r3, #16
 80256f4:	f53f ae71 	bmi.w	80253da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80256f8:	3a01      	subs	r2, #1
 80256fa:	4293      	cmp	r3, r2
 80256fc:	f6bf ae6d 	bge.w	80253da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025700:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025704:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8025708:	f1bb 0f00 	cmp.w	fp, #0
 802570c:	dc70      	bgt.n	80257f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025710:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025716:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802571a:	930c      	str	r3, [sp, #48]	; 0x30
 802571c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802571e:	2b00      	cmp	r3, #0
 8025720:	f340 81be 	ble.w	8025aa0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025728:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802572a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802572e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025732:	eef0 6a62 	vmov.f32	s13, s5
 8025736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802573a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802573e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025742:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025746:	eef0 6a43 	vmov.f32	s13, s6
 802574a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802574e:	ee16 5a90 	vmov	r5, s13
 8025752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025756:	ee61 7a27 	vmul.f32	s15, s2, s15
 802575a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802575e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025762:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025766:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802576a:	ee12 2a90 	vmov	r2, s5
 802576e:	eef0 2a47 	vmov.f32	s5, s14
 8025772:	fb92 f3f3 	sdiv	r3, r2, r3
 8025776:	ee13 2a10 	vmov	r2, s6
 802577a:	932b      	str	r3, [sp, #172]	; 0xac
 802577c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802577e:	eeb0 3a67 	vmov.f32	s6, s15
 8025782:	fb92 f3f3 	sdiv	r3, r2, r3
 8025786:	932c      	str	r3, [sp, #176]	; 0xb0
 8025788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802578a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802578c:	3b01      	subs	r3, #1
 802578e:	9319      	str	r3, [sp, #100]	; 0x64
 8025790:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025792:	bf08      	it	eq
 8025794:	4613      	moveq	r3, r2
 8025796:	9309      	str	r3, [sp, #36]	; 0x24
 8025798:	e5f4      	b.n	8025384 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802579a:	2900      	cmp	r1, #0
 802579c:	f43f ae66 	beq.w	802546c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80257a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80257a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80257a8:	900a      	str	r0, [sp, #40]	; 0x28
 80257aa:	0e00      	lsrs	r0, r0, #24
 80257ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80257ae:	e65d      	b.n	802546c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80257b0:	f113 0801 	adds.w	r8, r3, #1
 80257b4:	f53f af74 	bmi.w	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80257b8:	4540      	cmp	r0, r8
 80257ba:	f6ff af71 	blt.w	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80257be:	f11c 0801 	adds.w	r8, ip, #1
 80257c2:	f53f af6d 	bmi.w	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80257c6:	45c6      	cmp	lr, r8
 80257c8:	f6ff af6a 	blt.w	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80257cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80257ce:	b200      	sxth	r0, r0
 80257d0:	9302      	str	r3, [sp, #8]
 80257d2:	fa0f f38e 	sxth.w	r3, lr
 80257d6:	9000      	str	r0, [sp, #0]
 80257d8:	9301      	str	r3, [sp, #4]
 80257da:	4633      	mov	r3, r6
 80257dc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80257de:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80257e2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80257e6:	4639      	mov	r1, r7
 80257e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80257ea:	f7ff fc63 	bl	80250b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80257ee:	e757      	b.n	80256a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80257f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80257f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80257f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80257f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80257fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80257fe:	1427      	asrs	r7, r4, #16
 8025800:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025802:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025806:	142b      	asrs	r3, r5, #16
 8025808:	fb01 7303 	mla	r3, r1, r3, r7
 802580c:	18e7      	adds	r7, r4, r3
 802580e:	5ce3      	ldrb	r3, [r4, r3]
 8025810:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025814:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025818:	2a00      	cmp	r2, #0
 802581a:	f000 8137 	beq.w	8025a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802581e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025822:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025826:	9410      	str	r4, [sp, #64]	; 0x40
 8025828:	0e24      	lsrs	r4, r4, #24
 802582a:	9417      	str	r4, [sp, #92]	; 0x5c
 802582c:	b170      	cbz	r0, 802584c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802582e:	eb07 0e01 	add.w	lr, r7, r1
 8025832:	5c79      	ldrb	r1, [r7, r1]
 8025834:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025838:	910b      	str	r1, [sp, #44]	; 0x2c
 802583a:	0e09      	lsrs	r1, r1, #24
 802583c:	9114      	str	r1, [sp, #80]	; 0x50
 802583e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025842:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025846:	9111      	str	r1, [sp, #68]	; 0x44
 8025848:	0e09      	lsrs	r1, r1, #24
 802584a:	9118      	str	r1, [sp, #96]	; 0x60
 802584c:	b292      	uxth	r2, r2
 802584e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025850:	b280      	uxth	r0, r0
 8025852:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025854:	fb02 f800 	mul.w	r8, r2, r0
 8025858:	0112      	lsls	r2, r2, #4
 802585a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802585e:	eba2 0e08 	sub.w	lr, r2, r8
 8025862:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025866:	b280      	uxth	r0, r0
 8025868:	fa1f fe8e 	uxth.w	lr, lr
 802586c:	1a12      	subs	r2, r2, r0
 802586e:	fb0e f101 	mul.w	r1, lr, r1
 8025872:	b292      	uxth	r2, r2
 8025874:	fb02 110c 	mla	r1, r2, ip, r1
 8025878:	fb00 1104 	mla	r1, r0, r4, r1
 802587c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802587e:	fb08 1104 	mla	r1, r8, r4, r1
 8025882:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025886:	2900      	cmp	r1, #0
 8025888:	f000 80f5 	beq.w	8025a76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802588c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025890:	d019      	beq.n	80258c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025892:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802589a:	fb0c fa0a 	mul.w	sl, ip, sl
 802589e:	fb0c fc03 	mul.w	ip, ip, r3
 80258a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80258a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80258aa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80258ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80258b6:	4453      	add	r3, sl
 80258b8:	0a3f      	lsrs	r7, r7, #8
 80258ba:	0a1b      	lsrs	r3, r3, #8
 80258bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80258c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258c4:	433b      	orrs	r3, r7
 80258c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80258c8:	2cff      	cmp	r4, #255	; 0xff
 80258ca:	d020      	beq.n	802590e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80258cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80258ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80258d2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80258d4:	4367      	muls	r7, r4
 80258d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80258d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80258dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80258e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80258e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80258e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80258ee:	44bc      	add	ip, r7
 80258f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80258f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80258fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025904:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025908:	ea4c 040a 	orr.w	r4, ip, sl
 802590c:	9410      	str	r4, [sp, #64]	; 0x40
 802590e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025910:	2cff      	cmp	r4, #255	; 0xff
 8025912:	d020      	beq.n	8025956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025914:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025916:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802591a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802591c:	4367      	muls	r7, r4
 802591e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025920:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025924:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025928:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802592a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802592e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025932:	fb04 fa0a 	mul.w	sl, r4, sl
 8025936:	44bc      	add	ip, r7
 8025938:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802593c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025940:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025944:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025948:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802594c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025950:	ea4c 040a 	orr.w	r4, ip, sl
 8025954:	940b      	str	r4, [sp, #44]	; 0x2c
 8025956:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025958:	2cff      	cmp	r4, #255	; 0xff
 802595a:	d020      	beq.n	802599e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802595c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802595e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025962:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025964:	4367      	muls	r7, r4
 8025966:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025968:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802596c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025970:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025972:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802597a:	fb04 fa0a 	mul.w	sl, r4, sl
 802597e:	44bc      	add	ip, r7
 8025980:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025988:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802598c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025994:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025998:	ea4c 040a 	orr.w	r4, ip, sl
 802599c:	9411      	str	r4, [sp, #68]	; 0x44
 802599e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80259a0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80259a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80259a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80259ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259ae:	fb0e f707 	mul.w	r7, lr, r7
 80259b2:	fb02 770c 	mla	r7, r2, ip, r7
 80259b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80259ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259bc:	fb00 770c 	mla	r7, r0, ip, r7
 80259c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80259c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80259c6:	fb08 770c 	mla	r7, r8, ip, r7
 80259ca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80259ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80259d0:	fb0e fe0c 	mul.w	lr, lr, ip
 80259d4:	0a3f      	lsrs	r7, r7, #8
 80259d6:	fb02 e303 	mla	r3, r2, r3, lr
 80259da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80259dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80259e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80259e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80259e6:	fb00 330a 	mla	r3, r0, sl, r3
 80259ea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80259ee:	f8b9 0000 	ldrh.w	r0, [r9]
 80259f2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80259f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80259f8:	1202      	asrs	r2, r0, #8
 80259fa:	434b      	muls	r3, r1
 80259fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a00:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025a04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025a08:	1c59      	adds	r1, r3, #1
 8025a0a:	ea47 070c 	orr.w	r7, r7, ip
 8025a0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025a12:	0c3b      	lsrs	r3, r7, #16
 8025a14:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025a18:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025a1c:	b2ff      	uxtb	r7, r7
 8025a1e:	fb13 f304 	smulbb	r3, r3, r4
 8025a22:	b2c9      	uxtb	r1, r1
 8025a24:	fb1c fc04 	smulbb	ip, ip, r4
 8025a28:	fb02 3201 	mla	r2, r2, r1, r3
 8025a2c:	10c3      	asrs	r3, r0, #3
 8025a2e:	fb17 f704 	smulbb	r7, r7, r4
 8025a32:	00c0      	lsls	r0, r0, #3
 8025a34:	b292      	uxth	r2, r2
 8025a36:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025a3a:	b2c0      	uxtb	r0, r0
 8025a3c:	fb03 c301 	mla	r3, r3, r1, ip
 8025a40:	f102 0c01 	add.w	ip, r2, #1
 8025a44:	fb00 7001 	mla	r0, r0, r1, r7
 8025a48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025a4c:	b280      	uxth	r0, r0
 8025a4e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8025a52:	b29b      	uxth	r3, r3
 8025a54:	1c42      	adds	r2, r0, #1
 8025a56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025a5a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025a5e:	ea42 020c 	orr.w	r2, r2, ip
 8025a62:	f103 0c01 	add.w	ip, r3, #1
 8025a66:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025a6a:	095b      	lsrs	r3, r3, #5
 8025a6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a70:	431a      	orrs	r2, r3
 8025a72:	f8a9 2000 	strh.w	r2, [r9]
 8025a76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025a78:	f109 0902 	add.w	r9, r9, #2
 8025a7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025a7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a82:	441a      	add	r2, r3
 8025a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025a86:	9229      	str	r2, [sp, #164]	; 0xa4
 8025a88:	441d      	add	r5, r3
 8025a8a:	e63d      	b.n	8025708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025a8c:	2800      	cmp	r0, #0
 8025a8e:	f43f aedd 	beq.w	802584c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025a92:	5c79      	ldrb	r1, [r7, r1]
 8025a94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a98:	910b      	str	r1, [sp, #44]	; 0x2c
 8025a9a:	0e09      	lsrs	r1, r1, #24
 8025a9c:	9114      	str	r1, [sp, #80]	; 0x50
 8025a9e:	e6d5      	b.n	802584c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025aa0:	b01f      	add	sp, #124	; 0x7c
 8025aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025aa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025aaa:	b089      	sub	sp, #36	; 0x24
 8025aac:	9101      	str	r1, [sp, #4]
 8025aae:	9801      	ldr	r0, [sp, #4]
 8025ab0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8025ab4:	8800      	ldrh	r0, [r0, #0]
 8025ab6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8025aba:	1206      	asrs	r6, r0, #8
 8025abc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8025ac0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8025ac4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025ac8:	9602      	str	r6, [sp, #8]
 8025aca:	10c6      	asrs	r6, r0, #3
 8025acc:	00c0      	lsls	r0, r0, #3
 8025ace:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025ad2:	b2c0      	uxtb	r0, r0
 8025ad4:	9603      	str	r6, [sp, #12]
 8025ad6:	9004      	str	r0, [sp, #16]
 8025ad8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8025adc:	fb07 100c 	mla	r0, r7, ip, r1
 8025ae0:	2f00      	cmp	r7, #0
 8025ae2:	eb02 0e00 	add.w	lr, r2, r0
 8025ae6:	f2c0 810a 	blt.w	8025cfe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025aea:	45b8      	cmp	r8, r7
 8025aec:	f340 8107 	ble.w	8025cfe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025af0:	2900      	cmp	r1, #0
 8025af2:	f2c0 8102 	blt.w	8025cfa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025af6:	458c      	cmp	ip, r1
 8025af8:	f340 80ff 	ble.w	8025cfa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025afc:	5c12      	ldrb	r2, [r2, r0]
 8025afe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025b02:	1c4a      	adds	r2, r1, #1
 8025b04:	f100 80fe 	bmi.w	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025b08:	4594      	cmp	ip, r2
 8025b0a:	f340 80fb 	ble.w	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025b0e:	2d00      	cmp	r5, #0
 8025b10:	f000 80fa 	beq.w	8025d08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8025b14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025b18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025b1c:	3701      	adds	r7, #1
 8025b1e:	f100 80f7 	bmi.w	8025d10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025b22:	45b8      	cmp	r8, r7
 8025b24:	f340 80f4 	ble.w	8025d10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025b28:	2c00      	cmp	r4, #0
 8025b2a:	f000 80f4 	beq.w	8025d16 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025b2e:	2900      	cmp	r1, #0
 8025b30:	eb0e 020c 	add.w	r2, lr, ip
 8025b34:	f2c0 80ea 	blt.w	8025d0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025b38:	458c      	cmp	ip, r1
 8025b3a:	f340 80e7 	ble.w	8025d0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025b3e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8025b42:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8025b46:	3101      	adds	r1, #1
 8025b48:	f100 80e8 	bmi.w	8025d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025b4c:	458c      	cmp	ip, r1
 8025b4e:	f340 80e5 	ble.w	8025d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025b52:	2d00      	cmp	r5, #0
 8025b54:	f000 80e4 	beq.w	8025d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8025b58:	7852      	ldrb	r2, [r2, #1]
 8025b5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025b5e:	0e0b      	lsrs	r3, r1, #24
 8025b60:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025b64:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025b68:	9300      	str	r3, [sp, #0]
 8025b6a:	b2a4      	uxth	r4, r4
 8025b6c:	b2ab      	uxth	r3, r5
 8025b6e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8025b72:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025b76:	fb03 f904 	mul.w	r9, r3, r4
 8025b7a:	011b      	lsls	r3, r3, #4
 8025b7c:	fb0a f505 	mul.w	r5, sl, r5
 8025b80:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8025b84:	eba3 0e09 	sub.w	lr, r3, r9
 8025b88:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8025b8c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025b90:	0a28      	lsrs	r0, r5, #8
 8025b92:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8025b96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025b9e:	fb0a f303 	mul.w	r3, sl, r3
 8025ba2:	fb08 f707 	mul.w	r7, r8, r7
 8025ba6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8025baa:	4405      	add	r5, r0
 8025bac:	fb08 fc0c 	mul.w	ip, r8, ip
 8025bb0:	b2a4      	uxth	r4, r4
 8025bb2:	0a2d      	lsrs	r5, r5, #8
 8025bb4:	fa1f fe8e 	uxth.w	lr, lr
 8025bb8:	1b12      	subs	r2, r2, r4
 8025bba:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8025bbe:	b292      	uxth	r2, r2
 8025bc0:	9005      	str	r0, [sp, #20]
 8025bc2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8025bc6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025bca:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8025bce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025bd2:	0a1b      	lsrs	r3, r3, #8
 8025bd4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025bd8:	9306      	str	r3, [sp, #24]
 8025bda:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8025bde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025be2:	4460      	add	r0, ip
 8025be4:	fb0b f303 	mul.w	r3, fp, r3
 8025be8:	fb0b f606 	mul.w	r6, fp, r6
 8025bec:	0a00      	lsrs	r0, r0, #8
 8025bee:	0a1d      	lsrs	r5, r3, #8
 8025bf0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8025bf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025bf8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025bfc:	441d      	add	r5, r3
 8025bfe:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8025c02:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025c06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8025c0a:	0a2d      	lsrs	r5, r5, #8
 8025c0c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025c10:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8025c14:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025c18:	0a36      	lsrs	r6, r6, #8
 8025c1a:	0a1b      	lsrs	r3, r3, #8
 8025c1c:	fb05 f50e 	mul.w	r5, r5, lr
 8025c20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025c24:	9307      	str	r3, [sp, #28]
 8025c26:	0e0b      	lsrs	r3, r1, #24
 8025c28:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025c2c:	fb0e f606 	mul.w	r6, lr, r6
 8025c30:	435f      	muls	r7, r3
 8025c32:	4359      	muls	r1, r3
 8025c34:	9b05      	ldr	r3, [sp, #20]
 8025c36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c3e:	fb03 5502 	mla	r5, r3, r2, r5
 8025c42:	9b06      	ldr	r3, [sp, #24]
 8025c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c48:	fb0e fe0b 	mul.w	lr, lr, fp
 8025c4c:	44bc      	add	ip, r7
 8025c4e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8025c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c56:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025c5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c5e:	0a09      	lsrs	r1, r1, #8
 8025c60:	fb0c 5509 	mla	r5, ip, r9, r5
 8025c64:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025c68:	fb00 5504 	mla	r5, r0, r4, r5
 8025c6c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8025c70:	9b07      	ldr	r3, [sp, #28]
 8025c72:	fb02 6000 	mla	r0, r2, r0, r6
 8025c76:	0a2d      	lsrs	r5, r5, #8
 8025c78:	fb02 e20a 	mla	r2, r2, sl, lr
 8025c7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c80:	fb09 0001 	mla	r0, r9, r1, r0
 8025c84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025c88:	fb04 0003 	mla	r0, r4, r3, r0
 8025c8c:	9b00      	ldr	r3, [sp, #0]
 8025c8e:	fb04 2408 	mla	r4, r4, r8, r2
 8025c92:	9a04      	ldr	r2, [sp, #16]
 8025c94:	0a00      	lsrs	r0, r0, #8
 8025c96:	fb09 4903 	mla	r9, r9, r3, r4
 8025c9a:	9b02      	ldr	r3, [sp, #8]
 8025c9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025ca0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025ca4:	4305      	orrs	r5, r0
 8025ca6:	fa5f f989 	uxtb.w	r9, r9
 8025caa:	fb03 f109 	mul.w	r1, r3, r9
 8025cae:	9b03      	ldr	r3, [sp, #12]
 8025cb0:	fb03 f309 	mul.w	r3, r3, r9
 8025cb4:	fb02 f909 	mul.w	r9, r2, r9
 8025cb8:	1c4a      	adds	r2, r1, #1
 8025cba:	1c58      	adds	r0, r3, #1
 8025cbc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025cc0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025cc4:	0c2a      	lsrs	r2, r5, #16
 8025cc6:	0a2b      	lsrs	r3, r5, #8
 8025cc8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025ccc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025cd0:	0212      	lsls	r2, r2, #8
 8025cd2:	00db      	lsls	r3, r3, #3
 8025cd4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025cd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025cdc:	4313      	orrs	r3, r2
 8025cde:	f109 0201 	add.w	r2, r9, #1
 8025ce2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8025ce6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8025cea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8025cee:	431d      	orrs	r5, r3
 8025cf0:	9b01      	ldr	r3, [sp, #4]
 8025cf2:	801d      	strh	r5, [r3, #0]
 8025cf4:	b009      	add	sp, #36	; 0x24
 8025cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cfa:	2000      	movs	r0, #0
 8025cfc:	e701      	b.n	8025b02 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8025cfe:	2600      	movs	r6, #0
 8025d00:	4630      	mov	r0, r6
 8025d02:	e70b      	b.n	8025b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025d04:	2600      	movs	r6, #0
 8025d06:	e709      	b.n	8025b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025d08:	462e      	mov	r6, r5
 8025d0a:	e707      	b.n	8025b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025d0c:	2700      	movs	r7, #0
 8025d0e:	e71a      	b.n	8025b46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8025d10:	2100      	movs	r1, #0
 8025d12:	460f      	mov	r7, r1
 8025d14:	e723      	b.n	8025b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025d16:	4621      	mov	r1, r4
 8025d18:	4627      	mov	r7, r4
 8025d1a:	e720      	b.n	8025b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025d1c:	2100      	movs	r1, #0
 8025d1e:	e71e      	b.n	8025b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025d20:	4629      	mov	r1, r5
 8025d22:	e71c      	b.n	8025b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08025d24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d28:	b09b      	sub	sp, #108	; 0x6c
 8025d2a:	9218      	str	r2, [sp, #96]	; 0x60
 8025d2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025d2e:	9019      	str	r0, [sp, #100]	; 0x64
 8025d30:	9116      	str	r1, [sp, #88]	; 0x58
 8025d32:	6850      	ldr	r0, [r2, #4]
 8025d34:	9307      	str	r3, [sp, #28]
 8025d36:	6812      	ldr	r2, [r2, #0]
 8025d38:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8025d3a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025d3e:	fb00 1303 	mla	r3, r0, r3, r1
 8025d42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d46:	930a      	str	r3, [sp, #40]	; 0x28
 8025d48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d4a:	681b      	ldr	r3, [r3, #0]
 8025d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8025d4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d50:	685e      	ldr	r6, [r3, #4]
 8025d52:	3604      	adds	r6, #4
 8025d54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025d56:	2b00      	cmp	r3, #0
 8025d58:	dc03      	bgt.n	8025d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025d5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	f340 8373 	ble.w	8026448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025d62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d6c:	1e48      	subs	r0, r1, #1
 8025d6e:	1e57      	subs	r7, r2, #1
 8025d70:	9b07      	ldr	r3, [sp, #28]
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	f340 818f 	ble.w	8026096 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025d78:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025d7a:	142b      	asrs	r3, r5, #16
 8025d7c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025d80:	d406      	bmi.n	8025d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d82:	4584      	cmp	ip, r0
 8025d84:	da04      	bge.n	8025d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	db02      	blt.n	8025d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d8a:	42bb      	cmp	r3, r7
 8025d8c:	f2c0 8184 	blt.w	8026098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025d90:	f11c 0c01 	adds.w	ip, ip, #1
 8025d94:	f100 8172 	bmi.w	802607c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d98:	4561      	cmp	r1, ip
 8025d9a:	f2c0 816f 	blt.w	802607c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d9e:	3301      	adds	r3, #1
 8025da0:	f100 816c 	bmi.w	802607c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025da4:	429a      	cmp	r2, r3
 8025da6:	f2c0 8169 	blt.w	802607c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025daa:	9b07      	ldr	r3, [sp, #28]
 8025dac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025dae:	9317      	str	r3, [sp, #92]	; 0x5c
 8025db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	f340 818e 	ble.w	80260d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8025db8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025dba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025dbe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025dc2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025dc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025dc8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025dcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025dce:	141b      	asrs	r3, r3, #16
 8025dd0:	f100 81d1 	bmi.w	8026176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025dd4:	f101 38ff 	add.w	r8, r1, #4294967295
 8025dd8:	4543      	cmp	r3, r8
 8025dda:	f280 81cc 	bge.w	8026176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025dde:	f1bc 0f00 	cmp.w	ip, #0
 8025de2:	f2c0 81c8 	blt.w	8026176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025de6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025dea:	45c4      	cmp	ip, r8
 8025dec:	f280 81c3 	bge.w	8026176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025df0:	b209      	sxth	r1, r1
 8025df2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025df4:	fb0c 3301 	mla	r3, ip, r1, r3
 8025df8:	eb04 0803 	add.w	r8, r4, r3
 8025dfc:	5ce3      	ldrb	r3, [r4, r3]
 8025dfe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025e02:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025e06:	2a00      	cmp	r2, #0
 8025e08:	f000 81aa 	beq.w	8026160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025e0c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025e10:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025e14:	940b      	str	r4, [sp, #44]	; 0x2c
 8025e16:	0e24      	lsrs	r4, r4, #24
 8025e18:	9412      	str	r4, [sp, #72]	; 0x48
 8025e1a:	b178      	cbz	r0, 8025e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8025e1c:	eb08 0c01 	add.w	ip, r8, r1
 8025e20:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025e24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e28:	9108      	str	r1, [sp, #32]
 8025e2a:	0e09      	lsrs	r1, r1, #24
 8025e2c:	9110      	str	r1, [sp, #64]	; 0x40
 8025e2e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025e32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e36:	910c      	str	r1, [sp, #48]	; 0x30
 8025e38:	0e09      	lsrs	r1, r1, #24
 8025e3a:	9113      	str	r1, [sp, #76]	; 0x4c
 8025e3c:	b292      	uxth	r2, r2
 8025e3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025e40:	b280      	uxth	r0, r0
 8025e42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025e44:	fb02 f900 	mul.w	r9, r2, r0
 8025e48:	0112      	lsls	r2, r2, #4
 8025e4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025e4e:	eba2 0809 	sub.w	r8, r2, r9
 8025e52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025e56:	b280      	uxth	r0, r0
 8025e58:	fa1f f888 	uxth.w	r8, r8
 8025e5c:	1a12      	subs	r2, r2, r0
 8025e5e:	fb08 f101 	mul.w	r1, r8, r1
 8025e62:	b292      	uxth	r2, r2
 8025e64:	fb02 110e 	mla	r1, r2, lr, r1
 8025e68:	fb00 1104 	mla	r1, r0, r4, r1
 8025e6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e6e:	fb09 1104 	mla	r1, r9, r4, r1
 8025e72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025e76:	2900      	cmp	r1, #0
 8025e78:	f000 80f5 	beq.w	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025e7c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e80:	d01b      	beq.n	8025eba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025e82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e8a:	fb0e fa0a 	mul.w	sl, lr, sl
 8025e8e:	fb0e fe03 	mul.w	lr, lr, r3
 8025e92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e9a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025e9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ea2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025ea6:	4453      	add	r3, sl
 8025ea8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025eac:	0a1b      	lsrs	r3, r3, #8
 8025eae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025eb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025eb6:	ea43 030c 	orr.w	r3, r3, ip
 8025eba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025ebc:	2cff      	cmp	r4, #255	; 0xff
 8025ebe:	d021      	beq.n	8025f04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8025ec0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ec2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025ec6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025ec8:	fb04 fb0b 	mul.w	fp, r4, fp
 8025ecc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ece:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ed2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025ed4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ed8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025edc:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ee4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ee8:	44de      	add	lr, fp
 8025eea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025eee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ef2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025efa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025efe:	ea4e 040a 	orr.w	r4, lr, sl
 8025f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8025f04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f06:	2cff      	cmp	r4, #255	; 0xff
 8025f08:	d021      	beq.n	8025f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025f0a:	9c08      	ldr	r4, [sp, #32]
 8025f0c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025f10:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f12:	fb04 fb0b 	mul.w	fp, r4, fp
 8025f16:	9c08      	ldr	r4, [sp, #32]
 8025f18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f1e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025f22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025f26:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025f32:	44de      	add	lr, fp
 8025f34:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f48:	ea4e 040a 	orr.w	r4, lr, sl
 8025f4c:	9408      	str	r4, [sp, #32]
 8025f4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025f50:	2cff      	cmp	r4, #255	; 0xff
 8025f52:	d021      	beq.n	8025f98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8025f54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025f56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025f5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025f5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025f60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025f62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025f68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025f6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025f70:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025f7c:	44de      	add	lr, fp
 8025f7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f92:	ea4e 040a 	orr.w	r4, lr, sl
 8025f96:	940c      	str	r4, [sp, #48]	; 0x30
 8025f98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025f9a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025f9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025fa2:	43c9      	mvns	r1, r1
 8025fa4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025fa8:	9c08      	ldr	r4, [sp, #32]
 8025faa:	fb08 fc0c 	mul.w	ip, r8, ip
 8025fae:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025fb2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025fb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025fb8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025fbc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025fc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025fc2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025fc6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025fca:	fb08 f80e 	mul.w	r8, r8, lr
 8025fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd2:	fa5f fe81 	uxtb.w	lr, r1
 8025fd6:	fb02 8303 	mla	r3, r2, r3, r8
 8025fda:	9a08      	ldr	r2, [sp, #32]
 8025fdc:	f8b7 8000 	ldrh.w	r8, [r7]
 8025fe0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025fe4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025fea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025fee:	fb00 330a 	mla	r3, r0, sl, r3
 8025ff2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8025ff6:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025ffa:	fb09 3900 	mla	r9, r9, r0, r3
 8025ffe:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026002:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026006:	b2c9      	uxtb	r1, r1
 8026008:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802600c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026010:	fb02 f20e 	mul.w	r2, r2, lr
 8026014:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026018:	fb00 f00e 	mul.w	r0, r0, lr
 802601c:	1c53      	adds	r3, r2, #1
 802601e:	fb01 f10e 	mul.w	r1, r1, lr
 8026022:	ea4c 0c09 	orr.w	ip, ip, r9
 8026026:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802602a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802602e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026032:	4a60      	ldr	r2, [pc, #384]	; (80261b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8026034:	b2db      	uxtb	r3, r3
 8026036:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802603a:	1c43      	adds	r3, r0, #1
 802603c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026040:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026044:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026048:	00db      	lsls	r3, r3, #3
 802604a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802604e:	4313      	orrs	r3, r2
 8026050:	1c4a      	adds	r2, r1, #1
 8026052:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026056:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802605a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802605e:	ea4c 0c03 	orr.w	ip, ip, r3
 8026062:	f8a7 c000 	strh.w	ip, [r7]
 8026066:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026068:	3702      	adds	r7, #2
 802606a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802606c:	441a      	add	r2, r3
 802606e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026070:	441d      	add	r5, r3
 8026072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026074:	9225      	str	r2, [sp, #148]	; 0x94
 8026076:	3b01      	subs	r3, #1
 8026078:	9317      	str	r3, [sp, #92]	; 0x5c
 802607a:	e699      	b.n	8025db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802607c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802607e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026080:	441c      	add	r4, r3
 8026082:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026084:	441d      	add	r5, r3
 8026086:	9b07      	ldr	r3, [sp, #28]
 8026088:	9425      	str	r4, [sp, #148]	; 0x94
 802608a:	3b01      	subs	r3, #1
 802608c:	9307      	str	r3, [sp, #28]
 802608e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026090:	3302      	adds	r3, #2
 8026092:	930a      	str	r3, [sp, #40]	; 0x28
 8026094:	e66c      	b.n	8025d70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026096:	d024      	beq.n	80260e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026098:	9b07      	ldr	r3, [sp, #28]
 802609a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802609c:	3b01      	subs	r3, #1
 802609e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80260a0:	fb00 4003 	mla	r0, r0, r3, r4
 80260a4:	1400      	asrs	r0, r0, #16
 80260a6:	f53f ae80 	bmi.w	8025daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80260aa:	3901      	subs	r1, #1
 80260ac:	4288      	cmp	r0, r1
 80260ae:	f6bf ae7c 	bge.w	8025daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80260b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80260b4:	fb01 5303 	mla	r3, r1, r3, r5
 80260b8:	141b      	asrs	r3, r3, #16
 80260ba:	f53f ae76 	bmi.w	8025daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80260be:	3a01      	subs	r2, #1
 80260c0:	4293      	cmp	r3, r2
 80260c2:	f6bf ae72 	bge.w	8025daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80260c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80260ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80260ce:	f1bb 0f00 	cmp.w	fp, #0
 80260d2:	dc71      	bgt.n	80261b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80260d4:	9b07      	ldr	r3, [sp, #28]
 80260d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80260da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80260dc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80260e0:	930a      	str	r3, [sp, #40]	; 0x28
 80260e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80260e4:	2b00      	cmp	r3, #0
 80260e6:	f340 81af 	ble.w	8026448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80260ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80260ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80260f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80260f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80260f8:	eef0 6a62 	vmov.f32	s13, s5
 80260fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026100:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026104:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026108:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802610c:	eef0 6a43 	vmov.f32	s13, s6
 8026110:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026114:	ee16 5a90 	vmov	r5, s13
 8026118:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802611c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026120:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026124:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026128:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802612c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026130:	ee12 2a90 	vmov	r2, s5
 8026134:	eef0 2a47 	vmov.f32	s5, s14
 8026138:	fb92 f3f3 	sdiv	r3, r2, r3
 802613c:	ee13 2a10 	vmov	r2, s6
 8026140:	9327      	str	r3, [sp, #156]	; 0x9c
 8026142:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026144:	eeb0 3a67 	vmov.f32	s6, s15
 8026148:	fb92 f3f3 	sdiv	r3, r2, r3
 802614c:	9328      	str	r3, [sp, #160]	; 0xa0
 802614e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026152:	3b01      	subs	r3, #1
 8026154:	9316      	str	r3, [sp, #88]	; 0x58
 8026156:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026158:	bf08      	it	eq
 802615a:	4613      	moveq	r3, r2
 802615c:	9307      	str	r3, [sp, #28]
 802615e:	e5f9      	b.n	8025d54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026160:	2800      	cmp	r0, #0
 8026162:	f43f ae6b 	beq.w	8025e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026166:	f818 1001 	ldrb.w	r1, [r8, r1]
 802616a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802616e:	9108      	str	r1, [sp, #32]
 8026170:	0e09      	lsrs	r1, r1, #24
 8026172:	9110      	str	r1, [sp, #64]	; 0x40
 8026174:	e662      	b.n	8025e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026176:	f113 0801 	adds.w	r8, r3, #1
 802617a:	f53f af74 	bmi.w	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802617e:	4541      	cmp	r1, r8
 8026180:	f6ff af71 	blt.w	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026184:	f11c 0801 	adds.w	r8, ip, #1
 8026188:	f53f af6d 	bmi.w	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802618c:	45c6      	cmp	lr, r8
 802618e:	f6ff af6a 	blt.w	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026192:	b209      	sxth	r1, r1
 8026194:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026198:	fa0f f38e 	sxth.w	r3, lr
 802619c:	9100      	str	r1, [sp, #0]
 802619e:	4639      	mov	r1, r7
 80261a0:	9301      	str	r3, [sp, #4]
 80261a2:	4633      	mov	r3, r6
 80261a4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80261a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80261aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80261ac:	f7ff fc7b 	bl	8025aa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80261b0:	e759      	b.n	8026066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80261b2:	bf00      	nop
 80261b4:	fffff800 	.word	0xfffff800
 80261b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80261ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80261be:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80261c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80261c6:	1427      	asrs	r7, r4, #16
 80261c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80261ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80261ce:	142b      	asrs	r3, r5, #16
 80261d0:	fb01 7303 	mla	r3, r1, r3, r7
 80261d4:	18e7      	adds	r7, r4, r3
 80261d6:	5ce3      	ldrb	r3, [r4, r3]
 80261d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80261dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80261e0:	2a00      	cmp	r2, #0
 80261e2:	f000 8127 	beq.w	8026434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80261e6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80261ea:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80261ee:	940d      	str	r4, [sp, #52]	; 0x34
 80261f0:	0e24      	lsrs	r4, r4, #24
 80261f2:	9414      	str	r4, [sp, #80]	; 0x50
 80261f4:	b170      	cbz	r0, 8026214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80261f6:	eb07 0e01 	add.w	lr, r7, r1
 80261fa:	5c79      	ldrb	r1, [r7, r1]
 80261fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026200:	9109      	str	r1, [sp, #36]	; 0x24
 8026202:	0e09      	lsrs	r1, r1, #24
 8026204:	9111      	str	r1, [sp, #68]	; 0x44
 8026206:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802620a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802620e:	910e      	str	r1, [sp, #56]	; 0x38
 8026210:	0e09      	lsrs	r1, r1, #24
 8026212:	9115      	str	r1, [sp, #84]	; 0x54
 8026214:	b292      	uxth	r2, r2
 8026216:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026218:	b280      	uxth	r0, r0
 802621a:	fb02 f800 	mul.w	r8, r2, r0
 802621e:	0112      	lsls	r2, r2, #4
 8026220:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026224:	eba2 0e08 	sub.w	lr, r2, r8
 8026228:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802622c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802622e:	b280      	uxth	r0, r0
 8026230:	fa1f fe8e 	uxth.w	lr, lr
 8026234:	1a09      	subs	r1, r1, r0
 8026236:	fb0e f202 	mul.w	r2, lr, r2
 802623a:	b289      	uxth	r1, r1
 802623c:	fb01 220c 	mla	r2, r1, ip, r2
 8026240:	fb00 2204 	mla	r2, r0, r4, r2
 8026244:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026246:	fb08 2204 	mla	r2, r8, r4, r2
 802624a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802624e:	2a00      	cmp	r2, #0
 8026250:	f000 80e5 	beq.w	802641e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8026254:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026258:	d019      	beq.n	802628e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802625a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802625e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026262:	fb0c fa0a 	mul.w	sl, ip, sl
 8026266:	fb0c fc03 	mul.w	ip, ip, r3
 802626a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802626e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026272:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026276:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802627a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802627e:	4453      	add	r3, sl
 8026280:	0a3f      	lsrs	r7, r7, #8
 8026282:	0a1b      	lsrs	r3, r3, #8
 8026284:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026288:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802628c:	433b      	orrs	r3, r7
 802628e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026290:	2cff      	cmp	r4, #255	; 0xff
 8026292:	d020      	beq.n	80262d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026294:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026296:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802629a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802629c:	4367      	muls	r7, r4
 802629e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80262a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80262a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80262a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80262aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80262b6:	44bc      	add	ip, r7
 80262b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80262bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80262c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262d0:	ea4c 040a 	orr.w	r4, ip, sl
 80262d4:	940d      	str	r4, [sp, #52]	; 0x34
 80262d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262d8:	2cff      	cmp	r4, #255	; 0xff
 80262da:	d020      	beq.n	802631e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80262dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80262de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80262e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262e4:	4367      	muls	r7, r4
 80262e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80262e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80262ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80262f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80262fe:	44bc      	add	ip, r7
 8026300:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026308:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802630c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026314:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026318:	ea4c 040a 	orr.w	r4, ip, sl
 802631c:	9409      	str	r4, [sp, #36]	; 0x24
 802631e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026320:	2cff      	cmp	r4, #255	; 0xff
 8026322:	d020      	beq.n	8026366 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026326:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802632a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802632c:	4367      	muls	r7, r4
 802632e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026330:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026334:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026338:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802633a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802633e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026342:	fb04 fa0a 	mul.w	sl, r4, sl
 8026346:	44bc      	add	ip, r7
 8026348:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802634c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026350:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026358:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802635c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026360:	ea4c 040a 	orr.w	r4, ip, sl
 8026364:	940e      	str	r4, [sp, #56]	; 0x38
 8026366:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026368:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802636c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026370:	43d2      	mvns	r2, r2
 8026372:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026376:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026378:	b2d2      	uxtb	r2, r2
 802637a:	fb0e f707 	mul.w	r7, lr, r7
 802637e:	fb01 770c 	mla	r7, r1, ip, r7
 8026382:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026386:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026388:	fb00 770c 	mla	r7, r0, ip, r7
 802638c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026390:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026392:	fb08 770c 	mla	r7, r8, ip, r7
 8026396:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802639a:	fb0e fe0c 	mul.w	lr, lr, ip
 802639e:	0a3f      	lsrs	r7, r7, #8
 80263a0:	fb01 e303 	mla	r3, r1, r3, lr
 80263a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80263a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80263aa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80263ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80263b0:	fb00 330a 	mla	r3, r0, sl, r3
 80263b4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80263b8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80263bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80263c0:	1218      	asrs	r0, r3, #8
 80263c2:	10d9      	asrs	r1, r3, #3
 80263c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80263cc:	00db      	lsls	r3, r3, #3
 80263ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80263d2:	4350      	muls	r0, r2
 80263d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80263d8:	b2db      	uxtb	r3, r3
 80263da:	4351      	muls	r1, r2
 80263dc:	ea47 070c 	orr.w	r7, r7, ip
 80263e0:	4353      	muls	r3, r2
 80263e2:	1c42      	adds	r2, r0, #1
 80263e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80263e8:	0c3a      	lsrs	r2, r7, #16
 80263ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80263ee:	4a18      	ldr	r2, [pc, #96]	; (8026450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80263f0:	b2c0      	uxtb	r0, r0
 80263f2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80263f6:	1c4a      	adds	r2, r1, #1
 80263f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80263fc:	0a3a      	lsrs	r2, r7, #8
 80263fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026402:	00c9      	lsls	r1, r1, #3
 8026404:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026408:	4301      	orrs	r1, r0
 802640a:	1c58      	adds	r0, r3, #1
 802640c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026410:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026414:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026418:	4308      	orrs	r0, r1
 802641a:	f8a9 0000 	strh.w	r0, [r9]
 802641e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026420:	f109 0902 	add.w	r9, r9, #2
 8026424:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026426:	f10b 3bff 	add.w	fp, fp, #4294967295
 802642a:	441a      	add	r2, r3
 802642c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802642e:	9225      	str	r2, [sp, #148]	; 0x94
 8026430:	441d      	add	r5, r3
 8026432:	e64c      	b.n	80260ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026434:	2800      	cmp	r0, #0
 8026436:	f43f aeed 	beq.w	8026214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802643a:	5c79      	ldrb	r1, [r7, r1]
 802643c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026440:	9109      	str	r1, [sp, #36]	; 0x24
 8026442:	0e09      	lsrs	r1, r1, #24
 8026444:	9111      	str	r1, [sp, #68]	; 0x44
 8026446:	e6e5      	b.n	8026214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026448:	b01b      	add	sp, #108	; 0x6c
 802644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802644e:	bf00      	nop
 8026450:	fffff800 	.word	0xfffff800

08026454 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026458:	b085      	sub	sp, #20
 802645a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802645e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026462:	2800      	cmp	r0, #0
 8026464:	9103      	str	r1, [sp, #12]
 8026466:	fb00 7406 	mla	r4, r0, r6, r7
 802646a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802646e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8026472:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8026476:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802647a:	eb03 0904 	add.w	r9, r3, r4
 802647e:	9501      	str	r5, [sp, #4]
 8026480:	f2c0 8150 	blt.w	8026724 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026484:	4583      	cmp	fp, r0
 8026486:	f340 814d 	ble.w	8026724 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802648a:	2f00      	cmp	r7, #0
 802648c:	f2c0 8146 	blt.w	802671c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026490:	42be      	cmp	r6, r7
 8026492:	f340 8143 	ble.w	802671c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026496:	f813 c004 	ldrb.w	ip, [r3, r4]
 802649a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802649e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80264a2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80264a6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80264aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80264ae:	4355      	muls	r5, r2
 80264b0:	fb0c f203 	mul.w	r2, ip, r3
 80264b4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80264b8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80264bc:	441d      	add	r5, r3
 80264be:	f102 0320 	add.w	r3, r2, #32
 80264c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80264c6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80264ca:	0a1b      	lsrs	r3, r3, #8
 80264cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80264d0:	431c      	orrs	r4, r3
 80264d2:	1c7b      	adds	r3, r7, #1
 80264d4:	f100 812b 	bmi.w	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80264d8:	429e      	cmp	r6, r3
 80264da:	f340 8128 	ble.w	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80264de:	2900      	cmp	r1, #0
 80264e0:	f000 8128 	beq.w	8026734 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80264e4:	9a01      	ldr	r2, [sp, #4]
 80264e6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80264ea:	8855      	ldrh	r5, [r2, #2]
 80264ec:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80264f0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80264f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80264f8:	fb08 f802 	mul.w	r8, r8, r2
 80264fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026500:	435d      	muls	r5, r3
 8026502:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026506:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802650a:	44d0      	add	r8, sl
 802650c:	f105 0a20 	add.w	sl, r5, #32
 8026510:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026514:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026518:	0a2d      	lsrs	r5, r5, #8
 802651a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802651e:	432a      	orrs	r2, r5
 8026520:	3001      	adds	r0, #1
 8026522:	f100 810d 	bmi.w	8026740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026526:	4583      	cmp	fp, r0
 8026528:	f340 810a 	ble.w	8026740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802652c:	f1be 0f00 	cmp.w	lr, #0
 8026530:	f000 810b 	beq.w	802674a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026534:	2f00      	cmp	r7, #0
 8026536:	f2c0 8100 	blt.w	802673a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802653a:	42be      	cmp	r6, r7
 802653c:	f340 80fd 	ble.w	802673a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026540:	9801      	ldr	r0, [sp, #4]
 8026542:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026546:	f819 5006 	ldrb.w	r5, [r9, r6]
 802654a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802654e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026552:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026556:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802655a:	fb0a fa00 	mul.w	sl, sl, r0
 802655e:	fb05 f808 	mul.w	r8, r5, r8
 8026562:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026566:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802656a:	4482      	add	sl, r0
 802656c:	f108 0020 	add.w	r0, r8, #32
 8026570:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026574:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026578:	0a00      	lsrs	r0, r0, #8
 802657a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802657e:	ea4b 0b00 	orr.w	fp, fp, r0
 8026582:	3701      	adds	r7, #1
 8026584:	f100 80e6 	bmi.w	8026754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026588:	42be      	cmp	r6, r7
 802658a:	f340 80e3 	ble.w	8026754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802658e:	2900      	cmp	r1, #0
 8026590:	f000 80e3 	beq.w	802675a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026594:	3601      	adds	r6, #1
 8026596:	9801      	ldr	r0, [sp, #4]
 8026598:	f819 7006 	ldrb.w	r7, [r9, r6]
 802659c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80265a0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80265a4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80265a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265ac:	fb09 f906 	mul.w	r9, r9, r6
 80265b0:	fb07 f800 	mul.w	r8, r7, r0
 80265b4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80265b8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80265bc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80265c0:	44d1      	add	r9, sl
 80265c2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80265c6:	f108 0020 	add.w	r0, r8, #32
 80265ca:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80265ce:	0a00      	lsrs	r0, r0, #8
 80265d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265d4:	4330      	orrs	r0, r6
 80265d6:	b28e      	uxth	r6, r1
 80265d8:	fa1f f98e 	uxth.w	r9, lr
 80265dc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80265e0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80265e4:	fb06 f809 	mul.w	r8, r6, r9
 80265e8:	0136      	lsls	r6, r6, #4
 80265ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80265ee:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80265f2:	9601      	str	r6, [sp, #4]
 80265f4:	ea4a 0404 	orr.w	r4, sl, r4
 80265f8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80265fc:	fa1f f689 	uxth.w	r6, r9
 8026600:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026604:	fb11 f90e 	smulbb	r9, r1, lr
 8026608:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802660c:	9602      	str	r6, [sp, #8]
 802660e:	4626      	mov	r6, r4
 8026610:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026614:	f1ce 0410 	rsb	r4, lr, #16
 8026618:	ea4a 0202 	orr.w	r2, sl, r2
 802661c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026620:	1a64      	subs	r4, r4, r1
 8026622:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026626:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802662a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802662e:	434a      	muls	r2, r1
 8026630:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026634:	ea4a 0000 	orr.w	r0, sl, r0
 8026638:	9903      	ldr	r1, [sp, #12]
 802663a:	fb04 2406 	mla	r4, r4, r6, r2
 802663e:	9e02      	ldr	r6, [sp, #8]
 8026640:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026644:	fb09 4200 	mla	r2, r9, r0, r4
 8026648:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802664c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026650:	8808      	ldrh	r0, [r1, #0]
 8026652:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026656:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802665a:	ea44 0b0b 	orr.w	fp, r4, fp
 802665e:	9c01      	ldr	r4, [sp, #4]
 8026660:	b289      	uxth	r1, r1
 8026662:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8026666:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802666a:	1ba4      	subs	r4, r4, r6
 802666c:	9e01      	ldr	r6, [sp, #4]
 802666e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026672:	eba6 0608 	sub.w	r6, r6, r8
 8026676:	b2a4      	uxth	r4, r4
 8026678:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802667c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026680:	b2b6      	uxth	r6, r6
 8026682:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026686:	4373      	muls	r3, r6
 8026688:	ea42 0e0e 	orr.w	lr, r2, lr
 802668c:	fb0c 3304 	mla	r3, ip, r4, r3
 8026690:	9c02      	ldr	r4, [sp, #8]
 8026692:	fa1f f28e 	uxth.w	r2, lr
 8026696:	fb04 3505 	mla	r5, r4, r5, r3
 802669a:	10d4      	asrs	r4, r2, #3
 802669c:	fb08 5707 	mla	r7, r8, r7, r5
 80266a0:	1215      	asrs	r5, r2, #8
 80266a2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80266a6:	00d2      	lsls	r2, r2, #3
 80266a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80266ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80266b0:	b2d2      	uxtb	r2, r2
 80266b2:	434f      	muls	r7, r1
 80266b4:	1c7b      	adds	r3, r7, #1
 80266b6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80266ba:	1203      	asrs	r3, r0, #8
 80266bc:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80266c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80266c4:	b2ff      	uxtb	r7, r7
 80266c6:	fb13 f307 	smulbb	r3, r3, r7
 80266ca:	fb05 3501 	mla	r5, r5, r1, r3
 80266ce:	10c3      	asrs	r3, r0, #3
 80266d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80266d4:	b2ad      	uxth	r5, r5
 80266d6:	fb13 f307 	smulbb	r3, r3, r7
 80266da:	fb04 3401 	mla	r4, r4, r1, r3
 80266de:	00c3      	lsls	r3, r0, #3
 80266e0:	b2db      	uxtb	r3, r3
 80266e2:	b2a4      	uxth	r4, r4
 80266e4:	fb13 f307 	smulbb	r3, r3, r7
 80266e8:	fb02 3101 	mla	r1, r2, r1, r3
 80266ec:	1c6b      	adds	r3, r5, #1
 80266ee:	1c62      	adds	r2, r4, #1
 80266f0:	b289      	uxth	r1, r1
 80266f2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80266f6:	1c4b      	adds	r3, r1, #1
 80266f8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80266fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026700:	9a03      	ldr	r2, [sp, #12]
 8026702:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026706:	0964      	lsrs	r4, r4, #5
 8026708:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802670c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026710:	432b      	orrs	r3, r5
 8026712:	4323      	orrs	r3, r4
 8026714:	8013      	strh	r3, [r2, #0]
 8026716:	b005      	add	sp, #20
 8026718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802671c:	f04f 0c00 	mov.w	ip, #0
 8026720:	4664      	mov	r4, ip
 8026722:	e6d6      	b.n	80264d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8026724:	2300      	movs	r3, #0
 8026726:	469c      	mov	ip, r3
 8026728:	461a      	mov	r2, r3
 802672a:	461c      	mov	r4, r3
 802672c:	e6f8      	b.n	8026520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802672e:	2300      	movs	r3, #0
 8026730:	461a      	mov	r2, r3
 8026732:	e6f5      	b.n	8026520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026734:	460b      	mov	r3, r1
 8026736:	460a      	mov	r2, r1
 8026738:	e6f2      	b.n	8026520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802673a:	2500      	movs	r5, #0
 802673c:	46ab      	mov	fp, r5
 802673e:	e720      	b.n	8026582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026740:	2700      	movs	r7, #0
 8026742:	463d      	mov	r5, r7
 8026744:	4638      	mov	r0, r7
 8026746:	46bb      	mov	fp, r7
 8026748:	e745      	b.n	80265d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802674a:	4677      	mov	r7, lr
 802674c:	4675      	mov	r5, lr
 802674e:	4670      	mov	r0, lr
 8026750:	46f3      	mov	fp, lr
 8026752:	e740      	b.n	80265d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026754:	2700      	movs	r7, #0
 8026756:	4638      	mov	r0, r7
 8026758:	e73d      	b.n	80265d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802675a:	460f      	mov	r7, r1
 802675c:	4608      	mov	r0, r1
 802675e:	e73a      	b.n	80265d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026760 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026764:	b097      	sub	sp, #92	; 0x5c
 8026766:	9214      	str	r2, [sp, #80]	; 0x50
 8026768:	9308      	str	r3, [sp, #32]
 802676a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802676c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026770:	9015      	str	r0, [sp, #84]	; 0x54
 8026772:	9312      	str	r3, [sp, #72]	; 0x48
 8026774:	6850      	ldr	r0, [r2, #4]
 8026776:	9111      	str	r1, [sp, #68]	; 0x44
 8026778:	6812      	ldr	r2, [r2, #0]
 802677a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802677e:	fb00 1303 	mla	r3, r0, r3, r1
 8026782:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026786:	9309      	str	r3, [sp, #36]	; 0x24
 8026788:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802678a:	681b      	ldr	r3, [r3, #0]
 802678c:	930b      	str	r3, [sp, #44]	; 0x2c
 802678e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026790:	685b      	ldr	r3, [r3, #4]
 8026792:	930c      	str	r3, [sp, #48]	; 0x30
 8026794:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026798:	930a      	str	r3, [sp, #40]	; 0x28
 802679a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802679c:	2b00      	cmp	r3, #0
 802679e:	dc03      	bgt.n	80267a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80267a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80267a2:	2b00      	cmp	r3, #0
 80267a4:	f340 83cd 	ble.w	8026f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80267a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80267aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80267ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80267b2:	1e48      	subs	r0, r1, #1
 80267b4:	1e55      	subs	r5, r2, #1
 80267b6:	9b08      	ldr	r3, [sp, #32]
 80267b8:	2b00      	cmp	r3, #0
 80267ba:	f340 81a5 	ble.w	8026b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80267be:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80267c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80267c2:	1436      	asrs	r6, r6, #16
 80267c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80267c8:	d406      	bmi.n	80267d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80267ca:	4286      	cmp	r6, r0
 80267cc:	da04      	bge.n	80267d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80267ce:	2b00      	cmp	r3, #0
 80267d0:	db02      	blt.n	80267d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80267d2:	42ab      	cmp	r3, r5
 80267d4:	f2c0 8199 	blt.w	8026b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80267d8:	3601      	adds	r6, #1
 80267da:	f100 8186 	bmi.w	8026aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80267de:	42b1      	cmp	r1, r6
 80267e0:	f2c0 8183 	blt.w	8026aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80267e4:	3301      	adds	r3, #1
 80267e6:	f100 8180 	bmi.w	8026aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80267ea:	429a      	cmp	r2, r3
 80267ec:	f2c0 817d 	blt.w	8026aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80267f0:	9b08      	ldr	r3, [sp, #32]
 80267f2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80267f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80267f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80267fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80267fc:	2b00      	cmp	r3, #0
 80267fe:	f340 81a6 	ble.w	8026b4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026804:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026806:	1418      	asrs	r0, r3, #16
 8026808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802680a:	142d      	asrs	r5, r5, #16
 802680c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026812:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802681c:	f100 81fa 	bmi.w	8026c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026820:	f102 3eff 	add.w	lr, r2, #4294967295
 8026824:	4575      	cmp	r5, lr
 8026826:	f280 81f5 	bge.w	8026c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802682a:	2800      	cmp	r0, #0
 802682c:	f2c0 81f2 	blt.w	8026c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026830:	f103 3eff 	add.w	lr, r3, #4294967295
 8026834:	4570      	cmp	r0, lr
 8026836:	f280 81ed 	bge.w	8026c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802683a:	b212      	sxth	r2, r2
 802683c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802683e:	fa1f fe81 	uxth.w	lr, r1
 8026842:	fb00 5002 	mla	r0, r0, r2, r5
 8026846:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802684a:	eb03 0a00 	add.w	sl, r3, r0
 802684e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026852:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026856:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802685a:	b29b      	uxth	r3, r3
 802685c:	f1bc 0f00 	cmp.w	ip, #0
 8026860:	f000 81bb 	beq.w	8026bda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8026864:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026868:	eb0a 0b02 	add.w	fp, sl, r2
 802686c:	fa1f fa8c 	uxth.w	sl, ip
 8026870:	940d      	str	r4, [sp, #52]	; 0x34
 8026872:	fb0a fe0e 	mul.w	lr, sl, lr
 8026876:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802687a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802687e:	eba5 050e 	sub.w	r5, r5, lr
 8026882:	940e      	str	r4, [sp, #56]	; 0x38
 8026884:	fa1f fa8a 	uxth.w	sl, sl
 8026888:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802688a:	b2ad      	uxth	r5, r5
 802688c:	eba3 030a 	sub.w	r3, r3, sl
 8026890:	fb08 f505 	mul.w	r5, r8, r5
 8026894:	b29b      	uxth	r3, r3
 8026896:	fb09 5303 	mla	r3, r9, r3, r5
 802689a:	fb0a 3304 	mla	r3, sl, r4, r3
 802689e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80268a0:	fb0e 3304 	mla	r3, lr, r4, r3
 80268a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80268a8:	2b00      	cmp	r3, #0
 80268aa:	f000 8111 	beq.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80268ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80268b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80268b4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80268b8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80268bc:	f000 8192 	beq.w	8026be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80268c0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80268c4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80268c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80268cc:	fb0a fe0e 	mul.w	lr, sl, lr
 80268d0:	fb09 f000 	mul.w	r0, r9, r0
 80268d4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80268d8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80268dc:	f100 0b20 	add.w	fp, r0, #32
 80268e0:	44ce      	add	lr, r9
 80268e2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80268e6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80268ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80268ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80268f2:	ea4e 0909 	orr.w	r9, lr, r9
 80268f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80268fa:	8868      	ldrh	r0, [r5, #2]
 80268fc:	d019      	beq.n	8026932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80268fe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026902:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026906:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802690a:	fb0a fe0e 	mul.w	lr, sl, lr
 802690e:	fb08 f800 	mul.w	r8, r8, r0
 8026912:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026916:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802691a:	f108 0b20 	add.w	fp, r8, #32
 802691e:	4486      	add	lr, r0
 8026920:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026924:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026928:	0a00      	lsrs	r0, r0, #8
 802692a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802692e:	ea4e 0000 	orr.w	r0, lr, r0
 8026932:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026936:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802693a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802693e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026942:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802694a:	ea4e 0909 	orr.w	r9, lr, r9
 802694e:	ea4a 0000 	orr.w	r0, sl, r0
 8026952:	f1bc 0f00 	cmp.w	ip, #0
 8026956:	f000 8147 	beq.w	8026be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802695a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802695e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026960:	3a01      	subs	r2, #1
 8026962:	2cff      	cmp	r4, #255	; 0xff
 8026964:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026968:	f102 0202 	add.w	r2, r2, #2
 802696c:	eb05 0e02 	add.w	lr, r5, r2
 8026970:	5aaa      	ldrh	r2, [r5, r2]
 8026972:	d018      	beq.n	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026974:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026978:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802697c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026980:	fb04 fa02 	mul.w	sl, r4, r2
 8026984:	fb08 f805 	mul.w	r8, r8, r5
 8026988:	f10a 0520 	add.w	r5, sl, #32
 802698c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026990:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026994:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026998:	4442      	add	r2, r8
 802699a:	0a2d      	lsrs	r5, r5, #8
 802699c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80269a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80269a4:	432a      	orrs	r2, r5
 80269a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80269a8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80269ac:	2cff      	cmp	r4, #255	; 0xff
 80269ae:	d01a      	beq.n	80269e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80269b0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80269b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80269b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80269bc:	fb04 fa05 	mul.w	sl, r4, r5
 80269c0:	fb08 f80e 	mul.w	r8, r8, lr
 80269c4:	f10a 0e20 	add.w	lr, sl, #32
 80269c8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80269cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80269d0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80269d4:	4445      	add	r5, r8
 80269d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269da:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80269de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80269e2:	ea45 050e 	orr.w	r5, r5, lr
 80269e6:	fb1c fe01 	smulbb	lr, ip, r1
 80269ea:	f1cc 0810 	rsb	r8, ip, #16
 80269ee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80269f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80269f6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80269fa:	eba8 0801 	sub.w	r8, r8, r1
 80269fe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026a06:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026a0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026a0e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026a12:	ea4a 0202 	orr.w	r2, sl, r2
 8026a16:	4341      	muls	r1, r0
 8026a18:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026a1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a20:	fb09 1108 	mla	r1, r9, r8, r1
 8026a24:	ea4b 0505 	orr.w	r5, fp, r5
 8026a28:	fb0c 1102 	mla	r1, ip, r2, r1
 8026a2c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026a30:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026a34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026a38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026a40:	ea42 0e0e 	orr.w	lr, r2, lr
 8026a44:	fa1f f28e 	uxth.w	r2, lr
 8026a48:	2bff      	cmp	r3, #255	; 0xff
 8026a4a:	d103      	bne.n	8026a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026a4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026a4e:	29ff      	cmp	r1, #255	; 0xff
 8026a50:	f000 80de 	beq.w	8026c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026a56:	1215      	asrs	r5, r2, #8
 8026a58:	8838      	ldrh	r0, [r7, #0]
 8026a5a:	434b      	muls	r3, r1
 8026a5c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026a62:	f103 0c01 	add.w	ip, r3, #1
 8026a66:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026a6a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026a6e:	fa5f fc83 	uxtb.w	ip, r3
 8026a72:	1203      	asrs	r3, r0, #8
 8026a74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026a78:	fb13 f30c 	smulbb	r3, r3, ip
 8026a7c:	fb05 3501 	mla	r5, r5, r1, r3
 8026a80:	10c3      	asrs	r3, r0, #3
 8026a82:	10d1      	asrs	r1, r2, #3
 8026a84:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026a88:	00d2      	lsls	r2, r2, #3
 8026a8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026a8e:	b2ad      	uxth	r5, r5
 8026a90:	fb13 f30c 	smulbb	r3, r3, ip
 8026a94:	b2d2      	uxtb	r2, r2
 8026a96:	fb01 3104 	mla	r1, r1, r4, r3
 8026a9a:	00c3      	lsls	r3, r0, #3
 8026a9c:	b2db      	uxtb	r3, r3
 8026a9e:	b289      	uxth	r1, r1
 8026aa0:	fb13 f30c 	smulbb	r3, r3, ip
 8026aa4:	fb02 3304 	mla	r3, r2, r4, r3
 8026aa8:	b29a      	uxth	r2, r3
 8026aaa:	1c6b      	adds	r3, r5, #1
 8026aac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026ab0:	1c53      	adds	r3, r2, #1
 8026ab2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026ab6:	1c4a      	adds	r2, r1, #1
 8026ab8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026abc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026ac0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026ac4:	0949      	lsrs	r1, r1, #5
 8026ac6:	432b      	orrs	r3, r5
 8026ac8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026acc:	430b      	orrs	r3, r1
 8026ace:	803b      	strh	r3, [r7, #0]
 8026ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026ad2:	3702      	adds	r7, #2
 8026ad4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8026ad6:	4413      	add	r3, r2
 8026ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8026ada:	9321      	str	r3, [sp, #132]	; 0x84
 8026adc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ade:	441a      	add	r2, r3
 8026ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026ae2:	3b01      	subs	r3, #1
 8026ae4:	9222      	str	r2, [sp, #136]	; 0x88
 8026ae6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026ae8:	e687      	b.n	80267fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026aec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8026aee:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8026af0:	4433      	add	r3, r6
 8026af2:	9321      	str	r3, [sp, #132]	; 0x84
 8026af4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026af6:	441c      	add	r4, r3
 8026af8:	9b08      	ldr	r3, [sp, #32]
 8026afa:	3b01      	subs	r3, #1
 8026afc:	9422      	str	r4, [sp, #136]	; 0x88
 8026afe:	9308      	str	r3, [sp, #32]
 8026b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b02:	3302      	adds	r3, #2
 8026b04:	9309      	str	r3, [sp, #36]	; 0x24
 8026b06:	e656      	b.n	80267b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026b08:	d028      	beq.n	8026b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026b0a:	9b08      	ldr	r3, [sp, #32]
 8026b0c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026b0e:	3b01      	subs	r3, #1
 8026b10:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026b12:	fb00 5003 	mla	r0, r0, r3, r5
 8026b16:	1400      	asrs	r0, r0, #16
 8026b18:	f53f ae6a 	bmi.w	80267f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026b1c:	3901      	subs	r1, #1
 8026b1e:	4288      	cmp	r0, r1
 8026b20:	f6bf ae66 	bge.w	80267f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026b24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026b26:	9822      	ldr	r0, [sp, #136]	; 0x88
 8026b28:	fb01 0303 	mla	r3, r1, r3, r0
 8026b2c:	141b      	asrs	r3, r3, #16
 8026b2e:	f53f ae5f 	bmi.w	80267f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026b32:	3a01      	subs	r2, #1
 8026b34:	4293      	cmp	r3, r2
 8026b36:	f6bf ae5b 	bge.w	80267f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026b3a:	9b08      	ldr	r3, [sp, #32]
 8026b3c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026b40:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8026b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026b48:	2b00      	cmp	r3, #0
 8026b4a:	f300 8082 	bgt.w	8026c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8026b4e:	9b08      	ldr	r3, [sp, #32]
 8026b50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b56:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8026b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026b5e:	2b00      	cmp	r3, #0
 8026b60:	f340 81ef 	ble.w	8026f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8026b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026b6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026b6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026b72:	eef0 6a62 	vmov.f32	s13, s5
 8026b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026b7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026b7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b82:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8026b86:	eef0 6a43 	vmov.f32	s13, s6
 8026b8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b8e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8026b92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026b96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026b9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026b9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026ba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ba6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026baa:	ee12 2a90 	vmov	r2, s5
 8026bae:	eef0 2a47 	vmov.f32	s5, s14
 8026bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bb6:	ee13 2a10 	vmov	r2, s6
 8026bba:	9323      	str	r3, [sp, #140]	; 0x8c
 8026bbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026bbe:	eeb0 3a67 	vmov.f32	s6, s15
 8026bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bc6:	9324      	str	r3, [sp, #144]	; 0x90
 8026bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026bca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026bcc:	3b01      	subs	r3, #1
 8026bce:	9311      	str	r3, [sp, #68]	; 0x44
 8026bd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026bd2:	bf08      	it	eq
 8026bd4:	4613      	moveq	r3, r2
 8026bd6:	9308      	str	r3, [sp, #32]
 8026bd8:	e5df      	b.n	802679a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026bda:	fb08 f505 	mul.w	r5, r8, r5
 8026bde:	fb09 5303 	mla	r3, r9, r3, r5
 8026be2:	e65f      	b.n	80268a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026be4:	4681      	mov	r9, r0
 8026be6:	e686      	b.n	80268f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026be8:	f1c1 0210 	rsb	r2, r1, #16
 8026bec:	4341      	muls	r1, r0
 8026bee:	fb09 1902 	mla	r9, r9, r2, r1
 8026bf2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026bf6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026bfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026bfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c02:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026c06:	ea42 0909 	orr.w	r9, r2, r9
 8026c0a:	fa1f f289 	uxth.w	r2, r9
 8026c0e:	e71b      	b.n	8026a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8026c10:	803a      	strh	r2, [r7, #0]
 8026c12:	e75d      	b.n	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c14:	f115 0e01 	adds.w	lr, r5, #1
 8026c18:	f53f af5a 	bmi.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c1c:	4572      	cmp	r2, lr
 8026c1e:	f6ff af57 	blt.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c22:	f110 0e01 	adds.w	lr, r0, #1
 8026c26:	f53f af53 	bmi.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c2a:	4573      	cmp	r3, lr
 8026c2c:	f6ff af50 	blt.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026c32:	b21b      	sxth	r3, r3
 8026c34:	b212      	sxth	r2, r2
 8026c36:	9502      	str	r5, [sp, #8]
 8026c38:	9301      	str	r3, [sp, #4]
 8026c3a:	9200      	str	r2, [sp, #0]
 8026c3c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026c40:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026c44:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026c48:	4639      	mov	r1, r7
 8026c4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026c4c:	f7ff fc02 	bl	8026454 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026c50:	e73e      	b.n	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026c54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026c5a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026c5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026c60:	fa1f fc82 	uxth.w	ip, r2
 8026c64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026c6a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026c6e:	141f      	asrs	r7, r3, #16
 8026c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026c72:	141b      	asrs	r3, r3, #16
 8026c74:	fb01 3707 	mla	r7, r1, r7, r3
 8026c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c7a:	eb03 0a07 	add.w	sl, r3, r7
 8026c7e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026c82:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026c86:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026c8a:	b29b      	uxth	r3, r3
 8026c8c:	2d00      	cmp	r5, #0
 8026c8e:	f000 813d 	beq.w	8026f0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8026c92:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026c96:	eb0a 0b01 	add.w	fp, sl, r1
 8026c9a:	fa1f fa85 	uxth.w	sl, r5
 8026c9e:	940f      	str	r4, [sp, #60]	; 0x3c
 8026ca0:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ca4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026ca8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026cac:	eba0 000c 	sub.w	r0, r0, ip
 8026cb0:	9410      	str	r4, [sp, #64]	; 0x40
 8026cb2:	fa1f fa8a 	uxth.w	sl, sl
 8026cb6:	b280      	uxth	r0, r0
 8026cb8:	eba3 030a 	sub.w	r3, r3, sl
 8026cbc:	fb08 f000 	mul.w	r0, r8, r0
 8026cc0:	b29b      	uxth	r3, r3
 8026cc2:	fb09 0303 	mla	r3, r9, r3, r0
 8026cc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026cc8:	fb0a 3300 	mla	r3, sl, r0, r3
 8026ccc:	fb0c 3304 	mla	r3, ip, r4, r3
 8026cd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	f000 810b 	beq.w	8026ef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8026cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026cdc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026ce0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ce2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026ce6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026cea:	f000 8114 	beq.w	8026f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8026cee:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026cf2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026cf6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026cfa:	fb0a fc0c 	mul.w	ip, sl, ip
 8026cfe:	fb09 f707 	mul.w	r7, r9, r7
 8026d02:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026d06:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026d0a:	f107 0b20 	add.w	fp, r7, #32
 8026d0e:	44cc      	add	ip, r9
 8026d10:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026d14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026d18:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026d20:	ea4c 0909 	orr.w	r9, ip, r9
 8026d24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026d28:	8847      	ldrh	r7, [r0, #2]
 8026d2a:	d019      	beq.n	8026d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8026d2c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026d30:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026d34:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026d38:	fb0a fc0c 	mul.w	ip, sl, ip
 8026d3c:	fb08 f807 	mul.w	r8, r8, r7
 8026d40:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026d44:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026d48:	f108 0b20 	add.w	fp, r8, #32
 8026d4c:	44bc      	add	ip, r7
 8026d4e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026d52:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026d56:	0a3f      	lsrs	r7, r7, #8
 8026d58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026d5c:	ea4c 0707 	orr.w	r7, ip, r7
 8026d60:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026d64:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026d68:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026d6c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026d70:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026d74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026d78:	ea4c 0909 	orr.w	r9, ip, r9
 8026d7c:	ea4a 0707 	orr.w	r7, sl, r7
 8026d80:	2d00      	cmp	r5, #0
 8026d82:	f000 80ca 	beq.w	8026f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8026d86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026d8a:	3901      	subs	r1, #1
 8026d8c:	0049      	lsls	r1, r1, #1
 8026d8e:	3102      	adds	r1, #2
 8026d90:	eb00 0c01 	add.w	ip, r0, r1
 8026d94:	5a41      	ldrh	r1, [r0, r1]
 8026d96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026d98:	28ff      	cmp	r0, #255	; 0xff
 8026d9a:	d019      	beq.n	8026dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8026d9c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026da0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026da2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026da6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026daa:	fb04 fa01 	mul.w	sl, r4, r1
 8026dae:	fb08 f800 	mul.w	r8, r8, r0
 8026db2:	f10a 0020 	add.w	r0, sl, #32
 8026db6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026dba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026dbe:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026dc2:	4441      	add	r1, r8
 8026dc4:	0a00      	lsrs	r0, r0, #8
 8026dc6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026dca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026dce:	4301      	orrs	r1, r0
 8026dd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026dd2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026dd6:	2cff      	cmp	r4, #255	; 0xff
 8026dd8:	d01a      	beq.n	8026e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8026dda:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026dde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026de2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026de6:	fb04 fa00 	mul.w	sl, r4, r0
 8026dea:	fb08 f80c 	mul.w	r8, r8, ip
 8026dee:	f10a 0c20 	add.w	ip, sl, #32
 8026df2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026df6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026dfa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026dfe:	4440      	add	r0, r8
 8026e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e04:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026e08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026e0c:	ea40 000c 	orr.w	r0, r0, ip
 8026e10:	fb15 fc02 	smulbb	ip, r5, r2
 8026e14:	f1c5 0810 	rsb	r8, r5, #16
 8026e18:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026e1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026e20:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026e24:	eba8 0802 	sub.w	r8, r8, r2
 8026e28:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026e2c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026e30:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026e34:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e38:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026e3c:	ea4a 0101 	orr.w	r1, sl, r1
 8026e40:	437a      	muls	r2, r7
 8026e42:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026e46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026e4a:	fb09 2208 	mla	r2, r9, r8, r2
 8026e4e:	ea4b 0000 	orr.w	r0, fp, r0
 8026e52:	fb05 2201 	mla	r2, r5, r1, r2
 8026e56:	fb0c 2200 	mla	r2, ip, r0, r2
 8026e5a:	0d57      	lsrs	r7, r2, #21
 8026e5c:	0952      	lsrs	r2, r2, #5
 8026e5e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026e62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026e66:	433a      	orrs	r2, r7
 8026e68:	2bff      	cmp	r3, #255	; 0xff
 8026e6a:	b292      	uxth	r2, r2
 8026e6c:	d102      	bne.n	8026e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026e6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026e70:	29ff      	cmp	r1, #255	; 0xff
 8026e72:	d063      	beq.n	8026f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8026e74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026e76:	1215      	asrs	r5, r2, #8
 8026e78:	f8be 1000 	ldrh.w	r1, [lr]
 8026e7c:	4343      	muls	r3, r0
 8026e7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026e80:	10cf      	asrs	r7, r1, #3
 8026e82:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026e86:	1c58      	adds	r0, r3, #1
 8026e88:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026e8c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026e90:	1208      	asrs	r0, r1, #8
 8026e92:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026e96:	00c9      	lsls	r1, r1, #3
 8026e98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026e9c:	b2db      	uxtb	r3, r3
 8026e9e:	b2c9      	uxtb	r1, r1
 8026ea0:	fb10 f003 	smulbb	r0, r0, r3
 8026ea4:	fb11 f103 	smulbb	r1, r1, r3
 8026ea8:	fb05 0504 	mla	r5, r5, r4, r0
 8026eac:	10d0      	asrs	r0, r2, #3
 8026eae:	fb17 f703 	smulbb	r7, r7, r3
 8026eb2:	00d2      	lsls	r2, r2, #3
 8026eb4:	b2ad      	uxth	r5, r5
 8026eb6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026eba:	b2d2      	uxtb	r2, r2
 8026ebc:	fb00 7004 	mla	r0, r0, r4, r7
 8026ec0:	1c6b      	adds	r3, r5, #1
 8026ec2:	fb02 1204 	mla	r2, r2, r4, r1
 8026ec6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026eca:	b292      	uxth	r2, r2
 8026ecc:	b280      	uxth	r0, r0
 8026ece:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026ed2:	1c57      	adds	r7, r2, #1
 8026ed4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026ed8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026edc:	433d      	orrs	r5, r7
 8026ede:	1c47      	adds	r7, r0, #1
 8026ee0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026ee4:	097f      	lsrs	r7, r7, #5
 8026ee6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026eea:	433d      	orrs	r5, r7
 8026eec:	f8ae 5000 	strh.w	r5, [lr]
 8026ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026ef2:	f10e 0e02 	add.w	lr, lr, #2
 8026ef6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8026ef8:	4413      	add	r3, r2
 8026efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8026efc:	9321      	str	r3, [sp, #132]	; 0x84
 8026efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026f00:	441a      	add	r2, r3
 8026f02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026f04:	3b01      	subs	r3, #1
 8026f06:	9222      	str	r2, [sp, #136]	; 0x88
 8026f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8026f0a:	e61c      	b.n	8026b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026f0c:	fb08 f000 	mul.w	r0, r8, r0
 8026f10:	fb09 0303 	mla	r3, r9, r3, r0
 8026f14:	e6dc      	b.n	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8026f16:	46b9      	mov	r9, r7
 8026f18:	e704      	b.n	8026d24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8026f1a:	f1c2 0110 	rsb	r1, r2, #16
 8026f1e:	437a      	muls	r2, r7
 8026f20:	fb09 2901 	mla	r9, r9, r1, r2
 8026f24:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026f28:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026f2c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026f30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f38:	4302      	orrs	r2, r0
 8026f3a:	e795      	b.n	8026e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026f3c:	f8ae 2000 	strh.w	r2, [lr]
 8026f40:	e7d6      	b.n	8026ef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8026f42:	b017      	add	sp, #92	; 0x5c
 8026f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f4c:	b085      	sub	sp, #20
 8026f4e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8026f52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026f56:	2800      	cmp	r0, #0
 8026f58:	9103      	str	r1, [sp, #12]
 8026f5a:	fb00 7406 	mla	r4, r0, r6, r7
 8026f5e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8026f62:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8026f66:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8026f6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8026f6e:	eb02 0904 	add.w	r9, r2, r4
 8026f72:	9501      	str	r5, [sp, #4]
 8026f74:	f2c0 8141 	blt.w	80271fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8026f78:	4583      	cmp	fp, r0
 8026f7a:	f340 813e 	ble.w	80271fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8026f7e:	2f00      	cmp	r7, #0
 8026f80:	f2c0 8137 	blt.w	80271f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8026f84:	42be      	cmp	r6, r7
 8026f86:	f340 8134 	ble.w	80271f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8026f8a:	f812 c004 	ldrb.w	ip, [r2, r4]
 8026f8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8026f92:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8026f96:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026f9a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8026f9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026fa2:	4355      	muls	r5, r2
 8026fa4:	fb0c f203 	mul.w	r2, ip, r3
 8026fa8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026fac:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8026fb0:	441d      	add	r5, r3
 8026fb2:	f102 0320 	add.w	r3, r2, #32
 8026fb6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026fba:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026fbe:	0a1b      	lsrs	r3, r3, #8
 8026fc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026fc4:	431c      	orrs	r4, r3
 8026fc6:	1c7b      	adds	r3, r7, #1
 8026fc8:	f100 811c 	bmi.w	8027204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8026fcc:	429e      	cmp	r6, r3
 8026fce:	f340 8119 	ble.w	8027204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8026fd2:	2900      	cmp	r1, #0
 8026fd4:	f000 8119 	beq.w	802720a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8026fd8:	9a01      	ldr	r2, [sp, #4]
 8026fda:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026fde:	8855      	ldrh	r5, [r2, #2]
 8026fe0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026fe4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026fe8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026fec:	fb08 f802 	mul.w	r8, r8, r2
 8026ff0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026ff4:	435d      	muls	r5, r3
 8026ff6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026ffa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ffe:	44d0      	add	r8, sl
 8027000:	f105 0a20 	add.w	sl, r5, #32
 8027004:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027008:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802700c:	0a2d      	lsrs	r5, r5, #8
 802700e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027012:	432a      	orrs	r2, r5
 8027014:	3001      	adds	r0, #1
 8027016:	f100 80fe 	bmi.w	8027216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802701a:	4583      	cmp	fp, r0
 802701c:	f340 80fb 	ble.w	8027216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027020:	f1be 0f00 	cmp.w	lr, #0
 8027024:	f000 80fc 	beq.w	8027220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8027028:	2f00      	cmp	r7, #0
 802702a:	f2c0 80f1 	blt.w	8027210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802702e:	42be      	cmp	r6, r7
 8027030:	f340 80ee 	ble.w	8027210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027034:	9801      	ldr	r0, [sp, #4]
 8027036:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802703a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802703e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027042:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027046:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802704a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802704e:	fb0a fa00 	mul.w	sl, sl, r0
 8027052:	fb05 f808 	mul.w	r8, r5, r8
 8027056:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802705a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802705e:	4482      	add	sl, r0
 8027060:	f108 0020 	add.w	r0, r8, #32
 8027064:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027068:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802706c:	0a00      	lsrs	r0, r0, #8
 802706e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027072:	ea4b 0b00 	orr.w	fp, fp, r0
 8027076:	3701      	adds	r7, #1
 8027078:	f100 80d7 	bmi.w	802722a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802707c:	42be      	cmp	r6, r7
 802707e:	f340 80d4 	ble.w	802722a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027082:	2900      	cmp	r1, #0
 8027084:	f000 80d4 	beq.w	8027230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027088:	3601      	adds	r6, #1
 802708a:	9801      	ldr	r0, [sp, #4]
 802708c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027090:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027094:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027098:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802709c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80270a0:	fb09 f906 	mul.w	r9, r9, r6
 80270a4:	fb07 f800 	mul.w	r8, r7, r0
 80270a8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80270ac:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80270b0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80270b4:	44d1      	add	r9, sl
 80270b6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80270ba:	f108 0020 	add.w	r0, r8, #32
 80270be:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80270c2:	0a00      	lsrs	r0, r0, #8
 80270c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80270c8:	4330      	orrs	r0, r6
 80270ca:	b28e      	uxth	r6, r1
 80270cc:	fa1f f98e 	uxth.w	r9, lr
 80270d0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80270d4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80270d8:	fb06 f809 	mul.w	r8, r6, r9
 80270dc:	0136      	lsls	r6, r6, #4
 80270de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80270e2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80270e6:	9601      	str	r6, [sp, #4]
 80270e8:	ea4a 0404 	orr.w	r4, sl, r4
 80270ec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80270f0:	fa1f f689 	uxth.w	r6, r9
 80270f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80270f8:	fb11 f90e 	smulbb	r9, r1, lr
 80270fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027100:	9602      	str	r6, [sp, #8]
 8027102:	4626      	mov	r6, r4
 8027104:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027108:	f1ce 0410 	rsb	r4, lr, #16
 802710c:	ea4a 0202 	orr.w	r2, sl, r2
 8027110:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027114:	1a64      	subs	r4, r4, r1
 8027116:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802711a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802711e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027122:	434a      	muls	r2, r1
 8027124:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027128:	ea4a 0000 	orr.w	r0, sl, r0
 802712c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027130:	fb04 2406 	mla	r4, r4, r6, r2
 8027134:	9903      	ldr	r1, [sp, #12]
 8027136:	fb09 4200 	mla	r2, r9, r0, r4
 802713a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802713e:	9801      	ldr	r0, [sp, #4]
 8027140:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027144:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027148:	8809      	ldrh	r1, [r1, #0]
 802714a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802714e:	ea44 0b0b 	orr.w	fp, r4, fp
 8027152:	9c02      	ldr	r4, [sp, #8]
 8027154:	1b00      	subs	r0, r0, r4
 8027156:	9c01      	ldr	r4, [sp, #4]
 8027158:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802715c:	eba4 0608 	sub.w	r6, r4, r8
 8027160:	b280      	uxth	r0, r0
 8027162:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027166:	b2b6      	uxth	r6, r6
 8027168:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802716c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027170:	4373      	muls	r3, r6
 8027172:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027176:	fb0c 3300 	mla	r3, ip, r0, r3
 802717a:	9802      	ldr	r0, [sp, #8]
 802717c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027180:	fb00 3505 	mla	r5, r0, r5, r3
 8027184:	120b      	asrs	r3, r1, #8
 8027186:	10c8      	asrs	r0, r1, #3
 8027188:	fb08 5707 	mla	r7, r8, r7, r5
 802718c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027190:	00c9      	lsls	r1, r1, #3
 8027192:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027196:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802719a:	fa1f f28e 	uxth.w	r2, lr
 802719e:	b2c9      	uxtb	r1, r1
 80271a0:	b2ff      	uxtb	r7, r7
 80271a2:	437b      	muls	r3, r7
 80271a4:	4378      	muls	r0, r7
 80271a6:	434f      	muls	r7, r1
 80271a8:	1c59      	adds	r1, r3, #1
 80271aa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80271ae:	1213      	asrs	r3, r2, #8
 80271b0:	f023 0307 	bic.w	r3, r3, #7
 80271b4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80271b8:	1c41      	adds	r1, r0, #1
 80271ba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80271be:	10d1      	asrs	r1, r2, #3
 80271c0:	021b      	lsls	r3, r3, #8
 80271c2:	f021 0103 	bic.w	r1, r1, #3
 80271c6:	00d2      	lsls	r2, r2, #3
 80271c8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80271cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80271d0:	00c9      	lsls	r1, r1, #3
 80271d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80271d6:	430b      	orrs	r3, r1
 80271d8:	1c79      	adds	r1, r7, #1
 80271da:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80271de:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80271e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80271e6:	431a      	orrs	r2, r3
 80271e8:	9b03      	ldr	r3, [sp, #12]
 80271ea:	801a      	strh	r2, [r3, #0]
 80271ec:	b005      	add	sp, #20
 80271ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271f2:	f04f 0c00 	mov.w	ip, #0
 80271f6:	4664      	mov	r4, ip
 80271f8:	e6e5      	b.n	8026fc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80271fa:	2300      	movs	r3, #0
 80271fc:	469c      	mov	ip, r3
 80271fe:	461a      	mov	r2, r3
 8027200:	461c      	mov	r4, r3
 8027202:	e707      	b.n	8027014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027204:	2300      	movs	r3, #0
 8027206:	461a      	mov	r2, r3
 8027208:	e704      	b.n	8027014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802720a:	460b      	mov	r3, r1
 802720c:	460a      	mov	r2, r1
 802720e:	e701      	b.n	8027014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027210:	2500      	movs	r5, #0
 8027212:	46ab      	mov	fp, r5
 8027214:	e72f      	b.n	8027076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027216:	2700      	movs	r7, #0
 8027218:	463d      	mov	r5, r7
 802721a:	4638      	mov	r0, r7
 802721c:	46bb      	mov	fp, r7
 802721e:	e754      	b.n	80270ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027220:	4677      	mov	r7, lr
 8027222:	4675      	mov	r5, lr
 8027224:	4670      	mov	r0, lr
 8027226:	46f3      	mov	fp, lr
 8027228:	e74f      	b.n	80270ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802722a:	2700      	movs	r7, #0
 802722c:	4638      	mov	r0, r7
 802722e:	e74c      	b.n	80270ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027230:	460f      	mov	r7, r1
 8027232:	4608      	mov	r0, r1
 8027234:	e749      	b.n	80270ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802723c:	b093      	sub	sp, #76	; 0x4c
 802723e:	9210      	str	r2, [sp, #64]	; 0x40
 8027240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027242:	9011      	str	r0, [sp, #68]	; 0x44
 8027244:	910e      	str	r1, [sp, #56]	; 0x38
 8027246:	6850      	ldr	r0, [r2, #4]
 8027248:	9306      	str	r3, [sp, #24]
 802724a:	6812      	ldr	r2, [r2, #0]
 802724c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027250:	fb00 1303 	mla	r3, r0, r3, r1
 8027254:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027258:	9307      	str	r3, [sp, #28]
 802725a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802725c:	681b      	ldr	r3, [r3, #0]
 802725e:	9308      	str	r3, [sp, #32]
 8027260:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027262:	685b      	ldr	r3, [r3, #4]
 8027264:	9309      	str	r3, [sp, #36]	; 0x24
 8027266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027268:	2b00      	cmp	r3, #0
 802726a:	dc03      	bgt.n	8027274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802726c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802726e:	2b00      	cmp	r3, #0
 8027270:	f340 83b6 	ble.w	80279e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027274:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027276:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802727a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802727e:	1e48      	subs	r0, r1, #1
 8027280:	1e55      	subs	r5, r2, #1
 8027282:	9b06      	ldr	r3, [sp, #24]
 8027284:	2b00      	cmp	r3, #0
 8027286:	f340 8165 	ble.w	8027554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802728a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802728c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802728e:	1436      	asrs	r6, r6, #16
 8027290:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027294:	d406      	bmi.n	80272a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027296:	4286      	cmp	r6, r0
 8027298:	da04      	bge.n	80272a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802729a:	2b00      	cmp	r3, #0
 802729c:	db02      	blt.n	80272a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802729e:	42ab      	cmp	r3, r5
 80272a0:	f2c0 8159 	blt.w	8027556 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80272a4:	3601      	adds	r6, #1
 80272a6:	f100 8146 	bmi.w	8027536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80272aa:	42b1      	cmp	r1, r6
 80272ac:	f2c0 8143 	blt.w	8027536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80272b0:	3301      	adds	r3, #1
 80272b2:	f100 8140 	bmi.w	8027536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80272b6:	429a      	cmp	r2, r3
 80272b8:	f2c0 813d 	blt.w	8027536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80272bc:	9b06      	ldr	r3, [sp, #24]
 80272be:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80272c2:	9f07      	ldr	r7, [sp, #28]
 80272c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80272c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	f340 8166 	ble.w	802759a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80272ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80272d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80272d2:	1418      	asrs	r0, r3, #16
 80272d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80272d6:	142d      	asrs	r5, r5, #16
 80272d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80272dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80272de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80272e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80272e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80272e8:	f100 81f0 	bmi.w	80276cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80272ec:	f102 3eff 	add.w	lr, r2, #4294967295
 80272f0:	4575      	cmp	r5, lr
 80272f2:	f280 81eb 	bge.w	80276cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80272f6:	2800      	cmp	r0, #0
 80272f8:	f2c0 81e8 	blt.w	80276cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80272fc:	f103 3eff 	add.w	lr, r3, #4294967295
 8027300:	4570      	cmp	r0, lr
 8027302:	f280 81e3 	bge.w	80276cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027306:	b212      	sxth	r2, r2
 8027308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802730a:	fa1f fe81 	uxth.w	lr, r1
 802730e:	fb00 5002 	mla	r0, r0, r2, r5
 8027312:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027316:	eb03 0a00 	add.w	sl, r3, r0
 802731a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802731e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027322:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027326:	b29b      	uxth	r3, r3
 8027328:	f1bc 0f00 	cmp.w	ip, #0
 802732c:	f000 817b 	beq.w	8027626 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027330:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027334:	eb0a 0b02 	add.w	fp, sl, r2
 8027338:	fa1f fa8c 	uxth.w	sl, ip
 802733c:	940a      	str	r4, [sp, #40]	; 0x28
 802733e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027342:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027346:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802734a:	eba5 050e 	sub.w	r5, r5, lr
 802734e:	940b      	str	r4, [sp, #44]	; 0x2c
 8027350:	fa1f fa8a 	uxth.w	sl, sl
 8027354:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027356:	b2ad      	uxth	r5, r5
 8027358:	eba3 030a 	sub.w	r3, r3, sl
 802735c:	fb08 f505 	mul.w	r5, r8, r5
 8027360:	b29b      	uxth	r3, r3
 8027362:	fb09 5303 	mla	r3, r9, r3, r5
 8027366:	fb0a 3304 	mla	r3, sl, r4, r3
 802736a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802736c:	fb0e 3304 	mla	r3, lr, r4, r3
 8027370:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027374:	2b00      	cmp	r3, #0
 8027376:	f000 80d1 	beq.w	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802737a:	9c08      	ldr	r4, [sp, #32]
 802737c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027380:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027384:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027388:	f000 8152 	beq.w	8027630 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802738c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027390:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027394:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027398:	fb0a fe0e 	mul.w	lr, sl, lr
 802739c:	fb09 f000 	mul.w	r0, r9, r0
 80273a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80273a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80273a8:	f100 0b20 	add.w	fp, r0, #32
 80273ac:	44ce      	add	lr, r9
 80273ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80273b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80273b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80273ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80273be:	ea4e 0909 	orr.w	r9, lr, r9
 80273c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80273c6:	8868      	ldrh	r0, [r5, #2]
 80273c8:	d019      	beq.n	80273fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80273ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80273ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80273d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80273d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80273da:	fb08 f800 	mul.w	r8, r8, r0
 80273de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80273e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80273e6:	f108 0b20 	add.w	fp, r8, #32
 80273ea:	4486      	add	lr, r0
 80273ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80273f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80273f4:	0a00      	lsrs	r0, r0, #8
 80273f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80273fa:	ea4e 0000 	orr.w	r0, lr, r0
 80273fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027402:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027406:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802740a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802740e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027412:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027416:	ea4e 0909 	orr.w	r9, lr, r9
 802741a:	ea4a 0000 	orr.w	r0, sl, r0
 802741e:	f1bc 0f00 	cmp.w	ip, #0
 8027422:	f000 8107 	beq.w	8027634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8027426:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802742a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802742c:	3a01      	subs	r2, #1
 802742e:	2cff      	cmp	r4, #255	; 0xff
 8027430:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027434:	f102 0202 	add.w	r2, r2, #2
 8027438:	eb05 0e02 	add.w	lr, r5, r2
 802743c:	5aaa      	ldrh	r2, [r5, r2]
 802743e:	d018      	beq.n	8027472 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8027440:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027444:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027448:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802744c:	fb04 fa02 	mul.w	sl, r4, r2
 8027450:	fb08 f805 	mul.w	r8, r8, r5
 8027454:	f10a 0520 	add.w	r5, sl, #32
 8027458:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802745c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027460:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027464:	4442      	add	r2, r8
 8027466:	0a2d      	lsrs	r5, r5, #8
 8027468:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802746c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027470:	432a      	orrs	r2, r5
 8027472:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027474:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027478:	2cff      	cmp	r4, #255	; 0xff
 802747a:	d01a      	beq.n	80274b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802747c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027480:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027484:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027488:	fb04 fa05 	mul.w	sl, r4, r5
 802748c:	fb08 f80e 	mul.w	r8, r8, lr
 8027490:	f10a 0e20 	add.w	lr, sl, #32
 8027494:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027498:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802749c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80274a0:	4445      	add	r5, r8
 80274a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80274a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80274aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80274ae:	ea45 050e 	orr.w	r5, r5, lr
 80274b2:	fb1c fe01 	smulbb	lr, ip, r1
 80274b6:	f1cc 0810 	rsb	r8, ip, #16
 80274ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80274be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80274c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80274c6:	eba8 0801 	sub.w	r8, r8, r1
 80274ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80274ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80274d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80274d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80274da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80274de:	ea4a 0202 	orr.w	r2, sl, r2
 80274e2:	4341      	muls	r1, r0
 80274e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80274e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80274ec:	fb09 1108 	mla	r1, r9, r8, r1
 80274f0:	ea4b 0505 	orr.w	r5, fp, r5
 80274f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80274f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80274fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027500:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027504:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027508:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802750c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027510:	fa1f f28e 	uxth.w	r2, lr
 8027514:	2bff      	cmp	r3, #255	; 0xff
 8027516:	f040 80a1 	bne.w	802765c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802751a:	803a      	strh	r2, [r7, #0]
 802751c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802751e:	3702      	adds	r7, #2
 8027520:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027522:	4413      	add	r3, r2
 8027524:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027526:	931d      	str	r3, [sp, #116]	; 0x74
 8027528:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802752a:	441a      	add	r2, r3
 802752c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802752e:	3b01      	subs	r3, #1
 8027530:	921e      	str	r2, [sp, #120]	; 0x78
 8027532:	930f      	str	r3, [sp, #60]	; 0x3c
 8027534:	e6c7      	b.n	80272c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027538:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802753a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802753c:	4433      	add	r3, r6
 802753e:	931d      	str	r3, [sp, #116]	; 0x74
 8027540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027542:	441c      	add	r4, r3
 8027544:	9b06      	ldr	r3, [sp, #24]
 8027546:	3b01      	subs	r3, #1
 8027548:	941e      	str	r4, [sp, #120]	; 0x78
 802754a:	9306      	str	r3, [sp, #24]
 802754c:	9b07      	ldr	r3, [sp, #28]
 802754e:	3302      	adds	r3, #2
 8027550:	9307      	str	r3, [sp, #28]
 8027552:	e696      	b.n	8027282 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027554:	d028      	beq.n	80275a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027556:	9b06      	ldr	r3, [sp, #24]
 8027558:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802755a:	3b01      	subs	r3, #1
 802755c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802755e:	fb00 5003 	mla	r0, r0, r3, r5
 8027562:	1400      	asrs	r0, r0, #16
 8027564:	f53f aeaa 	bmi.w	80272bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027568:	3901      	subs	r1, #1
 802756a:	4288      	cmp	r0, r1
 802756c:	f6bf aea6 	bge.w	80272bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027570:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027572:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027574:	fb01 0303 	mla	r3, r1, r3, r0
 8027578:	141b      	asrs	r3, r3, #16
 802757a:	f53f ae9f 	bmi.w	80272bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802757e:	3a01      	subs	r2, #1
 8027580:	4293      	cmp	r3, r2
 8027582:	f6bf ae9b 	bge.w	80272bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027586:	9b06      	ldr	r3, [sp, #24]
 8027588:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802758c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027590:	930f      	str	r3, [sp, #60]	; 0x3c
 8027592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027594:	2b00      	cmp	r3, #0
 8027596:	f300 80b6 	bgt.w	8027706 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802759a:	9b06      	ldr	r3, [sp, #24]
 802759c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80275a0:	9b07      	ldr	r3, [sp, #28]
 80275a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80275a6:	9307      	str	r3, [sp, #28]
 80275a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80275aa:	2b00      	cmp	r3, #0
 80275ac:	f340 8218 	ble.w	80279e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80275b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80275b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80275b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80275ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80275be:	eef0 6a62 	vmov.f32	s13, s5
 80275c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80275c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80275ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275ce:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80275d2:	eef0 6a43 	vmov.f32	s13, s6
 80275d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275da:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80275de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80275e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80275e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80275ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80275ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80275f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80275f6:	ee12 2a90 	vmov	r2, s5
 80275fa:	eef0 2a47 	vmov.f32	s5, s14
 80275fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027602:	ee13 2a10 	vmov	r2, s6
 8027606:	931f      	str	r3, [sp, #124]	; 0x7c
 8027608:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802760a:	eeb0 3a67 	vmov.f32	s6, s15
 802760e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027612:	9320      	str	r3, [sp, #128]	; 0x80
 8027614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027618:	3b01      	subs	r3, #1
 802761a:	930e      	str	r3, [sp, #56]	; 0x38
 802761c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802761e:	bf08      	it	eq
 8027620:	4613      	moveq	r3, r2
 8027622:	9306      	str	r3, [sp, #24]
 8027624:	e61f      	b.n	8027266 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027626:	fb08 f505 	mul.w	r5, r8, r5
 802762a:	fb09 5303 	mla	r3, r9, r3, r5
 802762e:	e69f      	b.n	8027370 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027630:	4681      	mov	r9, r0
 8027632:	e6c6      	b.n	80273c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027634:	f1c1 0210 	rsb	r2, r1, #16
 8027638:	4341      	muls	r1, r0
 802763a:	fb09 1902 	mla	r9, r9, r2, r1
 802763e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027642:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027646:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802764a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802764e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027652:	ea42 0909 	orr.w	r9, r2, r9
 8027656:	fa1f f289 	uxth.w	r2, r9
 802765a:	e75b      	b.n	8027514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802765c:	f8b7 c000 	ldrh.w	ip, [r7]
 8027660:	43db      	mvns	r3, r3
 8027662:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027666:	fa5f fe83 	uxtb.w	lr, r3
 802766a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802766e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027672:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027676:	fb00 f00e 	mul.w	r0, r0, lr
 802767a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802767e:	b2db      	uxtb	r3, r3
 8027680:	1c41      	adds	r1, r0, #1
 8027682:	fb05 f50e 	mul.w	r5, r5, lr
 8027686:	fb03 f30e 	mul.w	r3, r3, lr
 802768a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802768e:	1211      	asrs	r1, r2, #8
 8027690:	f021 0107 	bic.w	r1, r1, #7
 8027694:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027698:	48d3      	ldr	r0, [pc, #844]	; (80279e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802769a:	b2c9      	uxtb	r1, r1
 802769c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80276a0:	1c69      	adds	r1, r5, #1
 80276a2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80276a6:	10d1      	asrs	r1, r2, #3
 80276a8:	00d2      	lsls	r2, r2, #3
 80276aa:	f021 0103 	bic.w	r1, r1, #3
 80276ae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80276b2:	00c9      	lsls	r1, r1, #3
 80276b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80276b8:	4301      	orrs	r1, r0
 80276ba:	1c58      	adds	r0, r3, #1
 80276bc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80276c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80276c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80276c8:	430a      	orrs	r2, r1
 80276ca:	e726      	b.n	802751a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80276cc:	f115 0e01 	adds.w	lr, r5, #1
 80276d0:	f53f af24 	bmi.w	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80276d4:	4572      	cmp	r2, lr
 80276d6:	f6ff af21 	blt.w	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80276da:	f110 0e01 	adds.w	lr, r0, #1
 80276de:	f53f af1d 	bmi.w	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80276e2:	4573      	cmp	r3, lr
 80276e4:	f6ff af1a 	blt.w	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80276e8:	b21b      	sxth	r3, r3
 80276ea:	b212      	sxth	r2, r2
 80276ec:	9301      	str	r3, [sp, #4]
 80276ee:	9200      	str	r2, [sp, #0]
 80276f0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80276f4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80276f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80276fc:	4639      	mov	r1, r7
 80276fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027700:	f7ff fc22 	bl	8026f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027704:	e70a      	b.n	802751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027708:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802770c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802770e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027712:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027714:	fa1f fc82 	uxth.w	ip, r2
 8027718:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802771c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802771e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027722:	141f      	asrs	r7, r3, #16
 8027724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027726:	141b      	asrs	r3, r3, #16
 8027728:	fb01 3707 	mla	r7, r1, r7, r3
 802772c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802772e:	eb03 0a07 	add.w	sl, r3, r7
 8027732:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027736:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802773a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802773e:	b29b      	uxth	r3, r3
 8027740:	2d00      	cmp	r5, #0
 8027742:	f000 80fe 	beq.w	8027942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027746:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802774a:	eb0a 0b01 	add.w	fp, sl, r1
 802774e:	fa1f fa85 	uxth.w	sl, r5
 8027752:	940c      	str	r4, [sp, #48]	; 0x30
 8027754:	fb0a fc0c 	mul.w	ip, sl, ip
 8027758:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802775c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027760:	eba0 000c 	sub.w	r0, r0, ip
 8027764:	940d      	str	r4, [sp, #52]	; 0x34
 8027766:	fa1f fa8a 	uxth.w	sl, sl
 802776a:	b280      	uxth	r0, r0
 802776c:	eba3 030a 	sub.w	r3, r3, sl
 8027770:	fb08 f000 	mul.w	r0, r8, r0
 8027774:	b29b      	uxth	r3, r3
 8027776:	fb09 0303 	mla	r3, r9, r3, r0
 802777a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802777c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027780:	fb0c 3304 	mla	r3, ip, r4, r3
 8027784:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027788:	2b00      	cmp	r3, #0
 802778a:	f000 80cc 	beq.w	8027926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802778e:	9808      	ldr	r0, [sp, #32]
 8027790:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027794:	9c08      	ldr	r4, [sp, #32]
 8027796:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802779a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802779e:	f000 80d5 	beq.w	802794c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80277a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80277a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80277aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80277ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80277b2:	fb09 f707 	mul.w	r7, r9, r7
 80277b6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80277ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80277be:	f107 0b20 	add.w	fp, r7, #32
 80277c2:	44cc      	add	ip, r9
 80277c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80277c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80277cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80277d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80277d4:	ea4c 0909 	orr.w	r9, ip, r9
 80277d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80277dc:	8847      	ldrh	r7, [r0, #2]
 80277de:	d019      	beq.n	8027814 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80277e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80277e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80277e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80277ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80277f0:	fb08 f807 	mul.w	r8, r8, r7
 80277f4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80277f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80277fc:	f108 0b20 	add.w	fp, r8, #32
 8027800:	44bc      	add	ip, r7
 8027802:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027806:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802780a:	0a3f      	lsrs	r7, r7, #8
 802780c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027810:	ea4c 0707 	orr.w	r7, ip, r7
 8027814:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027818:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802781c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027820:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027824:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027828:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802782c:	ea4c 0909 	orr.w	r9, ip, r9
 8027830:	ea4a 0707 	orr.w	r7, sl, r7
 8027834:	2d00      	cmp	r5, #0
 8027836:	f000 808b 	beq.w	8027950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802783a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802783e:	3901      	subs	r1, #1
 8027840:	0049      	lsls	r1, r1, #1
 8027842:	3102      	adds	r1, #2
 8027844:	eb00 0c01 	add.w	ip, r0, r1
 8027848:	5a41      	ldrh	r1, [r0, r1]
 802784a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802784c:	28ff      	cmp	r0, #255	; 0xff
 802784e:	d019      	beq.n	8027884 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8027850:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027856:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802785a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802785e:	fb04 fa01 	mul.w	sl, r4, r1
 8027862:	fb08 f800 	mul.w	r8, r8, r0
 8027866:	f10a 0020 	add.w	r0, sl, #32
 802786a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802786e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027872:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027876:	4441      	add	r1, r8
 8027878:	0a00      	lsrs	r0, r0, #8
 802787a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802787e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027882:	4301      	orrs	r1, r0
 8027884:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027886:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802788a:	2cff      	cmp	r4, #255	; 0xff
 802788c:	d01a      	beq.n	80278c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802788e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027892:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027896:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802789a:	fb04 fa00 	mul.w	sl, r4, r0
 802789e:	fb08 f80c 	mul.w	r8, r8, ip
 80278a2:	f10a 0c20 	add.w	ip, sl, #32
 80278a6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80278aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80278ae:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80278b2:	4440      	add	r0, r8
 80278b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80278b8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80278bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80278c0:	ea40 000c 	orr.w	r0, r0, ip
 80278c4:	fb15 fc02 	smulbb	ip, r5, r2
 80278c8:	f1c5 0810 	rsb	r8, r5, #16
 80278cc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80278d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80278d4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80278d8:	eba8 0802 	sub.w	r8, r8, r2
 80278dc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80278e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80278e4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80278e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80278ec:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80278f0:	ea4a 0101 	orr.w	r1, sl, r1
 80278f4:	437a      	muls	r2, r7
 80278f6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80278fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80278fe:	fb09 2208 	mla	r2, r9, r8, r2
 8027902:	ea4b 0000 	orr.w	r0, fp, r0
 8027906:	fb05 2201 	mla	r2, r5, r1, r2
 802790a:	fb0c 2200 	mla	r2, ip, r0, r2
 802790e:	0d57      	lsrs	r7, r2, #21
 8027910:	0952      	lsrs	r2, r2, #5
 8027912:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027916:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802791a:	433a      	orrs	r2, r7
 802791c:	2bff      	cmp	r3, #255	; 0xff
 802791e:	b292      	uxth	r2, r2
 8027920:	d127      	bne.n	8027972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8027922:	f8ae 2000 	strh.w	r2, [lr]
 8027926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027928:	f10e 0e02 	add.w	lr, lr, #2
 802792c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802792e:	4413      	add	r3, r2
 8027930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027932:	931d      	str	r3, [sp, #116]	; 0x74
 8027934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027936:	441a      	add	r2, r3
 8027938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802793a:	3b01      	subs	r3, #1
 802793c:	921e      	str	r2, [sp, #120]	; 0x78
 802793e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027940:	e627      	b.n	8027592 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027942:	fb08 f000 	mul.w	r0, r8, r0
 8027946:	fb09 0303 	mla	r3, r9, r3, r0
 802794a:	e71b      	b.n	8027784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802794c:	46b9      	mov	r9, r7
 802794e:	e743      	b.n	80277d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8027950:	f1c2 0110 	rsb	r1, r2, #16
 8027954:	437a      	muls	r2, r7
 8027956:	fb09 2901 	mla	r9, r9, r1, r2
 802795a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802795e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027962:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027966:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802796a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802796e:	4302      	orrs	r2, r0
 8027970:	e7d4      	b.n	802791c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8027972:	f8be 7000 	ldrh.w	r7, [lr]
 8027976:	43db      	mvns	r3, r3
 8027978:	4c1b      	ldr	r4, [pc, #108]	; (80279e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802797a:	1238      	asrs	r0, r7, #8
 802797c:	fa5f fc83 	uxtb.w	ip, r3
 8027980:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027984:	10fd      	asrs	r5, r7, #3
 8027986:	00fb      	lsls	r3, r7, #3
 8027988:	fb00 f00c 	mul.w	r0, r0, ip
 802798c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027990:	b2db      	uxtb	r3, r3
 8027992:	fb05 f10c 	mul.w	r1, r5, ip
 8027996:	1c45      	adds	r5, r0, #1
 8027998:	fb03 f30c 	mul.w	r3, r3, ip
 802799c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80279a0:	1215      	asrs	r5, r2, #8
 80279a2:	f025 0507 	bic.w	r5, r5, #7
 80279a6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80279aa:	1c4d      	adds	r5, r1, #1
 80279ac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80279b0:	10d1      	asrs	r1, r2, #3
 80279b2:	b2c0      	uxtb	r0, r0
 80279b4:	f021 0103 	bic.w	r1, r1, #3
 80279b8:	00d2      	lsls	r2, r2, #3
 80279ba:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80279be:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80279c2:	00c9      	lsls	r1, r1, #3
 80279c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80279c8:	4308      	orrs	r0, r1
 80279ca:	1c59      	adds	r1, r3, #1
 80279cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80279d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80279d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80279d8:	4318      	orrs	r0, r3
 80279da:	f8ae 0000 	strh.w	r0, [lr]
 80279de:	e7a2      	b.n	8027926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80279e0:	b013      	add	sp, #76	; 0x4c
 80279e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279e6:	bf00      	nop
 80279e8:	fffff800 	.word	0xfffff800

080279ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80279ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80279f0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80279f4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80279f8:	fb05 4c03 	mla	ip, r5, r3, r4
 80279fc:	2d00      	cmp	r5, #0
 80279fe:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8027a02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027a06:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027a0a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027a0e:	8808      	ldrh	r0, [r1, #0]
 8027a10:	f2c0 80a7 	blt.w	8027b62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027a14:	45aa      	cmp	sl, r5
 8027a16:	f340 80a4 	ble.w	8027b62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027a1a:	2c00      	cmp	r4, #0
 8027a1c:	f2c0 809f 	blt.w	8027b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027a20:	42a3      	cmp	r3, r4
 8027a22:	f340 809c 	ble.w	8027b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027a26:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027a2a:	1c62      	adds	r2, r4, #1
 8027a2c:	f100 809c 	bmi.w	8027b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027a30:	4293      	cmp	r3, r2
 8027a32:	f340 8099 	ble.w	8027b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027a36:	f1b9 0f00 	cmp.w	r9, #0
 8027a3a:	f000 8095 	beq.w	8027b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027a3e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027a42:	3501      	adds	r5, #1
 8027a44:	f100 8094 	bmi.w	8027b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027a48:	45aa      	cmp	sl, r5
 8027a4a:	f340 8091 	ble.w	8027b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027a4e:	2f00      	cmp	r7, #0
 8027a50:	f000 808e 	beq.w	8027b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027a54:	2c00      	cmp	r4, #0
 8027a56:	f2c0 8089 	blt.w	8027b6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027a5a:	42a3      	cmp	r3, r4
 8027a5c:	f340 8086 	ble.w	8027b6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027a60:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027a64:	3401      	adds	r4, #1
 8027a66:	f100 8086 	bmi.w	8027b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027a6a:	42a3      	cmp	r3, r4
 8027a6c:	f340 8083 	ble.w	8027b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027a70:	f1b9 0f00 	cmp.w	r9, #0
 8027a74:	d07f      	beq.n	8027b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027a76:	3301      	adds	r3, #1
 8027a78:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027a7c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027a80:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8027a84:	fb19 fe07 	smulbb	lr, r9, r7
 8027a88:	f1c7 0210 	rsb	r2, r7, #16
 8027a8c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027a90:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027a94:	eba2 0209 	sub.w	r2, r2, r9
 8027a98:	ea44 0808 	orr.w	r8, r4, r8
 8027a9c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027aa0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027aa4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027aa8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027aac:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027ab0:	ea44 0c0c 	orr.w	ip, r4, ip
 8027ab4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027ab8:	fb04 f40c 	mul.w	r4, r4, ip
 8027abc:	fb02 4808 	mla	r8, r2, r8, r4
 8027ac0:	041a      	lsls	r2, r3, #16
 8027ac2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027ac6:	b2b4      	uxth	r4, r6
 8027ac8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027acc:	43f6      	mvns	r6, r6
 8027ace:	4313      	orrs	r3, r2
 8027ad0:	042a      	lsls	r2, r5, #16
 8027ad2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027ad6:	b2f6      	uxtb	r6, r6
 8027ad8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027adc:	fb0e 8303 	mla	r3, lr, r3, r8
 8027ae0:	432a      	orrs	r2, r5
 8027ae2:	fb07 3202 	mla	r2, r7, r2, r3
 8027ae6:	10c7      	asrs	r7, r0, #3
 8027ae8:	0d53      	lsrs	r3, r2, #21
 8027aea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027aee:	0952      	lsrs	r2, r2, #5
 8027af0:	fb17 f706 	smulbb	r7, r7, r6
 8027af4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027af8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027afc:	431a      	orrs	r2, r3
 8027afe:	b293      	uxth	r3, r2
 8027b00:	1202      	asrs	r2, r0, #8
 8027b02:	121d      	asrs	r5, r3, #8
 8027b04:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027b08:	00c0      	lsls	r0, r0, #3
 8027b0a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027b0e:	fb12 f206 	smulbb	r2, r2, r6
 8027b12:	b2c0      	uxtb	r0, r0
 8027b14:	fb05 2504 	mla	r5, r5, r4, r2
 8027b18:	10da      	asrs	r2, r3, #3
 8027b1a:	fb10 f006 	smulbb	r0, r0, r6
 8027b1e:	00db      	lsls	r3, r3, #3
 8027b20:	b2ad      	uxth	r5, r5
 8027b22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027b26:	b2db      	uxtb	r3, r3
 8027b28:	fb02 7204 	mla	r2, r2, r4, r7
 8027b2c:	fb03 0004 	mla	r0, r3, r4, r0
 8027b30:	1c6b      	adds	r3, r5, #1
 8027b32:	b292      	uxth	r2, r2
 8027b34:	b280      	uxth	r0, r0
 8027b36:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027b3a:	1c43      	adds	r3, r0, #1
 8027b3c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027b40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027b44:	1c50      	adds	r0, r2, #1
 8027b46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027b4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027b4e:	0952      	lsrs	r2, r2, #5
 8027b50:	432b      	orrs	r3, r5
 8027b52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b56:	4313      	orrs	r3, r2
 8027b58:	800b      	strh	r3, [r1, #0]
 8027b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027b5e:	4680      	mov	r8, r0
 8027b60:	e763      	b.n	8027a2a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8027b62:	4684      	mov	ip, r0
 8027b64:	4680      	mov	r8, r0
 8027b66:	e76c      	b.n	8027a42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027b68:	4684      	mov	ip, r0
 8027b6a:	e76a      	b.n	8027a42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027b6c:	4605      	mov	r5, r0
 8027b6e:	e779      	b.n	8027a64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8027b70:	4603      	mov	r3, r0
 8027b72:	4605      	mov	r5, r0
 8027b74:	e782      	b.n	8027a7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8027b76:	4603      	mov	r3, r0
 8027b78:	e780      	b.n	8027a7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08027b7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b7e:	b093      	sub	sp, #76	; 0x4c
 8027b80:	461d      	mov	r5, r3
 8027b82:	9210      	str	r2, [sp, #64]	; 0x40
 8027b84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027b86:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8027b8a:	910a      	str	r1, [sp, #40]	; 0x28
 8027b8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8027b8e:	6859      	ldr	r1, [r3, #4]
 8027b90:	681b      	ldr	r3, [r3, #0]
 8027b92:	9011      	str	r0, [sp, #68]	; 0x44
 8027b94:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8027b98:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8027b9c:	fb01 2707 	mla	r7, r1, r7, r2
 8027ba0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027ba4:	9307      	str	r3, [sp, #28]
 8027ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ba8:	681b      	ldr	r3, [r3, #0]
 8027baa:	9309      	str	r3, [sp, #36]	; 0x24
 8027bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027bae:	43db      	mvns	r3, r3
 8027bb0:	b2db      	uxtb	r3, r3
 8027bb2:	9308      	str	r3, [sp, #32]
 8027bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	dc03      	bgt.n	8027bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027bba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027bbc:	2b00      	cmp	r3, #0
 8027bbe:	f340 8205 	ble.w	8027fcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027bc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027bc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027bc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027bcc:	1e48      	subs	r0, r1, #1
 8027bce:	f102 3cff 	add.w	ip, r2, #4294967295
 8027bd2:	2d00      	cmp	r5, #0
 8027bd4:	f340 80da 	ble.w	8027d8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027bd8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027bdc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027be0:	d406      	bmi.n	8027bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027be2:	4586      	cmp	lr, r0
 8027be4:	da04      	bge.n	8027bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027be6:	2b00      	cmp	r3, #0
 8027be8:	db02      	blt.n	8027bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027bea:	4563      	cmp	r3, ip
 8027bec:	f2c0 80cf 	blt.w	8027d8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027bf0:	f11e 0e01 	adds.w	lr, lr, #1
 8027bf4:	f100 80c1 	bmi.w	8027d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027bf8:	4571      	cmp	r1, lr
 8027bfa:	f2c0 80be 	blt.w	8027d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027bfe:	3301      	adds	r3, #1
 8027c00:	f100 80bb 	bmi.w	8027d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027c04:	429a      	cmp	r2, r3
 8027c06:	f2c0 80b8 	blt.w	8027d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027c0a:	46a9      	mov	r9, r5
 8027c0c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027c10:	f1b9 0f00 	cmp.w	r9, #0
 8027c14:	f340 80d8 	ble.w	8027dc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8027c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c1a:	1421      	asrs	r1, r4, #16
 8027c1c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027c20:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027c24:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027c28:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027c2c:	f100 8112 	bmi.w	8027e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027c30:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027c34:	4551      	cmp	r1, sl
 8027c36:	f280 810d 	bge.w	8027e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027c3a:	2800      	cmp	r0, #0
 8027c3c:	f2c0 810a 	blt.w	8027e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027c40:	f103 3aff 	add.w	sl, r3, #4294967295
 8027c44:	4550      	cmp	r0, sl
 8027c46:	f280 8105 	bge.w	8027e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027c4a:	fa0f f38e 	sxth.w	r3, lr
 8027c4e:	fb00 1103 	mla	r1, r0, r3, r1
 8027c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027c54:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027c58:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027c5c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027c60:	f1bc 0f00 	cmp.w	ip, #0
 8027c64:	d007      	beq.n	8027c76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8027c66:	005b      	lsls	r3, r3, #1
 8027c68:	eb0a 0003 	add.w	r0, sl, r3
 8027c6c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027c70:	930c      	str	r3, [sp, #48]	; 0x30
 8027c72:	8843      	ldrh	r3, [r0, #2]
 8027c74:	930d      	str	r3, [sp, #52]	; 0x34
 8027c76:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027c7a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027c7e:	fb12 f30c 	smulbb	r3, r2, ip
 8027c82:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027c86:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027c8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027c8e:	10db      	asrs	r3, r3, #3
 8027c90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027c94:	ea40 000e 	orr.w	r0, r0, lr
 8027c98:	f1cc 0e10 	rsb	lr, ip, #16
 8027c9c:	ea4a 0101 	orr.w	r1, sl, r1
 8027ca0:	9f08      	ldr	r7, [sp, #32]
 8027ca2:	ebae 0e02 	sub.w	lr, lr, r2
 8027ca6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027caa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027cae:	4351      	muls	r1, r2
 8027cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027cb2:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027cb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027cb8:	0410      	lsls	r0, r2, #16
 8027cba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027cbe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027cc2:	4310      	orrs	r0, r2
 8027cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027cc6:	0412      	lsls	r2, r2, #16
 8027cc8:	fb03 e000 	mla	r0, r3, r0, lr
 8027ccc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027cd0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027cd4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027cd8:	ea42 020e 	orr.w	r2, r2, lr
 8027cdc:	fb03 0302 	mla	r3, r3, r2, r0
 8027ce0:	f8b8 0000 	ldrh.w	r0, [r8]
 8027ce4:	0d5a      	lsrs	r2, r3, #21
 8027ce6:	095b      	lsrs	r3, r3, #5
 8027ce8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027cec:	1201      	asrs	r1, r0, #8
 8027cee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027cf2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027cf6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027cfa:	00c0      	lsls	r0, r0, #3
 8027cfc:	4313      	orrs	r3, r2
 8027cfe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027d02:	fb11 f107 	smulbb	r1, r1, r7
 8027d06:	b2c0      	uxtb	r0, r0
 8027d08:	b29b      	uxth	r3, r3
 8027d0a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027d0e:	fb10 f007 	smulbb	r0, r0, r7
 8027d12:	fb1e fe07 	smulbb	lr, lr, r7
 8027d16:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027d1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027d1e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027d22:	10d9      	asrs	r1, r3, #3
 8027d24:	00db      	lsls	r3, r3, #3
 8027d26:	fa1f fc8c 	uxth.w	ip, ip
 8027d2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027d2e:	b2db      	uxtb	r3, r3
 8027d30:	fb01 e102 	mla	r1, r1, r2, lr
 8027d34:	fb03 0302 	mla	r3, r3, r2, r0
 8027d38:	b289      	uxth	r1, r1
 8027d3a:	b29a      	uxth	r2, r3
 8027d3c:	f10c 0301 	add.w	r3, ip, #1
 8027d40:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027d44:	1c53      	adds	r3, r2, #1
 8027d46:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027d4a:	1c4a      	adds	r2, r1, #1
 8027d4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8027d50:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027d54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027d58:	0949      	lsrs	r1, r1, #5
 8027d5a:	ea43 030c 	orr.w	r3, r3, ip
 8027d5e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027d62:	430b      	orrs	r3, r1
 8027d64:	f8a8 3000 	strh.w	r3, [r8]
 8027d68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027d6a:	f108 0802 	add.w	r8, r8, #2
 8027d6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8027d72:	441c      	add	r4, r3
 8027d74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027d76:	441e      	add	r6, r3
 8027d78:	e74a      	b.n	8027c10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027d7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027d7c:	3d01      	subs	r5, #1
 8027d7e:	441c      	add	r4, r3
 8027d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027d82:	441e      	add	r6, r3
 8027d84:	9b07      	ldr	r3, [sp, #28]
 8027d86:	3302      	adds	r3, #2
 8027d88:	9307      	str	r3, [sp, #28]
 8027d8a:	e722      	b.n	8027bd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027d8c:	d022      	beq.n	8027dd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027d8e:	1e6b      	subs	r3, r5, #1
 8027d90:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027d92:	fb00 4003 	mla	r0, r0, r3, r4
 8027d96:	1400      	asrs	r0, r0, #16
 8027d98:	f53f af37 	bmi.w	8027c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027d9c:	3901      	subs	r1, #1
 8027d9e:	4288      	cmp	r0, r1
 8027da0:	f6bf af33 	bge.w	8027c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027da4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027da6:	fb01 6303 	mla	r3, r1, r3, r6
 8027daa:	141b      	asrs	r3, r3, #16
 8027dac:	f53f af2d 	bmi.w	8027c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027db0:	3a01      	subs	r2, #1
 8027db2:	4293      	cmp	r3, r2
 8027db4:	f6bf af29 	bge.w	8027c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027db8:	46a8      	mov	r8, r5
 8027dba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027dbe:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027dc2:	f1b8 0f00 	cmp.w	r8, #0
 8027dc6:	dc60      	bgt.n	8027e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8027dc8:	9b07      	ldr	r3, [sp, #28]
 8027dca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027dce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027dd2:	9307      	str	r3, [sp, #28]
 8027dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027dd6:	2b00      	cmp	r3, #0
 8027dd8:	f340 80f8 	ble.w	8027fcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027de0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027de2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027de6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027dea:	eef0 6a62 	vmov.f32	s13, s5
 8027dee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027df2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027df6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027dfa:	ee16 4a90 	vmov	r4, s13
 8027dfe:	eef0 6a43 	vmov.f32	s13, s6
 8027e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e06:	ee16 6a90 	vmov	r6, s13
 8027e0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027e0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027e12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027e16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027e1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027e1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027e22:	ee12 2a90 	vmov	r2, s5
 8027e26:	eef0 2a47 	vmov.f32	s5, s14
 8027e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e2e:	ee13 2a10 	vmov	r2, s6
 8027e32:	931f      	str	r3, [sp, #124]	; 0x7c
 8027e34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027e36:	eeb0 3a67 	vmov.f32	s6, s15
 8027e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e3e:	9320      	str	r3, [sp, #128]	; 0x80
 8027e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e44:	3b01      	subs	r3, #1
 8027e46:	930a      	str	r3, [sp, #40]	; 0x28
 8027e48:	bf08      	it	eq
 8027e4a:	4615      	moveq	r5, r2
 8027e4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027e4e:	bf18      	it	ne
 8027e50:	461d      	movne	r5, r3
 8027e52:	e6af      	b.n	8027bb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027e54:	f111 0a01 	adds.w	sl, r1, #1
 8027e58:	d486      	bmi.n	8027d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027e5a:	45d6      	cmp	lr, sl
 8027e5c:	db84      	blt.n	8027d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027e5e:	f110 0a01 	adds.w	sl, r0, #1
 8027e62:	d481      	bmi.n	8027d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027e64:	4553      	cmp	r3, sl
 8027e66:	f6ff af7f 	blt.w	8027d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027e6a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027e6c:	b21b      	sxth	r3, r3
 8027e6e:	9101      	str	r1, [sp, #4]
 8027e70:	4641      	mov	r1, r8
 8027e72:	9300      	str	r3, [sp, #0]
 8027e74:	fa0f f38e 	sxth.w	r3, lr
 8027e78:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027e7c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027e82:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027e84:	f7ff fdb2 	bl	80279ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027e88:	e76e      	b.n	8027d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027e8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027e8c:	1430      	asrs	r0, r6, #16
 8027e8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027e90:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027e94:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e98:	1423      	asrs	r3, r4, #16
 8027e9a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027e9e:	fb01 3000 	mla	r0, r1, r0, r3
 8027ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ea4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027ea8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027eac:	8858      	ldrh	r0, [r3, #2]
 8027eae:	f1be 0f00 	cmp.w	lr, #0
 8027eb2:	d00b      	beq.n	8027ecc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027eb4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027eb8:	3901      	subs	r1, #1
 8027eba:	0049      	lsls	r1, r1, #1
 8027ebc:	3102      	adds	r1, #2
 8027ebe:	eb03 0b01 	add.w	fp, r3, r1
 8027ec2:	5a5b      	ldrh	r3, [r3, r1]
 8027ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8027ec6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8027ecc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027ed0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027ed4:	fb12 f30e 	smulbb	r3, r2, lr
 8027ed8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027edc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8027ee0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027ee4:	10db      	asrs	r3, r3, #3
 8027ee6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027eea:	ea41 010c 	orr.w	r1, r1, ip
 8027eee:	f1ce 0c10 	rsb	ip, lr, #16
 8027ef2:	ea4b 0000 	orr.w	r0, fp, r0
 8027ef6:	9f08      	ldr	r7, [sp, #32]
 8027ef8:	ebac 0c02 	sub.w	ip, ip, r2
 8027efc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027f00:	f108 38ff 	add.w	r8, r8, #4294967295
 8027f04:	4350      	muls	r0, r2
 8027f06:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027f0c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027f10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027f12:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027f16:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027f1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027f20:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027f24:	0412      	lsls	r2, r2, #16
 8027f26:	ea4b 0101 	orr.w	r1, fp, r1
 8027f2a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027f2e:	fb03 c101 	mla	r1, r3, r1, ip
 8027f32:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027f36:	4302      	orrs	r2, r0
 8027f38:	fb03 1202 	mla	r2, r3, r2, r1
 8027f3c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027f40:	0952      	lsrs	r2, r2, #5
 8027f42:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027f46:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8027f4a:	f8b9 2000 	ldrh.w	r2, [r9]
 8027f4e:	ea4b 0303 	orr.w	r3, fp, r3
 8027f52:	1211      	asrs	r1, r2, #8
 8027f54:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027f58:	b29b      	uxth	r3, r3
 8027f5a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027f5e:	00d2      	lsls	r2, r2, #3
 8027f60:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027f64:	fb11 f107 	smulbb	r1, r1, r7
 8027f68:	1218      	asrs	r0, r3, #8
 8027f6a:	fb1c fc07 	smulbb	ip, ip, r7
 8027f6e:	b2d2      	uxtb	r2, r2
 8027f70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027f74:	fb12 f207 	smulbb	r2, r2, r7
 8027f78:	fb00 100a 	mla	r0, r0, sl, r1
 8027f7c:	10d9      	asrs	r1, r3, #3
 8027f7e:	00db      	lsls	r3, r3, #3
 8027f80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027f84:	b280      	uxth	r0, r0
 8027f86:	b2db      	uxtb	r3, r3
 8027f88:	fb01 c10a 	mla	r1, r1, sl, ip
 8027f8c:	fb03 230a 	mla	r3, r3, sl, r2
 8027f90:	1c42      	adds	r2, r0, #1
 8027f92:	b289      	uxth	r1, r1
 8027f94:	b29b      	uxth	r3, r3
 8027f96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f9a:	f101 0c01 	add.w	ip, r1, #1
 8027f9e:	1c5a      	adds	r2, r3, #1
 8027fa0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027fa4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027fa8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027fae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027fb2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027fb6:	441c      	add	r4, r3
 8027fb8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027fbe:	4310      	orrs	r0, r2
 8027fc0:	441e      	add	r6, r3
 8027fc2:	ea40 000c 	orr.w	r0, r0, ip
 8027fc6:	f829 0b02 	strh.w	r0, [r9], #2
 8027fca:	e6fa      	b.n	8027dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027fcc:	b013      	add	sp, #76	; 0x4c
 8027fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027fd2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027fd6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8027fda:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8027fde:	fb0e 4703 	mla	r7, lr, r3, r4
 8027fe2:	f1be 0f00 	cmp.w	lr, #0
 8027fe6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8027fea:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8027fee:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8027ff2:	8808      	ldrh	r0, [r1, #0]
 8027ff4:	db60      	blt.n	80280b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8027ff6:	45f1      	cmp	r9, lr
 8027ff8:	dd5e      	ble.n	80280b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8027ffa:	2c00      	cmp	r4, #0
 8027ffc:	db5a      	blt.n	80280b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8027ffe:	42a3      	cmp	r3, r4
 8028000:	dd58      	ble.n	80280b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8028002:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8028006:	1c62      	adds	r2, r4, #1
 8028008:	d459      	bmi.n	80280be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802800a:	4293      	cmp	r3, r2
 802800c:	dd57      	ble.n	80280be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802800e:	2d00      	cmp	r5, #0
 8028010:	d055      	beq.n	80280be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028012:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8028016:	f11e 0e01 	adds.w	lr, lr, #1
 802801a:	d454      	bmi.n	80280c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802801c:	45f1      	cmp	r9, lr
 802801e:	dd52      	ble.n	80280c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028020:	2e00      	cmp	r6, #0
 8028022:	d050      	beq.n	80280c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028024:	2c00      	cmp	r4, #0
 8028026:	db4c      	blt.n	80280c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028028:	42a3      	cmp	r3, r4
 802802a:	dd4a      	ble.n	80280c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802802c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8028030:	3401      	adds	r4, #1
 8028032:	d405      	bmi.n	8028040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028034:	42a3      	cmp	r3, r4
 8028036:	dd03      	ble.n	8028040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028038:	b115      	cbz	r5, 8028040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802803a:	3301      	adds	r3, #1
 802803c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8028040:	fb15 f406 	smulbb	r4, r5, r6
 8028044:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028048:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802804c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028050:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028054:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8028058:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802805c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028060:	ea43 0c0c 	orr.w	ip, r3, ip
 8028064:	f1c6 0310 	rsb	r3, r6, #16
 8028068:	ea4e 0707 	orr.w	r7, lr, r7
 802806c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028070:	1b5b      	subs	r3, r3, r5
 8028072:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028076:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802807a:	437d      	muls	r5, r7
 802807c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028080:	0403      	lsls	r3, r0, #16
 8028082:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028086:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802808a:	4318      	orrs	r0, r3
 802808c:	0413      	lsls	r3, r2, #16
 802808e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028092:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028096:	fb04 c000 	mla	r0, r4, r0, ip
 802809a:	4313      	orrs	r3, r2
 802809c:	fb06 0003 	mla	r0, r6, r3, r0
 80280a0:	0d43      	lsrs	r3, r0, #21
 80280a2:	0940      	lsrs	r0, r0, #5
 80280a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80280ac:	4318      	orrs	r0, r3
 80280ae:	8008      	strh	r0, [r1, #0]
 80280b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80280b4:	4684      	mov	ip, r0
 80280b6:	e7a6      	b.n	8028006 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80280b8:	4607      	mov	r7, r0
 80280ba:	4684      	mov	ip, r0
 80280bc:	e7ab      	b.n	8028016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80280be:	4607      	mov	r7, r0
 80280c0:	e7a9      	b.n	8028016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80280c2:	4602      	mov	r2, r0
 80280c4:	e7b4      	b.n	8028030 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80280c6:	4602      	mov	r2, r0
 80280c8:	e7ba      	b.n	8028040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080280ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80280ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280ce:	b08f      	sub	sp, #60	; 0x3c
 80280d0:	461d      	mov	r5, r3
 80280d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80280d4:	9107      	str	r1, [sp, #28]
 80280d6:	920c      	str	r2, [sp, #48]	; 0x30
 80280d8:	6859      	ldr	r1, [r3, #4]
 80280da:	681b      	ldr	r3, [r3, #0]
 80280dc:	900d      	str	r0, [sp, #52]	; 0x34
 80280de:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80280e2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80280e6:	fb01 2707 	mla	r7, r1, r7, r2
 80280ea:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80280ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80280f0:	f8d3 8000 	ldr.w	r8, [r3]
 80280f4:	9b07      	ldr	r3, [sp, #28]
 80280f6:	2b00      	cmp	r3, #0
 80280f8:	dc03      	bgt.n	8028102 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80280fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80280fc:	2b00      	cmp	r3, #0
 80280fe:	f340 8182 	ble.w	8028406 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028104:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028108:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802810c:	1e48      	subs	r0, r1, #1
 802810e:	f102 3cff 	add.w	ip, r2, #4294967295
 8028112:	2d00      	cmp	r5, #0
 8028114:	f340 809b 	ble.w	802824e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028118:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802811c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028120:	d406      	bmi.n	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028122:	4586      	cmp	lr, r0
 8028124:	da04      	bge.n	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028126:	2b00      	cmp	r3, #0
 8028128:	db02      	blt.n	8028130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802812a:	4563      	cmp	r3, ip
 802812c:	f2c0 8090 	blt.w	8028250 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028130:	f11e 0e01 	adds.w	lr, lr, #1
 8028134:	f100 8084 	bmi.w	8028240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028138:	4571      	cmp	r1, lr
 802813a:	f2c0 8081 	blt.w	8028240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802813e:	3301      	adds	r3, #1
 8028140:	d47e      	bmi.n	8028240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028142:	429a      	cmp	r2, r3
 8028144:	db7c      	blt.n	8028240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028146:	46aa      	mov	sl, r5
 8028148:	46b9      	mov	r9, r7
 802814a:	f1ba 0f00 	cmp.w	sl, #0
 802814e:	f340 8099 	ble.w	8028284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8028152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028154:	1421      	asrs	r1, r4, #16
 8028156:	ea4f 4026 	mov.w	r0, r6, asr #16
 802815a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802815e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028162:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028166:	f100 80d1 	bmi.w	802830c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802816a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802816e:	4559      	cmp	r1, fp
 8028170:	f280 80cc 	bge.w	802830c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028174:	2800      	cmp	r0, #0
 8028176:	f2c0 80c9 	blt.w	802830c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802817a:	f103 3bff 	add.w	fp, r3, #4294967295
 802817e:	4558      	cmp	r0, fp
 8028180:	f280 80c4 	bge.w	802830c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028184:	fa0f fe8e 	sxth.w	lr, lr
 8028188:	fb00 110e 	mla	r1, r0, lr, r1
 802818c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028190:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028194:	8841      	ldrh	r1, [r0, #2]
 8028196:	f1bc 0f00 	cmp.w	ip, #0
 802819a:	d00b      	beq.n	80281b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802819c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80281a0:	3b01      	subs	r3, #1
 80281a2:	005b      	lsls	r3, r3, #1
 80281a4:	3302      	adds	r3, #2
 80281a6:	eb00 0e03 	add.w	lr, r0, r3
 80281aa:	5ac3      	ldrh	r3, [r0, r3]
 80281ac:	9308      	str	r3, [sp, #32]
 80281ae:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80281b2:	9309      	str	r3, [sp, #36]	; 0x24
 80281b4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80281b8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80281bc:	fb12 f30c 	smulbb	r3, r2, ip
 80281c0:	f1cc 0e10 	rsb	lr, ip, #16
 80281c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80281c8:	10db      	asrs	r3, r3, #3
 80281ca:	ebae 0e02 	sub.w	lr, lr, r2
 80281ce:	ea40 000b 	orr.w	r0, r0, fp
 80281d2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80281d6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80281da:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80281de:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80281e2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80281e6:	ea4b 0101 	orr.w	r1, fp, r1
 80281ea:	4351      	muls	r1, r2
 80281ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80281ee:	fb0e 1e00 	mla	lr, lr, r0, r1
 80281f2:	0410      	lsls	r0, r2, #16
 80281f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80281f8:	9908      	ldr	r1, [sp, #32]
 80281fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80281fe:	4310      	orrs	r0, r2
 8028200:	9a08      	ldr	r2, [sp, #32]
 8028202:	0412      	lsls	r2, r2, #16
 8028204:	fb03 e000 	mla	r0, r3, r0, lr
 8028208:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802820c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028210:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028214:	ea42 020e 	orr.w	r2, r2, lr
 8028218:	fb03 0302 	mla	r3, r3, r2, r0
 802821c:	0d5a      	lsrs	r2, r3, #21
 802821e:	095b      	lsrs	r3, r3, #5
 8028220:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028224:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028228:	4313      	orrs	r3, r2
 802822a:	f8a9 3000 	strh.w	r3, [r9]
 802822e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028230:	f109 0902 	add.w	r9, r9, #2
 8028234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028238:	441c      	add	r4, r3
 802823a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802823c:	441e      	add	r6, r3
 802823e:	e784      	b.n	802814a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028240:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028242:	3d01      	subs	r5, #1
 8028244:	3702      	adds	r7, #2
 8028246:	441c      	add	r4, r3
 8028248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802824a:	441e      	add	r6, r3
 802824c:	e761      	b.n	8028112 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802824e:	d01d      	beq.n	802828c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028250:	1e6b      	subs	r3, r5, #1
 8028252:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028254:	fb00 4003 	mla	r0, r0, r3, r4
 8028258:	1400      	asrs	r0, r0, #16
 802825a:	f53f af74 	bmi.w	8028146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802825e:	3901      	subs	r1, #1
 8028260:	4288      	cmp	r0, r1
 8028262:	f6bf af70 	bge.w	8028146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8028268:	fb01 6303 	mla	r3, r1, r3, r6
 802826c:	141b      	asrs	r3, r3, #16
 802826e:	f53f af6a 	bmi.w	8028146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028272:	3a01      	subs	r2, #1
 8028274:	4293      	cmp	r3, r2
 8028276:	f6bf af66 	bge.w	8028146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802827a:	46a9      	mov	r9, r5
 802827c:	46ba      	mov	sl, r7
 802827e:	f1b9 0f00 	cmp.w	r9, #0
 8028282:	dc5b      	bgt.n	802833c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028284:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028288:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802828c:	9b07      	ldr	r3, [sp, #28]
 802828e:	2b00      	cmp	r3, #0
 8028290:	f340 80b9 	ble.w	8028406 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028298:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802829a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802829e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80282a2:	eef0 6a62 	vmov.f32	s13, s5
 80282a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80282aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80282ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282b2:	ee16 4a90 	vmov	r4, s13
 80282b6:	eef0 6a43 	vmov.f32	s13, s6
 80282ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282be:	ee16 6a90 	vmov	r6, s13
 80282c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80282c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80282ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80282ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80282d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80282d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80282da:	ee12 2a90 	vmov	r2, s5
 80282de:	eef0 2a47 	vmov.f32	s5, s14
 80282e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80282e6:	ee13 2a10 	vmov	r2, s6
 80282ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80282ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80282ee:	eeb0 3a67 	vmov.f32	s6, s15
 80282f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80282f6:	931c      	str	r3, [sp, #112]	; 0x70
 80282f8:	9b07      	ldr	r3, [sp, #28]
 80282fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80282fc:	3b01      	subs	r3, #1
 80282fe:	9307      	str	r3, [sp, #28]
 8028300:	bf08      	it	eq
 8028302:	4615      	moveq	r5, r2
 8028304:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028306:	bf18      	it	ne
 8028308:	461d      	movne	r5, r3
 802830a:	e6f3      	b.n	80280f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802830c:	f111 0b01 	adds.w	fp, r1, #1
 8028310:	d48d      	bmi.n	802822e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028312:	45de      	cmp	lr, fp
 8028314:	db8b      	blt.n	802822e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028316:	f110 0b01 	adds.w	fp, r0, #1
 802831a:	d488      	bmi.n	802822e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802831c:	455b      	cmp	r3, fp
 802831e:	db86      	blt.n	802822e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028320:	b21b      	sxth	r3, r3
 8028322:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028326:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802832a:	9300      	str	r3, [sp, #0]
 802832c:	4642      	mov	r2, r8
 802832e:	fa0f f38e 	sxth.w	r3, lr
 8028332:	4649      	mov	r1, r9
 8028334:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028336:	f7ff fe4c 	bl	8027fd2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802833a:	e778      	b.n	802822e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802833c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802833e:	1420      	asrs	r0, r4, #16
 8028340:	1431      	asrs	r1, r6, #16
 8028342:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802834a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802834e:	fb03 0101 	mla	r1, r3, r1, r0
 8028352:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028356:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802835a:	8841      	ldrh	r1, [r0, #2]
 802835c:	f1be 0f00 	cmp.w	lr, #0
 8028360:	d00b      	beq.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8028362:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8028366:	3b01      	subs	r3, #1
 8028368:	005b      	lsls	r3, r3, #1
 802836a:	3302      	adds	r3, #2
 802836c:	eb00 0b03 	add.w	fp, r0, r3
 8028370:	5ac3      	ldrh	r3, [r0, r3]
 8028372:	930a      	str	r3, [sp, #40]	; 0x28
 8028374:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028378:	930b      	str	r3, [sp, #44]	; 0x2c
 802837a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802837e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028382:	fb12 f30e 	smulbb	r3, r2, lr
 8028386:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802838a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802838e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028392:	10db      	asrs	r3, r3, #3
 8028394:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028398:	ea40 000c 	orr.w	r0, r0, ip
 802839c:	f1ce 0c10 	rsb	ip, lr, #16
 80283a0:	ea4b 0101 	orr.w	r1, fp, r1
 80283a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80283a8:	ebac 0c02 	sub.w	ip, ip, r2
 80283ac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80283b0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80283b4:	4351      	muls	r1, r2
 80283b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80283b8:	fb0c 1c00 	mla	ip, ip, r0, r1
 80283bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80283be:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80283c2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80283c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80283c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80283cc:	0412      	lsls	r2, r2, #16
 80283ce:	ea4b 0000 	orr.w	r0, fp, r0
 80283d2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80283d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80283da:	fb03 c000 	mla	r0, r3, r0, ip
 80283de:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80283e2:	ea42 0b0b 	orr.w	fp, r2, fp
 80283e6:	fb03 000b 	mla	r0, r3, fp, r0
 80283ea:	0d43      	lsrs	r3, r0, #21
 80283ec:	0940      	lsrs	r0, r0, #5
 80283ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80283f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80283f6:	4318      	orrs	r0, r3
 80283f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80283fa:	441c      	add	r4, r3
 80283fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80283fe:	f82a 0b02 	strh.w	r0, [sl], #2
 8028402:	441e      	add	r6, r3
 8028404:	e73b      	b.n	802827e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028406:	b00f      	add	sp, #60	; 0x3c
 8028408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802840c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028410:	b085      	sub	sp, #20
 8028412:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028416:	9102      	str	r1, [sp, #8]
 8028418:	2c00      	cmp	r4, #0
 802841a:	fb04 7103 	mla	r1, r4, r3, r7
 802841e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028422:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028426:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802842a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802842e:	f2c0 811b 	blt.w	8028668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028432:	45a6      	cmp	lr, r4
 8028434:	f340 8118 	ble.w	8028668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028438:	2f00      	cmp	r7, #0
 802843a:	f2c0 8113 	blt.w	8028664 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802843e:	42bb      	cmp	r3, r7
 8028440:	f340 8110 	ble.w	8028664 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028444:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028448:	1c7a      	adds	r2, r7, #1
 802844a:	f100 8110 	bmi.w	802866e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802844e:	4293      	cmp	r3, r2
 8028450:	f340 810d 	ble.w	802866e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028454:	2e00      	cmp	r6, #0
 8028456:	f000 810c 	beq.w	8028672 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802845a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802845e:	3401      	adds	r4, #1
 8028460:	f100 810b 	bmi.w	802867a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028464:	45a6      	cmp	lr, r4
 8028466:	f340 8108 	ble.w	802867a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802846a:	2800      	cmp	r0, #0
 802846c:	f000 8108 	beq.w	8028680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8028470:	2f00      	cmp	r7, #0
 8028472:	f2c0 8100 	blt.w	8028676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028476:	42bb      	cmp	r3, r7
 8028478:	f340 80fd 	ble.w	8028676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802847c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028480:	3701      	adds	r7, #1
 8028482:	f100 8100 	bmi.w	8028686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028486:	42bb      	cmp	r3, r7
 8028488:	f340 80fd 	ble.w	8028686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802848c:	2e00      	cmp	r6, #0
 802848e:	f000 80fc 	beq.w	802868a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028492:	3301      	adds	r3, #1
 8028494:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028498:	b2b6      	uxth	r6, r6
 802849a:	b280      	uxth	r0, r0
 802849c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80284a0:	fb00 fe06 	mul.w	lr, r0, r6
 80284a4:	0136      	lsls	r6, r6, #4
 80284a6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80284aa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80284ae:	eba6 070e 	sub.w	r7, r6, lr
 80284b2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80284b6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80284ba:	b280      	uxth	r0, r0
 80284bc:	b2bf      	uxth	r7, r7
 80284be:	1a1b      	subs	r3, r3, r0
 80284c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80284c4:	fb0a f607 	mul.w	r6, sl, r7
 80284c8:	b29b      	uxth	r3, r3
 80284ca:	fb0b 6603 	mla	r6, fp, r3, r6
 80284ce:	fb00 6609 	mla	r6, r0, r9, r6
 80284d2:	fb0e 6608 	mla	r6, lr, r8, r6
 80284d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80284da:	9600      	str	r6, [sp, #0]
 80284dc:	2e00      	cmp	r6, #0
 80284de:	f000 80be 	beq.w	802865e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80284e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80284e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80284ea:	9e02      	ldr	r6, [sp, #8]
 80284ec:	fb0b fc0c 	mul.w	ip, fp, ip
 80284f0:	fb0b f505 	mul.w	r5, fp, r5
 80284f4:	8836      	ldrh	r6, [r6, #0]
 80284f6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80284fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80284fe:	9501      	str	r5, [sp, #4]
 8028500:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028504:	44dc      	add	ip, fp
 8028506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802850a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802850e:	9503      	str	r5, [sp, #12]
 8028510:	9d01      	ldr	r5, [sp, #4]
 8028512:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028516:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802851a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802851e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028522:	fb0a fc0c 	mul.w	ip, sl, ip
 8028526:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802852a:	fb0a fa01 	mul.w	sl, sl, r1
 802852e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028532:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028536:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802853a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802853e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028542:	4465      	add	r5, ip
 8028544:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028548:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802854c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028550:	fb09 fc0c 	mul.w	ip, r9, ip
 8028554:	0a2d      	lsrs	r5, r5, #8
 8028556:	fb09 f904 	mul.w	r9, r9, r4
 802855a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802855e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028562:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028566:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802856a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802856e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028572:	437d      	muls	r5, r7
 8028574:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028578:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802857c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028580:	4461      	add	r1, ip
 8028582:	fb08 f404 	mul.w	r4, r8, r4
 8028586:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802858a:	fb08 f802 	mul.w	r8, r8, r2
 802858e:	0a09      	lsrs	r1, r1, #8
 8028590:	0a22      	lsrs	r2, r4, #8
 8028592:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028596:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802859a:	fb07 f70a 	mul.w	r7, r7, sl
 802859e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80285a2:	4414      	add	r4, r2
 80285a4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80285a8:	0a24      	lsrs	r4, r4, #8
 80285aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80285ae:	9a03      	ldr	r2, [sp, #12]
 80285b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80285b4:	fb02 5503 	mla	r5, r2, r3, r5
 80285b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80285bc:	9a00      	ldr	r2, [sp, #0]
 80285be:	fb04 540e 	mla	r4, r4, lr, r5
 80285c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80285c6:	1235      	asrs	r5, r6, #8
 80285c8:	fb01 4100 	mla	r1, r1, r0, r4
 80285cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80285d0:	0a09      	lsrs	r1, r1, #8
 80285d2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80285d6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80285da:	fb03 7101 	mla	r1, r3, r1, r7
 80285de:	fb0e 1e08 	mla	lr, lr, r8, r1
 80285e2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80285e6:	fb00 e101 	mla	r1, r0, r1, lr
 80285ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80285ee:	b287      	uxth	r7, r0
 80285f0:	0a09      	lsrs	r1, r1, #8
 80285f2:	437a      	muls	r2, r7
 80285f4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80285f8:	1c53      	adds	r3, r2, #1
 80285fa:	4321      	orrs	r1, r4
 80285fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028600:	0c0a      	lsrs	r2, r1, #16
 8028602:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028606:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802860a:	b2c8      	uxtb	r0, r1
 802860c:	fb12 f207 	smulbb	r2, r2, r7
 8028610:	fb14 f407 	smulbb	r4, r4, r7
 8028614:	b2db      	uxtb	r3, r3
 8028616:	fb10 f007 	smulbb	r0, r0, r7
 802861a:	fb05 2503 	mla	r5, r5, r3, r2
 802861e:	10f2      	asrs	r2, r6, #3
 8028620:	00f6      	lsls	r6, r6, #3
 8028622:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028626:	b2ad      	uxth	r5, r5
 8028628:	b2f6      	uxtb	r6, r6
 802862a:	fb02 4203 	mla	r2, r2, r3, r4
 802862e:	fb06 0303 	mla	r3, r6, r3, r0
 8028632:	b294      	uxth	r4, r2
 8028634:	b299      	uxth	r1, r3
 8028636:	1c6b      	adds	r3, r5, #1
 8028638:	1c62      	adds	r2, r4, #1
 802863a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802863e:	1c4b      	adds	r3, r1, #1
 8028640:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028644:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028648:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802864c:	0952      	lsrs	r2, r2, #5
 802864e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028652:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028656:	432b      	orrs	r3, r5
 8028658:	4313      	orrs	r3, r2
 802865a:	9a02      	ldr	r2, [sp, #8]
 802865c:	8013      	strh	r3, [r2, #0]
 802865e:	b005      	add	sp, #20
 8028660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028664:	2500      	movs	r5, #0
 8028666:	e6ef      	b.n	8028448 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028668:	2100      	movs	r1, #0
 802866a:	460d      	mov	r5, r1
 802866c:	e6f7      	b.n	802845e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802866e:	2100      	movs	r1, #0
 8028670:	e6f5      	b.n	802845e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028672:	4631      	mov	r1, r6
 8028674:	e6f3      	b.n	802845e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028676:	2400      	movs	r4, #0
 8028678:	e702      	b.n	8028480 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802867a:	2200      	movs	r2, #0
 802867c:	4614      	mov	r4, r2
 802867e:	e70b      	b.n	8028498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028680:	4602      	mov	r2, r0
 8028682:	4604      	mov	r4, r0
 8028684:	e708      	b.n	8028498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028686:	2200      	movs	r2, #0
 8028688:	e706      	b.n	8028498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802868a:	4632      	mov	r2, r6
 802868c:	e704      	b.n	8028498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802868e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802868e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028692:	b09d      	sub	sp, #116	; 0x74
 8028694:	9219      	str	r2, [sp, #100]	; 0x64
 8028696:	9307      	str	r3, [sp, #28]
 8028698:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802869a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802869e:	901b      	str	r0, [sp, #108]	; 0x6c
 80286a0:	931a      	str	r3, [sp, #104]	; 0x68
 80286a2:	6850      	ldr	r0, [r2, #4]
 80286a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80286a6:	6812      	ldr	r2, [r2, #0]
 80286a8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80286ac:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80286b0:	fb00 1303 	mla	r3, r0, r3, r1
 80286b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80286b8:	930a      	str	r3, [sp, #40]	; 0x28
 80286ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80286bc:	681b      	ldr	r3, [r3, #0]
 80286be:	9310      	str	r3, [sp, #64]	; 0x40
 80286c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80286c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80286c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80286c8:	2b00      	cmp	r3, #0
 80286ca:	dc03      	bgt.n	80286d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80286cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80286ce:	2b00      	cmp	r3, #0
 80286d0:	f340 8375 	ble.w	8028dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80286d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80286d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286de:	1e48      	subs	r0, r1, #1
 80286e0:	1e57      	subs	r7, r2, #1
 80286e2:	9b07      	ldr	r3, [sp, #28]
 80286e4:	2b00      	cmp	r3, #0
 80286e6:	f340 818e 	ble.w	8028a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80286ea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80286ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80286f2:	d406      	bmi.n	8028702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80286f4:	4584      	cmp	ip, r0
 80286f6:	da04      	bge.n	8028702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80286f8:	2b00      	cmp	r3, #0
 80286fa:	db02      	blt.n	8028702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80286fc:	42bb      	cmp	r3, r7
 80286fe:	f2c0 8183 	blt.w	8028a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028702:	f11c 0c01 	adds.w	ip, ip, #1
 8028706:	f100 8173 	bmi.w	80289f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802870a:	4561      	cmp	r1, ip
 802870c:	f2c0 8170 	blt.w	80289f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028710:	3301      	adds	r3, #1
 8028712:	f100 816d 	bmi.w	80289f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028716:	429a      	cmp	r2, r3
 8028718:	f2c0 816a 	blt.w	80289f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802871c:	9b07      	ldr	r3, [sp, #28]
 802871e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028720:	9318      	str	r3, [sp, #96]	; 0x60
 8028722:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028724:	2b00      	cmp	r3, #0
 8028726:	f340 818c 	ble.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802872a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802872c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028732:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028736:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802873a:	1422      	asrs	r2, r4, #16
 802873c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028740:	689b      	ldr	r3, [r3, #8]
 8028742:	f100 81cd 	bmi.w	8028ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028746:	f103 38ff 	add.w	r8, r3, #4294967295
 802874a:	4542      	cmp	r2, r8
 802874c:	f280 81c8 	bge.w	8028ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028750:	f1bc 0f00 	cmp.w	ip, #0
 8028754:	f2c0 81c4 	blt.w	8028ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028758:	f10e 38ff 	add.w	r8, lr, #4294967295
 802875c:	45c4      	cmp	ip, r8
 802875e:	f280 81bf 	bge.w	8028ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028762:	b21b      	sxth	r3, r3
 8028764:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028766:	fb0c 2203 	mla	r2, ip, r3, r2
 802876a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802876e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028772:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028776:	2800      	cmp	r0, #0
 8028778:	f000 81a9 	beq.w	8028ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802877c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028780:	950c      	str	r5, [sp, #48]	; 0x30
 8028782:	0e2d      	lsrs	r5, r5, #24
 8028784:	9513      	str	r5, [sp, #76]	; 0x4c
 8028786:	b181      	cbz	r1, 80287aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802878c:	3b01      	subs	r3, #1
 802878e:	009b      	lsls	r3, r3, #2
 8028790:	3304      	adds	r3, #4
 8028792:	eb08 0c03 	add.w	ip, r8, r3
 8028796:	f858 3003 	ldr.w	r3, [r8, r3]
 802879a:	9308      	str	r3, [sp, #32]
 802879c:	0e1b      	lsrs	r3, r3, #24
 802879e:	9311      	str	r3, [sp, #68]	; 0x44
 80287a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80287a4:	930d      	str	r3, [sp, #52]	; 0x34
 80287a6:	0e1b      	lsrs	r3, r3, #24
 80287a8:	9314      	str	r3, [sp, #80]	; 0x50
 80287aa:	b280      	uxth	r0, r0
 80287ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80287ae:	b289      	uxth	r1, r1
 80287b0:	fb00 f901 	mul.w	r9, r0, r1
 80287b4:	0100      	lsls	r0, r0, #4
 80287b6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80287ba:	eba0 0809 	sub.w	r8, r0, r9
 80287be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80287c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80287c4:	b289      	uxth	r1, r1
 80287c6:	fa1f f888 	uxth.w	r8, r8
 80287ca:	1a5b      	subs	r3, r3, r1
 80287cc:	fb08 f000 	mul.w	r0, r8, r0
 80287d0:	b29b      	uxth	r3, r3
 80287d2:	fb03 000e 	mla	r0, r3, lr, r0
 80287d6:	fb01 0005 	mla	r0, r1, r5, r0
 80287da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80287dc:	fb09 0005 	mla	r0, r9, r5, r0
 80287e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80287e4:	2800      	cmp	r0, #0
 80287e6:	f000 80fa 	beq.w	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80287ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80287ee:	d01b      	beq.n	8028828 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80287f0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80287f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80287f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80287fc:	fb0e fe02 	mul.w	lr, lr, r2
 8028800:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028804:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028808:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802880c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028810:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028814:	4452      	add	r2, sl
 8028816:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802881a:	0a12      	lsrs	r2, r2, #8
 802881c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028820:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028824:	ea42 020c 	orr.w	r2, r2, ip
 8028828:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802882a:	2dff      	cmp	r5, #255	; 0xff
 802882c:	d021      	beq.n	8028872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802882e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028830:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028834:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028836:	fb05 fb0b 	mul.w	fp, r5, fp
 802883a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802883c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028840:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028842:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028846:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802884a:	fb05 fa0a 	mul.w	sl, r5, sl
 802884e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028852:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028856:	44de      	add	lr, fp
 8028858:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802885c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028864:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028868:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802886c:	ea4e 050a 	orr.w	r5, lr, sl
 8028870:	950c      	str	r5, [sp, #48]	; 0x30
 8028872:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028874:	2dff      	cmp	r5, #255	; 0xff
 8028876:	d021      	beq.n	80288bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028878:	9d08      	ldr	r5, [sp, #32]
 802887a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802887e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028880:	fb05 fb0b 	mul.w	fp, r5, fp
 8028884:	9d08      	ldr	r5, [sp, #32]
 8028886:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802888a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802888c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028890:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028894:	fb05 fa0a 	mul.w	sl, r5, sl
 8028898:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802889c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80288a0:	44de      	add	lr, fp
 80288a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80288a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288b6:	ea4e 050a 	orr.w	r5, lr, sl
 80288ba:	9508      	str	r5, [sp, #32]
 80288bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288be:	2dff      	cmp	r5, #255	; 0xff
 80288c0:	d021      	beq.n	8028906 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80288c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80288c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80288c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80288ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80288d0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80288d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80288da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80288de:	fb05 fa0a 	mul.w	sl, r5, sl
 80288e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80288ea:	44de      	add	lr, fp
 80288ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80288f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028900:	ea4e 050a 	orr.w	r5, lr, sl
 8028904:	950d      	str	r5, [sp, #52]	; 0x34
 8028906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028908:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802890c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028910:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028914:	9d08      	ldr	r5, [sp, #32]
 8028916:	fb08 fc0c 	mul.w	ip, r8, ip
 802891a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802891e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028922:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028924:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028928:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802892c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802892e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028932:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028936:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028938:	fb08 f80e 	mul.w	r8, r8, lr
 802893c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028940:	fb03 8202 	mla	r2, r3, r2, r8
 8028944:	9b08      	ldr	r3, [sp, #32]
 8028946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802894a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802894e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028950:	fb01 220a 	mla	r2, r1, sl, r2
 8028954:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028958:	883b      	ldrh	r3, [r7, #0]
 802895a:	fb09 2901 	mla	r9, r9, r1, r2
 802895e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028960:	1219      	asrs	r1, r3, #8
 8028962:	4342      	muls	r2, r0
 8028964:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028968:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802896c:	1c50      	adds	r0, r2, #1
 802896e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028972:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028976:	ea4c 0c09 	orr.w	ip, ip, r9
 802897a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802897e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028982:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028986:	fa5f fc8c 	uxtb.w	ip, ip
 802898a:	fb12 f205 	smulbb	r2, r2, r5
 802898e:	b2c0      	uxtb	r0, r0
 8028990:	fb1c fc05 	smulbb	ip, ip, r5
 8028994:	fb01 2100 	mla	r1, r1, r0, r2
 8028998:	10da      	asrs	r2, r3, #3
 802899a:	fb1e fe05 	smulbb	lr, lr, r5
 802899e:	00db      	lsls	r3, r3, #3
 80289a0:	b289      	uxth	r1, r1
 80289a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80289a6:	b2db      	uxtb	r3, r3
 80289a8:	fb02 e200 	mla	r2, r2, r0, lr
 80289ac:	fb03 c300 	mla	r3, r3, r0, ip
 80289b0:	b292      	uxth	r2, r2
 80289b2:	fa1f fc83 	uxth.w	ip, r3
 80289b6:	1c4b      	adds	r3, r1, #1
 80289b8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80289bc:	f10c 0301 	add.w	r3, ip, #1
 80289c0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80289c4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80289c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80289cc:	430b      	orrs	r3, r1
 80289ce:	1c51      	adds	r1, r2, #1
 80289d0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80289d4:	0952      	lsrs	r2, r2, #5
 80289d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80289da:	4313      	orrs	r3, r2
 80289dc:	803b      	strh	r3, [r7, #0]
 80289de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80289e0:	3702      	adds	r7, #2
 80289e2:	441c      	add	r4, r3
 80289e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289e6:	441e      	add	r6, r3
 80289e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80289ea:	3b01      	subs	r3, #1
 80289ec:	9318      	str	r3, [sp, #96]	; 0x60
 80289ee:	e698      	b.n	8028722 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80289f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80289f2:	441c      	add	r4, r3
 80289f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289f6:	441e      	add	r6, r3
 80289f8:	9b07      	ldr	r3, [sp, #28]
 80289fa:	3b01      	subs	r3, #1
 80289fc:	9307      	str	r3, [sp, #28]
 80289fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a00:	3302      	adds	r3, #2
 8028a02:	930a      	str	r3, [sp, #40]	; 0x28
 8028a04:	e66d      	b.n	80286e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028a06:	d023      	beq.n	8028a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028a08:	9b07      	ldr	r3, [sp, #28]
 8028a0a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8028a0c:	3b01      	subs	r3, #1
 8028a0e:	fb00 4003 	mla	r0, r0, r3, r4
 8028a12:	1400      	asrs	r0, r0, #16
 8028a14:	f53f ae82 	bmi.w	802871c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028a18:	3901      	subs	r1, #1
 8028a1a:	4288      	cmp	r0, r1
 8028a1c:	f6bf ae7e 	bge.w	802871c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028a20:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028a22:	fb01 6303 	mla	r3, r1, r3, r6
 8028a26:	141b      	asrs	r3, r3, #16
 8028a28:	f53f ae78 	bmi.w	802871c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028a2c:	3a01      	subs	r2, #1
 8028a2e:	4293      	cmp	r3, r2
 8028a30:	f6bf ae74 	bge.w	802871c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028a34:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028a38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028a3c:	f1bb 0f00 	cmp.w	fp, #0
 8028a40:	dc6c      	bgt.n	8028b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028a42:	9b07      	ldr	r3, [sp, #28]
 8028a44:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a4a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8028a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028a52:	2b00      	cmp	r3, #0
 8028a54:	f340 81b3 	ble.w	8028dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028a5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028a5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028a62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028a66:	eef0 6a62 	vmov.f32	s13, s5
 8028a6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028a6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028a72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a76:	ee16 4a90 	vmov	r4, s13
 8028a7a:	eef0 6a43 	vmov.f32	s13, s6
 8028a7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a82:	ee16 6a90 	vmov	r6, s13
 8028a86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028a8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028a8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028a92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028a96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028a9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028a9e:	ee12 2a90 	vmov	r2, s5
 8028aa2:	eef0 2a47 	vmov.f32	s5, s14
 8028aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028aaa:	ee13 2a10 	vmov	r2, s6
 8028aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8028ab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028ab2:	eeb0 3a67 	vmov.f32	s6, s15
 8028ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028aba:	932a      	str	r3, [sp, #168]	; 0xa8
 8028abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028abe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028ac0:	3b01      	subs	r3, #1
 8028ac2:	9317      	str	r3, [sp, #92]	; 0x5c
 8028ac4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028ac6:	bf08      	it	eq
 8028ac8:	4613      	moveq	r3, r2
 8028aca:	9307      	str	r3, [sp, #28]
 8028acc:	e5fb      	b.n	80286c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028ace:	2900      	cmp	r1, #0
 8028ad0:	f43f ae6b 	beq.w	80287aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028ad4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028ad8:	9308      	str	r3, [sp, #32]
 8028ada:	0e1b      	lsrs	r3, r3, #24
 8028adc:	9311      	str	r3, [sp, #68]	; 0x44
 8028ade:	e664      	b.n	80287aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028ae0:	f112 0801 	adds.w	r8, r2, #1
 8028ae4:	f53f af7b 	bmi.w	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028ae8:	4543      	cmp	r3, r8
 8028aea:	f6ff af78 	blt.w	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028aee:	f11c 0801 	adds.w	r8, ip, #1
 8028af2:	f53f af74 	bmi.w	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028af6:	45c6      	cmp	lr, r8
 8028af8:	f6ff af71 	blt.w	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028afc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028afe:	b21b      	sxth	r3, r3
 8028b00:	9201      	str	r2, [sp, #4]
 8028b02:	fa0f f28e 	sxth.w	r2, lr
 8028b06:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028b0a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028b0e:	9200      	str	r2, [sp, #0]
 8028b10:	4639      	mov	r1, r7
 8028b12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028b14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028b16:	f7ff fc79 	bl	802840c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028b1a:	e760      	b.n	80289de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028b1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028b1e:	1427      	asrs	r7, r4, #16
 8028b20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b2a:	1433      	asrs	r3, r6, #16
 8028b2c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028b30:	fb01 7303 	mla	r3, r1, r3, r7
 8028b34:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028b38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028b3c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028b40:	2a00      	cmp	r2, #0
 8028b42:	f000 8133 	beq.w	8028dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8028b46:	687d      	ldr	r5, [r7, #4]
 8028b48:	950e      	str	r5, [sp, #56]	; 0x38
 8028b4a:	0e2d      	lsrs	r5, r5, #24
 8028b4c:	9515      	str	r5, [sp, #84]	; 0x54
 8028b4e:	b178      	cbz	r0, 8028b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028b50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8028b54:	3901      	subs	r1, #1
 8028b56:	0089      	lsls	r1, r1, #2
 8028b58:	3104      	adds	r1, #4
 8028b5a:	eb07 0e01 	add.w	lr, r7, r1
 8028b5e:	5879      	ldr	r1, [r7, r1]
 8028b60:	9109      	str	r1, [sp, #36]	; 0x24
 8028b62:	0e09      	lsrs	r1, r1, #24
 8028b64:	9112      	str	r1, [sp, #72]	; 0x48
 8028b66:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028b6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8028b6c:	0e09      	lsrs	r1, r1, #24
 8028b6e:	9116      	str	r1, [sp, #88]	; 0x58
 8028b70:	b292      	uxth	r2, r2
 8028b72:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028b74:	b280      	uxth	r0, r0
 8028b76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028b78:	fb02 f800 	mul.w	r8, r2, r0
 8028b7c:	0112      	lsls	r2, r2, #4
 8028b7e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028b82:	eba2 0e08 	sub.w	lr, r2, r8
 8028b86:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028b8a:	b280      	uxth	r0, r0
 8028b8c:	fa1f fe8e 	uxth.w	lr, lr
 8028b90:	1a12      	subs	r2, r2, r0
 8028b92:	fb0e f101 	mul.w	r1, lr, r1
 8028b96:	b292      	uxth	r2, r2
 8028b98:	fb02 110c 	mla	r1, r2, ip, r1
 8028b9c:	fb00 1105 	mla	r1, r0, r5, r1
 8028ba0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028ba2:	fb08 1105 	mla	r1, r8, r5, r1
 8028ba6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028baa:	2900      	cmp	r1, #0
 8028bac:	f000 80f5 	beq.w	8028d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8028bb0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028bb4:	d019      	beq.n	8028bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8028bb6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028bbe:	fb0c fa0a 	mul.w	sl, ip, sl
 8028bc2:	fb0c fc03 	mul.w	ip, ip, r3
 8028bc6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028bca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028bce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028bd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028bd6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028bda:	4453      	add	r3, sl
 8028bdc:	0a3f      	lsrs	r7, r7, #8
 8028bde:	0a1b      	lsrs	r3, r3, #8
 8028be0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028be4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028be8:	433b      	orrs	r3, r7
 8028bea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bec:	2dff      	cmp	r5, #255	; 0xff
 8028bee:	d020      	beq.n	8028c32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8028bf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028bf2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028bf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bf8:	436f      	muls	r7, r5
 8028bfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028bfc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c00:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028c04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028c06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c0e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c12:	44bc      	add	ip, r7
 8028c14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c2c:	ea4c 050a 	orr.w	r5, ip, sl
 8028c30:	950e      	str	r5, [sp, #56]	; 0x38
 8028c32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c34:	2dff      	cmp	r5, #255	; 0xff
 8028c36:	d020      	beq.n	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028c38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028c3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028c3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c40:	436f      	muls	r7, r5
 8028c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028c44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c48:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028c4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c56:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c5a:	44bc      	add	ip, r7
 8028c5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c74:	ea4c 050a 	orr.w	r5, ip, sl
 8028c78:	9509      	str	r5, [sp, #36]	; 0x24
 8028c7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c7c:	2dff      	cmp	r5, #255	; 0xff
 8028c7e:	d020      	beq.n	8028cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8028c80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c82:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028c86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c88:	436f      	muls	r7, r5
 8028c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c90:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028c94:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028c9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c9e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ca2:	44bc      	add	ip, r7
 8028ca4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028ca8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028cac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028cb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028cb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028cb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028cbc:	ea4c 050a 	orr.w	r5, ip, sl
 8028cc0:	950f      	str	r5, [sp, #60]	; 0x3c
 8028cc2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028cc4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028cc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028ccc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028cd2:	fb0e f707 	mul.w	r7, lr, r7
 8028cd6:	fb02 770c 	mla	r7, r2, ip, r7
 8028cda:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028cde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028ce0:	fb00 770c 	mla	r7, r0, ip, r7
 8028ce4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028cea:	fb08 770c 	mla	r7, r8, ip, r7
 8028cee:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028cf2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028cf4:	fb0e fe0c 	mul.w	lr, lr, ip
 8028cf8:	0a3f      	lsrs	r7, r7, #8
 8028cfa:	fb02 e303 	mla	r3, r2, r3, lr
 8028cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028d00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028d04:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028d0a:	fb00 330a 	mla	r3, r0, sl, r3
 8028d0e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028d12:	f8b9 0000 	ldrh.w	r0, [r9]
 8028d16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028d1c:	1202      	asrs	r2, r0, #8
 8028d1e:	4359      	muls	r1, r3
 8028d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d24:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028d28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028d2c:	1c4b      	adds	r3, r1, #1
 8028d2e:	ea47 070c 	orr.w	r7, r7, ip
 8028d32:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028d36:	0c3b      	lsrs	r3, r7, #16
 8028d38:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028d3c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028d40:	b2ff      	uxtb	r7, r7
 8028d42:	fb13 f305 	smulbb	r3, r3, r5
 8028d46:	b2c9      	uxtb	r1, r1
 8028d48:	fb17 f705 	smulbb	r7, r7, r5
 8028d4c:	fb02 3201 	mla	r2, r2, r1, r3
 8028d50:	10c3      	asrs	r3, r0, #3
 8028d52:	fb1c fc05 	smulbb	ip, ip, r5
 8028d56:	00c0      	lsls	r0, r0, #3
 8028d58:	b292      	uxth	r2, r2
 8028d5a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028d5e:	b2c0      	uxtb	r0, r0
 8028d60:	fb03 c301 	mla	r3, r3, r1, ip
 8028d64:	fb00 7001 	mla	r0, r0, r1, r7
 8028d68:	1c51      	adds	r1, r2, #1
 8028d6a:	b29b      	uxth	r3, r3
 8028d6c:	b280      	uxth	r0, r0
 8028d6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028d72:	f100 0c01 	add.w	ip, r0, #1
 8028d76:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028d7a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028d7e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028d82:	ea4c 0202 	orr.w	r2, ip, r2
 8028d86:	f103 0c01 	add.w	ip, r3, #1
 8028d8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028d8e:	095b      	lsrs	r3, r3, #5
 8028d90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d94:	431a      	orrs	r2, r3
 8028d96:	f8a9 2000 	strh.w	r2, [r9]
 8028d9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028d9c:	f109 0902 	add.w	r9, r9, #2
 8028da0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028da4:	441c      	add	r4, r3
 8028da6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028da8:	441e      	add	r6, r3
 8028daa:	e647      	b.n	8028a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028dac:	2800      	cmp	r0, #0
 8028dae:	f43f aedf 	beq.w	8028b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028db2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028db6:	9109      	str	r1, [sp, #36]	; 0x24
 8028db8:	0e09      	lsrs	r1, r1, #24
 8028dba:	9112      	str	r1, [sp, #72]	; 0x48
 8028dbc:	e6d8      	b.n	8028b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028dbe:	b01d      	add	sp, #116	; 0x74
 8028dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028dc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dc8:	b085      	sub	sp, #20
 8028dca:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028dce:	9102      	str	r1, [sp, #8]
 8028dd0:	2c00      	cmp	r4, #0
 8028dd2:	fb04 7103 	mla	r1, r4, r3, r7
 8028dd6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028dda:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028dde:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028de2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8028de6:	f2c0 810c 	blt.w	8029002 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028dea:	45a6      	cmp	lr, r4
 8028dec:	f340 8109 	ble.w	8029002 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028df0:	2f00      	cmp	r7, #0
 8028df2:	f2c0 8104 	blt.w	8028ffe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028df6:	42bb      	cmp	r3, r7
 8028df8:	f340 8101 	ble.w	8028ffe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028dfc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028e00:	1c7a      	adds	r2, r7, #1
 8028e02:	f100 8101 	bmi.w	8029008 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028e06:	4293      	cmp	r3, r2
 8028e08:	f340 80fe 	ble.w	8029008 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028e0c:	2e00      	cmp	r6, #0
 8028e0e:	f000 80fd 	beq.w	802900c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8028e12:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028e16:	3401      	adds	r4, #1
 8028e18:	f100 80fc 	bmi.w	8029014 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028e1c:	45a6      	cmp	lr, r4
 8028e1e:	f340 80f9 	ble.w	8029014 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028e22:	2800      	cmp	r0, #0
 8028e24:	f000 80f9 	beq.w	802901a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8028e28:	2f00      	cmp	r7, #0
 8028e2a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8028e2e:	f2c0 80ef 	blt.w	8029010 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028e32:	42bb      	cmp	r3, r7
 8028e34:	f340 80ec 	ble.w	8029010 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028e38:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028e3c:	3701      	adds	r7, #1
 8028e3e:	f100 80ef 	bmi.w	8029020 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028e42:	42bb      	cmp	r3, r7
 8028e44:	f340 80ec 	ble.w	8029020 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028e48:	2e00      	cmp	r6, #0
 8028e4a:	f000 80eb 	beq.w	8029024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8028e4e:	6852      	ldr	r2, [r2, #4]
 8028e50:	b2b6      	uxth	r6, r6
 8028e52:	b280      	uxth	r0, r0
 8028e54:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028e58:	fb00 fe06 	mul.w	lr, r0, r6
 8028e5c:	0136      	lsls	r6, r6, #4
 8028e5e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028e62:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028e66:	eba6 070e 	sub.w	r7, r6, lr
 8028e6a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028e6e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028e72:	b280      	uxth	r0, r0
 8028e74:	b2bf      	uxth	r7, r7
 8028e76:	1a1b      	subs	r3, r3, r0
 8028e78:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028e7c:	fb07 f60a 	mul.w	r6, r7, sl
 8028e80:	b29b      	uxth	r3, r3
 8028e82:	fb0b 6603 	mla	r6, fp, r3, r6
 8028e86:	fb00 6609 	mla	r6, r0, r9, r6
 8028e8a:	fb0e 6608 	mla	r6, lr, r8, r6
 8028e8e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028e92:	9600      	str	r6, [sp, #0]
 8028e94:	2e00      	cmp	r6, #0
 8028e96:	f000 80af 	beq.w	8028ff8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8028e9a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028e9e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028ea2:	9e02      	ldr	r6, [sp, #8]
 8028ea4:	fb0b fc0c 	mul.w	ip, fp, ip
 8028ea8:	fb0b f505 	mul.w	r5, fp, r5
 8028eac:	8836      	ldrh	r6, [r6, #0]
 8028eae:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028eb2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028eb6:	9501      	str	r5, [sp, #4]
 8028eb8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028ebc:	44dc      	add	ip, fp
 8028ebe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ec2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8028ec6:	9503      	str	r5, [sp, #12]
 8028ec8:	9d01      	ldr	r5, [sp, #4]
 8028eca:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028ece:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028ed2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8028ed6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028eda:	fb0a fc0c 	mul.w	ip, sl, ip
 8028ede:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028ee2:	fb0a fa01 	mul.w	sl, sl, r1
 8028ee6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028eea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028eee:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8028ef2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028ef6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028efa:	4465      	add	r5, ip
 8028efc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028f00:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f08:	fb09 fc0c 	mul.w	ip, r9, ip
 8028f0c:	0a2d      	lsrs	r5, r5, #8
 8028f0e:	fb09 f904 	mul.w	r9, r9, r4
 8028f12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f16:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028f1a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028f1e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8028f22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028f26:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f2a:	437d      	muls	r5, r7
 8028f2c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028f30:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8028f34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028f38:	4461      	add	r1, ip
 8028f3a:	fb08 f404 	mul.w	r4, r8, r4
 8028f3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f42:	fb08 f802 	mul.w	r8, r8, r2
 8028f46:	0a09      	lsrs	r1, r1, #8
 8028f48:	0a22      	lsrs	r2, r4, #8
 8028f4a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028f4e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f52:	fb07 f70a 	mul.w	r7, r7, sl
 8028f56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028f5a:	4414      	add	r4, r2
 8028f5c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028f60:	0a24      	lsrs	r4, r4, #8
 8028f62:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028f66:	9a03      	ldr	r2, [sp, #12]
 8028f68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028f6c:	fb02 5503 	mla	r5, r2, r3, r5
 8028f70:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028f74:	fb04 540e 	mla	r4, r4, lr, r5
 8028f78:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028f7c:	fb01 4100 	mla	r1, r1, r0, r4
 8028f80:	0a09      	lsrs	r1, r1, #8
 8028f82:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8028f86:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8028f8a:	fb03 7101 	mla	r1, r3, r1, r7
 8028f8e:	9b00      	ldr	r3, [sp, #0]
 8028f90:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028f94:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028f98:	43da      	mvns	r2, r3
 8028f9a:	1233      	asrs	r3, r6, #8
 8028f9c:	fb00 e101 	mla	r1, r0, r1, lr
 8028fa0:	10f0      	asrs	r0, r6, #3
 8028fa2:	b2d2      	uxtb	r2, r2
 8028fa4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028fa8:	0a09      	lsrs	r1, r1, #8
 8028faa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028fae:	00f6      	lsls	r6, r6, #3
 8028fb0:	4353      	muls	r3, r2
 8028fb2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028fb6:	4350      	muls	r0, r2
 8028fb8:	b2f6      	uxtb	r6, r6
 8028fba:	4321      	orrs	r1, r4
 8028fbc:	4356      	muls	r6, r2
 8028fbe:	1c5a      	adds	r2, r3, #1
 8028fc0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028fc4:	0c0b      	lsrs	r3, r1, #16
 8028fc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028fca:	1c42      	adds	r2, r0, #1
 8028fcc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028fd0:	0a0a      	lsrs	r2, r1, #8
 8028fd2:	021b      	lsls	r3, r3, #8
 8028fd4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028fd8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028fdc:	00d2      	lsls	r2, r2, #3
 8028fde:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028fe2:	4313      	orrs	r3, r2
 8028fe4:	1c72      	adds	r2, r6, #1
 8028fe6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8028fea:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8028fee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028ff2:	4319      	orrs	r1, r3
 8028ff4:	9b02      	ldr	r3, [sp, #8]
 8028ff6:	8019      	strh	r1, [r3, #0]
 8028ff8:	b005      	add	sp, #20
 8028ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ffe:	2500      	movs	r5, #0
 8029000:	e6fe      	b.n	8028e00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8029002:	2100      	movs	r1, #0
 8029004:	460d      	mov	r5, r1
 8029006:	e706      	b.n	8028e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029008:	2100      	movs	r1, #0
 802900a:	e704      	b.n	8028e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802900c:	4631      	mov	r1, r6
 802900e:	e702      	b.n	8028e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029010:	2400      	movs	r4, #0
 8029012:	e713      	b.n	8028e3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029014:	2200      	movs	r2, #0
 8029016:	4614      	mov	r4, r2
 8029018:	e71a      	b.n	8028e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802901a:	4602      	mov	r2, r0
 802901c:	4604      	mov	r4, r0
 802901e:	e717      	b.n	8028e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029020:	2200      	movs	r2, #0
 8029022:	e715      	b.n	8028e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029024:	4632      	mov	r2, r6
 8029026:	e713      	b.n	8028e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08029028 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802902c:	b09b      	sub	sp, #108	; 0x6c
 802902e:	9218      	str	r2, [sp, #96]	; 0x60
 8029030:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029032:	9019      	str	r0, [sp, #100]	; 0x64
 8029034:	9116      	str	r1, [sp, #88]	; 0x58
 8029036:	6850      	ldr	r0, [r2, #4]
 8029038:	9307      	str	r3, [sp, #28]
 802903a:	6812      	ldr	r2, [r2, #0]
 802903c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029040:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029044:	fb00 1303 	mla	r3, r0, r3, r1
 8029048:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802904c:	930a      	str	r3, [sp, #40]	; 0x28
 802904e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029050:	681b      	ldr	r3, [r3, #0]
 8029052:	930f      	str	r3, [sp, #60]	; 0x3c
 8029054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029056:	2b00      	cmp	r3, #0
 8029058:	dc03      	bgt.n	8029062 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802905a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802905c:	2b00      	cmp	r3, #0
 802905e:	f340 8387 	ble.w	8029770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029062:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029064:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029068:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802906c:	1e48      	subs	r0, r1, #1
 802906e:	1e57      	subs	r7, r2, #1
 8029070:	9b07      	ldr	r3, [sp, #28]
 8029072:	2b00      	cmp	r3, #0
 8029074:	f340 8166 	ble.w	8029344 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029078:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802907c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029080:	d406      	bmi.n	8029090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029082:	4584      	cmp	ip, r0
 8029084:	da04      	bge.n	8029090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029086:	2b00      	cmp	r3, #0
 8029088:	db02      	blt.n	8029090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802908a:	42bb      	cmp	r3, r7
 802908c:	f2c0 815b 	blt.w	8029346 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029090:	f11c 0c01 	adds.w	ip, ip, #1
 8029094:	f100 814b 	bmi.w	802932e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029098:	4561      	cmp	r1, ip
 802909a:	f2c0 8148 	blt.w	802932e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802909e:	3301      	adds	r3, #1
 80290a0:	f100 8145 	bmi.w	802932e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80290a4:	429a      	cmp	r2, r3
 80290a6:	f2c0 8142 	blt.w	802932e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80290aa:	9b07      	ldr	r3, [sp, #28]
 80290ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80290ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80290b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	f340 8165 	ble.w	8029382 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80290b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80290ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80290be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80290c0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80290c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80290c8:	1422      	asrs	r2, r4, #16
 80290ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80290ce:	689b      	ldr	r3, [r3, #8]
 80290d0:	f100 81d5 	bmi.w	802947e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80290d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80290d8:	4542      	cmp	r2, r8
 80290da:	f280 81d0 	bge.w	802947e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80290de:	f1bc 0f00 	cmp.w	ip, #0
 80290e2:	f2c0 81cc 	blt.w	802947e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80290e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80290ea:	45c4      	cmp	ip, r8
 80290ec:	f280 81c7 	bge.w	802947e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80290f0:	b21b      	sxth	r3, r3
 80290f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80290f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80290f8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80290fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029100:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029104:	2900      	cmp	r1, #0
 8029106:	f000 8182 	beq.w	802940e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802910a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802910e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029110:	0e2d      	lsrs	r5, r5, #24
 8029112:	9512      	str	r5, [sp, #72]	; 0x48
 8029114:	b180      	cbz	r0, 8029138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802911a:	3b01      	subs	r3, #1
 802911c:	009b      	lsls	r3, r3, #2
 802911e:	3304      	adds	r3, #4
 8029120:	eb08 0c03 	add.w	ip, r8, r3
 8029124:	f858 3003 	ldr.w	r3, [r8, r3]
 8029128:	9308      	str	r3, [sp, #32]
 802912a:	0e1b      	lsrs	r3, r3, #24
 802912c:	9310      	str	r3, [sp, #64]	; 0x40
 802912e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029132:	930c      	str	r3, [sp, #48]	; 0x30
 8029134:	0e1b      	lsrs	r3, r3, #24
 8029136:	9313      	str	r3, [sp, #76]	; 0x4c
 8029138:	b289      	uxth	r1, r1
 802913a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802913c:	b280      	uxth	r0, r0
 802913e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029140:	fb01 f900 	mul.w	r9, r1, r0
 8029144:	0109      	lsls	r1, r1, #4
 8029146:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802914a:	eba1 0809 	sub.w	r8, r1, r9
 802914e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8029152:	b280      	uxth	r0, r0
 8029154:	fa1f f888 	uxth.w	r8, r8
 8029158:	1a09      	subs	r1, r1, r0
 802915a:	fb08 f303 	mul.w	r3, r8, r3
 802915e:	b289      	uxth	r1, r1
 8029160:	fb01 330e 	mla	r3, r1, lr, r3
 8029164:	fb00 3305 	mla	r3, r0, r5, r3
 8029168:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802916a:	fb09 3305 	mla	r3, r9, r5, r3
 802916e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029172:	2b00      	cmp	r3, #0
 8029174:	f000 80d2 	beq.w	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029178:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802917c:	d01b      	beq.n	80291b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802917e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029186:	fb0e fa0a 	mul.w	sl, lr, sl
 802918a:	fb0e fe02 	mul.w	lr, lr, r2
 802918e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029192:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029196:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802919a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802919e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80291a2:	4452      	add	r2, sl
 80291a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291a8:	0a12      	lsrs	r2, r2, #8
 80291aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80291ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80291b2:	ea42 020c 	orr.w	r2, r2, ip
 80291b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80291b8:	2dff      	cmp	r5, #255	; 0xff
 80291ba:	d021      	beq.n	8029200 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80291bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80291be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80291c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80291c4:	fb05 fb0b 	mul.w	fp, r5, fp
 80291c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80291ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80291ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80291d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80291d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80291d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80291dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80291e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80291e4:	44de      	add	lr, fp
 80291e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80291ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80291ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80291f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80291fa:	ea4e 050a 	orr.w	r5, lr, sl
 80291fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8029200:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029202:	2dff      	cmp	r5, #255	; 0xff
 8029204:	d021      	beq.n	802924a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8029206:	9d08      	ldr	r5, [sp, #32]
 8029208:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802920c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802920e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029212:	9d08      	ldr	r5, [sp, #32]
 8029214:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029218:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802921a:	fb05 fa0e 	mul.w	sl, r5, lr
 802921e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029222:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802922a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802922e:	44de      	add	lr, fp
 8029230:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029234:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802923c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029244:	ea4e 050a 	orr.w	r5, lr, sl
 8029248:	9508      	str	r5, [sp, #32]
 802924a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802924c:	2dff      	cmp	r5, #255	; 0xff
 802924e:	d021      	beq.n	8029294 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029252:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029256:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029258:	fb05 fb0b 	mul.w	fp, r5, fp
 802925c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802925e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029262:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029264:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029268:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802926c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029270:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029274:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029278:	44de      	add	lr, fp
 802927a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802927e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802928a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802928e:	ea4e 050a 	orr.w	r5, lr, sl
 8029292:	950c      	str	r5, [sp, #48]	; 0x30
 8029294:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029296:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802929a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802929e:	2bff      	cmp	r3, #255	; 0xff
 80292a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292a4:	9d08      	ldr	r5, [sp, #32]
 80292a6:	fb08 fc0c 	mul.w	ip, r8, ip
 80292aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80292ae:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80292b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80292b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80292b8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80292bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80292be:	fb09 cc0e 	mla	ip, r9, lr, ip
 80292c2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80292c6:	fb08 f80e 	mul.w	r8, r8, lr
 80292ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292ce:	fb01 8202 	mla	r2, r1, r2, r8
 80292d2:	9908      	ldr	r1, [sp, #32]
 80292d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80292d8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80292dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80292de:	fb00 220a 	mla	r2, r0, sl, r2
 80292e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80292e6:	fb09 2900 	mla	r9, r9, r0, r2
 80292ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80292ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80292f2:	ea4c 0c09 	orr.w	ip, ip, r9
 80292f6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80292fa:	f040 8091 	bne.w	8029420 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80292fe:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029302:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8029306:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802930a:	f022 0207 	bic.w	r2, r2, #7
 802930e:	431a      	orrs	r2, r3
 8029310:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029314:	ea4c 0c02 	orr.w	ip, ip, r2
 8029318:	f8a7 c000 	strh.w	ip, [r7]
 802931c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802931e:	3702      	adds	r7, #2
 8029320:	441c      	add	r4, r3
 8029322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029324:	441e      	add	r6, r3
 8029326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029328:	3b01      	subs	r3, #1
 802932a:	9317      	str	r3, [sp, #92]	; 0x5c
 802932c:	e6c0      	b.n	80290b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802932e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029330:	441c      	add	r4, r3
 8029332:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029334:	441e      	add	r6, r3
 8029336:	9b07      	ldr	r3, [sp, #28]
 8029338:	3b01      	subs	r3, #1
 802933a:	9307      	str	r3, [sp, #28]
 802933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802933e:	3302      	adds	r3, #2
 8029340:	930a      	str	r3, [sp, #40]	; 0x28
 8029342:	e695      	b.n	8029070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029344:	d024      	beq.n	8029390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029346:	9b07      	ldr	r3, [sp, #28]
 8029348:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802934a:	3b01      	subs	r3, #1
 802934c:	fb00 4003 	mla	r0, r0, r3, r4
 8029350:	1400      	asrs	r0, r0, #16
 8029352:	f53f aeaa 	bmi.w	80290aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029356:	3901      	subs	r1, #1
 8029358:	4288      	cmp	r0, r1
 802935a:	f6bf aea6 	bge.w	80290aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802935e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029360:	fb01 6303 	mla	r3, r1, r3, r6
 8029364:	141b      	asrs	r3, r3, #16
 8029366:	f53f aea0 	bmi.w	80290aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802936a:	3a01      	subs	r2, #1
 802936c:	4293      	cmp	r3, r2
 802936e:	f6bf ae9c 	bge.w	80290aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029372:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029376:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802937a:	f1bb 0f00 	cmp.w	fp, #0
 802937e:	f300 809a 	bgt.w	80294b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029382:	9b07      	ldr	r3, [sp, #28]
 8029384:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802938a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802938e:	930a      	str	r3, [sp, #40]	; 0x28
 8029390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029392:	2b00      	cmp	r3, #0
 8029394:	f340 81ec 	ble.w	8029770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802939c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802939e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80293a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80293a6:	eef0 6a62 	vmov.f32	s13, s5
 80293aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80293ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80293b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293b6:	ee16 4a90 	vmov	r4, s13
 80293ba:	eef0 6a43 	vmov.f32	s13, s6
 80293be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293c2:	ee16 6a90 	vmov	r6, s13
 80293c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80293ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80293ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80293d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80293d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80293da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80293de:	ee12 2a90 	vmov	r2, s5
 80293e2:	eef0 2a47 	vmov.f32	s5, s14
 80293e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80293ea:	ee13 2a10 	vmov	r2, s6
 80293ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80293f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80293f2:	eeb0 3a67 	vmov.f32	s6, s15
 80293f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80293fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80293fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80293fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029400:	3b01      	subs	r3, #1
 8029402:	9316      	str	r3, [sp, #88]	; 0x58
 8029404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029406:	bf08      	it	eq
 8029408:	4613      	moveq	r3, r2
 802940a:	9307      	str	r3, [sp, #28]
 802940c:	e622      	b.n	8029054 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802940e:	2800      	cmp	r0, #0
 8029410:	f43f ae92 	beq.w	8029138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029414:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029418:	9308      	str	r3, [sp, #32]
 802941a:	0e1b      	lsrs	r3, r3, #24
 802941c:	9310      	str	r3, [sp, #64]	; 0x40
 802941e:	e68b      	b.n	8029138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029420:	8839      	ldrh	r1, [r7, #0]
 8029422:	43db      	mvns	r3, r3
 8029424:	4dd4      	ldr	r5, [pc, #848]	; (8029778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029426:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802942a:	fa5f f883 	uxtb.w	r8, r3
 802942e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029432:	10c8      	asrs	r0, r1, #3
 8029434:	00cb      	lsls	r3, r1, #3
 8029436:	fb0e fe08 	mul.w	lr, lr, r8
 802943a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802943e:	b2db      	uxtb	r3, r3
 8029440:	f10e 0101 	add.w	r1, lr, #1
 8029444:	fb00 f008 	mul.w	r0, r0, r8
 8029448:	fb03 f308 	mul.w	r3, r3, r8
 802944c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029450:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029454:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029458:	f100 0e01 	add.w	lr, r0, #1
 802945c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029460:	b2c9      	uxtb	r1, r1
 8029462:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029466:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802946a:	00d2      	lsls	r2, r2, #3
 802946c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029470:	430a      	orrs	r2, r1
 8029472:	1c59      	adds	r1, r3, #1
 8029474:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029478:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802947c:	e748      	b.n	8029310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802947e:	f112 0801 	adds.w	r8, r2, #1
 8029482:	f53f af4b 	bmi.w	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029486:	4543      	cmp	r3, r8
 8029488:	f6ff af48 	blt.w	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802948c:	f11c 0801 	adds.w	r8, ip, #1
 8029490:	f53f af44 	bmi.w	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029494:	45c6      	cmp	lr, r8
 8029496:	f6ff af41 	blt.w	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802949a:	b21b      	sxth	r3, r3
 802949c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80294a0:	fa0f f28e 	sxth.w	r2, lr
 80294a4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80294a8:	9200      	str	r2, [sp, #0]
 80294aa:	4639      	mov	r1, r7
 80294ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80294ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80294b0:	f7ff fc88 	bl	8028dc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80294b4:	e732      	b.n	802931c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80294b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80294b8:	1421      	asrs	r1, r4, #16
 80294ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80294bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80294c0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80294c4:	1433      	asrs	r3, r6, #16
 80294c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80294ca:	fb07 1303 	mla	r3, r7, r3, r1
 80294ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80294d0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80294d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80294d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80294dc:	2a00      	cmp	r2, #0
 80294de:	f000 8108 	beq.w	80296f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80294e2:	684d      	ldr	r5, [r1, #4]
 80294e4:	950d      	str	r5, [sp, #52]	; 0x34
 80294e6:	0e2d      	lsrs	r5, r5, #24
 80294e8:	9514      	str	r5, [sp, #80]	; 0x50
 80294ea:	b178      	cbz	r0, 802950c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80294ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80294f0:	3f01      	subs	r7, #1
 80294f2:	00bf      	lsls	r7, r7, #2
 80294f4:	3704      	adds	r7, #4
 80294f6:	eb01 0e07 	add.w	lr, r1, r7
 80294fa:	59c9      	ldr	r1, [r1, r7]
 80294fc:	9109      	str	r1, [sp, #36]	; 0x24
 80294fe:	0e09      	lsrs	r1, r1, #24
 8029500:	9111      	str	r1, [sp, #68]	; 0x44
 8029502:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029506:	910e      	str	r1, [sp, #56]	; 0x38
 8029508:	0e09      	lsrs	r1, r1, #24
 802950a:	9115      	str	r1, [sp, #84]	; 0x54
 802950c:	b292      	uxth	r2, r2
 802950e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029510:	b280      	uxth	r0, r0
 8029512:	fb02 f900 	mul.w	r9, r2, r0
 8029516:	0112      	lsls	r2, r2, #4
 8029518:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802951c:	eba2 0e09 	sub.w	lr, r2, r9
 8029520:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029526:	b280      	uxth	r0, r0
 8029528:	fa1f fe8e 	uxth.w	lr, lr
 802952c:	1a09      	subs	r1, r1, r0
 802952e:	fb0e f202 	mul.w	r2, lr, r2
 8029532:	b289      	uxth	r1, r1
 8029534:	fb01 220c 	mla	r2, r1, ip, r2
 8029538:	fb00 2205 	mla	r2, r0, r5, r2
 802953c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802953e:	fb09 2205 	mla	r2, r9, r5, r2
 8029542:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029546:	2a00      	cmp	r2, #0
 8029548:	f000 80ca 	beq.w	80296e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802954c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029550:	d019      	beq.n	8029586 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029552:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802955a:	fb0c fa0a 	mul.w	sl, ip, sl
 802955e:	fb0c fc03 	mul.w	ip, ip, r3
 8029562:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029566:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802956a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802956e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029572:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029576:	4453      	add	r3, sl
 8029578:	0a3f      	lsrs	r7, r7, #8
 802957a:	0a1b      	lsrs	r3, r3, #8
 802957c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029580:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029584:	433b      	orrs	r3, r7
 8029586:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029588:	2dff      	cmp	r5, #255	; 0xff
 802958a:	d020      	beq.n	80295ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802958c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802958e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029592:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029594:	436f      	muls	r7, r5
 8029596:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029598:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802959c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80295a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80295a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80295a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80295aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80295ae:	44bc      	add	ip, r7
 80295b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80295b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80295b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80295bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80295c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80295c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80295c8:	ea4c 050a 	orr.w	r5, ip, sl
 80295cc:	950d      	str	r5, [sp, #52]	; 0x34
 80295ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80295d0:	2dff      	cmp	r5, #255	; 0xff
 80295d2:	d020      	beq.n	8029616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80295d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80295d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80295da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80295dc:	436f      	muls	r7, r5
 80295de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80295e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80295e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80295e6:	fb05 fa0c 	mul.w	sl, r5, ip
 80295ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80295ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80295f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80295f6:	44bc      	add	ip, r7
 80295f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80295fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029604:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029608:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802960c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029610:	ea4c 050a 	orr.w	r5, ip, sl
 8029614:	9509      	str	r5, [sp, #36]	; 0x24
 8029616:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029618:	2dff      	cmp	r5, #255	; 0xff
 802961a:	d020      	beq.n	802965e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802961c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802961e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029622:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029624:	436f      	muls	r7, r5
 8029626:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029628:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802962c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029630:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029632:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029636:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802963a:	fb05 fa0a 	mul.w	sl, r5, sl
 802963e:	44bc      	add	ip, r7
 8029640:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029648:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802964c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029650:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029654:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029658:	ea4c 050a 	orr.w	r5, ip, sl
 802965c:	950e      	str	r5, [sp, #56]	; 0x38
 802965e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029660:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029668:	2aff      	cmp	r2, #255	; 0xff
 802966a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802966e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029670:	fb0e f707 	mul.w	r7, lr, r7
 8029674:	fb01 770c 	mla	r7, r1, ip, r7
 8029678:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802967c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802967e:	fb00 770c 	mla	r7, r0, ip, r7
 8029682:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029686:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029688:	fb09 770c 	mla	r7, r9, ip, r7
 802968c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029690:	fb0e fe0c 	mul.w	lr, lr, ip
 8029694:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029698:	fb01 e303 	mla	r3, r1, r3, lr
 802969c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802969e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80296a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80296a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80296a8:	fb00 330a 	mla	r3, r0, sl, r3
 80296ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80296b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80296b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80296b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80296bc:	ea47 070c 	orr.w	r7, r7, ip
 80296c0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80296c4:	d11e      	bne.n	8029704 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80296c6:	097a      	lsrs	r2, r7, #5
 80296c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80296cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80296d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80296d4:	f023 0307 	bic.w	r3, r3, #7
 80296d8:	4313      	orrs	r3, r2
 80296da:	431f      	orrs	r7, r3
 80296dc:	f8a8 7000 	strh.w	r7, [r8]
 80296e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80296e2:	f108 0802 	add.w	r8, r8, #2
 80296e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80296ea:	441c      	add	r4, r3
 80296ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80296ee:	441e      	add	r6, r3
 80296f0:	e643      	b.n	802937a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80296f2:	2800      	cmp	r0, #0
 80296f4:	f43f af0a 	beq.w	802950c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80296f8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80296fc:	9109      	str	r1, [sp, #36]	; 0x24
 80296fe:	0e09      	lsrs	r1, r1, #24
 8029700:	9111      	str	r1, [sp, #68]	; 0x44
 8029702:	e703      	b.n	802950c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029704:	f8b8 1000 	ldrh.w	r1, [r8]
 8029708:	43d2      	mvns	r2, r2
 802970a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802970e:	fa5f fe82 	uxtb.w	lr, r2
 8029712:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029716:	10c8      	asrs	r0, r1, #3
 8029718:	00ca      	lsls	r2, r1, #3
 802971a:	fb0c fc0e 	mul.w	ip, ip, lr
 802971e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029722:	b2d2      	uxtb	r2, r2
 8029724:	f10c 0101 	add.w	r1, ip, #1
 8029728:	fb00 f00e 	mul.w	r0, r0, lr
 802972c:	fb02 f20e 	mul.w	r2, r2, lr
 8029730:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029734:	0c39      	lsrs	r1, r7, #16
 8029736:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802973a:	490f      	ldr	r1, [pc, #60]	; (8029778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802973c:	fa5f fc8c 	uxtb.w	ip, ip
 8029740:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029744:	1c41      	adds	r1, r0, #1
 8029746:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802974a:	1c51      	adds	r1, r2, #1
 802974c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029750:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029754:	00c0      	lsls	r0, r0, #3
 8029756:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802975a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802975e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029762:	ea4c 0c00 	orr.w	ip, ip, r0
 8029766:	ea47 0c0c 	orr.w	ip, r7, ip
 802976a:	f8a8 c000 	strh.w	ip, [r8]
 802976e:	e7b7      	b.n	80296e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029770:	b01b      	add	sp, #108	; 0x6c
 8029772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029776:	bf00      	nop
 8029778:	fffff800 	.word	0xfffff800

0802977c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029780:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029784:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029788:	2d00      	cmp	r5, #0
 802978a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802978e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029792:	fb05 0e03 	mla	lr, r5, r3, r0
 8029796:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802979a:	f2c0 808c 	blt.w	80298b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802979e:	45a9      	cmp	r9, r5
 80297a0:	f340 8089 	ble.w	80298b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80297a4:	2800      	cmp	r0, #0
 80297a6:	f2c0 8084 	blt.w	80298b2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80297aa:	4580      	cmp	r8, r0
 80297ac:	f340 8081 	ble.w	80298b2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80297b0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80297b4:	f01e 0f01 	tst.w	lr, #1
 80297b8:	5d16      	ldrb	r6, [r2, r4]
 80297ba:	bf0c      	ite	eq
 80297bc:	f006 060f 	andeq.w	r6, r6, #15
 80297c0:	1136      	asrne	r6, r6, #4
 80297c2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80297c6:	b2f6      	uxtb	r6, r6
 80297c8:	1c44      	adds	r4, r0, #1
 80297ca:	d477      	bmi.n	80298bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80297cc:	45a0      	cmp	r8, r4
 80297ce:	dd75      	ble.n	80298bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80297d0:	2f00      	cmp	r7, #0
 80297d2:	d075      	beq.n	80298c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80297d4:	f10e 0a01 	add.w	sl, lr, #1
 80297d8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80297dc:	f01a 0f01 	tst.w	sl, #1
 80297e0:	5d14      	ldrb	r4, [r2, r4]
 80297e2:	bf0c      	ite	eq
 80297e4:	f004 040f 	andeq.w	r4, r4, #15
 80297e8:	1124      	asrne	r4, r4, #4
 80297ea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80297ee:	b2e4      	uxtb	r4, r4
 80297f0:	3501      	adds	r5, #1
 80297f2:	d469      	bmi.n	80298c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80297f4:	45a9      	cmp	r9, r5
 80297f6:	dd67      	ble.n	80298c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80297f8:	f1bc 0f00 	cmp.w	ip, #0
 80297fc:	d067      	beq.n	80298ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80297fe:	2800      	cmp	r0, #0
 8029800:	db60      	blt.n	80298c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029802:	4580      	cmp	r8, r0
 8029804:	dd5e      	ble.n	80298c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029806:	eb03 090e 	add.w	r9, r3, lr
 802980a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802980e:	f019 0f01 	tst.w	r9, #1
 8029812:	5d55      	ldrb	r5, [r2, r5]
 8029814:	bf0c      	ite	eq
 8029816:	f005 050f 	andeq.w	r5, r5, #15
 802981a:	112d      	asrne	r5, r5, #4
 802981c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029820:	b2ed      	uxtb	r5, r5
 8029822:	3001      	adds	r0, #1
 8029824:	d456      	bmi.n	80298d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029826:	4580      	cmp	r8, r0
 8029828:	dd54      	ble.n	80298d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802982a:	2f00      	cmp	r7, #0
 802982c:	d054      	beq.n	80298d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802982e:	3301      	adds	r3, #1
 8029830:	449e      	add	lr, r3
 8029832:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029836:	f01e 0f01 	tst.w	lr, #1
 802983a:	5cd0      	ldrb	r0, [r2, r3]
 802983c:	bf0c      	ite	eq
 802983e:	f000 000f 	andeq.w	r0, r0, #15
 8029842:	1100      	asrne	r0, r0, #4
 8029844:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029848:	b2c3      	uxtb	r3, r0
 802984a:	b2ba      	uxth	r2, r7
 802984c:	fa1f fc8c 	uxth.w	ip, ip
 8029850:	fb02 f00c 	mul.w	r0, r2, ip
 8029854:	0112      	lsls	r2, r2, #4
 8029856:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802985a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802985e:	1a12      	subs	r2, r2, r0
 8029860:	fa1f fc8c 	uxth.w	ip, ip
 8029864:	b292      	uxth	r2, r2
 8029866:	eba7 070c 	sub.w	r7, r7, ip
 802986a:	4362      	muls	r2, r4
 802986c:	b2bf      	uxth	r7, r7
 802986e:	fb06 2207 	mla	r2, r6, r7, r2
 8029872:	fb0c 2505 	mla	r5, ip, r5, r2
 8029876:	fb00 5303 	mla	r3, r0, r3, r5
 802987a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802987e:	b1b3      	cbz	r3, 80298ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029880:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029884:	435a      	muls	r2, r3
 8029886:	1c53      	adds	r3, r2, #1
 8029888:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802988c:	4a2d      	ldr	r2, [pc, #180]	; (8029944 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802988e:	121b      	asrs	r3, r3, #8
 8029890:	6812      	ldr	r2, [r2, #0]
 8029892:	2bff      	cmp	r3, #255	; 0xff
 8029894:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029898:	d120      	bne.n	80298dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802989a:	0950      	lsrs	r0, r2, #5
 802989c:	4b2a      	ldr	r3, [pc, #168]	; (8029948 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802989e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80298a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80298a6:	4033      	ands	r3, r6
 80298a8:	4318      	orrs	r0, r3
 80298aa:	4302      	orrs	r2, r0
 80298ac:	800a      	strh	r2, [r1, #0]
 80298ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298b2:	2600      	movs	r6, #0
 80298b4:	e788      	b.n	80297c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80298b6:	2400      	movs	r4, #0
 80298b8:	4626      	mov	r6, r4
 80298ba:	e799      	b.n	80297f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80298bc:	2400      	movs	r4, #0
 80298be:	e797      	b.n	80297f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80298c0:	463c      	mov	r4, r7
 80298c2:	e795      	b.n	80297f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80298c4:	2500      	movs	r5, #0
 80298c6:	e7ac      	b.n	8029822 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80298c8:	2300      	movs	r3, #0
 80298ca:	461d      	mov	r5, r3
 80298cc:	e7bd      	b.n	802984a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80298ce:	4663      	mov	r3, ip
 80298d0:	4665      	mov	r5, ip
 80298d2:	e7ba      	b.n	802984a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80298d4:	2300      	movs	r3, #0
 80298d6:	e7b8      	b.n	802984a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80298d8:	463b      	mov	r3, r7
 80298da:	e7b6      	b.n	802984a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80298dc:	880d      	ldrh	r5, [r1, #0]
 80298de:	b29f      	uxth	r7, r3
 80298e0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80298e4:	43db      	mvns	r3, r3
 80298e6:	122c      	asrs	r4, r5, #8
 80298e8:	fb10 f007 	smulbb	r0, r0, r7
 80298ec:	b2db      	uxtb	r3, r3
 80298ee:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80298f2:	b2f6      	uxtb	r6, r6
 80298f4:	b2d2      	uxtb	r2, r2
 80298f6:	fb04 0403 	mla	r4, r4, r3, r0
 80298fa:	10e8      	asrs	r0, r5, #3
 80298fc:	fb12 f207 	smulbb	r2, r2, r7
 8029900:	00ed      	lsls	r5, r5, #3
 8029902:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029906:	b2a4      	uxth	r4, r4
 8029908:	fb16 f607 	smulbb	r6, r6, r7
 802990c:	b2ed      	uxtb	r5, r5
 802990e:	fb00 6603 	mla	r6, r0, r3, r6
 8029912:	fb05 2303 	mla	r3, r5, r3, r2
 8029916:	b2b0      	uxth	r0, r6
 8029918:	b29a      	uxth	r2, r3
 802991a:	1c63      	adds	r3, r4, #1
 802991c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029920:	1c53      	adds	r3, r2, #1
 8029922:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029926:	1c42      	adds	r2, r0, #1
 8029928:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802992c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029930:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029934:	0940      	lsrs	r0, r0, #5
 8029936:	4323      	orrs	r3, r4
 8029938:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802993c:	4303      	orrs	r3, r0
 802993e:	800b      	strh	r3, [r1, #0]
 8029940:	e7b5      	b.n	80298ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029942:	bf00      	nop
 8029944:	200155f0 	.word	0x200155f0
 8029948:	00fff800 	.word	0x00fff800

0802994c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029950:	b097      	sub	sp, #92	; 0x5c
 8029952:	9214      	str	r2, [sp, #80]	; 0x50
 8029954:	9309      	str	r3, [sp, #36]	; 0x24
 8029956:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029958:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802995c:	9015      	str	r0, [sp, #84]	; 0x54
 802995e:	910d      	str	r1, [sp, #52]	; 0x34
 8029960:	6850      	ldr	r0, [r2, #4]
 8029962:	930f      	str	r3, [sp, #60]	; 0x3c
 8029964:	6812      	ldr	r2, [r2, #0]
 8029966:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802996a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802996e:	fb00 1303 	mla	r3, r0, r3, r1
 8029972:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029978:	689b      	ldr	r3, [r3, #8]
 802997a:	3301      	adds	r3, #1
 802997c:	f023 0301 	bic.w	r3, r3, #1
 8029980:	930a      	str	r3, [sp, #40]	; 0x28
 8029982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029984:	681f      	ldr	r7, [r3, #0]
 8029986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029988:	2b00      	cmp	r3, #0
 802998a:	dc03      	bgt.n	8029994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802998c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802998e:	2b00      	cmp	r3, #0
 8029990:	f340 8289 	ble.w	8029ea6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029994:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029996:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802999a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802999e:	1e48      	subs	r0, r1, #1
 80299a0:	f102 3cff 	add.w	ip, r2, #4294967295
 80299a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80299a6:	2b00      	cmp	r3, #0
 80299a8:	f340 80c5 	ble.w	8029b36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80299ac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80299b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80299b4:	d406      	bmi.n	80299c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80299b6:	4586      	cmp	lr, r0
 80299b8:	da04      	bge.n	80299c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80299ba:	2b00      	cmp	r3, #0
 80299bc:	db02      	blt.n	80299c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80299be:	4563      	cmp	r3, ip
 80299c0:	f2c0 80ba 	blt.w	8029b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80299c4:	f11e 0e01 	adds.w	lr, lr, #1
 80299c8:	f100 80ab 	bmi.w	8029b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80299cc:	4571      	cmp	r1, lr
 80299ce:	f2c0 80a8 	blt.w	8029b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80299d2:	3301      	adds	r3, #1
 80299d4:	f100 80a5 	bmi.w	8029b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80299d8:	429a      	cmp	r2, r3
 80299da:	f2c0 80a2 	blt.w	8029b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80299de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80299e0:	46c8      	mov	r8, r9
 80299e2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80299e6:	930e      	str	r3, [sp, #56]	; 0x38
 80299e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	f340 80c4 	ble.w	8029b78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80299f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80299f2:	1430      	asrs	r0, r6, #16
 80299f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80299f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80299fc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029a00:	1423      	asrs	r3, r4, #16
 8029a02:	f100 814f 	bmi.w	8029ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029a06:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029a0a:	455b      	cmp	r3, fp
 8029a0c:	f280 814a 	bge.w	8029ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029a10:	2800      	cmp	r0, #0
 8029a12:	f2c0 8147 	blt.w	8029ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029a16:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029a1a:	4558      	cmp	r0, fp
 8029a1c:	f280 8142 	bge.w	8029ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029a20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029a22:	fb00 3305 	mla	r3, r0, r5, r3
 8029a26:	0858      	lsrs	r0, r3, #1
 8029a28:	07dd      	lsls	r5, r3, #31
 8029a2a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029a2e:	bf54      	ite	pl
 8029a30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029a34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029a38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029a3c:	fa5f fc8c 	uxtb.w	ip, ip
 8029a40:	2a00      	cmp	r2, #0
 8029a42:	f000 80dd 	beq.w	8029c00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8029a46:	1c58      	adds	r0, r3, #1
 8029a48:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029a4c:	07c0      	lsls	r0, r0, #31
 8029a4e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029a52:	bf54      	ite	pl
 8029a54:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029a58:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029a5c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029a60:	fa5f f08e 	uxtb.w	r0, lr
 8029a64:	9010      	str	r0, [sp, #64]	; 0x40
 8029a66:	b1d9      	cbz	r1, 8029aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029a68:	4453      	add	r3, sl
 8029a6a:	0858      	lsrs	r0, r3, #1
 8029a6c:	07dd      	lsls	r5, r3, #31
 8029a6e:	f103 0301 	add.w	r3, r3, #1
 8029a72:	5c38      	ldrb	r0, [r7, r0]
 8029a74:	bf54      	ite	pl
 8029a76:	f000 000f 	andpl.w	r0, r0, #15
 8029a7a:	1100      	asrmi	r0, r0, #4
 8029a7c:	07dd      	lsls	r5, r3, #31
 8029a7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029a82:	b2c0      	uxtb	r0, r0
 8029a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8029a86:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029a8a:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029a8e:	bf54      	ite	pl
 8029a90:	f00e 030f 	andpl.w	r3, lr, #15
 8029a94:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029a98:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029a9c:	b2db      	uxtb	r3, r3
 8029a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8029aa0:	b292      	uxth	r2, r2
 8029aa2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029aa4:	b289      	uxth	r1, r1
 8029aa6:	fb02 f301 	mul.w	r3, r2, r1
 8029aaa:	0112      	lsls	r2, r2, #4
 8029aac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029ab0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029ab4:	1ad2      	subs	r2, r2, r3
 8029ab6:	b289      	uxth	r1, r1
 8029ab8:	b292      	uxth	r2, r2
 8029aba:	1a40      	subs	r0, r0, r1
 8029abc:	436a      	muls	r2, r5
 8029abe:	b280      	uxth	r0, r0
 8029ac0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029ac6:	fb01 c102 	mla	r1, r1, r2, ip
 8029aca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029acc:	fb03 1302 	mla	r3, r3, r2, r1
 8029ad0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029ad4:	b1db      	cbz	r3, 8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029ad8:	4353      	muls	r3, r2
 8029ada:	1c5a      	adds	r2, r3, #1
 8029adc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029ae0:	4ac6      	ldr	r2, [pc, #792]	; (8029dfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029ae2:	121b      	asrs	r3, r3, #8
 8029ae4:	6812      	ldr	r2, [r2, #0]
 8029ae6:	2bff      	cmp	r3, #255	; 0xff
 8029ae8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029aec:	f040 8099 	bne.w	8029c22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8029af0:	0953      	lsrs	r3, r2, #5
 8029af2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029af6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029afa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029afe:	f02c 0c07 	bic.w	ip, ip, #7
 8029b02:	ea43 0c0c 	orr.w	ip, r3, ip
 8029b06:	ea4c 0202 	orr.w	r2, ip, r2
 8029b0a:	f8a8 2000 	strh.w	r2, [r8]
 8029b0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029b10:	f108 0802 	add.w	r8, r8, #2
 8029b14:	441c      	add	r4, r3
 8029b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029b18:	441e      	add	r6, r3
 8029b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029b1c:	3b01      	subs	r3, #1
 8029b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8029b20:	e762      	b.n	80299e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029b24:	f109 0902 	add.w	r9, r9, #2
 8029b28:	441c      	add	r4, r3
 8029b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029b2c:	441e      	add	r6, r3
 8029b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b30:	3b01      	subs	r3, #1
 8029b32:	9309      	str	r3, [sp, #36]	; 0x24
 8029b34:	e736      	b.n	80299a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029b36:	d024      	beq.n	8029b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8029b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b3a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8029b3c:	3b01      	subs	r3, #1
 8029b3e:	fb00 4003 	mla	r0, r0, r3, r4
 8029b42:	1400      	asrs	r0, r0, #16
 8029b44:	f53f af4b 	bmi.w	80299de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029b48:	3901      	subs	r1, #1
 8029b4a:	4288      	cmp	r0, r1
 8029b4c:	f6bf af47 	bge.w	80299de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029b50:	9924      	ldr	r1, [sp, #144]	; 0x90
 8029b52:	fb01 6303 	mla	r3, r1, r3, r6
 8029b56:	141b      	asrs	r3, r3, #16
 8029b58:	f53f af41 	bmi.w	80299de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029b5c:	3a01      	subs	r2, #1
 8029b5e:	4293      	cmp	r3, r2
 8029b60:	f6bf af3d 	bge.w	80299de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029b64:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029b68:	46c8      	mov	r8, r9
 8029b6a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029b6e:	930e      	str	r3, [sp, #56]	; 0x38
 8029b70:	f1bb 0f00 	cmp.w	fp, #0
 8029b74:	f300 80b7 	bgt.w	8029ce6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8029b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b7a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029b7e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029b84:	2b00      	cmp	r3, #0
 8029b86:	f340 818e 	ble.w	8029ea6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029b90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029b94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029b98:	eef0 6a62 	vmov.f32	s13, s5
 8029b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029ba0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029ba4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ba8:	ee16 4a90 	vmov	r4, s13
 8029bac:	eef0 6a43 	vmov.f32	s13, s6
 8029bb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029bb4:	ee16 6a90 	vmov	r6, s13
 8029bb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029bbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029bc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029bc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029bc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029bcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029bd0:	ee12 2a90 	vmov	r2, s5
 8029bd4:	eef0 2a47 	vmov.f32	s5, s14
 8029bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bdc:	ee13 2a10 	vmov	r2, s6
 8029be0:	9323      	str	r3, [sp, #140]	; 0x8c
 8029be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029be4:	eeb0 3a67 	vmov.f32	s6, s15
 8029be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bec:	9324      	str	r3, [sp, #144]	; 0x90
 8029bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029bf2:	3b01      	subs	r3, #1
 8029bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8029bf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029bf8:	bf08      	it	eq
 8029bfa:	4613      	moveq	r3, r2
 8029bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8029bfe:	e6c2      	b.n	8029986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029c00:	2900      	cmp	r1, #0
 8029c02:	f43f af4d 	beq.w	8029aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029c06:	eb0a 0003 	add.w	r0, sl, r3
 8029c0a:	0843      	lsrs	r3, r0, #1
 8029c0c:	07c0      	lsls	r0, r0, #31
 8029c0e:	5cfb      	ldrb	r3, [r7, r3]
 8029c10:	bf54      	ite	pl
 8029c12:	f003 030f 	andpl.w	r3, r3, #15
 8029c16:	111b      	asrmi	r3, r3, #4
 8029c18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029c1c:	b2db      	uxtb	r3, r3
 8029c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029c20:	e73e      	b.n	8029aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029c22:	f8b8 e000 	ldrh.w	lr, [r8]
 8029c26:	fa1f fb83 	uxth.w	fp, r3
 8029c2a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029c2e:	43db      	mvns	r3, r3
 8029c30:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029c34:	fb11 f10b 	smulbb	r1, r1, fp
 8029c38:	b2db      	uxtb	r3, r3
 8029c3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029c3e:	fa5f fc8c 	uxtb.w	ip, ip
 8029c42:	b2d2      	uxtb	r2, r2
 8029c44:	fb00 1003 	mla	r0, r0, r3, r1
 8029c48:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029c4c:	fb1c fc0b 	smulbb	ip, ip, fp
 8029c50:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029c54:	b280      	uxth	r0, r0
 8029c56:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029c5a:	fb12 fb0b 	smulbb	fp, r2, fp
 8029c5e:	fa5f fe8e 	uxtb.w	lr, lr
 8029c62:	fb01 cc03 	mla	ip, r1, r3, ip
 8029c66:	fb0e bb03 	mla	fp, lr, r3, fp
 8029c6a:	1c43      	adds	r3, r0, #1
 8029c6c:	fa1f fc8c 	uxth.w	ip, ip
 8029c70:	fa1f fb8b 	uxth.w	fp, fp
 8029c74:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029c78:	f10c 0101 	add.w	r1, ip, #1
 8029c7c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029c80:	f10b 0001 	add.w	r0, fp, #1
 8029c84:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029c88:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029c8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029c90:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029c94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029c98:	4318      	orrs	r0, r3
 8029c9a:	ea40 000c 	orr.w	r0, r0, ip
 8029c9e:	f8a8 0000 	strh.w	r0, [r8]
 8029ca2:	e734      	b.n	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ca4:	f113 0b01 	adds.w	fp, r3, #1
 8029ca8:	f53f af31 	bmi.w	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029cac:	45dc      	cmp	ip, fp
 8029cae:	f6ff af2e 	blt.w	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029cb2:	f110 0b01 	adds.w	fp, r0, #1
 8029cb6:	f53f af2a 	bmi.w	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029cba:	45de      	cmp	lr, fp
 8029cbc:	f6ff af27 	blt.w	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029cc0:	9302      	str	r3, [sp, #8]
 8029cc2:	fa0f f38e 	sxth.w	r3, lr
 8029cc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029cc8:	9301      	str	r3, [sp, #4]
 8029cca:	fa0f f38c 	sxth.w	r3, ip
 8029cce:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029cd2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029cd6:	9300      	str	r3, [sp, #0]
 8029cd8:	463a      	mov	r2, r7
 8029cda:	4653      	mov	r3, sl
 8029cdc:	4641      	mov	r1, r8
 8029cde:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029ce0:	f7ff fd4c 	bl	802977c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029ce4:	e713      	b.n	8029b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ce6:	1422      	asrs	r2, r4, #16
 8029ce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029cea:	1433      	asrs	r3, r6, #16
 8029cec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029cf0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029cf4:	fb05 2303 	mla	r3, r5, r3, r2
 8029cf8:	085a      	lsrs	r2, r3, #1
 8029cfa:	07dd      	lsls	r5, r3, #31
 8029cfc:	5cba      	ldrb	r2, [r7, r2]
 8029cfe:	bf54      	ite	pl
 8029d00:	f002 020f 	andpl.w	r2, r2, #15
 8029d04:	1112      	asrmi	r2, r2, #4
 8029d06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029d0a:	b2d2      	uxtb	r2, r2
 8029d0c:	2900      	cmp	r1, #0
 8029d0e:	d077      	beq.n	8029e00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8029d10:	f103 0e01 	add.w	lr, r3, #1
 8029d14:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029d18:	f01e 0f01 	tst.w	lr, #1
 8029d1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029d20:	bf0c      	ite	eq
 8029d22:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029d26:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029d2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029d2e:	fa5f f58c 	uxtb.w	r5, ip
 8029d32:	9512      	str	r5, [sp, #72]	; 0x48
 8029d34:	b308      	cbz	r0, 8029d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8029d36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d38:	442b      	add	r3, r5
 8029d3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029d3e:	07dd      	lsls	r5, r3, #31
 8029d40:	f103 0301 	add.w	r3, r3, #1
 8029d44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029d48:	bf54      	ite	pl
 8029d4a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029d4e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029d52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029d56:	fa5f f58c 	uxtb.w	r5, ip
 8029d5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029d5e:	950c      	str	r5, [sp, #48]	; 0x30
 8029d60:	07dd      	lsls	r5, r3, #31
 8029d62:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029d66:	bf54      	ite	pl
 8029d68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029d6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029d70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029d74:	fa5f f38c 	uxtb.w	r3, ip
 8029d78:	9313      	str	r3, [sp, #76]	; 0x4c
 8029d7a:	b289      	uxth	r1, r1
 8029d7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d7e:	b280      	uxth	r0, r0
 8029d80:	fb01 f300 	mul.w	r3, r1, r0
 8029d84:	0109      	lsls	r1, r1, #4
 8029d86:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029d8a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029d8e:	1ac9      	subs	r1, r1, r3
 8029d90:	b280      	uxth	r0, r0
 8029d92:	b289      	uxth	r1, r1
 8029d94:	ebac 0c00 	sub.w	ip, ip, r0
 8029d98:	4369      	muls	r1, r5
 8029d9a:	fa1f fc8c 	uxth.w	ip, ip
 8029d9e:	fb02 120c 	mla	r2, r2, ip, r1
 8029da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029da4:	fb00 2001 	mla	r0, r0, r1, r2
 8029da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029daa:	fb03 0302 	mla	r3, r3, r2, r0
 8029dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029db2:	b1d3      	cbz	r3, 8029dea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029db4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029db6:	4353      	muls	r3, r2
 8029db8:	1c5a      	adds	r2, r3, #1
 8029dba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029dbe:	4a0f      	ldr	r2, [pc, #60]	; (8029dfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029dc0:	121b      	asrs	r3, r3, #8
 8029dc2:	6812      	ldr	r2, [r2, #0]
 8029dc4:	2bff      	cmp	r3, #255	; 0xff
 8029dc6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029dca:	d12d      	bne.n	8029e28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8029dcc:	0953      	lsrs	r3, r2, #5
 8029dce:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029dd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029dd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029dda:	f02c 0c07 	bic.w	ip, ip, #7
 8029dde:	ea43 0c0c 	orr.w	ip, r3, ip
 8029de2:	ea4c 0202 	orr.w	r2, ip, r2
 8029de6:	f8a8 2000 	strh.w	r2, [r8]
 8029dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029dec:	f108 0802 	add.w	r8, r8, #2
 8029df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029df4:	441c      	add	r4, r3
 8029df6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029df8:	441e      	add	r6, r3
 8029dfa:	e6b9      	b.n	8029b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8029dfc:	200155f0 	.word	0x200155f0
 8029e00:	2800      	cmp	r0, #0
 8029e02:	d0ba      	beq.n	8029d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8029e04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029e06:	442b      	add	r3, r5
 8029e08:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029e0c:	07db      	lsls	r3, r3, #31
 8029e0e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e12:	bf54      	ite	pl
 8029e14:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e20:	fa5f f38c 	uxtb.w	r3, ip
 8029e24:	930c      	str	r3, [sp, #48]	; 0x30
 8029e26:	e7a8      	b.n	8029d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8029e28:	f8b8 e000 	ldrh.w	lr, [r8]
 8029e2c:	fa1f fa83 	uxth.w	sl, r3
 8029e30:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029e34:	43db      	mvns	r3, r3
 8029e36:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029e3a:	fb11 f10a 	smulbb	r1, r1, sl
 8029e3e:	b2db      	uxtb	r3, r3
 8029e40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029e44:	b2d2      	uxtb	r2, r2
 8029e46:	fa5f fc8c 	uxtb.w	ip, ip
 8029e4a:	fb00 1003 	mla	r0, r0, r3, r1
 8029e4e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029e52:	fb12 f20a 	smulbb	r2, r2, sl
 8029e56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029e5a:	b280      	uxth	r0, r0
 8029e5c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029e60:	fb1c fc0a 	smulbb	ip, ip, sl
 8029e64:	fa5f fe8e 	uxtb.w	lr, lr
 8029e68:	fb0e 2203 	mla	r2, lr, r3, r2
 8029e6c:	fb01 cc03 	mla	ip, r1, r3, ip
 8029e70:	1c43      	adds	r3, r0, #1
 8029e72:	b292      	uxth	r2, r2
 8029e74:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029e78:	1c51      	adds	r1, r2, #1
 8029e7a:	fa1f fc8c 	uxth.w	ip, ip
 8029e7e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029e82:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029e86:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029e8a:	4308      	orrs	r0, r1
 8029e8c:	f10c 0101 	add.w	r1, ip, #1
 8029e90:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e94:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029e98:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029e9c:	ea40 000c 	orr.w	r0, r0, ip
 8029ea0:	f8a8 0000 	strh.w	r0, [r8]
 8029ea4:	e7a1      	b.n	8029dea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029ea6:	b017      	add	sp, #92	; 0x5c
 8029ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029eb0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029eb4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029eb8:	2d00      	cmp	r5, #0
 8029eba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029ebe:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029ec2:	fb05 0e03 	mla	lr, r5, r3, r0
 8029ec6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8029eca:	f2c0 80b0 	blt.w	802a02e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8029ece:	45a9      	cmp	r9, r5
 8029ed0:	f340 80ad 	ble.w	802a02e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8029ed4:	2800      	cmp	r0, #0
 8029ed6:	f2c0 80a8 	blt.w	802a02a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8029eda:	4580      	cmp	r8, r0
 8029edc:	f340 80a5 	ble.w	802a02a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8029ee0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029ee4:	f01e 0f01 	tst.w	lr, #1
 8029ee8:	5d16      	ldrb	r6, [r2, r4]
 8029eea:	bf0c      	ite	eq
 8029eec:	f006 060f 	andeq.w	r6, r6, #15
 8029ef0:	1136      	asrne	r6, r6, #4
 8029ef2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029ef6:	b2f6      	uxtb	r6, r6
 8029ef8:	1c44      	adds	r4, r0, #1
 8029efa:	f100 809b 	bmi.w	802a034 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8029efe:	45a0      	cmp	r8, r4
 8029f00:	f340 8098 	ble.w	802a034 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8029f04:	2f00      	cmp	r7, #0
 8029f06:	f000 8097 	beq.w	802a038 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8029f0a:	f10e 0a01 	add.w	sl, lr, #1
 8029f0e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029f12:	f01a 0f01 	tst.w	sl, #1
 8029f16:	5d14      	ldrb	r4, [r2, r4]
 8029f18:	bf0c      	ite	eq
 8029f1a:	f004 040f 	andeq.w	r4, r4, #15
 8029f1e:	1124      	asrne	r4, r4, #4
 8029f20:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029f24:	b2e4      	uxtb	r4, r4
 8029f26:	3501      	adds	r5, #1
 8029f28:	f100 808a 	bmi.w	802a040 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8029f2c:	45a9      	cmp	r9, r5
 8029f2e:	f340 8087 	ble.w	802a040 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8029f32:	f1bc 0f00 	cmp.w	ip, #0
 8029f36:	f000 8086 	beq.w	802a046 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8029f3a:	2800      	cmp	r0, #0
 8029f3c:	db7e      	blt.n	802a03c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8029f3e:	4580      	cmp	r8, r0
 8029f40:	dd7c      	ble.n	802a03c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8029f42:	eb03 090e 	add.w	r9, r3, lr
 8029f46:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029f4a:	f019 0f01 	tst.w	r9, #1
 8029f4e:	5d55      	ldrb	r5, [r2, r5]
 8029f50:	bf0c      	ite	eq
 8029f52:	f005 050f 	andeq.w	r5, r5, #15
 8029f56:	112d      	asrne	r5, r5, #4
 8029f58:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029f5c:	b2ed      	uxtb	r5, r5
 8029f5e:	3001      	adds	r0, #1
 8029f60:	d474      	bmi.n	802a04c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029f62:	4580      	cmp	r8, r0
 8029f64:	dd72      	ble.n	802a04c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029f66:	2f00      	cmp	r7, #0
 8029f68:	d072      	beq.n	802a050 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8029f6a:	3301      	adds	r3, #1
 8029f6c:	449e      	add	lr, r3
 8029f6e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029f72:	f01e 0f01 	tst.w	lr, #1
 8029f76:	5cd0      	ldrb	r0, [r2, r3]
 8029f78:	bf0c      	ite	eq
 8029f7a:	f000 000f 	andeq.w	r0, r0, #15
 8029f7e:	1100      	asrne	r0, r0, #4
 8029f80:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029f84:	b2c3      	uxtb	r3, r0
 8029f86:	b2ba      	uxth	r2, r7
 8029f88:	fa1f fc8c 	uxth.w	ip, ip
 8029f8c:	fb02 f00c 	mul.w	r0, r2, ip
 8029f90:	0112      	lsls	r2, r2, #4
 8029f92:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029f96:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8029f9a:	1a12      	subs	r2, r2, r0
 8029f9c:	fa1f fc8c 	uxth.w	ip, ip
 8029fa0:	b292      	uxth	r2, r2
 8029fa2:	eba7 070c 	sub.w	r7, r7, ip
 8029fa6:	4362      	muls	r2, r4
 8029fa8:	b2bf      	uxth	r7, r7
 8029faa:	fb06 2207 	mla	r2, r6, r7, r2
 8029fae:	fb0c 2505 	mla	r5, ip, r5, r2
 8029fb2:	fb00 5303 	mla	r3, r0, r3, r5
 8029fb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029fba:	b3a3      	cbz	r3, 802a026 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8029fbc:	4a25      	ldr	r2, [pc, #148]	; (802a054 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8029fbe:	880e      	ldrh	r6, [r1, #0]
 8029fc0:	6815      	ldr	r5, [r2, #0]
 8029fc2:	b29a      	uxth	r2, r3
 8029fc4:	1234      	asrs	r4, r6, #8
 8029fc6:	43db      	mvns	r3, r3
 8029fc8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029fcc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029fd0:	b2db      	uxtb	r3, r3
 8029fd2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029fd6:	fb10 f002 	smulbb	r0, r0, r2
 8029fda:	b2ed      	uxtb	r5, r5
 8029fdc:	fb17 f702 	smulbb	r7, r7, r2
 8029fe0:	fb04 0403 	mla	r4, r4, r3, r0
 8029fe4:	10f0      	asrs	r0, r6, #3
 8029fe6:	fb15 f202 	smulbb	r2, r5, r2
 8029fea:	00f6      	lsls	r6, r6, #3
 8029fec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029ff0:	b2a4      	uxth	r4, r4
 8029ff2:	b2f6      	uxtb	r6, r6
 8029ff4:	fb00 7003 	mla	r0, r0, r3, r7
 8029ff8:	fb06 2303 	mla	r3, r6, r3, r2
 8029ffc:	b280      	uxth	r0, r0
 8029ffe:	b29a      	uxth	r2, r3
 802a000:	1c63      	adds	r3, r4, #1
 802a002:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a006:	1c53      	adds	r3, r2, #1
 802a008:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a00c:	1c42      	adds	r2, r0, #1
 802a00e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a012:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a016:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a01a:	0940      	lsrs	r0, r0, #5
 802a01c:	4323      	orrs	r3, r4
 802a01e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a022:	4303      	orrs	r3, r0
 802a024:	800b      	strh	r3, [r1, #0]
 802a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a02a:	2600      	movs	r6, #0
 802a02c:	e764      	b.n	8029ef8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a02e:	2400      	movs	r4, #0
 802a030:	4626      	mov	r6, r4
 802a032:	e778      	b.n	8029f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a034:	2400      	movs	r4, #0
 802a036:	e776      	b.n	8029f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a038:	463c      	mov	r4, r7
 802a03a:	e774      	b.n	8029f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a03c:	2500      	movs	r5, #0
 802a03e:	e78e      	b.n	8029f5e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a040:	2300      	movs	r3, #0
 802a042:	461d      	mov	r5, r3
 802a044:	e79f      	b.n	8029f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a046:	4663      	mov	r3, ip
 802a048:	4665      	mov	r5, ip
 802a04a:	e79c      	b.n	8029f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a04c:	2300      	movs	r3, #0
 802a04e:	e79a      	b.n	8029f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a050:	463b      	mov	r3, r7
 802a052:	e798      	b.n	8029f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a054:	200155f0 	.word	0x200155f0

0802a058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a05c:	b093      	sub	sp, #76	; 0x4c
 802a05e:	461d      	mov	r5, r3
 802a060:	920c      	str	r2, [sp, #48]	; 0x30
 802a062:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802a064:	9011      	str	r0, [sp, #68]	; 0x44
 802a066:	9107      	str	r1, [sp, #28]
 802a068:	6850      	ldr	r0, [r2, #4]
 802a06a:	6812      	ldr	r2, [r2, #0]
 802a06c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802a070:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802a074:	fb00 1303 	mla	r3, r0, r3, r1
 802a078:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a07c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a07e:	689b      	ldr	r3, [r3, #8]
 802a080:	3301      	adds	r3, #1
 802a082:	f023 0301 	bic.w	r3, r3, #1
 802a086:	9306      	str	r3, [sp, #24]
 802a088:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a08a:	681f      	ldr	r7, [r3, #0]
 802a08c:	9b07      	ldr	r3, [sp, #28]
 802a08e:	2b00      	cmp	r3, #0
 802a090:	dc03      	bgt.n	802a09a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a094:	2b00      	cmp	r3, #0
 802a096:	f340 8267 	ble.w	802a568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a09a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a09c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a0a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a0a4:	1e48      	subs	r0, r1, #1
 802a0a6:	f102 3cff 	add.w	ip, r2, #4294967295
 802a0aa:	2d00      	cmp	r5, #0
 802a0ac:	f340 80b7 	ble.w	802a21e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a0b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a0b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a0b8:	d406      	bmi.n	802a0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a0ba:	4586      	cmp	lr, r0
 802a0bc:	da04      	bge.n	802a0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a0be:	2b00      	cmp	r3, #0
 802a0c0:	db02      	blt.n	802a0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a0c2:	4563      	cmp	r3, ip
 802a0c4:	f2c0 80ac 	blt.w	802a220 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a0c8:	f11e 0e01 	adds.w	lr, lr, #1
 802a0cc:	f100 809f 	bmi.w	802a20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a0d0:	4571      	cmp	r1, lr
 802a0d2:	f2c0 809c 	blt.w	802a20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a0d6:	3301      	adds	r3, #1
 802a0d8:	f100 8099 	bmi.w	802a20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a0dc:	429a      	cmp	r2, r3
 802a0de:	f2c0 8096 	blt.w	802a20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a0e2:	46c8      	mov	r8, r9
 802a0e4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a0e8:	9509      	str	r5, [sp, #36]	; 0x24
 802a0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0ec:	2b00      	cmp	r3, #0
 802a0ee:	f340 80b5 	ble.w	802a25c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a0f2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a0f6:	1430      	asrs	r0, r6, #16
 802a0f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a0fc:	9308      	str	r3, [sp, #32]
 802a0fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a100:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a104:	1423      	asrs	r3, r4, #16
 802a106:	f100 813f 	bmi.w	802a388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a10a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a10e:	455b      	cmp	r3, fp
 802a110:	f280 813a 	bge.w	802a388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a114:	2800      	cmp	r0, #0
 802a116:	f2c0 8137 	blt.w	802a388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a11a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a11e:	4558      	cmp	r0, fp
 802a120:	f280 8132 	bge.w	802a388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a124:	9a06      	ldr	r2, [sp, #24]
 802a126:	fb00 3302 	mla	r3, r0, r2, r3
 802a12a:	0858      	lsrs	r0, r3, #1
 802a12c:	07da      	lsls	r2, r3, #31
 802a12e:	9a08      	ldr	r2, [sp, #32]
 802a130:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a134:	bf54      	ite	pl
 802a136:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a13a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a13e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a142:	fa5f fc8c 	uxtb.w	ip, ip
 802a146:	2a00      	cmp	r2, #0
 802a148:	f000 80cc 	beq.w	802a2e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802a14c:	1c58      	adds	r0, r3, #1
 802a14e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a152:	07c0      	lsls	r0, r0, #31
 802a154:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a158:	bf54      	ite	pl
 802a15a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a15e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a162:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a166:	fa5f fe8e 	uxtb.w	lr, lr
 802a16a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a16e:	b1b9      	cbz	r1, 802a1a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a170:	4453      	add	r3, sl
 802a172:	0858      	lsrs	r0, r3, #1
 802a174:	07da      	lsls	r2, r3, #31
 802a176:	5c38      	ldrb	r0, [r7, r0]
 802a178:	bf54      	ite	pl
 802a17a:	f000 000f 	andpl.w	r0, r0, #15
 802a17e:	1100      	asrmi	r0, r0, #4
 802a180:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a184:	b2c0      	uxtb	r0, r0
 802a186:	900a      	str	r0, [sp, #40]	; 0x28
 802a188:	1c58      	adds	r0, r3, #1
 802a18a:	0843      	lsrs	r3, r0, #1
 802a18c:	07c2      	lsls	r2, r0, #31
 802a18e:	5cfb      	ldrb	r3, [r7, r3]
 802a190:	bf54      	ite	pl
 802a192:	f003 030f 	andpl.w	r3, r3, #15
 802a196:	111b      	asrmi	r3, r3, #4
 802a198:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a19c:	b2db      	uxtb	r3, r3
 802a19e:	930e      	str	r3, [sp, #56]	; 0x38
 802a1a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a1a4:	b289      	uxth	r1, r1
 802a1a6:	fb02 f301 	mul.w	r3, r2, r1
 802a1aa:	0112      	lsls	r2, r2, #4
 802a1ac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a1b0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a1b4:	1ad2      	subs	r2, r2, r3
 802a1b6:	b289      	uxth	r1, r1
 802a1b8:	b292      	uxth	r2, r2
 802a1ba:	1a40      	subs	r0, r0, r1
 802a1bc:	fa1f fe80 	uxth.w	lr, r0
 802a1c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a1c2:	4342      	muls	r2, r0
 802a1c4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a1c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a1ca:	fb01 c102 	mla	r1, r1, r2, ip
 802a1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a1d0:	fb03 1302 	mla	r3, r3, r2, r1
 802a1d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1d8:	2bff      	cmp	r3, #255	; 0xff
 802a1da:	f040 8094 	bne.w	802a306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802a1de:	4bbf      	ldr	r3, [pc, #764]	; (802a4dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a1e0:	681a      	ldr	r2, [r3, #0]
 802a1e2:	4bbf      	ldr	r3, [pc, #764]	; (802a4e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a1e4:	0951      	lsrs	r1, r2, #5
 802a1e6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a1ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a1ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a1f2:	430b      	orrs	r3, r1
 802a1f4:	4313      	orrs	r3, r2
 802a1f6:	f8a8 3000 	strh.w	r3, [r8]
 802a1fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a1fc:	f108 0802 	add.w	r8, r8, #2
 802a200:	441c      	add	r4, r3
 802a202:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a204:	441e      	add	r6, r3
 802a206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a208:	3b01      	subs	r3, #1
 802a20a:	9309      	str	r3, [sp, #36]	; 0x24
 802a20c:	e76d      	b.n	802a0ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a20e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a210:	3d01      	subs	r5, #1
 802a212:	f109 0902 	add.w	r9, r9, #2
 802a216:	441c      	add	r4, r3
 802a218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a21a:	441e      	add	r6, r3
 802a21c:	e745      	b.n	802a0aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a21e:	d021      	beq.n	802a264 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a220:	1e6b      	subs	r3, r5, #1
 802a222:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a224:	fb00 4003 	mla	r0, r0, r3, r4
 802a228:	1400      	asrs	r0, r0, #16
 802a22a:	f53f af5a 	bmi.w	802a0e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a22e:	3901      	subs	r1, #1
 802a230:	4288      	cmp	r0, r1
 802a232:	f6bf af56 	bge.w	802a0e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a236:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a238:	fb01 6303 	mla	r3, r1, r3, r6
 802a23c:	141b      	asrs	r3, r3, #16
 802a23e:	f53f af50 	bmi.w	802a0e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a242:	3a01      	subs	r2, #1
 802a244:	4293      	cmp	r3, r2
 802a246:	f6bf af4c 	bge.w	802a0e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a24a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a24e:	46a8      	mov	r8, r5
 802a250:	46ce      	mov	lr, r9
 802a252:	9308      	str	r3, [sp, #32]
 802a254:	f1b8 0f00 	cmp.w	r8, #0
 802a258:	f300 80b6 	bgt.w	802a3c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802a25c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a260:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a264:	9b07      	ldr	r3, [sp, #28]
 802a266:	2b00      	cmp	r3, #0
 802a268:	f340 817e 	ble.w	802a568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a26c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a270:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a272:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a276:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a27a:	eef0 6a62 	vmov.f32	s13, s5
 802a27e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a282:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a286:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a28a:	ee16 4a90 	vmov	r4, s13
 802a28e:	eef0 6a43 	vmov.f32	s13, s6
 802a292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a296:	ee16 6a90 	vmov	r6, s13
 802a29a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a29e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a2a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a2a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a2aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a2ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a2b2:	ee12 2a90 	vmov	r2, s5
 802a2b6:	eef0 2a47 	vmov.f32	s5, s14
 802a2ba:	fb92 f3f3 	sdiv	r3, r2, r3
 802a2be:	ee13 2a10 	vmov	r2, s6
 802a2c2:	931f      	str	r3, [sp, #124]	; 0x7c
 802a2c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a2c6:	eeb0 3a67 	vmov.f32	s6, s15
 802a2ca:	fb92 f3f3 	sdiv	r3, r2, r3
 802a2ce:	9320      	str	r3, [sp, #128]	; 0x80
 802a2d0:	9b07      	ldr	r3, [sp, #28]
 802a2d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a2d4:	3b01      	subs	r3, #1
 802a2d6:	9307      	str	r3, [sp, #28]
 802a2d8:	bf08      	it	eq
 802a2da:	4615      	moveq	r5, r2
 802a2dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a2de:	bf18      	it	ne
 802a2e0:	461d      	movne	r5, r3
 802a2e2:	e6d3      	b.n	802a08c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a2e4:	2900      	cmp	r1, #0
 802a2e6:	f43f af5b 	beq.w	802a1a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a2ea:	eb0a 0003 	add.w	r0, sl, r3
 802a2ee:	0843      	lsrs	r3, r0, #1
 802a2f0:	07c0      	lsls	r0, r0, #31
 802a2f2:	5cfb      	ldrb	r3, [r7, r3]
 802a2f4:	bf54      	ite	pl
 802a2f6:	f003 030f 	andpl.w	r3, r3, #15
 802a2fa:	111b      	asrmi	r3, r3, #4
 802a2fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a300:	b2db      	uxtb	r3, r3
 802a302:	930a      	str	r3, [sp, #40]	; 0x28
 802a304:	e74c      	b.n	802a1a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a306:	2b00      	cmp	r3, #0
 802a308:	f43f af77 	beq.w	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a30c:	4a73      	ldr	r2, [pc, #460]	; (802a4dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a30e:	fa1f fe83 	uxth.w	lr, r3
 802a312:	f8b8 c000 	ldrh.w	ip, [r8]
 802a316:	43db      	mvns	r3, r3
 802a318:	6810      	ldr	r0, [r2, #0]
 802a31a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a31e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a322:	b2db      	uxtb	r3, r3
 802a324:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a328:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a32c:	fb12 f20e 	smulbb	r2, r2, lr
 802a330:	b2c0      	uxtb	r0, r0
 802a332:	fb1b fb0e 	smulbb	fp, fp, lr
 802a336:	fb01 2103 	mla	r1, r1, r3, r2
 802a33a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a33e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a342:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a346:	b289      	uxth	r1, r1
 802a348:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a34c:	fa5f fc8c 	uxtb.w	ip, ip
 802a350:	fb02 b203 	mla	r2, r2, r3, fp
 802a354:	1c48      	adds	r0, r1, #1
 802a356:	fb0c e303 	mla	r3, ip, r3, lr
 802a35a:	b292      	uxth	r2, r2
 802a35c:	b29b      	uxth	r3, r3
 802a35e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a362:	f102 0b01 	add.w	fp, r2, #1
 802a366:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a36a:	1c59      	adds	r1, r3, #1
 802a36c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a370:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a374:	0952      	lsrs	r2, r2, #5
 802a376:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a37a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a37e:	4301      	orrs	r1, r0
 802a380:	4311      	orrs	r1, r2
 802a382:	f8a8 1000 	strh.w	r1, [r8]
 802a386:	e738      	b.n	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a388:	f113 0b01 	adds.w	fp, r3, #1
 802a38c:	f53f af35 	bmi.w	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a390:	45dc      	cmp	ip, fp
 802a392:	f6ff af32 	blt.w	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a396:	f110 0b01 	adds.w	fp, r0, #1
 802a39a:	f53f af2e 	bmi.w	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a39e:	45de      	cmp	lr, fp
 802a3a0:	f6ff af2b 	blt.w	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a3a4:	9302      	str	r3, [sp, #8]
 802a3a6:	fa0f f38e 	sxth.w	r3, lr
 802a3aa:	9a08      	ldr	r2, [sp, #32]
 802a3ac:	9301      	str	r3, [sp, #4]
 802a3ae:	fa0f f38c 	sxth.w	r3, ip
 802a3b2:	9105      	str	r1, [sp, #20]
 802a3b4:	4641      	mov	r1, r8
 802a3b6:	9300      	str	r3, [sp, #0]
 802a3b8:	4653      	mov	r3, sl
 802a3ba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a3be:	463a      	mov	r2, r7
 802a3c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a3c2:	f7ff fd73 	bl	8029eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a3c6:	e718      	b.n	802a1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a3c8:	1422      	asrs	r2, r4, #16
 802a3ca:	9906      	ldr	r1, [sp, #24]
 802a3cc:	1433      	asrs	r3, r6, #16
 802a3ce:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a3d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a3d6:	fb01 2303 	mla	r3, r1, r3, r2
 802a3da:	085a      	lsrs	r2, r3, #1
 802a3dc:	07d9      	lsls	r1, r3, #31
 802a3de:	5cba      	ldrb	r2, [r7, r2]
 802a3e0:	bf54      	ite	pl
 802a3e2:	f002 020f 	andpl.w	r2, r2, #15
 802a3e6:	1112      	asrmi	r2, r2, #4
 802a3e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a3ec:	b2d2      	uxtb	r2, r2
 802a3ee:	2800      	cmp	r0, #0
 802a3f0:	d063      	beq.n	802a4ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802a3f2:	f103 0a01 	add.w	sl, r3, #1
 802a3f6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a3fa:	f01a 0f01 	tst.w	sl, #1
 802a3fe:	5c79      	ldrb	r1, [r7, r1]
 802a400:	bf0c      	ite	eq
 802a402:	f001 010f 	andeq.w	r1, r1, #15
 802a406:	1109      	asrne	r1, r1, #4
 802a408:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a40c:	b2c9      	uxtb	r1, r1
 802a40e:	910f      	str	r1, [sp, #60]	; 0x3c
 802a410:	f1bc 0f00 	cmp.w	ip, #0
 802a414:	d01a      	beq.n	802a44c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a416:	9908      	ldr	r1, [sp, #32]
 802a418:	440b      	add	r3, r1
 802a41a:	0859      	lsrs	r1, r3, #1
 802a41c:	f013 0f01 	tst.w	r3, #1
 802a420:	f103 0301 	add.w	r3, r3, #1
 802a424:	5c79      	ldrb	r1, [r7, r1]
 802a426:	bf0c      	ite	eq
 802a428:	f001 010f 	andeq.w	r1, r1, #15
 802a42c:	1109      	asrne	r1, r1, #4
 802a42e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a432:	b2c9      	uxtb	r1, r1
 802a434:	910b      	str	r1, [sp, #44]	; 0x2c
 802a436:	0859      	lsrs	r1, r3, #1
 802a438:	07db      	lsls	r3, r3, #31
 802a43a:	5c79      	ldrb	r1, [r7, r1]
 802a43c:	bf54      	ite	pl
 802a43e:	f001 010f 	andpl.w	r1, r1, #15
 802a442:	1109      	asrmi	r1, r1, #4
 802a444:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a448:	b2c9      	uxtb	r1, r1
 802a44a:	9110      	str	r1, [sp, #64]	; 0x40
 802a44c:	b280      	uxth	r0, r0
 802a44e:	fa1f fc8c 	uxth.w	ip, ip
 802a452:	fb00 f30c 	mul.w	r3, r0, ip
 802a456:	0100      	lsls	r0, r0, #4
 802a458:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a45c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802a460:	1ac0      	subs	r0, r0, r3
 802a462:	fa1f fc8c 	uxth.w	ip, ip
 802a466:	b280      	uxth	r0, r0
 802a468:	eba1 010c 	sub.w	r1, r1, ip
 802a46c:	fa1f fa81 	uxth.w	sl, r1
 802a470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a472:	4348      	muls	r0, r1
 802a474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802a476:	fb02 020a 	mla	r2, r2, sl, r0
 802a47a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a47e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a480:	fb03 c302 	mla	r3, r3, r2, ip
 802a484:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a488:	2bff      	cmp	r3, #255	; 0xff
 802a48a:	d12b      	bne.n	802a4e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802a48c:	4b13      	ldr	r3, [pc, #76]	; (802a4dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a48e:	681a      	ldr	r2, [r3, #0]
 802a490:	4b13      	ldr	r3, [pc, #76]	; (802a4e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a492:	0951      	lsrs	r1, r2, #5
 802a494:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a498:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a49c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a4a0:	430b      	orrs	r3, r1
 802a4a2:	4313      	orrs	r3, r2
 802a4a4:	f8ae 3000 	strh.w	r3, [lr]
 802a4a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a4aa:	f10e 0e02 	add.w	lr, lr, #2
 802a4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 802a4b2:	441c      	add	r4, r3
 802a4b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a4b6:	441e      	add	r6, r3
 802a4b8:	e6cc      	b.n	802a254 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a4ba:	f1bc 0f00 	cmp.w	ip, #0
 802a4be:	d0c5      	beq.n	802a44c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a4c0:	9908      	ldr	r1, [sp, #32]
 802a4c2:	440b      	add	r3, r1
 802a4c4:	0859      	lsrs	r1, r3, #1
 802a4c6:	07db      	lsls	r3, r3, #31
 802a4c8:	5c79      	ldrb	r1, [r7, r1]
 802a4ca:	bf54      	ite	pl
 802a4cc:	f001 010f 	andpl.w	r1, r1, #15
 802a4d0:	1109      	asrmi	r1, r1, #4
 802a4d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a4d6:	b2c9      	uxtb	r1, r1
 802a4d8:	910b      	str	r1, [sp, #44]	; 0x2c
 802a4da:	e7b7      	b.n	802a44c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a4dc:	200155f0 	.word	0x200155f0
 802a4e0:	fffff800 	.word	0xfffff800
 802a4e4:	2b00      	cmp	r3, #0
 802a4e6:	d0df      	beq.n	802a4a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802a4e8:	4a21      	ldr	r2, [pc, #132]	; (802a570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802a4ea:	fa1f fa83 	uxth.w	sl, r3
 802a4ee:	f8be c000 	ldrh.w	ip, [lr]
 802a4f2:	43db      	mvns	r3, r3
 802a4f4:	6810      	ldr	r0, [r2, #0]
 802a4f6:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a4fa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a4fe:	b2db      	uxtb	r3, r3
 802a500:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a504:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a508:	fb12 f20a 	smulbb	r2, r2, sl
 802a50c:	b2c0      	uxtb	r0, r0
 802a50e:	fb1b fb0a 	smulbb	fp, fp, sl
 802a512:	fb01 2103 	mla	r1, r1, r3, r2
 802a516:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a51a:	fb10 f00a 	smulbb	r0, r0, sl
 802a51e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a522:	b289      	uxth	r1, r1
 802a524:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a528:	fa5f fc8c 	uxtb.w	ip, ip
 802a52c:	fb02 b203 	mla	r2, r2, r3, fp
 802a530:	fb0c 0003 	mla	r0, ip, r3, r0
 802a534:	1c4b      	adds	r3, r1, #1
 802a536:	b292      	uxth	r2, r2
 802a538:	b280      	uxth	r0, r0
 802a53a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a53e:	f100 0b01 	add.w	fp, r0, #1
 802a542:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802a546:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a54a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a54e:	ea4b 0101 	orr.w	r1, fp, r1
 802a552:	f102 0b01 	add.w	fp, r2, #1
 802a556:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a55a:	0952      	lsrs	r2, r2, #5
 802a55c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a560:	4311      	orrs	r1, r2
 802a562:	f8ae 1000 	strh.w	r1, [lr]
 802a566:	e79f      	b.n	802a4a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802a568:	b013      	add	sp, #76	; 0x4c
 802a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a56e:	bf00      	nop
 802a570:	200155f0 	.word	0x200155f0

0802a574 <CRC_Lock>:
 802a574:	4a20      	ldr	r2, [pc, #128]	; (802a5f8 <CRC_Lock+0x84>)
 802a576:	b530      	push	{r4, r5, lr}
 802a578:	6813      	ldr	r3, [r2, #0]
 802a57a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a57e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a582:	f023 0301 	bic.w	r3, r3, #1
 802a586:	6013      	str	r3, [r2, #0]
 802a588:	4b1c      	ldr	r3, [pc, #112]	; (802a5fc <CRC_Lock+0x88>)
 802a58a:	681a      	ldr	r2, [r3, #0]
 802a58c:	4022      	ands	r2, r4
 802a58e:	42aa      	cmp	r2, r5
 802a590:	d005      	beq.n	802a59e <CRC_Lock+0x2a>
 802a592:	681b      	ldr	r3, [r3, #0]
 802a594:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a598:	4023      	ands	r3, r4
 802a59a:	4293      	cmp	r3, r2
 802a59c:	d124      	bne.n	802a5e8 <CRC_Lock+0x74>
 802a59e:	4b18      	ldr	r3, [pc, #96]	; (802a600 <CRC_Lock+0x8c>)
 802a5a0:	681b      	ldr	r3, [r3, #0]
 802a5a2:	bb0b      	cbnz	r3, 802a5e8 <CRC_Lock+0x74>
 802a5a4:	4b17      	ldr	r3, [pc, #92]	; (802a604 <CRC_Lock+0x90>)
 802a5a6:	681a      	ldr	r2, [r3, #0]
 802a5a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a5ac:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802a5b0:	d00d      	beq.n	802a5ce <CRC_Lock+0x5a>
 802a5b2:	681a      	ldr	r2, [r3, #0]
 802a5b4:	f240 4483 	movw	r4, #1155	; 0x483
 802a5b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a5bc:	42a2      	cmp	r2, r4
 802a5be:	d006      	beq.n	802a5ce <CRC_Lock+0x5a>
 802a5c0:	681b      	ldr	r3, [r3, #0]
 802a5c2:	f240 4285 	movw	r2, #1157	; 0x485
 802a5c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a5ca:	4293      	cmp	r3, r2
 802a5cc:	d10c      	bne.n	802a5e8 <CRC_Lock+0x74>
 802a5ce:	4b0e      	ldr	r3, [pc, #56]	; (802a608 <CRC_Lock+0x94>)
 802a5d0:	2201      	movs	r2, #1
 802a5d2:	601a      	str	r2, [r3, #0]
 802a5d4:	681a      	ldr	r2, [r3, #0]
 802a5d6:	2a00      	cmp	r2, #0
 802a5d8:	d1fc      	bne.n	802a5d4 <CRC_Lock+0x60>
 802a5da:	4b0c      	ldr	r3, [pc, #48]	; (802a60c <CRC_Lock+0x98>)
 802a5dc:	6018      	str	r0, [r3, #0]
 802a5de:	6818      	ldr	r0, [r3, #0]
 802a5e0:	1a43      	subs	r3, r0, r1
 802a5e2:	4258      	negs	r0, r3
 802a5e4:	4158      	adcs	r0, r3
 802a5e6:	bd30      	pop	{r4, r5, pc}
 802a5e8:	4b09      	ldr	r3, [pc, #36]	; (802a610 <CRC_Lock+0x9c>)
 802a5ea:	2201      	movs	r2, #1
 802a5ec:	601a      	str	r2, [r3, #0]
 802a5ee:	681a      	ldr	r2, [r3, #0]
 802a5f0:	2a00      	cmp	r2, #0
 802a5f2:	d1fc      	bne.n	802a5ee <CRC_Lock+0x7a>
 802a5f4:	4b07      	ldr	r3, [pc, #28]	; (802a614 <CRC_Lock+0xa0>)
 802a5f6:	e7f1      	b.n	802a5dc <CRC_Lock+0x68>
 802a5f8:	e0002000 	.word	0xe0002000
 802a5fc:	e000ed00 	.word	0xe000ed00
 802a600:	e0042000 	.word	0xe0042000
 802a604:	5c001000 	.word	0x5c001000
 802a608:	58024c08 	.word	0x58024c08
 802a60c:	58024c00 	.word	0x58024c00
 802a610:	40023008 	.word	0x40023008
 802a614:	40023000 	.word	0x40023000

0802a618 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a618:	6101      	str	r1, [r0, #16]
 802a61a:	4770      	bx	lr

0802a61c <_ZN8touchgfx8Gestures4tickEv>:
 802a61c:	7b83      	ldrb	r3, [r0, #14]
 802a61e:	b14b      	cbz	r3, 802a634 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a620:	8903      	ldrh	r3, [r0, #8]
 802a622:	3301      	adds	r3, #1
 802a624:	b29b      	uxth	r3, r3
 802a626:	2b07      	cmp	r3, #7
 802a628:	8103      	strh	r3, [r0, #8]
 802a62a:	bf81      	itttt	hi
 802a62c:	2300      	movhi	r3, #0
 802a62e:	8143      	strhhi	r3, [r0, #10]
 802a630:	8183      	strhhi	r3, [r0, #12]
 802a632:	7383      	strbhi	r3, [r0, #14]
 802a634:	4770      	bx	lr
	...

0802a638 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a638:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a63c:	4698      	mov	r8, r3
 802a63e:	8883      	ldrh	r3, [r0, #4]
 802a640:	4604      	mov	r4, r0
 802a642:	4617      	mov	r7, r2
 802a644:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a648:	eba8 0303 	sub.w	r3, r8, r3
 802a64c:	4a19      	ldr	r2, [pc, #100]	; (802a6b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802a64e:	460e      	mov	r6, r1
 802a650:	b21b      	sxth	r3, r3
 802a652:	88c1      	ldrh	r1, [r0, #6]
 802a654:	9200      	str	r2, [sp, #0]
 802a656:	2000      	movs	r0, #0
 802a658:	2b00      	cmp	r3, #0
 802a65a:	8aa2      	ldrh	r2, [r4, #20]
 802a65c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a660:	bfb8      	it	lt
 802a662:	425b      	neglt	r3, r3
 802a664:	f88d 0004 	strb.w	r0, [sp, #4]
 802a668:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a66c:	b21b      	sxth	r3, r3
 802a66e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a672:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a676:	4293      	cmp	r3, r2
 802a678:	dc07      	bgt.n	802a68a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a67a:	1a69      	subs	r1, r5, r1
 802a67c:	b209      	sxth	r1, r1
 802a67e:	2900      	cmp	r1, #0
 802a680:	bfb8      	it	lt
 802a682:	4249      	neglt	r1, r1
 802a684:	b209      	sxth	r1, r1
 802a686:	428a      	cmp	r2, r1
 802a688:	da10      	bge.n	802a6ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a68a:	6920      	ldr	r0, [r4, #16]
 802a68c:	4669      	mov	r1, sp
 802a68e:	eba8 0606 	sub.w	r6, r8, r6
 802a692:	1bef      	subs	r7, r5, r7
 802a694:	6803      	ldr	r3, [r0, #0]
 802a696:	685b      	ldr	r3, [r3, #4]
 802a698:	4798      	blx	r3
 802a69a:	2300      	movs	r3, #0
 802a69c:	2001      	movs	r0, #1
 802a69e:	8166      	strh	r6, [r4, #10]
 802a6a0:	8123      	strh	r3, [r4, #8]
 802a6a2:	81a7      	strh	r7, [r4, #12]
 802a6a4:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a6a8:	80e5      	strh	r5, [r4, #6]
 802a6aa:	73a0      	strb	r0, [r4, #14]
 802a6ac:	b004      	add	sp, #16
 802a6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6b2:	bf00      	nop
 802a6b4:	08030ed0 	.word	0x08030ed0

0802a6b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a6ba:	461e      	mov	r6, r3
 802a6bc:	1e4b      	subs	r3, r1, #1
 802a6be:	b085      	sub	sp, #20
 802a6c0:	4604      	mov	r4, r0
 802a6c2:	2b01      	cmp	r3, #1
 802a6c4:	460d      	mov	r5, r1
 802a6c6:	4617      	mov	r7, r2
 802a6c8:	d84b      	bhi.n	802a762 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a6ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a6ce:	1cd3      	adds	r3, r2, #3
 802a6d0:	b29b      	uxth	r3, r3
 802a6d2:	2b06      	cmp	r3, #6
 802a6d4:	d916      	bls.n	802a704 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a6d6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a778 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a6da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a6de:	f8cd c004 	str.w	ip, [sp, #4]
 802a6e2:	f04f 0c00 	mov.w	ip, #0
 802a6e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a6ea:	6900      	ldr	r0, [r0, #16]
 802a6ec:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a6f0:	a901      	add	r1, sp, #4
 802a6f2:	f88d c008 	strb.w	ip, [sp, #8]
 802a6f6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a6fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a6fe:	6803      	ldr	r3, [r0, #0]
 802a700:	689b      	ldr	r3, [r3, #8]
 802a702:	4798      	blx	r3
 802a704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a708:	1cd3      	adds	r3, r2, #3
 802a70a:	b29b      	uxth	r3, r3
 802a70c:	2b06      	cmp	r3, #6
 802a70e:	d916      	bls.n	802a73e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a710:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a778 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a714:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a718:	f8cd c004 	str.w	ip, [sp, #4]
 802a71c:	f04f 0c01 	mov.w	ip, #1
 802a720:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a724:	6920      	ldr	r0, [r4, #16]
 802a726:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a72a:	a901      	add	r1, sp, #4
 802a72c:	f88d c008 	strb.w	ip, [sp, #8]
 802a730:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a734:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a738:	6803      	ldr	r3, [r0, #0]
 802a73a:	689b      	ldr	r3, [r3, #8]
 802a73c:	4798      	blx	r3
 802a73e:	4b0d      	ldr	r3, [pc, #52]	; (802a774 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a740:	a901      	add	r1, sp, #4
 802a742:	6920      	ldr	r0, [r4, #16]
 802a744:	9301      	str	r3, [sp, #4]
 802a746:	2300      	movs	r3, #0
 802a748:	f88d 5008 	strb.w	r5, [sp, #8]
 802a74c:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a750:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a754:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a758:	6803      	ldr	r3, [r0, #0]
 802a75a:	681b      	ldr	r3, [r3, #0]
 802a75c:	4798      	blx	r3
 802a75e:	b005      	add	sp, #20
 802a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a762:	2900      	cmp	r1, #0
 802a764:	d1eb      	bne.n	802a73e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a766:	80a2      	strh	r2, [r4, #4]
 802a768:	80c6      	strh	r6, [r0, #6]
 802a76a:	60a1      	str	r1, [r4, #8]
 802a76c:	81a1      	strh	r1, [r4, #12]
 802a76e:	73a1      	strb	r1, [r4, #14]
 802a770:	e7e5      	b.n	802a73e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a772:	bf00      	nop
 802a774:	08030ebc 	.word	0x08030ebc
 802a778:	08030ee4 	.word	0x08030ee4

0802a77c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a77c:	790b      	ldrb	r3, [r1, #4]
 802a77e:	2b00      	cmp	r3, #0
 802a780:	bf0c      	ite	eq
 802a782:	2301      	moveq	r3, #1
 802a784:	2300      	movne	r3, #0
 802a786:	b570      	push	{r4, r5, r6, lr}
 802a788:	4604      	mov	r4, r0
 802a78a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 802a78e:	460e      	mov	r6, r1
 802a790:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 802a794:	d109      	bne.n	802a7aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a796:	b14d      	cbz	r5, 802a7ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a798:	7933      	ldrb	r3, [r6, #4]
 802a79a:	2b01      	cmp	r3, #1
 802a79c:	d10c      	bne.n	802a7b8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a79e:	6823      	ldr	r3, [r4, #0]
 802a7a0:	4620      	mov	r0, r4
 802a7a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a7a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a7a8:	4718      	bx	r3
 802a7aa:	b12d      	cbz	r5, 802a7b8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a7ac:	6823      	ldr	r3, [r4, #0]
 802a7ae:	4620      	mov	r0, r4
 802a7b0:	695b      	ldr	r3, [r3, #20]
 802a7b2:	4798      	blx	r3
 802a7b4:	2d00      	cmp	r5, #0
 802a7b6:	d1ef      	bne.n	802a798 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a7b8:	bd70      	pop	{r4, r5, r6, pc}

0802a7ba <__aeabi_atexit>:
 802a7ba:	460b      	mov	r3, r1
 802a7bc:	4601      	mov	r1, r0
 802a7be:	4618      	mov	r0, r3
 802a7c0:	f000 b852 	b.w	802a868 <__cxa_atexit>

0802a7c4 <_ZdlPvj>:
 802a7c4:	f000 b812 	b.w	802a7ec <_ZdlPv>

0802a7c8 <__cxa_guard_acquire>:
 802a7c8:	6803      	ldr	r3, [r0, #0]
 802a7ca:	07db      	lsls	r3, r3, #31
 802a7cc:	d406      	bmi.n	802a7dc <__cxa_guard_acquire+0x14>
 802a7ce:	7843      	ldrb	r3, [r0, #1]
 802a7d0:	b103      	cbz	r3, 802a7d4 <__cxa_guard_acquire+0xc>
 802a7d2:	deff      	udf	#255	; 0xff
 802a7d4:	2301      	movs	r3, #1
 802a7d6:	7043      	strb	r3, [r0, #1]
 802a7d8:	4618      	mov	r0, r3
 802a7da:	4770      	bx	lr
 802a7dc:	2000      	movs	r0, #0
 802a7de:	4770      	bx	lr

0802a7e0 <__cxa_guard_release>:
 802a7e0:	2301      	movs	r3, #1
 802a7e2:	6003      	str	r3, [r0, #0]
 802a7e4:	4770      	bx	lr

0802a7e6 <__cxa_pure_virtual>:
 802a7e6:	b508      	push	{r3, lr}
 802a7e8:	f000 f80e 	bl	802a808 <_ZSt9terminatev>

0802a7ec <_ZdlPv>:
 802a7ec:	f000 b988 	b.w	802ab00 <free>

0802a7f0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a7f0:	b508      	push	{r3, lr}
 802a7f2:	4780      	blx	r0
 802a7f4:	f000 f80d 	bl	802a812 <abort>

0802a7f8 <_ZSt13get_terminatev>:
 802a7f8:	4b02      	ldr	r3, [pc, #8]	; (802a804 <_ZSt13get_terminatev+0xc>)
 802a7fa:	6818      	ldr	r0, [r3, #0]
 802a7fc:	f3bf 8f5b 	dmb	ish
 802a800:	4770      	bx	lr
 802a802:	bf00      	nop
 802a804:	200000b8 	.word	0x200000b8

0802a808 <_ZSt9terminatev>:
 802a808:	b508      	push	{r3, lr}
 802a80a:	f7ff fff5 	bl	802a7f8 <_ZSt13get_terminatev>
 802a80e:	f7ff ffef 	bl	802a7f0 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a812 <abort>:
 802a812:	b508      	push	{r3, lr}
 802a814:	2006      	movs	r0, #6
 802a816:	f000 fe01 	bl	802b41c <raise>
 802a81a:	2001      	movs	r0, #1
 802a81c:	f7d7 f87a 	bl	8001914 <_exit>

0802a820 <__assert_func>:
 802a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a822:	4614      	mov	r4, r2
 802a824:	461a      	mov	r2, r3
 802a826:	4b09      	ldr	r3, [pc, #36]	; (802a84c <__assert_func+0x2c>)
 802a828:	681b      	ldr	r3, [r3, #0]
 802a82a:	4605      	mov	r5, r0
 802a82c:	68d8      	ldr	r0, [r3, #12]
 802a82e:	b14c      	cbz	r4, 802a844 <__assert_func+0x24>
 802a830:	4b07      	ldr	r3, [pc, #28]	; (802a850 <__assert_func+0x30>)
 802a832:	9100      	str	r1, [sp, #0]
 802a834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a838:	4906      	ldr	r1, [pc, #24]	; (802a854 <__assert_func+0x34>)
 802a83a:	462b      	mov	r3, r5
 802a83c:	f000 f8fe 	bl	802aa3c <fiprintf>
 802a840:	f7ff ffe7 	bl	802a812 <abort>
 802a844:	4b04      	ldr	r3, [pc, #16]	; (802a858 <__assert_func+0x38>)
 802a846:	461c      	mov	r4, r3
 802a848:	e7f3      	b.n	802a832 <__assert_func+0x12>
 802a84a:	bf00      	nop
 802a84c:	200000bc 	.word	0x200000bc
 802a850:	080311ac 	.word	0x080311ac
 802a854:	080311b9 	.word	0x080311b9
 802a858:	080311e7 	.word	0x080311e7

0802a85c <atexit>:
 802a85c:	2300      	movs	r3, #0
 802a85e:	4601      	mov	r1, r0
 802a860:	461a      	mov	r2, r3
 802a862:	4618      	mov	r0, r3
 802a864:	f000 bf40 	b.w	802b6e8 <__register_exitproc>

0802a868 <__cxa_atexit>:
 802a868:	b510      	push	{r4, lr}
 802a86a:	4c05      	ldr	r4, [pc, #20]	; (802a880 <__cxa_atexit+0x18>)
 802a86c:	4613      	mov	r3, r2
 802a86e:	b12c      	cbz	r4, 802a87c <__cxa_atexit+0x14>
 802a870:	460a      	mov	r2, r1
 802a872:	4601      	mov	r1, r0
 802a874:	2002      	movs	r0, #2
 802a876:	f000 ff37 	bl	802b6e8 <__register_exitproc>
 802a87a:	bd10      	pop	{r4, pc}
 802a87c:	4620      	mov	r0, r4
 802a87e:	e7fc      	b.n	802a87a <__cxa_atexit+0x12>
 802a880:	0802b6e9 	.word	0x0802b6e9

0802a884 <__errno>:
 802a884:	4b01      	ldr	r3, [pc, #4]	; (802a88c <__errno+0x8>)
 802a886:	6818      	ldr	r0, [r3, #0]
 802a888:	4770      	bx	lr
 802a88a:	bf00      	nop
 802a88c:	200000bc 	.word	0x200000bc

0802a890 <std>:
 802a890:	2300      	movs	r3, #0
 802a892:	b510      	push	{r4, lr}
 802a894:	4604      	mov	r4, r0
 802a896:	e9c0 3300 	strd	r3, r3, [r0]
 802a89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a89e:	6083      	str	r3, [r0, #8]
 802a8a0:	8181      	strh	r1, [r0, #12]
 802a8a2:	6643      	str	r3, [r0, #100]	; 0x64
 802a8a4:	81c2      	strh	r2, [r0, #14]
 802a8a6:	6183      	str	r3, [r0, #24]
 802a8a8:	4619      	mov	r1, r3
 802a8aa:	2208      	movs	r2, #8
 802a8ac:	305c      	adds	r0, #92	; 0x5c
 802a8ae:	f000 f93d 	bl	802ab2c <memset>
 802a8b2:	4b05      	ldr	r3, [pc, #20]	; (802a8c8 <std+0x38>)
 802a8b4:	6263      	str	r3, [r4, #36]	; 0x24
 802a8b6:	4b05      	ldr	r3, [pc, #20]	; (802a8cc <std+0x3c>)
 802a8b8:	62a3      	str	r3, [r4, #40]	; 0x28
 802a8ba:	4b05      	ldr	r3, [pc, #20]	; (802a8d0 <std+0x40>)
 802a8bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a8be:	4b05      	ldr	r3, [pc, #20]	; (802a8d4 <std+0x44>)
 802a8c0:	6224      	str	r4, [r4, #32]
 802a8c2:	6323      	str	r3, [r4, #48]	; 0x30
 802a8c4:	bd10      	pop	{r4, pc}
 802a8c6:	bf00      	nop
 802a8c8:	0802b495 	.word	0x0802b495
 802a8cc:	0802b4b7 	.word	0x0802b4b7
 802a8d0:	0802b4ef 	.word	0x0802b4ef
 802a8d4:	0802b513 	.word	0x0802b513

0802a8d8 <_cleanup_r>:
 802a8d8:	4901      	ldr	r1, [pc, #4]	; (802a8e0 <_cleanup_r+0x8>)
 802a8da:	f000 b8c1 	b.w	802aa60 <_fwalk_reent>
 802a8de:	bf00      	nop
 802a8e0:	0802b8d9 	.word	0x0802b8d9

0802a8e4 <__sfmoreglue>:
 802a8e4:	b570      	push	{r4, r5, r6, lr}
 802a8e6:	2268      	movs	r2, #104	; 0x68
 802a8e8:	1e4d      	subs	r5, r1, #1
 802a8ea:	4355      	muls	r5, r2
 802a8ec:	460e      	mov	r6, r1
 802a8ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a8f2:	f000 f98f 	bl	802ac14 <_malloc_r>
 802a8f6:	4604      	mov	r4, r0
 802a8f8:	b140      	cbz	r0, 802a90c <__sfmoreglue+0x28>
 802a8fa:	2100      	movs	r1, #0
 802a8fc:	e9c0 1600 	strd	r1, r6, [r0]
 802a900:	300c      	adds	r0, #12
 802a902:	60a0      	str	r0, [r4, #8]
 802a904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a908:	f000 f910 	bl	802ab2c <memset>
 802a90c:	4620      	mov	r0, r4
 802a90e:	bd70      	pop	{r4, r5, r6, pc}

0802a910 <__sfp_lock_acquire>:
 802a910:	4801      	ldr	r0, [pc, #4]	; (802a918 <__sfp_lock_acquire+0x8>)
 802a912:	f000 b8ea 	b.w	802aaea <__retarget_lock_acquire_recursive>
 802a916:	bf00      	nop
 802a918:	200156e6 	.word	0x200156e6

0802a91c <__sfp_lock_release>:
 802a91c:	4801      	ldr	r0, [pc, #4]	; (802a924 <__sfp_lock_release+0x8>)
 802a91e:	f000 b8e6 	b.w	802aaee <__retarget_lock_release_recursive>
 802a922:	bf00      	nop
 802a924:	200156e6 	.word	0x200156e6

0802a928 <__sinit_lock_acquire>:
 802a928:	4801      	ldr	r0, [pc, #4]	; (802a930 <__sinit_lock_acquire+0x8>)
 802a92a:	f000 b8de 	b.w	802aaea <__retarget_lock_acquire_recursive>
 802a92e:	bf00      	nop
 802a930:	200156e7 	.word	0x200156e7

0802a934 <__sinit_lock_release>:
 802a934:	4801      	ldr	r0, [pc, #4]	; (802a93c <__sinit_lock_release+0x8>)
 802a936:	f000 b8da 	b.w	802aaee <__retarget_lock_release_recursive>
 802a93a:	bf00      	nop
 802a93c:	200156e7 	.word	0x200156e7

0802a940 <__sinit>:
 802a940:	b510      	push	{r4, lr}
 802a942:	4604      	mov	r4, r0
 802a944:	f7ff fff0 	bl	802a928 <__sinit_lock_acquire>
 802a948:	69a3      	ldr	r3, [r4, #24]
 802a94a:	b11b      	cbz	r3, 802a954 <__sinit+0x14>
 802a94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a950:	f7ff bff0 	b.w	802a934 <__sinit_lock_release>
 802a954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a958:	6523      	str	r3, [r4, #80]	; 0x50
 802a95a:	4b13      	ldr	r3, [pc, #76]	; (802a9a8 <__sinit+0x68>)
 802a95c:	4a13      	ldr	r2, [pc, #76]	; (802a9ac <__sinit+0x6c>)
 802a95e:	681b      	ldr	r3, [r3, #0]
 802a960:	62a2      	str	r2, [r4, #40]	; 0x28
 802a962:	42a3      	cmp	r3, r4
 802a964:	bf04      	itt	eq
 802a966:	2301      	moveq	r3, #1
 802a968:	61a3      	streq	r3, [r4, #24]
 802a96a:	4620      	mov	r0, r4
 802a96c:	f000 f820 	bl	802a9b0 <__sfp>
 802a970:	6060      	str	r0, [r4, #4]
 802a972:	4620      	mov	r0, r4
 802a974:	f000 f81c 	bl	802a9b0 <__sfp>
 802a978:	60a0      	str	r0, [r4, #8]
 802a97a:	4620      	mov	r0, r4
 802a97c:	f000 f818 	bl	802a9b0 <__sfp>
 802a980:	2200      	movs	r2, #0
 802a982:	60e0      	str	r0, [r4, #12]
 802a984:	2104      	movs	r1, #4
 802a986:	6860      	ldr	r0, [r4, #4]
 802a988:	f7ff ff82 	bl	802a890 <std>
 802a98c:	68a0      	ldr	r0, [r4, #8]
 802a98e:	2201      	movs	r2, #1
 802a990:	2109      	movs	r1, #9
 802a992:	f7ff ff7d 	bl	802a890 <std>
 802a996:	68e0      	ldr	r0, [r4, #12]
 802a998:	2202      	movs	r2, #2
 802a99a:	2112      	movs	r1, #18
 802a99c:	f7ff ff78 	bl	802a890 <std>
 802a9a0:	2301      	movs	r3, #1
 802a9a2:	61a3      	str	r3, [r4, #24]
 802a9a4:	e7d2      	b.n	802a94c <__sinit+0xc>
 802a9a6:	bf00      	nop
 802a9a8:	08031248 	.word	0x08031248
 802a9ac:	0802a8d9 	.word	0x0802a8d9

0802a9b0 <__sfp>:
 802a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9b2:	4607      	mov	r7, r0
 802a9b4:	f7ff ffac 	bl	802a910 <__sfp_lock_acquire>
 802a9b8:	4b1e      	ldr	r3, [pc, #120]	; (802aa34 <__sfp+0x84>)
 802a9ba:	681e      	ldr	r6, [r3, #0]
 802a9bc:	69b3      	ldr	r3, [r6, #24]
 802a9be:	b913      	cbnz	r3, 802a9c6 <__sfp+0x16>
 802a9c0:	4630      	mov	r0, r6
 802a9c2:	f7ff ffbd 	bl	802a940 <__sinit>
 802a9c6:	3648      	adds	r6, #72	; 0x48
 802a9c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a9cc:	3b01      	subs	r3, #1
 802a9ce:	d503      	bpl.n	802a9d8 <__sfp+0x28>
 802a9d0:	6833      	ldr	r3, [r6, #0]
 802a9d2:	b30b      	cbz	r3, 802aa18 <__sfp+0x68>
 802a9d4:	6836      	ldr	r6, [r6, #0]
 802a9d6:	e7f7      	b.n	802a9c8 <__sfp+0x18>
 802a9d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a9dc:	b9d5      	cbnz	r5, 802aa14 <__sfp+0x64>
 802a9de:	4b16      	ldr	r3, [pc, #88]	; (802aa38 <__sfp+0x88>)
 802a9e0:	60e3      	str	r3, [r4, #12]
 802a9e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a9e6:	6665      	str	r5, [r4, #100]	; 0x64
 802a9e8:	f000 f87e 	bl	802aae8 <__retarget_lock_init_recursive>
 802a9ec:	f7ff ff96 	bl	802a91c <__sfp_lock_release>
 802a9f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a9f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a9f8:	6025      	str	r5, [r4, #0]
 802a9fa:	61a5      	str	r5, [r4, #24]
 802a9fc:	2208      	movs	r2, #8
 802a9fe:	4629      	mov	r1, r5
 802aa00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802aa04:	f000 f892 	bl	802ab2c <memset>
 802aa08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802aa0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802aa10:	4620      	mov	r0, r4
 802aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aa14:	3468      	adds	r4, #104	; 0x68
 802aa16:	e7d9      	b.n	802a9cc <__sfp+0x1c>
 802aa18:	2104      	movs	r1, #4
 802aa1a:	4638      	mov	r0, r7
 802aa1c:	f7ff ff62 	bl	802a8e4 <__sfmoreglue>
 802aa20:	4604      	mov	r4, r0
 802aa22:	6030      	str	r0, [r6, #0]
 802aa24:	2800      	cmp	r0, #0
 802aa26:	d1d5      	bne.n	802a9d4 <__sfp+0x24>
 802aa28:	f7ff ff78 	bl	802a91c <__sfp_lock_release>
 802aa2c:	230c      	movs	r3, #12
 802aa2e:	603b      	str	r3, [r7, #0]
 802aa30:	e7ee      	b.n	802aa10 <__sfp+0x60>
 802aa32:	bf00      	nop
 802aa34:	08031248 	.word	0x08031248
 802aa38:	ffff0001 	.word	0xffff0001

0802aa3c <fiprintf>:
 802aa3c:	b40e      	push	{r1, r2, r3}
 802aa3e:	b503      	push	{r0, r1, lr}
 802aa40:	4601      	mov	r1, r0
 802aa42:	ab03      	add	r3, sp, #12
 802aa44:	4805      	ldr	r0, [pc, #20]	; (802aa5c <fiprintf+0x20>)
 802aa46:	f853 2b04 	ldr.w	r2, [r3], #4
 802aa4a:	6800      	ldr	r0, [r0, #0]
 802aa4c:	9301      	str	r3, [sp, #4]
 802aa4e:	f000 f97f 	bl	802ad50 <_vfiprintf_r>
 802aa52:	b002      	add	sp, #8
 802aa54:	f85d eb04 	ldr.w	lr, [sp], #4
 802aa58:	b003      	add	sp, #12
 802aa5a:	4770      	bx	lr
 802aa5c:	200000bc 	.word	0x200000bc

0802aa60 <_fwalk_reent>:
 802aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802aa64:	4606      	mov	r6, r0
 802aa66:	4688      	mov	r8, r1
 802aa68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802aa6c:	2700      	movs	r7, #0
 802aa6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802aa72:	f1b9 0901 	subs.w	r9, r9, #1
 802aa76:	d505      	bpl.n	802aa84 <_fwalk_reent+0x24>
 802aa78:	6824      	ldr	r4, [r4, #0]
 802aa7a:	2c00      	cmp	r4, #0
 802aa7c:	d1f7      	bne.n	802aa6e <_fwalk_reent+0xe>
 802aa7e:	4638      	mov	r0, r7
 802aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aa84:	89ab      	ldrh	r3, [r5, #12]
 802aa86:	2b01      	cmp	r3, #1
 802aa88:	d907      	bls.n	802aa9a <_fwalk_reent+0x3a>
 802aa8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802aa8e:	3301      	adds	r3, #1
 802aa90:	d003      	beq.n	802aa9a <_fwalk_reent+0x3a>
 802aa92:	4629      	mov	r1, r5
 802aa94:	4630      	mov	r0, r6
 802aa96:	47c0      	blx	r8
 802aa98:	4307      	orrs	r7, r0
 802aa9a:	3568      	adds	r5, #104	; 0x68
 802aa9c:	e7e9      	b.n	802aa72 <_fwalk_reent+0x12>
	...

0802aaa0 <__libc_init_array>:
 802aaa0:	b570      	push	{r4, r5, r6, lr}
 802aaa2:	4d0d      	ldr	r5, [pc, #52]	; (802aad8 <__libc_init_array+0x38>)
 802aaa4:	4c0d      	ldr	r4, [pc, #52]	; (802aadc <__libc_init_array+0x3c>)
 802aaa6:	1b64      	subs	r4, r4, r5
 802aaa8:	10a4      	asrs	r4, r4, #2
 802aaaa:	2600      	movs	r6, #0
 802aaac:	42a6      	cmp	r6, r4
 802aaae:	d109      	bne.n	802aac4 <__libc_init_array+0x24>
 802aab0:	4d0b      	ldr	r5, [pc, #44]	; (802aae0 <__libc_init_array+0x40>)
 802aab2:	4c0c      	ldr	r4, [pc, #48]	; (802aae4 <__libc_init_array+0x44>)
 802aab4:	f001 f9b0 	bl	802be18 <_init>
 802aab8:	1b64      	subs	r4, r4, r5
 802aaba:	10a4      	asrs	r4, r4, #2
 802aabc:	2600      	movs	r6, #0
 802aabe:	42a6      	cmp	r6, r4
 802aac0:	d105      	bne.n	802aace <__libc_init_array+0x2e>
 802aac2:	bd70      	pop	{r4, r5, r6, pc}
 802aac4:	f855 3b04 	ldr.w	r3, [r5], #4
 802aac8:	4798      	blx	r3
 802aaca:	3601      	adds	r6, #1
 802aacc:	e7ee      	b.n	802aaac <__libc_init_array+0xc>
 802aace:	f855 3b04 	ldr.w	r3, [r5], #4
 802aad2:	4798      	blx	r3
 802aad4:	3601      	adds	r6, #1
 802aad6:	e7f2      	b.n	802aabe <__libc_init_array+0x1e>
 802aad8:	080312c8 	.word	0x080312c8
 802aadc:	080312c8 	.word	0x080312c8
 802aae0:	080312c8 	.word	0x080312c8
 802aae4:	080312e4 	.word	0x080312e4

0802aae8 <__retarget_lock_init_recursive>:
 802aae8:	4770      	bx	lr

0802aaea <__retarget_lock_acquire_recursive>:
 802aaea:	4770      	bx	lr

0802aaec <__retarget_lock_release>:
 802aaec:	4770      	bx	lr

0802aaee <__retarget_lock_release_recursive>:
 802aaee:	4770      	bx	lr

0802aaf0 <malloc>:
 802aaf0:	4b02      	ldr	r3, [pc, #8]	; (802aafc <malloc+0xc>)
 802aaf2:	4601      	mov	r1, r0
 802aaf4:	6818      	ldr	r0, [r3, #0]
 802aaf6:	f000 b88d 	b.w	802ac14 <_malloc_r>
 802aafa:	bf00      	nop
 802aafc:	200000bc 	.word	0x200000bc

0802ab00 <free>:
 802ab00:	4b02      	ldr	r3, [pc, #8]	; (802ab0c <free+0xc>)
 802ab02:	4601      	mov	r1, r0
 802ab04:	6818      	ldr	r0, [r3, #0]
 802ab06:	f000 b819 	b.w	802ab3c <_free_r>
 802ab0a:	bf00      	nop
 802ab0c:	200000bc 	.word	0x200000bc

0802ab10 <memcpy>:
 802ab10:	440a      	add	r2, r1
 802ab12:	4291      	cmp	r1, r2
 802ab14:	f100 33ff 	add.w	r3, r0, #4294967295
 802ab18:	d100      	bne.n	802ab1c <memcpy+0xc>
 802ab1a:	4770      	bx	lr
 802ab1c:	b510      	push	{r4, lr}
 802ab1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ab22:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ab26:	4291      	cmp	r1, r2
 802ab28:	d1f9      	bne.n	802ab1e <memcpy+0xe>
 802ab2a:	bd10      	pop	{r4, pc}

0802ab2c <memset>:
 802ab2c:	4402      	add	r2, r0
 802ab2e:	4603      	mov	r3, r0
 802ab30:	4293      	cmp	r3, r2
 802ab32:	d100      	bne.n	802ab36 <memset+0xa>
 802ab34:	4770      	bx	lr
 802ab36:	f803 1b01 	strb.w	r1, [r3], #1
 802ab3a:	e7f9      	b.n	802ab30 <memset+0x4>

0802ab3c <_free_r>:
 802ab3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ab3e:	2900      	cmp	r1, #0
 802ab40:	d044      	beq.n	802abcc <_free_r+0x90>
 802ab42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ab46:	9001      	str	r0, [sp, #4]
 802ab48:	2b00      	cmp	r3, #0
 802ab4a:	f1a1 0404 	sub.w	r4, r1, #4
 802ab4e:	bfb8      	it	lt
 802ab50:	18e4      	addlt	r4, r4, r3
 802ab52:	f000 ff8f 	bl	802ba74 <__malloc_lock>
 802ab56:	4a1e      	ldr	r2, [pc, #120]	; (802abd0 <_free_r+0x94>)
 802ab58:	9801      	ldr	r0, [sp, #4]
 802ab5a:	6813      	ldr	r3, [r2, #0]
 802ab5c:	b933      	cbnz	r3, 802ab6c <_free_r+0x30>
 802ab5e:	6063      	str	r3, [r4, #4]
 802ab60:	6014      	str	r4, [r2, #0]
 802ab62:	b003      	add	sp, #12
 802ab64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ab68:	f000 bf8a 	b.w	802ba80 <__malloc_unlock>
 802ab6c:	42a3      	cmp	r3, r4
 802ab6e:	d908      	bls.n	802ab82 <_free_r+0x46>
 802ab70:	6825      	ldr	r5, [r4, #0]
 802ab72:	1961      	adds	r1, r4, r5
 802ab74:	428b      	cmp	r3, r1
 802ab76:	bf01      	itttt	eq
 802ab78:	6819      	ldreq	r1, [r3, #0]
 802ab7a:	685b      	ldreq	r3, [r3, #4]
 802ab7c:	1949      	addeq	r1, r1, r5
 802ab7e:	6021      	streq	r1, [r4, #0]
 802ab80:	e7ed      	b.n	802ab5e <_free_r+0x22>
 802ab82:	461a      	mov	r2, r3
 802ab84:	685b      	ldr	r3, [r3, #4]
 802ab86:	b10b      	cbz	r3, 802ab8c <_free_r+0x50>
 802ab88:	42a3      	cmp	r3, r4
 802ab8a:	d9fa      	bls.n	802ab82 <_free_r+0x46>
 802ab8c:	6811      	ldr	r1, [r2, #0]
 802ab8e:	1855      	adds	r5, r2, r1
 802ab90:	42a5      	cmp	r5, r4
 802ab92:	d10b      	bne.n	802abac <_free_r+0x70>
 802ab94:	6824      	ldr	r4, [r4, #0]
 802ab96:	4421      	add	r1, r4
 802ab98:	1854      	adds	r4, r2, r1
 802ab9a:	42a3      	cmp	r3, r4
 802ab9c:	6011      	str	r1, [r2, #0]
 802ab9e:	d1e0      	bne.n	802ab62 <_free_r+0x26>
 802aba0:	681c      	ldr	r4, [r3, #0]
 802aba2:	685b      	ldr	r3, [r3, #4]
 802aba4:	6053      	str	r3, [r2, #4]
 802aba6:	4421      	add	r1, r4
 802aba8:	6011      	str	r1, [r2, #0]
 802abaa:	e7da      	b.n	802ab62 <_free_r+0x26>
 802abac:	d902      	bls.n	802abb4 <_free_r+0x78>
 802abae:	230c      	movs	r3, #12
 802abb0:	6003      	str	r3, [r0, #0]
 802abb2:	e7d6      	b.n	802ab62 <_free_r+0x26>
 802abb4:	6825      	ldr	r5, [r4, #0]
 802abb6:	1961      	adds	r1, r4, r5
 802abb8:	428b      	cmp	r3, r1
 802abba:	bf04      	itt	eq
 802abbc:	6819      	ldreq	r1, [r3, #0]
 802abbe:	685b      	ldreq	r3, [r3, #4]
 802abc0:	6063      	str	r3, [r4, #4]
 802abc2:	bf04      	itt	eq
 802abc4:	1949      	addeq	r1, r1, r5
 802abc6:	6021      	streq	r1, [r4, #0]
 802abc8:	6054      	str	r4, [r2, #4]
 802abca:	e7ca      	b.n	802ab62 <_free_r+0x26>
 802abcc:	b003      	add	sp, #12
 802abce:	bd30      	pop	{r4, r5, pc}
 802abd0:	200156e8 	.word	0x200156e8

0802abd4 <sbrk_aligned>:
 802abd4:	b570      	push	{r4, r5, r6, lr}
 802abd6:	4e0e      	ldr	r6, [pc, #56]	; (802ac10 <sbrk_aligned+0x3c>)
 802abd8:	460c      	mov	r4, r1
 802abda:	6831      	ldr	r1, [r6, #0]
 802abdc:	4605      	mov	r5, r0
 802abde:	b911      	cbnz	r1, 802abe6 <sbrk_aligned+0x12>
 802abe0:	f000 fbe4 	bl	802b3ac <_sbrk_r>
 802abe4:	6030      	str	r0, [r6, #0]
 802abe6:	4621      	mov	r1, r4
 802abe8:	4628      	mov	r0, r5
 802abea:	f000 fbdf 	bl	802b3ac <_sbrk_r>
 802abee:	1c43      	adds	r3, r0, #1
 802abf0:	d00a      	beq.n	802ac08 <sbrk_aligned+0x34>
 802abf2:	1cc4      	adds	r4, r0, #3
 802abf4:	f024 0403 	bic.w	r4, r4, #3
 802abf8:	42a0      	cmp	r0, r4
 802abfa:	d007      	beq.n	802ac0c <sbrk_aligned+0x38>
 802abfc:	1a21      	subs	r1, r4, r0
 802abfe:	4628      	mov	r0, r5
 802ac00:	f000 fbd4 	bl	802b3ac <_sbrk_r>
 802ac04:	3001      	adds	r0, #1
 802ac06:	d101      	bne.n	802ac0c <sbrk_aligned+0x38>
 802ac08:	f04f 34ff 	mov.w	r4, #4294967295
 802ac0c:	4620      	mov	r0, r4
 802ac0e:	bd70      	pop	{r4, r5, r6, pc}
 802ac10:	200156ec 	.word	0x200156ec

0802ac14 <_malloc_r>:
 802ac14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ac18:	1ccd      	adds	r5, r1, #3
 802ac1a:	f025 0503 	bic.w	r5, r5, #3
 802ac1e:	3508      	adds	r5, #8
 802ac20:	2d0c      	cmp	r5, #12
 802ac22:	bf38      	it	cc
 802ac24:	250c      	movcc	r5, #12
 802ac26:	2d00      	cmp	r5, #0
 802ac28:	4607      	mov	r7, r0
 802ac2a:	db01      	blt.n	802ac30 <_malloc_r+0x1c>
 802ac2c:	42a9      	cmp	r1, r5
 802ac2e:	d905      	bls.n	802ac3c <_malloc_r+0x28>
 802ac30:	230c      	movs	r3, #12
 802ac32:	603b      	str	r3, [r7, #0]
 802ac34:	2600      	movs	r6, #0
 802ac36:	4630      	mov	r0, r6
 802ac38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ac3c:	4e2e      	ldr	r6, [pc, #184]	; (802acf8 <_malloc_r+0xe4>)
 802ac3e:	f000 ff19 	bl	802ba74 <__malloc_lock>
 802ac42:	6833      	ldr	r3, [r6, #0]
 802ac44:	461c      	mov	r4, r3
 802ac46:	bb34      	cbnz	r4, 802ac96 <_malloc_r+0x82>
 802ac48:	4629      	mov	r1, r5
 802ac4a:	4638      	mov	r0, r7
 802ac4c:	f7ff ffc2 	bl	802abd4 <sbrk_aligned>
 802ac50:	1c43      	adds	r3, r0, #1
 802ac52:	4604      	mov	r4, r0
 802ac54:	d14d      	bne.n	802acf2 <_malloc_r+0xde>
 802ac56:	6834      	ldr	r4, [r6, #0]
 802ac58:	4626      	mov	r6, r4
 802ac5a:	2e00      	cmp	r6, #0
 802ac5c:	d140      	bne.n	802ace0 <_malloc_r+0xcc>
 802ac5e:	6823      	ldr	r3, [r4, #0]
 802ac60:	4631      	mov	r1, r6
 802ac62:	4638      	mov	r0, r7
 802ac64:	eb04 0803 	add.w	r8, r4, r3
 802ac68:	f000 fba0 	bl	802b3ac <_sbrk_r>
 802ac6c:	4580      	cmp	r8, r0
 802ac6e:	d13a      	bne.n	802ace6 <_malloc_r+0xd2>
 802ac70:	6821      	ldr	r1, [r4, #0]
 802ac72:	3503      	adds	r5, #3
 802ac74:	1a6d      	subs	r5, r5, r1
 802ac76:	f025 0503 	bic.w	r5, r5, #3
 802ac7a:	3508      	adds	r5, #8
 802ac7c:	2d0c      	cmp	r5, #12
 802ac7e:	bf38      	it	cc
 802ac80:	250c      	movcc	r5, #12
 802ac82:	4629      	mov	r1, r5
 802ac84:	4638      	mov	r0, r7
 802ac86:	f7ff ffa5 	bl	802abd4 <sbrk_aligned>
 802ac8a:	3001      	adds	r0, #1
 802ac8c:	d02b      	beq.n	802ace6 <_malloc_r+0xd2>
 802ac8e:	6823      	ldr	r3, [r4, #0]
 802ac90:	442b      	add	r3, r5
 802ac92:	6023      	str	r3, [r4, #0]
 802ac94:	e00e      	b.n	802acb4 <_malloc_r+0xa0>
 802ac96:	6822      	ldr	r2, [r4, #0]
 802ac98:	1b52      	subs	r2, r2, r5
 802ac9a:	d41e      	bmi.n	802acda <_malloc_r+0xc6>
 802ac9c:	2a0b      	cmp	r2, #11
 802ac9e:	d916      	bls.n	802acce <_malloc_r+0xba>
 802aca0:	1961      	adds	r1, r4, r5
 802aca2:	42a3      	cmp	r3, r4
 802aca4:	6025      	str	r5, [r4, #0]
 802aca6:	bf18      	it	ne
 802aca8:	6059      	strne	r1, [r3, #4]
 802acaa:	6863      	ldr	r3, [r4, #4]
 802acac:	bf08      	it	eq
 802acae:	6031      	streq	r1, [r6, #0]
 802acb0:	5162      	str	r2, [r4, r5]
 802acb2:	604b      	str	r3, [r1, #4]
 802acb4:	4638      	mov	r0, r7
 802acb6:	f104 060b 	add.w	r6, r4, #11
 802acba:	f000 fee1 	bl	802ba80 <__malloc_unlock>
 802acbe:	f026 0607 	bic.w	r6, r6, #7
 802acc2:	1d23      	adds	r3, r4, #4
 802acc4:	1af2      	subs	r2, r6, r3
 802acc6:	d0b6      	beq.n	802ac36 <_malloc_r+0x22>
 802acc8:	1b9b      	subs	r3, r3, r6
 802acca:	50a3      	str	r3, [r4, r2]
 802accc:	e7b3      	b.n	802ac36 <_malloc_r+0x22>
 802acce:	6862      	ldr	r2, [r4, #4]
 802acd0:	42a3      	cmp	r3, r4
 802acd2:	bf0c      	ite	eq
 802acd4:	6032      	streq	r2, [r6, #0]
 802acd6:	605a      	strne	r2, [r3, #4]
 802acd8:	e7ec      	b.n	802acb4 <_malloc_r+0xa0>
 802acda:	4623      	mov	r3, r4
 802acdc:	6864      	ldr	r4, [r4, #4]
 802acde:	e7b2      	b.n	802ac46 <_malloc_r+0x32>
 802ace0:	4634      	mov	r4, r6
 802ace2:	6876      	ldr	r6, [r6, #4]
 802ace4:	e7b9      	b.n	802ac5a <_malloc_r+0x46>
 802ace6:	230c      	movs	r3, #12
 802ace8:	603b      	str	r3, [r7, #0]
 802acea:	4638      	mov	r0, r7
 802acec:	f000 fec8 	bl	802ba80 <__malloc_unlock>
 802acf0:	e7a1      	b.n	802ac36 <_malloc_r+0x22>
 802acf2:	6025      	str	r5, [r4, #0]
 802acf4:	e7de      	b.n	802acb4 <_malloc_r+0xa0>
 802acf6:	bf00      	nop
 802acf8:	200156e8 	.word	0x200156e8

0802acfc <__sfputc_r>:
 802acfc:	6893      	ldr	r3, [r2, #8]
 802acfe:	3b01      	subs	r3, #1
 802ad00:	2b00      	cmp	r3, #0
 802ad02:	b410      	push	{r4}
 802ad04:	6093      	str	r3, [r2, #8]
 802ad06:	da08      	bge.n	802ad1a <__sfputc_r+0x1e>
 802ad08:	6994      	ldr	r4, [r2, #24]
 802ad0a:	42a3      	cmp	r3, r4
 802ad0c:	db01      	blt.n	802ad12 <__sfputc_r+0x16>
 802ad0e:	290a      	cmp	r1, #10
 802ad10:	d103      	bne.n	802ad1a <__sfputc_r+0x1e>
 802ad12:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad16:	f000 bc15 	b.w	802b544 <__swbuf_r>
 802ad1a:	6813      	ldr	r3, [r2, #0]
 802ad1c:	1c58      	adds	r0, r3, #1
 802ad1e:	6010      	str	r0, [r2, #0]
 802ad20:	7019      	strb	r1, [r3, #0]
 802ad22:	4608      	mov	r0, r1
 802ad24:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad28:	4770      	bx	lr

0802ad2a <__sfputs_r>:
 802ad2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad2c:	4606      	mov	r6, r0
 802ad2e:	460f      	mov	r7, r1
 802ad30:	4614      	mov	r4, r2
 802ad32:	18d5      	adds	r5, r2, r3
 802ad34:	42ac      	cmp	r4, r5
 802ad36:	d101      	bne.n	802ad3c <__sfputs_r+0x12>
 802ad38:	2000      	movs	r0, #0
 802ad3a:	e007      	b.n	802ad4c <__sfputs_r+0x22>
 802ad3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad40:	463a      	mov	r2, r7
 802ad42:	4630      	mov	r0, r6
 802ad44:	f7ff ffda 	bl	802acfc <__sfputc_r>
 802ad48:	1c43      	adds	r3, r0, #1
 802ad4a:	d1f3      	bne.n	802ad34 <__sfputs_r+0xa>
 802ad4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ad50 <_vfiprintf_r>:
 802ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad54:	460d      	mov	r5, r1
 802ad56:	b09d      	sub	sp, #116	; 0x74
 802ad58:	4614      	mov	r4, r2
 802ad5a:	4698      	mov	r8, r3
 802ad5c:	4606      	mov	r6, r0
 802ad5e:	b118      	cbz	r0, 802ad68 <_vfiprintf_r+0x18>
 802ad60:	6983      	ldr	r3, [r0, #24]
 802ad62:	b90b      	cbnz	r3, 802ad68 <_vfiprintf_r+0x18>
 802ad64:	f7ff fdec 	bl	802a940 <__sinit>
 802ad68:	4b89      	ldr	r3, [pc, #548]	; (802af90 <_vfiprintf_r+0x240>)
 802ad6a:	429d      	cmp	r5, r3
 802ad6c:	d11b      	bne.n	802ada6 <_vfiprintf_r+0x56>
 802ad6e:	6875      	ldr	r5, [r6, #4]
 802ad70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ad72:	07d9      	lsls	r1, r3, #31
 802ad74:	d405      	bmi.n	802ad82 <_vfiprintf_r+0x32>
 802ad76:	89ab      	ldrh	r3, [r5, #12]
 802ad78:	059a      	lsls	r2, r3, #22
 802ad7a:	d402      	bmi.n	802ad82 <_vfiprintf_r+0x32>
 802ad7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ad7e:	f7ff feb4 	bl	802aaea <__retarget_lock_acquire_recursive>
 802ad82:	89ab      	ldrh	r3, [r5, #12]
 802ad84:	071b      	lsls	r3, r3, #28
 802ad86:	d501      	bpl.n	802ad8c <_vfiprintf_r+0x3c>
 802ad88:	692b      	ldr	r3, [r5, #16]
 802ad8a:	b9eb      	cbnz	r3, 802adc8 <_vfiprintf_r+0x78>
 802ad8c:	4629      	mov	r1, r5
 802ad8e:	4630      	mov	r0, r6
 802ad90:	f000 fc3c 	bl	802b60c <__swsetup_r>
 802ad94:	b1c0      	cbz	r0, 802adc8 <_vfiprintf_r+0x78>
 802ad96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ad98:	07dc      	lsls	r4, r3, #31
 802ad9a:	d50e      	bpl.n	802adba <_vfiprintf_r+0x6a>
 802ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 802ada0:	b01d      	add	sp, #116	; 0x74
 802ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ada6:	4b7b      	ldr	r3, [pc, #492]	; (802af94 <_vfiprintf_r+0x244>)
 802ada8:	429d      	cmp	r5, r3
 802adaa:	d101      	bne.n	802adb0 <_vfiprintf_r+0x60>
 802adac:	68b5      	ldr	r5, [r6, #8]
 802adae:	e7df      	b.n	802ad70 <_vfiprintf_r+0x20>
 802adb0:	4b79      	ldr	r3, [pc, #484]	; (802af98 <_vfiprintf_r+0x248>)
 802adb2:	429d      	cmp	r5, r3
 802adb4:	bf08      	it	eq
 802adb6:	68f5      	ldreq	r5, [r6, #12]
 802adb8:	e7da      	b.n	802ad70 <_vfiprintf_r+0x20>
 802adba:	89ab      	ldrh	r3, [r5, #12]
 802adbc:	0598      	lsls	r0, r3, #22
 802adbe:	d4ed      	bmi.n	802ad9c <_vfiprintf_r+0x4c>
 802adc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802adc2:	f7ff fe94 	bl	802aaee <__retarget_lock_release_recursive>
 802adc6:	e7e9      	b.n	802ad9c <_vfiprintf_r+0x4c>
 802adc8:	2300      	movs	r3, #0
 802adca:	9309      	str	r3, [sp, #36]	; 0x24
 802adcc:	2320      	movs	r3, #32
 802adce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802add2:	f8cd 800c 	str.w	r8, [sp, #12]
 802add6:	2330      	movs	r3, #48	; 0x30
 802add8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802af9c <_vfiprintf_r+0x24c>
 802addc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ade0:	f04f 0901 	mov.w	r9, #1
 802ade4:	4623      	mov	r3, r4
 802ade6:	469a      	mov	sl, r3
 802ade8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802adec:	b10a      	cbz	r2, 802adf2 <_vfiprintf_r+0xa2>
 802adee:	2a25      	cmp	r2, #37	; 0x25
 802adf0:	d1f9      	bne.n	802ade6 <_vfiprintf_r+0x96>
 802adf2:	ebba 0b04 	subs.w	fp, sl, r4
 802adf6:	d00b      	beq.n	802ae10 <_vfiprintf_r+0xc0>
 802adf8:	465b      	mov	r3, fp
 802adfa:	4622      	mov	r2, r4
 802adfc:	4629      	mov	r1, r5
 802adfe:	4630      	mov	r0, r6
 802ae00:	f7ff ff93 	bl	802ad2a <__sfputs_r>
 802ae04:	3001      	adds	r0, #1
 802ae06:	f000 80aa 	beq.w	802af5e <_vfiprintf_r+0x20e>
 802ae0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ae0c:	445a      	add	r2, fp
 802ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 802ae10:	f89a 3000 	ldrb.w	r3, [sl]
 802ae14:	2b00      	cmp	r3, #0
 802ae16:	f000 80a2 	beq.w	802af5e <_vfiprintf_r+0x20e>
 802ae1a:	2300      	movs	r3, #0
 802ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 802ae20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae24:	f10a 0a01 	add.w	sl, sl, #1
 802ae28:	9304      	str	r3, [sp, #16]
 802ae2a:	9307      	str	r3, [sp, #28]
 802ae2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ae30:	931a      	str	r3, [sp, #104]	; 0x68
 802ae32:	4654      	mov	r4, sl
 802ae34:	2205      	movs	r2, #5
 802ae36:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae3a:	4858      	ldr	r0, [pc, #352]	; (802af9c <_vfiprintf_r+0x24c>)
 802ae3c:	f7d5 f9e8 	bl	8000210 <memchr>
 802ae40:	9a04      	ldr	r2, [sp, #16]
 802ae42:	b9d8      	cbnz	r0, 802ae7c <_vfiprintf_r+0x12c>
 802ae44:	06d1      	lsls	r1, r2, #27
 802ae46:	bf44      	itt	mi
 802ae48:	2320      	movmi	r3, #32
 802ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ae4e:	0713      	lsls	r3, r2, #28
 802ae50:	bf44      	itt	mi
 802ae52:	232b      	movmi	r3, #43	; 0x2b
 802ae54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ae58:	f89a 3000 	ldrb.w	r3, [sl]
 802ae5c:	2b2a      	cmp	r3, #42	; 0x2a
 802ae5e:	d015      	beq.n	802ae8c <_vfiprintf_r+0x13c>
 802ae60:	9a07      	ldr	r2, [sp, #28]
 802ae62:	4654      	mov	r4, sl
 802ae64:	2000      	movs	r0, #0
 802ae66:	f04f 0c0a 	mov.w	ip, #10
 802ae6a:	4621      	mov	r1, r4
 802ae6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ae70:	3b30      	subs	r3, #48	; 0x30
 802ae72:	2b09      	cmp	r3, #9
 802ae74:	d94e      	bls.n	802af14 <_vfiprintf_r+0x1c4>
 802ae76:	b1b0      	cbz	r0, 802aea6 <_vfiprintf_r+0x156>
 802ae78:	9207      	str	r2, [sp, #28]
 802ae7a:	e014      	b.n	802aea6 <_vfiprintf_r+0x156>
 802ae7c:	eba0 0308 	sub.w	r3, r0, r8
 802ae80:	fa09 f303 	lsl.w	r3, r9, r3
 802ae84:	4313      	orrs	r3, r2
 802ae86:	9304      	str	r3, [sp, #16]
 802ae88:	46a2      	mov	sl, r4
 802ae8a:	e7d2      	b.n	802ae32 <_vfiprintf_r+0xe2>
 802ae8c:	9b03      	ldr	r3, [sp, #12]
 802ae8e:	1d19      	adds	r1, r3, #4
 802ae90:	681b      	ldr	r3, [r3, #0]
 802ae92:	9103      	str	r1, [sp, #12]
 802ae94:	2b00      	cmp	r3, #0
 802ae96:	bfbb      	ittet	lt
 802ae98:	425b      	neglt	r3, r3
 802ae9a:	f042 0202 	orrlt.w	r2, r2, #2
 802ae9e:	9307      	strge	r3, [sp, #28]
 802aea0:	9307      	strlt	r3, [sp, #28]
 802aea2:	bfb8      	it	lt
 802aea4:	9204      	strlt	r2, [sp, #16]
 802aea6:	7823      	ldrb	r3, [r4, #0]
 802aea8:	2b2e      	cmp	r3, #46	; 0x2e
 802aeaa:	d10c      	bne.n	802aec6 <_vfiprintf_r+0x176>
 802aeac:	7863      	ldrb	r3, [r4, #1]
 802aeae:	2b2a      	cmp	r3, #42	; 0x2a
 802aeb0:	d135      	bne.n	802af1e <_vfiprintf_r+0x1ce>
 802aeb2:	9b03      	ldr	r3, [sp, #12]
 802aeb4:	1d1a      	adds	r2, r3, #4
 802aeb6:	681b      	ldr	r3, [r3, #0]
 802aeb8:	9203      	str	r2, [sp, #12]
 802aeba:	2b00      	cmp	r3, #0
 802aebc:	bfb8      	it	lt
 802aebe:	f04f 33ff 	movlt.w	r3, #4294967295
 802aec2:	3402      	adds	r4, #2
 802aec4:	9305      	str	r3, [sp, #20]
 802aec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802afac <_vfiprintf_r+0x25c>
 802aeca:	7821      	ldrb	r1, [r4, #0]
 802aecc:	2203      	movs	r2, #3
 802aece:	4650      	mov	r0, sl
 802aed0:	f7d5 f99e 	bl	8000210 <memchr>
 802aed4:	b140      	cbz	r0, 802aee8 <_vfiprintf_r+0x198>
 802aed6:	2340      	movs	r3, #64	; 0x40
 802aed8:	eba0 000a 	sub.w	r0, r0, sl
 802aedc:	fa03 f000 	lsl.w	r0, r3, r0
 802aee0:	9b04      	ldr	r3, [sp, #16]
 802aee2:	4303      	orrs	r3, r0
 802aee4:	3401      	adds	r4, #1
 802aee6:	9304      	str	r3, [sp, #16]
 802aee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aeec:	482c      	ldr	r0, [pc, #176]	; (802afa0 <_vfiprintf_r+0x250>)
 802aeee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802aef2:	2206      	movs	r2, #6
 802aef4:	f7d5 f98c 	bl	8000210 <memchr>
 802aef8:	2800      	cmp	r0, #0
 802aefa:	d03f      	beq.n	802af7c <_vfiprintf_r+0x22c>
 802aefc:	4b29      	ldr	r3, [pc, #164]	; (802afa4 <_vfiprintf_r+0x254>)
 802aefe:	bb1b      	cbnz	r3, 802af48 <_vfiprintf_r+0x1f8>
 802af00:	9b03      	ldr	r3, [sp, #12]
 802af02:	3307      	adds	r3, #7
 802af04:	f023 0307 	bic.w	r3, r3, #7
 802af08:	3308      	adds	r3, #8
 802af0a:	9303      	str	r3, [sp, #12]
 802af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af0e:	443b      	add	r3, r7
 802af10:	9309      	str	r3, [sp, #36]	; 0x24
 802af12:	e767      	b.n	802ade4 <_vfiprintf_r+0x94>
 802af14:	fb0c 3202 	mla	r2, ip, r2, r3
 802af18:	460c      	mov	r4, r1
 802af1a:	2001      	movs	r0, #1
 802af1c:	e7a5      	b.n	802ae6a <_vfiprintf_r+0x11a>
 802af1e:	2300      	movs	r3, #0
 802af20:	3401      	adds	r4, #1
 802af22:	9305      	str	r3, [sp, #20]
 802af24:	4619      	mov	r1, r3
 802af26:	f04f 0c0a 	mov.w	ip, #10
 802af2a:	4620      	mov	r0, r4
 802af2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af30:	3a30      	subs	r2, #48	; 0x30
 802af32:	2a09      	cmp	r2, #9
 802af34:	d903      	bls.n	802af3e <_vfiprintf_r+0x1ee>
 802af36:	2b00      	cmp	r3, #0
 802af38:	d0c5      	beq.n	802aec6 <_vfiprintf_r+0x176>
 802af3a:	9105      	str	r1, [sp, #20]
 802af3c:	e7c3      	b.n	802aec6 <_vfiprintf_r+0x176>
 802af3e:	fb0c 2101 	mla	r1, ip, r1, r2
 802af42:	4604      	mov	r4, r0
 802af44:	2301      	movs	r3, #1
 802af46:	e7f0      	b.n	802af2a <_vfiprintf_r+0x1da>
 802af48:	ab03      	add	r3, sp, #12
 802af4a:	9300      	str	r3, [sp, #0]
 802af4c:	462a      	mov	r2, r5
 802af4e:	4b16      	ldr	r3, [pc, #88]	; (802afa8 <_vfiprintf_r+0x258>)
 802af50:	a904      	add	r1, sp, #16
 802af52:	4630      	mov	r0, r6
 802af54:	f3af 8000 	nop.w
 802af58:	4607      	mov	r7, r0
 802af5a:	1c78      	adds	r0, r7, #1
 802af5c:	d1d6      	bne.n	802af0c <_vfiprintf_r+0x1bc>
 802af5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802af60:	07d9      	lsls	r1, r3, #31
 802af62:	d405      	bmi.n	802af70 <_vfiprintf_r+0x220>
 802af64:	89ab      	ldrh	r3, [r5, #12]
 802af66:	059a      	lsls	r2, r3, #22
 802af68:	d402      	bmi.n	802af70 <_vfiprintf_r+0x220>
 802af6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802af6c:	f7ff fdbf 	bl	802aaee <__retarget_lock_release_recursive>
 802af70:	89ab      	ldrh	r3, [r5, #12]
 802af72:	065b      	lsls	r3, r3, #25
 802af74:	f53f af12 	bmi.w	802ad9c <_vfiprintf_r+0x4c>
 802af78:	9809      	ldr	r0, [sp, #36]	; 0x24
 802af7a:	e711      	b.n	802ada0 <_vfiprintf_r+0x50>
 802af7c:	ab03      	add	r3, sp, #12
 802af7e:	9300      	str	r3, [sp, #0]
 802af80:	462a      	mov	r2, r5
 802af82:	4b09      	ldr	r3, [pc, #36]	; (802afa8 <_vfiprintf_r+0x258>)
 802af84:	a904      	add	r1, sp, #16
 802af86:	4630      	mov	r0, r6
 802af88:	f000 f880 	bl	802b08c <_printf_i>
 802af8c:	e7e4      	b.n	802af58 <_vfiprintf_r+0x208>
 802af8e:	bf00      	nop
 802af90:	08031208 	.word	0x08031208
 802af94:	08031228 	.word	0x08031228
 802af98:	080311e8 	.word	0x080311e8
 802af9c:	0803124c 	.word	0x0803124c
 802afa0:	08031256 	.word	0x08031256
 802afa4:	00000000 	.word	0x00000000
 802afa8:	0802ad2b 	.word	0x0802ad2b
 802afac:	08031252 	.word	0x08031252

0802afb0 <_printf_common>:
 802afb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802afb4:	4616      	mov	r6, r2
 802afb6:	4699      	mov	r9, r3
 802afb8:	688a      	ldr	r2, [r1, #8]
 802afba:	690b      	ldr	r3, [r1, #16]
 802afbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802afc0:	4293      	cmp	r3, r2
 802afc2:	bfb8      	it	lt
 802afc4:	4613      	movlt	r3, r2
 802afc6:	6033      	str	r3, [r6, #0]
 802afc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802afcc:	4607      	mov	r7, r0
 802afce:	460c      	mov	r4, r1
 802afd0:	b10a      	cbz	r2, 802afd6 <_printf_common+0x26>
 802afd2:	3301      	adds	r3, #1
 802afd4:	6033      	str	r3, [r6, #0]
 802afd6:	6823      	ldr	r3, [r4, #0]
 802afd8:	0699      	lsls	r1, r3, #26
 802afda:	bf42      	ittt	mi
 802afdc:	6833      	ldrmi	r3, [r6, #0]
 802afde:	3302      	addmi	r3, #2
 802afe0:	6033      	strmi	r3, [r6, #0]
 802afe2:	6825      	ldr	r5, [r4, #0]
 802afe4:	f015 0506 	ands.w	r5, r5, #6
 802afe8:	d106      	bne.n	802aff8 <_printf_common+0x48>
 802afea:	f104 0a19 	add.w	sl, r4, #25
 802afee:	68e3      	ldr	r3, [r4, #12]
 802aff0:	6832      	ldr	r2, [r6, #0]
 802aff2:	1a9b      	subs	r3, r3, r2
 802aff4:	42ab      	cmp	r3, r5
 802aff6:	dc26      	bgt.n	802b046 <_printf_common+0x96>
 802aff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802affc:	1e13      	subs	r3, r2, #0
 802affe:	6822      	ldr	r2, [r4, #0]
 802b000:	bf18      	it	ne
 802b002:	2301      	movne	r3, #1
 802b004:	0692      	lsls	r2, r2, #26
 802b006:	d42b      	bmi.n	802b060 <_printf_common+0xb0>
 802b008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b00c:	4649      	mov	r1, r9
 802b00e:	4638      	mov	r0, r7
 802b010:	47c0      	blx	r8
 802b012:	3001      	adds	r0, #1
 802b014:	d01e      	beq.n	802b054 <_printf_common+0xa4>
 802b016:	6823      	ldr	r3, [r4, #0]
 802b018:	68e5      	ldr	r5, [r4, #12]
 802b01a:	6832      	ldr	r2, [r6, #0]
 802b01c:	f003 0306 	and.w	r3, r3, #6
 802b020:	2b04      	cmp	r3, #4
 802b022:	bf08      	it	eq
 802b024:	1aad      	subeq	r5, r5, r2
 802b026:	68a3      	ldr	r3, [r4, #8]
 802b028:	6922      	ldr	r2, [r4, #16]
 802b02a:	bf0c      	ite	eq
 802b02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b030:	2500      	movne	r5, #0
 802b032:	4293      	cmp	r3, r2
 802b034:	bfc4      	itt	gt
 802b036:	1a9b      	subgt	r3, r3, r2
 802b038:	18ed      	addgt	r5, r5, r3
 802b03a:	2600      	movs	r6, #0
 802b03c:	341a      	adds	r4, #26
 802b03e:	42b5      	cmp	r5, r6
 802b040:	d11a      	bne.n	802b078 <_printf_common+0xc8>
 802b042:	2000      	movs	r0, #0
 802b044:	e008      	b.n	802b058 <_printf_common+0xa8>
 802b046:	2301      	movs	r3, #1
 802b048:	4652      	mov	r2, sl
 802b04a:	4649      	mov	r1, r9
 802b04c:	4638      	mov	r0, r7
 802b04e:	47c0      	blx	r8
 802b050:	3001      	adds	r0, #1
 802b052:	d103      	bne.n	802b05c <_printf_common+0xac>
 802b054:	f04f 30ff 	mov.w	r0, #4294967295
 802b058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b05c:	3501      	adds	r5, #1
 802b05e:	e7c6      	b.n	802afee <_printf_common+0x3e>
 802b060:	18e1      	adds	r1, r4, r3
 802b062:	1c5a      	adds	r2, r3, #1
 802b064:	2030      	movs	r0, #48	; 0x30
 802b066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b06a:	4422      	add	r2, r4
 802b06c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b074:	3302      	adds	r3, #2
 802b076:	e7c7      	b.n	802b008 <_printf_common+0x58>
 802b078:	2301      	movs	r3, #1
 802b07a:	4622      	mov	r2, r4
 802b07c:	4649      	mov	r1, r9
 802b07e:	4638      	mov	r0, r7
 802b080:	47c0      	blx	r8
 802b082:	3001      	adds	r0, #1
 802b084:	d0e6      	beq.n	802b054 <_printf_common+0xa4>
 802b086:	3601      	adds	r6, #1
 802b088:	e7d9      	b.n	802b03e <_printf_common+0x8e>
	...

0802b08c <_printf_i>:
 802b08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b090:	7e0f      	ldrb	r7, [r1, #24]
 802b092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b094:	2f78      	cmp	r7, #120	; 0x78
 802b096:	4691      	mov	r9, r2
 802b098:	4680      	mov	r8, r0
 802b09a:	460c      	mov	r4, r1
 802b09c:	469a      	mov	sl, r3
 802b09e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b0a2:	d807      	bhi.n	802b0b4 <_printf_i+0x28>
 802b0a4:	2f62      	cmp	r7, #98	; 0x62
 802b0a6:	d80a      	bhi.n	802b0be <_printf_i+0x32>
 802b0a8:	2f00      	cmp	r7, #0
 802b0aa:	f000 80d8 	beq.w	802b25e <_printf_i+0x1d2>
 802b0ae:	2f58      	cmp	r7, #88	; 0x58
 802b0b0:	f000 80a3 	beq.w	802b1fa <_printf_i+0x16e>
 802b0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b0b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b0bc:	e03a      	b.n	802b134 <_printf_i+0xa8>
 802b0be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b0c2:	2b15      	cmp	r3, #21
 802b0c4:	d8f6      	bhi.n	802b0b4 <_printf_i+0x28>
 802b0c6:	a101      	add	r1, pc, #4	; (adr r1, 802b0cc <_printf_i+0x40>)
 802b0c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b0cc:	0802b125 	.word	0x0802b125
 802b0d0:	0802b139 	.word	0x0802b139
 802b0d4:	0802b0b5 	.word	0x0802b0b5
 802b0d8:	0802b0b5 	.word	0x0802b0b5
 802b0dc:	0802b0b5 	.word	0x0802b0b5
 802b0e0:	0802b0b5 	.word	0x0802b0b5
 802b0e4:	0802b139 	.word	0x0802b139
 802b0e8:	0802b0b5 	.word	0x0802b0b5
 802b0ec:	0802b0b5 	.word	0x0802b0b5
 802b0f0:	0802b0b5 	.word	0x0802b0b5
 802b0f4:	0802b0b5 	.word	0x0802b0b5
 802b0f8:	0802b245 	.word	0x0802b245
 802b0fc:	0802b169 	.word	0x0802b169
 802b100:	0802b227 	.word	0x0802b227
 802b104:	0802b0b5 	.word	0x0802b0b5
 802b108:	0802b0b5 	.word	0x0802b0b5
 802b10c:	0802b267 	.word	0x0802b267
 802b110:	0802b0b5 	.word	0x0802b0b5
 802b114:	0802b169 	.word	0x0802b169
 802b118:	0802b0b5 	.word	0x0802b0b5
 802b11c:	0802b0b5 	.word	0x0802b0b5
 802b120:	0802b22f 	.word	0x0802b22f
 802b124:	682b      	ldr	r3, [r5, #0]
 802b126:	1d1a      	adds	r2, r3, #4
 802b128:	681b      	ldr	r3, [r3, #0]
 802b12a:	602a      	str	r2, [r5, #0]
 802b12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b134:	2301      	movs	r3, #1
 802b136:	e0a3      	b.n	802b280 <_printf_i+0x1f4>
 802b138:	6820      	ldr	r0, [r4, #0]
 802b13a:	6829      	ldr	r1, [r5, #0]
 802b13c:	0606      	lsls	r6, r0, #24
 802b13e:	f101 0304 	add.w	r3, r1, #4
 802b142:	d50a      	bpl.n	802b15a <_printf_i+0xce>
 802b144:	680e      	ldr	r6, [r1, #0]
 802b146:	602b      	str	r3, [r5, #0]
 802b148:	2e00      	cmp	r6, #0
 802b14a:	da03      	bge.n	802b154 <_printf_i+0xc8>
 802b14c:	232d      	movs	r3, #45	; 0x2d
 802b14e:	4276      	negs	r6, r6
 802b150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b154:	485e      	ldr	r0, [pc, #376]	; (802b2d0 <_printf_i+0x244>)
 802b156:	230a      	movs	r3, #10
 802b158:	e019      	b.n	802b18e <_printf_i+0x102>
 802b15a:	680e      	ldr	r6, [r1, #0]
 802b15c:	602b      	str	r3, [r5, #0]
 802b15e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b162:	bf18      	it	ne
 802b164:	b236      	sxthne	r6, r6
 802b166:	e7ef      	b.n	802b148 <_printf_i+0xbc>
 802b168:	682b      	ldr	r3, [r5, #0]
 802b16a:	6820      	ldr	r0, [r4, #0]
 802b16c:	1d19      	adds	r1, r3, #4
 802b16e:	6029      	str	r1, [r5, #0]
 802b170:	0601      	lsls	r1, r0, #24
 802b172:	d501      	bpl.n	802b178 <_printf_i+0xec>
 802b174:	681e      	ldr	r6, [r3, #0]
 802b176:	e002      	b.n	802b17e <_printf_i+0xf2>
 802b178:	0646      	lsls	r6, r0, #25
 802b17a:	d5fb      	bpl.n	802b174 <_printf_i+0xe8>
 802b17c:	881e      	ldrh	r6, [r3, #0]
 802b17e:	4854      	ldr	r0, [pc, #336]	; (802b2d0 <_printf_i+0x244>)
 802b180:	2f6f      	cmp	r7, #111	; 0x6f
 802b182:	bf0c      	ite	eq
 802b184:	2308      	moveq	r3, #8
 802b186:	230a      	movne	r3, #10
 802b188:	2100      	movs	r1, #0
 802b18a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b18e:	6865      	ldr	r5, [r4, #4]
 802b190:	60a5      	str	r5, [r4, #8]
 802b192:	2d00      	cmp	r5, #0
 802b194:	bfa2      	ittt	ge
 802b196:	6821      	ldrge	r1, [r4, #0]
 802b198:	f021 0104 	bicge.w	r1, r1, #4
 802b19c:	6021      	strge	r1, [r4, #0]
 802b19e:	b90e      	cbnz	r6, 802b1a4 <_printf_i+0x118>
 802b1a0:	2d00      	cmp	r5, #0
 802b1a2:	d04d      	beq.n	802b240 <_printf_i+0x1b4>
 802b1a4:	4615      	mov	r5, r2
 802b1a6:	fbb6 f1f3 	udiv	r1, r6, r3
 802b1aa:	fb03 6711 	mls	r7, r3, r1, r6
 802b1ae:	5dc7      	ldrb	r7, [r0, r7]
 802b1b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b1b4:	4637      	mov	r7, r6
 802b1b6:	42bb      	cmp	r3, r7
 802b1b8:	460e      	mov	r6, r1
 802b1ba:	d9f4      	bls.n	802b1a6 <_printf_i+0x11a>
 802b1bc:	2b08      	cmp	r3, #8
 802b1be:	d10b      	bne.n	802b1d8 <_printf_i+0x14c>
 802b1c0:	6823      	ldr	r3, [r4, #0]
 802b1c2:	07de      	lsls	r6, r3, #31
 802b1c4:	d508      	bpl.n	802b1d8 <_printf_i+0x14c>
 802b1c6:	6923      	ldr	r3, [r4, #16]
 802b1c8:	6861      	ldr	r1, [r4, #4]
 802b1ca:	4299      	cmp	r1, r3
 802b1cc:	bfde      	ittt	le
 802b1ce:	2330      	movle	r3, #48	; 0x30
 802b1d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b1d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b1d8:	1b52      	subs	r2, r2, r5
 802b1da:	6122      	str	r2, [r4, #16]
 802b1dc:	f8cd a000 	str.w	sl, [sp]
 802b1e0:	464b      	mov	r3, r9
 802b1e2:	aa03      	add	r2, sp, #12
 802b1e4:	4621      	mov	r1, r4
 802b1e6:	4640      	mov	r0, r8
 802b1e8:	f7ff fee2 	bl	802afb0 <_printf_common>
 802b1ec:	3001      	adds	r0, #1
 802b1ee:	d14c      	bne.n	802b28a <_printf_i+0x1fe>
 802b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 802b1f4:	b004      	add	sp, #16
 802b1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b1fa:	4835      	ldr	r0, [pc, #212]	; (802b2d0 <_printf_i+0x244>)
 802b1fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802b200:	6829      	ldr	r1, [r5, #0]
 802b202:	6823      	ldr	r3, [r4, #0]
 802b204:	f851 6b04 	ldr.w	r6, [r1], #4
 802b208:	6029      	str	r1, [r5, #0]
 802b20a:	061d      	lsls	r5, r3, #24
 802b20c:	d514      	bpl.n	802b238 <_printf_i+0x1ac>
 802b20e:	07df      	lsls	r7, r3, #31
 802b210:	bf44      	itt	mi
 802b212:	f043 0320 	orrmi.w	r3, r3, #32
 802b216:	6023      	strmi	r3, [r4, #0]
 802b218:	b91e      	cbnz	r6, 802b222 <_printf_i+0x196>
 802b21a:	6823      	ldr	r3, [r4, #0]
 802b21c:	f023 0320 	bic.w	r3, r3, #32
 802b220:	6023      	str	r3, [r4, #0]
 802b222:	2310      	movs	r3, #16
 802b224:	e7b0      	b.n	802b188 <_printf_i+0xfc>
 802b226:	6823      	ldr	r3, [r4, #0]
 802b228:	f043 0320 	orr.w	r3, r3, #32
 802b22c:	6023      	str	r3, [r4, #0]
 802b22e:	2378      	movs	r3, #120	; 0x78
 802b230:	4828      	ldr	r0, [pc, #160]	; (802b2d4 <_printf_i+0x248>)
 802b232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b236:	e7e3      	b.n	802b200 <_printf_i+0x174>
 802b238:	0659      	lsls	r1, r3, #25
 802b23a:	bf48      	it	mi
 802b23c:	b2b6      	uxthmi	r6, r6
 802b23e:	e7e6      	b.n	802b20e <_printf_i+0x182>
 802b240:	4615      	mov	r5, r2
 802b242:	e7bb      	b.n	802b1bc <_printf_i+0x130>
 802b244:	682b      	ldr	r3, [r5, #0]
 802b246:	6826      	ldr	r6, [r4, #0]
 802b248:	6961      	ldr	r1, [r4, #20]
 802b24a:	1d18      	adds	r0, r3, #4
 802b24c:	6028      	str	r0, [r5, #0]
 802b24e:	0635      	lsls	r5, r6, #24
 802b250:	681b      	ldr	r3, [r3, #0]
 802b252:	d501      	bpl.n	802b258 <_printf_i+0x1cc>
 802b254:	6019      	str	r1, [r3, #0]
 802b256:	e002      	b.n	802b25e <_printf_i+0x1d2>
 802b258:	0670      	lsls	r0, r6, #25
 802b25a:	d5fb      	bpl.n	802b254 <_printf_i+0x1c8>
 802b25c:	8019      	strh	r1, [r3, #0]
 802b25e:	2300      	movs	r3, #0
 802b260:	6123      	str	r3, [r4, #16]
 802b262:	4615      	mov	r5, r2
 802b264:	e7ba      	b.n	802b1dc <_printf_i+0x150>
 802b266:	682b      	ldr	r3, [r5, #0]
 802b268:	1d1a      	adds	r2, r3, #4
 802b26a:	602a      	str	r2, [r5, #0]
 802b26c:	681d      	ldr	r5, [r3, #0]
 802b26e:	6862      	ldr	r2, [r4, #4]
 802b270:	2100      	movs	r1, #0
 802b272:	4628      	mov	r0, r5
 802b274:	f7d4 ffcc 	bl	8000210 <memchr>
 802b278:	b108      	cbz	r0, 802b27e <_printf_i+0x1f2>
 802b27a:	1b40      	subs	r0, r0, r5
 802b27c:	6060      	str	r0, [r4, #4]
 802b27e:	6863      	ldr	r3, [r4, #4]
 802b280:	6123      	str	r3, [r4, #16]
 802b282:	2300      	movs	r3, #0
 802b284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b288:	e7a8      	b.n	802b1dc <_printf_i+0x150>
 802b28a:	6923      	ldr	r3, [r4, #16]
 802b28c:	462a      	mov	r2, r5
 802b28e:	4649      	mov	r1, r9
 802b290:	4640      	mov	r0, r8
 802b292:	47d0      	blx	sl
 802b294:	3001      	adds	r0, #1
 802b296:	d0ab      	beq.n	802b1f0 <_printf_i+0x164>
 802b298:	6823      	ldr	r3, [r4, #0]
 802b29a:	079b      	lsls	r3, r3, #30
 802b29c:	d413      	bmi.n	802b2c6 <_printf_i+0x23a>
 802b29e:	68e0      	ldr	r0, [r4, #12]
 802b2a0:	9b03      	ldr	r3, [sp, #12]
 802b2a2:	4298      	cmp	r0, r3
 802b2a4:	bfb8      	it	lt
 802b2a6:	4618      	movlt	r0, r3
 802b2a8:	e7a4      	b.n	802b1f4 <_printf_i+0x168>
 802b2aa:	2301      	movs	r3, #1
 802b2ac:	4632      	mov	r2, r6
 802b2ae:	4649      	mov	r1, r9
 802b2b0:	4640      	mov	r0, r8
 802b2b2:	47d0      	blx	sl
 802b2b4:	3001      	adds	r0, #1
 802b2b6:	d09b      	beq.n	802b1f0 <_printf_i+0x164>
 802b2b8:	3501      	adds	r5, #1
 802b2ba:	68e3      	ldr	r3, [r4, #12]
 802b2bc:	9903      	ldr	r1, [sp, #12]
 802b2be:	1a5b      	subs	r3, r3, r1
 802b2c0:	42ab      	cmp	r3, r5
 802b2c2:	dcf2      	bgt.n	802b2aa <_printf_i+0x21e>
 802b2c4:	e7eb      	b.n	802b29e <_printf_i+0x212>
 802b2c6:	2500      	movs	r5, #0
 802b2c8:	f104 0619 	add.w	r6, r4, #25
 802b2cc:	e7f5      	b.n	802b2ba <_printf_i+0x22e>
 802b2ce:	bf00      	nop
 802b2d0:	0803125d 	.word	0x0803125d
 802b2d4:	0803126e 	.word	0x0803126e

0802b2d8 <cleanup_glue>:
 802b2d8:	b538      	push	{r3, r4, r5, lr}
 802b2da:	460c      	mov	r4, r1
 802b2dc:	6809      	ldr	r1, [r1, #0]
 802b2de:	4605      	mov	r5, r0
 802b2e0:	b109      	cbz	r1, 802b2e6 <cleanup_glue+0xe>
 802b2e2:	f7ff fff9 	bl	802b2d8 <cleanup_glue>
 802b2e6:	4621      	mov	r1, r4
 802b2e8:	4628      	mov	r0, r5
 802b2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b2ee:	f7ff bc25 	b.w	802ab3c <_free_r>
	...

0802b2f4 <_reclaim_reent>:
 802b2f4:	4b2c      	ldr	r3, [pc, #176]	; (802b3a8 <_reclaim_reent+0xb4>)
 802b2f6:	681b      	ldr	r3, [r3, #0]
 802b2f8:	4283      	cmp	r3, r0
 802b2fa:	b570      	push	{r4, r5, r6, lr}
 802b2fc:	4604      	mov	r4, r0
 802b2fe:	d051      	beq.n	802b3a4 <_reclaim_reent+0xb0>
 802b300:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802b302:	b143      	cbz	r3, 802b316 <_reclaim_reent+0x22>
 802b304:	68db      	ldr	r3, [r3, #12]
 802b306:	2b00      	cmp	r3, #0
 802b308:	d14a      	bne.n	802b3a0 <_reclaim_reent+0xac>
 802b30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b30c:	6819      	ldr	r1, [r3, #0]
 802b30e:	b111      	cbz	r1, 802b316 <_reclaim_reent+0x22>
 802b310:	4620      	mov	r0, r4
 802b312:	f7ff fc13 	bl	802ab3c <_free_r>
 802b316:	6961      	ldr	r1, [r4, #20]
 802b318:	b111      	cbz	r1, 802b320 <_reclaim_reent+0x2c>
 802b31a:	4620      	mov	r0, r4
 802b31c:	f7ff fc0e 	bl	802ab3c <_free_r>
 802b320:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802b322:	b111      	cbz	r1, 802b32a <_reclaim_reent+0x36>
 802b324:	4620      	mov	r0, r4
 802b326:	f7ff fc09 	bl	802ab3c <_free_r>
 802b32a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802b32c:	b111      	cbz	r1, 802b334 <_reclaim_reent+0x40>
 802b32e:	4620      	mov	r0, r4
 802b330:	f7ff fc04 	bl	802ab3c <_free_r>
 802b334:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802b336:	b111      	cbz	r1, 802b33e <_reclaim_reent+0x4a>
 802b338:	4620      	mov	r0, r4
 802b33a:	f7ff fbff 	bl	802ab3c <_free_r>
 802b33e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b340:	b111      	cbz	r1, 802b348 <_reclaim_reent+0x54>
 802b342:	4620      	mov	r0, r4
 802b344:	f7ff fbfa 	bl	802ab3c <_free_r>
 802b348:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802b34a:	b111      	cbz	r1, 802b352 <_reclaim_reent+0x5e>
 802b34c:	4620      	mov	r0, r4
 802b34e:	f7ff fbf5 	bl	802ab3c <_free_r>
 802b352:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802b354:	b111      	cbz	r1, 802b35c <_reclaim_reent+0x68>
 802b356:	4620      	mov	r0, r4
 802b358:	f7ff fbf0 	bl	802ab3c <_free_r>
 802b35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b35e:	b111      	cbz	r1, 802b366 <_reclaim_reent+0x72>
 802b360:	4620      	mov	r0, r4
 802b362:	f7ff fbeb 	bl	802ab3c <_free_r>
 802b366:	69a3      	ldr	r3, [r4, #24]
 802b368:	b1e3      	cbz	r3, 802b3a4 <_reclaim_reent+0xb0>
 802b36a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802b36c:	4620      	mov	r0, r4
 802b36e:	4798      	blx	r3
 802b370:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802b372:	b1b9      	cbz	r1, 802b3a4 <_reclaim_reent+0xb0>
 802b374:	4620      	mov	r0, r4
 802b376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b37a:	f7ff bfad 	b.w	802b2d8 <cleanup_glue>
 802b37e:	5949      	ldr	r1, [r1, r5]
 802b380:	b941      	cbnz	r1, 802b394 <_reclaim_reent+0xa0>
 802b382:	3504      	adds	r5, #4
 802b384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b386:	2d80      	cmp	r5, #128	; 0x80
 802b388:	68d9      	ldr	r1, [r3, #12]
 802b38a:	d1f8      	bne.n	802b37e <_reclaim_reent+0x8a>
 802b38c:	4620      	mov	r0, r4
 802b38e:	f7ff fbd5 	bl	802ab3c <_free_r>
 802b392:	e7ba      	b.n	802b30a <_reclaim_reent+0x16>
 802b394:	680e      	ldr	r6, [r1, #0]
 802b396:	4620      	mov	r0, r4
 802b398:	f7ff fbd0 	bl	802ab3c <_free_r>
 802b39c:	4631      	mov	r1, r6
 802b39e:	e7ef      	b.n	802b380 <_reclaim_reent+0x8c>
 802b3a0:	2500      	movs	r5, #0
 802b3a2:	e7ef      	b.n	802b384 <_reclaim_reent+0x90>
 802b3a4:	bd70      	pop	{r4, r5, r6, pc}
 802b3a6:	bf00      	nop
 802b3a8:	200000bc 	.word	0x200000bc

0802b3ac <_sbrk_r>:
 802b3ac:	b538      	push	{r3, r4, r5, lr}
 802b3ae:	4d06      	ldr	r5, [pc, #24]	; (802b3c8 <_sbrk_r+0x1c>)
 802b3b0:	2300      	movs	r3, #0
 802b3b2:	4604      	mov	r4, r0
 802b3b4:	4608      	mov	r0, r1
 802b3b6:	602b      	str	r3, [r5, #0]
 802b3b8:	f7d6 fada 	bl	8001970 <_sbrk>
 802b3bc:	1c43      	adds	r3, r0, #1
 802b3be:	d102      	bne.n	802b3c6 <_sbrk_r+0x1a>
 802b3c0:	682b      	ldr	r3, [r5, #0]
 802b3c2:	b103      	cbz	r3, 802b3c6 <_sbrk_r+0x1a>
 802b3c4:	6023      	str	r3, [r4, #0]
 802b3c6:	bd38      	pop	{r3, r4, r5, pc}
 802b3c8:	200157f8 	.word	0x200157f8

0802b3cc <_raise_r>:
 802b3cc:	291f      	cmp	r1, #31
 802b3ce:	b538      	push	{r3, r4, r5, lr}
 802b3d0:	4604      	mov	r4, r0
 802b3d2:	460d      	mov	r5, r1
 802b3d4:	d904      	bls.n	802b3e0 <_raise_r+0x14>
 802b3d6:	2316      	movs	r3, #22
 802b3d8:	6003      	str	r3, [r0, #0]
 802b3da:	f04f 30ff 	mov.w	r0, #4294967295
 802b3de:	bd38      	pop	{r3, r4, r5, pc}
 802b3e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b3e2:	b112      	cbz	r2, 802b3ea <_raise_r+0x1e>
 802b3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b3e8:	b94b      	cbnz	r3, 802b3fe <_raise_r+0x32>
 802b3ea:	4620      	mov	r0, r4
 802b3ec:	f000 f830 	bl	802b450 <_getpid_r>
 802b3f0:	462a      	mov	r2, r5
 802b3f2:	4601      	mov	r1, r0
 802b3f4:	4620      	mov	r0, r4
 802b3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b3fa:	f000 b817 	b.w	802b42c <_kill_r>
 802b3fe:	2b01      	cmp	r3, #1
 802b400:	d00a      	beq.n	802b418 <_raise_r+0x4c>
 802b402:	1c59      	adds	r1, r3, #1
 802b404:	d103      	bne.n	802b40e <_raise_r+0x42>
 802b406:	2316      	movs	r3, #22
 802b408:	6003      	str	r3, [r0, #0]
 802b40a:	2001      	movs	r0, #1
 802b40c:	e7e7      	b.n	802b3de <_raise_r+0x12>
 802b40e:	2400      	movs	r4, #0
 802b410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b414:	4628      	mov	r0, r5
 802b416:	4798      	blx	r3
 802b418:	2000      	movs	r0, #0
 802b41a:	e7e0      	b.n	802b3de <_raise_r+0x12>

0802b41c <raise>:
 802b41c:	4b02      	ldr	r3, [pc, #8]	; (802b428 <raise+0xc>)
 802b41e:	4601      	mov	r1, r0
 802b420:	6818      	ldr	r0, [r3, #0]
 802b422:	f7ff bfd3 	b.w	802b3cc <_raise_r>
 802b426:	bf00      	nop
 802b428:	200000bc 	.word	0x200000bc

0802b42c <_kill_r>:
 802b42c:	b538      	push	{r3, r4, r5, lr}
 802b42e:	4d07      	ldr	r5, [pc, #28]	; (802b44c <_kill_r+0x20>)
 802b430:	2300      	movs	r3, #0
 802b432:	4604      	mov	r4, r0
 802b434:	4608      	mov	r0, r1
 802b436:	4611      	mov	r1, r2
 802b438:	602b      	str	r3, [r5, #0]
 802b43a:	f7d6 fa63 	bl	8001904 <_kill>
 802b43e:	1c43      	adds	r3, r0, #1
 802b440:	d102      	bne.n	802b448 <_kill_r+0x1c>
 802b442:	682b      	ldr	r3, [r5, #0]
 802b444:	b103      	cbz	r3, 802b448 <_kill_r+0x1c>
 802b446:	6023      	str	r3, [r4, #0]
 802b448:	bd38      	pop	{r3, r4, r5, pc}
 802b44a:	bf00      	nop
 802b44c:	200157f8 	.word	0x200157f8

0802b450 <_getpid_r>:
 802b450:	f7d6 ba56 	b.w	8001900 <_getpid>

0802b454 <siprintf>:
 802b454:	b40e      	push	{r1, r2, r3}
 802b456:	b500      	push	{lr}
 802b458:	b09c      	sub	sp, #112	; 0x70
 802b45a:	ab1d      	add	r3, sp, #116	; 0x74
 802b45c:	9002      	str	r0, [sp, #8]
 802b45e:	9006      	str	r0, [sp, #24]
 802b460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802b464:	4809      	ldr	r0, [pc, #36]	; (802b48c <siprintf+0x38>)
 802b466:	9107      	str	r1, [sp, #28]
 802b468:	9104      	str	r1, [sp, #16]
 802b46a:	4909      	ldr	r1, [pc, #36]	; (802b490 <siprintf+0x3c>)
 802b46c:	f853 2b04 	ldr.w	r2, [r3], #4
 802b470:	9105      	str	r1, [sp, #20]
 802b472:	6800      	ldr	r0, [r0, #0]
 802b474:	9301      	str	r3, [sp, #4]
 802b476:	a902      	add	r1, sp, #8
 802b478:	f000 fb92 	bl	802bba0 <_svfiprintf_r>
 802b47c:	9b02      	ldr	r3, [sp, #8]
 802b47e:	2200      	movs	r2, #0
 802b480:	701a      	strb	r2, [r3, #0]
 802b482:	b01c      	add	sp, #112	; 0x70
 802b484:	f85d eb04 	ldr.w	lr, [sp], #4
 802b488:	b003      	add	sp, #12
 802b48a:	4770      	bx	lr
 802b48c:	200000bc 	.word	0x200000bc
 802b490:	ffff0208 	.word	0xffff0208

0802b494 <__sread>:
 802b494:	b510      	push	{r4, lr}
 802b496:	460c      	mov	r4, r1
 802b498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b49c:	f000 fc80 	bl	802bda0 <_read_r>
 802b4a0:	2800      	cmp	r0, #0
 802b4a2:	bfab      	itete	ge
 802b4a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b4a6:	89a3      	ldrhlt	r3, [r4, #12]
 802b4a8:	181b      	addge	r3, r3, r0
 802b4aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b4ae:	bfac      	ite	ge
 802b4b0:	6563      	strge	r3, [r4, #84]	; 0x54
 802b4b2:	81a3      	strhlt	r3, [r4, #12]
 802b4b4:	bd10      	pop	{r4, pc}

0802b4b6 <__swrite>:
 802b4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4ba:	461f      	mov	r7, r3
 802b4bc:	898b      	ldrh	r3, [r1, #12]
 802b4be:	05db      	lsls	r3, r3, #23
 802b4c0:	4605      	mov	r5, r0
 802b4c2:	460c      	mov	r4, r1
 802b4c4:	4616      	mov	r6, r2
 802b4c6:	d505      	bpl.n	802b4d4 <__swrite+0x1e>
 802b4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4cc:	2302      	movs	r3, #2
 802b4ce:	2200      	movs	r2, #0
 802b4d0:	f000 fa3e 	bl	802b950 <_lseek_r>
 802b4d4:	89a3      	ldrh	r3, [r4, #12]
 802b4d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b4de:	81a3      	strh	r3, [r4, #12]
 802b4e0:	4632      	mov	r2, r6
 802b4e2:	463b      	mov	r3, r7
 802b4e4:	4628      	mov	r0, r5
 802b4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b4ea:	f000 b87d 	b.w	802b5e8 <_write_r>

0802b4ee <__sseek>:
 802b4ee:	b510      	push	{r4, lr}
 802b4f0:	460c      	mov	r4, r1
 802b4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4f6:	f000 fa2b 	bl	802b950 <_lseek_r>
 802b4fa:	1c43      	adds	r3, r0, #1
 802b4fc:	89a3      	ldrh	r3, [r4, #12]
 802b4fe:	bf15      	itete	ne
 802b500:	6560      	strne	r0, [r4, #84]	; 0x54
 802b502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b50a:	81a3      	strheq	r3, [r4, #12]
 802b50c:	bf18      	it	ne
 802b50e:	81a3      	strhne	r3, [r4, #12]
 802b510:	bd10      	pop	{r4, pc}

0802b512 <__sclose>:
 802b512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b516:	f000 b949 	b.w	802b7ac <_close_r>

0802b51a <strncmp>:
 802b51a:	b510      	push	{r4, lr}
 802b51c:	b17a      	cbz	r2, 802b53e <strncmp+0x24>
 802b51e:	4603      	mov	r3, r0
 802b520:	3901      	subs	r1, #1
 802b522:	1884      	adds	r4, r0, r2
 802b524:	f813 0b01 	ldrb.w	r0, [r3], #1
 802b528:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b52c:	4290      	cmp	r0, r2
 802b52e:	d101      	bne.n	802b534 <strncmp+0x1a>
 802b530:	42a3      	cmp	r3, r4
 802b532:	d101      	bne.n	802b538 <strncmp+0x1e>
 802b534:	1a80      	subs	r0, r0, r2
 802b536:	bd10      	pop	{r4, pc}
 802b538:	2800      	cmp	r0, #0
 802b53a:	d1f3      	bne.n	802b524 <strncmp+0xa>
 802b53c:	e7fa      	b.n	802b534 <strncmp+0x1a>
 802b53e:	4610      	mov	r0, r2
 802b540:	e7f9      	b.n	802b536 <strncmp+0x1c>
	...

0802b544 <__swbuf_r>:
 802b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b546:	460e      	mov	r6, r1
 802b548:	4614      	mov	r4, r2
 802b54a:	4605      	mov	r5, r0
 802b54c:	b118      	cbz	r0, 802b556 <__swbuf_r+0x12>
 802b54e:	6983      	ldr	r3, [r0, #24]
 802b550:	b90b      	cbnz	r3, 802b556 <__swbuf_r+0x12>
 802b552:	f7ff f9f5 	bl	802a940 <__sinit>
 802b556:	4b21      	ldr	r3, [pc, #132]	; (802b5dc <__swbuf_r+0x98>)
 802b558:	429c      	cmp	r4, r3
 802b55a:	d12b      	bne.n	802b5b4 <__swbuf_r+0x70>
 802b55c:	686c      	ldr	r4, [r5, #4]
 802b55e:	69a3      	ldr	r3, [r4, #24]
 802b560:	60a3      	str	r3, [r4, #8]
 802b562:	89a3      	ldrh	r3, [r4, #12]
 802b564:	071a      	lsls	r2, r3, #28
 802b566:	d52f      	bpl.n	802b5c8 <__swbuf_r+0x84>
 802b568:	6923      	ldr	r3, [r4, #16]
 802b56a:	b36b      	cbz	r3, 802b5c8 <__swbuf_r+0x84>
 802b56c:	6923      	ldr	r3, [r4, #16]
 802b56e:	6820      	ldr	r0, [r4, #0]
 802b570:	1ac0      	subs	r0, r0, r3
 802b572:	6963      	ldr	r3, [r4, #20]
 802b574:	b2f6      	uxtb	r6, r6
 802b576:	4283      	cmp	r3, r0
 802b578:	4637      	mov	r7, r6
 802b57a:	dc04      	bgt.n	802b586 <__swbuf_r+0x42>
 802b57c:	4621      	mov	r1, r4
 802b57e:	4628      	mov	r0, r5
 802b580:	f000 f9aa 	bl	802b8d8 <_fflush_r>
 802b584:	bb30      	cbnz	r0, 802b5d4 <__swbuf_r+0x90>
 802b586:	68a3      	ldr	r3, [r4, #8]
 802b588:	3b01      	subs	r3, #1
 802b58a:	60a3      	str	r3, [r4, #8]
 802b58c:	6823      	ldr	r3, [r4, #0]
 802b58e:	1c5a      	adds	r2, r3, #1
 802b590:	6022      	str	r2, [r4, #0]
 802b592:	701e      	strb	r6, [r3, #0]
 802b594:	6963      	ldr	r3, [r4, #20]
 802b596:	3001      	adds	r0, #1
 802b598:	4283      	cmp	r3, r0
 802b59a:	d004      	beq.n	802b5a6 <__swbuf_r+0x62>
 802b59c:	89a3      	ldrh	r3, [r4, #12]
 802b59e:	07db      	lsls	r3, r3, #31
 802b5a0:	d506      	bpl.n	802b5b0 <__swbuf_r+0x6c>
 802b5a2:	2e0a      	cmp	r6, #10
 802b5a4:	d104      	bne.n	802b5b0 <__swbuf_r+0x6c>
 802b5a6:	4621      	mov	r1, r4
 802b5a8:	4628      	mov	r0, r5
 802b5aa:	f000 f995 	bl	802b8d8 <_fflush_r>
 802b5ae:	b988      	cbnz	r0, 802b5d4 <__swbuf_r+0x90>
 802b5b0:	4638      	mov	r0, r7
 802b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b5b4:	4b0a      	ldr	r3, [pc, #40]	; (802b5e0 <__swbuf_r+0x9c>)
 802b5b6:	429c      	cmp	r4, r3
 802b5b8:	d101      	bne.n	802b5be <__swbuf_r+0x7a>
 802b5ba:	68ac      	ldr	r4, [r5, #8]
 802b5bc:	e7cf      	b.n	802b55e <__swbuf_r+0x1a>
 802b5be:	4b09      	ldr	r3, [pc, #36]	; (802b5e4 <__swbuf_r+0xa0>)
 802b5c0:	429c      	cmp	r4, r3
 802b5c2:	bf08      	it	eq
 802b5c4:	68ec      	ldreq	r4, [r5, #12]
 802b5c6:	e7ca      	b.n	802b55e <__swbuf_r+0x1a>
 802b5c8:	4621      	mov	r1, r4
 802b5ca:	4628      	mov	r0, r5
 802b5cc:	f000 f81e 	bl	802b60c <__swsetup_r>
 802b5d0:	2800      	cmp	r0, #0
 802b5d2:	d0cb      	beq.n	802b56c <__swbuf_r+0x28>
 802b5d4:	f04f 37ff 	mov.w	r7, #4294967295
 802b5d8:	e7ea      	b.n	802b5b0 <__swbuf_r+0x6c>
 802b5da:	bf00      	nop
 802b5dc:	08031208 	.word	0x08031208
 802b5e0:	08031228 	.word	0x08031228
 802b5e4:	080311e8 	.word	0x080311e8

0802b5e8 <_write_r>:
 802b5e8:	b538      	push	{r3, r4, r5, lr}
 802b5ea:	4d07      	ldr	r5, [pc, #28]	; (802b608 <_write_r+0x20>)
 802b5ec:	4604      	mov	r4, r0
 802b5ee:	4608      	mov	r0, r1
 802b5f0:	4611      	mov	r1, r2
 802b5f2:	2200      	movs	r2, #0
 802b5f4:	602a      	str	r2, [r5, #0]
 802b5f6:	461a      	mov	r2, r3
 802b5f8:	f7d6 f9a0 	bl	800193c <_write>
 802b5fc:	1c43      	adds	r3, r0, #1
 802b5fe:	d102      	bne.n	802b606 <_write_r+0x1e>
 802b600:	682b      	ldr	r3, [r5, #0]
 802b602:	b103      	cbz	r3, 802b606 <_write_r+0x1e>
 802b604:	6023      	str	r3, [r4, #0]
 802b606:	bd38      	pop	{r3, r4, r5, pc}
 802b608:	200157f8 	.word	0x200157f8

0802b60c <__swsetup_r>:
 802b60c:	4b32      	ldr	r3, [pc, #200]	; (802b6d8 <__swsetup_r+0xcc>)
 802b60e:	b570      	push	{r4, r5, r6, lr}
 802b610:	681d      	ldr	r5, [r3, #0]
 802b612:	4606      	mov	r6, r0
 802b614:	460c      	mov	r4, r1
 802b616:	b125      	cbz	r5, 802b622 <__swsetup_r+0x16>
 802b618:	69ab      	ldr	r3, [r5, #24]
 802b61a:	b913      	cbnz	r3, 802b622 <__swsetup_r+0x16>
 802b61c:	4628      	mov	r0, r5
 802b61e:	f7ff f98f 	bl	802a940 <__sinit>
 802b622:	4b2e      	ldr	r3, [pc, #184]	; (802b6dc <__swsetup_r+0xd0>)
 802b624:	429c      	cmp	r4, r3
 802b626:	d10f      	bne.n	802b648 <__swsetup_r+0x3c>
 802b628:	686c      	ldr	r4, [r5, #4]
 802b62a:	89a3      	ldrh	r3, [r4, #12]
 802b62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b630:	0719      	lsls	r1, r3, #28
 802b632:	d42c      	bmi.n	802b68e <__swsetup_r+0x82>
 802b634:	06dd      	lsls	r5, r3, #27
 802b636:	d411      	bmi.n	802b65c <__swsetup_r+0x50>
 802b638:	2309      	movs	r3, #9
 802b63a:	6033      	str	r3, [r6, #0]
 802b63c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b640:	81a3      	strh	r3, [r4, #12]
 802b642:	f04f 30ff 	mov.w	r0, #4294967295
 802b646:	e03e      	b.n	802b6c6 <__swsetup_r+0xba>
 802b648:	4b25      	ldr	r3, [pc, #148]	; (802b6e0 <__swsetup_r+0xd4>)
 802b64a:	429c      	cmp	r4, r3
 802b64c:	d101      	bne.n	802b652 <__swsetup_r+0x46>
 802b64e:	68ac      	ldr	r4, [r5, #8]
 802b650:	e7eb      	b.n	802b62a <__swsetup_r+0x1e>
 802b652:	4b24      	ldr	r3, [pc, #144]	; (802b6e4 <__swsetup_r+0xd8>)
 802b654:	429c      	cmp	r4, r3
 802b656:	bf08      	it	eq
 802b658:	68ec      	ldreq	r4, [r5, #12]
 802b65a:	e7e6      	b.n	802b62a <__swsetup_r+0x1e>
 802b65c:	0758      	lsls	r0, r3, #29
 802b65e:	d512      	bpl.n	802b686 <__swsetup_r+0x7a>
 802b660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b662:	b141      	cbz	r1, 802b676 <__swsetup_r+0x6a>
 802b664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b668:	4299      	cmp	r1, r3
 802b66a:	d002      	beq.n	802b672 <__swsetup_r+0x66>
 802b66c:	4630      	mov	r0, r6
 802b66e:	f7ff fa65 	bl	802ab3c <_free_r>
 802b672:	2300      	movs	r3, #0
 802b674:	6363      	str	r3, [r4, #52]	; 0x34
 802b676:	89a3      	ldrh	r3, [r4, #12]
 802b678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b67c:	81a3      	strh	r3, [r4, #12]
 802b67e:	2300      	movs	r3, #0
 802b680:	6063      	str	r3, [r4, #4]
 802b682:	6923      	ldr	r3, [r4, #16]
 802b684:	6023      	str	r3, [r4, #0]
 802b686:	89a3      	ldrh	r3, [r4, #12]
 802b688:	f043 0308 	orr.w	r3, r3, #8
 802b68c:	81a3      	strh	r3, [r4, #12]
 802b68e:	6923      	ldr	r3, [r4, #16]
 802b690:	b94b      	cbnz	r3, 802b6a6 <__swsetup_r+0x9a>
 802b692:	89a3      	ldrh	r3, [r4, #12]
 802b694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b69c:	d003      	beq.n	802b6a6 <__swsetup_r+0x9a>
 802b69e:	4621      	mov	r1, r4
 802b6a0:	4630      	mov	r0, r6
 802b6a2:	f000 f98d 	bl	802b9c0 <__smakebuf_r>
 802b6a6:	89a0      	ldrh	r0, [r4, #12]
 802b6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b6ac:	f010 0301 	ands.w	r3, r0, #1
 802b6b0:	d00a      	beq.n	802b6c8 <__swsetup_r+0xbc>
 802b6b2:	2300      	movs	r3, #0
 802b6b4:	60a3      	str	r3, [r4, #8]
 802b6b6:	6963      	ldr	r3, [r4, #20]
 802b6b8:	425b      	negs	r3, r3
 802b6ba:	61a3      	str	r3, [r4, #24]
 802b6bc:	6923      	ldr	r3, [r4, #16]
 802b6be:	b943      	cbnz	r3, 802b6d2 <__swsetup_r+0xc6>
 802b6c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b6c4:	d1ba      	bne.n	802b63c <__swsetup_r+0x30>
 802b6c6:	bd70      	pop	{r4, r5, r6, pc}
 802b6c8:	0781      	lsls	r1, r0, #30
 802b6ca:	bf58      	it	pl
 802b6cc:	6963      	ldrpl	r3, [r4, #20]
 802b6ce:	60a3      	str	r3, [r4, #8]
 802b6d0:	e7f4      	b.n	802b6bc <__swsetup_r+0xb0>
 802b6d2:	2000      	movs	r0, #0
 802b6d4:	e7f7      	b.n	802b6c6 <__swsetup_r+0xba>
 802b6d6:	bf00      	nop
 802b6d8:	200000bc 	.word	0x200000bc
 802b6dc:	08031208 	.word	0x08031208
 802b6e0:	08031228 	.word	0x08031228
 802b6e4:	080311e8 	.word	0x080311e8

0802b6e8 <__register_exitproc>:
 802b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b6ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b7a8 <__register_exitproc+0xc0>
 802b6f0:	4606      	mov	r6, r0
 802b6f2:	f8d8 0000 	ldr.w	r0, [r8]
 802b6f6:	461f      	mov	r7, r3
 802b6f8:	460d      	mov	r5, r1
 802b6fa:	4691      	mov	r9, r2
 802b6fc:	f7ff f9f5 	bl	802aaea <__retarget_lock_acquire_recursive>
 802b700:	4b25      	ldr	r3, [pc, #148]	; (802b798 <__register_exitproc+0xb0>)
 802b702:	681c      	ldr	r4, [r3, #0]
 802b704:	b934      	cbnz	r4, 802b714 <__register_exitproc+0x2c>
 802b706:	4c25      	ldr	r4, [pc, #148]	; (802b79c <__register_exitproc+0xb4>)
 802b708:	601c      	str	r4, [r3, #0]
 802b70a:	4b25      	ldr	r3, [pc, #148]	; (802b7a0 <__register_exitproc+0xb8>)
 802b70c:	b113      	cbz	r3, 802b714 <__register_exitproc+0x2c>
 802b70e:	681b      	ldr	r3, [r3, #0]
 802b710:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b714:	6863      	ldr	r3, [r4, #4]
 802b716:	2b1f      	cmp	r3, #31
 802b718:	dd07      	ble.n	802b72a <__register_exitproc+0x42>
 802b71a:	f8d8 0000 	ldr.w	r0, [r8]
 802b71e:	f7ff f9e6 	bl	802aaee <__retarget_lock_release_recursive>
 802b722:	f04f 30ff 	mov.w	r0, #4294967295
 802b726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b72a:	b34e      	cbz	r6, 802b780 <__register_exitproc+0x98>
 802b72c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b730:	b988      	cbnz	r0, 802b756 <__register_exitproc+0x6e>
 802b732:	4b1c      	ldr	r3, [pc, #112]	; (802b7a4 <__register_exitproc+0xbc>)
 802b734:	b923      	cbnz	r3, 802b740 <__register_exitproc+0x58>
 802b736:	f8d8 0000 	ldr.w	r0, [r8]
 802b73a:	f7ff f9d7 	bl	802aaec <__retarget_lock_release>
 802b73e:	e7f0      	b.n	802b722 <__register_exitproc+0x3a>
 802b740:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b744:	f7ff f9d4 	bl	802aaf0 <malloc>
 802b748:	2800      	cmp	r0, #0
 802b74a:	d0f4      	beq.n	802b736 <__register_exitproc+0x4e>
 802b74c:	2300      	movs	r3, #0
 802b74e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b752:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b756:	6863      	ldr	r3, [r4, #4]
 802b758:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b75c:	2201      	movs	r2, #1
 802b75e:	409a      	lsls	r2, r3
 802b760:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b764:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b768:	4313      	orrs	r3, r2
 802b76a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b76e:	2e02      	cmp	r6, #2
 802b770:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b774:	bf02      	ittt	eq
 802b776:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b77a:	4313      	orreq	r3, r2
 802b77c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b780:	6863      	ldr	r3, [r4, #4]
 802b782:	f8d8 0000 	ldr.w	r0, [r8]
 802b786:	1c5a      	adds	r2, r3, #1
 802b788:	3302      	adds	r3, #2
 802b78a:	6062      	str	r2, [r4, #4]
 802b78c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b790:	f7ff f9ad 	bl	802aaee <__retarget_lock_release_recursive>
 802b794:	2000      	movs	r0, #0
 802b796:	e7c6      	b.n	802b726 <__register_exitproc+0x3e>
 802b798:	20015888 	.word	0x20015888
 802b79c:	200157fc 	.word	0x200157fc
 802b7a0:	08031280 	.word	0x08031280
 802b7a4:	0802aaf1 	.word	0x0802aaf1
 802b7a8:	20000120 	.word	0x20000120

0802b7ac <_close_r>:
 802b7ac:	b538      	push	{r3, r4, r5, lr}
 802b7ae:	4d06      	ldr	r5, [pc, #24]	; (802b7c8 <_close_r+0x1c>)
 802b7b0:	2300      	movs	r3, #0
 802b7b2:	4604      	mov	r4, r0
 802b7b4:	4608      	mov	r0, r1
 802b7b6:	602b      	str	r3, [r5, #0]
 802b7b8:	f7d6 f8ce 	bl	8001958 <_close>
 802b7bc:	1c43      	adds	r3, r0, #1
 802b7be:	d102      	bne.n	802b7c6 <_close_r+0x1a>
 802b7c0:	682b      	ldr	r3, [r5, #0]
 802b7c2:	b103      	cbz	r3, 802b7c6 <_close_r+0x1a>
 802b7c4:	6023      	str	r3, [r4, #0]
 802b7c6:	bd38      	pop	{r3, r4, r5, pc}
 802b7c8:	200157f8 	.word	0x200157f8

0802b7cc <__sflush_r>:
 802b7cc:	898a      	ldrh	r2, [r1, #12]
 802b7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b7d2:	4605      	mov	r5, r0
 802b7d4:	0710      	lsls	r0, r2, #28
 802b7d6:	460c      	mov	r4, r1
 802b7d8:	d458      	bmi.n	802b88c <__sflush_r+0xc0>
 802b7da:	684b      	ldr	r3, [r1, #4]
 802b7dc:	2b00      	cmp	r3, #0
 802b7de:	dc05      	bgt.n	802b7ec <__sflush_r+0x20>
 802b7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b7e2:	2b00      	cmp	r3, #0
 802b7e4:	dc02      	bgt.n	802b7ec <__sflush_r+0x20>
 802b7e6:	2000      	movs	r0, #0
 802b7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b7ee:	2e00      	cmp	r6, #0
 802b7f0:	d0f9      	beq.n	802b7e6 <__sflush_r+0x1a>
 802b7f2:	2300      	movs	r3, #0
 802b7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b7f8:	682f      	ldr	r7, [r5, #0]
 802b7fa:	602b      	str	r3, [r5, #0]
 802b7fc:	d032      	beq.n	802b864 <__sflush_r+0x98>
 802b7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b800:	89a3      	ldrh	r3, [r4, #12]
 802b802:	075a      	lsls	r2, r3, #29
 802b804:	d505      	bpl.n	802b812 <__sflush_r+0x46>
 802b806:	6863      	ldr	r3, [r4, #4]
 802b808:	1ac0      	subs	r0, r0, r3
 802b80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b80c:	b10b      	cbz	r3, 802b812 <__sflush_r+0x46>
 802b80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b810:	1ac0      	subs	r0, r0, r3
 802b812:	2300      	movs	r3, #0
 802b814:	4602      	mov	r2, r0
 802b816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b818:	6a21      	ldr	r1, [r4, #32]
 802b81a:	4628      	mov	r0, r5
 802b81c:	47b0      	blx	r6
 802b81e:	1c43      	adds	r3, r0, #1
 802b820:	89a3      	ldrh	r3, [r4, #12]
 802b822:	d106      	bne.n	802b832 <__sflush_r+0x66>
 802b824:	6829      	ldr	r1, [r5, #0]
 802b826:	291d      	cmp	r1, #29
 802b828:	d82c      	bhi.n	802b884 <__sflush_r+0xb8>
 802b82a:	4a2a      	ldr	r2, [pc, #168]	; (802b8d4 <__sflush_r+0x108>)
 802b82c:	40ca      	lsrs	r2, r1
 802b82e:	07d6      	lsls	r6, r2, #31
 802b830:	d528      	bpl.n	802b884 <__sflush_r+0xb8>
 802b832:	2200      	movs	r2, #0
 802b834:	6062      	str	r2, [r4, #4]
 802b836:	04d9      	lsls	r1, r3, #19
 802b838:	6922      	ldr	r2, [r4, #16]
 802b83a:	6022      	str	r2, [r4, #0]
 802b83c:	d504      	bpl.n	802b848 <__sflush_r+0x7c>
 802b83e:	1c42      	adds	r2, r0, #1
 802b840:	d101      	bne.n	802b846 <__sflush_r+0x7a>
 802b842:	682b      	ldr	r3, [r5, #0]
 802b844:	b903      	cbnz	r3, 802b848 <__sflush_r+0x7c>
 802b846:	6560      	str	r0, [r4, #84]	; 0x54
 802b848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b84a:	602f      	str	r7, [r5, #0]
 802b84c:	2900      	cmp	r1, #0
 802b84e:	d0ca      	beq.n	802b7e6 <__sflush_r+0x1a>
 802b850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b854:	4299      	cmp	r1, r3
 802b856:	d002      	beq.n	802b85e <__sflush_r+0x92>
 802b858:	4628      	mov	r0, r5
 802b85a:	f7ff f96f 	bl	802ab3c <_free_r>
 802b85e:	2000      	movs	r0, #0
 802b860:	6360      	str	r0, [r4, #52]	; 0x34
 802b862:	e7c1      	b.n	802b7e8 <__sflush_r+0x1c>
 802b864:	6a21      	ldr	r1, [r4, #32]
 802b866:	2301      	movs	r3, #1
 802b868:	4628      	mov	r0, r5
 802b86a:	47b0      	blx	r6
 802b86c:	1c41      	adds	r1, r0, #1
 802b86e:	d1c7      	bne.n	802b800 <__sflush_r+0x34>
 802b870:	682b      	ldr	r3, [r5, #0]
 802b872:	2b00      	cmp	r3, #0
 802b874:	d0c4      	beq.n	802b800 <__sflush_r+0x34>
 802b876:	2b1d      	cmp	r3, #29
 802b878:	d001      	beq.n	802b87e <__sflush_r+0xb2>
 802b87a:	2b16      	cmp	r3, #22
 802b87c:	d101      	bne.n	802b882 <__sflush_r+0xb6>
 802b87e:	602f      	str	r7, [r5, #0]
 802b880:	e7b1      	b.n	802b7e6 <__sflush_r+0x1a>
 802b882:	89a3      	ldrh	r3, [r4, #12]
 802b884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b888:	81a3      	strh	r3, [r4, #12]
 802b88a:	e7ad      	b.n	802b7e8 <__sflush_r+0x1c>
 802b88c:	690f      	ldr	r7, [r1, #16]
 802b88e:	2f00      	cmp	r7, #0
 802b890:	d0a9      	beq.n	802b7e6 <__sflush_r+0x1a>
 802b892:	0793      	lsls	r3, r2, #30
 802b894:	680e      	ldr	r6, [r1, #0]
 802b896:	bf08      	it	eq
 802b898:	694b      	ldreq	r3, [r1, #20]
 802b89a:	600f      	str	r7, [r1, #0]
 802b89c:	bf18      	it	ne
 802b89e:	2300      	movne	r3, #0
 802b8a0:	eba6 0807 	sub.w	r8, r6, r7
 802b8a4:	608b      	str	r3, [r1, #8]
 802b8a6:	f1b8 0f00 	cmp.w	r8, #0
 802b8aa:	dd9c      	ble.n	802b7e6 <__sflush_r+0x1a>
 802b8ac:	6a21      	ldr	r1, [r4, #32]
 802b8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b8b0:	4643      	mov	r3, r8
 802b8b2:	463a      	mov	r2, r7
 802b8b4:	4628      	mov	r0, r5
 802b8b6:	47b0      	blx	r6
 802b8b8:	2800      	cmp	r0, #0
 802b8ba:	dc06      	bgt.n	802b8ca <__sflush_r+0xfe>
 802b8bc:	89a3      	ldrh	r3, [r4, #12]
 802b8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b8c2:	81a3      	strh	r3, [r4, #12]
 802b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 802b8c8:	e78e      	b.n	802b7e8 <__sflush_r+0x1c>
 802b8ca:	4407      	add	r7, r0
 802b8cc:	eba8 0800 	sub.w	r8, r8, r0
 802b8d0:	e7e9      	b.n	802b8a6 <__sflush_r+0xda>
 802b8d2:	bf00      	nop
 802b8d4:	20400001 	.word	0x20400001

0802b8d8 <_fflush_r>:
 802b8d8:	b538      	push	{r3, r4, r5, lr}
 802b8da:	690b      	ldr	r3, [r1, #16]
 802b8dc:	4605      	mov	r5, r0
 802b8de:	460c      	mov	r4, r1
 802b8e0:	b913      	cbnz	r3, 802b8e8 <_fflush_r+0x10>
 802b8e2:	2500      	movs	r5, #0
 802b8e4:	4628      	mov	r0, r5
 802b8e6:	bd38      	pop	{r3, r4, r5, pc}
 802b8e8:	b118      	cbz	r0, 802b8f2 <_fflush_r+0x1a>
 802b8ea:	6983      	ldr	r3, [r0, #24]
 802b8ec:	b90b      	cbnz	r3, 802b8f2 <_fflush_r+0x1a>
 802b8ee:	f7ff f827 	bl	802a940 <__sinit>
 802b8f2:	4b14      	ldr	r3, [pc, #80]	; (802b944 <_fflush_r+0x6c>)
 802b8f4:	429c      	cmp	r4, r3
 802b8f6:	d11b      	bne.n	802b930 <_fflush_r+0x58>
 802b8f8:	686c      	ldr	r4, [r5, #4]
 802b8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b8fe:	2b00      	cmp	r3, #0
 802b900:	d0ef      	beq.n	802b8e2 <_fflush_r+0xa>
 802b902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b904:	07d0      	lsls	r0, r2, #31
 802b906:	d404      	bmi.n	802b912 <_fflush_r+0x3a>
 802b908:	0599      	lsls	r1, r3, #22
 802b90a:	d402      	bmi.n	802b912 <_fflush_r+0x3a>
 802b90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b90e:	f7ff f8ec 	bl	802aaea <__retarget_lock_acquire_recursive>
 802b912:	4628      	mov	r0, r5
 802b914:	4621      	mov	r1, r4
 802b916:	f7ff ff59 	bl	802b7cc <__sflush_r>
 802b91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b91c:	07da      	lsls	r2, r3, #31
 802b91e:	4605      	mov	r5, r0
 802b920:	d4e0      	bmi.n	802b8e4 <_fflush_r+0xc>
 802b922:	89a3      	ldrh	r3, [r4, #12]
 802b924:	059b      	lsls	r3, r3, #22
 802b926:	d4dd      	bmi.n	802b8e4 <_fflush_r+0xc>
 802b928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b92a:	f7ff f8e0 	bl	802aaee <__retarget_lock_release_recursive>
 802b92e:	e7d9      	b.n	802b8e4 <_fflush_r+0xc>
 802b930:	4b05      	ldr	r3, [pc, #20]	; (802b948 <_fflush_r+0x70>)
 802b932:	429c      	cmp	r4, r3
 802b934:	d101      	bne.n	802b93a <_fflush_r+0x62>
 802b936:	68ac      	ldr	r4, [r5, #8]
 802b938:	e7df      	b.n	802b8fa <_fflush_r+0x22>
 802b93a:	4b04      	ldr	r3, [pc, #16]	; (802b94c <_fflush_r+0x74>)
 802b93c:	429c      	cmp	r4, r3
 802b93e:	bf08      	it	eq
 802b940:	68ec      	ldreq	r4, [r5, #12]
 802b942:	e7da      	b.n	802b8fa <_fflush_r+0x22>
 802b944:	08031208 	.word	0x08031208
 802b948:	08031228 	.word	0x08031228
 802b94c:	080311e8 	.word	0x080311e8

0802b950 <_lseek_r>:
 802b950:	b538      	push	{r3, r4, r5, lr}
 802b952:	4d07      	ldr	r5, [pc, #28]	; (802b970 <_lseek_r+0x20>)
 802b954:	4604      	mov	r4, r0
 802b956:	4608      	mov	r0, r1
 802b958:	4611      	mov	r1, r2
 802b95a:	2200      	movs	r2, #0
 802b95c:	602a      	str	r2, [r5, #0]
 802b95e:	461a      	mov	r2, r3
 802b960:	f7d6 f804 	bl	800196c <_lseek>
 802b964:	1c43      	adds	r3, r0, #1
 802b966:	d102      	bne.n	802b96e <_lseek_r+0x1e>
 802b968:	682b      	ldr	r3, [r5, #0]
 802b96a:	b103      	cbz	r3, 802b96e <_lseek_r+0x1e>
 802b96c:	6023      	str	r3, [r4, #0]
 802b96e:	bd38      	pop	{r3, r4, r5, pc}
 802b970:	200157f8 	.word	0x200157f8

0802b974 <__swhatbuf_r>:
 802b974:	b570      	push	{r4, r5, r6, lr}
 802b976:	460e      	mov	r6, r1
 802b978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b97c:	2900      	cmp	r1, #0
 802b97e:	b096      	sub	sp, #88	; 0x58
 802b980:	4614      	mov	r4, r2
 802b982:	461d      	mov	r5, r3
 802b984:	da08      	bge.n	802b998 <__swhatbuf_r+0x24>
 802b986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802b98a:	2200      	movs	r2, #0
 802b98c:	602a      	str	r2, [r5, #0]
 802b98e:	061a      	lsls	r2, r3, #24
 802b990:	d410      	bmi.n	802b9b4 <__swhatbuf_r+0x40>
 802b992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b996:	e00e      	b.n	802b9b6 <__swhatbuf_r+0x42>
 802b998:	466a      	mov	r2, sp
 802b99a:	f000 fa13 	bl	802bdc4 <_fstat_r>
 802b99e:	2800      	cmp	r0, #0
 802b9a0:	dbf1      	blt.n	802b986 <__swhatbuf_r+0x12>
 802b9a2:	9a01      	ldr	r2, [sp, #4]
 802b9a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b9a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b9ac:	425a      	negs	r2, r3
 802b9ae:	415a      	adcs	r2, r3
 802b9b0:	602a      	str	r2, [r5, #0]
 802b9b2:	e7ee      	b.n	802b992 <__swhatbuf_r+0x1e>
 802b9b4:	2340      	movs	r3, #64	; 0x40
 802b9b6:	2000      	movs	r0, #0
 802b9b8:	6023      	str	r3, [r4, #0]
 802b9ba:	b016      	add	sp, #88	; 0x58
 802b9bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b9c0 <__smakebuf_r>:
 802b9c0:	898b      	ldrh	r3, [r1, #12]
 802b9c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b9c4:	079d      	lsls	r5, r3, #30
 802b9c6:	4606      	mov	r6, r0
 802b9c8:	460c      	mov	r4, r1
 802b9ca:	d507      	bpl.n	802b9dc <__smakebuf_r+0x1c>
 802b9cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b9d0:	6023      	str	r3, [r4, #0]
 802b9d2:	6123      	str	r3, [r4, #16]
 802b9d4:	2301      	movs	r3, #1
 802b9d6:	6163      	str	r3, [r4, #20]
 802b9d8:	b002      	add	sp, #8
 802b9da:	bd70      	pop	{r4, r5, r6, pc}
 802b9dc:	ab01      	add	r3, sp, #4
 802b9de:	466a      	mov	r2, sp
 802b9e0:	f7ff ffc8 	bl	802b974 <__swhatbuf_r>
 802b9e4:	9900      	ldr	r1, [sp, #0]
 802b9e6:	4605      	mov	r5, r0
 802b9e8:	4630      	mov	r0, r6
 802b9ea:	f7ff f913 	bl	802ac14 <_malloc_r>
 802b9ee:	b948      	cbnz	r0, 802ba04 <__smakebuf_r+0x44>
 802b9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b9f4:	059a      	lsls	r2, r3, #22
 802b9f6:	d4ef      	bmi.n	802b9d8 <__smakebuf_r+0x18>
 802b9f8:	f023 0303 	bic.w	r3, r3, #3
 802b9fc:	f043 0302 	orr.w	r3, r3, #2
 802ba00:	81a3      	strh	r3, [r4, #12]
 802ba02:	e7e3      	b.n	802b9cc <__smakebuf_r+0xc>
 802ba04:	4b0d      	ldr	r3, [pc, #52]	; (802ba3c <__smakebuf_r+0x7c>)
 802ba06:	62b3      	str	r3, [r6, #40]	; 0x28
 802ba08:	89a3      	ldrh	r3, [r4, #12]
 802ba0a:	6020      	str	r0, [r4, #0]
 802ba0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ba10:	81a3      	strh	r3, [r4, #12]
 802ba12:	9b00      	ldr	r3, [sp, #0]
 802ba14:	6163      	str	r3, [r4, #20]
 802ba16:	9b01      	ldr	r3, [sp, #4]
 802ba18:	6120      	str	r0, [r4, #16]
 802ba1a:	b15b      	cbz	r3, 802ba34 <__smakebuf_r+0x74>
 802ba1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ba20:	4630      	mov	r0, r6
 802ba22:	f000 f9e1 	bl	802bde8 <_isatty_r>
 802ba26:	b128      	cbz	r0, 802ba34 <__smakebuf_r+0x74>
 802ba28:	89a3      	ldrh	r3, [r4, #12]
 802ba2a:	f023 0303 	bic.w	r3, r3, #3
 802ba2e:	f043 0301 	orr.w	r3, r3, #1
 802ba32:	81a3      	strh	r3, [r4, #12]
 802ba34:	89a0      	ldrh	r0, [r4, #12]
 802ba36:	4305      	orrs	r5, r0
 802ba38:	81a5      	strh	r5, [r4, #12]
 802ba3a:	e7cd      	b.n	802b9d8 <__smakebuf_r+0x18>
 802ba3c:	0802a8d9 	.word	0x0802a8d9

0802ba40 <memmove>:
 802ba40:	4288      	cmp	r0, r1
 802ba42:	b510      	push	{r4, lr}
 802ba44:	eb01 0402 	add.w	r4, r1, r2
 802ba48:	d902      	bls.n	802ba50 <memmove+0x10>
 802ba4a:	4284      	cmp	r4, r0
 802ba4c:	4623      	mov	r3, r4
 802ba4e:	d807      	bhi.n	802ba60 <memmove+0x20>
 802ba50:	1e43      	subs	r3, r0, #1
 802ba52:	42a1      	cmp	r1, r4
 802ba54:	d008      	beq.n	802ba68 <memmove+0x28>
 802ba56:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ba5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ba5e:	e7f8      	b.n	802ba52 <memmove+0x12>
 802ba60:	4402      	add	r2, r0
 802ba62:	4601      	mov	r1, r0
 802ba64:	428a      	cmp	r2, r1
 802ba66:	d100      	bne.n	802ba6a <memmove+0x2a>
 802ba68:	bd10      	pop	{r4, pc}
 802ba6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802ba6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802ba72:	e7f7      	b.n	802ba64 <memmove+0x24>

0802ba74 <__malloc_lock>:
 802ba74:	4801      	ldr	r0, [pc, #4]	; (802ba7c <__malloc_lock+0x8>)
 802ba76:	f7ff b838 	b.w	802aaea <__retarget_lock_acquire_recursive>
 802ba7a:	bf00      	nop
 802ba7c:	200156e5 	.word	0x200156e5

0802ba80 <__malloc_unlock>:
 802ba80:	4801      	ldr	r0, [pc, #4]	; (802ba88 <__malloc_unlock+0x8>)
 802ba82:	f7ff b834 	b.w	802aaee <__retarget_lock_release_recursive>
 802ba86:	bf00      	nop
 802ba88:	200156e5 	.word	0x200156e5

0802ba8c <_realloc_r>:
 802ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ba90:	4680      	mov	r8, r0
 802ba92:	4614      	mov	r4, r2
 802ba94:	460e      	mov	r6, r1
 802ba96:	b921      	cbnz	r1, 802baa2 <_realloc_r+0x16>
 802ba98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ba9c:	4611      	mov	r1, r2
 802ba9e:	f7ff b8b9 	b.w	802ac14 <_malloc_r>
 802baa2:	b92a      	cbnz	r2, 802bab0 <_realloc_r+0x24>
 802baa4:	f7ff f84a 	bl	802ab3c <_free_r>
 802baa8:	4625      	mov	r5, r4
 802baaa:	4628      	mov	r0, r5
 802baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bab0:	f000 f9aa 	bl	802be08 <_malloc_usable_size_r>
 802bab4:	4284      	cmp	r4, r0
 802bab6:	4607      	mov	r7, r0
 802bab8:	d802      	bhi.n	802bac0 <_realloc_r+0x34>
 802baba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802babe:	d812      	bhi.n	802bae6 <_realloc_r+0x5a>
 802bac0:	4621      	mov	r1, r4
 802bac2:	4640      	mov	r0, r8
 802bac4:	f7ff f8a6 	bl	802ac14 <_malloc_r>
 802bac8:	4605      	mov	r5, r0
 802baca:	2800      	cmp	r0, #0
 802bacc:	d0ed      	beq.n	802baaa <_realloc_r+0x1e>
 802bace:	42bc      	cmp	r4, r7
 802bad0:	4622      	mov	r2, r4
 802bad2:	4631      	mov	r1, r6
 802bad4:	bf28      	it	cs
 802bad6:	463a      	movcs	r2, r7
 802bad8:	f7ff f81a 	bl	802ab10 <memcpy>
 802badc:	4631      	mov	r1, r6
 802bade:	4640      	mov	r0, r8
 802bae0:	f7ff f82c 	bl	802ab3c <_free_r>
 802bae4:	e7e1      	b.n	802baaa <_realloc_r+0x1e>
 802bae6:	4635      	mov	r5, r6
 802bae8:	e7df      	b.n	802baaa <_realloc_r+0x1e>

0802baea <__ssputs_r>:
 802baea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802baee:	688e      	ldr	r6, [r1, #8]
 802baf0:	429e      	cmp	r6, r3
 802baf2:	4682      	mov	sl, r0
 802baf4:	460c      	mov	r4, r1
 802baf6:	4690      	mov	r8, r2
 802baf8:	461f      	mov	r7, r3
 802bafa:	d838      	bhi.n	802bb6e <__ssputs_r+0x84>
 802bafc:	898a      	ldrh	r2, [r1, #12]
 802bafe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802bb02:	d032      	beq.n	802bb6a <__ssputs_r+0x80>
 802bb04:	6825      	ldr	r5, [r4, #0]
 802bb06:	6909      	ldr	r1, [r1, #16]
 802bb08:	eba5 0901 	sub.w	r9, r5, r1
 802bb0c:	6965      	ldr	r5, [r4, #20]
 802bb0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bb12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bb16:	3301      	adds	r3, #1
 802bb18:	444b      	add	r3, r9
 802bb1a:	106d      	asrs	r5, r5, #1
 802bb1c:	429d      	cmp	r5, r3
 802bb1e:	bf38      	it	cc
 802bb20:	461d      	movcc	r5, r3
 802bb22:	0553      	lsls	r3, r2, #21
 802bb24:	d531      	bpl.n	802bb8a <__ssputs_r+0xa0>
 802bb26:	4629      	mov	r1, r5
 802bb28:	f7ff f874 	bl	802ac14 <_malloc_r>
 802bb2c:	4606      	mov	r6, r0
 802bb2e:	b950      	cbnz	r0, 802bb46 <__ssputs_r+0x5c>
 802bb30:	230c      	movs	r3, #12
 802bb32:	f8ca 3000 	str.w	r3, [sl]
 802bb36:	89a3      	ldrh	r3, [r4, #12]
 802bb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bb3c:	81a3      	strh	r3, [r4, #12]
 802bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 802bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb46:	6921      	ldr	r1, [r4, #16]
 802bb48:	464a      	mov	r2, r9
 802bb4a:	f7fe ffe1 	bl	802ab10 <memcpy>
 802bb4e:	89a3      	ldrh	r3, [r4, #12]
 802bb50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802bb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bb58:	81a3      	strh	r3, [r4, #12]
 802bb5a:	6126      	str	r6, [r4, #16]
 802bb5c:	6165      	str	r5, [r4, #20]
 802bb5e:	444e      	add	r6, r9
 802bb60:	eba5 0509 	sub.w	r5, r5, r9
 802bb64:	6026      	str	r6, [r4, #0]
 802bb66:	60a5      	str	r5, [r4, #8]
 802bb68:	463e      	mov	r6, r7
 802bb6a:	42be      	cmp	r6, r7
 802bb6c:	d900      	bls.n	802bb70 <__ssputs_r+0x86>
 802bb6e:	463e      	mov	r6, r7
 802bb70:	6820      	ldr	r0, [r4, #0]
 802bb72:	4632      	mov	r2, r6
 802bb74:	4641      	mov	r1, r8
 802bb76:	f7ff ff63 	bl	802ba40 <memmove>
 802bb7a:	68a3      	ldr	r3, [r4, #8]
 802bb7c:	1b9b      	subs	r3, r3, r6
 802bb7e:	60a3      	str	r3, [r4, #8]
 802bb80:	6823      	ldr	r3, [r4, #0]
 802bb82:	4433      	add	r3, r6
 802bb84:	6023      	str	r3, [r4, #0]
 802bb86:	2000      	movs	r0, #0
 802bb88:	e7db      	b.n	802bb42 <__ssputs_r+0x58>
 802bb8a:	462a      	mov	r2, r5
 802bb8c:	f7ff ff7e 	bl	802ba8c <_realloc_r>
 802bb90:	4606      	mov	r6, r0
 802bb92:	2800      	cmp	r0, #0
 802bb94:	d1e1      	bne.n	802bb5a <__ssputs_r+0x70>
 802bb96:	6921      	ldr	r1, [r4, #16]
 802bb98:	4650      	mov	r0, sl
 802bb9a:	f7fe ffcf 	bl	802ab3c <_free_r>
 802bb9e:	e7c7      	b.n	802bb30 <__ssputs_r+0x46>

0802bba0 <_svfiprintf_r>:
 802bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bba4:	4698      	mov	r8, r3
 802bba6:	898b      	ldrh	r3, [r1, #12]
 802bba8:	061b      	lsls	r3, r3, #24
 802bbaa:	b09d      	sub	sp, #116	; 0x74
 802bbac:	4607      	mov	r7, r0
 802bbae:	460d      	mov	r5, r1
 802bbb0:	4614      	mov	r4, r2
 802bbb2:	d50e      	bpl.n	802bbd2 <_svfiprintf_r+0x32>
 802bbb4:	690b      	ldr	r3, [r1, #16]
 802bbb6:	b963      	cbnz	r3, 802bbd2 <_svfiprintf_r+0x32>
 802bbb8:	2140      	movs	r1, #64	; 0x40
 802bbba:	f7ff f82b 	bl	802ac14 <_malloc_r>
 802bbbe:	6028      	str	r0, [r5, #0]
 802bbc0:	6128      	str	r0, [r5, #16]
 802bbc2:	b920      	cbnz	r0, 802bbce <_svfiprintf_r+0x2e>
 802bbc4:	230c      	movs	r3, #12
 802bbc6:	603b      	str	r3, [r7, #0]
 802bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 802bbcc:	e0d1      	b.n	802bd72 <_svfiprintf_r+0x1d2>
 802bbce:	2340      	movs	r3, #64	; 0x40
 802bbd0:	616b      	str	r3, [r5, #20]
 802bbd2:	2300      	movs	r3, #0
 802bbd4:	9309      	str	r3, [sp, #36]	; 0x24
 802bbd6:	2320      	movs	r3, #32
 802bbd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bbdc:	f8cd 800c 	str.w	r8, [sp, #12]
 802bbe0:	2330      	movs	r3, #48	; 0x30
 802bbe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802bd8c <_svfiprintf_r+0x1ec>
 802bbe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bbea:	f04f 0901 	mov.w	r9, #1
 802bbee:	4623      	mov	r3, r4
 802bbf0:	469a      	mov	sl, r3
 802bbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbf6:	b10a      	cbz	r2, 802bbfc <_svfiprintf_r+0x5c>
 802bbf8:	2a25      	cmp	r2, #37	; 0x25
 802bbfa:	d1f9      	bne.n	802bbf0 <_svfiprintf_r+0x50>
 802bbfc:	ebba 0b04 	subs.w	fp, sl, r4
 802bc00:	d00b      	beq.n	802bc1a <_svfiprintf_r+0x7a>
 802bc02:	465b      	mov	r3, fp
 802bc04:	4622      	mov	r2, r4
 802bc06:	4629      	mov	r1, r5
 802bc08:	4638      	mov	r0, r7
 802bc0a:	f7ff ff6e 	bl	802baea <__ssputs_r>
 802bc0e:	3001      	adds	r0, #1
 802bc10:	f000 80aa 	beq.w	802bd68 <_svfiprintf_r+0x1c8>
 802bc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bc16:	445a      	add	r2, fp
 802bc18:	9209      	str	r2, [sp, #36]	; 0x24
 802bc1a:	f89a 3000 	ldrb.w	r3, [sl]
 802bc1e:	2b00      	cmp	r3, #0
 802bc20:	f000 80a2 	beq.w	802bd68 <_svfiprintf_r+0x1c8>
 802bc24:	2300      	movs	r3, #0
 802bc26:	f04f 32ff 	mov.w	r2, #4294967295
 802bc2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc2e:	f10a 0a01 	add.w	sl, sl, #1
 802bc32:	9304      	str	r3, [sp, #16]
 802bc34:	9307      	str	r3, [sp, #28]
 802bc36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bc3a:	931a      	str	r3, [sp, #104]	; 0x68
 802bc3c:	4654      	mov	r4, sl
 802bc3e:	2205      	movs	r2, #5
 802bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc44:	4851      	ldr	r0, [pc, #324]	; (802bd8c <_svfiprintf_r+0x1ec>)
 802bc46:	f7d4 fae3 	bl	8000210 <memchr>
 802bc4a:	9a04      	ldr	r2, [sp, #16]
 802bc4c:	b9d8      	cbnz	r0, 802bc86 <_svfiprintf_r+0xe6>
 802bc4e:	06d0      	lsls	r0, r2, #27
 802bc50:	bf44      	itt	mi
 802bc52:	2320      	movmi	r3, #32
 802bc54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc58:	0711      	lsls	r1, r2, #28
 802bc5a:	bf44      	itt	mi
 802bc5c:	232b      	movmi	r3, #43	; 0x2b
 802bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc62:	f89a 3000 	ldrb.w	r3, [sl]
 802bc66:	2b2a      	cmp	r3, #42	; 0x2a
 802bc68:	d015      	beq.n	802bc96 <_svfiprintf_r+0xf6>
 802bc6a:	9a07      	ldr	r2, [sp, #28]
 802bc6c:	4654      	mov	r4, sl
 802bc6e:	2000      	movs	r0, #0
 802bc70:	f04f 0c0a 	mov.w	ip, #10
 802bc74:	4621      	mov	r1, r4
 802bc76:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bc7a:	3b30      	subs	r3, #48	; 0x30
 802bc7c:	2b09      	cmp	r3, #9
 802bc7e:	d94e      	bls.n	802bd1e <_svfiprintf_r+0x17e>
 802bc80:	b1b0      	cbz	r0, 802bcb0 <_svfiprintf_r+0x110>
 802bc82:	9207      	str	r2, [sp, #28]
 802bc84:	e014      	b.n	802bcb0 <_svfiprintf_r+0x110>
 802bc86:	eba0 0308 	sub.w	r3, r0, r8
 802bc8a:	fa09 f303 	lsl.w	r3, r9, r3
 802bc8e:	4313      	orrs	r3, r2
 802bc90:	9304      	str	r3, [sp, #16]
 802bc92:	46a2      	mov	sl, r4
 802bc94:	e7d2      	b.n	802bc3c <_svfiprintf_r+0x9c>
 802bc96:	9b03      	ldr	r3, [sp, #12]
 802bc98:	1d19      	adds	r1, r3, #4
 802bc9a:	681b      	ldr	r3, [r3, #0]
 802bc9c:	9103      	str	r1, [sp, #12]
 802bc9e:	2b00      	cmp	r3, #0
 802bca0:	bfbb      	ittet	lt
 802bca2:	425b      	neglt	r3, r3
 802bca4:	f042 0202 	orrlt.w	r2, r2, #2
 802bca8:	9307      	strge	r3, [sp, #28]
 802bcaa:	9307      	strlt	r3, [sp, #28]
 802bcac:	bfb8      	it	lt
 802bcae:	9204      	strlt	r2, [sp, #16]
 802bcb0:	7823      	ldrb	r3, [r4, #0]
 802bcb2:	2b2e      	cmp	r3, #46	; 0x2e
 802bcb4:	d10c      	bne.n	802bcd0 <_svfiprintf_r+0x130>
 802bcb6:	7863      	ldrb	r3, [r4, #1]
 802bcb8:	2b2a      	cmp	r3, #42	; 0x2a
 802bcba:	d135      	bne.n	802bd28 <_svfiprintf_r+0x188>
 802bcbc:	9b03      	ldr	r3, [sp, #12]
 802bcbe:	1d1a      	adds	r2, r3, #4
 802bcc0:	681b      	ldr	r3, [r3, #0]
 802bcc2:	9203      	str	r2, [sp, #12]
 802bcc4:	2b00      	cmp	r3, #0
 802bcc6:	bfb8      	it	lt
 802bcc8:	f04f 33ff 	movlt.w	r3, #4294967295
 802bccc:	3402      	adds	r4, #2
 802bcce:	9305      	str	r3, [sp, #20]
 802bcd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802bd9c <_svfiprintf_r+0x1fc>
 802bcd4:	7821      	ldrb	r1, [r4, #0]
 802bcd6:	2203      	movs	r2, #3
 802bcd8:	4650      	mov	r0, sl
 802bcda:	f7d4 fa99 	bl	8000210 <memchr>
 802bcde:	b140      	cbz	r0, 802bcf2 <_svfiprintf_r+0x152>
 802bce0:	2340      	movs	r3, #64	; 0x40
 802bce2:	eba0 000a 	sub.w	r0, r0, sl
 802bce6:	fa03 f000 	lsl.w	r0, r3, r0
 802bcea:	9b04      	ldr	r3, [sp, #16]
 802bcec:	4303      	orrs	r3, r0
 802bcee:	3401      	adds	r4, #1
 802bcf0:	9304      	str	r3, [sp, #16]
 802bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bcf6:	4826      	ldr	r0, [pc, #152]	; (802bd90 <_svfiprintf_r+0x1f0>)
 802bcf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bcfc:	2206      	movs	r2, #6
 802bcfe:	f7d4 fa87 	bl	8000210 <memchr>
 802bd02:	2800      	cmp	r0, #0
 802bd04:	d038      	beq.n	802bd78 <_svfiprintf_r+0x1d8>
 802bd06:	4b23      	ldr	r3, [pc, #140]	; (802bd94 <_svfiprintf_r+0x1f4>)
 802bd08:	bb1b      	cbnz	r3, 802bd52 <_svfiprintf_r+0x1b2>
 802bd0a:	9b03      	ldr	r3, [sp, #12]
 802bd0c:	3307      	adds	r3, #7
 802bd0e:	f023 0307 	bic.w	r3, r3, #7
 802bd12:	3308      	adds	r3, #8
 802bd14:	9303      	str	r3, [sp, #12]
 802bd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bd18:	4433      	add	r3, r6
 802bd1a:	9309      	str	r3, [sp, #36]	; 0x24
 802bd1c:	e767      	b.n	802bbee <_svfiprintf_r+0x4e>
 802bd1e:	fb0c 3202 	mla	r2, ip, r2, r3
 802bd22:	460c      	mov	r4, r1
 802bd24:	2001      	movs	r0, #1
 802bd26:	e7a5      	b.n	802bc74 <_svfiprintf_r+0xd4>
 802bd28:	2300      	movs	r3, #0
 802bd2a:	3401      	adds	r4, #1
 802bd2c:	9305      	str	r3, [sp, #20]
 802bd2e:	4619      	mov	r1, r3
 802bd30:	f04f 0c0a 	mov.w	ip, #10
 802bd34:	4620      	mov	r0, r4
 802bd36:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bd3a:	3a30      	subs	r2, #48	; 0x30
 802bd3c:	2a09      	cmp	r2, #9
 802bd3e:	d903      	bls.n	802bd48 <_svfiprintf_r+0x1a8>
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	d0c5      	beq.n	802bcd0 <_svfiprintf_r+0x130>
 802bd44:	9105      	str	r1, [sp, #20]
 802bd46:	e7c3      	b.n	802bcd0 <_svfiprintf_r+0x130>
 802bd48:	fb0c 2101 	mla	r1, ip, r1, r2
 802bd4c:	4604      	mov	r4, r0
 802bd4e:	2301      	movs	r3, #1
 802bd50:	e7f0      	b.n	802bd34 <_svfiprintf_r+0x194>
 802bd52:	ab03      	add	r3, sp, #12
 802bd54:	9300      	str	r3, [sp, #0]
 802bd56:	462a      	mov	r2, r5
 802bd58:	4b0f      	ldr	r3, [pc, #60]	; (802bd98 <_svfiprintf_r+0x1f8>)
 802bd5a:	a904      	add	r1, sp, #16
 802bd5c:	4638      	mov	r0, r7
 802bd5e:	f3af 8000 	nop.w
 802bd62:	1c42      	adds	r2, r0, #1
 802bd64:	4606      	mov	r6, r0
 802bd66:	d1d6      	bne.n	802bd16 <_svfiprintf_r+0x176>
 802bd68:	89ab      	ldrh	r3, [r5, #12]
 802bd6a:	065b      	lsls	r3, r3, #25
 802bd6c:	f53f af2c 	bmi.w	802bbc8 <_svfiprintf_r+0x28>
 802bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bd72:	b01d      	add	sp, #116	; 0x74
 802bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bd78:	ab03      	add	r3, sp, #12
 802bd7a:	9300      	str	r3, [sp, #0]
 802bd7c:	462a      	mov	r2, r5
 802bd7e:	4b06      	ldr	r3, [pc, #24]	; (802bd98 <_svfiprintf_r+0x1f8>)
 802bd80:	a904      	add	r1, sp, #16
 802bd82:	4638      	mov	r0, r7
 802bd84:	f7ff f982 	bl	802b08c <_printf_i>
 802bd88:	e7eb      	b.n	802bd62 <_svfiprintf_r+0x1c2>
 802bd8a:	bf00      	nop
 802bd8c:	0803124c 	.word	0x0803124c
 802bd90:	08031256 	.word	0x08031256
 802bd94:	00000000 	.word	0x00000000
 802bd98:	0802baeb 	.word	0x0802baeb
 802bd9c:	08031252 	.word	0x08031252

0802bda0 <_read_r>:
 802bda0:	b538      	push	{r3, r4, r5, lr}
 802bda2:	4d07      	ldr	r5, [pc, #28]	; (802bdc0 <_read_r+0x20>)
 802bda4:	4604      	mov	r4, r0
 802bda6:	4608      	mov	r0, r1
 802bda8:	4611      	mov	r1, r2
 802bdaa:	2200      	movs	r2, #0
 802bdac:	602a      	str	r2, [r5, #0]
 802bdae:	461a      	mov	r2, r3
 802bdb0:	f7d5 fdb6 	bl	8001920 <_read>
 802bdb4:	1c43      	adds	r3, r0, #1
 802bdb6:	d102      	bne.n	802bdbe <_read_r+0x1e>
 802bdb8:	682b      	ldr	r3, [r5, #0]
 802bdba:	b103      	cbz	r3, 802bdbe <_read_r+0x1e>
 802bdbc:	6023      	str	r3, [r4, #0]
 802bdbe:	bd38      	pop	{r3, r4, r5, pc}
 802bdc0:	200157f8 	.word	0x200157f8

0802bdc4 <_fstat_r>:
 802bdc4:	b538      	push	{r3, r4, r5, lr}
 802bdc6:	4d07      	ldr	r5, [pc, #28]	; (802bde4 <_fstat_r+0x20>)
 802bdc8:	2300      	movs	r3, #0
 802bdca:	4604      	mov	r4, r0
 802bdcc:	4608      	mov	r0, r1
 802bdce:	4611      	mov	r1, r2
 802bdd0:	602b      	str	r3, [r5, #0]
 802bdd2:	f7d5 fdc4 	bl	800195e <_fstat>
 802bdd6:	1c43      	adds	r3, r0, #1
 802bdd8:	d102      	bne.n	802bde0 <_fstat_r+0x1c>
 802bdda:	682b      	ldr	r3, [r5, #0]
 802bddc:	b103      	cbz	r3, 802bde0 <_fstat_r+0x1c>
 802bdde:	6023      	str	r3, [r4, #0]
 802bde0:	bd38      	pop	{r3, r4, r5, pc}
 802bde2:	bf00      	nop
 802bde4:	200157f8 	.word	0x200157f8

0802bde8 <_isatty_r>:
 802bde8:	b538      	push	{r3, r4, r5, lr}
 802bdea:	4d06      	ldr	r5, [pc, #24]	; (802be04 <_isatty_r+0x1c>)
 802bdec:	2300      	movs	r3, #0
 802bdee:	4604      	mov	r4, r0
 802bdf0:	4608      	mov	r0, r1
 802bdf2:	602b      	str	r3, [r5, #0]
 802bdf4:	f7d5 fdb8 	bl	8001968 <_isatty>
 802bdf8:	1c43      	adds	r3, r0, #1
 802bdfa:	d102      	bne.n	802be02 <_isatty_r+0x1a>
 802bdfc:	682b      	ldr	r3, [r5, #0]
 802bdfe:	b103      	cbz	r3, 802be02 <_isatty_r+0x1a>
 802be00:	6023      	str	r3, [r4, #0]
 802be02:	bd38      	pop	{r3, r4, r5, pc}
 802be04:	200157f8 	.word	0x200157f8

0802be08 <_malloc_usable_size_r>:
 802be08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802be0c:	1f18      	subs	r0, r3, #4
 802be0e:	2b00      	cmp	r3, #0
 802be10:	bfbc      	itt	lt
 802be12:	580b      	ldrlt	r3, [r1, r0]
 802be14:	18c0      	addlt	r0, r0, r3
 802be16:	4770      	bx	lr

0802be18 <_init>:
 802be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be1a:	bf00      	nop
 802be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be1e:	bc08      	pop	{r3}
 802be20:	469e      	mov	lr, r3
 802be22:	4770      	bx	lr

0802be24 <_fini>:
 802be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be26:	bf00      	nop
 802be28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be2a:	bc08      	pop	{r3}
 802be2c:	469e      	mov	lr, r3
 802be2e:	4770      	bx	lr
